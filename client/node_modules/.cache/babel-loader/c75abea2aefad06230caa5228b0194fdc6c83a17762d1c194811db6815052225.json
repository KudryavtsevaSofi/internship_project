{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sofia\\\\Desktop\\\\\\u0420\\u0435\\u043F\\u043E\\u0437\\u0438\\u0442\\u043E\\u0440\\u0438\\u0439 \\u0426\\u041A\\\\internship_project\\\\src\\\\components\\\\BasicTable.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';\nimport planets from '../server/database/data.json';\nimport { COLUMNS } from \"./columns\";\nimport './table.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BasicTable = () => {\n  _s();\n  // Мемоизация колонок и данных для оптимизации производительности\n  const columns = useMemo(() => [...COLUMNS.filter(col => col.accessorKey !== 'suitabilityId'),\n  // Удаляем старую колонку suitabilityId\n  {\n    id: 'suitability',\n    // Добавляем уникальный id для колонки\n    header: 'Suitability',\n    accessorFn: row => {\n      // Маппинг suitabilityId на название из planets.suitabilities\n      const suitability = planets.suitabilities.find(s => s.id === row.suitabilityId);\n      return suitability ? suitability.name : row.suitabilityId;\n    }\n  }], []);\n  const data = useMemo(() => planets.planets, []); // Используем planets.planets вместо всего объекта\n\n  // Используем useReactTable с getCoreRowModel для базовой функциональности\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())\n        }, header.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this))\n      }, headerGroup.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: flexRender(cell.column.columnDef.cell, cell.getContext())\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this))\n      }, row.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n};\n_s(BasicTable, \"D6Rp7iZbFJ+5cuJqrb4rMdLFbaM=\", false, function () {\n  return [useReactTable];\n});\n_c = BasicTable;\nvar _c;\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"names":["React","useMemo","useReactTable","getCoreRowModel","flexRender","planets","COLUMNS","jsxDEV","_jsxDEV","BasicTable","_s","columns","filter","col","accessorKey","id","header","accessorFn","row","suitability","suitabilities","find","s","suitabilityId","name","data","table","children","getHeaderGroups","map","headerGroup","headers","isPlaceholder","column","columnDef","getContext","fileName","_jsxFileName","lineNumber","columnNumber","getRowModel","rows","getVisibleCells","cell","_c","$RefreshReg$"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/src/components/BasicTable.js"],"sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table'\r\nimport planets from '../server/database/data.json'\r\nimport { COLUMNS } from \"./columns\";\r\nimport './table.css';\r\n\r\nexport const BasicTable = () => {\r\n    // Мемоизация колонок и данных для оптимизации производительности\r\n    const columns = useMemo(\r\n      () => [\r\n        ...COLUMNS.filter((col) => col.accessorKey !== 'suitabilityId'), // Удаляем старую колонку suitabilityId\r\n        {\r\n          id: 'suitability', // Добавляем уникальный id для колонки\r\n          header: 'Suitability',\r\n          accessorFn: (row) => {\r\n            // Маппинг suitabilityId на название из planets.suitabilities\r\n            const suitability = planets.suitabilities.find(\r\n              (s) => s.id === row.suitabilityId\r\n            );\r\n            return suitability ? suitability.name : row.suitabilityId;\r\n          },\r\n        },\r\n      ],\r\n      []\r\n    );\r\n    const data = useMemo(() => planets.planets, []); // Используем planets.planets вместо всего объекта\r\n  \r\n    // Используем useReactTable с getCoreRowModel для базовой функциональности\r\n    const table = useReactTable({\r\n      data,\r\n      columns,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n  \r\n    return (\r\n      <table>\r\n        <thead>\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <tr key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <th key={header.id}>\r\n                  {header.isPlaceholder\r\n                    ? null\r\n                    : flexRender(header.column.columnDef.header, header.getContext())}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody>\r\n          {table.getRowModel().rows.map((row) => (\r\n            <tr key={row.id}>\r\n              {row.getVisibleCells().map((cell) => (\r\n                <td key={cell.id}>\r\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,SAASC,aAAa,EAAEC,eAAe,EAAEC,UAAU,QAAQ,uBAAuB;AAClF,OAAOC,OAAO,MAAM,8BAA8B;AAClD,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAMC,OAAO,GAAGV,OAAO,CACrB,MAAM,CACJ,GAAGK,OAAO,CAACM,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,KAAK,eAAe,CAAC;EAAE;EACjE;IACEC,EAAE,EAAE,aAAa;IAAE;IACnBC,MAAM,EAAE,aAAa;IACrBC,UAAU,EAAGC,GAAG,IAAK;MACnB;MACA,MAAMC,WAAW,GAAGd,OAAO,CAACe,aAAa,CAACC,IAAI,CAC3CC,CAAC,IAAKA,CAAC,CAACP,EAAE,KAAKG,GAAG,CAACK,aACtB,CAAC;MACD,OAAOJ,WAAW,GAAGA,WAAW,CAACK,IAAI,GAAGN,GAAG,CAACK,aAAa;IAC3D;EACF,CAAC,CACF,EACD,EACF,CAAC;EACD,MAAME,IAAI,GAAGxB,OAAO,CAAC,MAAMI,OAAO,CAACA,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;;EAEjD;EACA,MAAMqB,KAAK,GAAGxB,aAAa,CAAC;IAC1BuB,IAAI;IACJd,OAAO;IACPR,eAAe,EAAEA,eAAe,CAAC;EACnC,CAAC,CAAC;EAEF,oBACEK,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EACGD,KAAK,CAACE,eAAe,CAAC,CAAC,CAACC,GAAG,CAAEC,WAAW,iBACvCtB,OAAA;QAAAmB,QAAA,EACGG,WAAW,CAACC,OAAO,CAACF,GAAG,CAAEb,MAAM,iBAC9BR,OAAA;UAAAmB,QAAA,EACGX,MAAM,CAACgB,aAAa,GACjB,IAAI,GACJ5B,UAAU,CAACY,MAAM,CAACiB,MAAM,CAACC,SAAS,CAAClB,MAAM,EAAEA,MAAM,CAACmB,UAAU,CAAC,CAAC;QAAC,GAH5DnB,MAAM,CAACD,EAAE;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAId,CACL;MAAC,GAPKT,WAAW,CAACf,EAAE;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQnB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACR/B,OAAA;MAAAmB,QAAA,EACGD,KAAK,CAACc,WAAW,CAAC,CAAC,CAACC,IAAI,CAACZ,GAAG,CAAEX,GAAG,iBAChCV,OAAA;QAAAmB,QAAA,EACGT,GAAG,CAACwB,eAAe,CAAC,CAAC,CAACb,GAAG,CAAEc,IAAI,iBAC9BnC,OAAA;UAAAmB,QAAA,EACGvB,UAAU,CAACuC,IAAI,CAACV,MAAM,CAACC,SAAS,CAACS,IAAI,EAAEA,IAAI,CAACR,UAAU,CAAC,CAAC;QAAC,GADnDQ,IAAI,CAAC5B,EAAE;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACL;MAAC,GALKrB,GAAG,CAACH,EAAE;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMX,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ,CAAC;AAAC7B,EAAA,CAxDSD,UAAU;EAAA,QAsBLP,aAAa;AAAA;AAAA0C,EAAA,GAtBlBnC,UAAU;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}