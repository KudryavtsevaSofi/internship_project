{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/data_grid/export/m_export.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport \"../../../../ui/button\";\nimport \"../../../../ui/drop_down_button\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport $ from \"../../../../core/renderer\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { getDefaultAlignment } from \"../../../../core/utils/position\";\nimport { format } from \"../../../../core/utils/string\";\nimport { isDefined, isFunction } from \"../../../../core/utils/type\";\nimport List from \"../../../../ui/list_light\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport { prepareItems } from \"../../../grids/grid_core/m_export\";\nimport dataGridCore from \"../m_core\";\nconst DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\nconst DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\nconst DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = \"exportButton\";\nconst DATAGRID_EXPORT_ICON = \"export\";\nconst DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\nconst DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\nconst DATAGRID_PDF_EXPORT_ICON = \"pdffile\";\nexport class DataProvider {\n  constructor(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\n    this._exportController = exportController;\n    this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n    this._selectedRowsOnly = selectedRowsOnly;\n  }\n  _getGroupValue(item) {\n    const {\n      key: key,\n      data: data,\n      rowType: rowType,\n      groupIndex: groupIndex,\n      summaryCells: summaryCells\n    } = item;\n    const groupColumn = this._options.groupColumns[groupIndex];\n    const value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\n    let result = `${groupColumn.caption}: ${dataGridCore.formatValue(value, groupColumn)}`;\n    if (summaryCells && summaryCells[0] && summaryCells[0].length) {\n      result += ` ${dataGridCore.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts)}`;\n    }\n    return result;\n  }\n  _correctCellIndex(cellIndex) {\n    return cellIndex;\n  }\n  _initOptions() {\n    const exportController = this._exportController;\n    const groupColumns = exportController._columnsController.getGroupColumns();\n    this._options = {\n      columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\n      groupColumns: groupColumns,\n      items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\n      isHeadersVisible: exportController.option(\"showColumnHeaders\"),\n      summaryTexts: exportController.option(\"summary.texts\"),\n      rtlEnabled: exportController.option(\"rtlEnabled\")\n    };\n  }\n  getHeaderStyles() {\n    return [{\n      bold: true,\n      alignment: \"center\"\n    }, {\n      bold: true,\n      alignment: \"left\"\n    }, {\n      bold: true,\n      alignment: \"right\"\n    }];\n  }\n  getGroupRowStyle() {\n    return {\n      bold: true,\n      alignment: getDefaultAlignment(this._options.rtlEnabled)\n    };\n  }\n  getColumnStyles() {\n    const columnStyles = [];\n    this.getColumns().forEach(column => {\n      columnStyles.push({\n        alignment: column.alignment || \"left\",\n        format: column.format,\n        dataType: column.dataType\n      });\n    });\n    return columnStyles;\n  }\n  getStyles() {\n    return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()];\n  }\n  _getTotalCellStyleId(cellIndex) {\n    var _this$getColumns$cell;\n    const alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || \"right\";\n    return this.getHeaderStyles().map(style => style.alignment).indexOf(alignment);\n  }\n  getStyleId(rowIndex, cellIndex) {\n    if (rowIndex < this.getHeaderRowCount()) {\n      return 0;\n    }\n    if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\n      return this._getTotalCellStyleId(cellIndex);\n    }\n    if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\n      return this.getHeaderStyles().length + this.getColumns().length;\n    }\n    return cellIndex + this.getHeaderStyles().length;\n  }\n  getColumns(getColumnsByAllRows) {\n    const {\n      columns: columns\n    } = this._options;\n    return getColumnsByAllRows ? columns : columns[columns.length - 1];\n  }\n  getColumnsWidths() {\n    const columns = this.getColumns();\n    return isDefined(columns) ? columns.map(c => c.width) : void 0;\n  }\n  getRowsCount() {\n    return this._options.items.length + this.getHeaderRowCount();\n  }\n  getHeaderRowCount() {\n    if (this.isHeadersVisible()) {\n      return this._options.columns.length - 1;\n    }\n    return 0;\n  }\n  isGroupRow(rowIndex) {\n    return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType;\n  }\n  getGroupLevel(rowIndex) {\n    const item = this._options.items[rowIndex - this.getHeaderRowCount()];\n    const groupIndex = item && item.groupIndex;\n    if (item && \"totalFooter\" === item.rowType) {\n      return 0;\n    }\n    return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length;\n  }\n  getCellType(rowIndex, cellIndex) {\n    const columns = this.getColumns();\n    if (rowIndex < this.getHeaderRowCount()) {\n      return \"string\";\n    }\n    rowIndex -= this.getHeaderRowCount();\n    if (cellIndex < columns.length) {\n      const item = this._options.items.length && this._options.items[rowIndex];\n      const column = columns[cellIndex];\n      if (item && \"data\" === item.rowType) {\n        if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\n          return isDefined(column.lookup) ? column.lookup.dataType : column.dataType;\n        }\n      }\n      return \"string\";\n    }\n  }\n  ready() {\n    this._initOptions();\n    const options = this._options;\n    return when(options.items).done(items => {\n      options.items = items;\n    }).fail(() => {\n      options.items = [];\n    });\n  }\n  _convertFromGridGroupSummaryItems(gridGroupSummaryItems) {\n    if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\n      return gridGroupSummaryItems.map(item => ({\n        value: item.value,\n        name: item.name\n      }));\n    }\n  }\n  getCellData(rowIndex, cellIndex, isExcelJS) {\n    let value;\n    let column;\n    const result = {\n      cellSourceData: {},\n      value: value\n    };\n    const columns = this.getColumns();\n    const correctedCellIndex = this._correctCellIndex(cellIndex);\n    if (rowIndex < this.getHeaderRowCount()) {\n      const columnsRow = this.getColumns(true)[rowIndex];\n      column = columnsRow[cellIndex];\n      result.cellSourceData.rowType = \"header\";\n      result.cellSourceData.column = column && column.gridColumn;\n      result.value = column && column.caption;\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n      const item = this._options.items.length && this._options.items[rowIndex];\n      if (item) {\n        const itemValues = item.values;\n        result.cellSourceData.rowType = item.rowType;\n        result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\n        switch (item.rowType) {\n          case \"groupFooter\":\n          case \"totalFooter\":\n            if (correctedCellIndex < itemValues.length) {\n              value = itemValues[correctedCellIndex];\n              if (isDefined(value)) {\n                result.cellSourceData.value = value.value;\n                result.cellSourceData.totalSummaryItemName = value.name;\n                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts);\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n            break;\n          case \"group\":\n            result.cellSourceData.groupIndex = item.groupIndex;\n            if (cellIndex < 1) {\n              result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\n              result.cellSourceData.value = item.key[item.groupIndex];\n              result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\n              result.value = this._getGroupValue(item);\n            } else {\n              const summaryItems = item.values[correctedCellIndex];\n              if (Array.isArray(summaryItems)) {\n                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\n                value = \"\";\n                for (let i = 0; i < summaryItems.length; i++) {\n                  value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts);\n                }\n                result.value = value;\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n            break;\n          default:\n            column = columns[cellIndex];\n            if (column) {\n              const value = itemValues[correctedCellIndex];\n              const displayValue = dataGridCore.getDisplayValue(column, value, item.data, item.rowType);\n              if (!isFinite(displayValue) || isDefined(column.customizeText)) {\n                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\n                  result.value = displayValue;\n                } else {\n                  result.value = dataGridCore.formatValue(displayValue, column);\n                }\n              } else {\n                result.value = displayValue;\n              }\n              result.cellSourceData.value = value;\n            }\n            result.cellSourceData.data = item.data;\n        }\n      }\n    }\n    return result;\n  }\n  isHeadersVisible() {\n    return this._options.isHeadersVisible;\n  }\n  isTotalCell(rowIndex, cellIndex) {\n    const {\n      items: items\n    } = this._options;\n    const item = items[rowIndex];\n    const correctCellIndex = this._correctCellIndex(cellIndex);\n    const isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\n    return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn;\n  }\n  getCellMerging(rowIndex, cellIndex) {\n    const {\n      columns: columns\n    } = this._options;\n    const column = columns[rowIndex] && columns[rowIndex][cellIndex];\n    return column ? {\n      colspan: (column.exportColspan || 1) - 1,\n      rowspan: (column.rowspan || 1) - 1\n    } : {\n      colspan: 0,\n      rowspan: 0\n    };\n  }\n  getFrozenArea() {\n    return {\n      x: 0,\n      y: this.getHeaderRowCount()\n    };\n  }\n}\nexport class ExportController extends dataGridCore.ViewController {\n  init() {\n    this.throwWarningIfNoOnExportingEvent();\n    this._columnsController = this.getController(\"columns\");\n    this._dataController = this.getController(\"data\");\n    this._selectionController = this.getController(\"selection\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._headersView = this.getView(\"columnHeadersView\");\n    this.createAction(\"onExporting\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  }\n  _getEmptyCell() {\n    return {\n      caption: \"\",\n      colspan: 1,\n      rowspan: 1\n    };\n  }\n  _updateColumnWidth(column, width) {\n    column.width = width;\n  }\n  _getColumns(initialColumnWidthsByColumnIndex) {\n    let result = [];\n    let i;\n    let columns;\n    const columnsController = this._columnsController;\n    const rowCount = columnsController.getRowCount();\n    for (i = 0; i <= rowCount; i++) {\n      const currentHeaderRow = [];\n      columns = columnsController.getVisibleColumns(i, true);\n      let columnWidthsByColumnIndex;\n      if (i === rowCount) {\n        if (this._updateLockCount) {\n          columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n        } else {\n          const columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n          if (columnWidths && columnWidths.length) {\n            columnWidthsByColumnIndex = {};\n            for (let i = 0; i < columns.length; i++) {\n              columnWidthsByColumnIndex[columns[i].index] = columnWidths[i];\n            }\n          }\n        }\n      }\n      for (let j = 0; j < columns.length; j++) {\n        const column = extend({}, columns[j], {\n          dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\n          gridColumn: columns[j]\n        });\n        if (this._needColumnExporting(column)) {\n          const currentColspan = this._calculateExportColspan(column);\n          if (isDefined(currentColspan)) {\n            column.exportColspan = currentColspan;\n          }\n          if (columnWidthsByColumnIndex) {\n            this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index]);\n          }\n          currentHeaderRow.push(column);\n        }\n      }\n      result.push(currentHeaderRow);\n    }\n    columns = result[rowCount];\n    result = prepareItems(result.slice(0, -1), this._getEmptyCell());\n    result.push(columns);\n    return result;\n  }\n  _calculateExportColspan(column) {\n    if (!column.isBand) {\n      return;\n    }\n    const childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\n    if (!isDefined(childColumns)) {\n      return;\n    }\n    return childColumns.reduce((result, childColumn) => {\n      if (this._needColumnExporting(childColumn)) {\n        return result + (this._calculateExportColspan(childColumn) || 1);\n      }\n      return result;\n    }, 0);\n  }\n  _needColumnExporting(column) {\n    return !column.command && (column.allowExporting || void 0 === column.allowExporting);\n  }\n  _getFooterSummaryItems(summaryCells, isTotal) {\n    const result = [];\n    let estimatedItemsCount = 1;\n    let i = 0;\n    do {\n      const values = [];\n      for (let j = 0; j < summaryCells.length; j++) {\n        const summaryCell = summaryCells[j];\n        const itemsLength = summaryCell.length;\n        if (estimatedItemsCount < itemsLength) {\n          estimatedItemsCount = itemsLength;\n        }\n        values.push(summaryCell[i]);\n      }\n      result.push({\n        values: values,\n        rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\n      });\n    } while (i++ < estimatedItemsCount - 1);\n    return result;\n  }\n  _hasSummaryGroupFooters() {\n    const groupItems = this.option(\"summary.groupItems\");\n    if (isDefined(groupItems)) {\n      for (let i = 0; i < groupItems.length; i++) {\n        if (groupItems[i].showInGroupFooter) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  _getItemsWithSummaryGroupFooters(sourceItems) {\n    let result = [];\n    let beforeGroupFooterItems = [];\n    let groupFooterItems = [];\n    for (let i = 0; i < sourceItems.length; i++) {\n      const item = sourceItems[i];\n      if (\"groupFooter\" === item.rowType) {\n        groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\n        result = result.concat(beforeGroupFooterItems, groupFooterItems);\n        beforeGroupFooterItems = [];\n      } else {\n        beforeGroupFooterItems.push(item);\n      }\n    }\n    return result.length ? result : beforeGroupFooterItems;\n  }\n  _updateGroupValuesWithSummaryByColumn(sourceItems) {\n    let summaryValues = [];\n    for (let i = 0; i < sourceItems.length; i++) {\n      const item = sourceItems[i];\n      const {\n        summaryCells: summaryCells\n      } = item;\n      if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\n        const groupColumnCount = item.values.length;\n        for (let j = 1; j < summaryCells.length; j++) {\n          for (let k = 0; k < summaryCells[j].length; k++) {\n            const summaryItem = summaryCells[j][k];\n            if (summaryItem && summaryItem.alignByColumn) {\n              if (!Array.isArray(summaryValues[j - groupColumnCount])) {\n                summaryValues[j - groupColumnCount] = [];\n              }\n              summaryValues[j - groupColumnCount].push(summaryItem);\n            }\n          }\n        }\n        if (summaryValues.length > 0) {\n          item.values.push(...summaryValues);\n          summaryValues = [];\n        }\n      }\n    }\n  }\n  _processUnExportedItems(items) {\n    const columns = this._columnsController.getVisibleColumns(null, true);\n    const groupColumns = this._columnsController.getGroupColumns();\n    let values;\n    let summaryCells;\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      let isCommand = false;\n      values = [];\n      summaryCells = [];\n      for (let j = 0; j < columns.length; j++) {\n        const column = columns[j];\n        isCommand || (isCommand = [\"detailExpand\", \"buttons\"].includes(column.type));\n        if (this._needColumnExporting(column)) {\n          if (item.values) {\n            if (\"group\" === item.rowType && !values.length) {\n              values.push(item.key[item.groupIndex]);\n            } else {\n              values.push(item.values[j]);\n            }\n          }\n          if (item.summaryCells) {\n            if (\"group\" === item.rowType && !summaryCells.length) {\n              const index = j - groupColumns.length + item.groupIndex;\n              summaryCells.push(item.summaryCells[isCommand ? index : index + 1]);\n            } else {\n              summaryCells.push(item.summaryCells[j]);\n            }\n          }\n        }\n      }\n      if (values.length) {\n        item.values = values;\n      }\n      if (summaryCells.length) {\n        item.summaryCells = summaryCells;\n      }\n    }\n  }\n  _getAllItems(data) {\n    let skipFilter = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    const that = this;\n    const d = new Deferred();\n    const footerItems = this._dataController.footerItems();\n    const totalItem = footerItems.length && footerItems[0];\n    const summaryTotalItems = that.option(\"summary.totalItems\");\n    let summaryCells;\n    when(data).done(data => {\n      this._dataController.loadAll(data, skipFilter).done((sourceItems, totalAggregates) => {\n        that._updateGroupValuesWithSummaryByColumn(sourceItems);\n        if (that._hasSummaryGroupFooters()) {\n          sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems);\n        }\n        summaryCells = totalItem && totalItem.summaryCells;\n        if (isDefined(totalAggregates) && summaryTotalItems) {\n          summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n        }\n        const summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\n        if (summaryItems) {\n          sourceItems = sourceItems.concat(summaryItems);\n        }\n        that._processUnExportedItems(sourceItems);\n        d.resolve(sourceItems);\n      }).fail(d.reject);\n    }).fail(d.reject);\n    return d;\n  }\n  _getSummaryCells(summaryTotalItems, totalAggregates) {\n    return this._dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, this._columnsController.getVisibleColumns(null, true), (summaryItem, column) => this._dataController._isDataColumn(column) ? column.index : -1);\n  }\n  _getSelectedItems() {\n    if (this.needLoadItemsOnExportingSelectedItems()) {\n      return this._getAllItems(this._selectionController.loadSelectedItemsWithFilter(), true);\n    }\n    return this._getAllItems(this._selectionController.getSelectedRowsData());\n  }\n  _getColumnWidths(headersView, rowsView) {\n    return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths();\n  }\n  throwWarningIfNoOnExportingEvent() {\n    var _this$component$hasAc, _this$component;\n    const hasOnExporting = null === (_this$component$hasAc = (_this$component = this.component).hasActionSubscription) || void 0 === _this$component$hasAc ? void 0 : _this$component$hasAc.call(_this$component, \"onExporting\");\n    if (this.option(\"export.enabled\") && !hasOnExporting) {\n      errors.log(\"W1024\");\n    }\n  }\n  callbackNames() {\n    return [\"selectionOnlyChanged\"];\n  }\n  getDataProvider(selectedRowsOnly) {\n    const columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n    let initialColumnWidthsByColumnIndex;\n    if (columnWidths && columnWidths.length) {\n      initialColumnWidthsByColumnIndex = {};\n      const columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\n      for (let i = 0; i < columnsLastRowVisibleColumns.length; i++) {\n        initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i];\n      }\n    }\n    return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly);\n  }\n  exportTo(selectedRowsOnly, format) {\n    this._selectionOnly = selectedRowsOnly;\n    const onExporting = this.getAction(\"onExporting\");\n    const eventArgs = {\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      selectedRowsOnly: !!selectedRowsOnly,\n      format: format,\n      fileName: \"DataGrid\",\n      cancel: false\n    };\n    isFunction(onExporting) && onExporting(eventArgs);\n  }\n  publicMethods() {\n    return [\"getDataProvider\"];\n  }\n  selectionOnly(value) {\n    if (isDefined(value)) {\n      this._isSelectedRows = value;\n      this.selectionOnlyChanged.fire();\n    } else {\n      return this._isSelectedRows;\n    }\n  }\n  optionChanged(args) {\n    super.optionChanged(args);\n    if (\"export\" === args.name) {\n      this.throwWarningIfNoOnExportingEvent();\n    }\n  }\n  needLoadItemsOnExportingSelectedItems() {\n    return this.option(\"loadItemsOnExportingSelectedItems\") ?? this._dataController._dataSource.remoteOperations().filtering;\n  }\n}\nconst editing = Base => class extends Base {\n  callbackNames() {\n    const callbackList = super.callbackNames();\n    return isDefined(callbackList) ? callbackList.push(\"editingButtonsUpdated\") : [\"editingButtonsUpdated\"];\n  }\n  _updateEditButtons() {\n    super._updateEditButtons();\n    this.editingButtonsUpdated.fire();\n  }\n};\nconst headerPanel = Base => class extends Base {\n  _getToolbarItems() {\n    const items = super._getToolbarItems();\n    const exportButton = this._getExportToolbarButton();\n    if (exportButton) {\n      items.push(exportButton);\n      this._correctItemsPosition(items);\n    }\n    return items;\n  }\n  _getExportToolbarButton() {\n    const items = this._getExportToolbarItems();\n    if (0 === items.length) {\n      return null;\n    }\n    const disabled = this._needDisableExportButton();\n    const toolbarButtonOptions = {\n      name: \"exportButton\",\n      location: \"after\",\n      locateInMenu: \"auto\",\n      sortIndex: 30,\n      options: {\n        items: items\n      },\n      disabled: disabled\n    };\n    if (1 === items.length) {\n      const widgetOptions = _extends({}, items[0], {\n        hint: items[0].text,\n        elementAttr: {\n          class: \"dx-datagrid-export-button\"\n        }\n      });\n      toolbarButtonOptions.widget = \"dxButton\";\n      toolbarButtonOptions.showText = \"inMenu\";\n      toolbarButtonOptions.options = widgetOptions;\n    } else {\n      const widgetOptions = {\n        icon: \"export\",\n        displayExpr: \"text\",\n        items: items,\n        hint: this.option(\"export.texts.exportTo\"),\n        elementAttr: {\n          class: \"dx-datagrid-export-button\"\n        },\n        dropDownOptions: {\n          width: \"auto\",\n          _wrapperClassExternal: \"dx-datagrid-export-menu\"\n        }\n      };\n      toolbarButtonOptions.options = widgetOptions;\n      toolbarButtonOptions.widget = \"dxDropDownButton\";\n      toolbarButtonOptions.menuItemTemplate = (_data, _index, container) => {\n        this._createComponent($(container), List, {\n          items: items\n        });\n      };\n    }\n    return toolbarButtonOptions;\n  }\n  _getExportToolbarItems() {\n    const exportOptions = this.option(\"export\");\n    const texts = this.option(\"export.texts\");\n    const formats = this.option(\"export.formats\") ?? [];\n    if (!exportOptions.enabled) {\n      return [];\n    }\n    const items = [];\n    formats.forEach(formatType => {\n      let formatName = formatType.toUpperCase();\n      let exportAllIcon = \"export\";\n      if (\"xlsx\" === formatType) {\n        formatName = \"Excel\";\n        exportAllIcon = \"xlsxfile\";\n      }\n      if (\"pdf\" === formatType) {\n        exportAllIcon = \"pdffile\";\n      }\n      items.push({\n        text: format(texts.exportAll, formatName),\n        icon: exportAllIcon,\n        onClick: () => {\n          this._exportController.exportTo(false, formatType);\n        }\n      });\n      if (exportOptions.allowExportSelectedData) {\n        items.push({\n          text: format(texts.exportSelectedRows, formatName),\n          icon: \"exportselected\",\n          onClick: () => {\n            this._exportController.exportTo(true, formatType);\n          }\n        });\n      }\n    });\n    return items;\n  }\n  _correctItemsPosition(items) {\n    items.sort((itemA, itemB) => itemA.sortIndex - itemB.sortIndex);\n  }\n  _isExportButtonVisible() {\n    return this.option(\"export.enabled\");\n  }\n  optionChanged(args) {\n    super.optionChanged(args);\n    if (\"export\" === args.name) {\n      args.handled = true;\n      this._invalidate();\n    }\n  }\n  _needDisableExportButton() {\n    const isDataColumnsInvisible = !this._columnsController.hasVisibleDataColumns();\n    const hasUnsavedChanges = this._editingController.hasChanges();\n    return isDataColumnsInvisible || hasUnsavedChanges;\n  }\n  _columnOptionChanged(e) {\n    super._columnOptionChanged(e);\n    const isColumnLocationChanged = dataGridCore.checkChanges(e.optionNames, [\"groupIndex\", \"visible\", \"all\"]);\n    if (isColumnLocationChanged) {\n      const disabled = this._needDisableExportButton();\n      this.setToolbarItemDisabled(\"exportButton\", disabled);\n    }\n  }\n  init() {\n    super.init();\n    this._exportController = this.getController(\"export\");\n    this._editingController.editingButtonsUpdated.add(() => {\n      const disabled = this._needDisableExportButton();\n      this.setToolbarItemDisabled(\"exportButton\", disabled);\n    });\n  }\n};\ndataGridCore.registerModule(\"export\", {\n  defaultOptions: () => ({\n    export: {\n      enabled: false,\n      fileName: \"DataGrid\",\n      formats: [\"xlsx\"],\n      allowExportSelectedData: false,\n      texts: {\n        exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\n        exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\n        exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\n      }\n    }\n  }),\n  controllers: {\n    export: ExportController\n  },\n  extenders: {\n    controllers: {\n      editing: editing\n    },\n    views: {\n      headerPanel: headerPanel\n    }\n  }\n});","map":{"version":3,"names":["_extends","messageLocalization","$","Deferred","when","extend","getDefaultAlignment","format","isDefined","isFunction","List","errors","prepareItems","dataGridCore","DATAGRID_EXPORT_MENU_CLASS","DATAGRID_EXPORT_BUTTON_CLASS","DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME","DATAGRID_EXPORT_ICON","DATAGRID_EXPORT_EXCEL_ICON","DATAGRID_EXPORT_SELECTED_ICON","DATAGRID_PDF_EXPORT_ICON","DataProvider","constructor","exportController","initialColumnWidthsByColumnIndex","selectedRowsOnly","_exportController","_initialColumnWidthsByColumnIndex","_selectedRowsOnly","_getGroupValue","item","key","data","rowType","groupIndex","summaryCells","groupColumn","_options","groupColumns","value","getDisplayValue","deserializeValue","result","caption","formatValue","length","getGroupRowSummaryText","summaryTexts","_correctCellIndex","cellIndex","_initOptions","_columnsController","getGroupColumns","columns","_getColumns","items","_selectionOnly","_getSelectedItems","_getAllItems","isHeadersVisible","option","rtlEnabled","getHeaderStyles","bold","alignment","getGroupRowStyle","getColumnStyles","columnStyles","getColumns","forEach","column","push","dataType","getStyles","_getTotalCellStyleId","_this$getColumns$cell","map","style","indexOf","getStyleId","rowIndex","getHeaderRowCount","isTotalCell","isGroupRow","getColumnsByAllRows","getColumnsWidths","c","width","getRowsCount","getGroupLevel","getCellType","isFinite","values","customizeText","lookup","ready","options","done","fail","_convertFromGridGroupSummaryItems","gridGroupSummaryItems","name","getCellData","isExcelJS","cellSourceData","correctedCellIndex","columnsRow","gridColumn","itemValues","totalSummaryItemName","getSummaryText","groupSummaryItems","summaryItems","Array","isArray","i","displayValue","getCustomizeTextByDataType","correctCellIndex","isSummaryAlignByColumn","alignByColumn","getCellMerging","colspan","exportColspan","rowspan","getFrozenArea","x","y","ExportController","ViewController","init","throwWarningIfNoOnExportingEvent","getController","_dataController","_selectionController","_rowsView","getView","_headersView","createAction","excludeValidators","_getEmptyCell","_updateColumnWidth","columnsController","rowCount","getRowCount","currentHeaderRow","getVisibleColumns","columnWidthsByColumnIndex","_updateLockCount","columnWidths","_getColumnWidths","index","j","_needColumnExporting","currentColspan","_calculateExportColspan","slice","isBand","childColumns","getChildrenByBandColumn","reduce","childColumn","command","allowExporting","_getFooterSummaryItems","isTotal","estimatedItemsCount","summaryCell","itemsLength","_hasSummaryGroupFooters","groupItems","showInGroupFooter","_getItemsWithSummaryGroupFooters","sourceItems","beforeGroupFooterItems","groupFooterItems","concat","_updateGroupValuesWithSummaryByColumn","summaryValues","groupColumnCount","k","summaryItem","_processUnExportedItems","isCommand","includes","type","skipFilter","arguments","that","d","footerItems","totalItem","summaryTotalItems","loadAll","totalAggregates","_getSummaryCells","resolve","reject","_calculateSummaryCells","_isDataColumn","needLoadItemsOnExportingSelectedItems","loadSelectedItemsWithFilter","getSelectedRowsData","headersView","rowsView","isVisible","getColumnWidths","_this$component$hasAc","_this$component","hasOnExporting","component","hasActionSubscription","call","log","callbackNames","getDataProvider","columnsLastRowVisibleColumns","exportTo","onExporting","getAction","eventArgs","fileName","cancel","publicMethods","selectionOnly","_isSelectedRows","selectionOnlyChanged","fire","optionChanged","args","_dataSource","remoteOperations","filtering","editing","Base","callbackList","_updateEditButtons","editingButtonsUpdated","headerPanel","_getToolbarItems","exportButton","_getExportToolbarButton","_correctItemsPosition","_getExportToolbarItems","disabled","_needDisableExportButton","toolbarButtonOptions","location","locateInMenu","sortIndex","widgetOptions","hint","text","elementAttr","class","widget","showText","icon","displayExpr","dropDownOptions","_wrapperClassExternal","menuItemTemplate","_data","_index","container","_createComponent","exportOptions","texts","formats","enabled","formatType","formatName","toUpperCase","exportAllIcon","exportAll","onClick","allowExportSelectedData","exportSelectedRows","sort","itemA","itemB","_isExportButtonVisible","handled","_invalidate","isDataColumnsInvisible","hasVisibleDataColumns","hasUnsavedChanges","_editingController","hasChanges","_columnOptionChanged","e","isColumnLocationChanged","checkChanges","optionNames","setToolbarItemDisabled","add","registerModule","defaultOptions","export","controllers","extenders","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/data_grid/export/m_export.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/data_grid/export/m_export.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport \"../../../../ui/button\";\r\nimport \"../../../../ui/drop_down_button\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    getDefaultAlignment\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    format\r\n} from \"../../../../core/utils/string\";\r\nimport {\r\n    isDefined,\r\n    isFunction\r\n} from \"../../../../core/utils/type\";\r\nimport List from \"../../../../ui/list_light\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport {\r\n    prepareItems\r\n} from \"../../../grids/grid_core/m_export\";\r\nimport dataGridCore from \"../m_core\";\r\nconst DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\r\nconst DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\r\nconst DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = \"exportButton\";\r\nconst DATAGRID_EXPORT_ICON = \"export\";\r\nconst DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\r\nconst DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\r\nconst DATAGRID_PDF_EXPORT_ICON = \"pdffile\";\r\nexport class DataProvider {\r\n    constructor(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\r\n        this._exportController = exportController;\r\n        this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\r\n        this._selectedRowsOnly = selectedRowsOnly\r\n    }\r\n    _getGroupValue(item) {\r\n        const {\r\n            key: key,\r\n            data: data,\r\n            rowType: rowType,\r\n            groupIndex: groupIndex,\r\n            summaryCells: summaryCells\r\n        } = item;\r\n        const groupColumn = this._options.groupColumns[groupIndex];\r\n        const value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\r\n        let result = `${groupColumn.caption}: ${dataGridCore.formatValue(value,groupColumn)}`;\r\n        if (summaryCells && summaryCells[0] && summaryCells[0].length) {\r\n            result += ` ${dataGridCore.getGroupRowSummaryText(summaryCells[0],this._options.summaryTexts)}`\r\n        }\r\n        return result\r\n    }\r\n    _correctCellIndex(cellIndex) {\r\n        return cellIndex\r\n    }\r\n    _initOptions() {\r\n        const exportController = this._exportController;\r\n        const groupColumns = exportController._columnsController.getGroupColumns();\r\n        this._options = {\r\n            columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\r\n            groupColumns: groupColumns,\r\n            items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\r\n            isHeadersVisible: exportController.option(\"showColumnHeaders\"),\r\n            summaryTexts: exportController.option(\"summary.texts\"),\r\n            rtlEnabled: exportController.option(\"rtlEnabled\")\r\n        }\r\n    }\r\n    getHeaderStyles() {\r\n        return [{\r\n            bold: true,\r\n            alignment: \"center\"\r\n        }, {\r\n            bold: true,\r\n            alignment: \"left\"\r\n        }, {\r\n            bold: true,\r\n            alignment: \"right\"\r\n        }]\r\n    }\r\n    getGroupRowStyle() {\r\n        return {\r\n            bold: true,\r\n            alignment: getDefaultAlignment(this._options.rtlEnabled)\r\n        }\r\n    }\r\n    getColumnStyles() {\r\n        const columnStyles = [];\r\n        this.getColumns().forEach((column => {\r\n            columnStyles.push({\r\n                alignment: column.alignment || \"left\",\r\n                format: column.format,\r\n                dataType: column.dataType\r\n            })\r\n        }));\r\n        return columnStyles\r\n    }\r\n    getStyles() {\r\n        return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()]\r\n    }\r\n    _getTotalCellStyleId(cellIndex) {\r\n        var _this$getColumns$cell;\r\n        const alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || \"right\";\r\n        return this.getHeaderStyles().map((style => style.alignment)).indexOf(alignment)\r\n    }\r\n    getStyleId(rowIndex, cellIndex) {\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            return 0\r\n        }\r\n        if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\r\n            return this._getTotalCellStyleId(cellIndex)\r\n        }\r\n        if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\r\n            return this.getHeaderStyles().length + this.getColumns().length\r\n        }\r\n        return cellIndex + this.getHeaderStyles().length\r\n    }\r\n    getColumns(getColumnsByAllRows) {\r\n        const {\r\n            columns: columns\r\n        } = this._options;\r\n        return getColumnsByAllRows ? columns : columns[columns.length - 1]\r\n    }\r\n    getColumnsWidths() {\r\n        const columns = this.getColumns();\r\n        return isDefined(columns) ? columns.map((c => c.width)) : void 0\r\n    }\r\n    getRowsCount() {\r\n        return this._options.items.length + this.getHeaderRowCount()\r\n    }\r\n    getHeaderRowCount() {\r\n        if (this.isHeadersVisible()) {\r\n            return this._options.columns.length - 1\r\n        }\r\n        return 0\r\n    }\r\n    isGroupRow(rowIndex) {\r\n        return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType\r\n    }\r\n    getGroupLevel(rowIndex) {\r\n        const item = this._options.items[rowIndex - this.getHeaderRowCount()];\r\n        const groupIndex = item && item.groupIndex;\r\n        if (item && \"totalFooter\" === item.rowType) {\r\n            return 0\r\n        }\r\n        return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length\r\n    }\r\n    getCellType(rowIndex, cellIndex) {\r\n        const columns = this.getColumns();\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            return \"string\"\r\n        }\r\n        rowIndex -= this.getHeaderRowCount();\r\n        if (cellIndex < columns.length) {\r\n            const item = this._options.items.length && this._options.items[rowIndex];\r\n            const column = columns[cellIndex];\r\n            if (item && \"data\" === item.rowType) {\r\n                if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\r\n                    return isDefined(column.lookup) ? column.lookup.dataType : column.dataType\r\n                }\r\n            }\r\n            return \"string\"\r\n        }\r\n    }\r\n    ready() {\r\n        this._initOptions();\r\n        const options = this._options;\r\n        return when(options.items).done((items => {\r\n            options.items = items\r\n        })).fail((() => {\r\n            options.items = []\r\n        }))\r\n    }\r\n    _convertFromGridGroupSummaryItems(gridGroupSummaryItems) {\r\n        if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\r\n            return gridGroupSummaryItems.map((item => ({\r\n                value: item.value,\r\n                name: item.name\r\n            })))\r\n        }\r\n    }\r\n    getCellData(rowIndex, cellIndex, isExcelJS) {\r\n        let value;\r\n        let column;\r\n        const result = {\r\n            cellSourceData: {},\r\n            value: value\r\n        };\r\n        const columns = this.getColumns();\r\n        const correctedCellIndex = this._correctCellIndex(cellIndex);\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            const columnsRow = this.getColumns(true)[rowIndex];\r\n            column = columnsRow[cellIndex];\r\n            result.cellSourceData.rowType = \"header\";\r\n            result.cellSourceData.column = column && column.gridColumn;\r\n            result.value = column && column.caption\r\n        } else {\r\n            rowIndex -= this.getHeaderRowCount();\r\n            const item = this._options.items.length && this._options.items[rowIndex];\r\n            if (item) {\r\n                const itemValues = item.values;\r\n                result.cellSourceData.rowType = item.rowType;\r\n                result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\r\n                switch (item.rowType) {\r\n                    case \"groupFooter\":\r\n                    case \"totalFooter\":\r\n                        if (correctedCellIndex < itemValues.length) {\r\n                            value = itemValues[correctedCellIndex];\r\n                            if (isDefined(value)) {\r\n                                result.cellSourceData.value = value.value;\r\n                                result.cellSourceData.totalSummaryItemName = value.name;\r\n                                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts)\r\n                            } else {\r\n                                result.cellSourceData.value = void 0\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"group\":\r\n                        result.cellSourceData.groupIndex = item.groupIndex;\r\n                        if (cellIndex < 1) {\r\n                            result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\r\n                            result.cellSourceData.value = item.key[item.groupIndex];\r\n                            result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\r\n                            result.value = this._getGroupValue(item)\r\n                        } else {\r\n                            const summaryItems = item.values[correctedCellIndex];\r\n                            if (Array.isArray(summaryItems)) {\r\n                                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\r\n                                value = \"\";\r\n                                for (let i = 0; i < summaryItems.length; i++) {\r\n                                    value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts)\r\n                                }\r\n                                result.value = value\r\n                            } else {\r\n                                result.cellSourceData.value = void 0\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        column = columns[cellIndex];\r\n                        if (column) {\r\n                            const value = itemValues[correctedCellIndex];\r\n                            const displayValue = dataGridCore.getDisplayValue(column, value, item.data, item.rowType);\r\n                            if (!isFinite(displayValue) || isDefined(column.customizeText)) {\r\n                                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\r\n                                    result.value = displayValue\r\n                                } else {\r\n                                    result.value = dataGridCore.formatValue(displayValue, column)\r\n                                }\r\n                            } else {\r\n                                result.value = displayValue\r\n                            }\r\n                            result.cellSourceData.value = value\r\n                        }\r\n                        result.cellSourceData.data = item.data\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    isHeadersVisible() {\r\n        return this._options.isHeadersVisible\r\n    }\r\n    isTotalCell(rowIndex, cellIndex) {\r\n        const {\r\n            items: items\r\n        } = this._options;\r\n        const item = items[rowIndex];\r\n        const correctCellIndex = this._correctCellIndex(cellIndex);\r\n        const isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\r\n        return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn\r\n    }\r\n    getCellMerging(rowIndex, cellIndex) {\r\n        const {\r\n            columns: columns\r\n        } = this._options;\r\n        const column = columns[rowIndex] && columns[rowIndex][cellIndex];\r\n        return column ? {\r\n            colspan: (column.exportColspan || 1) - 1,\r\n            rowspan: (column.rowspan || 1) - 1\r\n        } : {\r\n            colspan: 0,\r\n            rowspan: 0\r\n        }\r\n    }\r\n    getFrozenArea() {\r\n        return {\r\n            x: 0,\r\n            y: this.getHeaderRowCount()\r\n        }\r\n    }\r\n}\r\nexport class ExportController extends dataGridCore.ViewController {\r\n    init() {\r\n        this.throwWarningIfNoOnExportingEvent();\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._dataController = this.getController(\"data\");\r\n        this._selectionController = this.getController(\"selection\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._headersView = this.getView(\"columnHeadersView\");\r\n        this.createAction(\"onExporting\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        })\r\n    }\r\n    _getEmptyCell() {\r\n        return {\r\n            caption: \"\",\r\n            colspan: 1,\r\n            rowspan: 1\r\n        }\r\n    }\r\n    _updateColumnWidth(column, width) {\r\n        column.width = width\r\n    }\r\n    _getColumns(initialColumnWidthsByColumnIndex) {\r\n        let result = [];\r\n        let i;\r\n        let columns;\r\n        const columnsController = this._columnsController;\r\n        const rowCount = columnsController.getRowCount();\r\n        for (i = 0; i <= rowCount; i++) {\r\n            const currentHeaderRow = [];\r\n            columns = columnsController.getVisibleColumns(i, true);\r\n            let columnWidthsByColumnIndex;\r\n            if (i === rowCount) {\r\n                if (this._updateLockCount) {\r\n                    columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex\r\n                } else {\r\n                    const columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\r\n                    if (columnWidths && columnWidths.length) {\r\n                        columnWidthsByColumnIndex = {};\r\n                        for (let i = 0; i < columns.length; i++) {\r\n                            columnWidthsByColumnIndex[columns[i].index] = columnWidths[i]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let j = 0; j < columns.length; j++) {\r\n                const column = extend({}, columns[j], {\r\n                    dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\r\n                    gridColumn: columns[j]\r\n                });\r\n                if (this._needColumnExporting(column)) {\r\n                    const currentColspan = this._calculateExportColspan(column);\r\n                    if (isDefined(currentColspan)) {\r\n                        column.exportColspan = currentColspan\r\n                    }\r\n                    if (columnWidthsByColumnIndex) {\r\n                        this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index])\r\n                    }\r\n                    currentHeaderRow.push(column)\r\n                }\r\n            }\r\n            result.push(currentHeaderRow)\r\n        }\r\n        columns = result[rowCount];\r\n        result = prepareItems(result.slice(0, -1), this._getEmptyCell());\r\n        result.push(columns);\r\n        return result\r\n    }\r\n    _calculateExportColspan(column) {\r\n        if (!column.isBand) {\r\n            return\r\n        }\r\n        const childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\r\n        if (!isDefined(childColumns)) {\r\n            return\r\n        }\r\n        return childColumns.reduce(((result, childColumn) => {\r\n            if (this._needColumnExporting(childColumn)) {\r\n                return result + (this._calculateExportColspan(childColumn) || 1)\r\n            }\r\n            return result\r\n        }), 0)\r\n    }\r\n    _needColumnExporting(column) {\r\n        return !column.command && (column.allowExporting || void 0 === column.allowExporting)\r\n    }\r\n    _getFooterSummaryItems(summaryCells, isTotal) {\r\n        const result = [];\r\n        let estimatedItemsCount = 1;\r\n        let i = 0;\r\n        do {\r\n            const values = [];\r\n            for (let j = 0; j < summaryCells.length; j++) {\r\n                const summaryCell = summaryCells[j];\r\n                const itemsLength = summaryCell.length;\r\n                if (estimatedItemsCount < itemsLength) {\r\n                    estimatedItemsCount = itemsLength\r\n                }\r\n                values.push(summaryCell[i])\r\n            }\r\n            result.push({\r\n                values: values,\r\n                rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\r\n            })\r\n        } while (i++ < estimatedItemsCount - 1);\r\n        return result\r\n    }\r\n    _hasSummaryGroupFooters() {\r\n        const groupItems = this.option(\"summary.groupItems\");\r\n        if (isDefined(groupItems)) {\r\n            for (let i = 0; i < groupItems.length; i++) {\r\n                if (groupItems[i].showInGroupFooter) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _getItemsWithSummaryGroupFooters(sourceItems) {\r\n        let result = [];\r\n        let beforeGroupFooterItems = [];\r\n        let groupFooterItems = [];\r\n        for (let i = 0; i < sourceItems.length; i++) {\r\n            const item = sourceItems[i];\r\n            if (\"groupFooter\" === item.rowType) {\r\n                groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\r\n                result = result.concat(beforeGroupFooterItems, groupFooterItems);\r\n                beforeGroupFooterItems = []\r\n            } else {\r\n                beforeGroupFooterItems.push(item)\r\n            }\r\n        }\r\n        return result.length ? result : beforeGroupFooterItems\r\n    }\r\n    _updateGroupValuesWithSummaryByColumn(sourceItems) {\r\n        let summaryValues = [];\r\n        for (let i = 0; i < sourceItems.length; i++) {\r\n            const item = sourceItems[i];\r\n            const {\r\n                summaryCells: summaryCells\r\n            } = item;\r\n            if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\r\n                const groupColumnCount = item.values.length;\r\n                for (let j = 1; j < summaryCells.length; j++) {\r\n                    for (let k = 0; k < summaryCells[j].length; k++) {\r\n                        const summaryItem = summaryCells[j][k];\r\n                        if (summaryItem && summaryItem.alignByColumn) {\r\n                            if (!Array.isArray(summaryValues[j - groupColumnCount])) {\r\n                                summaryValues[j - groupColumnCount] = []\r\n                            }\r\n                            summaryValues[j - groupColumnCount].push(summaryItem)\r\n                        }\r\n                    }\r\n                }\r\n                if (summaryValues.length > 0) {\r\n                    item.values.push(...summaryValues);\r\n                    summaryValues = []\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _processUnExportedItems(items) {\r\n        const columns = this._columnsController.getVisibleColumns(null, true);\r\n        const groupColumns = this._columnsController.getGroupColumns();\r\n        let values;\r\n        let summaryCells;\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            let isCommand = false;\r\n            values = [];\r\n            summaryCells = [];\r\n            for (let j = 0; j < columns.length; j++) {\r\n                const column = columns[j];\r\n                isCommand || (isCommand = [\"detailExpand\", \"buttons\"].includes(column.type));\r\n                if (this._needColumnExporting(column)) {\r\n                    if (item.values) {\r\n                        if (\"group\" === item.rowType && !values.length) {\r\n                            values.push(item.key[item.groupIndex])\r\n                        } else {\r\n                            values.push(item.values[j])\r\n                        }\r\n                    }\r\n                    if (item.summaryCells) {\r\n                        if (\"group\" === item.rowType && !summaryCells.length) {\r\n                            const index = j - groupColumns.length + item.groupIndex;\r\n                            summaryCells.push(item.summaryCells[isCommand ? index : index + 1])\r\n                        } else {\r\n                            summaryCells.push(item.summaryCells[j])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (values.length) {\r\n                item.values = values\r\n            }\r\n            if (summaryCells.length) {\r\n                item.summaryCells = summaryCells\r\n            }\r\n        }\r\n    }\r\n    _getAllItems(data) {\r\n        let skipFilter = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        const that = this;\r\n        const d = new Deferred;\r\n        const footerItems = this._dataController.footerItems();\r\n        const totalItem = footerItems.length && footerItems[0];\r\n        const summaryTotalItems = that.option(\"summary.totalItems\");\r\n        let summaryCells;\r\n        when(data).done((data => {\r\n            this._dataController.loadAll(data, skipFilter).done(((sourceItems, totalAggregates) => {\r\n                that._updateGroupValuesWithSummaryByColumn(sourceItems);\r\n                if (that._hasSummaryGroupFooters()) {\r\n                    sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems)\r\n                }\r\n                summaryCells = totalItem && totalItem.summaryCells;\r\n                if (isDefined(totalAggregates) && summaryTotalItems) {\r\n                    summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates)\r\n                }\r\n                const summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\r\n                if (summaryItems) {\r\n                    sourceItems = sourceItems.concat(summaryItems)\r\n                }\r\n                that._processUnExportedItems(sourceItems);\r\n                d.resolve(sourceItems)\r\n            })).fail(d.reject)\r\n        })).fail(d.reject);\r\n        return d\r\n    }\r\n    _getSummaryCells(summaryTotalItems, totalAggregates) {\r\n        return this._dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, this._columnsController.getVisibleColumns(null, true), ((summaryItem, column) => this._dataController._isDataColumn(column) ? column.index : -1))\r\n    }\r\n    _getSelectedItems() {\r\n        if (this.needLoadItemsOnExportingSelectedItems()) {\r\n            return this._getAllItems(this._selectionController.loadSelectedItemsWithFilter(), true)\r\n        }\r\n        return this._getAllItems(this._selectionController.getSelectedRowsData())\r\n    }\r\n    _getColumnWidths(headersView, rowsView) {\r\n        return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths()\r\n    }\r\n    throwWarningIfNoOnExportingEvent() {\r\n        var _this$component$hasAc, _this$component;\r\n        const hasOnExporting = null === (_this$component$hasAc = (_this$component = this.component).hasActionSubscription) || void 0 === _this$component$hasAc ? void 0 : _this$component$hasAc.call(_this$component, \"onExporting\");\r\n        if (this.option(\"export.enabled\") && !hasOnExporting) {\r\n            errors.log(\"W1024\")\r\n        }\r\n    }\r\n    callbackNames() {\r\n        return [\"selectionOnlyChanged\"]\r\n    }\r\n    getDataProvider(selectedRowsOnly) {\r\n        const columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\r\n        let initialColumnWidthsByColumnIndex;\r\n        if (columnWidths && columnWidths.length) {\r\n            initialColumnWidthsByColumnIndex = {};\r\n            const columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\r\n            for (let i = 0; i < columnsLastRowVisibleColumns.length; i++) {\r\n                initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i]\r\n            }\r\n        }\r\n        return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly)\r\n    }\r\n    exportTo(selectedRowsOnly, format) {\r\n        this._selectionOnly = selectedRowsOnly;\r\n        const onExporting = this.getAction(\"onExporting\");\r\n        const eventArgs = {\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            selectedRowsOnly: !!selectedRowsOnly,\r\n            format: format,\r\n            fileName: \"DataGrid\",\r\n            cancel: false\r\n        };\r\n        isFunction(onExporting) && onExporting(eventArgs)\r\n    }\r\n    publicMethods() {\r\n        return [\"getDataProvider\"]\r\n    }\r\n    selectionOnly(value) {\r\n        if (isDefined(value)) {\r\n            this._isSelectedRows = value;\r\n            this.selectionOnlyChanged.fire()\r\n        } else {\r\n            return this._isSelectedRows\r\n        }\r\n    }\r\n    optionChanged(args) {\r\n        super.optionChanged(args);\r\n        if (\"export\" === args.name) {\r\n            this.throwWarningIfNoOnExportingEvent()\r\n        }\r\n    }\r\n    needLoadItemsOnExportingSelectedItems() {\r\n        return this.option(\"loadItemsOnExportingSelectedItems\") ?? this._dataController._dataSource.remoteOperations().filtering\r\n    }\r\n}\r\nconst editing = Base => class extends Base {\r\n    callbackNames() {\r\n        const callbackList = super.callbackNames();\r\n        return isDefined(callbackList) ? callbackList.push(\"editingButtonsUpdated\") : [\"editingButtonsUpdated\"]\r\n    }\r\n    _updateEditButtons() {\r\n        super._updateEditButtons();\r\n        this.editingButtonsUpdated.fire()\r\n    }\r\n};\r\nconst headerPanel = Base => class extends Base {\r\n    _getToolbarItems() {\r\n        const items = super._getToolbarItems();\r\n        const exportButton = this._getExportToolbarButton();\r\n        if (exportButton) {\r\n            items.push(exportButton);\r\n            this._correctItemsPosition(items)\r\n        }\r\n        return items\r\n    }\r\n    _getExportToolbarButton() {\r\n        const items = this._getExportToolbarItems();\r\n        if (0 === items.length) {\r\n            return null\r\n        }\r\n        const disabled = this._needDisableExportButton();\r\n        const toolbarButtonOptions = {\r\n            name: \"exportButton\",\r\n            location: \"after\",\r\n            locateInMenu: \"auto\",\r\n            sortIndex: 30,\r\n            options: {\r\n                items: items\r\n            },\r\n            disabled: disabled\r\n        };\r\n        if (1 === items.length) {\r\n            const widgetOptions = _extends({}, items[0], {\r\n                hint: items[0].text,\r\n                elementAttr: {\r\n                    class: \"dx-datagrid-export-button\"\r\n                }\r\n            });\r\n            toolbarButtonOptions.widget = \"dxButton\";\r\n            toolbarButtonOptions.showText = \"inMenu\";\r\n            toolbarButtonOptions.options = widgetOptions\r\n        } else {\r\n            const widgetOptions = {\r\n                icon: \"export\",\r\n                displayExpr: \"text\",\r\n                items: items,\r\n                hint: this.option(\"export.texts.exportTo\"),\r\n                elementAttr: {\r\n                    class: \"dx-datagrid-export-button\"\r\n                },\r\n                dropDownOptions: {\r\n                    width: \"auto\",\r\n                    _wrapperClassExternal: \"dx-datagrid-export-menu\"\r\n                }\r\n            };\r\n            toolbarButtonOptions.options = widgetOptions;\r\n            toolbarButtonOptions.widget = \"dxDropDownButton\";\r\n            toolbarButtonOptions.menuItemTemplate = (_data, _index, container) => {\r\n                this._createComponent($(container), List, {\r\n                    items: items\r\n                })\r\n            }\r\n        }\r\n        return toolbarButtonOptions\r\n    }\r\n    _getExportToolbarItems() {\r\n        const exportOptions = this.option(\"export\");\r\n        const texts = this.option(\"export.texts\");\r\n        const formats = this.option(\"export.formats\") ?? [];\r\n        if (!exportOptions.enabled) {\r\n            return []\r\n        }\r\n        const items = [];\r\n        formats.forEach((formatType => {\r\n            let formatName = formatType.toUpperCase();\r\n            let exportAllIcon = \"export\";\r\n            if (\"xlsx\" === formatType) {\r\n                formatName = \"Excel\";\r\n                exportAllIcon = \"xlsxfile\"\r\n            }\r\n            if (\"pdf\" === formatType) {\r\n                exportAllIcon = \"pdffile\"\r\n            }\r\n            items.push({\r\n                text: format(texts.exportAll, formatName),\r\n                icon: exportAllIcon,\r\n                onClick: () => {\r\n                    this._exportController.exportTo(false, formatType)\r\n                }\r\n            });\r\n            if (exportOptions.allowExportSelectedData) {\r\n                items.push({\r\n                    text: format(texts.exportSelectedRows, formatName),\r\n                    icon: \"exportselected\",\r\n                    onClick: () => {\r\n                        this._exportController.exportTo(true, formatType)\r\n                    }\r\n                })\r\n            }\r\n        }));\r\n        return items\r\n    }\r\n    _correctItemsPosition(items) {\r\n        items.sort(((itemA, itemB) => itemA.sortIndex - itemB.sortIndex))\r\n    }\r\n    _isExportButtonVisible() {\r\n        return this.option(\"export.enabled\")\r\n    }\r\n    optionChanged(args) {\r\n        super.optionChanged(args);\r\n        if (\"export\" === args.name) {\r\n            args.handled = true;\r\n            this._invalidate()\r\n        }\r\n    }\r\n    _needDisableExportButton() {\r\n        const isDataColumnsInvisible = !this._columnsController.hasVisibleDataColumns();\r\n        const hasUnsavedChanges = this._editingController.hasChanges();\r\n        return isDataColumnsInvisible || hasUnsavedChanges\r\n    }\r\n    _columnOptionChanged(e) {\r\n        super._columnOptionChanged(e);\r\n        const isColumnLocationChanged = dataGridCore.checkChanges(e.optionNames, [\"groupIndex\", \"visible\", \"all\"]);\r\n        if (isColumnLocationChanged) {\r\n            const disabled = this._needDisableExportButton();\r\n            this.setToolbarItemDisabled(\"exportButton\", disabled)\r\n        }\r\n    }\r\n    init() {\r\n        super.init();\r\n        this._exportController = this.getController(\"export\");\r\n        this._editingController.editingButtonsUpdated.add((() => {\r\n            const disabled = this._needDisableExportButton();\r\n            this.setToolbarItemDisabled(\"exportButton\", disabled)\r\n        }))\r\n    }\r\n};\r\ndataGridCore.registerModule(\"export\", {\r\n    defaultOptions: () => ({\r\n        export: {\r\n            enabled: false,\r\n            fileName: \"DataGrid\",\r\n            formats: [\"xlsx\"],\r\n            allowExportSelectedData: false,\r\n            texts: {\r\n                exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\r\n                exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\r\n                exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\r\n            }\r\n        }\r\n    }),\r\n    controllers: {\r\n        export: ExportController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: editing\r\n        },\r\n        views: {\r\n            headerPanel: headerPanel\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}