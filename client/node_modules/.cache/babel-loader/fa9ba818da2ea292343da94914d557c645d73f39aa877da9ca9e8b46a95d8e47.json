{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/data_grid/grouping/m_grouping.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport devices from \"../../../../core/devices\";\nimport $ from \"../../../../core/renderer\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getHeight } from \"../../../../core/utils/size\";\nimport { isDefined, isString } from \"../../../../core/utils/type\";\nimport { restoreFocus, setTabIndex } from \"../../../../ui/shared/accessibility\";\nimport { registerKeyboardAction } from \"../../../grids/grid_core/m_accessibility\";\nimport gridCore from \"../m_core\";\nimport dataSourceAdapterProvider from \"../m_data_source_adapter\";\nimport { GroupingHelper as CollapsedGroupingHelper } from \"./m_grouping_collapsed\";\nimport { GroupingHelper as ExpandedGroupingHelper } from \"./m_grouping_expanded\";\nconst DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\nconst DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\nconst DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\nconst DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\nconst DATAGRID_GROUP_PANEL_CONTAINER_CLASS = \"dx-toolbar-item\";\nconst DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\nconst DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\nconst HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nconst dataSourceAdapterExtender = Base => class extends Base {\n  init() {\n    super.init.apply(this, arguments);\n    this._initGroupingHelper();\n  }\n  _initGroupingHelper(options) {\n    const grouping = this._grouping;\n    const isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\n    const isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\n    const remoteOperations = options ? options.remoteOperations : this.remoteOperations();\n    const isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\n    if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\n      if (!grouping || grouping instanceof CollapsedGroupingHelper) {\n        this._grouping = new ExpandedGroupingHelper(this);\n      }\n    } else if (!grouping || grouping instanceof ExpandedGroupingHelper) {\n      this._grouping = new CollapsedGroupingHelper(this);\n    }\n  }\n  totalItemsCount() {\n    const totalCount = super.totalItemsCount();\n    return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount;\n  }\n  itemsCount() {\n    return this._dataSource.group() ? this._grouping.itemsCount() || 0 : super.itemsCount.apply(this, arguments);\n  }\n  allowCollapseAll() {\n    return this._grouping.allowCollapseAll();\n  }\n  isGroupItemCountable(item) {\n    return this._grouping.isGroupItemCountable(item);\n  }\n  isRowExpanded(key) {\n    const groupInfo = this._grouping.findGroupInfo(key);\n    return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll();\n  }\n  collapseAll(groupIndex) {\n    return this._collapseExpandAll(groupIndex, false);\n  }\n  expandAll(groupIndex) {\n    return this._collapseExpandAll(groupIndex, true);\n  }\n  _collapseExpandAll(groupIndex, isExpand) {\n    const that = this;\n    const dataSource = that._dataSource;\n    const group = dataSource.group();\n    const groups = gridCore.normalizeSortingInfo(group || []);\n    if (groups.length) {\n      for (let i = 0; i < groups.length; i++) {\n        if (void 0 === groupIndex || groupIndex === i) {\n          groups[i].isExpanded = isExpand;\n        } else if (group && group[i]) {\n          groups[i].isExpanded = group[i].isExpanded;\n        }\n      }\n      dataSource.group(groups);\n      that._grouping.foreachGroups((groupInfo, parents) => {\n        if (void 0 === groupIndex || groupIndex === parents.length - 1) {\n          groupInfo.isExpanded = isExpand;\n        }\n      }, false, true);\n      that.resetPagesCache();\n    }\n    return true;\n  }\n  refresh() {\n    super.refresh.apply(this, arguments);\n    return this._grouping.refresh.apply(this._grouping, arguments);\n  }\n  changeRowExpand(path) {\n    const that = this;\n    const dataSource = that._dataSource;\n    if (dataSource.group()) {\n      dataSource.beginLoading();\n      if (that._lastLoadOptions) {\n        that._lastLoadOptions.groupExpand = true;\n      }\n      return that._changeRowExpandCore(path).always(() => {\n        dataSource.endLoading();\n      });\n    }\n  }\n  _changeRowExpandCore(path) {\n    return this._grouping.changeRowExpand(path);\n  }\n  _hasGroupLevelsExpandState(group, isExpanded) {\n    if (group && Array.isArray(group)) {\n      for (let i = 0; i < group.length; i++) {\n        if (group[i].isExpanded === isExpanded) {\n          return true;\n        }\n      }\n    }\n  }\n  _customizeRemoteOperations(options, operationTypes) {\n    const {\n      remoteOperations: remoteOperations\n    } = options;\n    if (options.storeLoadOptions.group) {\n      if (remoteOperations.grouping && !options.isCustomLoading) {\n        if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\n          remoteOperations.paging = false;\n        }\n      }\n      if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\n        remoteOperations.paging = false;\n      }\n    } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\n      this.resetCache();\n    }\n    super._customizeRemoteOperations.apply(this, arguments);\n  }\n  _handleDataLoading(options) {\n    super._handleDataLoading(options);\n    this._initGroupingHelper(options);\n    return this._grouping.handleDataLoading(options);\n  }\n  _handleDataLoaded(options) {\n    return this._grouping.handleDataLoaded(options, super._handleDataLoaded.bind(this));\n  }\n  _handleDataLoadedCore(options) {\n    return this._grouping.handleDataLoadedCore(options, super._handleDataLoadedCore.bind(this));\n  }\n};\ndataSourceAdapterProvider.extend(dataSourceAdapterExtender);\nconst GroupingDataControllerExtender = Base => class extends Base {\n  init() {\n    super.init();\n    this.createAction(\"onRowExpanding\");\n    this.createAction(\"onRowExpanded\");\n    this.createAction(\"onRowCollapsing\");\n    this.createAction(\"onRowCollapsed\");\n  }\n  _beforeProcessItems(items) {\n    const groupColumns = this._columnsController.getGroupColumns();\n    items = super._beforeProcessItems(items);\n    if (items.length && groupColumns.length) {\n      items = this._processGroupItems(items, groupColumns.length);\n    }\n    return items;\n  }\n  _processItem(item, options) {\n    if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\n      item = this._processGroupItem(item, options);\n      options.dataIndex = 0;\n    } else {\n      item = super._processItem.apply(this, arguments);\n    }\n    return item;\n  }\n  _processGroupItem(item, options) {\n    return item;\n  }\n  _processGroupItems(items, groupsCount, options) {\n    const that = this;\n    const groupedColumns = that._columnsController.getGroupColumns();\n    const column = groupedColumns[groupedColumns.length - groupsCount];\n    if (!options) {\n      const scrollingMode = that.option(\"scrolling.mode\");\n      options = {\n        collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\n        resultItems: [],\n        path: [],\n        values: []\n      };\n    }\n    const {\n      resultItems: resultItems\n    } = options;\n    if (options.data) {\n      if (options.collectContinuationItems || !options.data.isContinuation) {\n        resultItems.push({\n          rowType: \"group\",\n          data: options.data,\n          groupIndex: options.path.length - 1,\n          isExpanded: !!options.data.items,\n          key: options.path.slice(0),\n          values: options.values.slice(0)\n        });\n      }\n    }\n    if (items) {\n      if (0 === groupsCount) {\n        resultItems.push.apply(resultItems, items);\n      } else {\n        for (let i = 0; i < items.length; i++) {\n          const item = items[i];\n          if (item && \"items\" in item) {\n            options.data = item;\n            options.path.push(item.key);\n            options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\n            that._processGroupItems(item.items, groupsCount - 1, options);\n            options.data = void 0;\n            options.path.pop();\n            options.values.pop();\n          } else {\n            resultItems.push(item);\n          }\n        }\n      }\n    }\n    return resultItems;\n  }\n  publicMethods() {\n    return super.publicMethods().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"]);\n  }\n  collapseAll(groupIndex) {\n    const dataSource = this._dataSource;\n    if (dataSource && dataSource.collapseAll(groupIndex)) {\n      dataSource.pageIndex(0);\n      dataSource.reload();\n    }\n  }\n  expandAll(groupIndex) {\n    const dataSource = this._dataSource;\n    if (dataSource && dataSource.expandAll(groupIndex)) {\n      dataSource.pageIndex(0);\n      dataSource.reload();\n    }\n  }\n  changeRowExpand(key) {\n    const that = this;\n    const expanded = that.isRowExpanded(key);\n    const args = {\n      key: key,\n      expanded: expanded\n    };\n    that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\n    if (!args.cancel) {\n      return when(that._changeRowExpandCore(key)).done(() => {\n        args.expanded = !expanded;\n        that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args);\n      });\n    }\n    return new Deferred().resolve();\n  }\n  _changeRowExpandCore(key) {\n    const that = this;\n    const dataSource = this._dataSource;\n    const d = new Deferred();\n    if (!dataSource) {\n      d.resolve();\n    } else {\n      when(dataSource.changeRowExpand(key)).done(() => {\n        that.load().done(d.resolve).fail(d.reject);\n      }).fail(d.reject);\n    }\n    return d;\n  }\n  isRowExpanded(key) {\n    const dataSource = this._dataSource;\n    return dataSource && dataSource.isRowExpanded(key);\n  }\n  expandRow(key) {\n    if (!this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n    return new Deferred().resolve();\n  }\n  collapseRow(key) {\n    if (this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n    return new Deferred().resolve();\n  }\n  optionChanged(args) {\n    if (\"grouping\" === args.name) {\n      args.name = \"dataSource\";\n    }\n    super.optionChanged(args);\n  }\n};\nconst onGroupingMenuItemClick = function (column, params) {\n  const columnsController = this._columnsController;\n  switch (params.itemData.value) {\n    case \"group\":\n      {\n        const groups = columnsController._dataSource.group() || [];\n        columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\n        break;\n      }\n    case \"ungroup\":\n      columnsController.columnOption(column.dataField, \"groupIndex\", -1);\n      break;\n    case \"ungroupAll\":\n      this.component.clearGrouping();\n  }\n};\nconst isGroupPanelVisible = groupPanelOptions => {\n  const visible = null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.visible;\n  return \"auto\" === visible ? \"desktop\" === devices.current().deviceType : !!visible;\n};\nconst allowDragging = (groupPanelOptions, column) => {\n  const isVisible = isGroupPanelVisible(groupPanelOptions);\n  const canDrag = (null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.allowColumnDragging) && column.allowGrouping;\n  return isVisible && !!canDrag;\n};\nexport const GroupingHeaderPanelExtender = Base => class extends Base {\n  _getToolbarItems() {\n    const items = super._getToolbarItems();\n    return this._appendGroupingItem(items);\n  }\n  _appendGroupingItem(items) {\n    if (this._isGroupPanelVisible()) {\n      let isRendered = false;\n      const toolbarItem = {\n        template: () => {\n          const $groupPanel = $(\"<div>\").addClass(\"dx-datagrid-group-panel\");\n          this._updateGroupPanelContent($groupPanel);\n          registerKeyboardAction(\"groupPanel\", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));\n          return $groupPanel;\n        },\n        name: \"groupPanel\",\n        onItemRendered: () => {\n          isRendered && this.renderCompleted.fire();\n          isRendered = true;\n        },\n        location: \"before\",\n        locateInMenu: \"never\",\n        sortIndex: 1\n      };\n      items.push(toolbarItem);\n      this.updateToolbarDimensions();\n    }\n    return items;\n  }\n  _handleActionKeyDown(args) {\n    const {\n      event: event\n    } = args;\n    const $target = $(event.target);\n    const groupColumnIndex = $target.closest(\".dx-group-panel-item\").index();\n    const column = this._columnsController.getGroupColumns()[groupColumnIndex];\n    const columnIndex = column && column.index;\n    if ($target.is(\".dx-header-filter\")) {\n      this._headerFilterController.showHeaderFilterMenu(columnIndex, true);\n    } else {\n      this._processGroupItemAction(columnIndex);\n    }\n    event.preventDefault();\n  }\n  _isGroupPanelVisible() {\n    return isGroupPanelVisible(this.option(\"groupPanel\"));\n  }\n  _renderGroupPanelItems($groupPanel, groupColumns) {\n    const that = this;\n    $groupPanel.empty();\n    each(groupColumns, (index, groupColumn) => {\n      that._createGroupPanelItem($groupPanel, groupColumn);\n    });\n    restoreFocus(this);\n  }\n  _createGroupPanelItem($rootElement, groupColumn) {\n    const $groupPanelItem = $(\"<div>\").addClass(groupColumn.cssClass).addClass(\"dx-group-panel-item\").data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\n    setTabIndex(this, $groupPanelItem);\n    return $groupPanelItem;\n  }\n  _columnOptionChanged(e) {\n    if (!this._requireReady && !gridCore.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\n      const $toolbarElement = this.element();\n      const $groupPanel = $toolbarElement && $toolbarElement.find(\".dx-datagrid-group-panel\");\n      if ($groupPanel && $groupPanel.length) {\n        this._updateGroupPanelContent($groupPanel);\n        this.updateToolbarDimensions();\n        this.renderCompleted.fire();\n      }\n    }\n    super._columnOptionChanged();\n  }\n  _updateGroupPanelContent($groupPanel) {\n    const groupColumns = this.getColumns();\n    const groupPanelOptions = this.option(\"groupPanel\");\n    this._renderGroupPanelItems($groupPanel, groupColumns);\n    if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\n      $(\"<div>\").addClass(\"dx-group-panel-message\").text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\n      $groupPanel.closest(\".dx-toolbar-item\").addClass(\"dx-toolbar-label\");\n      $groupPanel.closest(\".dx-toolbar-label\").css(\"maxWidth\", \"none\");\n    }\n  }\n  allowDragging(column) {\n    const groupPanelOptions = this.option(\"groupPanel\");\n    return allowDragging(groupPanelOptions, column);\n  }\n  getColumnElements() {\n    const $element = this.element();\n    return $element && $element.find(\".dx-group-panel-item\");\n  }\n  getColumns() {\n    return this._columnsController.getGroupColumns();\n  }\n  getBoundingRect() {\n    const $element = this.element();\n    if ($element && $element.find(\".dx-datagrid-group-panel\").length) {\n      const offset = $element.offset();\n      return {\n        top: offset.top,\n        bottom: offset.top + getHeight($element)\n      };\n    }\n    return null;\n  }\n  getName() {\n    return \"group\";\n  }\n  getContextMenuItems(options) {\n    const that = this;\n    const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n    const $groupedColumnElement = $(options.targetElement).closest(\".dx-group-panel-item\");\n    let items;\n    if ($groupedColumnElement.length) {\n      options.column = $groupedColumnElement.data(\"columnData\");\n    }\n    if (contextMenuEnabled && options.column) {\n      const {\n        column: column\n      } = options;\n      const isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;\n      if (isGroupingAllowed) {\n        const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\n        const groupingTexts = that.option(\"grouping.texts\");\n        const onItemClick = onGroupingMenuItemClick.bind(that, column);\n        items = [{\n          text: groupingTexts.ungroup,\n          value: \"ungroup\",\n          disabled: !isColumnGrouped,\n          onItemClick: onItemClick\n        }, {\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        }];\n      }\n    }\n    return items;\n  }\n  hasGroupedColumns() {\n    return this._isGroupPanelVisible() && !!this.getColumns().length;\n  }\n  optionChanged(args) {\n    if (\"groupPanel\" === args.name) {\n      this._invalidate();\n      args.handled = true;\n    } else {\n      super.optionChanged(args);\n    }\n  }\n};\nconst GroupingRowsViewExtender = Base => class extends Base {\n  getContextMenuItems(options) {\n    const that = this;\n    const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n    let items;\n    if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\n      const columnsController = that._columnsController;\n      const column = columnsController.columnOption(`groupIndex:${options.row.groupIndex}`);\n      if (column && column.allowGrouping) {\n        const groupingTexts = that.option(\"grouping.texts\");\n        const onItemClick = onGroupingMenuItemClick.bind(that, column);\n        items = [];\n        items.push({\n          text: groupingTexts.ungroup,\n          value: \"ungroup\",\n          onItemClick: onItemClick\n        }, {\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        });\n      }\n    }\n    return items;\n  }\n  _rowClick(e) {\n    const that = this;\n    const expandMode = that.option(\"grouping.expandMode\");\n    const scrollingMode = that.option(\"scrolling.mode\");\n    const isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && $(e.event.target).closest(\".dx-group-row\").length;\n    const isExpandButtonClicked = $(e.event.target).closest(\".dx-datagrid-expand\").length;\n    if (isGroupRowStateChanged || isExpandButtonClicked) {\n      that._changeGroupRowState(e);\n    }\n    super._rowClick(e);\n  }\n  _changeGroupRowState(e) {\n    const row = this._dataController.items()[e.rowIndex];\n    const allowCollapsing = this._columnsController.columnOption(`groupIndex:${row.groupIndex}`, \"allowCollapsing\");\n    if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\n      this._dataController.changeRowExpand(row.key, true);\n      e.event.preventDefault();\n      e.handled = true;\n    }\n  }\n};\nconst columnHeadersViewExtender = Base => class extends Base {\n  getContextMenuItems(options) {\n    const that = this;\n    const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n    let items = super.getContextMenuItems(options);\n    if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n      const {\n        column: column\n      } = options;\n      if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {\n        const groupingTexts = that.option(\"grouping.texts\");\n        const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\n        const onItemClick = onGroupingMenuItemClick.bind(that, column);\n        items = items || [];\n        items.push({\n          text: groupingTexts.groupByThisColumn,\n          value: \"group\",\n          beginGroup: true,\n          disabled: isColumnGrouped,\n          onItemClick: onItemClick\n        });\n        if (column.showWhenGrouped) {\n          items.push({\n            text: groupingTexts.ungroup,\n            value: \"ungroup\",\n            disabled: !isColumnGrouped,\n            onItemClick: onItemClick\n          });\n        }\n        items.push({\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        });\n      }\n    }\n    return items;\n  }\n  allowDragging(column) {\n    const groupPanelOptions = this.option(\"groupPanel\");\n    return allowDragging(groupPanelOptions, column) || super.allowDragging(column);\n  }\n};\ngridCore.registerModule(\"grouping\", {\n  defaultOptions: () => ({\n    grouping: {\n      autoExpandAll: true,\n      allowCollapsing: true,\n      contextMenuEnabled: false,\n      expandMode: \"buttonClick\",\n      texts: {\n        groupContinuesMessage: messageLocalization.format(\"dxDataGrid-groupContinuesMessage\"),\n        groupContinuedMessage: messageLocalization.format(\"dxDataGrid-groupContinuedMessage\"),\n        groupByThisColumn: messageLocalization.format(\"dxDataGrid-groupHeaderText\"),\n        ungroup: messageLocalization.format(\"dxDataGrid-ungroupHeaderText\"),\n        ungroupAll: messageLocalization.format(\"dxDataGrid-ungroupAllText\")\n      }\n    },\n    groupPanel: {\n      visible: false,\n      emptyPanelText: messageLocalization.format(\"dxDataGrid-groupPanelEmptyText\"),\n      allowColumnDragging: true\n    }\n  }),\n  extenders: {\n    controllers: {\n      data: GroupingDataControllerExtender,\n      columns: Base => class extends Base {\n        _getExpandColumnOptions() {\n          const options = super._getExpandColumnOptions.apply(this, arguments);\n          options.cellTemplate = gridCore.getExpandCellTemplate();\n          return options;\n        }\n      },\n      editing: Base => class extends Base {\n        _isProcessedItem(item) {\n          return isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\");\n        }\n      }\n    },\n    views: {\n      headerPanel: GroupingHeaderPanelExtender,\n      rowsView: GroupingRowsViewExtender,\n      columnHeadersView: columnHeadersViewExtender\n    }\n  }\n});","map":{"version":3,"names":["messageLocalization","devices","$","Deferred","when","each","getHeight","isDefined","isString","restoreFocus","setTabIndex","registerKeyboardAction","gridCore","dataSourceAdapterProvider","GroupingHelper","CollapsedGroupingHelper","ExpandedGroupingHelper","DATAGRID_GROUP_PANEL_CLASS","DATAGRID_GROUP_PANEL_MESSAGE_CLASS","DATAGRID_GROUP_PANEL_ITEM_CLASS","DATAGRID_GROUP_PANEL_LABEL_CLASS","DATAGRID_GROUP_PANEL_CONTAINER_CLASS","DATAGRID_EXPAND_CLASS","DATAGRID_GROUP_ROW_CLASS","HEADER_FILTER_CLASS_SELECTOR","dataSourceAdapterExtender","Base","init","apply","arguments","_initGroupingHelper","options","grouping","_grouping","isAutoExpandAll","option","isFocusedRowEnabled","remoteOperations","isODataRemoteOperations","filtering","sorting","paging","totalItemsCount","totalCount","_dataSource","group","requireTotalCount","totalCountCorrection","itemsCount","allowCollapseAll","isGroupItemCountable","item","isRowExpanded","key","groupInfo","findGroupInfo","isExpanded","collapseAll","groupIndex","_collapseExpandAll","expandAll","isExpand","that","dataSource","groups","normalizeSortingInfo","length","i","foreachGroups","parents","resetPagesCache","refresh","changeRowExpand","path","beginLoading","_lastLoadOptions","groupExpand","_changeRowExpandCore","always","endLoading","_hasGroupLevelsExpandState","Array","isArray","_customizeRemoteOperations","operationTypes","storeLoadOptions","isCustomLoading","groupPaging","resetCache","_handleDataLoading","handleDataLoading","_handleDataLoaded","handleDataLoaded","bind","_handleDataLoadedCore","handleDataLoadedCore","extend","GroupingDataControllerExtender","createAction","_beforeProcessItems","items","groupColumns","_columnsController","getGroupColumns","_processGroupItems","_processItem","rowType","indexOf","_processGroupItem","dataIndex","groupsCount","groupedColumns","column","scrollingMode","collectContinuationItems","resultItems","values","data","isContinuation","push","slice","deserializeValue","calculateDisplayValue","pop","publicMethods","concat","pageIndex","reload","expanded","args","executeAction","cancel","done","resolve","d","load","fail","reject","expandRow","collapseRow","optionChanged","name","onGroupingMenuItemClick","params","columnsController","itemData","value","columnOption","dataField","component","clearGrouping","isGroupPanelVisible","groupPanelOptions","visible","current","deviceType","allowDragging","isVisible","canDrag","allowColumnDragging","allowGrouping","GroupingHeaderPanelExtender","_getToolbarItems","_appendGroupingItem","_isGroupPanelVisible","isRendered","toolbarItem","template","$groupPanel","addClass","_updateGroupPanelContent","_handleActionKeyDown","onItemRendered","renderCompleted","fire","location","locateInMenu","sortIndex","updateToolbarDimensions","event","$target","target","groupColumnIndex","closest","index","columnIndex","is","_headerFilterController","showHeaderFilterMenu","_processGroupItemAction","preventDefault","_renderGroupPanelItems","empty","groupColumn","_createGroupPanelItem","$rootElement","$groupPanelItem","cssClass","appendTo","text","caption","_columnOptionChanged","e","_requireReady","checkChanges","optionNames","$toolbarElement","element","find","getColumns","emptyPanelText","css","getColumnElements","$element","getBoundingRect","offset","top","bottom","getName","getContextMenuItems","contextMenuEnabled","$groupedColumnElement","targetElement","isGroupingAllowed","isColumnGrouped","groupingTexts","onItemClick","ungroup","disabled","ungroupAll","hasGroupedColumns","_invalidate","handled","GroupingRowsViewExtender","row","_rowClick","expandMode","isGroupRowStateChanged","isExpandButtonClicked","_changeGroupRowState","_dataController","rowIndex","allowCollapsing","columnHeadersViewExtender","command","groupByThisColumn","beginGroup","showWhenGrouped","registerModule","defaultOptions","autoExpandAll","texts","groupContinuesMessage","format","groupContinuedMessage","groupPanel","extenders","controllers","columns","_getExpandColumnOptions","cellTemplate","getExpandCellTemplate","editing","_isProcessedItem","views","headerPanel","rowsView","columnHeadersView"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/data_grid/grouping/m_grouping.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/data_grid/grouping/m_grouping.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport devices from \"../../../../core/devices\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getHeight\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    restoreFocus,\r\n    setTabIndex\r\n} from \"../../../../ui/shared/accessibility\";\r\nimport {\r\n    registerKeyboardAction\r\n} from \"../../../grids/grid_core/m_accessibility\";\r\nimport gridCore from \"../m_core\";\r\nimport dataSourceAdapterProvider from \"../m_data_source_adapter\";\r\nimport {\r\n    GroupingHelper as CollapsedGroupingHelper\r\n} from \"./m_grouping_collapsed\";\r\nimport {\r\n    GroupingHelper as ExpandedGroupingHelper\r\n} from \"./m_grouping_expanded\";\r\nconst DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\r\nconst DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\r\nconst DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\r\nconst DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\r\nconst DATAGRID_GROUP_PANEL_CONTAINER_CLASS = \"dx-toolbar-item\";\r\nconst DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\r\nconst DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\r\nconst HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\r\nconst dataSourceAdapterExtender = Base => class extends Base {\r\n    init() {\r\n        super.init.apply(this, arguments);\r\n        this._initGroupingHelper()\r\n    }\r\n    _initGroupingHelper(options) {\r\n        const grouping = this._grouping;\r\n        const isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\r\n        const isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        const remoteOperations = options ? options.remoteOperations : this.remoteOperations();\r\n        const isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\r\n        if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\r\n            if (!grouping || grouping instanceof CollapsedGroupingHelper) {\r\n                this._grouping = new ExpandedGroupingHelper(this)\r\n            }\r\n        } else if (!grouping || grouping instanceof ExpandedGroupingHelper) {\r\n            this._grouping = new CollapsedGroupingHelper(this)\r\n        }\r\n    }\r\n    totalItemsCount() {\r\n        const totalCount = super.totalItemsCount();\r\n        return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount\r\n    }\r\n    itemsCount() {\r\n        return this._dataSource.group() ? this._grouping.itemsCount() || 0 : super.itemsCount.apply(this, arguments)\r\n    }\r\n    allowCollapseAll() {\r\n        return this._grouping.allowCollapseAll()\r\n    }\r\n    isGroupItemCountable(item) {\r\n        return this._grouping.isGroupItemCountable(item)\r\n    }\r\n    isRowExpanded(key) {\r\n        const groupInfo = this._grouping.findGroupInfo(key);\r\n        return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll()\r\n    }\r\n    collapseAll(groupIndex) {\r\n        return this._collapseExpandAll(groupIndex, false)\r\n    }\r\n    expandAll(groupIndex) {\r\n        return this._collapseExpandAll(groupIndex, true)\r\n    }\r\n    _collapseExpandAll(groupIndex, isExpand) {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        const group = dataSource.group();\r\n        const groups = gridCore.normalizeSortingInfo(group || []);\r\n        if (groups.length) {\r\n            for (let i = 0; i < groups.length; i++) {\r\n                if (void 0 === groupIndex || groupIndex === i) {\r\n                    groups[i].isExpanded = isExpand\r\n                } else if (group && group[i]) {\r\n                    groups[i].isExpanded = group[i].isExpanded\r\n                }\r\n            }\r\n            dataSource.group(groups);\r\n            that._grouping.foreachGroups(((groupInfo, parents) => {\r\n                if (void 0 === groupIndex || groupIndex === parents.length - 1) {\r\n                    groupInfo.isExpanded = isExpand\r\n                }\r\n            }), false, true);\r\n            that.resetPagesCache()\r\n        }\r\n        return true\r\n    }\r\n    refresh() {\r\n        super.refresh.apply(this, arguments);\r\n        return this._grouping.refresh.apply(this._grouping, arguments)\r\n    }\r\n    changeRowExpand(path) {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        if (dataSource.group()) {\r\n            dataSource.beginLoading();\r\n            if (that._lastLoadOptions) {\r\n                that._lastLoadOptions.groupExpand = true\r\n            }\r\n            return that._changeRowExpandCore(path).always((() => {\r\n                dataSource.endLoading()\r\n            }))\r\n        }\r\n    }\r\n    _changeRowExpandCore(path) {\r\n        return this._grouping.changeRowExpand(path)\r\n    }\r\n    _hasGroupLevelsExpandState(group, isExpanded) {\r\n        if (group && Array.isArray(group)) {\r\n            for (let i = 0; i < group.length; i++) {\r\n                if (group[i].isExpanded === isExpanded) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _customizeRemoteOperations(options, operationTypes) {\r\n        const {\r\n            remoteOperations: remoteOperations\r\n        } = options;\r\n        if (options.storeLoadOptions.group) {\r\n            if (remoteOperations.grouping && !options.isCustomLoading) {\r\n                if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\r\n                    remoteOperations.paging = false\r\n                }\r\n            }\r\n            if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\r\n                remoteOperations.paging = false\r\n            }\r\n        } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\r\n            this.resetCache()\r\n        }\r\n        super._customizeRemoteOperations.apply(this, arguments)\r\n    }\r\n    _handleDataLoading(options) {\r\n        super._handleDataLoading(options);\r\n        this._initGroupingHelper(options);\r\n        return this._grouping.handleDataLoading(options)\r\n    }\r\n    _handleDataLoaded(options) {\r\n        return this._grouping.handleDataLoaded(options, super._handleDataLoaded.bind(this))\r\n    }\r\n    _handleDataLoadedCore(options) {\r\n        return this._grouping.handleDataLoadedCore(options, super._handleDataLoadedCore.bind(this))\r\n    }\r\n};\r\ndataSourceAdapterProvider.extend(dataSourceAdapterExtender);\r\nconst GroupingDataControllerExtender = Base => class extends Base {\r\n    init() {\r\n        super.init();\r\n        this.createAction(\"onRowExpanding\");\r\n        this.createAction(\"onRowExpanded\");\r\n        this.createAction(\"onRowCollapsing\");\r\n        this.createAction(\"onRowCollapsed\")\r\n    }\r\n    _beforeProcessItems(items) {\r\n        const groupColumns = this._columnsController.getGroupColumns();\r\n        items = super._beforeProcessItems(items);\r\n        if (items.length && groupColumns.length) {\r\n            items = this._processGroupItems(items, groupColumns.length)\r\n        }\r\n        return items\r\n    }\r\n    _processItem(item, options) {\r\n        if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\r\n            item = this._processGroupItem(item, options);\r\n            options.dataIndex = 0\r\n        } else {\r\n            item = super._processItem.apply(this, arguments)\r\n        }\r\n        return item\r\n    }\r\n    _processGroupItem(item, options) {\r\n        return item\r\n    }\r\n    _processGroupItems(items, groupsCount, options) {\r\n        const that = this;\r\n        const groupedColumns = that._columnsController.getGroupColumns();\r\n        const column = groupedColumns[groupedColumns.length - groupsCount];\r\n        if (!options) {\r\n            const scrollingMode = that.option(\"scrolling.mode\");\r\n            options = {\r\n                collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\r\n                resultItems: [],\r\n                path: [],\r\n                values: []\r\n            }\r\n        }\r\n        const {\r\n            resultItems: resultItems\r\n        } = options;\r\n        if (options.data) {\r\n            if (options.collectContinuationItems || !options.data.isContinuation) {\r\n                resultItems.push({\r\n                    rowType: \"group\",\r\n                    data: options.data,\r\n                    groupIndex: options.path.length - 1,\r\n                    isExpanded: !!options.data.items,\r\n                    key: options.path.slice(0),\r\n                    values: options.values.slice(0)\r\n                })\r\n            }\r\n        }\r\n        if (items) {\r\n            if (0 === groupsCount) {\r\n                resultItems.push.apply(resultItems, items)\r\n            } else {\r\n                for (let i = 0; i < items.length; i++) {\r\n                    const item = items[i];\r\n                    if (item && \"items\" in item) {\r\n                        options.data = item;\r\n                        options.path.push(item.key);\r\n                        options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\r\n                        that._processGroupItems(item.items, groupsCount - 1, options);\r\n                        options.data = void 0;\r\n                        options.path.pop();\r\n                        options.values.pop()\r\n                    } else {\r\n                        resultItems.push(item)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return resultItems\r\n    }\r\n    publicMethods() {\r\n        return super.publicMethods().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"])\r\n    }\r\n    collapseAll(groupIndex) {\r\n        const dataSource = this._dataSource;\r\n        if (dataSource && dataSource.collapseAll(groupIndex)) {\r\n            dataSource.pageIndex(0);\r\n            dataSource.reload()\r\n        }\r\n    }\r\n    expandAll(groupIndex) {\r\n        const dataSource = this._dataSource;\r\n        if (dataSource && dataSource.expandAll(groupIndex)) {\r\n            dataSource.pageIndex(0);\r\n            dataSource.reload()\r\n        }\r\n    }\r\n    changeRowExpand(key) {\r\n        const that = this;\r\n        const expanded = that.isRowExpanded(key);\r\n        const args = {\r\n            key: key,\r\n            expanded: expanded\r\n        };\r\n        that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\r\n        if (!args.cancel) {\r\n            return when(that._changeRowExpandCore(key)).done((() => {\r\n                args.expanded = !expanded;\r\n                that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args)\r\n            }))\r\n        }\r\n        return (new Deferred).resolve()\r\n    }\r\n    _changeRowExpandCore(key) {\r\n        const that = this;\r\n        const dataSource = this._dataSource;\r\n        const d = new Deferred;\r\n        if (!dataSource) {\r\n            d.resolve()\r\n        } else {\r\n            when(dataSource.changeRowExpand(key)).done((() => {\r\n                that.load().done(d.resolve).fail(d.reject)\r\n            })).fail(d.reject)\r\n        }\r\n        return d\r\n    }\r\n    isRowExpanded(key) {\r\n        const dataSource = this._dataSource;\r\n        return dataSource && dataSource.isRowExpanded(key)\r\n    }\r\n    expandRow(key) {\r\n        if (!this.isRowExpanded(key)) {\r\n            return this.changeRowExpand(key)\r\n        }\r\n        return (new Deferred).resolve()\r\n    }\r\n    collapseRow(key) {\r\n        if (this.isRowExpanded(key)) {\r\n            return this.changeRowExpand(key)\r\n        }\r\n        return (new Deferred).resolve()\r\n    }\r\n    optionChanged(args) {\r\n        if (\"grouping\" === args.name) {\r\n            args.name = \"dataSource\"\r\n        }\r\n        super.optionChanged(args)\r\n    }\r\n};\r\nconst onGroupingMenuItemClick = function(column, params) {\r\n    const columnsController = this._columnsController;\r\n    switch (params.itemData.value) {\r\n        case \"group\": {\r\n            const groups = columnsController._dataSource.group() || [];\r\n            columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\r\n            break\r\n        }\r\n        case \"ungroup\":\r\n            columnsController.columnOption(column.dataField, \"groupIndex\", -1);\r\n            break;\r\n        case \"ungroupAll\":\r\n            this.component.clearGrouping()\r\n    }\r\n};\r\nconst isGroupPanelVisible = groupPanelOptions => {\r\n    const visible = null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.visible;\r\n    return \"auto\" === visible ? \"desktop\" === devices.current().deviceType : !!visible\r\n};\r\nconst allowDragging = (groupPanelOptions, column) => {\r\n    const isVisible = isGroupPanelVisible(groupPanelOptions);\r\n    const canDrag = (null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.allowColumnDragging) && column.allowGrouping;\r\n    return isVisible && !!canDrag\r\n};\r\nexport const GroupingHeaderPanelExtender = Base => class extends Base {\r\n    _getToolbarItems() {\r\n        const items = super._getToolbarItems();\r\n        return this._appendGroupingItem(items)\r\n    }\r\n    _appendGroupingItem(items) {\r\n        if (this._isGroupPanelVisible()) {\r\n            let isRendered = false;\r\n            const toolbarItem = {\r\n                template: () => {\r\n                    const $groupPanel = $(\"<div>\").addClass(\"dx-datagrid-group-panel\");\r\n                    this._updateGroupPanelContent($groupPanel);\r\n                    registerKeyboardAction(\"groupPanel\", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));\r\n                    return $groupPanel\r\n                },\r\n                name: \"groupPanel\",\r\n                onItemRendered: () => {\r\n                    isRendered && this.renderCompleted.fire();\r\n                    isRendered = true\r\n                },\r\n                location: \"before\",\r\n                locateInMenu: \"never\",\r\n                sortIndex: 1\r\n            };\r\n            items.push(toolbarItem);\r\n            this.updateToolbarDimensions()\r\n        }\r\n        return items\r\n    }\r\n    _handleActionKeyDown(args) {\r\n        const {\r\n            event: event\r\n        } = args;\r\n        const $target = $(event.target);\r\n        const groupColumnIndex = $target.closest(\".dx-group-panel-item\").index();\r\n        const column = this._columnsController.getGroupColumns()[groupColumnIndex];\r\n        const columnIndex = column && column.index;\r\n        if ($target.is(\".dx-header-filter\")) {\r\n            this._headerFilterController.showHeaderFilterMenu(columnIndex, true)\r\n        } else {\r\n            this._processGroupItemAction(columnIndex)\r\n        }\r\n        event.preventDefault()\r\n    }\r\n    _isGroupPanelVisible() {\r\n        return isGroupPanelVisible(this.option(\"groupPanel\"))\r\n    }\r\n    _renderGroupPanelItems($groupPanel, groupColumns) {\r\n        const that = this;\r\n        $groupPanel.empty();\r\n        each(groupColumns, ((index, groupColumn) => {\r\n            that._createGroupPanelItem($groupPanel, groupColumn)\r\n        }));\r\n        restoreFocus(this)\r\n    }\r\n    _createGroupPanelItem($rootElement, groupColumn) {\r\n        const $groupPanelItem = $(\"<div>\").addClass(groupColumn.cssClass).addClass(\"dx-group-panel-item\").data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\r\n        setTabIndex(this, $groupPanelItem);\r\n        return $groupPanelItem\r\n    }\r\n    _columnOptionChanged(e) {\r\n        if (!this._requireReady && !gridCore.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\r\n            const $toolbarElement = this.element();\r\n            const $groupPanel = $toolbarElement && $toolbarElement.find(\".dx-datagrid-group-panel\");\r\n            if ($groupPanel && $groupPanel.length) {\r\n                this._updateGroupPanelContent($groupPanel);\r\n                this.updateToolbarDimensions();\r\n                this.renderCompleted.fire()\r\n            }\r\n        }\r\n        super._columnOptionChanged()\r\n    }\r\n    _updateGroupPanelContent($groupPanel) {\r\n        const groupColumns = this.getColumns();\r\n        const groupPanelOptions = this.option(\"groupPanel\");\r\n        this._renderGroupPanelItems($groupPanel, groupColumns);\r\n        if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\r\n            $(\"<div>\").addClass(\"dx-group-panel-message\").text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\r\n            $groupPanel.closest(\".dx-toolbar-item\").addClass(\"dx-toolbar-label\");\r\n            $groupPanel.closest(\".dx-toolbar-label\").css(\"maxWidth\", \"none\")\r\n        }\r\n    }\r\n    allowDragging(column) {\r\n        const groupPanelOptions = this.option(\"groupPanel\");\r\n        return allowDragging(groupPanelOptions, column)\r\n    }\r\n    getColumnElements() {\r\n        const $element = this.element();\r\n        return $element && $element.find(\".dx-group-panel-item\")\r\n    }\r\n    getColumns() {\r\n        return this._columnsController.getGroupColumns()\r\n    }\r\n    getBoundingRect() {\r\n        const $element = this.element();\r\n        if ($element && $element.find(\".dx-datagrid-group-panel\").length) {\r\n            const offset = $element.offset();\r\n            return {\r\n                top: offset.top,\r\n                bottom: offset.top + getHeight($element)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    getName() {\r\n        return \"group\"\r\n    }\r\n    getContextMenuItems(options) {\r\n        const that = this;\r\n        const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n        const $groupedColumnElement = $(options.targetElement).closest(\".dx-group-panel-item\");\r\n        let items;\r\n        if ($groupedColumnElement.length) {\r\n            options.column = $groupedColumnElement.data(\"columnData\")\r\n        }\r\n        if (contextMenuEnabled && options.column) {\r\n            const {\r\n                column: column\r\n            } = options;\r\n            const isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;\r\n            if (isGroupingAllowed) {\r\n                const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\r\n                const groupingTexts = that.option(\"grouping.texts\");\r\n                const onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                items = [{\r\n                    text: groupingTexts.ungroup,\r\n                    value: \"ungroup\",\r\n                    disabled: !isColumnGrouped,\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                }]\r\n            }\r\n        }\r\n        return items\r\n    }\r\n    hasGroupedColumns() {\r\n        return this._isGroupPanelVisible() && !!this.getColumns().length\r\n    }\r\n    optionChanged(args) {\r\n        if (\"groupPanel\" === args.name) {\r\n            this._invalidate();\r\n            args.handled = true\r\n        } else {\r\n            super.optionChanged(args)\r\n        }\r\n    }\r\n};\r\nconst GroupingRowsViewExtender = Base => class extends Base {\r\n    getContextMenuItems(options) {\r\n        const that = this;\r\n        const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n        let items;\r\n        if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\r\n            const columnsController = that._columnsController;\r\n            const column = columnsController.columnOption(`groupIndex:${options.row.groupIndex}`);\r\n            if (column && column.allowGrouping) {\r\n                const groupingTexts = that.option(\"grouping.texts\");\r\n                const onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                items = [];\r\n                items.push({\r\n                    text: groupingTexts.ungroup,\r\n                    value: \"ungroup\",\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                })\r\n            }\r\n        }\r\n        return items\r\n    }\r\n    _rowClick(e) {\r\n        const that = this;\r\n        const expandMode = that.option(\"grouping.expandMode\");\r\n        const scrollingMode = that.option(\"scrolling.mode\");\r\n        const isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && $(e.event.target).closest(\".dx-group-row\").length;\r\n        const isExpandButtonClicked = $(e.event.target).closest(\".dx-datagrid-expand\").length;\r\n        if (isGroupRowStateChanged || isExpandButtonClicked) {\r\n            that._changeGroupRowState(e)\r\n        }\r\n        super._rowClick(e)\r\n    }\r\n    _changeGroupRowState(e) {\r\n        const row = this._dataController.items()[e.rowIndex];\r\n        const allowCollapsing = this._columnsController.columnOption(`groupIndex:${row.groupIndex}`, \"allowCollapsing\");\r\n        if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\r\n            this._dataController.changeRowExpand(row.key, true);\r\n            e.event.preventDefault();\r\n            e.handled = true\r\n        }\r\n    }\r\n};\r\nconst columnHeadersViewExtender = Base => class extends Base {\r\n    getContextMenuItems(options) {\r\n        const that = this;\r\n        const contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n        let items = super.getContextMenuItems(options);\r\n        if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\r\n            const {\r\n                column: column\r\n            } = options;\r\n            if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {\r\n                const groupingTexts = that.option(\"grouping.texts\");\r\n                const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\r\n                const onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                items = items || [];\r\n                items.push({\r\n                    text: groupingTexts.groupByThisColumn,\r\n                    value: \"group\",\r\n                    beginGroup: true,\r\n                    disabled: isColumnGrouped,\r\n                    onItemClick: onItemClick\r\n                });\r\n                if (column.showWhenGrouped) {\r\n                    items.push({\r\n                        text: groupingTexts.ungroup,\r\n                        value: \"ungroup\",\r\n                        disabled: !isColumnGrouped,\r\n                        onItemClick: onItemClick\r\n                    })\r\n                }\r\n                items.push({\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                })\r\n            }\r\n        }\r\n        return items\r\n    }\r\n    allowDragging(column) {\r\n        const groupPanelOptions = this.option(\"groupPanel\");\r\n        return allowDragging(groupPanelOptions, column) || super.allowDragging(column)\r\n    }\r\n};\r\ngridCore.registerModule(\"grouping\", {\r\n    defaultOptions: () => ({\r\n        grouping: {\r\n            autoExpandAll: true,\r\n            allowCollapsing: true,\r\n            contextMenuEnabled: false,\r\n            expandMode: \"buttonClick\",\r\n            texts: {\r\n                groupContinuesMessage: messageLocalization.format(\"dxDataGrid-groupContinuesMessage\"),\r\n                groupContinuedMessage: messageLocalization.format(\"dxDataGrid-groupContinuedMessage\"),\r\n                groupByThisColumn: messageLocalization.format(\"dxDataGrid-groupHeaderText\"),\r\n                ungroup: messageLocalization.format(\"dxDataGrid-ungroupHeaderText\"),\r\n                ungroupAll: messageLocalization.format(\"dxDataGrid-ungroupAllText\")\r\n            }\r\n        },\r\n        groupPanel: {\r\n            visible: false,\r\n            emptyPanelText: messageLocalization.format(\"dxDataGrid-groupPanelEmptyText\"),\r\n            allowColumnDragging: true\r\n        }\r\n    }),\r\n    extenders: {\r\n        controllers: {\r\n            data: GroupingDataControllerExtender,\r\n            columns: Base => class extends Base {\r\n                _getExpandColumnOptions() {\r\n                    const options = super._getExpandColumnOptions.apply(this, arguments);\r\n                    options.cellTemplate = gridCore.getExpandCellTemplate();\r\n                    return options\r\n                }\r\n            },\r\n            editing: Base => class extends Base {\r\n                _isProcessedItem(item) {\r\n                    return isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            headerPanel: GroupingHeaderPanelExtender,\r\n            rowsView: GroupingRowsViewExtender,\r\n            columnHeadersView: columnHeadersViewExtender\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}