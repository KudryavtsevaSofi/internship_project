{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/form/m_form.layout_manager.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport \"../../../ui/text_box\";\nimport \"../../../ui/number_box\";\nimport \"../../../ui/check_box\";\nimport \"../../../ui/date_box\";\nimport \"../../../ui/button\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { removeEvent } from \"../../../common/core/events/remove\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport $ from \"../../../core/renderer\";\nimport { normalizeIndexes } from \"../../../core/utils/array\";\nimport { compileGetter } from \"../../../core/utils/data\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getWidth } from \"../../../core/utils/size\";\nimport { isDefined, isEmptyObject, isFunction, isObject, type } from \"../../../core/utils/type\";\nimport variableWrapper from \"../../../core/utils/variable_wrapper\";\nimport { getCurrentScreenFactor, hasWindow } from \"../../../core/utils/window\";\nimport Widget from \"../../core/widget/widget\";\nimport ResponsiveBox from \"../../ui/m_responsive_box\";\nimport { renderButtonItem } from \"./components/m_button_item\";\nimport { renderEmptyItem } from \"./components/m_empty_item\";\nimport { renderFieldItem } from \"./components/m_field_item\";\nimport { FIELD_ITEM_CLASS, FORM_LAYOUT_MANAGER_CLASS, LAYOUT_MANAGER_ONE_COLUMN, ROOT_SIMPLE_ITEM_CLASS, SIMPLE_ITEM_TYPE, SINGLE_COLUMN_ITEM_CONTENT } from \"./constants\";\nimport { default as FormItemsRunTimeInfo } from \"./m_form.items_runtime_info\";\nimport { convertToRenderFieldItemOptions } from \"./m_form.layout_manager.utils\";\nconst FORM_EDITOR_BY_DEFAULT = \"dxTextBox\";\nconst LAYOUT_MANAGER_FIRST_ROW_CLASS = \"dx-first-row\";\nconst LAYOUT_MANAGER_LAST_ROW_CLASS = \"dx-last-row\";\nconst LAYOUT_MANAGER_FIRST_COL_CLASS = \"dx-first-col\";\nconst LAYOUT_MANAGER_LAST_COL_CLASS = \"dx-last-col\";\nclass LayoutManager extends Widget {\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      layoutData: {},\n      readOnly: false,\n      colCount: 1,\n      labelLocation: \"left\",\n      onFieldDataChanged: null,\n      onEditorEnterKey: null,\n      customizeItem: null,\n      alignItemLabels: true,\n      minColWidth: 200,\n      showRequiredMark: true,\n      screenByWidth: null,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      labelMode: \"outside\",\n      optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\n      requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\")\n    });\n  }\n  _setOptionsByReference() {\n    super._setOptionsByReference();\n    extend(this._optionsByReference, {\n      layoutData: true,\n      validationGroup: true\n    });\n  }\n  _init() {\n    const layoutData = this.option(\"layoutData\");\n    super._init();\n    this._itemWatchers = [];\n    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();\n    this._updateReferencedOptions(layoutData);\n    this._initDataAndItems(layoutData);\n  }\n  _dispose() {\n    super._dispose();\n    this._cleanItemWatchers();\n  }\n  _initDataAndItems(initialData) {\n    this._syncDataWithItems();\n    this._updateItems(initialData);\n  }\n  _syncDataWithItems() {\n    const layoutData = this.option(\"layoutData\");\n    const userItems = this.option(\"items\");\n    if (isDefined(userItems)) {\n      userItems.forEach(item => {\n        if (item.dataField && void 0 === this._getDataByField(item.dataField)) {\n          let value;\n          if (item.editorOptions) {\n            value = item.editorOptions.value;\n          }\n          if (isDefined(value) || item.dataField in layoutData) {\n            this._updateFieldValue(item.dataField, value);\n          }\n        }\n      });\n    }\n  }\n  _getDataByField(dataField) {\n    return dataField ? this.option(`layoutData.${dataField}`) : null;\n  }\n  _isCheckboxUndefinedStateEnabled(_ref) {\n    let {\n      allowIndeterminateState: allowIndeterminateState,\n      editorType: editorType,\n      dataField: dataField\n    } = _ref;\n    if (true === allowIndeterminateState && \"dxCheckBox\" === editorType) {\n      const nameParts = [\"layoutData\", ...dataField.split(\".\")];\n      const propertyName = nameParts.pop();\n      const layoutData = this.option(nameParts.join(\".\"));\n      return layoutData && propertyName in layoutData;\n    }\n    return false;\n  }\n  _updateFieldValue(dataField, value) {\n    const layoutData = this.option(\"layoutData\");\n    let newValue = value;\n    if (!variableWrapper.isWrapped(layoutData[dataField]) && isDefined(dataField)) {\n      this.option(`layoutData.${dataField}`, newValue);\n    } else if (variableWrapper.isWritableWrapped(layoutData[dataField])) {\n      newValue = isFunction(newValue) ? newValue() : newValue;\n      layoutData[dataField](newValue);\n    }\n    this._triggerOnFieldDataChanged({\n      dataField: dataField,\n      value: newValue\n    });\n  }\n  _triggerOnFieldDataChanged(args) {\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  }\n  _updateItems(layoutData) {\n    const that = this;\n    const userItems = this.option(\"items\");\n    const isUserItemsExist = isDefined(userItems);\n    const {\n      customizeItem: customizeItem\n    } = this.option();\n    const items = isUserItemsExist ? userItems : this._generateItemsByData(layoutData);\n    if (isDefined(items)) {\n      const processedItems = [];\n      each(items, (index, item) => {\n        if (that._isAcceptableItem(item)) {\n          item = that._processItem(item);\n          customizeItem && customizeItem(item);\n          if (isObject(item) && false !== variableWrapper.unwrap(item.visible)) {\n            processedItems.push(item);\n          }\n        }\n      });\n      if (!that._itemWatchers.length || !isUserItemsExist) {\n        that._updateItemWatchers(items);\n      }\n      this._setItems(processedItems);\n      this._sortItems();\n    }\n  }\n  _cleanItemWatchers() {\n    this._itemWatchers.forEach(dispose => {\n      dispose();\n    });\n    this._itemWatchers = [];\n  }\n  _updateItemWatchers(items) {\n    const that = this;\n    const watch = that._getWatch();\n    items.forEach(item => {\n      if (isObject(item) && isDefined(item.visible) && isFunction(watch)) {\n        that._itemWatchers.push(watch(() => variableWrapper.unwrap(item.visible), () => {\n          that._updateItems(that.option(\"layoutData\"));\n          that.repaint();\n        }, {\n          skipImmediate: true\n        }));\n      }\n    });\n  }\n  _generateItemsByData(layoutData) {\n    const result = [];\n    if (isDefined(layoutData)) {\n      each(layoutData, dataField => {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n    return result;\n  }\n  _isAcceptableItem(item) {\n    const itemField = item.dataField || item;\n    const itemData = this._getDataByField(itemField);\n    return !(isFunction(itemData) && !variableWrapper.isWrapped(itemData));\n  }\n  _processItem(item) {\n    if (\"string\" === typeof item) {\n      item = {\n        dataField: item\n      };\n    }\n    if (\"object\" === typeof item && !item.itemType) {\n      item.itemType = SIMPLE_ITEM_TYPE;\n    }\n    if (!isDefined(item.editorType) && isDefined(item.dataField)) {\n      const value = this._getDataByField(item.dataField);\n      item.editorType = isDefined(value) ? this._getEditorTypeByDataType(type(value)) : \"dxTextBox\";\n    }\n    if (\"dxCheckBox\" === item.editorType) {\n      item.allowIndeterminateState = item.allowIndeterminateState ?? true;\n    }\n    return item;\n  }\n  _getEditorTypeByDataType(dataType) {\n    switch (dataType) {\n      case \"number\":\n        return \"dxNumberBox\";\n      case \"date\":\n        return \"dxDateBox\";\n      case \"boolean\":\n        return \"dxCheckBox\";\n      default:\n        return \"dxTextBox\";\n    }\n  }\n  _sortItems() {\n    normalizeIndexes(this._items, \"visibleIndex\");\n    this._sortIndexes();\n  }\n  _sortIndexes() {\n    this._items.sort((itemA, itemB) => {\n      const indexA = itemA.visibleIndex;\n      const indexB = itemB.visibleIndex;\n      let result;\n      if (indexA > indexB) {\n        result = 1;\n      } else if (indexA < indexB) {\n        result = -1;\n      } else {\n        result = 0;\n      }\n      return result;\n    });\n  }\n  _initMarkup() {\n    this._itemsRunTimeInfo.clear();\n    this.$element().addClass(FORM_LAYOUT_MANAGER_CLASS);\n    super._initMarkup();\n    this._renderResponsiveBox();\n  }\n  _renderResponsiveBox() {\n    const that = this;\n    const templatesInfo = [];\n    if (that._items && that._items.length) {\n      const colCount = that._getColCount();\n      const $container = $(\"<div>\").appendTo(that.$element());\n      that._prepareItemsWithMerging(colCount);\n      const layoutItems = that._generateLayoutItems();\n      that._responsiveBox = that._createComponent($container, ResponsiveBox, that._getResponsiveBoxConfig(layoutItems, colCount, templatesInfo));\n      if (!hasWindow()) {\n        that._renderTemplates(templatesInfo);\n      }\n    }\n  }\n  _itemStateChangedHandler(e) {\n    this._refresh();\n  }\n  _renderTemplates(templatesInfo) {\n    const that = this;\n    let itemsWithLabelTemplateCount = 0;\n    templatesInfo.forEach(_ref2 => {\n      var _item$label;\n      let {\n        item: item\n      } = _ref2;\n      if (null !== item && void 0 !== item && null !== (_item$label = item.label) && void 0 !== _item$label && _item$label.template) {\n        itemsWithLabelTemplateCount++;\n      }\n    });\n    each(templatesInfo, (index, info) => {\n      switch (info.itemType) {\n        case \"empty\":\n          renderEmptyItem(info);\n          break;\n        case \"button\":\n          that._renderButtonItem(info);\n          break;\n        default:\n          that._renderFieldItem(info, itemsWithLabelTemplateCount);\n      }\n    });\n  }\n  _getResponsiveBoxConfig(layoutItems, colCount, templatesInfo) {\n    const that = this;\n    const colCountByScreen = that.option(\"colCountByScreen\");\n    const xsColCount = colCountByScreen && colCountByScreen.xs;\n    return {\n      onItemStateChanged: this._itemStateChangedHandler.bind(this),\n      onLayoutChanged() {\n        const {\n          onLayoutChanged: onLayoutChanged\n        } = that.option();\n        const isSingleColumnMode = that.isSingleColumnMode();\n        if (onLayoutChanged) {\n          that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, isSingleColumnMode);\n          onLayoutChanged(isSingleColumnMode);\n        }\n      },\n      onContentReady(e) {\n        if (hasWindow()) {\n          that._renderTemplates(templatesInfo);\n        }\n        if (that.option(\"onLayoutChanged\")) {\n          that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, that.isSingleColumnMode(e.component));\n        }\n      },\n      itemTemplate(e, itemData, itemElement) {\n        if (!e.location) {\n          return;\n        }\n        const $itemElement = $(itemElement);\n        const itemRenderedCountInPreviousRows = e.location.row * colCount;\n        const item = that._items[e.location.col + itemRenderedCountInPreviousRows];\n        if (!item) {\n          return;\n        }\n        const itemCssClassList = [item.cssClass];\n        $itemElement.toggleClass(SINGLE_COLUMN_ITEM_CONTENT, that.isSingleColumnMode(this));\n        if (0 === e.location.row) {\n          itemCssClassList.push(\"dx-first-row\");\n        }\n        if (0 === e.location.col) {\n          itemCssClassList.push(\"dx-first-col\");\n        }\n        if (item.itemType === SIMPLE_ITEM_TYPE && that.option(\"isRoot\")) {\n          $itemElement.addClass(ROOT_SIMPLE_ITEM_CLASS);\n        }\n        const isLastColumn = e.location.col === colCount - 1 || e.location.col + e.location.colspan === colCount;\n        const rowsCount = that._getRowsCount();\n        const isLastRow = e.location.row === rowsCount - 1;\n        if (isLastColumn) {\n          itemCssClassList.push(\"dx-last-col\");\n        }\n        if (isLastRow) {\n          itemCssClassList.push(\"dx-last-row\");\n        }\n        if (\"empty\" !== item.itemType) {\n          itemCssClassList.push(FIELD_ITEM_CLASS);\n          itemCssClassList.push(that.option(\"cssItemClass\"));\n          if (isDefined(item.col)) {\n            itemCssClassList.push(`dx-col-${item.col}`);\n          }\n        }\n        templatesInfo.push({\n          itemType: item.itemType,\n          item: item,\n          $parent: $itemElement,\n          rootElementCssClassList: itemCssClassList\n        });\n      },\n      cols: that._generateRatio(colCount),\n      rows: that._generateRatio(that._getRowsCount(), true),\n      dataSource: layoutItems,\n      screenByWidth: that.option(\"screenByWidth\"),\n      singleColumnScreen: xsColCount ? false : \"xs\"\n    };\n  }\n  _getColCount() {\n    let {\n      colCount: colCount\n    } = this.option();\n    const colCountByScreen = this.option(\"colCountByScreen\");\n    if (colCountByScreen) {\n      const {\n        form: form\n      } = this.option();\n      let screenFactor = null === form || void 0 === form ? void 0 : form.getTargetScreenFactor();\n      if (!screenFactor) {\n        screenFactor = hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\";\n      }\n      colCount = colCountByScreen[screenFactor] || colCount;\n    }\n    if (\"auto\" === colCount) {\n      if (this._cashedColCount) {\n        return this._cashedColCount;\n      }\n      this._cashedColCount = colCount = this._getMaxColCount();\n    }\n    return colCount < 1 ? 1 : colCount;\n  }\n  _getMaxColCount() {\n    if (!hasWindow()) {\n      return 1;\n    }\n    const minColWidth = this.option(\"minColWidth\");\n    const width = getWidth(this.$element());\n    const itemsCount = this._items.length;\n    const maxColCount = Math.floor(width / minColWidth) || 1;\n    return itemsCount < maxColCount ? itemsCount : maxColCount;\n  }\n  isCachedColCountObsolete() {\n    return this._cashedColCount && this._getMaxColCount() !== this._cashedColCount;\n  }\n  _prepareItemsWithMerging(colCount) {\n    const items = this._items.slice(0);\n    let item;\n    let itemsMergedByCol;\n    let result = [];\n    let j;\n    let i;\n    for (i = 0; i < items.length; i++) {\n      item = items[i];\n      result.push(item);\n      if (this.option(\"alignItemLabels\") || item.alignItemLabels || item.colSpan) {\n        item.col = this._getColByIndex(result.length - 1, colCount);\n      }\n      if (item.colSpan > 1 && item.col + item.colSpan <= colCount) {\n        itemsMergedByCol = [];\n        for (j = 0; j < item.colSpan - 1; j++) {\n          itemsMergedByCol.push({\n            merged: true\n          });\n        }\n        result = result.concat(itemsMergedByCol);\n      } else {\n        delete item.colSpan;\n      }\n    }\n    this._setItems(result);\n  }\n  _getColByIndex(index, colCount) {\n    return index % colCount;\n  }\n  _setItems(items) {\n    this._items = items;\n    this._cashedColCount = null;\n  }\n  _generateLayoutItems() {\n    const items = this._items;\n    const colCount = this._getColCount();\n    const result = [];\n    let item;\n    let i;\n    for (i = 0; i < items.length; i++) {\n      item = items[i];\n      if (!item.merged) {\n        const generatedItem = {\n          location: {\n            row: parseInt(i / colCount),\n            col: this._getColByIndex(i, colCount)\n          }\n        };\n        if (isDefined(item.disabled)) {\n          generatedItem.disabled = item.disabled;\n        }\n        if (isDefined(item.visible)) {\n          generatedItem.visible = item.visible;\n        }\n        if (isDefined(item.colSpan)) {\n          generatedItem.location.colspan = item.colSpan;\n        }\n        if (isDefined(item.rowSpan)) {\n          generatedItem.location.rowspan = item.rowSpan;\n        }\n        result.push(generatedItem);\n      }\n    }\n    return result;\n  }\n  _renderEmptyItem($container) {\n    renderEmptyItem({\n      $container: $container\n    });\n  }\n  _renderButtonItem(_ref3) {\n    let {\n      item: item,\n      $parent: $parent,\n      rootElementCssClassList: rootElementCssClassList\n    } = _ref3;\n    const {\n      $rootElement: $rootElement,\n      buttonInstance: buttonInstance\n    } = renderButtonItem({\n      item: item,\n      $parent: $parent,\n      rootElementCssClassList: rootElementCssClassList,\n      validationGroup: this.option(\"validationGroup\"),\n      createComponentCallback: this._createComponent.bind(this)\n    });\n    this._itemsRunTimeInfo.add({\n      item: item,\n      widgetInstance: buttonInstance,\n      guid: item.guid,\n      $itemContainer: $rootElement\n    });\n  }\n  _renderFieldItem(_ref4, itemsWithLabelTemplateCount) {\n    var _item$label2;\n    let {\n      item: item,\n      $parent: $parent,\n      rootElementCssClassList: rootElementCssClassList\n    } = _ref4;\n    const editorValue = this._getDataByField(item.dataField);\n    let canAssignUndefinedValueToEditor = false;\n    if (void 0 === editorValue) {\n      const {\n        allowIndeterminateState: allowIndeterminateState,\n        editorType: editorType,\n        dataField: dataField\n      } = item;\n      canAssignUndefinedValueToEditor = this._isCheckboxUndefinedStateEnabled({\n        allowIndeterminateState: allowIndeterminateState,\n        editorType: editorType,\n        dataField: dataField\n      });\n    }\n    const name = item.dataField || item.name;\n    const formOrLayoutManager = this._getFormOrThis();\n    const {\n      form: form\n    } = this.option();\n    const {\n      $fieldEditorContainer: $fieldEditorContainer,\n      widgetInstance: widgetInstance,\n      $rootElement: $rootElement\n    } = renderFieldItem(convertToRenderFieldItemOptions({\n      $parent: $parent,\n      rootElementCssClassList: rootElementCssClassList,\n      item: item,\n      name: name,\n      editorValue: editorValue,\n      canAssignUndefinedValueToEditor: canAssignUndefinedValueToEditor,\n      formOrLayoutManager: this._getFormOrThis(),\n      createComponentCallback: this._createComponent.bind(this),\n      formLabelLocation: this.option(\"labelLocation\"),\n      requiredMessageTemplate: this.option(\"requiredMessage\"),\n      validationGroup: this.option(\"validationGroup\"),\n      editorValidationBoundary: this.option(\"validationBoundary\"),\n      editorStylingMode: null === form || void 0 === form ? void 0 : form.option(\"stylingMode\"),\n      showColonAfterLabel: this.option(\"showColonAfterLabel\"),\n      managerLabelLocation: this.option(\"labelLocation\"),\n      template: item.template ? this._getTemplate(item.template) : null,\n      labelTemplate: null !== (_item$label2 = item.label) && void 0 !== _item$label2 && _item$label2.template ? this._getTemplate(item.label.template) : null,\n      itemId: null === form || void 0 === form ? void 0 : form.getItemID(name),\n      managerMarkOptions: this._getMarkOptions(),\n      labelMode: this.option(\"labelMode\"),\n      onLabelTemplateRendered: () => {\n        this._incTemplateRenderedCallCount();\n        if (this._shouldAlignLabelsOnTemplateRendered(formOrLayoutManager, itemsWithLabelTemplateCount)) {\n          formOrLayoutManager._alignLabels(this, this.isSingleColumnMode(formOrLayoutManager));\n        }\n      }\n    }));\n    const {\n      onFieldItemRendered: onFieldItemRendered\n    } = this.option();\n    null === onFieldItemRendered || void 0 === onFieldItemRendered || onFieldItemRendered();\n    if (widgetInstance && item.dataField) {\n      this._bindDataField(widgetInstance, item.dataField, item.editorType, $fieldEditorContainer);\n    }\n    this._itemsRunTimeInfo.add({\n      item: item,\n      widgetInstance: widgetInstance,\n      guid: item.guid,\n      $itemContainer: $rootElement\n    });\n  }\n  _incTemplateRenderedCallCount() {\n    this._labelTemplateRenderedCallCount = (this._labelTemplateRenderedCallCount ?? 0) + 1;\n  }\n  _shouldAlignLabelsOnTemplateRendered(formOrLayoutManager, totalItemsWithLabelTemplate) {\n    return formOrLayoutManager.option(\"templatesRenderAsynchronously\") && this._labelTemplateRenderedCallCount === totalItemsWithLabelTemplate;\n  }\n  _getMarkOptions() {\n    return {\n      showRequiredMark: this.option(\"showRequiredMark\"),\n      requiredMark: this.option(\"requiredMark\"),\n      showOptionalMark: this.option(\"showOptionalMark\"),\n      optionalMark: this.option(\"optionalMark\")\n    };\n  }\n  _getFormOrThis() {\n    const {\n      form: form\n    } = this.option();\n    return form || this;\n  }\n  _bindDataField(editorInstance, dataField, editorType, $container) {\n    const formOrThis = this._getFormOrThis();\n    editorInstance.on(\"enterKey\", args => {\n      formOrThis._createActionByOption(\"onEditorEnterKey\")(extend(args, {\n        dataField: dataField\n      }));\n    });\n    this._createWatcher(editorInstance, $container, dataField);\n    this.linkEditorToDataField(editorInstance, dataField);\n  }\n  _createWatcher(editorInstance, $container, dataField) {\n    const that = this;\n    const watch = that._getWatch();\n    if (!isFunction(watch)) {\n      return;\n    }\n    const dispose = watch(() => that._getDataByField(dataField), () => {\n      const fieldValue = that._getDataByField(dataField);\n      if (\"dxTagBox\" === editorInstance.NAME) {\n        const editorValue = editorInstance.option(\"value\");\n        if (fieldValue !== editorValue && function (array1, array2) {\n          if (!Array.isArray(array1) || !Array.isArray(array2) || array1.length !== array2.length) {\n            return false;\n          }\n          for (let i = 0; i < array1.length; i++) {\n            if (array1[i] !== array2[i]) {\n              return false;\n            }\n          }\n          return true;\n        }(fieldValue, editorValue)) {\n          return;\n        }\n      }\n      editorInstance.option(\"value\", fieldValue);\n    }, {\n      deep: true,\n      skipImmediate: true\n    }, {\n      createWatcherDataField: dataField\n    });\n    eventsEngine.on($container, removeEvent, dispose);\n  }\n  _getWatch() {\n    if (!isDefined(this._watch)) {\n      const {\n        form: formInstance\n      } = this.option();\n      this._watch = formInstance && formInstance.option(\"integrationOptions.watchMethod\");\n    }\n    return this._watch;\n  }\n  _createComponent($editor, type, editorOptions) {\n    const readOnlyState = this.option(\"readOnly\");\n    let hasEditorReadOnly = Object.hasOwn(editorOptions, \"readOnly\");\n    const instance = super._createComponent($editor, type, _extends({}, editorOptions, {\n      readOnly: !hasEditorReadOnly ? readOnlyState : editorOptions.readOnly\n    }));\n    let isChangeByForm = false;\n    instance.on(\"optionChanged\", args => {\n      if (\"readOnly\" === args.name && !isChangeByForm) {\n        hasEditorReadOnly = true;\n      }\n    });\n    this.on(\"optionChanged\", args => {\n      if (\"readOnly\" === args.name && !hasEditorReadOnly) {\n        isChangeByForm = true;\n        instance.option(args.name, args.value);\n        isChangeByForm = false;\n      }\n    });\n    return instance;\n  }\n  _generateRatio(count, isAutoSize) {\n    const result = [];\n    let ratio;\n    let i;\n    for (i = 0; i < count; i++) {\n      ratio = {\n        ratio: 1\n      };\n      if (isAutoSize) {\n        ratio.baseSize = \"auto\";\n      }\n      result.push(ratio);\n    }\n    return result;\n  }\n  _getRowsCount() {\n    return Math.ceil(this._items.length / this._getColCount());\n  }\n  _updateReferencedOptions(newLayoutData) {\n    const layoutData = this.option(\"layoutData\");\n    if (isObject(layoutData)) {\n      Object.getOwnPropertyNames(layoutData).forEach(property => delete this._optionsByReference[`layoutData.${property}`]);\n    }\n    if (isObject(newLayoutData)) {\n      Object.getOwnPropertyNames(newLayoutData).forEach(property => this._optionsByReference[`layoutData.${property}`] = true);\n    }\n  }\n  _clearWidget(instance) {\n    this._disableEditorValueChangedHandler = true;\n    instance.clear();\n    this._disableEditorValueChangedHandler = false;\n    instance.option(\"isValid\", true);\n  }\n  _optionChanged(args) {\n    if (0 === args.fullName.search(\"layoutData.\")) {\n      return;\n    }\n    switch (args.name) {\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n      case \"alignItemLabels\":\n      case \"labelLocation\":\n      case \"labelMode\":\n      case \"requiredMessage\":\n        this._invalidate();\n        break;\n      case \"layoutData\":\n        this._updateReferencedOptions(args.value);\n        if (this.option(\"items\")) {\n          if (!isEmptyObject(args.value)) {\n            this._itemsRunTimeInfo.each((_, itemRunTimeInfo) => {\n              if (isDefined(itemRunTimeInfo.item)) {\n                const {\n                  dataField: dataField\n                } = itemRunTimeInfo.item;\n                if (dataField && isDefined(itemRunTimeInfo.widgetInstance)) {\n                  const valueGetter = compileGetter(dataField);\n                  const dataValue = valueGetter(args.value);\n                  const {\n                    allowIndeterminateState: allowIndeterminateState,\n                    editorType: editorType\n                  } = itemRunTimeInfo.item;\n                  if (void 0 !== dataValue || this._isCheckboxUndefinedStateEnabled({\n                    allowIndeterminateState: allowIndeterminateState,\n                    editorType: editorType,\n                    dataField: dataField\n                  })) {\n                    itemRunTimeInfo.widgetInstance.option(\"value\", dataValue);\n                  } else {\n                    this._clearWidget(itemRunTimeInfo.widgetInstance);\n                  }\n                }\n              }\n            });\n          }\n        } else {\n          this._initDataAndItems(args.value);\n          this._invalidate();\n        }\n        break;\n      case \"items\":\n        this._cleanItemWatchers();\n        this._initDataAndItems(args.value);\n        this._invalidate();\n        break;\n      case \"customizeItem\":\n        this._updateItems(this.option(\"layoutData\"));\n        this._invalidate();\n        break;\n      case \"colCount\":\n      case \"colCountByScreen\":\n        this._resetColCount();\n        break;\n      case \"minColWidth\":\n        {\n          const {\n            colCount: colCount\n          } = this.option();\n          if (\"auto\" === colCount) {\n            this._resetColCount();\n          }\n          break;\n        }\n      case \"readOnly\":\n      case \"onFieldDataChanged\":\n        break;\n      case \"width\":\n        {\n          super._optionChanged(args);\n          const {\n            colCount: colCount\n          } = this.option();\n          if (\"auto\" === colCount) {\n            this._resetColCount();\n          }\n          break;\n        }\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _resetColCount() {\n    this._cashedColCount = null;\n    this._invalidate();\n  }\n  linkEditorToDataField(editorInstance, dataField) {\n    this.on(\"optionChanged\", args => {\n      if (args.fullName === `layoutData.${dataField}`) {\n        editorInstance._setOptionWithoutOptionChange(\"value\", args.value);\n      }\n    });\n    editorInstance.on(\"valueChanged\", args => {\n      const isValueReferenceType = isObject(args.value) || Array.isArray(args.value);\n      if (!this._disableEditorValueChangedHandler && !(isValueReferenceType && args.value === args.previousValue)) {\n        this._updateFieldValue(dataField, args.value);\n      }\n    });\n  }\n  _dimensionChanged() {\n    const {\n      colCount: colCount\n    } = this.option();\n    if (\"auto\" === colCount && this.isCachedColCountObsolete()) {\n      this._eventsStrategy.fireEvent(\"autoColCountChanged\");\n    }\n  }\n  updateData(data, value) {\n    const that = this;\n    if (isObject(data)) {\n      each(data, (dataField, fieldValue) => {\n        that._updateFieldValue(dataField, fieldValue);\n      });\n    } else if (\"string\" === typeof data) {\n      that._updateFieldValue(data, value);\n    }\n  }\n  getEditor(field) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(field) || this._itemsRunTimeInfo.findWidgetInstanceByName(field);\n  }\n  isSingleColumnMode(component) {\n    const responsiveBox = this._responsiveBox || component;\n    if (responsiveBox) {\n      return responsiveBox.option(\"currentScreenFactor\") === responsiveBox.option(\"singleColumnScreen\");\n    }\n  }\n  getItemsRunTimeInfo() {\n    return this._itemsRunTimeInfo;\n  }\n}\nregisterComponent(\"dxLayoutManager\", LayoutManager);\nexport default LayoutManager;","map":{"version":3,"names":["_extends","eventsEngine","removeEvent","messageLocalization","registerComponent","$","normalizeIndexes","compileGetter","extend","each","getWidth","isDefined","isEmptyObject","isFunction","isObject","type","variableWrapper","getCurrentScreenFactor","hasWindow","Widget","ResponsiveBox","renderButtonItem","renderEmptyItem","renderFieldItem","FIELD_ITEM_CLASS","FORM_LAYOUT_MANAGER_CLASS","LAYOUT_MANAGER_ONE_COLUMN","ROOT_SIMPLE_ITEM_CLASS","SIMPLE_ITEM_TYPE","SINGLE_COLUMN_ITEM_CONTENT","default","FormItemsRunTimeInfo","convertToRenderFieldItemOptions","FORM_EDITOR_BY_DEFAULT","LAYOUT_MANAGER_FIRST_ROW_CLASS","LAYOUT_MANAGER_LAST_ROW_CLASS","LAYOUT_MANAGER_FIRST_COL_CLASS","LAYOUT_MANAGER_LAST_COL_CLASS","LayoutManager","_getDefaultOptions","layoutData","readOnly","colCount","labelLocation","onFieldDataChanged","onEditorEnterKey","customizeItem","alignItemLabels","minColWidth","showRequiredMark","screenByWidth","showOptionalMark","requiredMark","labelMode","optionalMark","format","requiredMessage","getFormatter","_setOptionsByReference","_optionsByReference","validationGroup","_init","option","_itemWatchers","_itemsRunTimeInfo","_updateReferencedOptions","_initDataAndItems","_dispose","_cleanItemWatchers","initialData","_syncDataWithItems","_updateItems","userItems","forEach","item","dataField","_getDataByField","value","editorOptions","_updateFieldValue","_isCheckboxUndefinedStateEnabled","_ref","allowIndeterminateState","editorType","nameParts","split","propertyName","pop","join","newValue","isWrapped","isWritableWrapped","_triggerOnFieldDataChanged","args","_createActionByOption","that","isUserItemsExist","items","_generateItemsByData","processedItems","index","_isAcceptableItem","_processItem","unwrap","visible","push","length","_updateItemWatchers","_setItems","_sortItems","dispose","watch","_getWatch","repaint","skipImmediate","result","itemField","itemData","itemType","_getEditorTypeByDataType","dataType","_items","_sortIndexes","sort","itemA","itemB","indexA","visibleIndex","indexB","_initMarkup","clear","$element","addClass","_renderResponsiveBox","templatesInfo","_getColCount","$container","appendTo","_prepareItemsWithMerging","layoutItems","_generateLayoutItems","_responsiveBox","_createComponent","_getResponsiveBoxConfig","_renderTemplates","_itemStateChangedHandler","e","_refresh","itemsWithLabelTemplateCount","_ref2","_item$label","label","template","info","_renderButtonItem","_renderFieldItem","colCountByScreen","xsColCount","xs","onItemStateChanged","bind","onLayoutChanged","isSingleColumnMode","toggleClass","onContentReady","component","itemTemplate","itemElement","location","$itemElement","itemRenderedCountInPreviousRows","row","col","itemCssClassList","cssClass","isLastColumn","colspan","rowsCount","_getRowsCount","isLastRow","$parent","rootElementCssClassList","cols","_generateRatio","rows","dataSource","singleColumnScreen","form","screenFactor","getTargetScreenFactor","_cashedColCount","_getMaxColCount","width","itemsCount","maxColCount","Math","floor","isCachedColCountObsolete","slice","itemsMergedByCol","j","i","colSpan","_getColByIndex","merged","concat","generatedItem","parseInt","disabled","rowSpan","rowspan","_renderEmptyItem","_ref3","$rootElement","buttonInstance","createComponentCallback","add","widgetInstance","guid","$itemContainer","_ref4","_item$label2","editorValue","canAssignUndefinedValueToEditor","name","formOrLayoutManager","_getFormOrThis","$fieldEditorContainer","formLabelLocation","requiredMessageTemplate","editorValidationBoundary","editorStylingMode","showColonAfterLabel","managerLabelLocation","_getTemplate","labelTemplate","itemId","getItemID","managerMarkOptions","_getMarkOptions","onLabelTemplateRendered","_incTemplateRenderedCallCount","_shouldAlignLabelsOnTemplateRendered","_alignLabels","onFieldItemRendered","_bindDataField","_labelTemplateRenderedCallCount","totalItemsWithLabelTemplate","editorInstance","formOrThis","on","_createWatcher","linkEditorToDataField","fieldValue","NAME","array1","array2","Array","isArray","deep","createWatcherDataField","_watch","formInstance","$editor","readOnlyState","hasEditorReadOnly","Object","hasOwn","instance","isChangeByForm","count","isAutoSize","ratio","baseSize","ceil","newLayoutData","getOwnPropertyNames","property","_clearWidget","_disableEditorValueChangedHandler","_optionChanged","fullName","search","_invalidate","_","itemRunTimeInfo","valueGetter","dataValue","_resetColCount","_setOptionWithoutOptionChange","isValueReferenceType","previousValue","_dimensionChanged","_eventsStrategy","fireEvent","updateData","data","getEditor","field","findWidgetInstanceByDataField","findWidgetInstanceByName","responsiveBox","getItemsRunTimeInfo"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/form/m_form.layout_manager.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/form/m_form.layout_manager.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport \"../../../ui/text_box\";\r\nimport \"../../../ui/number_box\";\r\nimport \"../../../ui/check_box\";\r\nimport \"../../../ui/date_box\";\r\nimport \"../../../ui/button\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    removeEvent\r\n} from \"../../../common/core/events/remove\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    normalizeIndexes\r\n} from \"../../../core/utils/array\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../core/utils/data\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getWidth\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isFunction,\r\n    isObject,\r\n    type\r\n} from \"../../../core/utils/type\";\r\nimport variableWrapper from \"../../../core/utils/variable_wrapper\";\r\nimport {\r\n    getCurrentScreenFactor,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport Widget from \"../../core/widget/widget\";\r\nimport ResponsiveBox from \"../../ui/m_responsive_box\";\r\nimport {\r\n    renderButtonItem\r\n} from \"./components/m_button_item\";\r\nimport {\r\n    renderEmptyItem\r\n} from \"./components/m_empty_item\";\r\nimport {\r\n    renderFieldItem\r\n} from \"./components/m_field_item\";\r\nimport {\r\n    FIELD_ITEM_CLASS,\r\n    FORM_LAYOUT_MANAGER_CLASS,\r\n    LAYOUT_MANAGER_ONE_COLUMN,\r\n    ROOT_SIMPLE_ITEM_CLASS,\r\n    SIMPLE_ITEM_TYPE,\r\n    SINGLE_COLUMN_ITEM_CONTENT\r\n} from \"./constants\";\r\nimport {\r\n    default as FormItemsRunTimeInfo\r\n} from \"./m_form.items_runtime_info\";\r\nimport {\r\n    convertToRenderFieldItemOptions\r\n} from \"./m_form.layout_manager.utils\";\r\nconst FORM_EDITOR_BY_DEFAULT = \"dxTextBox\";\r\nconst LAYOUT_MANAGER_FIRST_ROW_CLASS = \"dx-first-row\";\r\nconst LAYOUT_MANAGER_LAST_ROW_CLASS = \"dx-last-row\";\r\nconst LAYOUT_MANAGER_FIRST_COL_CLASS = \"dx-first-col\";\r\nconst LAYOUT_MANAGER_LAST_COL_CLASS = \"dx-last-col\";\r\nclass LayoutManager extends Widget {\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            layoutData: {},\r\n            readOnly: false,\r\n            colCount: 1,\r\n            labelLocation: \"left\",\r\n            onFieldDataChanged: null,\r\n            onEditorEnterKey: null,\r\n            customizeItem: null,\r\n            alignItemLabels: true,\r\n            minColWidth: 200,\r\n            showRequiredMark: true,\r\n            screenByWidth: null,\r\n            showOptionalMark: false,\r\n            requiredMark: \"*\",\r\n            labelMode: \"outside\",\r\n            optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\r\n            requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\")\r\n        })\r\n    }\r\n    _setOptionsByReference() {\r\n        super._setOptionsByReference();\r\n        extend(this._optionsByReference, {\r\n            layoutData: true,\r\n            validationGroup: true\r\n        })\r\n    }\r\n    _init() {\r\n        const layoutData = this.option(\"layoutData\");\r\n        super._init();\r\n        this._itemWatchers = [];\r\n        this._itemsRunTimeInfo = new FormItemsRunTimeInfo;\r\n        this._updateReferencedOptions(layoutData);\r\n        this._initDataAndItems(layoutData)\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        this._cleanItemWatchers()\r\n    }\r\n    _initDataAndItems(initialData) {\r\n        this._syncDataWithItems();\r\n        this._updateItems(initialData)\r\n    }\r\n    _syncDataWithItems() {\r\n        const layoutData = this.option(\"layoutData\");\r\n        const userItems = this.option(\"items\");\r\n        if (isDefined(userItems)) {\r\n            userItems.forEach((item => {\r\n                if (item.dataField && void 0 === this._getDataByField(item.dataField)) {\r\n                    let value;\r\n                    if (item.editorOptions) {\r\n                        value = item.editorOptions.value\r\n                    }\r\n                    if (isDefined(value) || item.dataField in layoutData) {\r\n                        this._updateFieldValue(item.dataField, value)\r\n                    }\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    _getDataByField(dataField) {\r\n        return dataField ? this.option(`layoutData.${dataField}`) : null\r\n    }\r\n    _isCheckboxUndefinedStateEnabled(_ref) {\r\n        let {\r\n            allowIndeterminateState: allowIndeterminateState,\r\n            editorType: editorType,\r\n            dataField: dataField\r\n        } = _ref;\r\n        if (true === allowIndeterminateState && \"dxCheckBox\" === editorType) {\r\n            const nameParts = [\"layoutData\", ...dataField.split(\".\")];\r\n            const propertyName = nameParts.pop();\r\n            const layoutData = this.option(nameParts.join(\".\"));\r\n            return layoutData && propertyName in layoutData\r\n        }\r\n        return false\r\n    }\r\n    _updateFieldValue(dataField, value) {\r\n        const layoutData = this.option(\"layoutData\");\r\n        let newValue = value;\r\n        if (!variableWrapper.isWrapped(layoutData[dataField]) && isDefined(dataField)) {\r\n            this.option(`layoutData.${dataField}`, newValue)\r\n        } else if (variableWrapper.isWritableWrapped(layoutData[dataField])) {\r\n            newValue = isFunction(newValue) ? newValue() : newValue;\r\n            layoutData[dataField](newValue)\r\n        }\r\n        this._triggerOnFieldDataChanged({\r\n            dataField: dataField,\r\n            value: newValue\r\n        })\r\n    }\r\n    _triggerOnFieldDataChanged(args) {\r\n        this._createActionByOption(\"onFieldDataChanged\")(args)\r\n    }\r\n    _updateItems(layoutData) {\r\n        const that = this;\r\n        const userItems = this.option(\"items\");\r\n        const isUserItemsExist = isDefined(userItems);\r\n        const {\r\n            customizeItem: customizeItem\r\n        } = this.option();\r\n        const items = isUserItemsExist ? userItems : this._generateItemsByData(layoutData);\r\n        if (isDefined(items)) {\r\n            const processedItems = [];\r\n            each(items, ((index, item) => {\r\n                if (that._isAcceptableItem(item)) {\r\n                    item = that._processItem(item);\r\n                    customizeItem && customizeItem(item);\r\n                    if (isObject(item) && false !== variableWrapper.unwrap(item.visible)) {\r\n                        processedItems.push(item)\r\n                    }\r\n                }\r\n            }));\r\n            if (!that._itemWatchers.length || !isUserItemsExist) {\r\n                that._updateItemWatchers(items)\r\n            }\r\n            this._setItems(processedItems);\r\n            this._sortItems()\r\n        }\r\n    }\r\n    _cleanItemWatchers() {\r\n        this._itemWatchers.forEach((dispose => {\r\n            dispose()\r\n        }));\r\n        this._itemWatchers = []\r\n    }\r\n    _updateItemWatchers(items) {\r\n        const that = this;\r\n        const watch = that._getWatch();\r\n        items.forEach((item => {\r\n            if (isObject(item) && isDefined(item.visible) && isFunction(watch)) {\r\n                that._itemWatchers.push(watch((() => variableWrapper.unwrap(item.visible)), (() => {\r\n                    that._updateItems(that.option(\"layoutData\"));\r\n                    that.repaint()\r\n                }), {\r\n                    skipImmediate: true\r\n                }))\r\n            }\r\n        }))\r\n    }\r\n    _generateItemsByData(layoutData) {\r\n        const result = [];\r\n        if (isDefined(layoutData)) {\r\n            each(layoutData, (dataField => {\r\n                result.push({\r\n                    dataField: dataField\r\n                })\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    _isAcceptableItem(item) {\r\n        const itemField = item.dataField || item;\r\n        const itemData = this._getDataByField(itemField);\r\n        return !(isFunction(itemData) && !variableWrapper.isWrapped(itemData))\r\n    }\r\n    _processItem(item) {\r\n        if (\"string\" === typeof item) {\r\n            item = {\r\n                dataField: item\r\n            }\r\n        }\r\n        if (\"object\" === typeof item && !item.itemType) {\r\n            item.itemType = SIMPLE_ITEM_TYPE\r\n        }\r\n        if (!isDefined(item.editorType) && isDefined(item.dataField)) {\r\n            const value = this._getDataByField(item.dataField);\r\n            item.editorType = isDefined(value) ? this._getEditorTypeByDataType(type(value)) : \"dxTextBox\"\r\n        }\r\n        if (\"dxCheckBox\" === item.editorType) {\r\n            item.allowIndeterminateState = item.allowIndeterminateState ?? true\r\n        }\r\n        return item\r\n    }\r\n    _getEditorTypeByDataType(dataType) {\r\n        switch (dataType) {\r\n            case \"number\":\r\n                return \"dxNumberBox\";\r\n            case \"date\":\r\n                return \"dxDateBox\";\r\n            case \"boolean\":\r\n                return \"dxCheckBox\";\r\n            default:\r\n                return \"dxTextBox\"\r\n        }\r\n    }\r\n    _sortItems() {\r\n        normalizeIndexes(this._items, \"visibleIndex\");\r\n        this._sortIndexes()\r\n    }\r\n    _sortIndexes() {\r\n        this._items.sort(((itemA, itemB) => {\r\n            const indexA = itemA.visibleIndex;\r\n            const indexB = itemB.visibleIndex;\r\n            let result;\r\n            if (indexA > indexB) {\r\n                result = 1\r\n            } else if (indexA < indexB) {\r\n                result = -1\r\n            } else {\r\n                result = 0\r\n            }\r\n            return result\r\n        }))\r\n    }\r\n    _initMarkup() {\r\n        this._itemsRunTimeInfo.clear();\r\n        this.$element().addClass(FORM_LAYOUT_MANAGER_CLASS);\r\n        super._initMarkup();\r\n        this._renderResponsiveBox()\r\n    }\r\n    _renderResponsiveBox() {\r\n        const that = this;\r\n        const templatesInfo = [];\r\n        if (that._items && that._items.length) {\r\n            const colCount = that._getColCount();\r\n            const $container = $(\"<div>\").appendTo(that.$element());\r\n            that._prepareItemsWithMerging(colCount);\r\n            const layoutItems = that._generateLayoutItems();\r\n            that._responsiveBox = that._createComponent($container, ResponsiveBox, that._getResponsiveBoxConfig(layoutItems, colCount, templatesInfo));\r\n            if (!hasWindow()) {\r\n                that._renderTemplates(templatesInfo)\r\n            }\r\n        }\r\n    }\r\n    _itemStateChangedHandler(e) {\r\n        this._refresh()\r\n    }\r\n    _renderTemplates(templatesInfo) {\r\n        const that = this;\r\n        let itemsWithLabelTemplateCount = 0;\r\n        templatesInfo.forEach((_ref2 => {\r\n            var _item$label;\r\n            let {\r\n                item: item\r\n            } = _ref2;\r\n            if (null !== item && void 0 !== item && null !== (_item$label = item.label) && void 0 !== _item$label && _item$label.template) {\r\n                itemsWithLabelTemplateCount++\r\n            }\r\n        }));\r\n        each(templatesInfo, ((index, info) => {\r\n            switch (info.itemType) {\r\n                case \"empty\":\r\n                    renderEmptyItem(info);\r\n                    break;\r\n                case \"button\":\r\n                    that._renderButtonItem(info);\r\n                    break;\r\n                default:\r\n                    that._renderFieldItem(info, itemsWithLabelTemplateCount)\r\n            }\r\n        }))\r\n    }\r\n    _getResponsiveBoxConfig(layoutItems, colCount, templatesInfo) {\r\n        const that = this;\r\n        const colCountByScreen = that.option(\"colCountByScreen\");\r\n        const xsColCount = colCountByScreen && colCountByScreen.xs;\r\n        return {\r\n            onItemStateChanged: this._itemStateChangedHandler.bind(this),\r\n            onLayoutChanged() {\r\n                const {\r\n                    onLayoutChanged: onLayoutChanged\r\n                } = that.option();\r\n                const isSingleColumnMode = that.isSingleColumnMode();\r\n                if (onLayoutChanged) {\r\n                    that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, isSingleColumnMode);\r\n                    onLayoutChanged(isSingleColumnMode)\r\n                }\r\n            },\r\n            onContentReady(e) {\r\n                if (hasWindow()) {\r\n                    that._renderTemplates(templatesInfo)\r\n                }\r\n                if (that.option(\"onLayoutChanged\")) {\r\n                    that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, that.isSingleColumnMode(e.component))\r\n                }\r\n            },\r\n            itemTemplate(e, itemData, itemElement) {\r\n                if (!e.location) {\r\n                    return\r\n                }\r\n                const $itemElement = $(itemElement);\r\n                const itemRenderedCountInPreviousRows = e.location.row * colCount;\r\n                const item = that._items[e.location.col + itemRenderedCountInPreviousRows];\r\n                if (!item) {\r\n                    return\r\n                }\r\n                const itemCssClassList = [item.cssClass];\r\n                $itemElement.toggleClass(SINGLE_COLUMN_ITEM_CONTENT, that.isSingleColumnMode(this));\r\n                if (0 === e.location.row) {\r\n                    itemCssClassList.push(\"dx-first-row\")\r\n                }\r\n                if (0 === e.location.col) {\r\n                    itemCssClassList.push(\"dx-first-col\")\r\n                }\r\n                if (item.itemType === SIMPLE_ITEM_TYPE && that.option(\"isRoot\")) {\r\n                    $itemElement.addClass(ROOT_SIMPLE_ITEM_CLASS)\r\n                }\r\n                const isLastColumn = e.location.col === colCount - 1 || e.location.col + e.location.colspan === colCount;\r\n                const rowsCount = that._getRowsCount();\r\n                const isLastRow = e.location.row === rowsCount - 1;\r\n                if (isLastColumn) {\r\n                    itemCssClassList.push(\"dx-last-col\")\r\n                }\r\n                if (isLastRow) {\r\n                    itemCssClassList.push(\"dx-last-row\")\r\n                }\r\n                if (\"empty\" !== item.itemType) {\r\n                    itemCssClassList.push(FIELD_ITEM_CLASS);\r\n                    itemCssClassList.push(that.option(\"cssItemClass\"));\r\n                    if (isDefined(item.col)) {\r\n                        itemCssClassList.push(`dx-col-${item.col}`)\r\n                    }\r\n                }\r\n                templatesInfo.push({\r\n                    itemType: item.itemType,\r\n                    item: item,\r\n                    $parent: $itemElement,\r\n                    rootElementCssClassList: itemCssClassList\r\n                })\r\n            },\r\n            cols: that._generateRatio(colCount),\r\n            rows: that._generateRatio(that._getRowsCount(), true),\r\n            dataSource: layoutItems,\r\n            screenByWidth: that.option(\"screenByWidth\"),\r\n            singleColumnScreen: xsColCount ? false : \"xs\"\r\n        }\r\n    }\r\n    _getColCount() {\r\n        let {\r\n            colCount: colCount\r\n        } = this.option();\r\n        const colCountByScreen = this.option(\"colCountByScreen\");\r\n        if (colCountByScreen) {\r\n            const {\r\n                form: form\r\n            } = this.option();\r\n            let screenFactor = null === form || void 0 === form ? void 0 : form.getTargetScreenFactor();\r\n            if (!screenFactor) {\r\n                screenFactor = hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\"\r\n            }\r\n            colCount = colCountByScreen[screenFactor] || colCount\r\n        }\r\n        if (\"auto\" === colCount) {\r\n            if (this._cashedColCount) {\r\n                return this._cashedColCount\r\n            }\r\n            this._cashedColCount = colCount = this._getMaxColCount()\r\n        }\r\n        return colCount < 1 ? 1 : colCount\r\n    }\r\n    _getMaxColCount() {\r\n        if (!hasWindow()) {\r\n            return 1\r\n        }\r\n        const minColWidth = this.option(\"minColWidth\");\r\n        const width = getWidth(this.$element());\r\n        const itemsCount = this._items.length;\r\n        const maxColCount = Math.floor(width / minColWidth) || 1;\r\n        return itemsCount < maxColCount ? itemsCount : maxColCount\r\n    }\r\n    isCachedColCountObsolete() {\r\n        return this._cashedColCount && this._getMaxColCount() !== this._cashedColCount\r\n    }\r\n    _prepareItemsWithMerging(colCount) {\r\n        const items = this._items.slice(0);\r\n        let item;\r\n        let itemsMergedByCol;\r\n        let result = [];\r\n        let j;\r\n        let i;\r\n        for (i = 0; i < items.length; i++) {\r\n            item = items[i];\r\n            result.push(item);\r\n            if (this.option(\"alignItemLabels\") || item.alignItemLabels || item.colSpan) {\r\n                item.col = this._getColByIndex(result.length - 1, colCount)\r\n            }\r\n            if (item.colSpan > 1 && item.col + item.colSpan <= colCount) {\r\n                itemsMergedByCol = [];\r\n                for (j = 0; j < item.colSpan - 1; j++) {\r\n                    itemsMergedByCol.push({\r\n                        merged: true\r\n                    })\r\n                }\r\n                result = result.concat(itemsMergedByCol)\r\n            } else {\r\n                delete item.colSpan\r\n            }\r\n        }\r\n        this._setItems(result)\r\n    }\r\n    _getColByIndex(index, colCount) {\r\n        return index % colCount\r\n    }\r\n    _setItems(items) {\r\n        this._items = items;\r\n        this._cashedColCount = null\r\n    }\r\n    _generateLayoutItems() {\r\n        const items = this._items;\r\n        const colCount = this._getColCount();\r\n        const result = [];\r\n        let item;\r\n        let i;\r\n        for (i = 0; i < items.length; i++) {\r\n            item = items[i];\r\n            if (!item.merged) {\r\n                const generatedItem = {\r\n                    location: {\r\n                        row: parseInt(i / colCount),\r\n                        col: this._getColByIndex(i, colCount)\r\n                    }\r\n                };\r\n                if (isDefined(item.disabled)) {\r\n                    generatedItem.disabled = item.disabled\r\n                }\r\n                if (isDefined(item.visible)) {\r\n                    generatedItem.visible = item.visible\r\n                }\r\n                if (isDefined(item.colSpan)) {\r\n                    generatedItem.location.colspan = item.colSpan\r\n                }\r\n                if (isDefined(item.rowSpan)) {\r\n                    generatedItem.location.rowspan = item.rowSpan\r\n                }\r\n                result.push(generatedItem)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _renderEmptyItem($container) {\r\n        renderEmptyItem({\r\n            $container: $container\r\n        })\r\n    }\r\n    _renderButtonItem(_ref3) {\r\n        let {\r\n            item: item,\r\n            $parent: $parent,\r\n            rootElementCssClassList: rootElementCssClassList\r\n        } = _ref3;\r\n        const {\r\n            $rootElement: $rootElement,\r\n            buttonInstance: buttonInstance\r\n        } = renderButtonItem({\r\n            item: item,\r\n            $parent: $parent,\r\n            rootElementCssClassList: rootElementCssClassList,\r\n            validationGroup: this.option(\"validationGroup\"),\r\n            createComponentCallback: this._createComponent.bind(this)\r\n        });\r\n        this._itemsRunTimeInfo.add({\r\n            item: item,\r\n            widgetInstance: buttonInstance,\r\n            guid: item.guid,\r\n            $itemContainer: $rootElement\r\n        })\r\n    }\r\n    _renderFieldItem(_ref4, itemsWithLabelTemplateCount) {\r\n        var _item$label2;\r\n        let {\r\n            item: item,\r\n            $parent: $parent,\r\n            rootElementCssClassList: rootElementCssClassList\r\n        } = _ref4;\r\n        const editorValue = this._getDataByField(item.dataField);\r\n        let canAssignUndefinedValueToEditor = false;\r\n        if (void 0 === editorValue) {\r\n            const {\r\n                allowIndeterminateState: allowIndeterminateState,\r\n                editorType: editorType,\r\n                dataField: dataField\r\n            } = item;\r\n            canAssignUndefinedValueToEditor = this._isCheckboxUndefinedStateEnabled({\r\n                allowIndeterminateState: allowIndeterminateState,\r\n                editorType: editorType,\r\n                dataField: dataField\r\n            })\r\n        }\r\n        const name = item.dataField || item.name;\r\n        const formOrLayoutManager = this._getFormOrThis();\r\n        const {\r\n            form: form\r\n        } = this.option();\r\n        const {\r\n            $fieldEditorContainer: $fieldEditorContainer,\r\n            widgetInstance: widgetInstance,\r\n            $rootElement: $rootElement\r\n        } = renderFieldItem(convertToRenderFieldItemOptions({\r\n            $parent: $parent,\r\n            rootElementCssClassList: rootElementCssClassList,\r\n            item: item,\r\n            name: name,\r\n            editorValue: editorValue,\r\n            canAssignUndefinedValueToEditor: canAssignUndefinedValueToEditor,\r\n            formOrLayoutManager: this._getFormOrThis(),\r\n            createComponentCallback: this._createComponent.bind(this),\r\n            formLabelLocation: this.option(\"labelLocation\"),\r\n            requiredMessageTemplate: this.option(\"requiredMessage\"),\r\n            validationGroup: this.option(\"validationGroup\"),\r\n            editorValidationBoundary: this.option(\"validationBoundary\"),\r\n            editorStylingMode: null === form || void 0 === form ? void 0 : form.option(\"stylingMode\"),\r\n            showColonAfterLabel: this.option(\"showColonAfterLabel\"),\r\n            managerLabelLocation: this.option(\"labelLocation\"),\r\n            template: item.template ? this._getTemplate(item.template) : null,\r\n            labelTemplate: null !== (_item$label2 = item.label) && void 0 !== _item$label2 && _item$label2.template ? this._getTemplate(item.label.template) : null,\r\n            itemId: null === form || void 0 === form ? void 0 : form.getItemID(name),\r\n            managerMarkOptions: this._getMarkOptions(),\r\n            labelMode: this.option(\"labelMode\"),\r\n            onLabelTemplateRendered: () => {\r\n                this._incTemplateRenderedCallCount();\r\n                if (this._shouldAlignLabelsOnTemplateRendered(formOrLayoutManager, itemsWithLabelTemplateCount)) {\r\n                    formOrLayoutManager._alignLabels(this, this.isSingleColumnMode(formOrLayoutManager))\r\n                }\r\n            }\r\n        }));\r\n        const {\r\n            onFieldItemRendered: onFieldItemRendered\r\n        } = this.option();\r\n        null === onFieldItemRendered || void 0 === onFieldItemRendered || onFieldItemRendered();\r\n        if (widgetInstance && item.dataField) {\r\n            this._bindDataField(widgetInstance, item.dataField, item.editorType, $fieldEditorContainer)\r\n        }\r\n        this._itemsRunTimeInfo.add({\r\n            item: item,\r\n            widgetInstance: widgetInstance,\r\n            guid: item.guid,\r\n            $itemContainer: $rootElement\r\n        })\r\n    }\r\n    _incTemplateRenderedCallCount() {\r\n        this._labelTemplateRenderedCallCount = (this._labelTemplateRenderedCallCount ?? 0) + 1\r\n    }\r\n    _shouldAlignLabelsOnTemplateRendered(formOrLayoutManager, totalItemsWithLabelTemplate) {\r\n        return formOrLayoutManager.option(\"templatesRenderAsynchronously\") && this._labelTemplateRenderedCallCount === totalItemsWithLabelTemplate\r\n    }\r\n    _getMarkOptions() {\r\n        return {\r\n            showRequiredMark: this.option(\"showRequiredMark\"),\r\n            requiredMark: this.option(\"requiredMark\"),\r\n            showOptionalMark: this.option(\"showOptionalMark\"),\r\n            optionalMark: this.option(\"optionalMark\")\r\n        }\r\n    }\r\n    _getFormOrThis() {\r\n        const {\r\n            form: form\r\n        } = this.option();\r\n        return form || this\r\n    }\r\n    _bindDataField(editorInstance, dataField, editorType, $container) {\r\n        const formOrThis = this._getFormOrThis();\r\n        editorInstance.on(\"enterKey\", (args => {\r\n            formOrThis._createActionByOption(\"onEditorEnterKey\")(extend(args, {\r\n                dataField: dataField\r\n            }))\r\n        }));\r\n        this._createWatcher(editorInstance, $container, dataField);\r\n        this.linkEditorToDataField(editorInstance, dataField)\r\n    }\r\n    _createWatcher(editorInstance, $container, dataField) {\r\n        const that = this;\r\n        const watch = that._getWatch();\r\n        if (!isFunction(watch)) {\r\n            return\r\n        }\r\n        const dispose = watch((() => that._getDataByField(dataField)), (() => {\r\n            const fieldValue = that._getDataByField(dataField);\r\n            if (\"dxTagBox\" === editorInstance.NAME) {\r\n                const editorValue = editorInstance.option(\"value\");\r\n                if (fieldValue !== editorValue && function(array1, array2) {\r\n                        if (!Array.isArray(array1) || !Array.isArray(array2) || array1.length !== array2.length) {\r\n                            return false\r\n                        }\r\n                        for (let i = 0; i < array1.length; i++) {\r\n                            if (array1[i] !== array2[i]) {\r\n                                return false\r\n                            }\r\n                        }\r\n                        return true\r\n                    }(fieldValue, editorValue)) {\r\n                    return\r\n                }\r\n            }\r\n            editorInstance.option(\"value\", fieldValue)\r\n        }), {\r\n            deep: true,\r\n            skipImmediate: true\r\n        }, {\r\n            createWatcherDataField: dataField\r\n        });\r\n        eventsEngine.on($container, removeEvent, dispose)\r\n    }\r\n    _getWatch() {\r\n        if (!isDefined(this._watch)) {\r\n            const {\r\n                form: formInstance\r\n            } = this.option();\r\n            this._watch = formInstance && formInstance.option(\"integrationOptions.watchMethod\")\r\n        }\r\n        return this._watch\r\n    }\r\n    _createComponent($editor, type, editorOptions) {\r\n        const readOnlyState = this.option(\"readOnly\");\r\n        let hasEditorReadOnly = Object.hasOwn(editorOptions, \"readOnly\");\r\n        const instance = super._createComponent($editor, type, _extends({}, editorOptions, {\r\n            readOnly: !hasEditorReadOnly ? readOnlyState : editorOptions.readOnly\r\n        }));\r\n        let isChangeByForm = false;\r\n        instance.on(\"optionChanged\", (args => {\r\n            if (\"readOnly\" === args.name && !isChangeByForm) {\r\n                hasEditorReadOnly = true\r\n            }\r\n        }));\r\n        this.on(\"optionChanged\", (args => {\r\n            if (\"readOnly\" === args.name && !hasEditorReadOnly) {\r\n                isChangeByForm = true;\r\n                instance.option(args.name, args.value);\r\n                isChangeByForm = false\r\n            }\r\n        }));\r\n        return instance\r\n    }\r\n    _generateRatio(count, isAutoSize) {\r\n        const result = [];\r\n        let ratio;\r\n        let i;\r\n        for (i = 0; i < count; i++) {\r\n            ratio = {\r\n                ratio: 1\r\n            };\r\n            if (isAutoSize) {\r\n                ratio.baseSize = \"auto\"\r\n            }\r\n            result.push(ratio)\r\n        }\r\n        return result\r\n    }\r\n    _getRowsCount() {\r\n        return Math.ceil(this._items.length / this._getColCount())\r\n    }\r\n    _updateReferencedOptions(newLayoutData) {\r\n        const layoutData = this.option(\"layoutData\");\r\n        if (isObject(layoutData)) {\r\n            Object.getOwnPropertyNames(layoutData).forEach((property => delete this._optionsByReference[`layoutData.${property}`]))\r\n        }\r\n        if (isObject(newLayoutData)) {\r\n            Object.getOwnPropertyNames(newLayoutData).forEach((property => this._optionsByReference[`layoutData.${property}`] = true))\r\n        }\r\n    }\r\n    _clearWidget(instance) {\r\n        this._disableEditorValueChangedHandler = true;\r\n        instance.clear();\r\n        this._disableEditorValueChangedHandler = false;\r\n        instance.option(\"isValid\", true)\r\n    }\r\n    _optionChanged(args) {\r\n        if (0 === args.fullName.search(\"layoutData.\")) {\r\n            return\r\n        }\r\n        switch (args.name) {\r\n            case \"showRequiredMark\":\r\n            case \"showOptionalMark\":\r\n            case \"requiredMark\":\r\n            case \"optionalMark\":\r\n            case \"alignItemLabels\":\r\n            case \"labelLocation\":\r\n            case \"labelMode\":\r\n            case \"requiredMessage\":\r\n                this._invalidate();\r\n                break;\r\n            case \"layoutData\":\r\n                this._updateReferencedOptions(args.value);\r\n                if (this.option(\"items\")) {\r\n                    if (!isEmptyObject(args.value)) {\r\n                        this._itemsRunTimeInfo.each(((_, itemRunTimeInfo) => {\r\n                            if (isDefined(itemRunTimeInfo.item)) {\r\n                                const {\r\n                                    dataField: dataField\r\n                                } = itemRunTimeInfo.item;\r\n                                if (dataField && isDefined(itemRunTimeInfo.widgetInstance)) {\r\n                                    const valueGetter = compileGetter(dataField);\r\n                                    const dataValue = valueGetter(args.value);\r\n                                    const {\r\n                                        allowIndeterminateState: allowIndeterminateState,\r\n                                        editorType: editorType\r\n                                    } = itemRunTimeInfo.item;\r\n                                    if (void 0 !== dataValue || this._isCheckboxUndefinedStateEnabled({\r\n                                            allowIndeterminateState: allowIndeterminateState,\r\n                                            editorType: editorType,\r\n                                            dataField: dataField\r\n                                        })) {\r\n                                        itemRunTimeInfo.widgetInstance.option(\"value\", dataValue)\r\n                                    } else {\r\n                                        this._clearWidget(itemRunTimeInfo.widgetInstance)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }))\r\n                    }\r\n                } else {\r\n                    this._initDataAndItems(args.value);\r\n                    this._invalidate()\r\n                }\r\n                break;\r\n            case \"items\":\r\n                this._cleanItemWatchers();\r\n                this._initDataAndItems(args.value);\r\n                this._invalidate();\r\n                break;\r\n            case \"customizeItem\":\r\n                this._updateItems(this.option(\"layoutData\"));\r\n                this._invalidate();\r\n                break;\r\n            case \"colCount\":\r\n            case \"colCountByScreen\":\r\n                this._resetColCount();\r\n                break;\r\n            case \"minColWidth\": {\r\n                const {\r\n                    colCount: colCount\r\n                } = this.option();\r\n                if (\"auto\" === colCount) {\r\n                    this._resetColCount()\r\n                }\r\n                break\r\n            }\r\n            case \"readOnly\":\r\n            case \"onFieldDataChanged\":\r\n                break;\r\n            case \"width\": {\r\n                super._optionChanged(args);\r\n                const {\r\n                    colCount: colCount\r\n                } = this.option();\r\n                if (\"auto\" === colCount) {\r\n                    this._resetColCount()\r\n                }\r\n                break\r\n            }\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _resetColCount() {\r\n        this._cashedColCount = null;\r\n        this._invalidate()\r\n    }\r\n    linkEditorToDataField(editorInstance, dataField) {\r\n        this.on(\"optionChanged\", (args => {\r\n            if (args.fullName === `layoutData.${dataField}`) {\r\n                editorInstance._setOptionWithoutOptionChange(\"value\", args.value)\r\n            }\r\n        }));\r\n        editorInstance.on(\"valueChanged\", (args => {\r\n            const isValueReferenceType = isObject(args.value) || Array.isArray(args.value);\r\n            if (!this._disableEditorValueChangedHandler && !(isValueReferenceType && args.value === args.previousValue)) {\r\n                this._updateFieldValue(dataField, args.value)\r\n            }\r\n        }))\r\n    }\r\n    _dimensionChanged() {\r\n        const {\r\n            colCount: colCount\r\n        } = this.option();\r\n        if (\"auto\" === colCount && this.isCachedColCountObsolete()) {\r\n            this._eventsStrategy.fireEvent(\"autoColCountChanged\")\r\n        }\r\n    }\r\n    updateData(data, value) {\r\n        const that = this;\r\n        if (isObject(data)) {\r\n            each(data, ((dataField, fieldValue) => {\r\n                that._updateFieldValue(dataField, fieldValue)\r\n            }))\r\n        } else if (\"string\" === typeof data) {\r\n            that._updateFieldValue(data, value)\r\n        }\r\n    }\r\n    getEditor(field) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByDataField(field) || this._itemsRunTimeInfo.findWidgetInstanceByName(field)\r\n    }\r\n    isSingleColumnMode(component) {\r\n        const responsiveBox = this._responsiveBox || component;\r\n        if (responsiveBox) {\r\n            return responsiveBox.option(\"currentScreenFactor\") === responsiveBox.option(\"singleColumnScreen\")\r\n        }\r\n    }\r\n    getItemsRunTimeInfo() {\r\n        return this._itemsRunTimeInfo\r\n    }\r\n}\r\nregisterComponent(\"dxLayoutManager\", LayoutManager);\r\nexport default LayoutManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}