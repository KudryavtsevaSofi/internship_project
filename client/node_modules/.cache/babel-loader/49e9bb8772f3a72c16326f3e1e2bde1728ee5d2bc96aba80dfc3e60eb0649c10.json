{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/virtual_data_loader/m_virtual_data_loader.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { isObject, isString } from \"../../../../core/utils/type\";\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\nconst needTwoPagesLoading = that => that.option(\"scrolling.loadTwoPagesOnStart\") || that._controller.isVirtual() || that._controller.getViewportItemIndex() > 0;\nconst getBeginPageIndex = that => that._cache.length ? that._cache[0].pageIndex : -1;\nconst getEndPageIndex = that => that._cache.length ? that._cache[that._cache.length - 1].pageIndex : -1;\nconst fireChanged = (that, changed, args) => {\n  that._isChangedFiring = true;\n  changed(args);\n  that._isChangedFiring = false;\n};\nconst processDelayChanged = (that, changed, args) => {\n  if (that._isDelayChanged) {\n    that._isDelayChanged = false;\n    fireChanged(that, changed, args);\n    return true;\n  }\n};\nconst getViewportPageCount = that => {\n  const pageSize = that._dataOptions.pageSize();\n  const preventPreload = that.option(\"scrolling.preventPreload\");\n  if (preventPreload) {\n    return 0;\n  }\n  let realViewportSize = that._controller.viewportSize();\n  if (that._controller.isVirtualMode() && that.option(\"scrolling.removeInvisiblePages\")) {\n    realViewportSize = 0;\n    const viewportSize = that._controller.viewportSize() * that._controller.viewportItemSize();\n    let offset = that._controller.getContentOffset();\n    const position = that._controller.getViewportPosition();\n    const virtualItemsCount = that._controller.virtualItemsCount();\n    const totalItemsCount = that._dataOptions.totalItemsCount();\n    for (let itemIndex = virtualItemsCount.begin; itemIndex < totalItemsCount; itemIndex++) {\n      if (offset >= position + viewportSize) {\n        break;\n      }\n      const itemSize = that._controller.getItemSizes()[itemIndex] || that._controller.viewportItemSize();\n      offset += itemSize;\n      if (offset >= position) {\n        realViewportSize++;\n      }\n    }\n  }\n  return pageSize && realViewportSize > 0 ? Math.ceil(realViewportSize / pageSize) : 1;\n};\nconst getPreloadPageCount = (that, previous) => {\n  const preloadEnabled = that.option(\"scrolling.preloadEnabled\");\n  let pageCount = getViewportPageCount(that);\n  const isAppendMode = that._controller.isAppendMode();\n  if (pageCount) {\n    if (previous) {\n      pageCount = preloadEnabled ? 1 : 0;\n    } else {\n      if (preloadEnabled) {\n        pageCount++;\n      }\n      if (isAppendMode || !needTwoPagesLoading(that)) {\n        pageCount--;\n      }\n    }\n  }\n  return pageCount;\n};\nconst getPageIndexForLoad = that => {\n  let result = -1;\n  const beginPageIndex = getBeginPageIndex(that);\n  const dataOptions = that._dataOptions;\n  if (beginPageIndex < 0) {\n    result = that._pageIndex;\n  } else if (!that._cache[that._pageIndex - beginPageIndex]) {\n    result = that._pageIndex;\n  } else if (beginPageIndex >= 0 && that._controller.viewportSize() >= 0) {\n    if (beginPageIndex > 0) {\n      const needToLoadPageBeforeLast = getEndPageIndex(that) + 1 === dataOptions.pageCount() && that._cache.length < getPreloadPageCount(that) + 1;\n      const needToLoadPrevPage = needToLoadPageBeforeLast || that._pageIndex === beginPageIndex && getPreloadPageCount(that, true);\n      if (needToLoadPrevPage) {\n        result = beginPageIndex - 1;\n      }\n    }\n    if (result < 0) {\n      const needToLoadNextPage = beginPageIndex + that._cache.length <= that._pageIndex + getPreloadPageCount(that);\n      if (needToLoadNextPage) {\n        result = beginPageIndex + that._cache.length;\n      }\n    }\n  }\n  if (that._loadingPageIndexes[result]) {\n    result = -1;\n  }\n  return result;\n};\nconst loadCore = (that, pageIndex) => {\n  const dataOptions = that._dataOptions;\n  if (pageIndex === that.pageIndex() || !dataOptions.isLoading() && pageIndex < dataOptions.pageCount() || !dataOptions.hasKnownLastPage() && pageIndex === dataOptions.pageCount()) {\n    dataOptions.pageIndex(pageIndex);\n    that._loadingPageIndexes[pageIndex] = true;\n    return when(dataOptions.load()).always(() => {\n      that._loadingPageIndexes[pageIndex] = false;\n    });\n  }\n};\nconst processChanged = (that, changed, changeType, isDelayChanged, removeCacheItem) => {\n  const dataOptions = that._dataOptions;\n  const items = dataOptions.items().slice();\n  let change = isObject(changeType) ? changeType : void 0;\n  const isPrepend = \"prepend\" === changeType;\n  const viewportItems = dataOptions.viewportItems();\n  if (changeType && isString(changeType) && !that._isDelayChanged) {\n    change = {\n      changeType: changeType,\n      items: items\n    };\n    if (removeCacheItem) {\n      change.removeCount = removeCacheItem.itemsCount;\n      if (change.removeCount && dataOptions.correctCount) {\n        change.removeCount = dataOptions.correctCount(viewportItems, change.removeCount, isPrepend);\n      }\n    }\n  }\n  let removeItemCount = removeCacheItem ? removeCacheItem.itemsLength : 0;\n  if (removeItemCount && dataOptions.correctCount) {\n    removeItemCount = dataOptions.correctCount(viewportItems, removeItemCount, isPrepend);\n  }\n  if (\"append\" === changeType) {\n    viewportItems.push.apply(viewportItems, items);\n    if (removeCacheItem) {\n      viewportItems.splice(0, removeItemCount);\n    }\n  } else if (isPrepend) {\n    viewportItems.unshift.apply(viewportItems, items);\n    if (removeCacheItem) {\n      viewportItems.splice(-removeItemCount);\n    }\n  } else {\n    that._dataOptions.viewportItems(items);\n  }\n  dataOptions.updateLoading();\n  that._lastPageIndex = that.pageIndex();\n  that._isDelayChanged = isDelayChanged;\n  if (!isDelayChanged) {\n    fireChanged(that, changed, change);\n  }\n};\nexport class VirtualDataLoader {\n  constructor(controller, dataOptions) {\n    this._dataOptions = dataOptions;\n    this._controller = controller;\n    this._pageIndex = this._lastPageIndex = dataOptions.pageIndex();\n    this._cache = [];\n    this._loadingPageIndexes = {};\n  }\n  option() {\n    return this._controller.option.apply(this._controller, arguments);\n  }\n  viewportItemIndexChanged(itemIndex) {\n    const pageSize = this._dataOptions.pageSize();\n    const pageCount = this._dataOptions.pageCount();\n    const virtualMode = this._controller.isVirtualMode();\n    const appendMode = this._controller.isAppendMode();\n    const totalItemsCount = this._dataOptions.totalItemsCount();\n    let newPageIndex;\n    if (pageSize && (virtualMode || appendMode) && totalItemsCount >= 0) {\n      const viewportSize = this._controller.viewportSize();\n      if (viewportSize && itemIndex + viewportSize >= totalItemsCount && !this._controller.isVirtual()) {\n        if (this._dataOptions.hasKnownLastPage()) {\n          newPageIndex = pageCount - 1;\n          const lastPageSize = totalItemsCount % pageSize;\n          if (newPageIndex > 0 && lastPageSize > 0 && lastPageSize < viewportSize) {\n            newPageIndex--;\n          }\n        } else {\n          newPageIndex = pageCount;\n        }\n      } else {\n        newPageIndex = Math.floor(itemIndex / pageSize);\n        const maxPageIndex = pageCount - 1;\n        newPageIndex = Math.max(newPageIndex, 0);\n        newPageIndex = Math.min(newPageIndex, maxPageIndex);\n      }\n      this.pageIndex(newPageIndex);\n      return this.load();\n    }\n  }\n  pageIndex(pageIndex) {\n    const isVirtualMode = this._controller.isVirtualMode();\n    const isAppendMode = this._controller.isAppendMode();\n    if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n      if (void 0 !== pageIndex) {\n        this._pageIndex = pageIndex;\n      }\n      return this._pageIndex;\n    }\n    return this._dataOptions.pageIndex(pageIndex);\n  }\n  beginPageIndex(defaultPageIndex) {\n    let index = getBeginPageIndex(this);\n    if (index < 0) {\n      index = void 0 !== defaultPageIndex ? defaultPageIndex : this.pageIndex();\n    }\n    return index;\n  }\n  endPageIndex() {\n    const endPageIndex = getEndPageIndex(this);\n    return endPageIndex > 0 ? endPageIndex : this._lastPageIndex;\n  }\n  pageSize() {\n    return this._dataOptions.pageSize();\n  }\n  load() {\n    const dataOptions = this._dataOptions;\n    let result;\n    const isVirtualMode = this._controller.isVirtualMode();\n    const isAppendMode = this._controller.isAppendMode();\n    if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n      const pageIndexForLoad = getPageIndexForLoad(this);\n      if (pageIndexForLoad >= 0) {\n        const loadResult = loadCore(this, pageIndexForLoad);\n        if (loadResult) {\n          result = new Deferred();\n          loadResult.done(() => {\n            const delayDeferred = this._delayDeferred;\n            if (delayDeferred) {\n              delayDeferred.done(result.resolve).fail(result.reject);\n            } else {\n              result.resolve();\n            }\n          }).fail(result.reject);\n          dataOptions.updateLoading();\n        }\n      }\n    } else {\n      result = dataOptions.load();\n    }\n    if (!result && this._lastPageIndex !== this.pageIndex()) {\n      this._dataOptions.onChanged({\n        changeType: \"pageIndex\"\n      });\n    }\n    return result || new Deferred().resolve();\n  }\n  loadIfNeed() {\n    const isVirtualMode = this._controller.isVirtualMode();\n    const isAppendMode = this._controller.isAppendMode();\n    if ((isVirtualMode || isAppendMode) && !this._dataOptions.isLoading() && (!this._isChangedFiring || this._controller.isVirtual())) {\n      const position = this._controller.getViewportPosition();\n      if (position > 0) {\n        this._controller._setViewportPositionCore(position);\n      } else {\n        this.load();\n      }\n    }\n  }\n  handleDataChanged(callBase, e) {\n    const dataOptions = this._dataOptions;\n    let lastCacheLength = this._cache.length;\n    let changeType;\n    let removeInvisiblePages;\n    const isVirtualMode = this._controller.isVirtualMode();\n    const isAppendMode = this._controller.isAppendMode();\n    if (e && e.changes) {\n      fireChanged(this, callBase, e);\n    } else if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n      const beginPageIndex = getBeginPageIndex(this);\n      if (beginPageIndex >= 0) {\n        if (isVirtualMode && beginPageIndex + this._cache.length !== dataOptions.pageIndex() && beginPageIndex - 1 !== dataOptions.pageIndex()) {\n          lastCacheLength = 0;\n          this._cache = [];\n        }\n        if (isAppendMode) {\n          if (0 === dataOptions.pageIndex()) {\n            this._cache = [];\n          } else if (dataOptions.pageIndex() < getEndPageIndex(this)) {\n            fireChanged(this, callBase, {\n              changeType: \"append\",\n              items: []\n            });\n            return;\n          }\n        }\n      }\n      const cacheItem = {\n        pageIndex: dataOptions.pageIndex(),\n        itemsLength: dataOptions.items(true).length,\n        itemsCount: this.itemsCount(true)\n      };\n      if (this.option(\"scrolling.removeInvisiblePages\") && isVirtualMode) {\n        removeInvisiblePages = this._cache.length > Math.max(getPreloadPageCount(this) + (this.option(\"scrolling.preloadEnabled\") ? 1 : 0), 2);\n      } else {\n        processDelayChanged(this, callBase, {\n          isDelayed: true\n        });\n      }\n      let removeCacheItem;\n      if (beginPageIndex === dataOptions.pageIndex() + 1) {\n        if (removeInvisiblePages) {\n          removeCacheItem = this._cache.pop();\n        }\n        changeType = \"prepend\";\n        this._cache.unshift(cacheItem);\n      } else {\n        if (removeInvisiblePages) {\n          removeCacheItem = this._cache.shift();\n        }\n        changeType = \"append\";\n        this._cache.push(cacheItem);\n      }\n      const isDelayChanged = isVirtualMode && 0 === lastCacheLength && needTwoPagesLoading(this);\n      processChanged(this, callBase, this._cache.length > 1 ? changeType : void 0, isDelayChanged, removeCacheItem);\n      this._delayDeferred = this.load().done(() => {\n        if (processDelayChanged(this, callBase)) {\n          this.load();\n        }\n      });\n    } else {\n      processChanged(this, callBase, e);\n    }\n  }\n  getDelayDeferred() {\n    return this._delayDeferred;\n  }\n  itemsCount(isBase) {\n    let count = 0;\n    const isVirtualMode = this._controller.isVirtualMode();\n    if (!isBase && isVirtualMode) {\n      this._cache.forEach(cacheItem => {\n        count += cacheItem.itemsCount;\n      });\n    } else {\n      count = this._dataOptions.itemsCount();\n    }\n    return count;\n  }\n  virtualItemsCount() {\n    let pageIndex = getBeginPageIndex(this);\n    if (pageIndex < 0) {\n      pageIndex = this._dataOptions.pageIndex();\n    }\n    const beginItemsCount = pageIndex * this._dataOptions.pageSize();\n    const itemsCount = this._cache.length * this._dataOptions.pageSize();\n    const endItemsCount = Math.max(0, this._dataOptions.totalItemsCount() - itemsCount - beginItemsCount);\n    return {\n      begin: beginItemsCount,\n      end: endItemsCount\n    };\n  }\n  reset() {\n    this._loadingPageIndexes = {};\n    this._cache = [];\n  }\n}","map":{"version":3,"names":["Deferred","when","isObject","isString","LEGACY_SCROLLING_MODE","needTwoPagesLoading","that","option","_controller","isVirtual","getViewportItemIndex","getBeginPageIndex","_cache","length","pageIndex","getEndPageIndex","fireChanged","changed","args","_isChangedFiring","processDelayChanged","_isDelayChanged","getViewportPageCount","pageSize","_dataOptions","preventPreload","realViewportSize","viewportSize","isVirtualMode","viewportItemSize","offset","getContentOffset","position","getViewportPosition","virtualItemsCount","totalItemsCount","itemIndex","begin","itemSize","getItemSizes","Math","ceil","getPreloadPageCount","previous","preloadEnabled","pageCount","isAppendMode","getPageIndexForLoad","result","beginPageIndex","dataOptions","_pageIndex","needToLoadPageBeforeLast","needToLoadPrevPage","needToLoadNextPage","_loadingPageIndexes","loadCore","isLoading","hasKnownLastPage","load","always","processChanged","changeType","isDelayChanged","removeCacheItem","items","slice","change","isPrepend","viewportItems","removeCount","itemsCount","correctCount","removeItemCount","itemsLength","push","apply","splice","unshift","updateLoading","_lastPageIndex","VirtualDataLoader","constructor","controller","arguments","viewportItemIndexChanged","virtualMode","appendMode","newPageIndex","lastPageSize","floor","maxPageIndex","max","min","defaultPageIndex","index","endPageIndex","pageIndexForLoad","loadResult","done","delayDeferred","_delayDeferred","resolve","fail","reject","onChanged","loadIfNeed","_setViewportPositionCore","handleDataChanged","callBase","e","lastCacheLength","removeInvisiblePages","changes","cacheItem","isDelayed","pop","shift","getDelayDeferred","isBase","count","forEach","beginItemsCount","endItemsCount","end","reset"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/virtual_data_loader/m_virtual_data_loader.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/virtual_data_loader/m_virtual_data_loader.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    isObject,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\nconst needTwoPagesLoading = that => that.option(\"scrolling.loadTwoPagesOnStart\") || that._controller.isVirtual() || that._controller.getViewportItemIndex() > 0;\r\nconst getBeginPageIndex = that => that._cache.length ? that._cache[0].pageIndex : -1;\r\nconst getEndPageIndex = that => that._cache.length ? that._cache[that._cache.length - 1].pageIndex : -1;\r\nconst fireChanged = (that, changed, args) => {\r\n    that._isChangedFiring = true;\r\n    changed(args);\r\n    that._isChangedFiring = false\r\n};\r\nconst processDelayChanged = (that, changed, args) => {\r\n    if (that._isDelayChanged) {\r\n        that._isDelayChanged = false;\r\n        fireChanged(that, changed, args);\r\n        return true\r\n    }\r\n};\r\nconst getViewportPageCount = that => {\r\n    const pageSize = that._dataOptions.pageSize();\r\n    const preventPreload = that.option(\"scrolling.preventPreload\");\r\n    if (preventPreload) {\r\n        return 0\r\n    }\r\n    let realViewportSize = that._controller.viewportSize();\r\n    if (that._controller.isVirtualMode() && that.option(\"scrolling.removeInvisiblePages\")) {\r\n        realViewportSize = 0;\r\n        const viewportSize = that._controller.viewportSize() * that._controller.viewportItemSize();\r\n        let offset = that._controller.getContentOffset();\r\n        const position = that._controller.getViewportPosition();\r\n        const virtualItemsCount = that._controller.virtualItemsCount();\r\n        const totalItemsCount = that._dataOptions.totalItemsCount();\r\n        for (let itemIndex = virtualItemsCount.begin; itemIndex < totalItemsCount; itemIndex++) {\r\n            if (offset >= position + viewportSize) {\r\n                break\r\n            }\r\n            const itemSize = that._controller.getItemSizes()[itemIndex] || that._controller.viewportItemSize();\r\n            offset += itemSize;\r\n            if (offset >= position) {\r\n                realViewportSize++\r\n            }\r\n        }\r\n    }\r\n    return pageSize && realViewportSize > 0 ? Math.ceil(realViewportSize / pageSize) : 1\r\n};\r\nconst getPreloadPageCount = (that, previous) => {\r\n    const preloadEnabled = that.option(\"scrolling.preloadEnabled\");\r\n    let pageCount = getViewportPageCount(that);\r\n    const isAppendMode = that._controller.isAppendMode();\r\n    if (pageCount) {\r\n        if (previous) {\r\n            pageCount = preloadEnabled ? 1 : 0\r\n        } else {\r\n            if (preloadEnabled) {\r\n                pageCount++\r\n            }\r\n            if (isAppendMode || !needTwoPagesLoading(that)) {\r\n                pageCount--\r\n            }\r\n        }\r\n    }\r\n    return pageCount\r\n};\r\nconst getPageIndexForLoad = that => {\r\n    let result = -1;\r\n    const beginPageIndex = getBeginPageIndex(that);\r\n    const dataOptions = that._dataOptions;\r\n    if (beginPageIndex < 0) {\r\n        result = that._pageIndex\r\n    } else if (!that._cache[that._pageIndex - beginPageIndex]) {\r\n        result = that._pageIndex\r\n    } else if (beginPageIndex >= 0 && that._controller.viewportSize() >= 0) {\r\n        if (beginPageIndex > 0) {\r\n            const needToLoadPageBeforeLast = getEndPageIndex(that) + 1 === dataOptions.pageCount() && that._cache.length < getPreloadPageCount(that) + 1;\r\n            const needToLoadPrevPage = needToLoadPageBeforeLast || that._pageIndex === beginPageIndex && getPreloadPageCount(that, true);\r\n            if (needToLoadPrevPage) {\r\n                result = beginPageIndex - 1\r\n            }\r\n        }\r\n        if (result < 0) {\r\n            const needToLoadNextPage = beginPageIndex + that._cache.length <= that._pageIndex + getPreloadPageCount(that);\r\n            if (needToLoadNextPage) {\r\n                result = beginPageIndex + that._cache.length\r\n            }\r\n        }\r\n    }\r\n    if (that._loadingPageIndexes[result]) {\r\n        result = -1\r\n    }\r\n    return result\r\n};\r\nconst loadCore = (that, pageIndex) => {\r\n    const dataOptions = that._dataOptions;\r\n    if (pageIndex === that.pageIndex() || !dataOptions.isLoading() && pageIndex < dataOptions.pageCount() || !dataOptions.hasKnownLastPage() && pageIndex === dataOptions.pageCount()) {\r\n        dataOptions.pageIndex(pageIndex);\r\n        that._loadingPageIndexes[pageIndex] = true;\r\n        return when(dataOptions.load()).always((() => {\r\n            that._loadingPageIndexes[pageIndex] = false\r\n        }))\r\n    }\r\n};\r\nconst processChanged = (that, changed, changeType, isDelayChanged, removeCacheItem) => {\r\n    const dataOptions = that._dataOptions;\r\n    const items = dataOptions.items().slice();\r\n    let change = isObject(changeType) ? changeType : void 0;\r\n    const isPrepend = \"prepend\" === changeType;\r\n    const viewportItems = dataOptions.viewportItems();\r\n    if (changeType && isString(changeType) && !that._isDelayChanged) {\r\n        change = {\r\n            changeType: changeType,\r\n            items: items\r\n        };\r\n        if (removeCacheItem) {\r\n            change.removeCount = removeCacheItem.itemsCount;\r\n            if (change.removeCount && dataOptions.correctCount) {\r\n                change.removeCount = dataOptions.correctCount(viewportItems, change.removeCount, isPrepend)\r\n            }\r\n        }\r\n    }\r\n    let removeItemCount = removeCacheItem ? removeCacheItem.itemsLength : 0;\r\n    if (removeItemCount && dataOptions.correctCount) {\r\n        removeItemCount = dataOptions.correctCount(viewportItems, removeItemCount, isPrepend)\r\n    }\r\n    if (\"append\" === changeType) {\r\n        viewportItems.push.apply(viewportItems, items);\r\n        if (removeCacheItem) {\r\n            viewportItems.splice(0, removeItemCount)\r\n        }\r\n    } else if (isPrepend) {\r\n        viewportItems.unshift.apply(viewportItems, items);\r\n        if (removeCacheItem) {\r\n            viewportItems.splice(-removeItemCount)\r\n        }\r\n    } else {\r\n        that._dataOptions.viewportItems(items)\r\n    }\r\n    dataOptions.updateLoading();\r\n    that._lastPageIndex = that.pageIndex();\r\n    that._isDelayChanged = isDelayChanged;\r\n    if (!isDelayChanged) {\r\n        fireChanged(that, changed, change)\r\n    }\r\n};\r\nexport class VirtualDataLoader {\r\n    constructor(controller, dataOptions) {\r\n        this._dataOptions = dataOptions;\r\n        this._controller = controller;\r\n        this._pageIndex = this._lastPageIndex = dataOptions.pageIndex();\r\n        this._cache = [];\r\n        this._loadingPageIndexes = {}\r\n    }\r\n    option() {\r\n        return this._controller.option.apply(this._controller, arguments)\r\n    }\r\n    viewportItemIndexChanged(itemIndex) {\r\n        const pageSize = this._dataOptions.pageSize();\r\n        const pageCount = this._dataOptions.pageCount();\r\n        const virtualMode = this._controller.isVirtualMode();\r\n        const appendMode = this._controller.isAppendMode();\r\n        const totalItemsCount = this._dataOptions.totalItemsCount();\r\n        let newPageIndex;\r\n        if (pageSize && (virtualMode || appendMode) && totalItemsCount >= 0) {\r\n            const viewportSize = this._controller.viewportSize();\r\n            if (viewportSize && itemIndex + viewportSize >= totalItemsCount && !this._controller.isVirtual()) {\r\n                if (this._dataOptions.hasKnownLastPage()) {\r\n                    newPageIndex = pageCount - 1;\r\n                    const lastPageSize = totalItemsCount % pageSize;\r\n                    if (newPageIndex > 0 && lastPageSize > 0 && lastPageSize < viewportSize) {\r\n                        newPageIndex--\r\n                    }\r\n                } else {\r\n                    newPageIndex = pageCount\r\n                }\r\n            } else {\r\n                newPageIndex = Math.floor(itemIndex / pageSize);\r\n                const maxPageIndex = pageCount - 1;\r\n                newPageIndex = Math.max(newPageIndex, 0);\r\n                newPageIndex = Math.min(newPageIndex, maxPageIndex)\r\n            }\r\n            this.pageIndex(newPageIndex);\r\n            return this.load()\r\n        }\r\n    }\r\n    pageIndex(pageIndex) {\r\n        const isVirtualMode = this._controller.isVirtualMode();\r\n        const isAppendMode = this._controller.isAppendMode();\r\n        if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\r\n            if (void 0 !== pageIndex) {\r\n                this._pageIndex = pageIndex\r\n            }\r\n            return this._pageIndex\r\n        }\r\n        return this._dataOptions.pageIndex(pageIndex)\r\n    }\r\n    beginPageIndex(defaultPageIndex) {\r\n        let index = getBeginPageIndex(this);\r\n        if (index < 0) {\r\n            index = void 0 !== defaultPageIndex ? defaultPageIndex : this.pageIndex()\r\n        }\r\n        return index\r\n    }\r\n    endPageIndex() {\r\n        const endPageIndex = getEndPageIndex(this);\r\n        return endPageIndex > 0 ? endPageIndex : this._lastPageIndex\r\n    }\r\n    pageSize() {\r\n        return this._dataOptions.pageSize()\r\n    }\r\n    load() {\r\n        const dataOptions = this._dataOptions;\r\n        let result;\r\n        const isVirtualMode = this._controller.isVirtualMode();\r\n        const isAppendMode = this._controller.isAppendMode();\r\n        if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\r\n            const pageIndexForLoad = getPageIndexForLoad(this);\r\n            if (pageIndexForLoad >= 0) {\r\n                const loadResult = loadCore(this, pageIndexForLoad);\r\n                if (loadResult) {\r\n                    result = new Deferred;\r\n                    loadResult.done((() => {\r\n                        const delayDeferred = this._delayDeferred;\r\n                        if (delayDeferred) {\r\n                            delayDeferred.done(result.resolve).fail(result.reject)\r\n                        } else {\r\n                            result.resolve()\r\n                        }\r\n                    })).fail(result.reject);\r\n                    dataOptions.updateLoading()\r\n                }\r\n            }\r\n        } else {\r\n            result = dataOptions.load()\r\n        }\r\n        if (!result && this._lastPageIndex !== this.pageIndex()) {\r\n            this._dataOptions.onChanged({\r\n                changeType: \"pageIndex\"\r\n            })\r\n        }\r\n        return result || (new Deferred).resolve()\r\n    }\r\n    loadIfNeed() {\r\n        const isVirtualMode = this._controller.isVirtualMode();\r\n        const isAppendMode = this._controller.isAppendMode();\r\n        if ((isVirtualMode || isAppendMode) && !this._dataOptions.isLoading() && (!this._isChangedFiring || this._controller.isVirtual())) {\r\n            const position = this._controller.getViewportPosition();\r\n            if (position > 0) {\r\n                this._controller._setViewportPositionCore(position)\r\n            } else {\r\n                this.load()\r\n            }\r\n        }\r\n    }\r\n    handleDataChanged(callBase, e) {\r\n        const dataOptions = this._dataOptions;\r\n        let lastCacheLength = this._cache.length;\r\n        let changeType;\r\n        let removeInvisiblePages;\r\n        const isVirtualMode = this._controller.isVirtualMode();\r\n        const isAppendMode = this._controller.isAppendMode();\r\n        if (e && e.changes) {\r\n            fireChanged(this, callBase, e)\r\n        } else if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\r\n            const beginPageIndex = getBeginPageIndex(this);\r\n            if (beginPageIndex >= 0) {\r\n                if (isVirtualMode && beginPageIndex + this._cache.length !== dataOptions.pageIndex() && beginPageIndex - 1 !== dataOptions.pageIndex()) {\r\n                    lastCacheLength = 0;\r\n                    this._cache = []\r\n                }\r\n                if (isAppendMode) {\r\n                    if (0 === dataOptions.pageIndex()) {\r\n                        this._cache = []\r\n                    } else if (dataOptions.pageIndex() < getEndPageIndex(this)) {\r\n                        fireChanged(this, callBase, {\r\n                            changeType: \"append\",\r\n                            items: []\r\n                        });\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n            const cacheItem = {\r\n                pageIndex: dataOptions.pageIndex(),\r\n                itemsLength: dataOptions.items(true).length,\r\n                itemsCount: this.itemsCount(true)\r\n            };\r\n            if (this.option(\"scrolling.removeInvisiblePages\") && isVirtualMode) {\r\n                removeInvisiblePages = this._cache.length > Math.max(getPreloadPageCount(this) + (this.option(\"scrolling.preloadEnabled\") ? 1 : 0), 2)\r\n            } else {\r\n                processDelayChanged(this, callBase, {\r\n                    isDelayed: true\r\n                })\r\n            }\r\n            let removeCacheItem;\r\n            if (beginPageIndex === dataOptions.pageIndex() + 1) {\r\n                if (removeInvisiblePages) {\r\n                    removeCacheItem = this._cache.pop()\r\n                }\r\n                changeType = \"prepend\";\r\n                this._cache.unshift(cacheItem)\r\n            } else {\r\n                if (removeInvisiblePages) {\r\n                    removeCacheItem = this._cache.shift()\r\n                }\r\n                changeType = \"append\";\r\n                this._cache.push(cacheItem)\r\n            }\r\n            const isDelayChanged = isVirtualMode && 0 === lastCacheLength && needTwoPagesLoading(this);\r\n            processChanged(this, callBase, this._cache.length > 1 ? changeType : void 0, isDelayChanged, removeCacheItem);\r\n            this._delayDeferred = this.load().done((() => {\r\n                if (processDelayChanged(this, callBase)) {\r\n                    this.load()\r\n                }\r\n            }))\r\n        } else {\r\n            processChanged(this, callBase, e)\r\n        }\r\n    }\r\n    getDelayDeferred() {\r\n        return this._delayDeferred\r\n    }\r\n    itemsCount(isBase) {\r\n        let count = 0;\r\n        const isVirtualMode = this._controller.isVirtualMode();\r\n        if (!isBase && isVirtualMode) {\r\n            this._cache.forEach((cacheItem => {\r\n                count += cacheItem.itemsCount\r\n            }))\r\n        } else {\r\n            count = this._dataOptions.itemsCount()\r\n        }\r\n        return count\r\n    }\r\n    virtualItemsCount() {\r\n        let pageIndex = getBeginPageIndex(this);\r\n        if (pageIndex < 0) {\r\n            pageIndex = this._dataOptions.pageIndex()\r\n        }\r\n        const beginItemsCount = pageIndex * this._dataOptions.pageSize();\r\n        const itemsCount = this._cache.length * this._dataOptions.pageSize();\r\n        const endItemsCount = Math.max(0, this._dataOptions.totalItemsCount() - itemsCount - beginItemsCount);\r\n        return {\r\n            begin: beginItemsCount,\r\n            end: endItemsCount\r\n        }\r\n    }\r\n    reset() {\r\n        this._loadingPageIndexes = {};\r\n        this._cache = []\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}