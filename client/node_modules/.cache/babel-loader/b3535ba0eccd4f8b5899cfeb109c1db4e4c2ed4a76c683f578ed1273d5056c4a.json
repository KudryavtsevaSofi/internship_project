{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/m_multi_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { locate } from \"../../common/core/animation/translator\";\nimport Swipeable from \"../../common/core/events/gesture/swipeable\";\nimport { triggerResizeEvent } from \"../../common/core/events/visibility_change\";\nimport messageLocalization from \"../../common/core/localization/message\";\nimport registerComponent from \"../../core/component_registrator\";\nimport devices from \"../../core/devices\";\nimport { getPublicElement } from \"../../core/element\";\nimport $ from \"../../core/renderer\";\nimport { deferRender, noop } from \"../../core/utils/common\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { sign } from \"../../core/utils/math\";\nimport { getWidth } from \"../../core/utils/size\";\nimport { isDefined } from \"../../core/utils/type\";\nimport CollectionWidget from \"../../ui/collection/ui.collection_widget.live_update\";\nimport { _translator, animation } from \"./multi_view/m_multi_view.animation\";\nconst MULTIVIEW_CLASS = \"dx-multiview\";\nconst MULTIVIEW_WRAPPER_CLASS = \"dx-multiview-wrapper\";\nconst MULTIVIEW_ITEM_CONTAINER_CLASS = \"dx-multiview-item-container\";\nconst MULTIVIEW_ITEM_CLASS = \"dx-multiview-item\";\nconst MULTIVIEW_ITEM_HIDDEN_CLASS = \"dx-multiview-item-hidden\";\nconst MULTIVIEW_ITEM_DATA_KEY = \"dxMultiViewItemData\";\nconst MULTIVIEW_ANIMATION_DURATION = 200;\nconst toNumber = value => +value;\nconst position = $element => locate($element).left;\nclass MultiView extends CollectionWidget {\n  _supportedKeys() {\n    return _extends({}, super._supportedKeys(), {\n      pageUp: noop,\n      pageDown: noop\n    });\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      selectedIndex: 0,\n      swipeEnabled: true,\n      animationEnabled: true,\n      loop: false,\n      deferRendering: true,\n      loopItemFocus: false,\n      selectOnFocus: true,\n      selectionMode: \"single\",\n      selectionRequired: true,\n      selectByClick: false\n    });\n  }\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: () => \"desktop\" === devices.real().deviceType && !devices.isSimulator(),\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  }\n  _itemClass() {\n    return \"dx-multiview-item\";\n  }\n  _itemDataKey() {\n    return \"dxMultiViewItemData\";\n  }\n  _itemContainer() {\n    return this._$itemContainer;\n  }\n  _itemElements() {\n    return this._itemContainer().children(this._itemSelector());\n  }\n  _itemWidth() {\n    if (!this._itemWidthValue) {\n      this._itemWidthValue = getWidth(this._$wrapper);\n    }\n    return this._itemWidthValue;\n  }\n  _clearItemWidthCache() {\n    delete this._itemWidthValue;\n  }\n  _itemsCount() {\n    return this.option(\"items\").length;\n  }\n  _isAllItemsHidden() {\n    const {\n      items: items\n    } = this.option();\n    return items.every((_, index) => !this._isItemVisible(index));\n  }\n  _normalizeIndex(index, direction) {\n    let loop = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : true;\n    const count = this._itemsCount();\n    if (this._isAllItemsHidden()) {\n      return;\n    }\n    if (index < 0) {\n      index += count;\n    }\n    if (index >= count) {\n      index -= count;\n    }\n    const step = direction > 0 ? -1 : 1;\n    const lastNotLoopedIndex = -1 === step ? 0 : count - 1;\n    while (!this._isItemVisible(index) && (loop || index !== lastNotLoopedIndex)) {\n      index = (index + step + count) % count;\n    }\n    return index;\n  }\n  _getRTLSignCorrection() {\n    return this.option(\"rtlEnabled\") ? -1 : 1;\n  }\n  _init() {\n    super._init.apply(this, arguments);\n    this._activeStateUnit = \".dx-multiview-item\";\n    const $element = this.$element();\n    $element.addClass(\"dx-multiview\");\n    this._$wrapper = $(\"<div>\").addClass(\"dx-multiview-wrapper\");\n    this._$wrapper.appendTo($element);\n    this._$itemContainer = $(\"<div>\").addClass(\"dx-multiview-item-container\");\n    this._$itemContainer.appendTo(this._$wrapper);\n    this.option(\"loopItemFocus\", this.option(\"loop\"));\n    this._findBoundaryIndices();\n    this._initSwipeable();\n  }\n  _ensureSelectedItemIsVisible() {\n    const {\n      loop: loop,\n      selectedIndex: currentSelectedIndex\n    } = this.option();\n    if (this._isItemVisible(currentSelectedIndex)) {\n      return;\n    }\n    if (this._isAllItemsHidden()) {\n      this.option(\"selectedIndex\", 0);\n      return;\n    }\n    const direction = -1 * this._getRTLSignCorrection();\n    let newSelectedIndex = this._normalizeIndex(currentSelectedIndex, direction, loop);\n    if (newSelectedIndex === currentSelectedIndex) {\n      newSelectedIndex = this._normalizeIndex(currentSelectedIndex, -direction, loop);\n    }\n    this.option(\"selectedIndex\", newSelectedIndex);\n  }\n  _initMarkup() {\n    this._deferredItems = [];\n    super._initMarkup();\n    this._ensureSelectedItemIsVisible();\n    const selectedItemIndices = this._getSelectedItemIndices();\n    this._updateItemsVisibility(selectedItemIndices[0]);\n    this._setElementAria();\n    this._setItemsAria();\n  }\n  _afterItemElementDeleted($item, deletedActionArgs) {\n    super._afterItemElementDeleted($item, deletedActionArgs);\n    if (this._deferredItems) {\n      this._deferredItems.splice(deletedActionArgs.itemIndex, 1);\n    }\n  }\n  _beforeItemElementInserted(change) {\n    super._beforeItemElementInserted.apply(this, arguments);\n    if (this._deferredItems) {\n      this._deferredItems.splice(change.index, 0, null);\n    }\n  }\n  _executeItemRenderAction(index, itemData, itemElement) {\n    index = (this.option(\"items\") || []).indexOf(itemData);\n    super._executeItemRenderAction(index, itemData, itemElement);\n  }\n  _renderItemContent(args) {\n    const renderContentDeferred = Deferred();\n    const that = this;\n    const deferred = Deferred();\n    deferred.done(() => {\n      const $itemContent = super._renderItemContent.call(that, args);\n      renderContentDeferred.resolve($itemContent);\n    });\n    this._deferredItems[args.index] = deferred;\n    this.option(\"deferRendering\") || deferred.resolve();\n    return renderContentDeferred.promise();\n  }\n  _render() {\n    super._render();\n    deferRender(() => {\n      const selectedItemIndices = this._getSelectedItemIndices();\n      this._updateItems(selectedItemIndices[0]);\n    });\n  }\n  _getElementAria() {\n    return {\n      role: \"group\",\n      roledescription: messageLocalization.format(\"dxMultiView-elementAriaRoleDescription\"),\n      label: messageLocalization.format(\"dxMultiView-elementAriaLabel\")\n    };\n  }\n  _setElementAria() {\n    const aria = this._getElementAria();\n    this.setAria(aria, this.$element());\n  }\n  _setItemsAria() {\n    const $itemElements = this._itemElements();\n    const itemsCount = this._itemsCount();\n    $itemElements.each((itemIndex, item) => {\n      const aria = this._getItemAria({\n        itemIndex: itemIndex,\n        itemsCount: itemsCount\n      });\n      this.setAria(aria, $(item));\n    });\n  }\n  _getItemAria(args) {\n    const {\n      itemIndex: itemIndex,\n      itemsCount: itemsCount\n    } = args;\n    const aria = {\n      role: \"group\",\n      roledescription: messageLocalization.format(\"dxMultiView-itemAriaRoleDescription\"),\n      label: messageLocalization.format(\"dxMultiView-itemAriaLabel\", itemIndex + 1, itemsCount)\n    };\n    return aria;\n  }\n  _updateItems(selectedIndex, newIndex) {\n    this._updateItemsPosition(selectedIndex, newIndex);\n    this._updateItemsVisibility(selectedIndex, newIndex);\n  }\n  _modifyByChanges() {\n    super._modifyByChanges.apply(this, arguments);\n    const selectedItemIndices = this._getSelectedItemIndices();\n    this._updateItemsVisibility(selectedItemIndices[0]);\n  }\n  _updateItemsPosition(selectedIndex, newIndex) {\n    const $itemElements = this._itemElements();\n    const positionSign = isDefined(newIndex) ? -this._animationDirection(newIndex, selectedIndex) : void 0;\n    const $selectedItem = $itemElements.eq(selectedIndex);\n    _translator.move($selectedItem, 0);\n    if (isDefined(newIndex)) {\n      _translator.move($itemElements.eq(newIndex), 100 * positionSign + \"%\");\n    }\n  }\n  _isItemVisible(index) {\n    var _this$option$index;\n    return (null === (_this$option$index = this.option(\"items\")[index]) || void 0 === _this$option$index ? void 0 : _this$option$index.visible) ?? true;\n  }\n  _updateItemsVisibility(selectedIndex, newIndex) {\n    const $itemElements = this._itemElements();\n    $itemElements.each((itemIndex, item) => {\n      const $item = $(item);\n      const isHidden = itemIndex !== selectedIndex && itemIndex !== newIndex;\n      if (!isHidden) {\n        this._renderSpecificItem(itemIndex);\n      }\n      $item.toggleClass(\"dx-multiview-item-hidden\", isHidden);\n      this.setAria(\"hidden\", isHidden || void 0, $item);\n    });\n  }\n  _renderSpecificItem(index) {\n    const $item = this._itemElements().eq(index);\n    const hasItemContent = $item.find(this._itemContentClass()).length > 0;\n    if (isDefined(index) && !hasItemContent) {\n      this._deferredItems[index].resolve();\n      triggerResizeEvent($item);\n    }\n  }\n  _refreshItem($item, item) {\n    super._refreshItem($item, item);\n    this._updateItemsVisibility(this.option(\"selectedIndex\"));\n  }\n  _setAriaSelectionAttribute() {}\n  _updateSelection(addedSelection, removedSelection) {\n    const newIndex = addedSelection[0];\n    const prevIndex = removedSelection[0];\n    animation.complete(this._$itemContainer);\n    this._updateItems(prevIndex, newIndex);\n    const animationDirection = this._animationDirection(newIndex, prevIndex);\n    this._animateItemContainer(animationDirection * this._itemWidth(), () => {\n      _translator.move(this._$itemContainer, 0);\n      this._updateItems(newIndex);\n      getWidth(this._$itemContainer);\n    });\n  }\n  _animateItemContainer(position, completeCallback) {\n    const duration = this.option(\"animationEnabled\") ? 200 : 0;\n    animation.moveTo(this._$itemContainer, position, duration, completeCallback);\n  }\n  _animationDirection(newIndex, prevIndex) {\n    const containerPosition = position(this._$itemContainer);\n    const indexDifference = (prevIndex - newIndex) * this._getRTLSignCorrection() * this._getItemFocusLoopSignCorrection();\n    const isSwipePresent = 0 !== containerPosition;\n    const directionSignVariable = isSwipePresent ? containerPosition : indexDifference;\n    return sign(directionSignVariable);\n  }\n  _getSwipeDisabledState() {\n    return !this.option(\"swipeEnabled\") || this._itemsCount() <= 1;\n  }\n  _initSwipeable() {\n    this._createComponent(this.$element(), Swipeable, {\n      disabled: this._getSwipeDisabledState(),\n      elastic: false,\n      itemSizeFunc: this._itemWidth.bind(this),\n      onStart: args => this._swipeStartHandler(args.event),\n      onUpdated: args => this._swipeUpdateHandler(args.event),\n      onEnd: args => this._swipeEndHandler(args.event)\n    });\n  }\n  _findBoundaryIndices() {\n    const items = this.option(\"items\");\n    let firstIndex;\n    let lastIndex;\n    items.forEach((item, index) => {\n      const isDisabled = Boolean(null === item || void 0 === item ? void 0 : item.disabled);\n      const isVisible = this._isItemVisible(index);\n      if (!isDisabled && isVisible) {\n        firstIndex ?? (firstIndex = index);\n        lastIndex = index;\n      }\n    });\n    this._boundaryIndices = {\n      firstAvailableIndex: firstIndex ?? 0,\n      lastAvailableIndex: lastIndex ?? items.length - 1,\n      firstTrueIndex: 0,\n      lastTrueIndex: items.length - 1\n    };\n  }\n  _swipeStartHandler(e) {\n    animation.complete(this._$itemContainer);\n    const selectedIndex = this.option(\"selectedIndex\");\n    const loop = this.option(\"loop\");\n    const {\n      firstAvailableIndex: firstAvailableIndex,\n      lastAvailableIndex: lastAvailableIndex\n    } = this._boundaryIndices;\n    const rtl = this.option(\"rtlEnabled\");\n    e.maxLeftOffset = toNumber(loop || (rtl ? selectedIndex > firstAvailableIndex : selectedIndex < lastAvailableIndex));\n    e.maxRightOffset = toNumber(loop || (rtl ? selectedIndex < lastAvailableIndex : selectedIndex > firstAvailableIndex));\n  }\n  _swipeUpdateHandler(e) {\n    const {\n      offset: offset\n    } = e;\n    const swipeDirection = sign(offset) * this._getRTLSignCorrection();\n    const selectedIndex = this.option(\"selectedIndex\");\n    const newIndex = this._normalizeIndex(selectedIndex - swipeDirection, swipeDirection);\n    if (selectedIndex === newIndex) {\n      return;\n    }\n    _translator.move(this._$itemContainer, offset * this._itemWidth());\n    this._updateItems(selectedIndex, newIndex);\n  }\n  _findNextAvailableIndex(index, offset) {\n    const {\n      items: items,\n      loop: loop\n    } = this.option();\n    const {\n      firstAvailableIndex: firstAvailableIndex,\n      lastAvailableIndex: lastAvailableIndex,\n      firstTrueIndex: firstTrueIndex,\n      lastTrueIndex: lastTrueIndex\n    } = this._boundaryIndices;\n    const isFirstActive = [firstTrueIndex, firstAvailableIndex].includes(index);\n    const isLastActive = [lastTrueIndex, lastAvailableIndex].includes(index);\n    if (loop) {\n      if (isFirstActive && offset < 0) {\n        return lastAvailableIndex;\n      }\n      if (isLastActive && offset > 0) {\n        return firstAvailableIndex;\n      }\n    }\n    for (let i = index + offset; i >= firstAvailableIndex && i <= lastAvailableIndex; i += offset) {\n      const isDisabled = Boolean(items[i].disabled);\n      const isVisible = this._isItemVisible(i);\n      if (!isDisabled && isVisible) {\n        return i;\n      }\n    }\n    return index;\n  }\n  _postprocessSwipe(args) {}\n  _swipeEndHandler(e) {\n    const targetOffset = e.targetOffset * this._getRTLSignCorrection();\n    if (targetOffset) {\n      const newSelectedIndex = this._findNextAvailableIndex(this.option(\"selectedIndex\"), -targetOffset);\n      this.selectItem(newSelectedIndex).fail(() => {\n        this._animateItemContainer(0, noop);\n      }).done(() => {\n        this._postprocessSwipe({\n          swipedTabsIndex: newSelectedIndex\n        });\n      });\n      const $selectedElement = this.itemElements().filter(\".dx-item-selected\");\n      this.option(\"focusStateEnabled\") && this.option(\"focusedElement\", getPublicElement($selectedElement));\n    } else {\n      this._animateItemContainer(0, noop);\n    }\n  }\n  _getItemFocusLoopSignCorrection() {\n    return this._itemFocusLooped ? -1 : 1;\n  }\n  _moveFocus() {\n    super._moveFocus.apply(this, arguments);\n    this._itemFocusLooped = false;\n  }\n  _prevItem($items) {\n    const $result = super._prevItem.apply(this, arguments);\n    this._itemFocusLooped = $result.is($items.last());\n    return $result;\n  }\n  _nextItem($items) {\n    const $result = super._nextItem.apply(this, arguments);\n    this._itemFocusLooped = $result.is($items.first());\n    return $result;\n  }\n  _dimensionChanged() {\n    this._clearItemWidthCache();\n  }\n  _visibilityChanged(visible) {\n    if (visible) {\n      this._dimensionChanged();\n    }\n  }\n  _updateSwipeDisabledState() {\n    const disabled = this._getSwipeDisabledState();\n    Swipeable.getInstance(this.$element()).option(\"disabled\", disabled);\n  }\n  _dispose() {\n    delete this._boundaryIndices;\n    super._dispose();\n  }\n  _itemOptionChanged(item, property) {\n    super._itemOptionChanged(...arguments);\n    const {\n      selectedItem: selectedItem\n    } = this.option();\n    if (\"visible\" === property && item === selectedItem) {\n      this._ensureSelectedItemIsVisible();\n    }\n  }\n  _optionChanged(args) {\n    const {\n      value: value\n    } = args;\n    switch (args.name) {\n      case \"loop\":\n        this.option(\"loopItemFocus\", value);\n        break;\n      case \"animationEnabled\":\n        break;\n      case \"swipeEnabled\":\n        this._updateSwipeDisabledState();\n        break;\n      case \"deferRendering\":\n        this._invalidate();\n        break;\n      case \"items\":\n        this._updateSwipeDisabledState();\n        this._findBoundaryIndices();\n        super._optionChanged(args);\n        break;\n      case \"selectedIndex\":\n        if (this._isItemVisible(value)) {\n          super._optionChanged(args);\n        } else {\n          this._ensureSelectedItemIsVisible();\n        }\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n}\nregisterComponent(\"dxMultiView\", MultiView);\nexport default MultiView;","map":{"version":3,"names":["_extends","locate","Swipeable","triggerResizeEvent","messageLocalization","registerComponent","devices","getPublicElement","$","deferRender","noop","Deferred","sign","getWidth","isDefined","CollectionWidget","_translator","animation","MULTIVIEW_CLASS","MULTIVIEW_WRAPPER_CLASS","MULTIVIEW_ITEM_CONTAINER_CLASS","MULTIVIEW_ITEM_CLASS","MULTIVIEW_ITEM_HIDDEN_CLASS","MULTIVIEW_ITEM_DATA_KEY","MULTIVIEW_ANIMATION_DURATION","toNumber","value","position","$element","left","MultiView","_supportedKeys","pageUp","pageDown","_getDefaultOptions","selectedIndex","swipeEnabled","animationEnabled","loop","deferRendering","loopItemFocus","selectOnFocus","selectionMode","selectionRequired","selectByClick","_defaultOptionsRules","concat","device","real","deviceType","isSimulator","options","focusStateEnabled","_itemClass","_itemDataKey","_itemContainer","_$itemContainer","_itemElements","children","_itemSelector","_itemWidth","_itemWidthValue","_$wrapper","_clearItemWidthCache","_itemsCount","option","length","_isAllItemsHidden","items","every","_","index","_isItemVisible","_normalizeIndex","direction","arguments","count","step","lastNotLoopedIndex","_getRTLSignCorrection","_init","apply","_activeStateUnit","addClass","appendTo","_findBoundaryIndices","_initSwipeable","_ensureSelectedItemIsVisible","currentSelectedIndex","newSelectedIndex","_initMarkup","_deferredItems","selectedItemIndices","_getSelectedItemIndices","_updateItemsVisibility","_setElementAria","_setItemsAria","_afterItemElementDeleted","$item","deletedActionArgs","splice","itemIndex","_beforeItemElementInserted","change","_executeItemRenderAction","itemData","itemElement","indexOf","_renderItemContent","args","renderContentDeferred","that","deferred","done","$itemContent","call","resolve","promise","_render","_updateItems","_getElementAria","role","roledescription","format","label","aria","setAria","$itemElements","itemsCount","each","item","_getItemAria","newIndex","_updateItemsPosition","_modifyByChanges","positionSign","_animationDirection","$selectedItem","eq","move","_this$option$index","visible","isHidden","_renderSpecificItem","toggleClass","hasItemContent","find","_itemContentClass","_refreshItem","_setAriaSelectionAttribute","_updateSelection","addedSelection","removedSelection","prevIndex","complete","animationDirection","_animateItemContainer","completeCallback","duration","moveTo","containerPosition","indexDifference","_getItemFocusLoopSignCorrection","isSwipePresent","directionSignVariable","_getSwipeDisabledState","_createComponent","disabled","elastic","itemSizeFunc","bind","onStart","_swipeStartHandler","event","onUpdated","_swipeUpdateHandler","onEnd","_swipeEndHandler","firstIndex","lastIndex","forEach","isDisabled","Boolean","isVisible","_boundaryIndices","firstAvailableIndex","lastAvailableIndex","firstTrueIndex","lastTrueIndex","e","rtl","maxLeftOffset","maxRightOffset","offset","swipeDirection","_findNextAvailableIndex","isFirstActive","includes","isLastActive","i","_postprocessSwipe","targetOffset","selectItem","fail","swipedTabsIndex","$selectedElement","itemElements","filter","_itemFocusLooped","_moveFocus","_prevItem","$items","$result","is","last","_nextItem","first","_dimensionChanged","_visibilityChanged","_updateSwipeDisabledState","getInstance","_dispose","_itemOptionChanged","property","selectedItem","_optionChanged","name","_invalidate"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/m_multi_view.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/m_multi_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    locate\r\n} from \"../../common/core/animation/translator\";\r\nimport Swipeable from \"../../common/core/events/gesture/swipeable\";\r\nimport {\r\n    triggerResizeEvent\r\n} from \"../../common/core/events/visibility_change\";\r\nimport messageLocalization from \"../../common/core/localization/message\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../core/element\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    deferRender,\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    sign\r\n} from \"../../core/utils/math\";\r\nimport {\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport CollectionWidget from \"../../ui/collection/ui.collection_widget.live_update\";\r\nimport {\r\n    _translator,\r\n    animation\r\n} from \"./multi_view/m_multi_view.animation\";\r\nconst MULTIVIEW_CLASS = \"dx-multiview\";\r\nconst MULTIVIEW_WRAPPER_CLASS = \"dx-multiview-wrapper\";\r\nconst MULTIVIEW_ITEM_CONTAINER_CLASS = \"dx-multiview-item-container\";\r\nconst MULTIVIEW_ITEM_CLASS = \"dx-multiview-item\";\r\nconst MULTIVIEW_ITEM_HIDDEN_CLASS = \"dx-multiview-item-hidden\";\r\nconst MULTIVIEW_ITEM_DATA_KEY = \"dxMultiViewItemData\";\r\nconst MULTIVIEW_ANIMATION_DURATION = 200;\r\nconst toNumber = value => +value;\r\nconst position = $element => locate($element).left;\r\nclass MultiView extends CollectionWidget {\r\n    _supportedKeys() {\r\n        return _extends({}, super._supportedKeys(), {\r\n            pageUp: noop,\r\n            pageDown: noop\r\n        })\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            selectedIndex: 0,\r\n            swipeEnabled: true,\r\n            animationEnabled: true,\r\n            loop: false,\r\n            deferRendering: true,\r\n            loopItemFocus: false,\r\n            selectOnFocus: true,\r\n            selectionMode: \"single\",\r\n            selectionRequired: true,\r\n            selectByClick: false\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device: () => \"desktop\" === devices.real().deviceType && !devices.isSimulator(),\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }])\r\n    }\r\n    _itemClass() {\r\n        return \"dx-multiview-item\"\r\n    }\r\n    _itemDataKey() {\r\n        return \"dxMultiViewItemData\"\r\n    }\r\n    _itemContainer() {\r\n        return this._$itemContainer\r\n    }\r\n    _itemElements() {\r\n        return this._itemContainer().children(this._itemSelector())\r\n    }\r\n    _itemWidth() {\r\n        if (!this._itemWidthValue) {\r\n            this._itemWidthValue = getWidth(this._$wrapper)\r\n        }\r\n        return this._itemWidthValue\r\n    }\r\n    _clearItemWidthCache() {\r\n        delete this._itemWidthValue\r\n    }\r\n    _itemsCount() {\r\n        return this.option(\"items\").length\r\n    }\r\n    _isAllItemsHidden() {\r\n        const {\r\n            items: items\r\n        } = this.option();\r\n        return items.every(((_, index) => !this._isItemVisible(index)))\r\n    }\r\n    _normalizeIndex(index, direction) {\r\n        let loop = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : true;\r\n        const count = this._itemsCount();\r\n        if (this._isAllItemsHidden()) {\r\n            return\r\n        }\r\n        if (index < 0) {\r\n            index += count\r\n        }\r\n        if (index >= count) {\r\n            index -= count\r\n        }\r\n        const step = direction > 0 ? -1 : 1;\r\n        const lastNotLoopedIndex = -1 === step ? 0 : count - 1;\r\n        while (!this._isItemVisible(index) && (loop || index !== lastNotLoopedIndex)) {\r\n            index = (index + step + count) % count\r\n        }\r\n        return index\r\n    }\r\n    _getRTLSignCorrection() {\r\n        return this.option(\"rtlEnabled\") ? -1 : 1\r\n    }\r\n    _init() {\r\n        super._init.apply(this, arguments);\r\n        this._activeStateUnit = \".dx-multiview-item\";\r\n        const $element = this.$element();\r\n        $element.addClass(\"dx-multiview\");\r\n        this._$wrapper = $(\"<div>\").addClass(\"dx-multiview-wrapper\");\r\n        this._$wrapper.appendTo($element);\r\n        this._$itemContainer = $(\"<div>\").addClass(\"dx-multiview-item-container\");\r\n        this._$itemContainer.appendTo(this._$wrapper);\r\n        this.option(\"loopItemFocus\", this.option(\"loop\"));\r\n        this._findBoundaryIndices();\r\n        this._initSwipeable()\r\n    }\r\n    _ensureSelectedItemIsVisible() {\r\n        const {\r\n            loop: loop,\r\n            selectedIndex: currentSelectedIndex\r\n        } = this.option();\r\n        if (this._isItemVisible(currentSelectedIndex)) {\r\n            return\r\n        }\r\n        if (this._isAllItemsHidden()) {\r\n            this.option(\"selectedIndex\", 0);\r\n            return\r\n        }\r\n        const direction = -1 * this._getRTLSignCorrection();\r\n        let newSelectedIndex = this._normalizeIndex(currentSelectedIndex, direction, loop);\r\n        if (newSelectedIndex === currentSelectedIndex) {\r\n            newSelectedIndex = this._normalizeIndex(currentSelectedIndex, -direction, loop)\r\n        }\r\n        this.option(\"selectedIndex\", newSelectedIndex)\r\n    }\r\n    _initMarkup() {\r\n        this._deferredItems = [];\r\n        super._initMarkup();\r\n        this._ensureSelectedItemIsVisible();\r\n        const selectedItemIndices = this._getSelectedItemIndices();\r\n        this._updateItemsVisibility(selectedItemIndices[0]);\r\n        this._setElementAria();\r\n        this._setItemsAria()\r\n    }\r\n    _afterItemElementDeleted($item, deletedActionArgs) {\r\n        super._afterItemElementDeleted($item, deletedActionArgs);\r\n        if (this._deferredItems) {\r\n            this._deferredItems.splice(deletedActionArgs.itemIndex, 1)\r\n        }\r\n    }\r\n    _beforeItemElementInserted(change) {\r\n        super._beforeItemElementInserted.apply(this, arguments);\r\n        if (this._deferredItems) {\r\n            this._deferredItems.splice(change.index, 0, null)\r\n        }\r\n    }\r\n    _executeItemRenderAction(index, itemData, itemElement) {\r\n        index = (this.option(\"items\") || []).indexOf(itemData);\r\n        super._executeItemRenderAction(index, itemData, itemElement)\r\n    }\r\n    _renderItemContent(args) {\r\n        const renderContentDeferred = Deferred();\r\n        const that = this;\r\n        const deferred = Deferred();\r\n        deferred.done((() => {\r\n            const $itemContent = super._renderItemContent.call(that, args);\r\n            renderContentDeferred.resolve($itemContent)\r\n        }));\r\n        this._deferredItems[args.index] = deferred;\r\n        this.option(\"deferRendering\") || deferred.resolve();\r\n        return renderContentDeferred.promise()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        deferRender((() => {\r\n            const selectedItemIndices = this._getSelectedItemIndices();\r\n            this._updateItems(selectedItemIndices[0])\r\n        }))\r\n    }\r\n    _getElementAria() {\r\n        return {\r\n            role: \"group\",\r\n            roledescription: messageLocalization.format(\"dxMultiView-elementAriaRoleDescription\"),\r\n            label: messageLocalization.format(\"dxMultiView-elementAriaLabel\")\r\n        }\r\n    }\r\n    _setElementAria() {\r\n        const aria = this._getElementAria();\r\n        this.setAria(aria, this.$element())\r\n    }\r\n    _setItemsAria() {\r\n        const $itemElements = this._itemElements();\r\n        const itemsCount = this._itemsCount();\r\n        $itemElements.each(((itemIndex, item) => {\r\n            const aria = this._getItemAria({\r\n                itemIndex: itemIndex,\r\n                itemsCount: itemsCount\r\n            });\r\n            this.setAria(aria, $(item))\r\n        }))\r\n    }\r\n    _getItemAria(args) {\r\n        const {\r\n            itemIndex: itemIndex,\r\n            itemsCount: itemsCount\r\n        } = args;\r\n        const aria = {\r\n            role: \"group\",\r\n            roledescription: messageLocalization.format(\"dxMultiView-itemAriaRoleDescription\"),\r\n            label: messageLocalization.format(\"dxMultiView-itemAriaLabel\", itemIndex + 1, itemsCount)\r\n        };\r\n        return aria\r\n    }\r\n    _updateItems(selectedIndex, newIndex) {\r\n        this._updateItemsPosition(selectedIndex, newIndex);\r\n        this._updateItemsVisibility(selectedIndex, newIndex)\r\n    }\r\n    _modifyByChanges() {\r\n        super._modifyByChanges.apply(this, arguments);\r\n        const selectedItemIndices = this._getSelectedItemIndices();\r\n        this._updateItemsVisibility(selectedItemIndices[0])\r\n    }\r\n    _updateItemsPosition(selectedIndex, newIndex) {\r\n        const $itemElements = this._itemElements();\r\n        const positionSign = isDefined(newIndex) ? -this._animationDirection(newIndex, selectedIndex) : void 0;\r\n        const $selectedItem = $itemElements.eq(selectedIndex);\r\n        _translator.move($selectedItem, 0);\r\n        if (isDefined(newIndex)) {\r\n            _translator.move($itemElements.eq(newIndex), 100 * positionSign + \"%\")\r\n        }\r\n    }\r\n    _isItemVisible(index) {\r\n        var _this$option$index;\r\n        return (null === (_this$option$index = this.option(\"items\")[index]) || void 0 === _this$option$index ? void 0 : _this$option$index.visible) ?? true\r\n    }\r\n    _updateItemsVisibility(selectedIndex, newIndex) {\r\n        const $itemElements = this._itemElements();\r\n        $itemElements.each(((itemIndex, item) => {\r\n            const $item = $(item);\r\n            const isHidden = itemIndex !== selectedIndex && itemIndex !== newIndex;\r\n            if (!isHidden) {\r\n                this._renderSpecificItem(itemIndex)\r\n            }\r\n            $item.toggleClass(\"dx-multiview-item-hidden\", isHidden);\r\n            this.setAria(\"hidden\", isHidden || void 0, $item)\r\n        }))\r\n    }\r\n    _renderSpecificItem(index) {\r\n        const $item = this._itemElements().eq(index);\r\n        const hasItemContent = $item.find(this._itemContentClass()).length > 0;\r\n        if (isDefined(index) && !hasItemContent) {\r\n            this._deferredItems[index].resolve();\r\n            triggerResizeEvent($item)\r\n        }\r\n    }\r\n    _refreshItem($item, item) {\r\n        super._refreshItem($item, item);\r\n        this._updateItemsVisibility(this.option(\"selectedIndex\"))\r\n    }\r\n    _setAriaSelectionAttribute() {}\r\n    _updateSelection(addedSelection, removedSelection) {\r\n        const newIndex = addedSelection[0];\r\n        const prevIndex = removedSelection[0];\r\n        animation.complete(this._$itemContainer);\r\n        this._updateItems(prevIndex, newIndex);\r\n        const animationDirection = this._animationDirection(newIndex, prevIndex);\r\n        this._animateItemContainer(animationDirection * this._itemWidth(), (() => {\r\n            _translator.move(this._$itemContainer, 0);\r\n            this._updateItems(newIndex);\r\n            getWidth(this._$itemContainer)\r\n        }))\r\n    }\r\n    _animateItemContainer(position, completeCallback) {\r\n        const duration = this.option(\"animationEnabled\") ? 200 : 0;\r\n        animation.moveTo(this._$itemContainer, position, duration, completeCallback)\r\n    }\r\n    _animationDirection(newIndex, prevIndex) {\r\n        const containerPosition = position(this._$itemContainer);\r\n        const indexDifference = (prevIndex - newIndex) * this._getRTLSignCorrection() * this._getItemFocusLoopSignCorrection();\r\n        const isSwipePresent = 0 !== containerPosition;\r\n        const directionSignVariable = isSwipePresent ? containerPosition : indexDifference;\r\n        return sign(directionSignVariable)\r\n    }\r\n    _getSwipeDisabledState() {\r\n        return !this.option(\"swipeEnabled\") || this._itemsCount() <= 1\r\n    }\r\n    _initSwipeable() {\r\n        this._createComponent(this.$element(), Swipeable, {\r\n            disabled: this._getSwipeDisabledState(),\r\n            elastic: false,\r\n            itemSizeFunc: this._itemWidth.bind(this),\r\n            onStart: args => this._swipeStartHandler(args.event),\r\n            onUpdated: args => this._swipeUpdateHandler(args.event),\r\n            onEnd: args => this._swipeEndHandler(args.event)\r\n        })\r\n    }\r\n    _findBoundaryIndices() {\r\n        const items = this.option(\"items\");\r\n        let firstIndex;\r\n        let lastIndex;\r\n        items.forEach(((item, index) => {\r\n            const isDisabled = Boolean(null === item || void 0 === item ? void 0 : item.disabled);\r\n            const isVisible = this._isItemVisible(index);\r\n            if (!isDisabled && isVisible) {\r\n                firstIndex ?? (firstIndex = index);\r\n                lastIndex = index\r\n            }\r\n        }));\r\n        this._boundaryIndices = {\r\n            firstAvailableIndex: firstIndex ?? 0,\r\n            lastAvailableIndex: lastIndex ?? items.length - 1,\r\n            firstTrueIndex: 0,\r\n            lastTrueIndex: items.length - 1\r\n        }\r\n    }\r\n    _swipeStartHandler(e) {\r\n        animation.complete(this._$itemContainer);\r\n        const selectedIndex = this.option(\"selectedIndex\");\r\n        const loop = this.option(\"loop\");\r\n        const {\r\n            firstAvailableIndex: firstAvailableIndex,\r\n            lastAvailableIndex: lastAvailableIndex\r\n        } = this._boundaryIndices;\r\n        const rtl = this.option(\"rtlEnabled\");\r\n        e.maxLeftOffset = toNumber(loop || (rtl ? selectedIndex > firstAvailableIndex : selectedIndex < lastAvailableIndex));\r\n        e.maxRightOffset = toNumber(loop || (rtl ? selectedIndex < lastAvailableIndex : selectedIndex > firstAvailableIndex))\r\n    }\r\n    _swipeUpdateHandler(e) {\r\n        const {\r\n            offset: offset\r\n        } = e;\r\n        const swipeDirection = sign(offset) * this._getRTLSignCorrection();\r\n        const selectedIndex = this.option(\"selectedIndex\");\r\n        const newIndex = this._normalizeIndex(selectedIndex - swipeDirection, swipeDirection);\r\n        if (selectedIndex === newIndex) {\r\n            return\r\n        }\r\n        _translator.move(this._$itemContainer, offset * this._itemWidth());\r\n        this._updateItems(selectedIndex, newIndex)\r\n    }\r\n    _findNextAvailableIndex(index, offset) {\r\n        const {\r\n            items: items,\r\n            loop: loop\r\n        } = this.option();\r\n        const {\r\n            firstAvailableIndex: firstAvailableIndex,\r\n            lastAvailableIndex: lastAvailableIndex,\r\n            firstTrueIndex: firstTrueIndex,\r\n            lastTrueIndex: lastTrueIndex\r\n        } = this._boundaryIndices;\r\n        const isFirstActive = [firstTrueIndex, firstAvailableIndex].includes(index);\r\n        const isLastActive = [lastTrueIndex, lastAvailableIndex].includes(index);\r\n        if (loop) {\r\n            if (isFirstActive && offset < 0) {\r\n                return lastAvailableIndex\r\n            }\r\n            if (isLastActive && offset > 0) {\r\n                return firstAvailableIndex\r\n            }\r\n        }\r\n        for (let i = index + offset; i >= firstAvailableIndex && i <= lastAvailableIndex; i += offset) {\r\n            const isDisabled = Boolean(items[i].disabled);\r\n            const isVisible = this._isItemVisible(i);\r\n            if (!isDisabled && isVisible) {\r\n                return i\r\n            }\r\n        }\r\n        return index\r\n    }\r\n    _postprocessSwipe(args) {}\r\n    _swipeEndHandler(e) {\r\n        const targetOffset = e.targetOffset * this._getRTLSignCorrection();\r\n        if (targetOffset) {\r\n            const newSelectedIndex = this._findNextAvailableIndex(this.option(\"selectedIndex\"), -targetOffset);\r\n            this.selectItem(newSelectedIndex).fail((() => {\r\n                this._animateItemContainer(0, noop)\r\n            })).done((() => {\r\n                this._postprocessSwipe({\r\n                    swipedTabsIndex: newSelectedIndex\r\n                })\r\n            }));\r\n            const $selectedElement = this.itemElements().filter(\".dx-item-selected\");\r\n            this.option(\"focusStateEnabled\") && this.option(\"focusedElement\", getPublicElement($selectedElement))\r\n        } else {\r\n            this._animateItemContainer(0, noop)\r\n        }\r\n    }\r\n    _getItemFocusLoopSignCorrection() {\r\n        return this._itemFocusLooped ? -1 : 1\r\n    }\r\n    _moveFocus() {\r\n        super._moveFocus.apply(this, arguments);\r\n        this._itemFocusLooped = false\r\n    }\r\n    _prevItem($items) {\r\n        const $result = super._prevItem.apply(this, arguments);\r\n        this._itemFocusLooped = $result.is($items.last());\r\n        return $result\r\n    }\r\n    _nextItem($items) {\r\n        const $result = super._nextItem.apply(this, arguments);\r\n        this._itemFocusLooped = $result.is($items.first());\r\n        return $result\r\n    }\r\n    _dimensionChanged() {\r\n        this._clearItemWidthCache()\r\n    }\r\n    _visibilityChanged(visible) {\r\n        if (visible) {\r\n            this._dimensionChanged()\r\n        }\r\n    }\r\n    _updateSwipeDisabledState() {\r\n        const disabled = this._getSwipeDisabledState();\r\n        Swipeable.getInstance(this.$element()).option(\"disabled\", disabled)\r\n    }\r\n    _dispose() {\r\n        delete this._boundaryIndices;\r\n        super._dispose()\r\n    }\r\n    _itemOptionChanged(item, property) {\r\n        super._itemOptionChanged(...arguments);\r\n        const {\r\n            selectedItem: selectedItem\r\n        } = this.option();\r\n        if (\"visible\" === property && item === selectedItem) {\r\n            this._ensureSelectedItemIsVisible()\r\n        }\r\n    }\r\n    _optionChanged(args) {\r\n        const {\r\n            value: value\r\n        } = args;\r\n        switch (args.name) {\r\n            case \"loop\":\r\n                this.option(\"loopItemFocus\", value);\r\n                break;\r\n            case \"animationEnabled\":\r\n                break;\r\n            case \"swipeEnabled\":\r\n                this._updateSwipeDisabledState();\r\n                break;\r\n            case \"deferRendering\":\r\n                this._invalidate();\r\n                break;\r\n            case \"items\":\r\n                this._updateSwipeDisabledState();\r\n                this._findBoundaryIndices();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"selectedIndex\":\r\n                if (this._isItemVisible(value)) {\r\n                    super._optionChanged(args)\r\n                } else {\r\n                    this._ensureSelectedItemIsVisible()\r\n                }\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nregisterComponent(\"dxMultiView\", MultiView);\r\nexport default MultiView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}