{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/selection/m_selection.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { name as clickEventName } from \"../../../../common/core/events/click\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport holdEvent from \"../../../../common/core/events/hold\";\nimport { addNamespace, isCommandKeyPressed } from \"../../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport { applyBatch } from \"../../../../common/data/array_utils\";\nimport $ from \"../../../../core/renderer\";\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport { Deferred } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport supportUtils from \"../../../core/utils/m_support\";\nimport Selection from \"../../../ui/selection/m_selection\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nconst EDITOR_CELL_CLASS = \"dx-editor-cell\";\nconst ROW_CLASS = \"dx-row\";\nconst ROW_SELECTION_CLASS = \"dx-selection\";\nconst SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nconst CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\nconst COMMAND_SELECT_CLASS = \"dx-command-select\";\nconst SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nconst DATA_ROW_CLASS = \"dx-data-row\";\nconst SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\nconst SELECTION_MODE = \"selection.mode\";\nconst processLongTap = function (that, dxEvent) {\n  const rowsView = that.getView(\"rowsView\");\n  const selectionController = that.getController(\"selection\");\n  const $row = $(dxEvent.target).closest(\".dx-data-row\");\n  const rowIndex = rowsView.getRowIndex($row);\n  if (rowIndex < 0) {\n    return;\n  }\n  if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\n    if (selectionController.isSelectionWithCheckboxes()) {\n      selectionController.stopSelectionWithCheckboxes();\n    } else {\n      selectionController.startSelectionWithCheckboxes();\n    }\n  } else {\n    if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.startSelectionWithCheckboxes();\n    }\n    if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.changeItemSelection(rowIndex, {\n        control: true\n      });\n    }\n  }\n};\nconst isSeveralRowsSelected = function (that, selectionFilter) {\n  let keyIndex = 0;\n  const store = that._dataController.store();\n  const key = store && store.key();\n  const isComplexKey = Array.isArray(key);\n  if (!selectionFilter.length) {\n    return false;\n  }\n  if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\n    for (let i = 0; i < selectionFilter.length; i++) {\n      if (Array.isArray(selectionFilter[i])) {\n        if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\n          return true;\n        }\n        keyIndex++;\n      }\n    }\n    return false;\n  }\n  return key !== selectionFilter[0];\n};\nconst selectionCellTemplate = (container, options) => {\n  const {\n    component: component\n  } = options;\n  const rowsView = component.getView(\"rowsView\");\n  if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\n    options.value = component.isRowSelected(options.row.key);\n  }\n  rowsView.renderSelectCheckBoxContainer($(container), options);\n};\nconst selectionHeaderTemplate = (container, options) => {\n  const {\n    column: column\n  } = options;\n  const $cellElement = $(container);\n  const columnHeadersView = options.component.getView(\"columnHeadersView\");\n  $cellElement.addClass(\"dx-editor-cell\");\n  columnHeadersView._renderSelectAllCheckBox($cellElement, column);\n  columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);\n};\nexport class SelectionController extends modules.Controller {\n  init() {\n    const {\n      deferred: deferred,\n      selectAllMode: selectAllMode,\n      mode: mode\n    } = this.option(\"selection\") ?? {};\n    if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\n      errors.log(\"W1018\");\n    }\n    this._dataController = this.getController(\"data\");\n    this._columnsController = this.getController(\"columns\");\n    this._stateStoringController = this.getController(\"stateStoring\");\n    this._selectionMode = mode;\n    this._isSelectionWithCheckboxes = false;\n    this._selection = this._createSelection();\n    this._updateSelectColumn();\n    this.createAction(\"onSelectionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    if (!this._dataPushedHandler) {\n      this._dataPushedHandler = this._handleDataPushed.bind(this);\n      this._dataController.pushed.add(this._dataPushedHandler);\n    }\n  }\n  _handleDataPushed(changes) {\n    this._deselectRemovedOnPush(changes);\n    this._updateSelectedOnPush(changes);\n  }\n  _deselectRemovedOnPush(changes) {\n    const isDeferredSelection = this.option(\"selection.deferred\");\n    let removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\n    if (isDeferredSelection) {\n      const selectedKeys = this._dataController.items().filter(item => item.isSelected).map(item => item.key);\n      removedKeys = removedKeys.filter(key => selectedKeys.find(selectedKey => equalByValue(selectedKey, key)));\n    }\n    removedKeys.length && this.deselectRows(removedKeys);\n  }\n  _updateSelectedOnPush(changes) {\n    const isDeferredSelection = this.option(\"selection.deferred\");\n    if (isDeferredSelection) {\n      return;\n    }\n    const updateChanges = changes.filter(change => \"update\" === change.type);\n    const data = this.getSelectedRowsData();\n    applyBatch({\n      keyInfo: this._selection.options,\n      data: data,\n      changes: updateChanges\n    });\n  }\n  _getSelectionConfig() {\n    const dataController = this._dataController;\n    const columnsController = this._columnsController;\n    const selectionOptions = this.option(\"selection\") ?? {};\n    const {\n      deferred: deferred\n    } = selectionOptions;\n    const scrollingMode = this.option(\"scrolling.mode\");\n    const virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n    const allowSelectAll = this.option(\"selection.allowSelectAll\");\n    const legacyScrollingMode = this.option(\"scrolling.legacyMode\");\n    return {\n      selectedKeys: this.option(\"selectedRowKeys\"),\n      mode: this._selectionMode,\n      deferred: deferred,\n      alwaysSelectByShift: selectionOptions.alwaysSelectByShift,\n      maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\n      selectionFilter: this.option(\"selectionFilter\"),\n      ignoreDisabledItems: true,\n      isVirtualPaging: virtualPaging,\n      sensitivity: this.option(\"selection.sensitivity\"),\n      allowLoadByRange() {\n        const hasGroupColumns = columnsController.getGroupColumns().length > 0;\n        return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred;\n      },\n      key: () => null === dataController || void 0 === dataController ? void 0 : dataController.key(),\n      keyOf: item => null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item),\n      dataFields() {\n        var _dataController$dataS;\n        return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select();\n      },\n      load(options) {\n        var _dataController$dataS2;\n        return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || new Deferred().resolve([]);\n      },\n      plainItems: cached => dataController.items(true),\n      isItemSelected: item => item.selected,\n      isSelectableItem: item => \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow,\n      getItemData: item => isDefined(null === item || void 0 === item ? void 0 : item.rowType) ? (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) : item,\n      filter: () => dataController.getCombinedFilter(deferred),\n      totalCount: () => dataController.totalCount(),\n      getLoadOptions(loadItemIndex, focusedItemIndex, shiftItemIndex) {\n        var _dataController$dataS3;\n        const {\n          sort: sort,\n          filter: filter\n        } = (null === (_dataController$dataS3 = dataController.dataSource()) || void 0 === _dataController$dataS3 ? void 0 : _dataController$dataS3.lastLoadOptions()) ?? {};\n        let minIndex = Math.min(loadItemIndex, focusedItemIndex);\n        let maxIndex = Math.max(loadItemIndex, focusedItemIndex);\n        if (isDefined(shiftItemIndex)) {\n          minIndex = Math.min(shiftItemIndex, minIndex);\n          maxIndex = Math.max(shiftItemIndex, maxIndex);\n        }\n        const take = maxIndex - minIndex + 1;\n        return {\n          skip: minIndex,\n          take: take,\n          filter: filter,\n          sort: sort\n        };\n      },\n      onSelectionChanged: this._updateSelectedItems.bind(this)\n    };\n  }\n  _updateSelectColumn() {\n    const columnsController = this._columnsController;\n    const isSelectColumnVisible = this.isSelectColumnVisible();\n    columnsController.addCommandColumn({\n      type: \"selection\",\n      command: \"select\",\n      visible: isSelectColumnVisible,\n      visibleIndex: -1,\n      dataType: \"boolean\",\n      alignment: \"center\",\n      cssClass: \"dx-command-select\",\n      width: \"auto\",\n      cellTemplate: selectionCellTemplate,\n      headerCellTemplate: selectionHeaderTemplate\n    });\n    columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible);\n  }\n  _createSelection() {\n    const options = this._getSelectionConfig();\n    return new Selection(options);\n  }\n  _fireSelectionChanged(options) {\n    const argument = this.option(\"selection.deferred\") ? {\n      selectionFilter: this.option(\"selectionFilter\")\n    } : {\n      selectedRowKeys: this.option(\"selectedRowKeys\")\n    };\n    this.selectionChanged.fire(argument);\n    if (options) {\n      this.executeAction(\"onSelectionChanged\", options);\n    }\n  }\n  _updateCheckboxesState(options) {\n    const {\n      isDeferredMode: isDeferredMode\n    } = options;\n    const {\n      selectionFilter: selectionFilter\n    } = options;\n    const {\n      selectedItemKeys: selectedItemKeys\n    } = options;\n    const {\n      removedItemKeys: removedItemKeys\n    } = options;\n    if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n      if (isDeferredMode ? selectionFilter && isSeveralRowsSelected(this, selectionFilter) : selectedItemKeys.length > 1) {\n        this.startSelectionWithCheckboxes();\n      } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\n        this.stopSelectionWithCheckboxes();\n      }\n    }\n  }\n  _updateSelectedItems(args) {\n    const that = this;\n    let selectionChangedOptions;\n    const isDeferredMode = that.option(\"selection.deferred\");\n    const selectionFilter = that._selection.selectionFilter();\n    const dataController = that._dataController;\n    const items = dataController.items(true);\n    const visibleItems = dataController.items();\n    if (!items) {\n      return;\n    }\n    const isSelectionWithCheckboxes = that.isSelectionWithCheckboxes();\n    const changedItemIndexes = that.getChangedItemIndexes(items);\n    const visibleChangedItemIndexes = that.getChangedItemIndexes(visibleItems);\n    that._updateCheckboxesState({\n      selectedItemKeys: args.selectedItemKeys,\n      removedItemKeys: args.removedItemKeys,\n      selectionFilter: selectionFilter,\n      isDeferredMode: isDeferredMode\n    });\n    if (changedItemIndexes.length || isSelectionWithCheckboxes !== that.isSelectionWithCheckboxes()) {\n      dataController.updateItems({\n        changeType: \"updateSelection\",\n        itemIndexes: visibleChangedItemIndexes\n      });\n    }\n    if (isDeferredMode) {\n      that.option(\"selectionFilter\", selectionFilter);\n      selectionChangedOptions = {};\n    } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\n      that._selectedItemsInternalChange = true;\n      that.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\n      that._selectedItemsInternalChange = false;\n      selectionChangedOptions = {\n        selectedRowsData: args.selectedItems.slice(0),\n        selectedRowKeys: args.selectedItemKeys.slice(0),\n        currentSelectedRowKeys: args.addedItemKeys.slice(0),\n        currentDeselectedRowKeys: args.removedItemKeys.slice(0)\n      };\n    }\n    that._fireSelectionChanged(selectionChangedOptions);\n  }\n  getChangedItemIndexes(items) {\n    const that = this;\n    const itemIndexes = [];\n    const isDeferredSelection = this.option(\"selection.deferred\");\n    for (let i = 0, {\n        length: length\n      } = items; i < length; i++) {\n      const row = items[i];\n      const isItemSelected = that.isRowSelected(isDeferredSelection ? row.data : row.key);\n      if (that._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\n        itemIndexes.push(i);\n      }\n    }\n    return itemIndexes;\n  }\n  callbackNames() {\n    return [\"selectionChanged\"];\n  }\n  optionChanged(args) {\n    var _this$_selection;\n    super.optionChanged(args);\n    const selectionOptionsExists = !!(null !== (_this$_selection = this._selection) && void 0 !== _this$_selection && _this$_selection.options);\n    switch (args.name) {\n      case \"selection\":\n        {\n          const oldSelectionMode = this._selectionMode;\n          this.init();\n          if (selectionOptionsExists && \"selection.sensitivity\" === args.fullName) {\n            this._selection.options.sensitivity = args.value;\n          }\n          if (\"selection.showCheckBoxesMode\" !== args.fullName) {\n            const selectionMode = this._selectionMode;\n            let selectedRowKeys = this.option(\"selectedRowKeys\");\n            if (oldSelectionMode !== selectionMode) {\n              if (\"single\" === selectionMode) {\n                if (selectedRowKeys.length > 1) {\n                  selectedRowKeys = [selectedRowKeys[0]];\n                }\n              } else if (\"multiple\" !== selectionMode) {\n                selectedRowKeys = [];\n              }\n            }\n            this.selectRows(selectedRowKeys).always(() => {\n              this._fireSelectionChanged();\n            });\n          }\n          this._columnsController.updateColumns();\n          args.handled = true;\n          break;\n        }\n      case \"selectionFilter\":\n        this._selection.selectionFilter(args.value);\n        args.handled = true;\n        break;\n      case \"selectedRowKeys\":\n        {\n          const value = args.value || [];\n          if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\n            this.selectRows(value);\n          }\n          args.handled = true;\n          break;\n        }\n    }\n  }\n  publicMethods() {\n    return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"];\n  }\n  isRowSelected(arg) {\n    return this._selection.isItemSelected(arg);\n  }\n  isSelectColumnVisible() {\n    return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n  }\n  _isOnePageSelectAll() {\n    return \"page\" === this.option(\"selection.selectAllMode\");\n  }\n  isSelectAll() {\n    return this._selection.getSelectAllState(this._isOnePageSelectAll());\n  }\n  selectAll() {\n    if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n      this.startSelectionWithCheckboxes();\n    }\n    return this._selection.selectAll(this._isOnePageSelectAll());\n  }\n  deselectAll() {\n    return this._selection.deselectAll(this._isOnePageSelectAll());\n  }\n  clearSelection() {\n    return this.selectedItemKeys([]);\n  }\n  refresh() {\n    const selectedRowKeys = this.option(\"selectedRowKeys\") ?? [];\n    if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\n      return this.selectedItemKeys(selectedRowKeys);\n    }\n    return new Deferred().resolve().promise();\n  }\n  selectedItemKeys(value, preserve, isDeselect, isSelectAll) {\n    return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll);\n  }\n  getSelectedRowKeys(mode) {\n    return this._selection.getSelectedItemKeys();\n  }\n  selectRows(keys, preserve) {\n    return this.selectedItemKeys(keys, preserve);\n  }\n  deselectRows(keys) {\n    return this.selectedItemKeys(keys, true, true);\n  }\n  selectRowsByIndexes(indexes) {\n    const items = this._dataController.items();\n    const keys = [];\n    if (!Array.isArray(indexes)) {\n      indexes = Array.prototype.slice.call(arguments, 0);\n    }\n    each(indexes, function () {\n      const item = items[this];\n      if (item && \"data\" === item.rowType) {\n        keys.push(item.key);\n      }\n    });\n    return this.selectRows(keys);\n  }\n  getSelectedRowsData(mode) {\n    return this._selection.getSelectedItems();\n  }\n  loadSelectedItemsWithFilter() {\n    return this._selection.loadSelectedItemsWithFilter();\n  }\n  changeItemSelection(visibleItemIndex, keys, setFocusOnly) {\n    keys = keys || {};\n    if (this.isSelectionWithCheckboxes()) {\n      keys.control = true;\n    }\n    const loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\n    return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly);\n  }\n  focusedItemIndex(itemIndex) {\n    const that = this;\n    if (isDefined(itemIndex)) {\n      that._selection._focusedItemIndex = itemIndex;\n    } else {\n      return that._selection._focusedItemIndex;\n    }\n    return;\n  }\n  isSelectionWithCheckboxes() {\n    return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n  }\n  startSelectionWithCheckboxes() {\n    const that = this;\n    if (\"multiple\" === that.option(SELECTION_MODE) && !that.isSelectionWithCheckboxes()) {\n      that._isSelectionWithCheckboxes = true;\n      that._updateSelectColumn();\n      return true;\n    }\n    return false;\n  }\n  stopSelectionWithCheckboxes() {\n    const that = this;\n    if (that._isSelectionWithCheckboxes) {\n      that._isSelectionWithCheckboxes = false;\n      that._updateSelectColumn();\n      return true;\n    }\n    return false;\n  }\n}\nexport const dataSelectionExtenderMixin = Base => class extends Base {\n  init() {\n    const isDeferredMode = this.option(\"selection.deferred\");\n    super.init.apply(this, arguments);\n    if (isDeferredMode) {\n      this._selectionController._updateCheckboxesState({\n        isDeferredMode: true,\n        selectionFilter: this.option(\"selectionFilter\")\n      });\n    }\n  }\n  _loadDataSource() {\n    const that = this;\n    return super._loadDataSource().always(() => {\n      that._selectionController.refresh();\n    });\n  }\n  _processDataItem(item, options) {\n    const hasSelectColumn = this._selectionController.isSelectColumnVisible();\n    const isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\n    const dataItem = super._processDataItem.apply(this, arguments);\n    dataItem.isSelected = this._selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\n    if (hasSelectColumn && dataItem.values) {\n      for (let i = 0; i < options.visibleColumns.length; i++) {\n        if (\"select\" === options.visibleColumns[i].command) {\n          dataItem.values[i] = dataItem.isSelected;\n          break;\n        }\n      }\n    }\n    return dataItem;\n  }\n  refresh(options) {\n    const that = this;\n    const d = new Deferred();\n    super.refresh.apply(this, arguments).done(() => {\n      if (!options || options.selection) {\n        that._selectionController.refresh().done(d.resolve).fail(d.reject);\n      } else {\n        d.resolve();\n      }\n    }).fail(d.reject);\n    return d.promise();\n  }\n  _handleDataChanged(e) {\n    const hasLoadOperation = this.hasLoadOperation();\n    super._handleDataChanged.apply(this, arguments);\n    if (hasLoadOperation && !this._repaintChangesOnly) {\n      this._selectionController.focusedItemIndex(-1);\n    }\n  }\n  _applyChange(change) {\n    if (change && \"updateSelection\" === change.changeType) {\n      change.items.forEach((item, index) => {\n        const currentItem = this._items[index];\n        if (currentItem) {\n          currentItem.isSelected = item.isSelected;\n          currentItem.values = item.values;\n        }\n      });\n      return;\n    }\n    return super._applyChange.apply(this, arguments);\n  }\n  _endUpdateCore() {\n    const changes = this._changes;\n    const isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\n    if (isUpdateSelection) {\n      const itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\n      this._changes = [{\n        changeType: \"updateSelection\",\n        itemIndexes: itemIndexes\n      }];\n    }\n    super._endUpdateCore.apply(this, arguments);\n  }\n};\nconst contextMenu = Base => class extends Base {\n  _contextMenuPrepared(options) {\n    const dxEvent = options.event;\n    if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\n      return;\n    }\n    processLongTap(this, dxEvent);\n  }\n};\nexport const columnHeadersSelectionExtenderMixin = Base => class extends Base {\n  init() {\n    super.init();\n    this._selectionController.selectionChanged.add(this._updateSelectAllValue.bind(this));\n  }\n  _updateSelectAllValue() {\n    const that = this;\n    const $element = that.element();\n    const $editor = $element && $element.find(\".dx-select-checkbox\");\n    if ($element && $editor.length && \"multiple\" === that.option(\"selection.mode\")) {\n      const selectAllValue = that._selectionController.isSelectAll();\n      const hasSelection = false !== selectAllValue;\n      const isVisible = that.option(\"selection.allowSelectAll\") ? !that._dataController.isEmpty() : hasSelection;\n      $editor.dxCheckBox(\"instance\").option({\n        visible: isVisible,\n        value: selectAllValue\n      });\n    }\n  }\n  _handleDataChanged(e) {\n    super._handleDataChanged(e);\n    if (!e || \"refresh\" === e.changeType || e.repaintChangesOnly && \"update\" === e.changeType) {\n      this.waitAsyncTemplates().done(() => {\n        this._updateSelectAllValue();\n      });\n    }\n  }\n  _renderSelectAllCheckBox($container, column) {\n    const that = this;\n    const isEmptyData = that._dataController.isEmpty();\n    const groupElement = $(\"<div>\").appendTo($container).addClass(\"dx-select-checkbox\");\n    that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), groupElement);\n    that._editorFactoryController.createEditor(groupElement, extend({}, column, {\n      parentType: \"headerRow\",\n      dataType: \"boolean\",\n      value: this._selectionController.isSelectAll(),\n      editorOptions: {\n        visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== this._selectionController.isSelectAll())\n      },\n      tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\n      setValue: (value, e) => {\n        const allowSelectAll = that.option(\"selection.allowSelectAll\");\n        e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\n        if (!e.event || this._selectionController.isSelectAll() === value) {\n          return;\n        }\n        if (e.value && !allowSelectAll) {\n          e.component.option(\"value\", false);\n        } else {\n          e.value ? this._selectionController.selectAll() : this._selectionController.deselectAll();\n        }\n        e.event.preventDefault();\n      }\n    }));\n    return groupElement;\n  }\n  _attachSelectAllCheckBoxClickEvent($element) {\n    eventsEngine.on($element, clickEventName, this.createAction(e => {\n      const {\n        event: event\n      } = e;\n      if (!$(event.target).closest(\".dx-select-checkbox\").length) {\n        eventsEngine.trigger($(event.currentTarget).children(\".dx-select-checkbox\"), clickEventName);\n      }\n      event.preventDefault();\n    }));\n  }\n};\nexport const rowsViewSelectionExtenderMixin = Base => class extends Base {\n  renderSelectCheckBoxContainer($container, options) {\n    if (\"data\" === options.rowType && !options.row.isNewRow) {\n      $container.addClass(\"dx-editor-cell\");\n      this._attachCheckBoxClickEvent($container);\n      this._renderSelectCheckBox($container, options);\n    } else {\n      gridCoreUtils.setEmptyText($container);\n    }\n  }\n  _renderSelectCheckBox(container, options) {\n    const groupElement = $(\"<div>\").addClass(\"dx-select-checkbox\").appendTo(container);\n    this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), groupElement);\n    this._editorFactoryController.createEditor(groupElement, extend({}, options.column, {\n      parentType: \"dataRow\",\n      dataType: \"boolean\",\n      lookup: null,\n      value: options.value,\n      setValue(value, e) {\n        var _e$event;\n        if (\"keydown\" === (null === e || void 0 === e || null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\n          eventsEngine.trigger(e.element, clickEventName, e);\n        }\n      },\n      row: options.row\n    }));\n    return groupElement;\n  }\n  _attachCheckBoxClickEvent($element) {\n    eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n      const {\n        event: event\n      } = e;\n      const rowIndex = this.getRowIndex($(event.currentTarget).closest(\".dx-row\"));\n      if (rowIndex >= 0) {\n        this._selectionController.startSelectionWithCheckboxes();\n        this._selectionController.changeItemSelection(rowIndex, {\n          shift: event.shiftKey\n        });\n        if ($(event.target).closest(\".dx-select-checkbox\").length) {\n          this._dataController.updateItems({\n            changeType: \"updateSelection\",\n            itemIndexes: [rowIndex]\n          });\n        }\n      }\n    }));\n  }\n  _update(change) {\n    const that = this;\n    const tableElements = that.getTableElements();\n    if (\"updateSelection\" === change.changeType) {\n      if (tableElements.length > 0) {\n        each(tableElements, (_, tableElement) => {\n          each(change.itemIndexes || [], (_, index) => {\n            let $row;\n            if (change.items[index]) {\n              $row = that._getRowElements($(tableElement)).eq(index);\n              if ($row.length) {\n                const {\n                  isSelected: isSelected\n                } = change.items[index];\n                $row.toggleClass(\"dx-selection\", void 0 === isSelected ? false : isSelected).find(\".dx-select-checkbox\").dxCheckBox(\"option\", \"value\", isSelected);\n                that.setAria(\"selected\", isSelected, $row);\n              }\n            }\n          });\n        });\n        that._updateCheckboxesClass();\n      }\n    } else {\n      super._update(change);\n    }\n  }\n  _createTable() {\n    const that = this;\n    const selectionMode = that.option(\"selection.mode\");\n    const $table = super._createTable.apply(that, arguments);\n    if (\"none\" !== selectionMode) {\n      if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !supportUtils.touch) {\n        eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".dx-data-row\", that.createAction(e => {\n          processLongTap(that.component, e.event);\n          e.event.stopPropagation();\n        }));\n      }\n      eventsEngine.on($table, \"mousedown selectstart\", that.createAction(e => {\n        const {\n          event: event\n        } = e;\n        if (event.shiftKey) {\n          event.preventDefault();\n        }\n      }));\n    }\n    return $table;\n  }\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    if (row) {\n      const {\n        isSelected: isSelected\n      } = row;\n      if (isSelected) {\n        $row.addClass(\"dx-selection\");\n      }\n      const selectionMode = this.option(SELECTION_MODE);\n      if (\"none\" !== selectionMode) {\n        this.setAria(\"selected\", isSelected, $row);\n      }\n    }\n    return $row;\n  }\n  _rowClickForTreeList(e) {\n    super._rowClick(e);\n  }\n  _rowClick(e) {\n    const that = this;\n    const dxEvent = e.event;\n    const isSelectionDisabled = $(dxEvent.target).closest(\".dx-selection-disabled\").length;\n    if (!that.isClickableElement($(dxEvent.target))) {\n      if (!isSelectionDisabled && (\"multiple\" !== that.option(SELECTION_MODE) || \"always\" !== that.option(SHOW_CHECKBOXES_MODE))) {\n        if (that._selectionController.changeItemSelection(e.rowIndex, {\n          control: isCommandKeyPressed(dxEvent),\n          shift: dxEvent.shiftKey\n        })) {\n          dxEvent.preventDefault();\n          e.handled = true;\n        }\n      }\n      super._rowClick(e);\n    }\n  }\n  isClickableElement($target) {\n    const isCommandSelect = $target.closest(\".dx-command-select\").length;\n    return !!isCommandSelect;\n  }\n  _renderCore(change) {\n    const deferred = super._renderCore(change);\n    this._updateCheckboxesClass();\n    return deferred;\n  }\n  _updateCheckboxesClass() {\n    const tableElements = this.getTableElements();\n    const isCheckBoxesHidden = this._selectionController.isSelectColumnVisible() && !this._selectionController.isSelectionWithCheckboxes();\n    each(tableElements, (_, tableElement) => {\n      $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);\n    });\n  }\n};\nexport const selectionModule = {\n  defaultOptions: () => ({\n    selection: {\n      mode: \"none\",\n      showCheckBoxesMode: \"onClick\",\n      allowSelectAll: true,\n      selectAllMode: \"allPages\",\n      deferred: false,\n      maxFilterLengthInRequest: 1500,\n      alwaysSelectByShift: false\n    },\n    selectionFilter: [],\n    selectedRowKeys: []\n  }),\n  controllers: {\n    selection: SelectionController\n  },\n  extenders: {\n    controllers: {\n      data: dataSelectionExtenderMixin,\n      contextMenu: contextMenu\n    },\n    views: {\n      columnHeadersView: columnHeadersSelectionExtenderMixin,\n      rowsView: rowsViewSelectionExtenderMixin\n    }\n  }\n};","map":{"version":3,"names":["name","clickEventName","eventsEngine","holdEvent","addNamespace","isCommandKeyPressed","messageLocalization","applyBatch","$","equalByValue","Deferred","extend","each","isDefined","errors","supportUtils","Selection","modules","gridCoreUtils","EDITOR_CELL_CLASS","ROW_CLASS","ROW_SELECTION_CLASS","SELECT_CHECKBOX_CLASS","CHECKBOXES_HIDDEN_CLASS","COMMAND_SELECT_CLASS","SELECTION_DISABLED_CLASS","DATA_ROW_CLASS","SHOW_CHECKBOXES_MODE","SELECTION_MODE","processLongTap","that","dxEvent","rowsView","getView","selectionController","getController","$row","target","closest","rowIndex","getRowIndex","option","isSelectionWithCheckboxes","stopSelectionWithCheckboxes","startSelectionWithCheckboxes","changeItemSelection","control","isSeveralRowsSelected","selectionFilter","keyIndex","store","_dataController","key","isComplexKey","Array","isArray","length","i","selectionCellTemplate","container","options","component","value","isRowSelected","row","renderSelectCheckBoxContainer","selectionHeaderTemplate","column","$cellElement","columnHeadersView","addClass","_renderSelectAllCheckBox","_attachSelectAllCheckBoxClickEvent","SelectionController","Controller","init","deferred","selectAllMode","mode","log","_columnsController","_stateStoringController","_selectionMode","_isSelectionWithCheckboxes","_selection","_createSelection","_updateSelectColumn","createAction","excludeValidators","_dataPushedHandler","_handleDataPushed","bind","pushed","add","changes","_deselectRemovedOnPush","_updateSelectedOnPush","isDeferredSelection","removedKeys","filter","change","type","map","selectedKeys","items","item","isSelected","find","selectedKey","deselectRows","updateChanges","data","getSelectedRowsData","keyInfo","_getSelectionConfig","dataController","columnsController","selectionOptions","scrollingMode","virtualPaging","allowSelectAll","legacyScrollingMode","alwaysSelectByShift","maxFilterLengthInRequest","ignoreDisabledItems","isVirtualPaging","sensitivity","allowLoadByRange","hasGroupColumns","getGroupColumns","keyOf","dataFields","_dataController$dataS","dataSource","select","load","_dataController$dataS2","resolve","plainItems","cached","isItemSelected","selected","isSelectableItem","rowType","isNewRow","getItemData","oldData","getCombinedFilter","totalCount","getLoadOptions","loadItemIndex","focusedItemIndex","shiftItemIndex","_dataController$dataS3","sort","lastLoadOptions","minIndex","Math","min","maxIndex","max","take","skip","onSelectionChanged","_updateSelectedItems","isSelectColumnVisible","addCommandColumn","command","visible","visibleIndex","dataType","alignment","cssClass","width","cellTemplate","headerCellTemplate","columnOption","_fireSelectionChanged","argument","selectedRowKeys","selectionChanged","fire","executeAction","_updateCheckboxesState","isDeferredMode","selectedItemKeys","removedItemKeys","args","selectionChangedOptions","visibleItems","changedItemIndexes","getChangedItemIndexes","visibleChangedItemIndexes","updateItems","changeType","itemIndexes","addedItemKeys","_selectedItemsInternalChange","slice","selectedRowsData","selectedItems","currentSelectedRowKeys","currentDeselectedRowKeys","isDataItem","push","callbackNames","optionChanged","_this$_selection","selectionOptionsExists","oldSelectionMode","fullName","selectionMode","selectRows","always","updateColumns","handled","getDataSource","publicMethods","arg","_isOnePageSelectAll","isSelectAll","getSelectAllState","selectAll","deselectAll","clearSelection","refresh","promise","preserve","isDeselect","getSelectedRowKeys","getSelectedItemKeys","keys","selectRowsByIndexes","indexes","prototype","call","arguments","getSelectedItems","loadSelectedItemsWithFilter","visibleItemIndex","setFocusOnly","loadedItemIndex","getRowIndexOffset","itemIndex","_focusedItemIndex","dataSelectionExtenderMixin","Base","apply","_selectionController","_loadDataSource","_processDataItem","hasSelectColumn","dataItem","values","visibleColumns","d","done","selection","fail","reject","_handleDataChanged","e","hasLoadOperation","_repaintChangesOnly","_applyChange","forEach","index","currentItem","_items","_endUpdateCore","_changes","isUpdateSelection","every","reduce","a","b","concat","contextMenu","_contextMenuPrepared","event","originalEvent","columnHeadersSelectionExtenderMixin","_updateSelectAllValue","$element","element","$editor","selectAllValue","hasSelection","isVisible","isEmpty","dxCheckBox","repaintChangesOnly","waitAsyncTemplates","$container","isEmptyData","groupElement","appendTo","setAria","format","_editorFactoryController","createEditor","parentType","editorOptions","tabIndex","setValue","preventDefault","on","trigger","currentTarget","children","rowsViewSelectionExtenderMixin","_attachCheckBoxClickEvent","_renderSelectCheckBox","setEmptyText","lookup","_e$event","shift","shiftKey","_update","tableElements","getTableElements","_","tableElement","_getRowElements","eq","toggleClass","_updateCheckboxesClass","_createTable","$table","touch","stopPropagation","_createRow","_rowClickForTreeList","_rowClick","isSelectionDisabled","isClickableElement","$target","isCommandSelect","_renderCore","isCheckBoxesHidden","selectionModule","defaultOptions","showCheckBoxesMode","controllers","extenders","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/selection/m_selection.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/selection/m_selection.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport holdEvent from \"../../../../common/core/events/hold\";\r\nimport {\r\n    addNamespace,\r\n    isCommandKeyPressed\r\n} from \"../../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport {\r\n    applyBatch\r\n} from \"../../../../common/data/array_utils\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport supportUtils from \"../../../core/utils/m_support\";\r\nimport Selection from \"../../../ui/selection/m_selection\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nconst EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nconst ROW_CLASS = \"dx-row\";\r\nconst ROW_SELECTION_CLASS = \"dx-selection\";\r\nconst SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nconst CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\r\nconst COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nconst SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\r\nconst DATA_ROW_CLASS = \"dx-data-row\";\r\nconst SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\r\nconst SELECTION_MODE = \"selection.mode\";\r\nconst processLongTap = function(that, dxEvent) {\r\n    const rowsView = that.getView(\"rowsView\");\r\n    const selectionController = that.getController(\"selection\");\r\n    const $row = $(dxEvent.target).closest(\".dx-data-row\");\r\n    const rowIndex = rowsView.getRowIndex($row);\r\n    if (rowIndex < 0) {\r\n        return\r\n    }\r\n    if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n        if (selectionController.isSelectionWithCheckboxes()) {\r\n            selectionController.stopSelectionWithCheckboxes()\r\n        } else {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n    } else {\r\n        if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n        if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.changeItemSelection(rowIndex, {\r\n                control: true\r\n            })\r\n        }\r\n    }\r\n};\r\nconst isSeveralRowsSelected = function(that, selectionFilter) {\r\n    let keyIndex = 0;\r\n    const store = that._dataController.store();\r\n    const key = store && store.key();\r\n    const isComplexKey = Array.isArray(key);\r\n    if (!selectionFilter.length) {\r\n        return false\r\n    }\r\n    if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\r\n        for (let i = 0; i < selectionFilter.length; i++) {\r\n            if (Array.isArray(selectionFilter[i])) {\r\n                if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\r\n                    return true\r\n                }\r\n                keyIndex++\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    return key !== selectionFilter[0]\r\n};\r\nconst selectionCellTemplate = (container, options) => {\r\n    const {\r\n        component: component\r\n    } = options;\r\n    const rowsView = component.getView(\"rowsView\");\r\n    if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\r\n        options.value = component.isRowSelected(options.row.key)\r\n    }\r\n    rowsView.renderSelectCheckBoxContainer($(container), options)\r\n};\r\nconst selectionHeaderTemplate = (container, options) => {\r\n    const {\r\n        column: column\r\n    } = options;\r\n    const $cellElement = $(container);\r\n    const columnHeadersView = options.component.getView(\"columnHeadersView\");\r\n    $cellElement.addClass(\"dx-editor-cell\");\r\n    columnHeadersView._renderSelectAllCheckBox($cellElement, column);\r\n    columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement)\r\n};\r\nexport class SelectionController extends modules.Controller {\r\n    init() {\r\n        const {\r\n            deferred: deferred,\r\n            selectAllMode: selectAllMode,\r\n            mode: mode\r\n        } = this.option(\"selection\") ?? {};\r\n        if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\r\n            errors.log(\"W1018\")\r\n        }\r\n        this._dataController = this.getController(\"data\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._stateStoringController = this.getController(\"stateStoring\");\r\n        this._selectionMode = mode;\r\n        this._isSelectionWithCheckboxes = false;\r\n        this._selection = this._createSelection();\r\n        this._updateSelectColumn();\r\n        this.createAction(\"onSelectionChanged\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        if (!this._dataPushedHandler) {\r\n            this._dataPushedHandler = this._handleDataPushed.bind(this);\r\n            this._dataController.pushed.add(this._dataPushedHandler)\r\n        }\r\n    }\r\n    _handleDataPushed(changes) {\r\n        this._deselectRemovedOnPush(changes);\r\n        this._updateSelectedOnPush(changes)\r\n    }\r\n    _deselectRemovedOnPush(changes) {\r\n        const isDeferredSelection = this.option(\"selection.deferred\");\r\n        let removedKeys = changes.filter((change => \"remove\" === change.type)).map((change => change.key));\r\n        if (isDeferredSelection) {\r\n            const selectedKeys = this._dataController.items().filter((item => item.isSelected)).map((item => item.key));\r\n            removedKeys = removedKeys.filter((key => selectedKeys.find((selectedKey => equalByValue(selectedKey, key)))))\r\n        }\r\n        removedKeys.length && this.deselectRows(removedKeys)\r\n    }\r\n    _updateSelectedOnPush(changes) {\r\n        const isDeferredSelection = this.option(\"selection.deferred\");\r\n        if (isDeferredSelection) {\r\n            return\r\n        }\r\n        const updateChanges = changes.filter((change => \"update\" === change.type));\r\n        const data = this.getSelectedRowsData();\r\n        applyBatch({\r\n            keyInfo: this._selection.options,\r\n            data: data,\r\n            changes: updateChanges\r\n        })\r\n    }\r\n    _getSelectionConfig() {\r\n        const dataController = this._dataController;\r\n        const columnsController = this._columnsController;\r\n        const selectionOptions = this.option(\"selection\") ?? {};\r\n        const {\r\n            deferred: deferred\r\n        } = selectionOptions;\r\n        const scrollingMode = this.option(\"scrolling.mode\");\r\n        const virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\r\n        const allowSelectAll = this.option(\"selection.allowSelectAll\");\r\n        const legacyScrollingMode = this.option(\"scrolling.legacyMode\");\r\n        return {\r\n            selectedKeys: this.option(\"selectedRowKeys\"),\r\n            mode: this._selectionMode,\r\n            deferred: deferred,\r\n            alwaysSelectByShift: selectionOptions.alwaysSelectByShift,\r\n            maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\r\n            selectionFilter: this.option(\"selectionFilter\"),\r\n            ignoreDisabledItems: true,\r\n            isVirtualPaging: virtualPaging,\r\n            sensitivity: this.option(\"selection.sensitivity\"),\r\n            allowLoadByRange() {\r\n                const hasGroupColumns = columnsController.getGroupColumns().length > 0;\r\n                return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred\r\n            },\r\n            key: () => null === dataController || void 0 === dataController ? void 0 : dataController.key(),\r\n            keyOf: item => null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item),\r\n            dataFields() {\r\n                var _dataController$dataS;\r\n                return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select()\r\n            },\r\n            load(options) {\r\n                var _dataController$dataS2;\r\n                return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || (new Deferred).resolve([])\r\n            },\r\n            plainItems: cached => dataController.items(true),\r\n            isItemSelected: item => item.selected,\r\n            isSelectableItem: item => \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow,\r\n            getItemData: item => isDefined(null === item || void 0 === item ? void 0 : item.rowType) ? (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) : item,\r\n            filter: () => dataController.getCombinedFilter(deferred),\r\n            totalCount: () => dataController.totalCount(),\r\n            getLoadOptions(loadItemIndex, focusedItemIndex, shiftItemIndex) {\r\n                var _dataController$dataS3;\r\n                const {\r\n                    sort: sort,\r\n                    filter: filter\r\n                } = (null === (_dataController$dataS3 = dataController.dataSource()) || void 0 === _dataController$dataS3 ? void 0 : _dataController$dataS3.lastLoadOptions()) ?? {};\r\n                let minIndex = Math.min(loadItemIndex, focusedItemIndex);\r\n                let maxIndex = Math.max(loadItemIndex, focusedItemIndex);\r\n                if (isDefined(shiftItemIndex)) {\r\n                    minIndex = Math.min(shiftItemIndex, minIndex);\r\n                    maxIndex = Math.max(shiftItemIndex, maxIndex)\r\n                }\r\n                const take = maxIndex - minIndex + 1;\r\n                return {\r\n                    skip: minIndex,\r\n                    take: take,\r\n                    filter: filter,\r\n                    sort: sort\r\n                }\r\n            },\r\n            onSelectionChanged: this._updateSelectedItems.bind(this)\r\n        }\r\n    }\r\n    _updateSelectColumn() {\r\n        const columnsController = this._columnsController;\r\n        const isSelectColumnVisible = this.isSelectColumnVisible();\r\n        columnsController.addCommandColumn({\r\n            type: \"selection\",\r\n            command: \"select\",\r\n            visible: isSelectColumnVisible,\r\n            visibleIndex: -1,\r\n            dataType: \"boolean\",\r\n            alignment: \"center\",\r\n            cssClass: \"dx-command-select\",\r\n            width: \"auto\",\r\n            cellTemplate: selectionCellTemplate,\r\n            headerCellTemplate: selectionHeaderTemplate\r\n        });\r\n        columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible)\r\n    }\r\n    _createSelection() {\r\n        const options = this._getSelectionConfig();\r\n        return new Selection(options)\r\n    }\r\n    _fireSelectionChanged(options) {\r\n        const argument = this.option(\"selection.deferred\") ? {\r\n            selectionFilter: this.option(\"selectionFilter\")\r\n        } : {\r\n            selectedRowKeys: this.option(\"selectedRowKeys\")\r\n        };\r\n        this.selectionChanged.fire(argument);\r\n        if (options) {\r\n            this.executeAction(\"onSelectionChanged\", options)\r\n        }\r\n    }\r\n    _updateCheckboxesState(options) {\r\n        const {\r\n            isDeferredMode: isDeferredMode\r\n        } = options;\r\n        const {\r\n            selectionFilter: selectionFilter\r\n        } = options;\r\n        const {\r\n            selectedItemKeys: selectedItemKeys\r\n        } = options;\r\n        const {\r\n            removedItemKeys: removedItemKeys\r\n        } = options;\r\n        if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n            if (isDeferredMode ? selectionFilter && isSeveralRowsSelected(this, selectionFilter) : selectedItemKeys.length > 1) {\r\n                this.startSelectionWithCheckboxes()\r\n            } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\r\n                this.stopSelectionWithCheckboxes()\r\n            }\r\n        }\r\n    }\r\n    _updateSelectedItems(args) {\r\n        const that = this;\r\n        let selectionChangedOptions;\r\n        const isDeferredMode = that.option(\"selection.deferred\");\r\n        const selectionFilter = that._selection.selectionFilter();\r\n        const dataController = that._dataController;\r\n        const items = dataController.items(true);\r\n        const visibleItems = dataController.items();\r\n        if (!items) {\r\n            return\r\n        }\r\n        const isSelectionWithCheckboxes = that.isSelectionWithCheckboxes();\r\n        const changedItemIndexes = that.getChangedItemIndexes(items);\r\n        const visibleChangedItemIndexes = that.getChangedItemIndexes(visibleItems);\r\n        that._updateCheckboxesState({\r\n            selectedItemKeys: args.selectedItemKeys,\r\n            removedItemKeys: args.removedItemKeys,\r\n            selectionFilter: selectionFilter,\r\n            isDeferredMode: isDeferredMode\r\n        });\r\n        if (changedItemIndexes.length || isSelectionWithCheckboxes !== that.isSelectionWithCheckboxes()) {\r\n            dataController.updateItems({\r\n                changeType: \"updateSelection\",\r\n                itemIndexes: visibleChangedItemIndexes\r\n            })\r\n        }\r\n        if (isDeferredMode) {\r\n            that.option(\"selectionFilter\", selectionFilter);\r\n            selectionChangedOptions = {}\r\n        } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\r\n            that._selectedItemsInternalChange = true;\r\n            that.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\r\n            that._selectedItemsInternalChange = false;\r\n            selectionChangedOptions = {\r\n                selectedRowsData: args.selectedItems.slice(0),\r\n                selectedRowKeys: args.selectedItemKeys.slice(0),\r\n                currentSelectedRowKeys: args.addedItemKeys.slice(0),\r\n                currentDeselectedRowKeys: args.removedItemKeys.slice(0)\r\n            }\r\n        }\r\n        that._fireSelectionChanged(selectionChangedOptions)\r\n    }\r\n    getChangedItemIndexes(items) {\r\n        const that = this;\r\n        const itemIndexes = [];\r\n        const isDeferredSelection = this.option(\"selection.deferred\");\r\n        for (let i = 0, {\r\n                length: length\r\n            } = items; i < length; i++) {\r\n            const row = items[i];\r\n            const isItemSelected = that.isRowSelected(isDeferredSelection ? row.data : row.key);\r\n            if (that._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\r\n                itemIndexes.push(i)\r\n            }\r\n        }\r\n        return itemIndexes\r\n    }\r\n    callbackNames() {\r\n        return [\"selectionChanged\"]\r\n    }\r\n    optionChanged(args) {\r\n        var _this$_selection;\r\n        super.optionChanged(args);\r\n        const selectionOptionsExists = !!(null !== (_this$_selection = this._selection) && void 0 !== _this$_selection && _this$_selection.options);\r\n        switch (args.name) {\r\n            case \"selection\": {\r\n                const oldSelectionMode = this._selectionMode;\r\n                this.init();\r\n                if (selectionOptionsExists && \"selection.sensitivity\" === args.fullName) {\r\n                    this._selection.options.sensitivity = args.value\r\n                }\r\n                if (\"selection.showCheckBoxesMode\" !== args.fullName) {\r\n                    const selectionMode = this._selectionMode;\r\n                    let selectedRowKeys = this.option(\"selectedRowKeys\");\r\n                    if (oldSelectionMode !== selectionMode) {\r\n                        if (\"single\" === selectionMode) {\r\n                            if (selectedRowKeys.length > 1) {\r\n                                selectedRowKeys = [selectedRowKeys[0]]\r\n                            }\r\n                        } else if (\"multiple\" !== selectionMode) {\r\n                            selectedRowKeys = []\r\n                        }\r\n                    }\r\n                    this.selectRows(selectedRowKeys).always((() => {\r\n                        this._fireSelectionChanged()\r\n                    }))\r\n                }\r\n                this._columnsController.updateColumns();\r\n                args.handled = true;\r\n                break\r\n            }\r\n            case \"selectionFilter\":\r\n                this._selection.selectionFilter(args.value);\r\n                args.handled = true;\r\n                break;\r\n            case \"selectedRowKeys\": {\r\n                const value = args.value || [];\r\n                if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\r\n                    this.selectRows(value)\r\n                }\r\n                args.handled = true;\r\n                break\r\n            }\r\n        }\r\n    }\r\n    publicMethods() {\r\n        return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"]\r\n    }\r\n    isRowSelected(arg) {\r\n        return this._selection.isItemSelected(arg)\r\n    }\r\n    isSelectColumnVisible() {\r\n        return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n    }\r\n    _isOnePageSelectAll() {\r\n        return \"page\" === this.option(\"selection.selectAllMode\")\r\n    }\r\n    isSelectAll() {\r\n        return this._selection.getSelectAllState(this._isOnePageSelectAll())\r\n    }\r\n    selectAll() {\r\n        if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n            this.startSelectionWithCheckboxes()\r\n        }\r\n        return this._selection.selectAll(this._isOnePageSelectAll())\r\n    }\r\n    deselectAll() {\r\n        return this._selection.deselectAll(this._isOnePageSelectAll())\r\n    }\r\n    clearSelection() {\r\n        return this.selectedItemKeys([])\r\n    }\r\n    refresh() {\r\n        const selectedRowKeys = this.option(\"selectedRowKeys\") ?? [];\r\n        if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\r\n            return this.selectedItemKeys(selectedRowKeys)\r\n        }\r\n        return (new Deferred).resolve().promise()\r\n    }\r\n    selectedItemKeys(value, preserve, isDeselect, isSelectAll) {\r\n        return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll)\r\n    }\r\n    getSelectedRowKeys(mode) {\r\n        return this._selection.getSelectedItemKeys()\r\n    }\r\n    selectRows(keys, preserve) {\r\n        return this.selectedItemKeys(keys, preserve)\r\n    }\r\n    deselectRows(keys) {\r\n        return this.selectedItemKeys(keys, true, true)\r\n    }\r\n    selectRowsByIndexes(indexes) {\r\n        const items = this._dataController.items();\r\n        const keys = [];\r\n        if (!Array.isArray(indexes)) {\r\n            indexes = Array.prototype.slice.call(arguments, 0)\r\n        }\r\n        each(indexes, (function() {\r\n            const item = items[this];\r\n            if (item && \"data\" === item.rowType) {\r\n                keys.push(item.key)\r\n            }\r\n        }));\r\n        return this.selectRows(keys)\r\n    }\r\n    getSelectedRowsData(mode) {\r\n        return this._selection.getSelectedItems()\r\n    }\r\n    loadSelectedItemsWithFilter() {\r\n        return this._selection.loadSelectedItemsWithFilter()\r\n    }\r\n    changeItemSelection(visibleItemIndex, keys, setFocusOnly) {\r\n        keys = keys || {};\r\n        if (this.isSelectionWithCheckboxes()) {\r\n            keys.control = true\r\n        }\r\n        const loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\r\n        return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly)\r\n    }\r\n    focusedItemIndex(itemIndex) {\r\n        const that = this;\r\n        if (isDefined(itemIndex)) {\r\n            that._selection._focusedItemIndex = itemIndex\r\n        } else {\r\n            return that._selection._focusedItemIndex\r\n        }\r\n        return\r\n    }\r\n    isSelectionWithCheckboxes() {\r\n        return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n    }\r\n    startSelectionWithCheckboxes() {\r\n        const that = this;\r\n        if (\"multiple\" === that.option(SELECTION_MODE) && !that.isSelectionWithCheckboxes()) {\r\n            that._isSelectionWithCheckboxes = true;\r\n            that._updateSelectColumn();\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    stopSelectionWithCheckboxes() {\r\n        const that = this;\r\n        if (that._isSelectionWithCheckboxes) {\r\n            that._isSelectionWithCheckboxes = false;\r\n            that._updateSelectColumn();\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n}\r\nexport const dataSelectionExtenderMixin = Base => class extends Base {\r\n    init() {\r\n        const isDeferredMode = this.option(\"selection.deferred\");\r\n        super.init.apply(this, arguments);\r\n        if (isDeferredMode) {\r\n            this._selectionController._updateCheckboxesState({\r\n                isDeferredMode: true,\r\n                selectionFilter: this.option(\"selectionFilter\")\r\n            })\r\n        }\r\n    }\r\n    _loadDataSource() {\r\n        const that = this;\r\n        return super._loadDataSource().always((() => {\r\n            that._selectionController.refresh()\r\n        }))\r\n    }\r\n    _processDataItem(item, options) {\r\n        const hasSelectColumn = this._selectionController.isSelectColumnVisible();\r\n        const isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\r\n        const dataItem = super._processDataItem.apply(this, arguments);\r\n        dataItem.isSelected = this._selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\r\n        if (hasSelectColumn && dataItem.values) {\r\n            for (let i = 0; i < options.visibleColumns.length; i++) {\r\n                if (\"select\" === options.visibleColumns[i].command) {\r\n                    dataItem.values[i] = dataItem.isSelected;\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return dataItem\r\n    }\r\n    refresh(options) {\r\n        const that = this;\r\n        const d = new Deferred;\r\n        super.refresh.apply(this, arguments).done((() => {\r\n            if (!options || options.selection) {\r\n                that._selectionController.refresh().done(d.resolve).fail(d.reject)\r\n            } else {\r\n                d.resolve()\r\n            }\r\n        })).fail(d.reject);\r\n        return d.promise()\r\n    }\r\n    _handleDataChanged(e) {\r\n        const hasLoadOperation = this.hasLoadOperation();\r\n        super._handleDataChanged.apply(this, arguments);\r\n        if (hasLoadOperation && !this._repaintChangesOnly) {\r\n            this._selectionController.focusedItemIndex(-1)\r\n        }\r\n    }\r\n    _applyChange(change) {\r\n        if (change && \"updateSelection\" === change.changeType) {\r\n            change.items.forEach(((item, index) => {\r\n                const currentItem = this._items[index];\r\n                if (currentItem) {\r\n                    currentItem.isSelected = item.isSelected;\r\n                    currentItem.values = item.values\r\n                }\r\n            }));\r\n            return\r\n        }\r\n        return super._applyChange.apply(this, arguments)\r\n    }\r\n    _endUpdateCore() {\r\n        const changes = this._changes;\r\n        const isUpdateSelection = changes.length > 1 && changes.every((change => \"updateSelection\" === change.changeType));\r\n        if (isUpdateSelection) {\r\n            const itemIndexes = changes.map((change => change.itemIndexes || [])).reduce(((a, b) => a.concat(b)));\r\n            this._changes = [{\r\n                changeType: \"updateSelection\",\r\n                itemIndexes: itemIndexes\r\n            }]\r\n        }\r\n        super._endUpdateCore.apply(this, arguments)\r\n    }\r\n};\r\nconst contextMenu = Base => class extends Base {\r\n    _contextMenuPrepared(options) {\r\n        const dxEvent = options.event;\r\n        if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\r\n            return\r\n        }\r\n        processLongTap(this, dxEvent)\r\n    }\r\n};\r\nexport const columnHeadersSelectionExtenderMixin = Base => class extends Base {\r\n    init() {\r\n        super.init();\r\n        this._selectionController.selectionChanged.add(this._updateSelectAllValue.bind(this))\r\n    }\r\n    _updateSelectAllValue() {\r\n        const that = this;\r\n        const $element = that.element();\r\n        const $editor = $element && $element.find(\".dx-select-checkbox\");\r\n        if ($element && $editor.length && \"multiple\" === that.option(\"selection.mode\")) {\r\n            const selectAllValue = that._selectionController.isSelectAll();\r\n            const hasSelection = false !== selectAllValue;\r\n            const isVisible = that.option(\"selection.allowSelectAll\") ? !that._dataController.isEmpty() : hasSelection;\r\n            $editor.dxCheckBox(\"instance\").option({\r\n                visible: isVisible,\r\n                value: selectAllValue\r\n            })\r\n        }\r\n    }\r\n    _handleDataChanged(e) {\r\n        super._handleDataChanged(e);\r\n        if (!e || \"refresh\" === e.changeType || e.repaintChangesOnly && \"update\" === e.changeType) {\r\n            this.waitAsyncTemplates().done((() => {\r\n                this._updateSelectAllValue()\r\n            }))\r\n        }\r\n    }\r\n    _renderSelectAllCheckBox($container, column) {\r\n        const that = this;\r\n        const isEmptyData = that._dataController.isEmpty();\r\n        const groupElement = $(\"<div>\").appendTo($container).addClass(\"dx-select-checkbox\");\r\n        that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), groupElement);\r\n        that._editorFactoryController.createEditor(groupElement, extend({}, column, {\r\n            parentType: \"headerRow\",\r\n            dataType: \"boolean\",\r\n            value: this._selectionController.isSelectAll(),\r\n            editorOptions: {\r\n                visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== this._selectionController.isSelectAll())\r\n            },\r\n            tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\r\n            setValue: (value, e) => {\r\n                const allowSelectAll = that.option(\"selection.allowSelectAll\");\r\n                e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\r\n                if (!e.event || this._selectionController.isSelectAll() === value) {\r\n                    return\r\n                }\r\n                if (e.value && !allowSelectAll) {\r\n                    e.component.option(\"value\", false)\r\n                } else {\r\n                    e.value ? this._selectionController.selectAll() : this._selectionController.deselectAll()\r\n                }\r\n                e.event.preventDefault()\r\n            }\r\n        }));\r\n        return groupElement\r\n    }\r\n    _attachSelectAllCheckBoxClickEvent($element) {\r\n        eventsEngine.on($element, clickEventName, this.createAction((e => {\r\n            const {\r\n                event: event\r\n            } = e;\r\n            if (!$(event.target).closest(\".dx-select-checkbox\").length) {\r\n                eventsEngine.trigger($(event.currentTarget).children(\".dx-select-checkbox\"), clickEventName)\r\n            }\r\n            event.preventDefault()\r\n        })))\r\n    }\r\n};\r\nexport const rowsViewSelectionExtenderMixin = Base => class extends Base {\r\n    renderSelectCheckBoxContainer($container, options) {\r\n        if (\"data\" === options.rowType && !options.row.isNewRow) {\r\n            $container.addClass(\"dx-editor-cell\");\r\n            this._attachCheckBoxClickEvent($container);\r\n            this._renderSelectCheckBox($container, options)\r\n        } else {\r\n            gridCoreUtils.setEmptyText($container)\r\n        }\r\n    }\r\n    _renderSelectCheckBox(container, options) {\r\n        const groupElement = $(\"<div>\").addClass(\"dx-select-checkbox\").appendTo(container);\r\n        this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), groupElement);\r\n        this._editorFactoryController.createEditor(groupElement, extend({}, options.column, {\r\n            parentType: \"dataRow\",\r\n            dataType: \"boolean\",\r\n            lookup: null,\r\n            value: options.value,\r\n            setValue(value, e) {\r\n                var _e$event;\r\n                if (\"keydown\" === (null === e || void 0 === e || null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\r\n                    eventsEngine.trigger(e.element, clickEventName, e)\r\n                }\r\n            },\r\n            row: options.row\r\n        }));\r\n        return groupElement\r\n    }\r\n    _attachCheckBoxClickEvent($element) {\r\n        eventsEngine.on($element, clickEventName, this.createAction((function(e) {\r\n            const {\r\n                event: event\r\n            } = e;\r\n            const rowIndex = this.getRowIndex($(event.currentTarget).closest(\".dx-row\"));\r\n            if (rowIndex >= 0) {\r\n                this._selectionController.startSelectionWithCheckboxes();\r\n                this._selectionController.changeItemSelection(rowIndex, {\r\n                    shift: event.shiftKey\r\n                });\r\n                if ($(event.target).closest(\".dx-select-checkbox\").length) {\r\n                    this._dataController.updateItems({\r\n                        changeType: \"updateSelection\",\r\n                        itemIndexes: [rowIndex]\r\n                    })\r\n                }\r\n            }\r\n        })))\r\n    }\r\n    _update(change) {\r\n        const that = this;\r\n        const tableElements = that.getTableElements();\r\n        if (\"updateSelection\" === change.changeType) {\r\n            if (tableElements.length > 0) {\r\n                each(tableElements, ((_, tableElement) => {\r\n                    each(change.itemIndexes || [], ((_, index) => {\r\n                        let $row;\r\n                        if (change.items[index]) {\r\n                            $row = that._getRowElements($(tableElement)).eq(index);\r\n                            if ($row.length) {\r\n                                const {\r\n                                    isSelected: isSelected\r\n                                } = change.items[index];\r\n                                $row.toggleClass(\"dx-selection\", void 0 === isSelected ? false : isSelected).find(\".dx-select-checkbox\").dxCheckBox(\"option\", \"value\", isSelected);\r\n                                that.setAria(\"selected\", isSelected, $row)\r\n                            }\r\n                        }\r\n                    }))\r\n                }));\r\n                that._updateCheckboxesClass()\r\n            }\r\n        } else {\r\n            super._update(change)\r\n        }\r\n    }\r\n    _createTable() {\r\n        const that = this;\r\n        const selectionMode = that.option(\"selection.mode\");\r\n        const $table = super._createTable.apply(that, arguments);\r\n        if (\"none\" !== selectionMode) {\r\n            if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !supportUtils.touch) {\r\n                eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".dx-data-row\", that.createAction((e => {\r\n                    processLongTap(that.component, e.event);\r\n                    e.event.stopPropagation()\r\n                })))\r\n            }\r\n            eventsEngine.on($table, \"mousedown selectstart\", that.createAction((e => {\r\n                const {\r\n                    event: event\r\n                } = e;\r\n                if (event.shiftKey) {\r\n                    event.preventDefault()\r\n                }\r\n            })))\r\n        }\r\n        return $table\r\n    }\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (row) {\r\n            const {\r\n                isSelected: isSelected\r\n            } = row;\r\n            if (isSelected) {\r\n                $row.addClass(\"dx-selection\")\r\n            }\r\n            const selectionMode = this.option(SELECTION_MODE);\r\n            if (\"none\" !== selectionMode) {\r\n                this.setAria(\"selected\", isSelected, $row)\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n    _rowClickForTreeList(e) {\r\n        super._rowClick(e)\r\n    }\r\n    _rowClick(e) {\r\n        const that = this;\r\n        const dxEvent = e.event;\r\n        const isSelectionDisabled = $(dxEvent.target).closest(\".dx-selection-disabled\").length;\r\n        if (!that.isClickableElement($(dxEvent.target))) {\r\n            if (!isSelectionDisabled && (\"multiple\" !== that.option(SELECTION_MODE) || \"always\" !== that.option(SHOW_CHECKBOXES_MODE))) {\r\n                if (that._selectionController.changeItemSelection(e.rowIndex, {\r\n                        control: isCommandKeyPressed(dxEvent),\r\n                        shift: dxEvent.shiftKey\r\n                    })) {\r\n                    dxEvent.preventDefault();\r\n                    e.handled = true\r\n                }\r\n            }\r\n            super._rowClick(e)\r\n        }\r\n    }\r\n    isClickableElement($target) {\r\n        const isCommandSelect = $target.closest(\".dx-command-select\").length;\r\n        return !!isCommandSelect\r\n    }\r\n    _renderCore(change) {\r\n        const deferred = super._renderCore(change);\r\n        this._updateCheckboxesClass();\r\n        return deferred\r\n    }\r\n    _updateCheckboxesClass() {\r\n        const tableElements = this.getTableElements();\r\n        const isCheckBoxesHidden = this._selectionController.isSelectColumnVisible() && !this._selectionController.isSelectionWithCheckboxes();\r\n        each(tableElements, ((_, tableElement) => {\r\n            $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden)\r\n        }))\r\n    }\r\n};\r\nexport const selectionModule = {\r\n    defaultOptions: () => ({\r\n        selection: {\r\n            mode: \"none\",\r\n            showCheckBoxesMode: \"onClick\",\r\n            allowSelectAll: true,\r\n            selectAllMode: \"allPages\",\r\n            deferred: false,\r\n            maxFilterLengthInRequest: 1500,\r\n            alwaysSelectByShift: false\r\n        },\r\n        selectionFilter: [],\r\n        selectedRowKeys: []\r\n    }),\r\n    controllers: {\r\n        selection: SelectionController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: dataSelectionExtenderMixin,\r\n            contextMenu: contextMenu\r\n        },\r\n        views: {\r\n            columnHeadersView: columnHeadersSelectionExtenderMixin,\r\n            rowsView: rowsViewSelectionExtenderMixin\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}