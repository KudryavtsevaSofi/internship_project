{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editing/m_editing_row_based.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport { EDIT_FORM_CLASS, EDIT_MODE_ROW, EDIT_ROW, EDITING_EDITROWKEY_OPTION_NAME, MODES_WITH_DELAYED_FOCUS, ROW_SELECTED_CLASS } from \"./const\";\nconst editingControllerExtender = Base => class extends Base {\n  isRowEditMode() {\n    return this.getEditMode() === EDIT_MODE_ROW;\n  }\n  _afterCancelEditData(rowIndex) {\n    const dataController = this._dataController;\n    if (this.isRowBasedEditMode() && rowIndex >= 0) {\n      dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [rowIndex, rowIndex + 1]\n      });\n    } else {\n      super._afterCancelEditData(rowIndex);\n    }\n  }\n  _isDefaultButtonVisible(button, options) {\n    const isRowMode = this.isRowBasedEditMode();\n    const isPopupEditMode = this.isPopupEditMode();\n    const isEditRow = !isPopupEditMode && options.row && equalByValue(options.row.key, this.option(EDITING_EDITROWKEY_OPTION_NAME));\n    if (isRowMode) {\n      switch (button.name) {\n        case \"edit\":\n          return !isEditRow && this.allowUpdating(options);\n        case \"delete\":\n          return super._isDefaultButtonVisible(button, options) && !isEditRow;\n        case \"save\":\n        case \"cancel\":\n          return isEditRow;\n        default:\n          return super._isDefaultButtonVisible(button, options);\n      }\n    }\n    return super._isDefaultButtonVisible(button, options);\n  }\n  isEditRow(rowIndex) {\n    return this.isRowBasedEditMode() && this.isEditRowByIndex(rowIndex);\n  }\n  _cancelSaving(result) {\n    if (this.isRowBasedEditMode()) {\n      if (!this.hasChanges()) {\n        this._cancelEditDataCore();\n      }\n    }\n    super._cancelSaving(result);\n  }\n  _refreshCore(params) {\n    const {\n      allowCancelEditing: allowCancelEditing\n    } = params ?? {};\n    if (this.isRowBasedEditMode()) {\n      const hasUpdateChanges = this.getChanges().filter(it => \"update\" === it.type).length > 0;\n      this.init();\n      allowCancelEditing && hasUpdateChanges && this._cancelEditDataCore();\n    }\n    super._refreshCore(params);\n  }\n  _isEditColumnVisible() {\n    const result = super._isEditColumnVisible();\n    const editingOptions = this.option(\"editing\");\n    const isRowEditMode = this.isRowEditMode();\n    const isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\n    return result || isRowEditMode && isVisibleInRowEditMode;\n  }\n  _focusEditorIfNeed() {\n    const editMode = this.getEditMode();\n    if (this._needFocusEditor) {\n      if (MODES_WITH_DELAYED_FOCUS.includes(editMode)) {\n        const $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\n        this._delayedInputFocus($editingCell, () => {\n          $editingCell && this.component.focus($editingCell);\n        });\n      }\n      this._needFocusEditor = false;\n    }\n  }\n};\nconst data = Base => class extends Base {\n  _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {\n    if (this._editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {\n      return;\n    }\n    return super._getChangedColumnIndices.apply(this, arguments);\n  }\n};\nconst rowsView = Base => class extends Base {\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    if (row) {\n      const editingController = this._editingController;\n      const isEditRow = editingController.isEditRow(row.rowIndex);\n      if (isEditRow) {\n        $row.addClass(EDIT_ROW);\n        $row.removeClass(ROW_SELECTED_CLASS);\n        if (\"detail\" === row.rowType) {\n          $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n        }\n      }\n    }\n    return $row;\n  }\n  _update(change) {\n    super._update(change);\n    if (\"updateSelection\" === change.changeType) {\n      this.getTableElements().children(\"tbody\").children(`.${EDIT_ROW}`).removeClass(ROW_SELECTED_CLASS);\n    }\n  }\n};\nexport const editingRowBasedModule = {\n  extenders: {\n    controllers: {\n      editing: editingControllerExtender,\n      data: data\n    },\n    views: {\n      rowsView: rowsView\n    }\n  }\n};","map":{"version":3,"names":["equalByValue","EDIT_FORM_CLASS","EDIT_MODE_ROW","EDIT_ROW","EDITING_EDITROWKEY_OPTION_NAME","MODES_WITH_DELAYED_FOCUS","ROW_SELECTED_CLASS","editingControllerExtender","Base","isRowEditMode","getEditMode","_afterCancelEditData","rowIndex","dataController","_dataController","isRowBasedEditMode","updateItems","changeType","rowIndices","_isDefaultButtonVisible","button","options","isRowMode","isPopupEditMode","isEditRow","row","key","option","name","allowUpdating","isEditRowByIndex","_cancelSaving","result","hasChanges","_cancelEditDataCore","_refreshCore","params","allowCancelEditing","hasUpdateChanges","getChanges","filter","it","type","length","init","_isEditColumnVisible","editingOptions","isVisibleInRowEditMode","allowAdding","_focusEditorIfNeed","editMode","_needFocusEditor","includes","$editingCell","getFocusedCellInRow","_getVisibleEditRowIndex","_delayedInputFocus","component","focus","data","_getChangedColumnIndices","oldItem","newItem","isLiveUpdate","_editingController","isEditing","apply","arguments","rowsView","_createRow","$row","editingController","addClass","removeClass","rowType","addWidgetPrefix","_update","change","getTableElements","children","editingRowBasedModule","extenders","controllers","editing","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing_row_based.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editing/m_editing_row_based.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    EDIT_FORM_CLASS,\r\n    EDIT_MODE_ROW,\r\n    EDIT_ROW,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    MODES_WITH_DELAYED_FOCUS,\r\n    ROW_SELECTED_CLASS\r\n} from \"./const\";\r\nconst editingControllerExtender = Base => class extends Base {\r\n    isRowEditMode() {\r\n        return this.getEditMode() === EDIT_MODE_ROW\r\n    }\r\n    _afterCancelEditData(rowIndex) {\r\n        const dataController = this._dataController;\r\n        if (this.isRowBasedEditMode() && rowIndex >= 0) {\r\n            dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: [rowIndex, rowIndex + 1]\r\n            })\r\n        } else {\r\n            super._afterCancelEditData(rowIndex)\r\n        }\r\n    }\r\n    _isDefaultButtonVisible(button, options) {\r\n        const isRowMode = this.isRowBasedEditMode();\r\n        const isPopupEditMode = this.isPopupEditMode();\r\n        const isEditRow = !isPopupEditMode && options.row && equalByValue(options.row.key, this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n        if (isRowMode) {\r\n            switch (button.name) {\r\n                case \"edit\":\r\n                    return !isEditRow && this.allowUpdating(options);\r\n                case \"delete\":\r\n                    return super._isDefaultButtonVisible(button, options) && !isEditRow;\r\n                case \"save\":\r\n                case \"cancel\":\r\n                    return isEditRow;\r\n                default:\r\n                    return super._isDefaultButtonVisible(button, options)\r\n            }\r\n        }\r\n        return super._isDefaultButtonVisible(button, options)\r\n    }\r\n    isEditRow(rowIndex) {\r\n        return this.isRowBasedEditMode() && this.isEditRowByIndex(rowIndex)\r\n    }\r\n    _cancelSaving(result) {\r\n        if (this.isRowBasedEditMode()) {\r\n            if (!this.hasChanges()) {\r\n                this._cancelEditDataCore()\r\n            }\r\n        }\r\n        super._cancelSaving(result)\r\n    }\r\n    _refreshCore(params) {\r\n        const {\r\n            allowCancelEditing: allowCancelEditing\r\n        } = params ?? {};\r\n        if (this.isRowBasedEditMode()) {\r\n            const hasUpdateChanges = this.getChanges().filter((it => \"update\" === it.type)).length > 0;\r\n            this.init();\r\n            allowCancelEditing && hasUpdateChanges && this._cancelEditDataCore()\r\n        }\r\n        super._refreshCore(params)\r\n    }\r\n    _isEditColumnVisible() {\r\n        const result = super._isEditColumnVisible();\r\n        const editingOptions = this.option(\"editing\");\r\n        const isRowEditMode = this.isRowEditMode();\r\n        const isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\r\n        return result || isRowEditMode && isVisibleInRowEditMode\r\n    }\r\n    _focusEditorIfNeed() {\r\n        const editMode = this.getEditMode();\r\n        if (this._needFocusEditor) {\r\n            if (MODES_WITH_DELAYED_FOCUS.includes(editMode)) {\r\n                const $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\r\n                this._delayedInputFocus($editingCell, (() => {\r\n                    $editingCell && this.component.focus($editingCell)\r\n                }))\r\n            }\r\n            this._needFocusEditor = false\r\n        }\r\n    }\r\n};\r\nconst data = Base => class extends Base {\r\n    _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n        if (this._editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {\r\n            return\r\n        }\r\n        return super._getChangedColumnIndices.apply(this, arguments)\r\n    }\r\n};\r\nconst rowsView = Base => class extends Base {\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (row) {\r\n            const editingController = this._editingController;\r\n            const isEditRow = editingController.isEditRow(row.rowIndex);\r\n            if (isEditRow) {\r\n                $row.addClass(EDIT_ROW);\r\n                $row.removeClass(ROW_SELECTED_CLASS);\r\n                if (\"detail\" === row.rowType) {\r\n                    $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS))\r\n                }\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n    _update(change) {\r\n        super._update(change);\r\n        if (\"updateSelection\" === change.changeType) {\r\n            this.getTableElements().children(\"tbody\").children(`.${EDIT_ROW}`).removeClass(ROW_SELECTED_CLASS)\r\n        }\r\n    }\r\n};\r\nexport const editingRowBasedModule = {\r\n    extenders: {\r\n        controllers: {\r\n            editing: editingControllerExtender,\r\n            data: data\r\n        },\r\n        views: {\r\n            rowsView: rowsView\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}