{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/adaptivity/m_adaptivity.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { name as clickEventName } from \"../../../../common/core/events/click\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport { removeEvent } from \"../../../../common/core/events/remove\";\nimport { addNamespace } from \"../../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport Guid from \"../../../../core/guid\";\nimport $ from \"../../../../core/renderer\";\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { isElementInDom } from \"../../../../core/utils/dom\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getWidth } from \"../../../../core/utils/size\";\nimport { isDefined, isString } from \"../../../../core/utils/type\";\nimport Form from \"../../../../ui/form\";\nimport { isMaterial } from \"../../../../ui/themes\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nconst COLUMN_HEADERS_VIEW = \"columnHeadersView\";\nconst ROWS_VIEW = \"rowsView\";\nconst FOOTER_VIEW = \"footerView\";\nconst COLUMN_VIEWS = [\"columnHeadersView\", ROWS_VIEW, FOOTER_VIEW];\nconst ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\nconst HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nconst ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\nconst FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nconst FORM_ITEM_MODIFIED = \"dx-item-modified\";\nconst HIDDEN_COLUMN_CLASS = \"hidden-column\";\nconst ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\nconst ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\nconst COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\nconst ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\nconst ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nconst LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\nconst ADAPTIVE_COLUMN_NAME = \"adaptive\";\nconst EDIT_MODE_BATCH = \"batch\";\nconst EDIT_MODE_ROW = \"row\";\nconst EDIT_MODE_FORM = \"form\";\nconst EDIT_MODE_POPUP = \"popup\";\nconst REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\nconst GROUP_ROW_CLASS = \"dx-group-row\";\nconst EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\nconst COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\nfunction getColumnId(that, column) {\n  return that._columnsController.getColumnId(column);\n}\nfunction getDataCellElements($row) {\n  return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\");\n}\nfunction adaptiveCellTemplate(container, options) {\n  let $adaptiveColumnButton;\n  const $container = $(container);\n  const adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\n  if (\"data\" === options.rowType) {\n    $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(\"adaptive-more\"));\n    eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(() => {\n      adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key);\n    }));\n    $adaptiveColumnButton.appendTo($container);\n  } else {\n    gridCoreUtils.setEmptyText($container);\n  }\n}\nfunction focusCellHandler(e) {\n  var _e$data;\n  const $nextCell = null === (_e$data = e.data) || void 0 === _e$data ? void 0 : _e$data.$nextCell;\n  eventsEngine.off($nextCell, \"focus\", focusCellHandler);\n  eventsEngine.trigger($nextCell, \"dxclick\");\n}\nexport class AdaptiveColumnsController extends modules.ViewController {\n  init() {\n    this._columnsController = this.getController(\"columns\");\n    this._dataController = this.getController(\"data\");\n    this._editingController = this.getController(\"editing\");\n    this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._columnsController.addCommandColumn({\n      type: \"adaptive\",\n      command: \"adaptive\",\n      visible: true,\n      adaptiveHidden: true,\n      cssClass: \"dx-command-adaptive\",\n      alignment: \"center\",\n      width: \"auto\",\n      cellTemplate: adaptiveCellTemplate,\n      fixedPosition: \"right\"\n    });\n    this._columnsController.columnsChanged.add(() => {\n      const isAdaptiveVisible = !!this.updateHidingQueue(this._columnsController.getColumns()).length;\n      this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true);\n    });\n    this._hidingColumnsQueue = [];\n    this._hiddenColumns = [];\n    this.createAction(\"onAdaptiveDetailRowPreparing\");\n    super.init();\n  }\n  optionChanged(args) {\n    if (\"columnHidingEnabled\" === args.name) {\n      this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value);\n    }\n    super.optionChanged(args);\n  }\n  publicMethods() {\n    return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"];\n  }\n  _isRowEditMode() {\n    const editMode = this._getEditMode();\n    return \"row\" === editMode;\n  }\n  _isItemModified(item, cellOptions) {\n    const columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n    const rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\n    const row = this._dataController.items()[rowIndex + 1];\n    return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex]);\n  }\n  _renderFormViewTemplate(item, cellOptions, $container) {\n    const that = this;\n    const {\n      column: column\n    } = item;\n    const focusAction = that.createAction(() => {\n      if (that._editingController.isEditing()) {\n        eventsEngine.trigger($container, clickEventName);\n      }\n    });\n    const rowData = cellOptions.row.data;\n    const value = column.calculateCellValue(rowData);\n    const displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, cellOptions.rowType);\n    const text = gridCoreUtils.formatValue(displayValue, column);\n    const isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\n    const rowsView = that._rowsView;\n    if (column.allowEditing && this._keyboardNavigationController.isKeyboardEnabled()) {\n      $container.attr(\"tabIndex\", that.option(\"tabIndex\"));\n      if (isCellOrBatchEditMode) {\n        eventsEngine.off($container, \"focus\", focusAction);\n        eventsEngine.on($container, \"focus\", focusAction);\n      }\n    }\n    if (column.cellTemplate) {\n      const templateOptions = extend({}, cellOptions, {\n        value: value,\n        displayValue: displayValue,\n        text: text,\n        column: column\n      });\n      rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isElementInDom($container)).done(() => {\n        rowsView._cellPrepared($container, cellOptions);\n      });\n    } else {\n      const container = $container.get(0);\n      if (column.encodeHtml) {\n        container.textContent = text;\n      } else {\n        container.innerHTML = text;\n      }\n      $container.addClass(\"dx-adaptive-item-text\");\n      if (!isDefined(text) || \"\" === text) {\n        $container.html(\"&nbsp;\");\n      }\n      if (!that._isRowEditMode()) {\n        if (that._isItemModified(item, cellOptions)) {\n          $container.addClass(\"dx-item-modified\");\n        }\n      }\n      rowsView._cellPrepared($container, cellOptions);\n    }\n  }\n  _getTemplate(item, cellOptions, updateForm) {\n    const that = this;\n    const {\n      column: column\n    } = item;\n    const editingController = this._editingController;\n    return function (options, container) {\n      const $container = $(container);\n      const columnIndex = that._columnsController.getVisibleIndex(column.index);\n      const templateOptions = extend({}, cellOptions);\n      const renderFormTemplate = function () {\n        const isItemEdited = that._isItemEdited(item);\n        templateOptions.value = cellOptions.row.values[columnIndex];\n        if (isItemEdited || column.showEditorAlways) {\n          editingController.renderFormEditorTemplate(templateOptions, item, options, $container, !isItemEdited);\n        } else {\n          templateOptions.column = column;\n          templateOptions.columnIndex = columnIndex;\n          that._renderFormViewTemplate(item, templateOptions, $container);\n        }\n      };\n      renderFormTemplate();\n      if (templateOptions.watch) {\n        const dispose = templateOptions.watch(() => ({\n          isItemEdited: that._isItemEdited(item),\n          value: cellOptions.row.values[columnIndex]\n        }), () => {\n          $container.contents().remove();\n          $container.removeClass(\"dx-adaptive-item-text\");\n          renderFormTemplate();\n        });\n        eventsEngine.on($container, removeEvent, dispose);\n      }\n    };\n  }\n  _isVisibleColumnsValid(visibleColumns) {\n    if (visibleColumns < 2) {\n      return false;\n    }\n    if (visibleColumns.length - function () {\n      let result = 0;\n      for (let j = 0; j < visibleColumns.length; j++) {\n        const visibleColumn = visibleColumns[j];\n        if (visibleColumn.command) {\n          result++;\n        }\n      }\n      return result;\n    }() <= 1) {\n      return false;\n    }\n    return true;\n  }\n  _calculatePercentWidths(widths, visibleColumns) {\n    const that = this;\n    let percentWidths = 0;\n    visibleColumns.forEach((item, index) => {\n      if (\"adaptiveHidden\" !== widths[index]) {\n        percentWidths += that._getItemPercentWidth(item);\n      }\n    });\n    return percentWidths;\n  }\n  _isPercentWidth(width) {\n    return isString(width) && width.endsWith(\"%\");\n  }\n  _isColumnHidden(column) {\n    return this._hiddenColumns.filter(hiddenColumn => hiddenColumn.index === column.index).length > 0;\n  }\n  _getAverageColumnsWidth(containerWidth, columns, columnsCanFit) {\n    const that = this;\n    let fixedColumnsWidth = 0;\n    let columnsWithoutFixedWidthCount = 0;\n    columns.forEach(column => {\n      if (!that._isColumnHidden(column)) {\n        const {\n          width: width\n        } = column;\n        if (isDefined(width) && !isNaN(parseFloat(width))) {\n          fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\n            visibleIndex: column.visibleIndex,\n            columnsCount: columns.length,\n            columnsCanFit: columnsCanFit,\n            bestFitWidth: column.bestFitWidth,\n            columnWidth: width,\n            containerWidth: containerWidth\n          }) : parseFloat(width);\n        } else {\n          columnsWithoutFixedWidthCount++;\n        }\n      }\n    });\n    return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount;\n  }\n  _calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\n    const columnId = getColumnId(this, column);\n    const widthOption = this._columnsController.columnOption(columnId, \"width\");\n    const bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n    const columnsCount = contentColumns.length;\n    let colWidth;\n    if (widthOption && \"auto\" !== widthOption) {\n      if (this._isPercentWidth(widthOption)) {\n        colWidth = this._calculatePercentWidth({\n          visibleIndex: column.visibleIndex,\n          columnsCount: columnsCount,\n          columnsCanFit: columnsCanFit,\n          bestFitWidth: bestFitWidth,\n          columnWidth: widthOption,\n          containerWidth: containerWidth\n        });\n      } else {\n        return parseFloat(widthOption);\n      }\n    } else {\n      const columnAutoWidth = this.option(\"columnAutoWidth\");\n      colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit);\n    }\n    return colWidth;\n  }\n  _calculatePercentWidth(options) {\n    const columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\n    const partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\n    const resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\n    return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth;\n  }\n  _getNotTruncatedColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\n    const columnId = getColumnId(this, column);\n    const widthOption = this._columnsController.columnOption(columnId, \"width\");\n    const bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n    if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\n      return parseFloat(widthOption);\n    }\n    const colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\n    return colWidth < bestFitWidth ? null : colWidth;\n  }\n  _getItemPercentWidth(item) {\n    let result = 0;\n    if (item.width && this._isPercentWidth(item.width)) {\n      result = parseFloat(item.width);\n    }\n    return result;\n  }\n  _getCommandColumnsWidth() {\n    const that = this;\n    const columns = that._columnsController.getVisibleColumns();\n    let colWidth = 0;\n    each(columns, (index, column) => {\n      if (column.index < 0 || column.command) {\n        colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0;\n      }\n    });\n    return colWidth;\n  }\n  _isItemEdited(item) {\n    if (this.isFormOrPopupEditMode()) {\n      return false;\n    }\n    if (this._isRowEditMode()) {\n      const editRowKey = this.option(\"editing.editRowKey\");\n      if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\n        return true;\n      }\n    } else {\n      const rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n      const columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n      return this._editingController.isEditCell(rowIndex, columnIndex);\n    }\n    return;\n  }\n  _getFormItemsByHiddenColumns(hiddenColumns) {\n    const items = [];\n    each(hiddenColumns, (_, column) => {\n      items.push({\n        column: column,\n        name: column.name,\n        dataField: column.dataField,\n        visibleIndex: column.visibleIndex\n      });\n    });\n    return items;\n  }\n  _getAdaptiveColumnVisibleIndex(visibleColumns) {\n    for (let i = 0; i < visibleColumns.length; i++) {\n      const column = visibleColumns[i];\n      if (\"adaptive\" === column.command) {\n        return i;\n      }\n    }\n    return;\n  }\n  _hideAdaptiveColumn(resultWidths, visibleColumns) {\n    const visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\n    if (isDefined(visibleIndex)) {\n      resultWidths[visibleIndex] = \"adaptiveHidden\";\n      this._hideVisibleColumn({\n        isCommandColumn: true,\n        visibleIndex: visibleIndex\n      });\n    }\n  }\n  _showHiddenCellsInView(_ref) {\n    let {\n      $cells: $cells,\n      isCommandColumn: isCommandColumn\n    } = _ref;\n    let cssClassNameToRemove = this.addWidgetPrefix(\"hidden-column\");\n    if (isCommandColumn) {\n      cssClassNameToRemove = \"dx-command-adaptive-hidden\";\n      $cells.attr({\n        tabIndex: 0,\n        \"aria-hidden\": null\n      }).removeClass(cssClassNameToRemove);\n    } else {\n      $cells.removeClass(cssClassNameToRemove);\n    }\n  }\n  _showHiddenColumns() {\n    for (let i = 0; i < COLUMN_VIEWS.length; i++) {\n      const view = this.getView(COLUMN_VIEWS[i]);\n      if (view && view.isVisible() && view.element()) {\n        const viewName = view.name;\n        const $hiddenCommandCells = view.element().find(\".dx-command-adaptive-hidden\");\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCommandCells,\n          isCommandColumn: true\n        });\n        const $hiddenCells = view.element().find(`.${this.addWidgetPrefix(\"hidden-column\")}`);\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCells\n        });\n      }\n    }\n  }\n  _isCellValid($cell) {\n    return $cell && $cell.length && !$cell.hasClass(\"dx-master-detail-cell\") && !$cell.hasClass(\"dx-group-cell\");\n  }\n  _hideVisibleColumn(_ref2) {\n    let {\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref2;\n    const that = this;\n    COLUMN_VIEWS.forEach(viewName => {\n      const view = that.getView(viewName);\n      view && that._hideVisibleColumnInView({\n        view: view,\n        isCommandColumn: isCommandColumn,\n        visibleIndex: visibleIndex\n      });\n    });\n  }\n  _hideVisibleColumnInView(_ref3) {\n    let {\n      view: view,\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref3;\n    const viewName = view.name;\n    let $cellElement;\n    const column = this._columnsController.getVisibleColumns()[visibleIndex];\n    const editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\n    if (view && view.isVisible() && column) {\n      const rowsCount = view.getRowsCount();\n      const $rowElements = view._getRowElements();\n      for (let rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\n        const cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\n        if (!cancelClassAdding) {\n          const currentVisibleIndex = \"columnHeadersView\" === viewName ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\n          if (currentVisibleIndex >= 0) {\n            const $rowElement = $rowElements.eq(rowIndex);\n            $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\n            this._isCellValid($cellElement) && this._hideVisibleCellInView({\n              viewName: viewName,\n              isCommandColumn: isCommandColumn,\n              $cell: $cellElement\n            });\n          }\n        }\n      }\n    }\n  }\n  _findCellElementInRow($rowElement, visibleColumnIndex) {\n    const $rowCells = $rowElement.children();\n    let visibleIndex = visibleColumnIndex;\n    let cellIsInsideGroup = false;\n    if ($rowElement.hasClass(\"dx-group-row\")) {\n      const $groupCell = $rowElement.find(\".dx-group-cell\");\n      const colSpan = $groupCell.attr(\"colspan\");\n      if ($groupCell.length && isDefined(colSpan)) {\n        const groupCellLength = parseInt(colSpan);\n        const endGroupIndex = $groupCell.index() + groupCellLength - 1;\n        if (visibleColumnIndex > endGroupIndex) {\n          visibleIndex = visibleColumnIndex - groupCellLength + 1;\n        } else {\n          cellIsInsideGroup = true;\n        }\n      }\n    }\n    const $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\n    return $cellElement;\n  }\n  _hideVisibleCellInView(_ref4) {\n    let {\n      $cell: $cell,\n      isCommandColumn: isCommandColumn\n    } = _ref4;\n    const cssClassNameToAdd = isCommandColumn ? \"dx-command-adaptive-hidden\" : this.addWidgetPrefix(\"hidden-column\");\n    $cell.attr({\n      tabIndex: -1,\n      \"aria-hidden\": true\n    }).addClass(cssClassNameToAdd);\n  }\n  _getEditMode() {\n    return this._editingController.getEditMode();\n  }\n  isFormOrPopupEditMode() {\n    const editMode = this._getEditMode();\n    return \"form\" === editMode || \"popup\" === editMode;\n  }\n  hideRedundantColumns(resultWidths, visibleColumns, hiddenQueue) {\n    const that = this;\n    this._hiddenColumns = [];\n    if (that._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\n      let totalWidth = 0;\n      const $rootElement = that.component.$element();\n      let rootElementWidth = getWidth($rootElement) - that._getCommandColumnsWidth();\n      const getVisibleContentColumns = function () {\n        return visibleColumns.filter(item => !item.command && 0 === this._hiddenColumns.filter(i => i.index === item.index).length);\n      }.bind(this);\n      let visibleContentColumns = getVisibleContentColumns();\n      const contentColumnsCount = visibleContentColumns.length;\n      let i;\n      let hasHiddenColumns;\n      let needHideColumn;\n      do {\n        needHideColumn = false;\n        totalWidth = 0;\n        const percentWidths = that._calculatePercentWidths(resultWidths, visibleColumns);\n        const columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\n        for (i = 0; i < visibleColumns.length; i++) {\n          const visibleColumn = visibleColumns[i];\n          let columnWidth = that._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\n          const columnId = getColumnId(that, visibleColumn);\n          const widthOption = that._columnsController.columnOption(columnId, \"width\");\n          const minWidth = that._columnsController.columnOption(columnId, \"minWidth\");\n          const columnBestFitWidth = that._columnsController.columnOption(columnId, \"bestFitWidth\");\n          if (\"adaptiveHidden\" === resultWidths[i]) {\n            hasHiddenColumns = true;\n            continue;\n          }\n          if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\n            needHideColumn = true;\n            break;\n          }\n          if (!widthOption || \"auto\" === widthOption) {\n            columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0);\n          }\n          if (\"adaptive\" !== visibleColumn.command || hasHiddenColumns) {\n            totalWidth += columnWidth;\n          }\n        }\n        needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\n        if (needHideColumn) {\n          const column = hiddenQueue.pop();\n          const visibleIndex = that._columnsController.getVisibleIndex(column.index);\n          rootElementWidth += that._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\n          that._hideVisibleColumn({\n            visibleIndex: visibleIndex\n          });\n          resultWidths[visibleIndex] = \"adaptiveHidden\";\n          this._hiddenColumns.push(column);\n          visibleContentColumns = getVisibleContentColumns();\n        }\n      } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\n      if (contentColumnsCount === visibleContentColumns.length) {\n        that._hideAdaptiveColumn(resultWidths, visibleColumns);\n      }\n    } else {\n      that._hideAdaptiveColumn(resultWidths, visibleColumns);\n    }\n  }\n  getAdaptiveDetailItems() {\n    return this._$itemContents;\n  }\n  getItemContentByColumnIndex(visibleColumnIndex) {\n    let $itemContent;\n    for (let i = 0; i < this._$itemContents.length; i++) {\n      $itemContent = this._$itemContents.eq(i);\n      const item = $itemContent.data(\"dx-form-item\");\n      if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\n        return $itemContent;\n      }\n    }\n  }\n  toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\n    if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\n      this._dataController.toggleExpandAdaptiveDetailRow(key, alwaysExpanded);\n    }\n  }\n  createFormByHiddenColumns(container, options) {\n    const that = this;\n    const $container = $(container);\n    const userFormOptions = {\n      items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\n      formID: `dx-${new Guid()}`\n    };\n    const defaultFormOptions = isMaterial() ? {\n      colCount: 2\n    } : {};\n    this.executeAction(\"onAdaptiveDetailRowPreparing\", {\n      formOptions: userFormOptions\n    });\n    that._$itemContents = null;\n    that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\n      customizeItem(item) {\n        const column = item.column || that._columnsController.columnOption(item.name || item.dataField);\n        if (column) {\n          item.label = item.label || {};\n          item.label.text = item.label.text || column.caption;\n          item.column = column;\n          item.template = that._getTemplate(item, options, that.updateForm.bind(that));\n        }\n        userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item);\n      },\n      onContentReady(e) {\n        userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\n        that._$itemContents = $container.find(\".dx-field-item-content\");\n      }\n    }));\n  }\n  hasAdaptiveDetailRowExpanded() {\n    return isDefined(this._dataController.adaptiveExpandedKey());\n  }\n  updateForm(hiddenColumns) {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      if (this._form && isDefined(this._form._contentReadyAction)) {\n        if (hiddenColumns && hiddenColumns.length) {\n          this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns));\n        } else {\n          this._form.repaint();\n        }\n      }\n    }\n  }\n  updateHidingQueue(columns) {\n    const that = this;\n    const hideableColumns = columns.filter(column => column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0));\n    let columnsHasHidingPriority;\n    let i;\n    that._hidingColumnsQueue = [];\n    if (that.option(\"allowColumnResizing\") && \"widget\" === that.option(\"columnResizingMode\")) {\n      return that._hidingColumnsQueue;\n    }\n    for (i = 0; i < hideableColumns.length; i++) {\n      if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\n        columnsHasHidingPriority = true;\n        that._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i];\n      }\n    }\n    if (columnsHasHidingPriority) {\n      that._hidingColumnsQueue.reverse();\n    } else if (that.option(\"columnHidingEnabled\")) {\n      for (i = 0; i < hideableColumns.length; i++) {\n        const visibleIndex = that._columnsController.getVisibleIndex(hideableColumns[i].index);\n        that._hidingColumnsQueue[visibleIndex] = hideableColumns[i];\n      }\n    }\n    that._hidingColumnsQueue = that._hidingColumnsQueue.filter(Object);\n    return that._hidingColumnsQueue;\n  }\n  getHiddenColumns() {\n    return this._hiddenColumns;\n  }\n  hasHiddenColumns() {\n    return this._hiddenColumns.length > 0;\n  }\n  getHidingColumnsQueue() {\n    return this._hidingColumnsQueue;\n  }\n  isAdaptiveDetailRowExpanded(key) {\n    const dataController = this._dataController;\n    return dataController.adaptiveExpandedKey() && equalByValue(dataController.adaptiveExpandedKey(), key);\n  }\n  expandAdaptiveDetailRow(key) {\n    if (!this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow(key);\n    }\n  }\n  collapseAdaptiveDetailRow() {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow();\n    }\n  }\n  updateCommandAdaptiveAriaLabel(key, label) {\n    const rowIndex = this._dataController.getRowIndexByKey(key);\n    if (-1 === rowIndex) {\n      return;\n    }\n    const $row = $(this.component.getRowElement(rowIndex));\n    this.setCommandAdaptiveAriaLabel($row, label);\n  }\n  setCommandAdaptiveAriaLabel($row, labelName) {\n    const $adaptiveCommand = $row.find(\".dx-command-adaptive\");\n    $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName));\n  }\n}\nconst keyboardNavigation = Base => class extends Base {\n  _isCellValid($cell, isClick) {\n    return super._isCellValid($cell, isClick) && !$cell.hasClass(this.addWidgetPrefix(\"hidden-column\")) && !$cell.hasClass(\"dx-command-adaptive-hidden\");\n  }\n  _processNextCellInMasterDetail($nextCell, $cell) {\n    super._processNextCellInMasterDetail($nextCell, $cell);\n    const isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\n    const isEditing = this._editingController.isEditing();\n    if (isEditing && $nextCell && isCellOrBatchMode && !this._isInsideEditForm($nextCell)) {\n      eventsEngine.off($nextCell, \"focus\", focusCellHandler);\n      eventsEngine.on($nextCell, \"focus\", {\n        $nextCell: $nextCell\n      }, focusCellHandler);\n      eventsEngine.trigger($cell, \"focus\");\n    }\n  }\n  _isCellElement($cell) {\n    return super._isCellElement($cell) || $cell.hasClass(\"dx-adaptive-item-text\");\n  }\n};\nconst rowsView = Base => class extends Base {\n  _getCellTemplate(options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    if (\"detailAdaptive\" === options.rowType && \"detail\" === column.command) {\n      return function (container, options) {\n        that._adaptiveColumnsController.createFormByHiddenColumns($(container), options);\n      };\n    }\n    return super._getCellTemplate(options);\n  }\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    if (row && \"detailAdaptive\" === row.rowType && row.key === this._dataController.adaptiveExpandedKey()) {\n      $row.addClass(\"dx-adaptive-detail-row\");\n    }\n    return $row;\n  }\n  _renderCells($row, options) {\n    super._renderCells($row, options);\n    const adaptiveColumnsController = this._adaptiveColumnsController;\n    const hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\n    const hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\n    if (hidingColumnsQueueLength && !hiddenColumnsLength) {\n      getDataCellElements($row).last().addClass(\"dx-last-data-cell\");\n    }\n    if (\"data\" === options.row.rowType) {\n      adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME);\n    }\n  }\n  _getColumnIndexByElementCore($element) {\n    const $itemContent = $element.closest(\".dx-field-item-content\");\n    if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\n      const formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\n      return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n    }\n    return super._getColumnIndexByElementCore($element);\n  }\n  _cellPrepared($cell, options) {\n    super._cellPrepared.apply(this, arguments);\n    if (\"detailAdaptive\" !== options.row.rowType && \"adaptiveHidden\" === options.column.visibleWidth) {\n      $cell.addClass(this.addWidgetPrefix(\"hidden-column\"));\n    }\n  }\n  getCell(cellPosition, rows) {\n    const item = this._dataController.items()[null === cellPosition || void 0 === cellPosition ? void 0 : cellPosition.rowIndex];\n    if (\"detailAdaptive\" === (null === item || void 0 === item ? void 0 : item.rowType)) {\n      const $adaptiveDetailItems = this._adaptiveColumnsController.getAdaptiveDetailItems();\n      return super.getCell(cellPosition, rows, $adaptiveDetailItems);\n    }\n    return super.getCell.apply(this, arguments);\n  }\n  _getCellElement(rowIndex, columnIdentifier) {\n    const item = this._dataController.items()[rowIndex];\n    if (item && \"detailAdaptive\" === item.rowType) {\n      return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier);\n    }\n    return super._getCellElement.apply(this, arguments);\n  }\n  getContextMenuItems(options) {\n    var _super$getContextMenu;\n    if (options.row && \"detailAdaptive\" === options.row.rowType) {\n      const view = this._columnHeadersView;\n      const formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\n      options.column = formItem ? formItem.column : options.column;\n      return view.getContextMenuItems && view.getContextMenuItems(options);\n    }\n    return null === (_super$getContextMenu = super.getContextMenuItems) || void 0 === _super$getContextMenu ? void 0 : _super$getContextMenu.call(this, options);\n  }\n  isClickableElement($target) {\n    var _super$isClickableEle;\n    const isClickable = (null === (_super$isClickableEle = super.isClickableElement) || void 0 === _super$isClickableEle ? void 0 : _super$isClickableEle.call(this, $target)) ?? false;\n    return isClickable || !!$target.closest(\".dx-command-adaptive\").length;\n  }\n};\nconst exportExtender = Base => class extends Base {\n  _updateColumnWidth(column, width) {\n    super._updateColumnWidth(column, \"adaptiveHidden\" === column.visibleWidth ? column.bestFitWidth : width);\n  }\n};\nconst columnsResizer = Base => class extends Base {\n  _pointCreated(point, cellsLength, columns) {\n    const result = super._pointCreated(point, cellsLength, columns);\n    const currentColumn = columns[point.columnIndex] || {};\n    const nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\n    const nextColumn = columns[nextColumnIndex] || {};\n    const hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\n    const hasAdaptiveHiddenWidth = \"adaptiveHidden\" === currentColumn.visibleWidth || hasHiddenColumnsOnly;\n    return result || hasAdaptiveHiddenWidth;\n  }\n  _getNextColumnIndex(currentColumnIndex) {\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    let index = super._getNextColumnIndex(currentColumnIndex);\n    while (visibleColumns[index] && \"adaptiveHidden\" === visibleColumns[index].visibleWidth) {\n      index++;\n    }\n    return index;\n  }\n};\nconst draggingHeader = Base => class extends Base {\n  _pointCreated(point, columns, location, sourceColumn) {\n    const result = super._pointCreated(point, columns, location, sourceColumn);\n    const column = columns[point.columnIndex - 1] || {};\n    const hasAdaptiveHiddenWidth = \"adaptiveHidden\" === column.visibleWidth;\n    return result || hasAdaptiveHiddenWidth;\n  }\n};\nconst editing = Base => class extends Base {\n  _isRowEditMode() {\n    return \"row\" === this.getEditMode();\n  }\n  _getFormEditItemTemplate(cellOptions, column) {\n    if (\"row\" !== this.getEditMode() && \"detailAdaptive\" === cellOptions.rowType) {\n      cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\n      return this.getColumnTemplate(cellOptions);\n    }\n    return super._getFormEditItemTemplate(cellOptions, column);\n  }\n  _closeEditItem($targetElement) {\n    const $itemContents = $targetElement.closest(\".dx-field-item-content\");\n    const rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n    const formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\n    const columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n    if (!this.isEditCell(rowIndex, columnIndex)) {\n      super._closeEditItem($targetElement);\n    }\n  }\n  _beforeUpdateItems(rowIndices, rowIndex) {\n    if (!this._adaptiveColumnsController.isFormOrPopupEditMode() && this._adaptiveColumnsController.hasHiddenColumns()) {\n      const items = this._dataController.items();\n      const item = items[rowIndex];\n      const oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\n      this._isForceRowAdaptiveExpand = !this._adaptiveColumnsController.hasAdaptiveDetailRowExpanded();\n      if (oldExpandRowIndex >= 0) {\n        rowIndices.push(oldExpandRowIndex + 1);\n      }\n      rowIndices.push(rowIndex + 1);\n      this._dataController.adaptiveExpandedKey(item.key);\n    }\n  }\n  _afterInsertRow(key) {\n    super._afterInsertRow.apply(this, arguments);\n    if (this._adaptiveColumnsController.hasHiddenColumns()) {\n      this._adaptiveColumnsController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\n      this._isForceRowAdaptiveExpand = true;\n    }\n  }\n  _collapseAdaptiveDetailRow() {\n    if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\n      this._adaptiveColumnsController.collapseAdaptiveDetailRow();\n      this._isForceRowAdaptiveExpand = false;\n    }\n  }\n  _cancelEditAdaptiveDetailRow() {\n    if (this._adaptiveColumnsController.hasHiddenColumns()) {\n      this._collapseAdaptiveDetailRow();\n    }\n  }\n  _afterSaveEditData() {\n    super._afterSaveEditData.apply(this, arguments);\n    const deferred = new Deferred();\n    if (this._isRowEditMode() && this._adaptiveColumnsController.hasHiddenColumns()) {\n      when(this._validatingController.validate(true)).done(isValid => {\n        if (isValid) {\n          this._cancelEditAdaptiveDetailRow();\n        }\n        deferred.resolve();\n      });\n    } else {\n      deferred.resolve();\n    }\n    return deferred.promise();\n  }\n  _beforeCancelEditData() {\n    super._beforeCancelEditData();\n    this._cancelEditAdaptiveDetailRow();\n  }\n  _getRowIndicesForCascadeUpdating(row) {\n    const rowIndices = super._getRowIndicesForCascadeUpdating.apply(this, arguments);\n    if (this._adaptiveColumnsController.isAdaptiveDetailRowExpanded(row.key)) {\n      rowIndices.push(\"detailAdaptive\" === row.rowType ? row.rowIndex - 1 : row.rowIndex + 1);\n    }\n    return rowIndices;\n  }\n  _beforeCloseEditCellInBatchMode(rowIndices) {\n    const expandedKey = this._dataController._adaptiveExpandedKey;\n    if (expandedKey) {\n      const rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\n      if (rowIndex > -1) {\n        rowIndices.unshift(rowIndex);\n      }\n    }\n  }\n  editRow(rowIndex) {\n    if (this._adaptiveColumnsController.isFormOrPopupEditMode()) {\n      this._adaptiveColumnsController.collapseAdaptiveDetailRow();\n    }\n    return super.editRow(rowIndex);\n  }\n  deleteRow(rowIndex) {\n    const rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n    if (\"batch\" === this.getEditMode() && this._adaptiveColumnsController.isAdaptiveDetailRowExpanded(rowKey)) {\n      this._adaptiveColumnsController.collapseAdaptiveDetailRow();\n    }\n    super.deleteRow(rowIndex);\n  }\n};\nconst data = Base => class extends Base {\n  init() {\n    super.init();\n    this._adaptiveExpandedKey = void 0;\n  }\n  _processItems(items, change) {\n    const {\n      changeType: changeType\n    } = change;\n    items = super._processItems.apply(this, arguments);\n    if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\n      return items;\n    }\n    const expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\n    const newMode = false === this.option(LEGACY_SCROLLING_MODE);\n    if (expandRowIndex >= 0) {\n      const item = items[expandRowIndex];\n      items.splice(expandRowIndex + 1, 0, {\n        visible: true,\n        rowType: \"detailAdaptive\",\n        key: item.key,\n        data: item.data,\n        node: item.node,\n        modifiedValues: item.modifiedValues,\n        isNewRow: item.isNewRow,\n        values: item.values\n      });\n    } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\n      this._adaptiveExpandedKey = void 0;\n    }\n    return items;\n  }\n  _getRowIndicesForExpand(key) {\n    const rowIndices = super._getRowIndicesForExpand.apply(this, arguments);\n    if (this._adaptiveColumnsController.isAdaptiveDetailRowExpanded(key)) {\n      const lastRowIndex = rowIndices[rowIndices.length - 1];\n      rowIndices.push(lastRowIndex + 1);\n    }\n    return rowIndices;\n  }\n  adaptiveExpandedKey(value) {\n    if (isDefined(value)) {\n      this._adaptiveExpandedKey = value;\n    } else {\n      return this._adaptiveExpandedKey;\n    }\n  }\n  toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\n    let oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\n    let newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\n    if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\n      key = void 0;\n      newExpandLoadedRowIndex = -1;\n    }\n    const oldKey = this._adaptiveExpandedKey;\n    this._adaptiveExpandedKey = key;\n    if (oldExpandLoadedRowIndex >= 0) {\n      oldExpandLoadedRowIndex++;\n    }\n    if (newExpandLoadedRowIndex >= 0) {\n      newExpandLoadedRowIndex++;\n    }\n    const rowIndexDelta = this.getRowIndexDelta();\n    this.updateItems({\n      allowInvisibleRowIndices: true,\n      changeType: \"update\",\n      rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\n    });\n    this._adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\n    this._adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME);\n  }\n};\nconst editorFactory = Base => class extends Base {\n  _needHideBorder($element) {\n    return super._needHideBorder($element) || (null === $element || void 0 === $element ? void 0 : $element.hasClass(\"dx-field-item-content\")) && (null === $element || void 0 === $element ? void 0 : $element.find(\".dx-checkbox\").length);\n  }\n  _getFocusCellSelector() {\n    return `${super._getFocusCellSelector()}, .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content`;\n  }\n  _getRevertTooltipsSelector() {\n    return `${super._getRevertTooltipsSelector()}, .dx-field-item-content .${this.addWidgetPrefix(\"revert-tooltip\")}`;\n  }\n};\nconst columns = Base => class extends Base {\n  _isColumnVisible(column) {\n    return super._isColumnVisible(column) && !column.adaptiveHidden;\n  }\n  getVisibleDataColumnsByBandColumn(bandColumnIndex) {\n    return super.getVisibleDataColumnsByBandColumn(bandColumnIndex).filter(column => \"adaptiveHidden\" !== column.visibleWidth);\n  }\n};\nconst resizing = Base => class extends Base {\n  dispose() {\n    super.dispose.apply(this, arguments);\n    clearTimeout(this._updateScrollableTimeoutID);\n  }\n  _needBestFit() {\n    return super._needBestFit() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length;\n  }\n  _correctColumnWidths(resultWidths, visibleColumns) {\n    const adaptiveController = this._adaptiveColumnsController;\n    const oldHiddenColumns = adaptiveController.getHiddenColumns();\n    const hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\n    adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\n    const hiddenColumns = adaptiveController.getHiddenColumns();\n    if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\n      if (oldHiddenColumns.length !== hiddenColumns.length) {\n        adaptiveController.updateForm(hiddenColumns);\n      }\n    }\n    !hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\n    return super._correctColumnWidths.apply(this, arguments);\n  }\n  _toggleBestFitMode(isBestFit) {\n    isBestFit && this._adaptiveColumnsController._showHiddenColumns();\n    super._toggleBestFitMode(isBestFit);\n  }\n  _needStretch() {\n    const adaptiveColumnsController = this._adaptiveColumnsController;\n    return super._needStretch.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns();\n  }\n};\nexport const adaptivityModule = {\n  defaultOptions: () => ({\n    columnHidingEnabled: false,\n    onAdaptiveDetailRowPreparing: null\n  }),\n  controllers: {\n    adaptiveColumns: AdaptiveColumnsController\n  },\n  extenders: {\n    views: {\n      rowsView: rowsView\n    },\n    controllers: {\n      export: exportExtender,\n      columnsResizer: columnsResizer,\n      draggingHeader: draggingHeader,\n      editing: editing,\n      resizing: resizing,\n      data: data,\n      editorFactory: editorFactory,\n      columns: columns,\n      keyboardNavigation: keyboardNavigation\n    }\n  }\n};","map":{"version":3,"names":["name","clickEventName","eventsEngine","removeEvent","addNamespace","messageLocalization","Guid","$","equalByValue","Deferred","when","isElementInDom","extend","each","getWidth","isDefined","isString","Form","isMaterial","modules","gridCoreUtils","COLUMN_HEADERS_VIEW","ROWS_VIEW","FOOTER_VIEW","COLUMN_VIEWS","ADAPTIVE_NAMESPACE","HIDDEN_COLUMNS_WIDTH","ADAPTIVE_ROW_TYPE","FORM_ITEM_CONTENT_CLASS","FORM_ITEM_MODIFIED","HIDDEN_COLUMN_CLASS","ADAPTIVE_COLUMN_BUTTON_CLASS","ADAPTIVE_COLUMN_NAME_CLASS","COMMAND_ADAPTIVE_HIDDEN_CLASS","ADAPTIVE_DETAIL_ROW_CLASS","ADAPTIVE_ITEM_TEXT_CLASS","MASTER_DETAIL_CELL_CLASS","LAST_DATA_CELL_CLASS","ADAPTIVE_COLUMN_NAME","EDIT_MODE_BATCH","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_POPUP","REVERT_TOOLTIP_CLASS","GROUP_CELL_CLASS","GROUP_ROW_CLASS","EXPAND_ARIA_NAME","COLLAPSE_ARIA_NAME","LEGACY_SCROLLING_MODE","getColumnId","that","column","_columnsController","getDataCellElements","$row","find","adaptiveCellTemplate","container","options","$adaptiveColumnButton","$container","adaptiveColumnsController","component","getController","rowType","addClass","addWidgetPrefix","on","createAction","toggleExpandAdaptiveDetailRow","key","appendTo","setEmptyText","focusCellHandler","e","_e$data","$nextCell","data","off","trigger","AdaptiveColumnsController","ViewController","init","_dataController","_editingController","_keyboardNavigationController","_rowsView","getView","addCommandColumn","type","command","visible","adaptiveHidden","cssClass","alignment","width","cellTemplate","fixedPosition","columnsChanged","add","isAdaptiveVisible","updateHidingQueue","getColumns","length","columnOption","_hidingColumnsQueue","_hiddenColumns","optionChanged","args","value","publicMethods","_isRowEditMode","editMode","_getEditMode","_isItemModified","item","cellOptions","columnIndex","getVisibleIndex","index","rowIndex","getRowIndexByKey","row","items","modifiedValues","_renderFormViewTemplate","focusAction","isEditing","rowData","calculateCellValue","displayValue","getDisplayValue","text","formatValue","isCellOrBatchEditMode","rowsView","allowEditing","isKeyboardEnabled","attr","option","templateOptions","renderTemplate","done","_cellPrepared","get","encodeHtml","textContent","innerHTML","html","_getTemplate","updateForm","editingController","renderFormTemplate","isItemEdited","_isItemEdited","values","showEditorAlways","renderFormEditorTemplate","watch","dispose","contents","remove","removeClass","_isVisibleColumnsValid","visibleColumns","result","j","visibleColumn","_calculatePercentWidths","widths","percentWidths","forEach","_getItemPercentWidth","_isPercentWidth","endsWith","_isColumnHidden","filter","hiddenColumn","_getAverageColumnsWidth","containerWidth","columns","columnsCanFit","fixedColumnsWidth","columnsWithoutFixedWidthCount","isNaN","parseFloat","_calculatePercentWidth","visibleIndex","columnsCount","bestFitWidth","columnWidth","_calculateColumnWidth","contentColumns","columnId","widthOption","colWidth","columnAutoWidth","columnFitted","partialWidth","resultWidth","_getNotTruncatedColumnWidth","_getCommandColumnsWidth","getVisibleColumns","isFormOrPopupEditMode","editRowKey","adaptiveExpandedKey","isEditCell","_getFormItemsByHiddenColumns","hiddenColumns","_","push","dataField","_getAdaptiveColumnVisibleIndex","i","_hideAdaptiveColumn","resultWidths","_hideVisibleColumn","isCommandColumn","_showHiddenCellsInView","_ref","$cells","cssClassNameToRemove","tabIndex","_showHiddenColumns","view","isVisible","element","viewName","$hiddenCommandCells","$hiddenCells","_isCellValid","$cell","hasClass","_ref2","_hideVisibleColumnInView","_ref3","$cellElement","editFormRowIndex","getEditFormRowIndex","rowsCount","getRowsCount","$rowElements","_getRowElements","cancelClassAdding","currentVisibleIndex","$rowElement","eq","_findCellElementInRow","_hideVisibleCellInView","visibleColumnIndex","$rowCells","children","cellIsInsideGroup","$groupCell","colSpan","groupCellLength","parseInt","endGroupIndex","_ref4","cssClassNameToAdd","getEditMode","hideRedundantColumns","hiddenQueue","totalWidth","$rootElement","$element","rootElementWidth","getVisibleContentColumns","bind","visibleContentColumns","contentColumnsCount","hasHiddenColumns","needHideColumn","minWidth","columnBestFitWidth","fixed","Math","max","pop","getAdaptiveDetailItems","_$itemContents","getItemContentByColumnIndex","$itemContent","alwaysExpanded","createFormByHiddenColumns","userFormOptions","formID","defaultFormOptions","colCount","executeAction","formOptions","_form","_createComponent","customizeItem","label","caption","template","call","onContentReady","hasAdaptiveDetailRowExpanded","_contentReadyAction","repaint","hideableColumns","groupIndex","columnsHasHidingPriority","hidingPriority","reverse","Object","getHiddenColumns","getHidingColumnsQueue","isAdaptiveDetailRowExpanded","dataController","expandAdaptiveDetailRow","collapseAdaptiveDetailRow","updateCommandAdaptiveAriaLabel","getRowElement","setCommandAdaptiveAriaLabel","labelName","$adaptiveCommand","format","keyboardNavigation","Base","isClick","_processNextCellInMasterDetail","isCellOrBatchMode","_isInsideEditForm","_isCellElement","_getCellTemplate","_adaptiveColumnsController","_createRow","apply","arguments","_renderCells","hidingColumnsQueueLength","hiddenColumnsLength","last","_getColumnIndexByElementCore","closest","formItem","first","visibleWidth","getCell","cellPosition","rows","$adaptiveDetailItems","_getCellElement","columnIdentifier","getContextMenuItems","_super$getContextMenu","_columnHeadersView","targetElement","next","isClickableElement","$target","_super$isClickableEle","isClickable","exportExtender","_updateColumnWidth","columnsResizer","_pointCreated","point","cellsLength","currentColumn","nextColumnIndex","_getNextColumnIndex","nextColumn","hasHiddenColumnsOnly","hasAdaptiveHiddenWidth","currentColumnIndex","draggingHeader","location","sourceColumn","editing","_getFormEditItemTemplate","getColumnTemplate","_closeEditItem","$targetElement","$itemContents","_beforeUpdateItems","rowIndices","oldExpandRowIndex","getIndexByKey","_isForceRowAdaptiveExpand","_afterInsertRow","isRowEditMode","_collapseAdaptiveDetailRow","_cancelEditAdaptiveDetailRow","_afterSaveEditData","deferred","_validatingController","validate","isValid","resolve","promise","_beforeCancelEditData","_getRowIndicesForCascadeUpdating","_beforeCloseEditCellInBatchMode","expandedKey","_adaptiveExpandedKey","unshift","editRow","deleteRow","rowKey","getKeyByRowIndex","_processItems","change","changeType","expandRowIndex","newMode","splice","node","isNewRow","repaintChangesOnly","_getRowIndicesForExpand","lastRowIndex","oldExpandLoadedRowIndex","_items","newExpandLoadedRowIndex","oldKey","rowIndexDelta","getRowIndexDelta","updateItems","allowInvisibleRowIndices","editorFactory","_needHideBorder","_getFocusCellSelector","_getRevertTooltipsSelector","_isColumnVisible","getVisibleDataColumnsByBandColumn","bandColumnIndex","resizing","clearTimeout","_updateScrollableTimeoutID","_needBestFit","_correctColumnWidths","adaptiveController","oldHiddenColumns","hidingColumnsQueue","_toggleBestFitMode","isBestFit","_needStretch","adaptivityModule","defaultOptions","columnHidingEnabled","onAdaptiveDetailRowPreparing","controllers","adaptiveColumns","extenders","views","export"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/adaptivity/m_adaptivity.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/adaptivity/m_adaptivity.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport {\r\n    removeEvent\r\n} from \"../../../../common/core/events/remove\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport Guid from \"../../../../core/guid\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../../../core/utils/dom\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport Form from \"../../../../ui/form\";\r\nimport {\r\n    isMaterial\r\n} from \"../../../../ui/themes\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nconst COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\nconst ROWS_VIEW = \"rowsView\";\r\nconst FOOTER_VIEW = \"footerView\";\r\nconst COLUMN_VIEWS = [\"columnHeadersView\", ROWS_VIEW, FOOTER_VIEW];\r\nconst ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\r\nconst HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nconst ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\r\nconst FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\r\nconst FORM_ITEM_MODIFIED = \"dx-item-modified\";\r\nconst HIDDEN_COLUMN_CLASS = \"hidden-column\";\r\nconst ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\r\nconst ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\r\nconst COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\r\nconst ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\r\nconst ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\r\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nconst LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\r\nconst ADAPTIVE_COLUMN_NAME = \"adaptive\";\r\nconst EDIT_MODE_BATCH = \"batch\";\r\nconst EDIT_MODE_ROW = \"row\";\r\nconst EDIT_MODE_FORM = \"form\";\r\nconst EDIT_MODE_POPUP = \"popup\";\r\nconst REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\r\nconst GROUP_ROW_CLASS = \"dx-group-row\";\r\nconst EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\r\nconst COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\r\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\n\r\nfunction getColumnId(that, column) {\r\n    return that._columnsController.getColumnId(column)\r\n}\r\n\r\nfunction getDataCellElements($row) {\r\n    return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\")\r\n}\r\n\r\nfunction adaptiveCellTemplate(container, options) {\r\n    let $adaptiveColumnButton;\r\n    const $container = $(container);\r\n    const adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\r\n    if (\"data\" === options.rowType) {\r\n        $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(\"adaptive-more\"));\r\n        eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction((() => {\r\n            adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key)\r\n        })));\r\n        $adaptiveColumnButton.appendTo($container)\r\n    } else {\r\n        gridCoreUtils.setEmptyText($container)\r\n    }\r\n}\r\n\r\nfunction focusCellHandler(e) {\r\n    var _e$data;\r\n    const $nextCell = null === (_e$data = e.data) || void 0 === _e$data ? void 0 : _e$data.$nextCell;\r\n    eventsEngine.off($nextCell, \"focus\", focusCellHandler);\r\n    eventsEngine.trigger($nextCell, \"dxclick\")\r\n}\r\nexport class AdaptiveColumnsController extends modules.ViewController {\r\n    init() {\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._dataController = this.getController(\"data\");\r\n        this._editingController = this.getController(\"editing\");\r\n        this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._columnsController.addCommandColumn({\r\n            type: \"adaptive\",\r\n            command: \"adaptive\",\r\n            visible: true,\r\n            adaptiveHidden: true,\r\n            cssClass: \"dx-command-adaptive\",\r\n            alignment: \"center\",\r\n            width: \"auto\",\r\n            cellTemplate: adaptiveCellTemplate,\r\n            fixedPosition: \"right\"\r\n        });\r\n        this._columnsController.columnsChanged.add((() => {\r\n            const isAdaptiveVisible = !!this.updateHidingQueue(this._columnsController.getColumns()).length;\r\n            this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true)\r\n        }));\r\n        this._hidingColumnsQueue = [];\r\n        this._hiddenColumns = [];\r\n        this.createAction(\"onAdaptiveDetailRowPreparing\");\r\n        super.init()\r\n    }\r\n    optionChanged(args) {\r\n        if (\"columnHidingEnabled\" === args.name) {\r\n            this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value)\r\n        }\r\n        super.optionChanged(args)\r\n    }\r\n    publicMethods() {\r\n        return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"]\r\n    }\r\n    _isRowEditMode() {\r\n        const editMode = this._getEditMode();\r\n        return \"row\" === editMode\r\n    }\r\n    _isItemModified(item, cellOptions) {\r\n        const columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n        const rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\r\n        const row = this._dataController.items()[rowIndex + 1];\r\n        return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex])\r\n    }\r\n    _renderFormViewTemplate(item, cellOptions, $container) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = item;\r\n        const focusAction = that.createAction((() => {\r\n            if (that._editingController.isEditing()) {\r\n                eventsEngine.trigger($container, clickEventName)\r\n            }\r\n        }));\r\n        const rowData = cellOptions.row.data;\r\n        const value = column.calculateCellValue(rowData);\r\n        const displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, cellOptions.rowType);\r\n        const text = gridCoreUtils.formatValue(displayValue, column);\r\n        const isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\r\n        const rowsView = that._rowsView;\r\n        if (column.allowEditing && this._keyboardNavigationController.isKeyboardEnabled()) {\r\n            $container.attr(\"tabIndex\", that.option(\"tabIndex\"));\r\n            if (isCellOrBatchEditMode) {\r\n                eventsEngine.off($container, \"focus\", focusAction);\r\n                eventsEngine.on($container, \"focus\", focusAction)\r\n            }\r\n        }\r\n        if (column.cellTemplate) {\r\n            const templateOptions = extend({}, cellOptions, {\r\n                value: value,\r\n                displayValue: displayValue,\r\n                text: text,\r\n                column: column\r\n            });\r\n            rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isElementInDom($container)).done((() => {\r\n                rowsView._cellPrepared($container, cellOptions)\r\n            }))\r\n        } else {\r\n            const container = $container.get(0);\r\n            if (column.encodeHtml) {\r\n                container.textContent = text\r\n            } else {\r\n                container.innerHTML = text\r\n            }\r\n            $container.addClass(\"dx-adaptive-item-text\");\r\n            if (!isDefined(text) || \"\" === text) {\r\n                $container.html(\"&nbsp;\")\r\n            }\r\n            if (!that._isRowEditMode()) {\r\n                if (that._isItemModified(item, cellOptions)) {\r\n                    $container.addClass(\"dx-item-modified\")\r\n                }\r\n            }\r\n            rowsView._cellPrepared($container, cellOptions)\r\n        }\r\n    }\r\n    _getTemplate(item, cellOptions, updateForm) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = item;\r\n        const editingController = this._editingController;\r\n        return function(options, container) {\r\n            const $container = $(container);\r\n            const columnIndex = that._columnsController.getVisibleIndex(column.index);\r\n            const templateOptions = extend({}, cellOptions);\r\n            const renderFormTemplate = function() {\r\n                const isItemEdited = that._isItemEdited(item);\r\n                templateOptions.value = cellOptions.row.values[columnIndex];\r\n                if (isItemEdited || column.showEditorAlways) {\r\n                    editingController.renderFormEditorTemplate(templateOptions, item, options, $container, !isItemEdited)\r\n                } else {\r\n                    templateOptions.column = column;\r\n                    templateOptions.columnIndex = columnIndex;\r\n                    that._renderFormViewTemplate(item, templateOptions, $container)\r\n                }\r\n            };\r\n            renderFormTemplate();\r\n            if (templateOptions.watch) {\r\n                const dispose = templateOptions.watch((() => ({\r\n                    isItemEdited: that._isItemEdited(item),\r\n                    value: cellOptions.row.values[columnIndex]\r\n                })), (() => {\r\n                    $container.contents().remove();\r\n                    $container.removeClass(\"dx-adaptive-item-text\");\r\n                    renderFormTemplate()\r\n                }));\r\n                eventsEngine.on($container, removeEvent, dispose)\r\n            }\r\n        }\r\n    }\r\n    _isVisibleColumnsValid(visibleColumns) {\r\n        if (visibleColumns < 2) {\r\n            return false\r\n        }\r\n        if (visibleColumns.length - function() {\r\n                let result = 0;\r\n                for (let j = 0; j < visibleColumns.length; j++) {\r\n                    const visibleColumn = visibleColumns[j];\r\n                    if (visibleColumn.command) {\r\n                        result++\r\n                    }\r\n                }\r\n                return result\r\n            }() <= 1) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    _calculatePercentWidths(widths, visibleColumns) {\r\n        const that = this;\r\n        let percentWidths = 0;\r\n        visibleColumns.forEach(((item, index) => {\r\n            if (\"adaptiveHidden\" !== widths[index]) {\r\n                percentWidths += that._getItemPercentWidth(item)\r\n            }\r\n        }));\r\n        return percentWidths\r\n    }\r\n    _isPercentWidth(width) {\r\n        return isString(width) && width.endsWith(\"%\")\r\n    }\r\n    _isColumnHidden(column) {\r\n        return this._hiddenColumns.filter((hiddenColumn => hiddenColumn.index === column.index)).length > 0\r\n    }\r\n    _getAverageColumnsWidth(containerWidth, columns, columnsCanFit) {\r\n        const that = this;\r\n        let fixedColumnsWidth = 0;\r\n        let columnsWithoutFixedWidthCount = 0;\r\n        columns.forEach((column => {\r\n            if (!that._isColumnHidden(column)) {\r\n                const {\r\n                    width: width\r\n                } = column;\r\n                if (isDefined(width) && !isNaN(parseFloat(width))) {\r\n                    fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\r\n                        visibleIndex: column.visibleIndex,\r\n                        columnsCount: columns.length,\r\n                        columnsCanFit: columnsCanFit,\r\n                        bestFitWidth: column.bestFitWidth,\r\n                        columnWidth: width,\r\n                        containerWidth: containerWidth\r\n                    }) : parseFloat(width)\r\n                } else {\r\n                    columnsWithoutFixedWidthCount++\r\n                }\r\n            }\r\n        }));\r\n        return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount\r\n    }\r\n    _calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\r\n        const columnId = getColumnId(this, column);\r\n        const widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        const bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        const columnsCount = contentColumns.length;\r\n        let colWidth;\r\n        if (widthOption && \"auto\" !== widthOption) {\r\n            if (this._isPercentWidth(widthOption)) {\r\n                colWidth = this._calculatePercentWidth({\r\n                    visibleIndex: column.visibleIndex,\r\n                    columnsCount: columnsCount,\r\n                    columnsCanFit: columnsCanFit,\r\n                    bestFitWidth: bestFitWidth,\r\n                    columnWidth: widthOption,\r\n                    containerWidth: containerWidth\r\n                })\r\n            } else {\r\n                return parseFloat(widthOption)\r\n            }\r\n        } else {\r\n            const columnAutoWidth = this.option(\"columnAutoWidth\");\r\n            colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit)\r\n        }\r\n        return colWidth\r\n    }\r\n    _calculatePercentWidth(options) {\r\n        const columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\r\n        const partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\r\n        const resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\r\n        return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth\r\n    }\r\n    _getNotTruncatedColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\r\n        const columnId = getColumnId(this, column);\r\n        const widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        const bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\r\n            return parseFloat(widthOption)\r\n        }\r\n        const colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\r\n        return colWidth < bestFitWidth ? null : colWidth\r\n    }\r\n    _getItemPercentWidth(item) {\r\n        let result = 0;\r\n        if (item.width && this._isPercentWidth(item.width)) {\r\n            result = parseFloat(item.width)\r\n        }\r\n        return result\r\n    }\r\n    _getCommandColumnsWidth() {\r\n        const that = this;\r\n        const columns = that._columnsController.getVisibleColumns();\r\n        let colWidth = 0;\r\n        each(columns, ((index, column) => {\r\n            if (column.index < 0 || column.command) {\r\n                colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0\r\n            }\r\n        }));\r\n        return colWidth\r\n    }\r\n    _isItemEdited(item) {\r\n        if (this.isFormOrPopupEditMode()) {\r\n            return false\r\n        }\r\n        if (this._isRowEditMode()) {\r\n            const editRowKey = this.option(\"editing.editRowKey\");\r\n            if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\r\n                return true\r\n            }\r\n        } else {\r\n            const rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n            const columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n            return this._editingController.isEditCell(rowIndex, columnIndex)\r\n        }\r\n        return\r\n    }\r\n    _getFormItemsByHiddenColumns(hiddenColumns) {\r\n        const items = [];\r\n        each(hiddenColumns, ((_, column) => {\r\n            items.push({\r\n                column: column,\r\n                name: column.name,\r\n                dataField: column.dataField,\r\n                visibleIndex: column.visibleIndex\r\n            })\r\n        }));\r\n        return items\r\n    }\r\n    _getAdaptiveColumnVisibleIndex(visibleColumns) {\r\n        for (let i = 0; i < visibleColumns.length; i++) {\r\n            const column = visibleColumns[i];\r\n            if (\"adaptive\" === column.command) {\r\n                return i\r\n            }\r\n        }\r\n        return\r\n    }\r\n    _hideAdaptiveColumn(resultWidths, visibleColumns) {\r\n        const visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\r\n        if (isDefined(visibleIndex)) {\r\n            resultWidths[visibleIndex] = \"adaptiveHidden\";\r\n            this._hideVisibleColumn({\r\n                isCommandColumn: true,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }\r\n    }\r\n    _showHiddenCellsInView(_ref) {\r\n        let {\r\n            $cells: $cells,\r\n            isCommandColumn: isCommandColumn\r\n        } = _ref;\r\n        let cssClassNameToRemove = this.addWidgetPrefix(\"hidden-column\");\r\n        if (isCommandColumn) {\r\n            cssClassNameToRemove = \"dx-command-adaptive-hidden\";\r\n            $cells.attr({\r\n                tabIndex: 0,\r\n                \"aria-hidden\": null\r\n            }).removeClass(cssClassNameToRemove)\r\n        } else {\r\n            $cells.removeClass(cssClassNameToRemove)\r\n        }\r\n    }\r\n    _showHiddenColumns() {\r\n        for (let i = 0; i < COLUMN_VIEWS.length; i++) {\r\n            const view = this.getView(COLUMN_VIEWS[i]);\r\n            if (view && view.isVisible() && view.element()) {\r\n                const viewName = view.name;\r\n                const $hiddenCommandCells = view.element().find(\".dx-command-adaptive-hidden\");\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCommandCells,\r\n                    isCommandColumn: true\r\n                });\r\n                const $hiddenCells = view.element().find(`.${this.addWidgetPrefix(\"hidden-column\")}`);\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCells\r\n                })\r\n            }\r\n        }\r\n    }\r\n    _isCellValid($cell) {\r\n        return $cell && $cell.length && !$cell.hasClass(\"dx-master-detail-cell\") && !$cell.hasClass(\"dx-group-cell\")\r\n    }\r\n    _hideVisibleColumn(_ref2) {\r\n        let {\r\n            isCommandColumn: isCommandColumn,\r\n            visibleIndex: visibleIndex\r\n        } = _ref2;\r\n        const that = this;\r\n        COLUMN_VIEWS.forEach((viewName => {\r\n            const view = that.getView(viewName);\r\n            view && that._hideVisibleColumnInView({\r\n                view: view,\r\n                isCommandColumn: isCommandColumn,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }))\r\n    }\r\n    _hideVisibleColumnInView(_ref3) {\r\n        let {\r\n            view: view,\r\n            isCommandColumn: isCommandColumn,\r\n            visibleIndex: visibleIndex\r\n        } = _ref3;\r\n        const viewName = view.name;\r\n        let $cellElement;\r\n        const column = this._columnsController.getVisibleColumns()[visibleIndex];\r\n        const editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\r\n        if (view && view.isVisible() && column) {\r\n            const rowsCount = view.getRowsCount();\r\n            const $rowElements = view._getRowElements();\r\n            for (let rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\r\n                const cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\r\n                if (!cancelClassAdding) {\r\n                    const currentVisibleIndex = \"columnHeadersView\" === viewName ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\r\n                    if (currentVisibleIndex >= 0) {\r\n                        const $rowElement = $rowElements.eq(rowIndex);\r\n                        $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\r\n                        this._isCellValid($cellElement) && this._hideVisibleCellInView({\r\n                            viewName: viewName,\r\n                            isCommandColumn: isCommandColumn,\r\n                            $cell: $cellElement\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _findCellElementInRow($rowElement, visibleColumnIndex) {\r\n        const $rowCells = $rowElement.children();\r\n        let visibleIndex = visibleColumnIndex;\r\n        let cellIsInsideGroup = false;\r\n        if ($rowElement.hasClass(\"dx-group-row\")) {\r\n            const $groupCell = $rowElement.find(\".dx-group-cell\");\r\n            const colSpan = $groupCell.attr(\"colspan\");\r\n            if ($groupCell.length && isDefined(colSpan)) {\r\n                const groupCellLength = parseInt(colSpan);\r\n                const endGroupIndex = $groupCell.index() + groupCellLength - 1;\r\n                if (visibleColumnIndex > endGroupIndex) {\r\n                    visibleIndex = visibleColumnIndex - groupCellLength + 1\r\n                } else {\r\n                    cellIsInsideGroup = true\r\n                }\r\n            }\r\n        }\r\n        const $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\r\n        return $cellElement\r\n    }\r\n    _hideVisibleCellInView(_ref4) {\r\n        let {\r\n            $cell: $cell,\r\n            isCommandColumn: isCommandColumn\r\n        } = _ref4;\r\n        const cssClassNameToAdd = isCommandColumn ? \"dx-command-adaptive-hidden\" : this.addWidgetPrefix(\"hidden-column\");\r\n        $cell.attr({\r\n            tabIndex: -1,\r\n            \"aria-hidden\": true\r\n        }).addClass(cssClassNameToAdd)\r\n    }\r\n    _getEditMode() {\r\n        return this._editingController.getEditMode()\r\n    }\r\n    isFormOrPopupEditMode() {\r\n        const editMode = this._getEditMode();\r\n        return \"form\" === editMode || \"popup\" === editMode\r\n    }\r\n    hideRedundantColumns(resultWidths, visibleColumns, hiddenQueue) {\r\n        const that = this;\r\n        this._hiddenColumns = [];\r\n        if (that._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\r\n            let totalWidth = 0;\r\n            const $rootElement = that.component.$element();\r\n            let rootElementWidth = getWidth($rootElement) - that._getCommandColumnsWidth();\r\n            const getVisibleContentColumns = function() {\r\n                return visibleColumns.filter((item => !item.command && 0 === this._hiddenColumns.filter((i => i.index === item.index)).length))\r\n            }.bind(this);\r\n            let visibleContentColumns = getVisibleContentColumns();\r\n            const contentColumnsCount = visibleContentColumns.length;\r\n            let i;\r\n            let hasHiddenColumns;\r\n            let needHideColumn;\r\n            do {\r\n                needHideColumn = false;\r\n                totalWidth = 0;\r\n                const percentWidths = that._calculatePercentWidths(resultWidths, visibleColumns);\r\n                const columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\r\n                for (i = 0; i < visibleColumns.length; i++) {\r\n                    const visibleColumn = visibleColumns[i];\r\n                    let columnWidth = that._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    const columnId = getColumnId(that, visibleColumn);\r\n                    const widthOption = that._columnsController.columnOption(columnId, \"width\");\r\n                    const minWidth = that._columnsController.columnOption(columnId, \"minWidth\");\r\n                    const columnBestFitWidth = that._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n                    if (\"adaptiveHidden\" === resultWidths[i]) {\r\n                        hasHiddenColumns = true;\r\n                        continue\r\n                    }\r\n                    if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\r\n                        needHideColumn = true;\r\n                        break\r\n                    }\r\n                    if (!widthOption || \"auto\" === widthOption) {\r\n                        columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0)\r\n                    }\r\n                    if (\"adaptive\" !== visibleColumn.command || hasHiddenColumns) {\r\n                        totalWidth += columnWidth\r\n                    }\r\n                }\r\n                needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\r\n                if (needHideColumn) {\r\n                    const column = hiddenQueue.pop();\r\n                    const visibleIndex = that._columnsController.getVisibleIndex(column.index);\r\n                    rootElementWidth += that._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    that._hideVisibleColumn({\r\n                        visibleIndex: visibleIndex\r\n                    });\r\n                    resultWidths[visibleIndex] = \"adaptiveHidden\";\r\n                    this._hiddenColumns.push(column);\r\n                    visibleContentColumns = getVisibleContentColumns()\r\n                }\r\n            } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\r\n            if (contentColumnsCount === visibleContentColumns.length) {\r\n                that._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n            }\r\n        } else {\r\n            that._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n        }\r\n    }\r\n    getAdaptiveDetailItems() {\r\n        return this._$itemContents\r\n    }\r\n    getItemContentByColumnIndex(visibleColumnIndex) {\r\n        let $itemContent;\r\n        for (let i = 0; i < this._$itemContents.length; i++) {\r\n            $itemContent = this._$itemContents.eq(i);\r\n            const item = $itemContent.data(\"dx-form-item\");\r\n            if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\r\n                return $itemContent\r\n            }\r\n        }\r\n    }\r\n    toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\r\n        if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\r\n            this._dataController.toggleExpandAdaptiveDetailRow(key, alwaysExpanded)\r\n        }\r\n    }\r\n    createFormByHiddenColumns(container, options) {\r\n        const that = this;\r\n        const $container = $(container);\r\n        const userFormOptions = {\r\n            items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\r\n            formID: `dx-${new Guid}`\r\n        };\r\n        const defaultFormOptions = isMaterial() ? {\r\n            colCount: 2\r\n        } : {};\r\n        this.executeAction(\"onAdaptiveDetailRowPreparing\", {\r\n            formOptions: userFormOptions\r\n        });\r\n        that._$itemContents = null;\r\n        that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\r\n            customizeItem(item) {\r\n                const column = item.column || that._columnsController.columnOption(item.name || item.dataField);\r\n                if (column) {\r\n                    item.label = item.label || {};\r\n                    item.label.text = item.label.text || column.caption;\r\n                    item.column = column;\r\n                    item.template = that._getTemplate(item, options, that.updateForm.bind(that))\r\n                }\r\n                userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item)\r\n            },\r\n            onContentReady(e) {\r\n                userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\r\n                that._$itemContents = $container.find(\".dx-field-item-content\")\r\n            }\r\n        }))\r\n    }\r\n    hasAdaptiveDetailRowExpanded() {\r\n        return isDefined(this._dataController.adaptiveExpandedKey())\r\n    }\r\n    updateForm(hiddenColumns) {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            if (this._form && isDefined(this._form._contentReadyAction)) {\r\n                if (hiddenColumns && hiddenColumns.length) {\r\n                    this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns))\r\n                } else {\r\n                    this._form.repaint()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateHidingQueue(columns) {\r\n        const that = this;\r\n        const hideableColumns = columns.filter((column => column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0)));\r\n        let columnsHasHidingPriority;\r\n        let i;\r\n        that._hidingColumnsQueue = [];\r\n        if (that.option(\"allowColumnResizing\") && \"widget\" === that.option(\"columnResizingMode\")) {\r\n            return that._hidingColumnsQueue\r\n        }\r\n        for (i = 0; i < hideableColumns.length; i++) {\r\n            if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\r\n                columnsHasHidingPriority = true;\r\n                that._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i]\r\n            }\r\n        }\r\n        if (columnsHasHidingPriority) {\r\n            that._hidingColumnsQueue.reverse()\r\n        } else if (that.option(\"columnHidingEnabled\")) {\r\n            for (i = 0; i < hideableColumns.length; i++) {\r\n                const visibleIndex = that._columnsController.getVisibleIndex(hideableColumns[i].index);\r\n                that._hidingColumnsQueue[visibleIndex] = hideableColumns[i]\r\n            }\r\n        }\r\n        that._hidingColumnsQueue = that._hidingColumnsQueue.filter(Object);\r\n        return that._hidingColumnsQueue\r\n    }\r\n    getHiddenColumns() {\r\n        return this._hiddenColumns\r\n    }\r\n    hasHiddenColumns() {\r\n        return this._hiddenColumns.length > 0\r\n    }\r\n    getHidingColumnsQueue() {\r\n        return this._hidingColumnsQueue\r\n    }\r\n    isAdaptiveDetailRowExpanded(key) {\r\n        const dataController = this._dataController;\r\n        return dataController.adaptiveExpandedKey() && equalByValue(dataController.adaptiveExpandedKey(), key)\r\n    }\r\n    expandAdaptiveDetailRow(key) {\r\n        if (!this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow(key)\r\n        }\r\n    }\r\n    collapseAdaptiveDetailRow() {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow()\r\n        }\r\n    }\r\n    updateCommandAdaptiveAriaLabel(key, label) {\r\n        const rowIndex = this._dataController.getRowIndexByKey(key);\r\n        if (-1 === rowIndex) {\r\n            return\r\n        }\r\n        const $row = $(this.component.getRowElement(rowIndex));\r\n        this.setCommandAdaptiveAriaLabel($row, label)\r\n    }\r\n    setCommandAdaptiveAriaLabel($row, labelName) {\r\n        const $adaptiveCommand = $row.find(\".dx-command-adaptive\");\r\n        $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName))\r\n    }\r\n}\r\nconst keyboardNavigation = Base => class extends Base {\r\n    _isCellValid($cell, isClick) {\r\n        return super._isCellValid($cell, isClick) && !$cell.hasClass(this.addWidgetPrefix(\"hidden-column\")) && !$cell.hasClass(\"dx-command-adaptive-hidden\")\r\n    }\r\n    _processNextCellInMasterDetail($nextCell, $cell) {\r\n        super._processNextCellInMasterDetail($nextCell, $cell);\r\n        const isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\r\n        const isEditing = this._editingController.isEditing();\r\n        if (isEditing && $nextCell && isCellOrBatchMode && !this._isInsideEditForm($nextCell)) {\r\n            eventsEngine.off($nextCell, \"focus\", focusCellHandler);\r\n            eventsEngine.on($nextCell, \"focus\", {\r\n                $nextCell: $nextCell\r\n            }, focusCellHandler);\r\n            eventsEngine.trigger($cell, \"focus\")\r\n        }\r\n    }\r\n    _isCellElement($cell) {\r\n        return super._isCellElement($cell) || $cell.hasClass(\"dx-adaptive-item-text\")\r\n    }\r\n};\r\nconst rowsView = Base => class extends Base {\r\n    _getCellTemplate(options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        if (\"detailAdaptive\" === options.rowType && \"detail\" === column.command) {\r\n            return function(container, options) {\r\n                that._adaptiveColumnsController.createFormByHiddenColumns($(container), options)\r\n            }\r\n        }\r\n        return super._getCellTemplate(options)\r\n    }\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (row && \"detailAdaptive\" === row.rowType && row.key === this._dataController.adaptiveExpandedKey()) {\r\n            $row.addClass(\"dx-adaptive-detail-row\")\r\n        }\r\n        return $row\r\n    }\r\n    _renderCells($row, options) {\r\n        super._renderCells($row, options);\r\n        const adaptiveColumnsController = this._adaptiveColumnsController;\r\n        const hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\r\n        const hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\r\n        if (hidingColumnsQueueLength && !hiddenColumnsLength) {\r\n            getDataCellElements($row).last().addClass(\"dx-last-data-cell\")\r\n        }\r\n        if (\"data\" === options.row.rowType) {\r\n            adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME)\r\n        }\r\n    }\r\n    _getColumnIndexByElementCore($element) {\r\n        const $itemContent = $element.closest(\".dx-field-item-content\");\r\n        if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\r\n            const formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\r\n            return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index)\r\n        }\r\n        return super._getColumnIndexByElementCore($element)\r\n    }\r\n    _cellPrepared($cell, options) {\r\n        super._cellPrepared.apply(this, arguments);\r\n        if (\"detailAdaptive\" !== options.row.rowType && \"adaptiveHidden\" === options.column.visibleWidth) {\r\n            $cell.addClass(this.addWidgetPrefix(\"hidden-column\"))\r\n        }\r\n    }\r\n    getCell(cellPosition, rows) {\r\n        const item = this._dataController.items()[null === cellPosition || void 0 === cellPosition ? void 0 : cellPosition.rowIndex];\r\n        if (\"detailAdaptive\" === (null === item || void 0 === item ? void 0 : item.rowType)) {\r\n            const $adaptiveDetailItems = this._adaptiveColumnsController.getAdaptiveDetailItems();\r\n            return super.getCell(cellPosition, rows, $adaptiveDetailItems)\r\n        }\r\n        return super.getCell.apply(this, arguments)\r\n    }\r\n    _getCellElement(rowIndex, columnIdentifier) {\r\n        const item = this._dataController.items()[rowIndex];\r\n        if (item && \"detailAdaptive\" === item.rowType) {\r\n            return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier)\r\n        }\r\n        return super._getCellElement.apply(this, arguments)\r\n    }\r\n    getContextMenuItems(options) {\r\n        var _super$getContextMenu;\r\n        if (options.row && \"detailAdaptive\" === options.row.rowType) {\r\n            const view = this._columnHeadersView;\r\n            const formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\r\n            options.column = formItem ? formItem.column : options.column;\r\n            return view.getContextMenuItems && view.getContextMenuItems(options)\r\n        }\r\n        return null === (_super$getContextMenu = super.getContextMenuItems) || void 0 === _super$getContextMenu ? void 0 : _super$getContextMenu.call(this, options)\r\n    }\r\n    isClickableElement($target) {\r\n        var _super$isClickableEle;\r\n        const isClickable = (null === (_super$isClickableEle = super.isClickableElement) || void 0 === _super$isClickableEle ? void 0 : _super$isClickableEle.call(this, $target)) ?? false;\r\n        return isClickable || !!$target.closest(\".dx-command-adaptive\").length\r\n    }\r\n};\r\nconst exportExtender = Base => class extends Base {\r\n    _updateColumnWidth(column, width) {\r\n        super._updateColumnWidth(column, \"adaptiveHidden\" === column.visibleWidth ? column.bestFitWidth : width)\r\n    }\r\n};\r\nconst columnsResizer = Base => class extends Base {\r\n    _pointCreated(point, cellsLength, columns) {\r\n        const result = super._pointCreated(point, cellsLength, columns);\r\n        const currentColumn = columns[point.columnIndex] || {};\r\n        const nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\r\n        const nextColumn = columns[nextColumnIndex] || {};\r\n        const hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\r\n        const hasAdaptiveHiddenWidth = \"adaptiveHidden\" === currentColumn.visibleWidth || hasHiddenColumnsOnly;\r\n        return result || hasAdaptiveHiddenWidth\r\n    }\r\n    _getNextColumnIndex(currentColumnIndex) {\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        let index = super._getNextColumnIndex(currentColumnIndex);\r\n        while (visibleColumns[index] && \"adaptiveHidden\" === visibleColumns[index].visibleWidth) {\r\n            index++\r\n        }\r\n        return index\r\n    }\r\n};\r\nconst draggingHeader = Base => class extends Base {\r\n    _pointCreated(point, columns, location, sourceColumn) {\r\n        const result = super._pointCreated(point, columns, location, sourceColumn);\r\n        const column = columns[point.columnIndex - 1] || {};\r\n        const hasAdaptiveHiddenWidth = \"adaptiveHidden\" === column.visibleWidth;\r\n        return result || hasAdaptiveHiddenWidth\r\n    }\r\n};\r\nconst editing = Base => class extends Base {\r\n    _isRowEditMode() {\r\n        return \"row\" === this.getEditMode()\r\n    }\r\n    _getFormEditItemTemplate(cellOptions, column) {\r\n        if (\"row\" !== this.getEditMode() && \"detailAdaptive\" === cellOptions.rowType) {\r\n            cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\r\n            return this.getColumnTemplate(cellOptions)\r\n        }\r\n        return super._getFormEditItemTemplate(cellOptions, column)\r\n    }\r\n    _closeEditItem($targetElement) {\r\n        const $itemContents = $targetElement.closest(\".dx-field-item-content\");\r\n        const rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n        const formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\r\n        const columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\r\n        if (!this.isEditCell(rowIndex, columnIndex)) {\r\n            super._closeEditItem($targetElement)\r\n        }\r\n    }\r\n    _beforeUpdateItems(rowIndices, rowIndex) {\r\n        if (!this._adaptiveColumnsController.isFormOrPopupEditMode() && this._adaptiveColumnsController.hasHiddenColumns()) {\r\n            const items = this._dataController.items();\r\n            const item = items[rowIndex];\r\n            const oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\r\n            this._isForceRowAdaptiveExpand = !this._adaptiveColumnsController.hasAdaptiveDetailRowExpanded();\r\n            if (oldExpandRowIndex >= 0) {\r\n                rowIndices.push(oldExpandRowIndex + 1)\r\n            }\r\n            rowIndices.push(rowIndex + 1);\r\n            this._dataController.adaptiveExpandedKey(item.key)\r\n        }\r\n    }\r\n    _afterInsertRow(key) {\r\n        super._afterInsertRow.apply(this, arguments);\r\n        if (this._adaptiveColumnsController.hasHiddenColumns()) {\r\n            this._adaptiveColumnsController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\r\n            this._isForceRowAdaptiveExpand = true\r\n        }\r\n    }\r\n    _collapseAdaptiveDetailRow() {\r\n        if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\r\n            this._adaptiveColumnsController.collapseAdaptiveDetailRow();\r\n            this._isForceRowAdaptiveExpand = false\r\n        }\r\n    }\r\n    _cancelEditAdaptiveDetailRow() {\r\n        if (this._adaptiveColumnsController.hasHiddenColumns()) {\r\n            this._collapseAdaptiveDetailRow()\r\n        }\r\n    }\r\n    _afterSaveEditData() {\r\n        super._afterSaveEditData.apply(this, arguments);\r\n        const deferred = new Deferred;\r\n        if (this._isRowEditMode() && this._adaptiveColumnsController.hasHiddenColumns()) {\r\n            when(this._validatingController.validate(true)).done((isValid => {\r\n                if (isValid) {\r\n                    this._cancelEditAdaptiveDetailRow()\r\n                }\r\n                deferred.resolve()\r\n            }))\r\n        } else {\r\n            deferred.resolve()\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    _beforeCancelEditData() {\r\n        super._beforeCancelEditData();\r\n        this._cancelEditAdaptiveDetailRow()\r\n    }\r\n    _getRowIndicesForCascadeUpdating(row) {\r\n        const rowIndices = super._getRowIndicesForCascadeUpdating.apply(this, arguments);\r\n        if (this._adaptiveColumnsController.isAdaptiveDetailRowExpanded(row.key)) {\r\n            rowIndices.push(\"detailAdaptive\" === row.rowType ? row.rowIndex - 1 : row.rowIndex + 1)\r\n        }\r\n        return rowIndices\r\n    }\r\n    _beforeCloseEditCellInBatchMode(rowIndices) {\r\n        const expandedKey = this._dataController._adaptiveExpandedKey;\r\n        if (expandedKey) {\r\n            const rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\r\n            if (rowIndex > -1) {\r\n                rowIndices.unshift(rowIndex)\r\n            }\r\n        }\r\n    }\r\n    editRow(rowIndex) {\r\n        if (this._adaptiveColumnsController.isFormOrPopupEditMode()) {\r\n            this._adaptiveColumnsController.collapseAdaptiveDetailRow()\r\n        }\r\n        return super.editRow(rowIndex)\r\n    }\r\n    deleteRow(rowIndex) {\r\n        const rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n        if (\"batch\" === this.getEditMode() && this._adaptiveColumnsController.isAdaptiveDetailRowExpanded(rowKey)) {\r\n            this._adaptiveColumnsController.collapseAdaptiveDetailRow()\r\n        }\r\n        super.deleteRow(rowIndex)\r\n    }\r\n};\r\nconst data = Base => class extends Base {\r\n    init() {\r\n        super.init();\r\n        this._adaptiveExpandedKey = void 0\r\n    }\r\n    _processItems(items, change) {\r\n        const {\r\n            changeType: changeType\r\n        } = change;\r\n        items = super._processItems.apply(this, arguments);\r\n        if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\r\n            return items\r\n        }\r\n        const expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\r\n        const newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n        if (expandRowIndex >= 0) {\r\n            const item = items[expandRowIndex];\r\n            items.splice(expandRowIndex + 1, 0, {\r\n                visible: true,\r\n                rowType: \"detailAdaptive\",\r\n                key: item.key,\r\n                data: item.data,\r\n                node: item.node,\r\n                modifiedValues: item.modifiedValues,\r\n                isNewRow: item.isNewRow,\r\n                values: item.values\r\n            })\r\n        } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\r\n            this._adaptiveExpandedKey = void 0\r\n        }\r\n        return items\r\n    }\r\n    _getRowIndicesForExpand(key) {\r\n        const rowIndices = super._getRowIndicesForExpand.apply(this, arguments);\r\n        if (this._adaptiveColumnsController.isAdaptiveDetailRowExpanded(key)) {\r\n            const lastRowIndex = rowIndices[rowIndices.length - 1];\r\n            rowIndices.push(lastRowIndex + 1)\r\n        }\r\n        return rowIndices\r\n    }\r\n    adaptiveExpandedKey(value) {\r\n        if (isDefined(value)) {\r\n            this._adaptiveExpandedKey = value\r\n        } else {\r\n            return this._adaptiveExpandedKey\r\n        }\r\n    }\r\n    toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\r\n        let oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\r\n        let newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\r\n        if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\r\n            key = void 0;\r\n            newExpandLoadedRowIndex = -1\r\n        }\r\n        const oldKey = this._adaptiveExpandedKey;\r\n        this._adaptiveExpandedKey = key;\r\n        if (oldExpandLoadedRowIndex >= 0) {\r\n            oldExpandLoadedRowIndex++\r\n        }\r\n        if (newExpandLoadedRowIndex >= 0) {\r\n            newExpandLoadedRowIndex++\r\n        }\r\n        const rowIndexDelta = this.getRowIndexDelta();\r\n        this.updateItems({\r\n            allowInvisibleRowIndices: true,\r\n            changeType: \"update\",\r\n            rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\r\n        });\r\n        this._adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\r\n        this._adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME)\r\n    }\r\n};\r\nconst editorFactory = Base => class extends Base {\r\n    _needHideBorder($element) {\r\n        return super._needHideBorder($element) || (null === $element || void 0 === $element ? void 0 : $element.hasClass(\"dx-field-item-content\")) && (null === $element || void 0 === $element ? void 0 : $element.find(\".dx-checkbox\").length)\r\n    }\r\n    _getFocusCellSelector() {\r\n        return `${super._getFocusCellSelector()}, .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content`\r\n    }\r\n    _getRevertTooltipsSelector() {\r\n        return `${super._getRevertTooltipsSelector()}, .dx-field-item-content .${this.addWidgetPrefix(\"revert-tooltip\")}`\r\n    }\r\n};\r\nconst columns = Base => class extends Base {\r\n    _isColumnVisible(column) {\r\n        return super._isColumnVisible(column) && !column.adaptiveHidden\r\n    }\r\n    getVisibleDataColumnsByBandColumn(bandColumnIndex) {\r\n        return super.getVisibleDataColumnsByBandColumn(bandColumnIndex).filter((column => \"adaptiveHidden\" !== column.visibleWidth))\r\n    }\r\n};\r\nconst resizing = Base => class extends Base {\r\n    dispose() {\r\n        super.dispose.apply(this, arguments);\r\n        clearTimeout(this._updateScrollableTimeoutID)\r\n    }\r\n    _needBestFit() {\r\n        return super._needBestFit() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length\r\n    }\r\n    _correctColumnWidths(resultWidths, visibleColumns) {\r\n        const adaptiveController = this._adaptiveColumnsController;\r\n        const oldHiddenColumns = adaptiveController.getHiddenColumns();\r\n        const hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\r\n        adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\r\n        const hiddenColumns = adaptiveController.getHiddenColumns();\r\n        if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\r\n            if (oldHiddenColumns.length !== hiddenColumns.length) {\r\n                adaptiveController.updateForm(hiddenColumns)\r\n            }\r\n        }!hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\r\n        return super._correctColumnWidths.apply(this, arguments)\r\n    }\r\n    _toggleBestFitMode(isBestFit) {\r\n        isBestFit && this._adaptiveColumnsController._showHiddenColumns();\r\n        super._toggleBestFitMode(isBestFit)\r\n    }\r\n    _needStretch() {\r\n        const adaptiveColumnsController = this._adaptiveColumnsController;\r\n        return super._needStretch.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns()\r\n    }\r\n};\r\nexport const adaptivityModule = {\r\n    defaultOptions: () => ({\r\n        columnHidingEnabled: false,\r\n        onAdaptiveDetailRowPreparing: null\r\n    }),\r\n    controllers: {\r\n        adaptiveColumns: AdaptiveColumnsController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: rowsView\r\n        },\r\n        controllers: {\r\n            export: exportExtender,\r\n            columnsResizer: columnsResizer,\r\n            draggingHeader: draggingHeader,\r\n            editing: editing,\r\n            resizing: resizing,\r\n            data: data,\r\n            editorFactory: editorFactory,\r\n            columns: columns,\r\n            keyboardNavigation: keyboardNavigation\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}