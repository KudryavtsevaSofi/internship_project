{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/keyboard_navigation/m_keyboard_navigation.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { name as clickEventName } from \"../../../../common/core/events/click\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport pointerEvents from \"../../../../common/core/events/pointer\";\nimport { keyboard } from \"../../../../common/core/events/short\";\nimport { addNamespace, createEvent, isCommandKeyPressed } from \"../../../../common/core/events/utils/index\";\nimport { noop } from \"../../../../core/utils/common\";\nimport domAdapter from \"../../../../core/dom_adapter\";\nimport { getPublicElement } from \"../../../../core/element\";\nimport $ from \"../../../../core/renderer\";\nimport browser from \"../../../../core/utils/browser\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth } from \"../../../../core/utils/size\";\nimport { isDeferred, isDefined, isEmptyObject } from \"../../../../core/utils/type\";\nimport * as accessibility from \"../../../../ui/shared/accessibility\";\nimport { focused } from \"../../../../ui/widget/selectors\";\nimport { isElementInDom } from \"../../../core/utils/m_dom\";\nimport { memoize } from \"../../../utils/memoize\";\nimport { EDIT_FORM_CLASS, EDIT_MODE_BATCH, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_ROW, EDITOR_CELL_CLASS, FILTER_ROW_CLASS, FOCUSABLE_ELEMENT_SELECTOR, ROW_CLASS } from \"../editing/const\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nimport { ADAPTIVE_COLUMN_NAME_CLASS, CELL_FOCUS_DISABLED_CLASS, COLUMN_HEADERS_VIEW, COMMAND_CELL_SELECTOR, COMMAND_EDIT_CLASS, COMMAND_EXPAND_CLASS, COMMAND_SELECT_CLASS, DATA_ROW_CLASS, DATEBOX_WIDGET_NAME, DROPDOWN_EDITOR_OVERLAY_CLASS, EDIT_FORM_ITEM_CLASS, FAST_EDITING_DELETE_KEY, FOCUS_STATE_CLASS, FOCUS_TYPE_CELL, FOCUS_TYPE_ROW, FOCUSED_CLASS, FREESPACE_ROW_CLASS, FUNCTIONAL_KEYS, INTERACTIVE_ELEMENTS_SELECTOR, MASTER_DETAIL_CELL_CLASS, NON_FOCUSABLE_ELEMENTS_SELECTOR, REVERT_BUTTON_CLASS, ROWS_VIEW, ROWS_VIEW_CLASS, TABLE_CLASS, WIDGET_CLASS } from \"./const\";\nimport { GridCoreKeyboardNavigationDom } from \"./dom\";\nimport { isCellInHeaderRow, isDataRow, isDetailRow, isEditForm, isEditorCell, isElementDefined, isFixedColumnIndexOffsetRequired, isGroupFooterRow, isGroupRow, isMobile, isNotFocusedRow, shouldPreventScroll } from \"./m_keyboard_navigation_utils\";\nimport { keyboardNavigationScrollableA11yExtender } from \"./scrollable_a11y\";\nexport class KeyboardNavigationController extends modules.ViewController {\n  init() {\n    this._dataController = this.getController(\"data\");\n    this._selectionController = this.getController(\"selection\");\n    this._editingController = this.getController(\"editing\");\n    this._headerPanel = this.getView(\"headerPanel\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._columnsController = this.getController(\"columns\");\n    this._editorFactory = this.getController(\"editorFactory\");\n    this._focusController = this.getController(\"focus\");\n    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n    this._columnResizerController = this.getController(\"columnsResizer\");\n    this._memoFireFocusedCellChanged = memoize(this._memoFireFocusedCellChanged.bind(this), {\n      compareType: \"value\"\n    });\n    this._memoFireFocusedRowChanged = memoize(this._memoFireFocusedRowChanged.bind(this), {\n      compareType: \"value\"\n    });\n    this.focusedHandlerWithContext = this.focusedHandlerWithContext || this.focusedHandler.bind(this);\n    this.columnHeadersViewRenderCompletedWithContext = this.columnHeadersViewRenderCompletedWithContext || this.columnHeadersViewRenderCompleted.bind(this);\n    this.rowsViewRenderCompletedWithContext = this.rowsViewRenderCompletedWithContext || this.rowsViewRenderCompleted.bind(this);\n    this.rowsViewFocusHandlerContext = this.rowsViewFocusHandlerContext || this.rowsViewFocusHandler.bind(this);\n    this.rowsViewFocusOutHandlerContext = this.rowsViewFocusOutHandlerContext ?? this.rowsViewFocusOutHandler.bind(this);\n    this._updateFocusTimeout = null;\n    this._fastEditingStarted = false;\n    this._focusedCellPosition = {};\n    this._canceledCellPosition = null;\n    if (this.isKeyboardEnabled()) {\n      var _this$_editorFactory;\n      accessibility.subscribeVisibilityChange();\n      null === (_this$_editorFactory = this._editorFactory) || void 0 === _this$_editorFactory || _this$_editorFactory.focused.add(this.focusedHandlerWithContext);\n      this.createAction(\"onKeyDown\");\n    } else {\n      var _this$_editorFactory2;\n      accessibility.unsubscribeVisibilityChange();\n      null === (_this$_editorFactory2 = this._editorFactory) || void 0 === _this$_editorFactory2 || _this$_editorFactory2.focused.remove(this.focusedHandlerWithContext);\n    }\n    this.initColumnHeadersViewHandler();\n    this.initRowsViewHandlers();\n    this.initDocumentHandlers();\n  }\n  dispose() {\n    super.dispose();\n    this._resetFocusedView();\n    keyboard.off(this._rowsViewKeyDownListener);\n    keyboard.off(this._columnHeadersViewKeyDownListener);\n    eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n    clearTimeout(this._updateFocusTimeout);\n    accessibility.unsubscribeVisibilityChange();\n  }\n  focusedHandler($element) {\n    this.setupFocusedView();\n    if (this._isNeedScroll) {\n      if ($element.is(\":visible\") && this._focusedView && this._focusedView.getScrollable()) {\n        this._focusedView._scrollToElement($element);\n        this._isNeedScroll = false;\n      }\n    }\n  }\n  rowsViewFocusHandler(event) {\n    const $element = $(event.target);\n    const isRelatedTargetInRowsView = $(event.relatedTarget).closest(this._rowsView.element()).length;\n    const isLink = $element.is(\"a\");\n    if (event.relatedTarget && isLink && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {\n      let $focusedCell = this._getFocusedCell();\n      $focusedCell = !isElementDefined($focusedCell) ? this._rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\n      if (!$element.closest($focusedCell).length) {\n        event.preventDefault();\n        eventsEngine.trigger($focusedCell, \"focus\");\n      }\n    }\n    const isCell = $element.is(\"td\");\n    const needSetFocusPosition = (this.option(\"focusedRowIndex\") ?? -1) < 0;\n    if (isCell && needSetFocusPosition) {\n      this._updateFocusedCellPosition($element);\n    }\n  }\n  rowsViewFocusOutHandler() {\n    this._toggleInertAttr(false);\n  }\n  subscribeToRowsViewFocusEvent() {\n    var _this$_rowsView;\n    const $rowsView = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.element();\n    eventsEngine.on($rowsView, \"focusin\", this.rowsViewFocusHandlerContext);\n    eventsEngine.on($rowsView, \"focusout\", this.rowsViewFocusOutHandlerContext);\n  }\n  unsubscribeFromRowsViewFocusEvent() {\n    var _this$_rowsView2;\n    const $rowsView = null === (_this$_rowsView2 = this._rowsView) || void 0 === _this$_rowsView2 ? void 0 : _this$_rowsView2.element();\n    eventsEngine.off($rowsView, \"focusin\", this.rowsViewFocusHandlerContext);\n    eventsEngine.off($rowsView, \"focusout\", this.rowsViewFocusOutHandlerContext);\n  }\n  columnHeadersViewRenderCompleted() {\n    this.initColumnHeadersViewKeyDownHandler();\n  }\n  rowsViewRenderCompleted(e) {\n    const $rowsView = this._rowsView.element();\n    const isFullUpdate = !e || \"refresh\" === e.changeType;\n    const isFocusedViewCorrect = this._focusedView && this._focusedView.name === this._rowsView.name;\n    let needUpdateFocus = false;\n    const isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\n    const root = $(domAdapter.getRootNode($rowsView.get && $rowsView.get(0)));\n    const $focusedElement = root.find(\":focus\");\n    const isFocusedElementCorrect = this._isFocusedElementCorrect($focusedElement, $rowsView, e);\n    this.unsubscribeFromRowsViewFocusEvent();\n    this.subscribeToRowsViewFocusEvent();\n    this.initPointerEventHandler();\n    this.initRowsViewKeyDownHandler();\n    this._setRowsViewAttributes();\n    if (isFocusedViewCorrect && isFocusedElementCorrect) {\n      needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate && !(null !== e && void 0 !== e && e.virtualColumnsScrolling);\n      if (needUpdateFocus) {\n        var _e$event;\n        const isScrollEvent = !!(null !== e && void 0 !== e && null !== (_e$event = e.event) && void 0 !== _e$event && _e$event.type);\n        const skipFocusEvent = (null === e || void 0 === e ? void 0 : e.virtualColumnsScrolling) && isScrollEvent;\n        this._updateFocus(true, skipFocusEvent);\n      }\n    }\n  }\n  _isFocusedElementCorrect($focusedElement, $rowsView, e) {\n    if ($focusedElement.length && !$focusedElement.closest($rowsView).length) {\n      return false;\n    }\n    if (!$focusedElement.length && null !== e && void 0 !== e && e.virtualColumnsScrolling) {\n      var _this$_focusedCellPos;\n      const focusedColumnIndex = (null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex) ?? -1;\n      return this._isColumnRendered(focusedColumnIndex);\n    }\n    return true;\n  }\n  initColumnHeadersViewHandler() {\n    var _this$_columnHeadersV;\n    this.unsubscribeFromColumnHeadersViewKeyDownEvent();\n    null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV || null === (_this$_columnHeadersV = _this$_columnHeadersV.renderCompleted) || void 0 === _this$_columnHeadersV || _this$_columnHeadersV.remove(this.columnHeadersViewRenderCompletedWithContext);\n    if (this.isKeyboardEnabled()) {\n      var _this$_columnHeadersV2;\n      null === (_this$_columnHeadersV2 = this._columnHeadersView) || void 0 === _this$_columnHeadersV2 || null === (_this$_columnHeadersV2 = _this$_columnHeadersV2.renderCompleted) || void 0 === _this$_columnHeadersV2 || _this$_columnHeadersV2.add(this.columnHeadersViewRenderCompletedWithContext);\n    }\n  }\n  initRowsViewHandlers() {\n    var _this$_rowsView3;\n    this.unsubscribeFromRowsViewFocusEvent();\n    this.unsubscribeFromPointerEvent();\n    this.unsubscribeFromRowsViewKeyDownEvent();\n    null === (_this$_rowsView3 = this._rowsView) || void 0 === _this$_rowsView3 || null === (_this$_rowsView3 = _this$_rowsView3.renderCompleted) || void 0 === _this$_rowsView3 || _this$_rowsView3.remove(this.rowsViewRenderCompletedWithContext);\n    if (this.isKeyboardEnabled()) {\n      this._rowsView.renderCompleted.add(this.rowsViewRenderCompletedWithContext);\n    }\n  }\n  initDocumentHandlers() {\n    const document = domAdapter.getDocument();\n    this._documentClickHandler = this._documentClickHandler || this.createAction(e => {\n      var _this$_columnResizerC;\n      const $target = $(e.event.target);\n      const tableSelector = `.${this.addWidgetPrefix(TABLE_CLASS)}`;\n      const rowsViewSelector = `.${this.addWidgetPrefix(ROWS_VIEW_CLASS)}`;\n      const editorOverlaySelector = `.${DROPDOWN_EDITOR_OVERLAY_CLASS}`;\n      const needKeepFocus = !!$target.closest(tableSelector).length && !isElementInDom($target);\n      if (needKeepFocus) {\n        e.event.preventDefault();\n        return;\n      }\n      const isRowsViewClick = this._isEventInCurrentGrid(e.event) && !!$target.closest(rowsViewSelector).length;\n      const isEditorOverlayClick = !!$target.closest(editorOverlaySelector).length;\n      const isColumnResizing = !!(null !== (_this$_columnResizerC = this._columnResizerController) && void 0 !== _this$_columnResizerC && _this$_columnResizerC.isResizing());\n      if (!isRowsViewClick && !isEditorOverlayClick && !isColumnResizing) {\n        const isClickOutsideFocusedView = this._focusedView ? 0 === $target.closest(this._focusedView.element()).length : true;\n        if (isClickOutsideFocusedView) {\n          this._resetFocusedCell(true);\n        }\n        this._resetFocusedView();\n      }\n    });\n    eventsEngine.off(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n    if (this.isKeyboardEnabled()) {\n      eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n    }\n  }\n  _setRowsViewAttributes() {\n    const $rowsView = this._getRowsViewElement();\n    const isGridEmpty = !this._dataController.getVisibleRows().length;\n    if (isGridEmpty) {\n      this._applyTabIndexToElement($rowsView);\n    }\n  }\n  unsubscribeFromPointerEvent() {\n    const pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\n    const $rowsView = this._getRowsViewElement();\n    this._pointerEventAction && eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction);\n  }\n  subscribeToPointerEvent() {\n    const pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\n    const $rowsView = this._getRowsViewElement();\n    const clickSelector = `.${ROW_CLASS} > td, .${ROW_CLASS}`;\n    eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), clickSelector, this._pointerEventAction);\n  }\n  initPointerEventHandler() {\n    this._pointerEventAction = this._pointerEventAction || this.createAction(this._pointerEventHandler);\n    this.unsubscribeFromPointerEvent();\n    this.subscribeToPointerEvent();\n  }\n  unsubscribeFromColumnHeadersViewKeyDownEvent() {\n    if (this._columnHeadersViewKeyDownListener) {\n      keyboard.off(this._columnHeadersViewKeyDownListener);\n    }\n  }\n  subscribeToColumnHeadersViewKeyDownEvent() {\n    const $columnHeadersView = this._columnHeadersView.element();\n    this._columnHeadersViewKeyDownListener = keyboard.on($columnHeadersView, null, e => this._columnHeadersViewKeyDownHandler(e));\n  }\n  initColumnHeadersViewKeyDownHandler() {\n    this.unsubscribeFromColumnHeadersViewKeyDownEvent();\n    this.subscribeToColumnHeadersViewKeyDownEvent();\n  }\n  unsubscribeFromRowsViewKeyDownEvent() {\n    keyboard.off(this._rowsViewKeyDownListener);\n  }\n  subscribeToRowsViewKeyDownEvent() {\n    const $rowsView = this._getRowsViewElement();\n    this._rowsViewKeyDownListener = keyboard.on($rowsView, null, e => this._rowsViewKeyDownHandler(e));\n  }\n  initRowsViewKeyDownHandler() {\n    this._rowsViewKeyDownListener && this.unsubscribeFromRowsViewKeyDownEvent();\n    this.subscribeToRowsViewKeyDownEvent();\n  }\n  optionChanged(args) {\n    switch (args.name) {\n      case \"keyboardNavigation\":\n        if (\"keyboardNavigation.enabled\" === args.fullName) {\n          this.init();\n        }\n        args.handled = true;\n        break;\n      case \"useLegacyKeyboardNavigation\":\n        this.init();\n        args.handled = true;\n        break;\n      default:\n        super.optionChanged(args);\n    }\n  }\n  isRowFocusType() {\n    return this.focusType === FOCUS_TYPE_ROW;\n  }\n  isCellFocusType() {\n    return this.focusType === FOCUS_TYPE_CELL;\n  }\n  setRowFocusType() {\n    if (this.option(\"focusedRowEnabled\")) {\n      this.focusType = FOCUS_TYPE_ROW;\n    }\n  }\n  setCellFocusType() {\n    this.focusType = FOCUS_TYPE_CELL;\n  }\n  headerTabKeyHandler(e) {}\n  _columnHeadersViewKeyDownHandler(e) {\n    if (\"tab\" === e.keyName) {\n      this.headerTabKeyHandler(e);\n    }\n  }\n  _rowsViewKeyDownHandler(e) {\n    var _this$_editingControl;\n    let needStopPropagation = true;\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n    let isHandled = this._processOnKeyDown(e);\n    const isEditing = null === (_this$_editingControl = this._editingController) || void 0 === _this$_editingControl ? void 0 : _this$_editingControl.isEditing();\n    const {\n      originalEvent: originalEvent\n    } = e;\n    if (originalEvent.isDefaultPrevented()) {\n      this._isNeedFocus = false;\n      this._isNeedScroll = false;\n      return;\n    }\n    !FUNCTIONAL_KEYS.includes(e.keyName) && this._updateFocusedCellPositionByTarget(originalEvent.target);\n    if (!isHandled) {\n      switch (e.keyName) {\n        case \"leftArrow\":\n        case \"rightArrow\":\n          this._leftRightKeysHandler(e, isEditing);\n          isHandled = true;\n          break;\n        case \"upArrow\":\n        case \"downArrow\":\n          if (e.ctrl) {\n            accessibility.selectView(\"rowsView\", this, originalEvent);\n          } else {\n            this._upDownKeysHandler(e, isEditing);\n          }\n          isHandled = true;\n          break;\n        case \"pageUp\":\n        case \"pageDown\":\n          this._pageUpDownKeyHandler(e);\n          isHandled = true;\n          break;\n        case \"space\":\n          isHandled = this._spaceKeyHandler(e, isEditing);\n          break;\n        case \"A\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlAKeyHandler(e, isEditing);\n            isHandled = true;\n          } else {\n            isHandled = this._beginFastEditing(e.originalEvent);\n          }\n          break;\n        case \"tab\":\n          this._tabKeyHandler(e, isEditing);\n          isHandled = true;\n          break;\n        case \"enter\":\n          this._enterKeyHandler(e, isEditing);\n          isHandled = true;\n          break;\n        case \"escape\":\n          isHandled = this._escapeKeyHandler(e, isEditing);\n          break;\n        case \"F\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlFKeyHandler(e);\n            isHandled = true;\n          } else {\n            isHandled = this._beginFastEditing(e.originalEvent);\n          }\n          break;\n        case \"F2\":\n          this._f2KeyHandler();\n          isHandled = true;\n          break;\n        case \"del\":\n        case \"backspace\":\n          if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\n            isHandled = this._beginFastEditing(originalEvent, true);\n          }\n      }\n      if (!isHandled && !this._beginFastEditing(originalEvent)) {\n        this._isNeedFocus = false;\n        this._isNeedScroll = false;\n        needStopPropagation = false;\n      }\n      if (needStopPropagation) {\n        originalEvent.stopPropagation();\n      }\n    }\n  }\n  _processOnKeyDown(eventArgs) {\n    const {\n      originalEvent: originalEvent\n    } = eventArgs;\n    const args = {\n      handled: false,\n      event: originalEvent\n    };\n    this.executeAction(\"onKeyDown\", args);\n    eventArgs.ctrl = originalEvent.ctrlKey;\n    eventArgs.alt = originalEvent.altKey;\n    eventArgs.shift = originalEvent.shiftKey;\n    return !!args.handled;\n  }\n  _closeEditCell() {\n    const d = Deferred();\n    setTimeout(() => {\n      this._editingController.closeEditCell().always(d.resolve);\n    });\n    return d;\n  }\n  _leftRightKeysHandler(eventArgs, isEditing) {\n    const rowIndex = this.getVisibleRowIndex();\n    const $event = eventArgs.originalEvent;\n    const $row = this._focusedView && this._focusedView.getRow(rowIndex);\n    const directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\n    const isEditingNavigationMode = this._isFastEditingStarted();\n    const allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\n    if (allowNavigate) {\n      this.setCellFocusType();\n      isEditingNavigationMode && this._closeEditCell();\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(directionCode);\n      }\n      const $cell = this._getNextCell(directionCode);\n      if (isElementDefined($cell)) {\n        this._arrowKeysHandlerFocusCell($event, $cell, directionCode);\n      }\n      $event && $event.preventDefault();\n    }\n  }\n  isInsideMasterDetail($target) {\n    const $masterDetail = $target.closest(`.${MASTER_DETAIL_CELL_CLASS}`);\n    return !!$masterDetail.get(0) && this.elementIsInsideGrid($masterDetail) && !$target.is($masterDetail);\n  }\n  _upDownKeysHandler(eventArgs, isEditing) {\n    var _this$_editingControl2, _this$_editingControl3;\n    const visibleRowIndex = this.getVisibleRowIndex();\n    const $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\n    const $event = eventArgs.originalEvent;\n    const isUpArrow = \"upArrow\" === eventArgs.keyName;\n    const dataSource = this._dataController.dataSource();\n    const isRowEditingInCurrentRow = null === (_this$_editingControl2 = this._editingController) || void 0 === _this$_editingControl2 || null === (_this$_editingControl3 = _this$_editingControl2.isEditRowByIndex) || void 0 === _this$_editingControl3 ? void 0 : _this$_editingControl3.call(_this$_editingControl2, visibleRowIndex);\n    const isEditingNavigationMode = this._isFastEditingStarted();\n    const isInsideMasterDetail = this.isInsideMasterDetail($(null === $event || void 0 === $event ? void 0 : $event.target));\n    const allowNavigate = (!isRowEditingInCurrentRow || !isEditing || isEditingNavigationMode) && $row && !isEditForm($row) && !isInsideMasterDetail;\n    if (allowNavigate) {\n      isEditingNavigationMode && this._closeEditCell();\n      if (!this._navigateNextCell($event, eventArgs.keyName)) {\n        if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\n          const rowHeight = getOuterHeight($row);\n          const rowIndex = this._focusedCellPosition.rowIndex - 1;\n          this._scrollBy(0, -rowHeight, rowIndex, $event);\n        }\n      }\n      $event && $event.preventDefault();\n    }\n  }\n  _pageUpDownKeyHandler(eventArgs) {\n    const pageIndex = this._dataController.pageIndex();\n    const pageCount = this._dataController.pageCount();\n    const pagingEnabled = this.option(\"paging.enabled\");\n    const isPageUp = \"pageUp\" === eventArgs.keyName;\n    const pageStep = isPageUp ? -1 : 1;\n    const scrollable = this._rowsView.getScrollable();\n    if (pagingEnabled && !this._isVirtualScrolling()) {\n      if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\n        this._dataController.pageIndex(pageIndex + pageStep);\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else if (scrollable && getHeight(scrollable.container()) < getHeight(scrollable.$content())) {\n      this._scrollBy(0, getHeight(scrollable.container()) * pageStep);\n      eventArgs.originalEvent.preventDefault();\n    }\n  }\n  _spaceKeyHandler(eventArgs, isEditing) {\n    const rowIndex = this.getVisibleRowIndex();\n    const $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\n    if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\n      const isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\n      const isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);\n      if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\n        this._selectionController.startSelectionWithCheckboxes();\n      }\n      if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._selectionController.changeItemSelection(rowIndex, {\n          shift: eventArgs.shift,\n          control: eventArgs.ctrl\n        });\n        eventArgs.originalEvent.preventDefault();\n        return true;\n      }\n      return false;\n    }\n    return this._beginFastEditing(eventArgs.originalEvent);\n  }\n  _ctrlAKeyHandler(eventArgs, isEditing) {\n    if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\n      this._selectionController.selectAll();\n      eventArgs.originalEvent.preventDefault();\n    }\n  }\n  _toggleInertAttr(value) {}\n  _tabKeyHandler(eventArgs, isEditing) {\n    const editingOptions = this.option(\"editing\");\n    const direction = eventArgs.shift ? \"previous\" : \"next\";\n    const isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\n    const isFirstValidCell = eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\n    const isLastValidCell = !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition);\n    let isOriginalHandlerRequired = !isCellPositionDefined || isFirstValidCell || isLastValidCell;\n    const eventTarget = eventArgs.originalEvent.target;\n    const focusedViewElement = this._focusedView && this._focusedView.element();\n    if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\n      return;\n    }\n    $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\n    if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\n      if ($(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._resetFocusedCell();\n      }\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(direction);\n      }\n      if (isEditing) {\n        if (!this._editingCellTabHandler(eventArgs, direction)) {\n          return;\n        }\n      } else if (this._targetCellTabHandler(eventArgs, direction)) {\n        isOriginalHandlerRequired = true;\n      }\n    }\n    if (isOriginalHandlerRequired) {\n      const $cell = this._getFocusedCell();\n      const isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\n      if (isLastValidCell && !isCommandCell) {\n        this._toggleInertAttr(true);\n      }\n      this._editorFactory.loseFocus();\n      if (this._editingController.isEditing() && !this._isRowEditMode()) {\n        this._resetFocusedCell(true);\n        this._resetFocusedView();\n        this._closeEditCell();\n      }\n    } else {\n      eventArgs.originalEvent.preventDefault();\n    }\n  }\n  _getMaxHorizontalOffset() {\n    const scrollable = this.component.getScrollable();\n    return scrollable ? scrollable.scrollWidth() - getWidth(this._rowsView.element()) : 0;\n  }\n  _isColumnRendered(columnIndex) {\n    const allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n    const renderedVisibleColumns = this._columnsController.getVisibleColumns();\n    const column = allVisibleColumns[columnIndex];\n    let result = false;\n    if (column) {\n      result = renderedVisibleColumns.indexOf(column) >= 0;\n    }\n    return result;\n  }\n  _isFixedColumn(columnIndex) {\n    const allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n    const column = allVisibleColumns[columnIndex];\n    return !!column && !!column.fixed;\n  }\n  _isColumnVirtual(columnIndex) {\n    const localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    const column = visibleColumns[localColumnIndex];\n    return !!column && \"virtual\" === column.command;\n  }\n  _processVirtualHorizontalPosition(direction) {\n    const scrollable = this.component.getScrollable();\n    const columnIndex = this.getColumnIndex();\n    let nextColumnIndex;\n    let horizontalScrollPosition = 0;\n    let needToScroll = false;\n    switch (direction) {\n      case \"next\":\n      case \"nextInRow\":\n        {\n          const columnsCount = this._getVisibleColumnCount();\n          nextColumnIndex = columnIndex + 1;\n          horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\n          if (\"next\" === direction) {\n            needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n          } else {\n            needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n          }\n          break;\n        }\n      case \"previous\":\n      case \"previousInRow\":\n        nextColumnIndex = columnIndex - 1;\n        horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\n        if (\"previous\" === direction) {\n          const columnIndexOffset = this._columnsController.getColumnIndexOffset();\n          const leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\n          needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        } else {\n          needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        }\n    }\n    if (needToScroll) {\n      scrollable.scrollTo({\n        left: horizontalScrollPosition\n      });\n    } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\n      horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\n      0 !== horizontalScrollPosition && scrollable.scrollBy({\n        left: horizontalScrollPosition,\n        top: 0\n      });\n    }\n  }\n  _getHorizontalScrollPositionOffset(direction) {\n    let positionOffset = 0;\n    const $currentCell = this._getCell(this._focusedCellPosition);\n    const currentCellWidth = $currentCell && getOuterWidth($currentCell);\n    if (currentCellWidth > 0) {\n      const rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\n      positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1;\n    }\n    return positionOffset;\n  }\n  _editingCellTabHandler(eventArgs, direction) {\n    const eventTarget = eventArgs.originalEvent.target;\n    let $cell = this._getCellElementFromTarget(eventTarget);\n    let isEditingAllowed;\n    const $event = eventArgs.originalEvent;\n    const elementType = this._getElementType(eventTarget);\n    if ($cell.is(COMMAND_CELL_SELECTOR)) {\n      return !this._targetCellTabHandler(eventArgs, direction);\n    }\n    this._updateFocusedCellPosition($cell);\n    const nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n    $cell = nextCellInfo.$cell;\n    if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\n      return false;\n    }\n    const column = this._getColumnByCellElement($cell);\n    const $row = $cell.parent();\n    const rowIndex = this._getRowIndex($row);\n    const row = this._dataController.items()[rowIndex];\n    const editingController = this._editingController;\n    if (column && column.allowEditing) {\n      const isDataRow = !row || \"data\" === row.rowType;\n      isEditingAllowed = editingController.allowUpdating({\n        row: row\n      }) ? isDataRow : row && row.isNewRow;\n    }\n    if (!isEditingAllowed) {\n      this._closeEditCell();\n    }\n    if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\n      if (!this._isRowEditMode() && isEditingAllowed) {\n        this._editFocusedCell();\n      } else {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n    return true;\n  }\n  _targetCellTabHandler(eventArgs, direction) {\n    const $event = eventArgs.originalEvent;\n    let eventTarget = $event.target;\n    let elementType = this._getElementType(eventTarget);\n    let $cell = this._getCellElementFromTarget(eventTarget);\n    const $lastInteractiveElement = \"cell\" === elementType && this._getInteractiveElement($cell, !eventArgs.shift);\n    let isOriginalHandlerRequired = false;\n    if (!isEditorCell(this, $cell) && null !== $lastInteractiveElement && void 0 !== $lastInteractiveElement && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\n      isOriginalHandlerRequired = true;\n    } else {\n      if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(ROW_CLASS)) {\n        this._updateFocusedCellPosition($cell);\n      }\n      elementType = this._getElementType(eventTarget);\n      if (this.isRowFocusType()) {\n        this.setCellFocusType();\n        if (\"row\" === elementType && isDataRow($(eventTarget))) {\n          eventTarget = this.getFirstValidCellInRow($(eventTarget));\n          elementType = this._getElementType(eventTarget);\n        }\n      }\n      const nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n      $cell = nextCellInfo.$cell;\n      if (!$cell) {\n        return false;\n      }\n      $cell = this._checkNewLineTransition($event, $cell);\n      if (!$cell) {\n        return false;\n      }\n      this._focusCell($cell, !nextCellInfo.isHighlighted);\n      if (!isEditorCell(this, $cell)) {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n    return isOriginalHandlerRequired;\n  }\n  _getNextCellByTabKey($event, direction, elementType) {\n    let $cell = this._getNextCell(direction, elementType);\n    const args = $cell && this._fireFocusedCellChanging($event, $cell, true);\n    if (!args || args.cancel) {\n      return {};\n    }\n    if (args.$newCellElement) {\n      $cell = args.$newCellElement;\n    }\n    return {\n      $cell: $cell,\n      isHighlighted: args.isHighlighted\n    };\n  }\n  _checkNewLineTransition($event, $cell) {\n    const rowIndex = this.getVisibleRowIndex();\n    const $row = $cell.parent();\n    if (rowIndex !== this._getRowIndex($row)) {\n      const cellPosition = this._getCellPosition($cell);\n      const args = this._fireFocusedRowChanging($event, $row);\n      if (args.cancel) {\n        return;\n      }\n      if (args.rowIndexChanged && cellPosition) {\n        this.setFocusedColumnIndex(cellPosition.columnIndex);\n        $cell = this._getFocusedCell();\n      }\n    }\n    return $cell;\n  }\n  _enterKeyHandler(eventArgs, isEditing) {\n    var _this$_focusedView, _this$getMasterDetail;\n    const rowIndex = this.getVisibleRowIndex();\n    const key = this._dataController.getKeyByRowIndex(rowIndex);\n    const $row = null === (_this$_focusedView = this._focusedView) || void 0 === _this$_focusedView ? void 0 : _this$_focusedView.getRow(rowIndex);\n    const $cell = this._getFocusedCell();\n    const needExpandGroupRow = this.option(\"grouping.allowCollapsing\") && isGroupRow($row);\n    const needExpandMasterDetailRow = this.option(\"masterDetail.enabled\") && (null === $cell || void 0 === $cell ? void 0 : $cell.hasClass(COMMAND_EXPAND_CLASS));\n    const needExpandAdaptiveRow = null === $cell || void 0 === $cell ? void 0 : $cell.hasClass(ADAPTIVE_COLUMN_NAME_CLASS);\n    if (needExpandGroupRow || needExpandMasterDetailRow) {\n      const item = this._dataController.items()[rowIndex];\n      const isNotContinuation = (null === item || void 0 === item ? void 0 : item.data) && !item.data.isContinuation;\n      if (isDefined(key) && isNotContinuation) {\n        this._dataController.changeRowExpand(key);\n      }\n    } else if (needExpandAdaptiveRow) {\n      this._adaptiveColumnsController.toggleExpandAdaptiveDetailRow(key);\n      this._updateFocusedCellPosition($cell);\n    } else if (null !== (_this$getMasterDetail = this.getMasterDetailCell($cell)) && void 0 !== _this$getMasterDetail && _this$getMasterDetail.is($cell)) {\n      if ($cell.is(\":focus\")) {\n        this.focusFirstInteractiveElementInside($cell);\n      }\n    } else if (!(null !== $cell && void 0 !== $cell && $cell.hasClass(COMMAND_EDIT_CLASS))) {\n      this._processEnterKeyForDataCell(eventArgs, isEditing);\n    }\n  }\n  focusFirstInteractiveElementInside($el) {\n    $el.find(INTERACTIVE_ELEMENTS_SELECTOR).get(0).focus();\n  }\n  _processEnterKeyForDataCell(eventArgs, isEditing) {\n    const direction = this._getEnterKeyDirection(eventArgs);\n    const allowEditingOnEnterKey = this._allowEditingOnEnterKey();\n    if (isEditing || !allowEditingOnEnterKey && direction) {\n      this._handleEnterKeyEditingCell(eventArgs.originalEvent).done(() => {\n        if (\"next\" === direction || \"previous\" === direction) {\n          this._targetCellTabHandler(eventArgs, direction);\n        } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\n          this._navigateNextCell(eventArgs.originalEvent, direction);\n        }\n      });\n    } else if (allowEditingOnEnterKey) {\n      this._startEditing(eventArgs);\n    }\n  }\n  _getEnterKeyDirection(eventArgs) {\n    const enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\n    const isShift = eventArgs.shift;\n    if (\"column\" === enterKeyDirection) {\n      return isShift ? \"upArrow\" : \"downArrow\";\n    }\n    if (\"row\" === enterKeyDirection) {\n      return isShift ? \"previous\" : \"next\";\n    }\n    return;\n  }\n  _handleEnterKeyEditingCell(event) {\n    const d = Deferred();\n    const {\n      target: target\n    } = event;\n    const $cell = this._getCellElementFromTarget(target);\n    const isRowEditMode = this._isRowEditMode();\n    this._updateFocusedCellPosition($cell);\n    if (isRowEditMode) {\n      this._focusEditFormCell($cell);\n      setTimeout(this._editingController.saveEditData.bind(this._editingController));\n      d.resolve();\n    } else {\n      eventsEngine.trigger($(target), \"change\");\n      this._closeEditCell().always(d.resolve);\n      event.preventDefault();\n    }\n    return d;\n  }\n  _escapeKeyHandler(eventArgs, isEditing) {\n    const $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\n    if (isEditing) {\n      this._updateFocusedCellPosition($cell);\n      if (!this._isRowEditMode()) {\n        if (\"cell\" === this._editingController.getEditMode()) {\n          this._editingController.cancelEditData();\n        } else {\n          this._closeEditCell();\n        }\n      } else {\n        this._focusEditFormCell($cell);\n        this._editingController.cancelEditData();\n        if (0 === this._dataController.items().length) {\n          this._resetFocusedCell();\n          this._editorFactory.loseFocus();\n        }\n      }\n      eventArgs.originalEvent.preventDefault();\n      return true;\n    }\n    const masterDetailCell = this.getMasterDetailCell($cell);\n    if (masterDetailCell) {\n      this._focusCell(masterDetailCell);\n      return true;\n    }\n    return false;\n  }\n  _ctrlFKeyHandler(eventArgs) {\n    if (this.option(\"searchPanel.visible\")) {\n      const searchTextEditor = this._headerPanel.getSearchTextEditor();\n      if (searchTextEditor) {\n        searchTextEditor.focus();\n        eventArgs.originalEvent.preventDefault();\n      }\n    }\n  }\n  _f2KeyHandler() {\n    const isEditing = this._editingController.isEditing();\n    const rowIndex = this.getVisibleRowIndex();\n    const $row = this._focusedView && this._focusedView.getRow(rowIndex);\n    if (!isEditing && isDataRow($row)) {\n      this._startEditing();\n    }\n  }\n  _navigateNextCell($event, keyCode) {\n    const $cell = this._getNextCell(keyCode);\n    const directionCode = this._getDirectionCodeByKey(keyCode);\n    const isCellValid = $cell && this._isCellValid($cell);\n    const result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\n    return result;\n  }\n  _arrowKeysHandlerFocusCell($event, $nextCell, direction) {\n    const isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\n    const args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\n    $nextCell = args.$newCellElement;\n    if (!args.cancel && this._isCellValid($nextCell)) {\n      this._focus($nextCell, !args.isHighlighted);\n      return true;\n    }\n    return false;\n  }\n  _beginFastEditing(originalEvent, isDeleting) {\n    if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\n      return false;\n    }\n    if (isDeleting) {\n      this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY);\n    } else {\n      const {\n        key: key\n      } = originalEvent;\n      const keyCode = originalEvent.keyCode || originalEvent.which;\n      const fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\n      if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {\n        this._startEditing(originalEvent, fastEditingKey);\n      }\n    }\n    return true;\n  }\n  _pointerEventHandler(e) {\n    var _this$_rowsView4;\n    const event = e.event || e;\n    let $target = $(event.currentTarget);\n    const focusedViewElement = null === (_this$_rowsView4 = this._rowsView) || void 0 === _this$_rowsView4 ? void 0 : _this$_rowsView4.element();\n    const $parent = $target.parent();\n    const isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\n    const isRevertButton = !!$(event.target).closest(`.${REVERT_BUTTON_CLASS}`).length;\n    const isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS);\n    if (!this._isEventInCurrentGrid(event)) {\n      return;\n    }\n    if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\n      $target = this._isInsideEditForm($target) ? $(event.target) : $target;\n      this._focusView();\n      $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\n      if ($parent.hasClass(FREESPACE_ROW_CLASS)) {\n        this._updateFocusedCellPosition($target);\n        this._applyTabIndexToElement(this._focusedView.element());\n        this._focusedView.focus(true);\n      } else if (!this.getMasterDetailCell($target)) {\n        this._clickTargetCellHandler(event, $target);\n      } else {\n        this._updateFocusedCellPosition($target);\n      }\n    } else if ($target.is(\"td\")) {\n      this._resetFocusedCell();\n    }\n  }\n  _clickTargetCellHandler(event, $cell) {\n    const column = this._getColumnByCellElement($cell);\n    const isCellEditMode = this._isCellEditMode();\n    this.setCellFocusType();\n    const args = this._fireFocusChangingEvents(event, $cell, true);\n    $cell = args.$newCellElement;\n    if (!args.cancel) {\n      if (args.resetFocusedRow) {\n        this._focusController._resetFocusedRow();\n        return;\n      }\n      if (args.rowIndexChanged) {\n        $cell = this._getFocusedCell();\n      }\n      if (!args.isHighlighted && !isCellEditMode) {\n        this.setRowFocusType();\n      }\n      this._updateFocusedCellPosition($cell);\n      if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\n        this._isNeedFocus = false;\n        this._isHiddenFocus = false;\n      } else {\n        $cell = this._getFocusedCell();\n        const $target = event && $(event.target).closest(`${NON_FOCUSABLE_ELEMENTS_SELECTOR}, td`);\n        const skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);\n        const isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS);\n        const isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);\n        this._focus($cell, isDisabled, skipFocusEvent);\n      }\n    } else {\n      this.setRowFocusType();\n      this.setFocusedRowIndex(args.prevRowIndex);\n      if (this._editingController.isEditing() && isCellEditMode) {\n        this._closeEditCell();\n      }\n    }\n  }\n  _allowRowUpdating() {\n    const rowIndex = this.getVisibleRowIndex();\n    const row = this._dataController.items()[rowIndex];\n    return this._editingController.allowUpdating({\n      row: row\n    }, \"click\");\n  }\n  focus(element) {\n    let activeElementSelector;\n    const focusedRowEnabled = this.option(\"focusedRowEnabled\");\n    const isHighlighted = this._isCellElement($(element));\n    if (!element) {\n      activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\n      if (!focusedRowEnabled) {\n        activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\";\n      }\n      element = this.component.$element().find(activeElementSelector).first();\n    }\n    element && this._focusElement($(element), isHighlighted);\n  }\n  getFocusedView() {\n    return this._focusedView;\n  }\n  setupFocusedView() {\n    if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\n      this._focusView();\n    }\n  }\n  _focusElement($element, isHighlighted) {\n    const rowsViewElement = $(this._getRowsViewElement());\n    const $focusedView = $element.closest(rowsViewElement);\n    const isRowFocusType = this.isRowFocusType();\n    let args = {};\n    if (!$focusedView.length || this._isCellElement($element) && !this._isCellValid($element)) {\n      return;\n    }\n    this._focusView();\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n    if (this._isCellElement($element) || isGroupRow($element)) {\n      this.setCellFocusType();\n      args = this._fireFocusChangingEvents(null, $element, true, isHighlighted);\n      $element = args.$newCellElement;\n      if (isRowFocusType && !args.isHighlighted) {\n        this.setRowFocusType();\n      }\n    }\n    if (!args.cancel) {\n      this._focus($element, !args.isHighlighted);\n      this._focusInteractiveElement($element);\n    }\n  }\n  _getFocusedViewByElement($element) {\n    const view = this.getFocusedView();\n    const $view = view && $(view.element());\n    return $element && 0 !== $element.closest($view).length;\n  }\n  _focusView() {\n    this._focusedView = this._rowsView;\n  }\n  _resetFocusedView() {\n    this.setRowFocusType();\n    this._focusedView = null;\n  }\n  _focusInteractiveElement($cell, isLast) {\n    if (!$cell) {\n      return;\n    }\n    const $focusedElement = this._getInteractiveElement($cell, isLast);\n    gridCoreUtils.focusAndSelectElement(this, $focusedElement);\n  }\n  _focus($cell, disableFocus, skipFocusEvent) {\n    const $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(`.${ROW_CLASS}`) : $cell;\n    if ($row && isNotFocusedRow($row)) {\n      return;\n    }\n    const focusedView = this._focusedView;\n    const $focusViewElement = focusedView && focusedView.element();\n    let $focusElement;\n    this._isHiddenFocus = disableFocus;\n    const isRowFocus = isGroupRow($row) || isGroupFooterRow($row) || this.isRowFocusType();\n    if (isRowFocus) {\n      $focusElement = $row;\n      if (focusedView) {\n        this.setFocusedRowIndex(this._getRowIndex($row));\n      }\n    } else if (this._isCellElement($cell)) {\n      $focusElement = $cell;\n      this._updateFocusedCellPosition($cell);\n    }\n    if ($focusElement) {\n      if ($focusViewElement) {\n        $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").filter((i, node) => gridCoreUtils.isElementInCurrentGrid(this, $(node))).not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeClass(FOCUSED_CLASS).removeAttr(\"tabindex\");\n      }\n      eventsEngine.one($focusElement, \"blur\", e => {\n        if (e.relatedTarget) {\n          $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS).removeClass(FOCUSED_CLASS);\n        }\n      });\n      if (!skipFocusEvent) {\n        this._applyTabIndexToElement($focusElement);\n        eventsEngine.trigger($focusElement, \"focus\");\n      }\n      if (disableFocus) {\n        $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS);\n        if (isRowFocus) {\n          $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\n        }\n      } else {\n        this._editorFactory.focus($focusElement);\n      }\n    }\n  }\n  _updateFocus(isRenderView) {\n    let skipFocusEvent = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    this._updateFocusTimeout = setTimeout(() => {\n      if (this._needFocusEditingCell()) {\n        this._editingController._focusEditingCell();\n        return;\n      }\n      let $cell = this._getFocusedCell();\n      const isEditing = this._editingController.isEditing();\n      if (!this.getMasterDetailCell($cell) || this._isRowEditMode()) {\n        if (this._hasSkipRow($cell.parent())) {\n          const direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\n          $cell = this._getNextCell(direction);\n        }\n        if (isElementDefined($cell)) {\n          if ($cell.is(\"td\") || $cell.hasClass(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {\n            const isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\n            const $focusedElementInsideCell = $cell.find(\":focus\");\n            const isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\n            const column = this._getColumnByCellElement($cell);\n            if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {\n              if (isCommandCell && isFocusedElementDefined) {\n                gridCoreUtils.focusAndSelectElement(this, $focusedElementInsideCell);\n                return;\n              }\n              !isFocusedElementDefined && this._focus($cell, false, skipFocusEvent);\n            } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {\n              this._focus($cell, this._isHiddenFocus, skipFocusEvent);\n            }\n            if (isEditing && !(null !== column && void 0 !== column && column.showEditorAlways)) {\n              this._focusInteractiveElement.bind(this)($cell);\n            }\n          } else {\n            eventsEngine.trigger($cell, \"focus\");\n          }\n        }\n      }\n    });\n  }\n  _getColumnByCellElement($cell) {\n    const cellIndex = this._rowsView.getCellIndex($cell);\n    const columnIndex = cellIndex + this._columnsController.getColumnIndexOffset();\n    return this._columnsController.getVisibleColumns(null, true)[columnIndex];\n  }\n  _needFocusEditingCell() {\n    const isCellEditMode = this._editingController.getEditMode() === EDIT_MODE_CELL;\n    const isBatchEditMode = this._editingController.getEditMode() === EDIT_MODE_BATCH;\n    const cellEditModeHasChanges = isCellEditMode && this._editingController.hasChanges();\n    const isNewRowBatchEditMode = isBatchEditMode && this._editingController.isNewRowInEditMode();\n    const $cell = this._getFocusedCell();\n    return (0 === $cell.children().length || $cell.find(FOCUSABLE_ELEMENT_SELECTOR).length > 0) && (cellEditModeHasChanges || isNewRowBatchEditMode);\n  }\n  _getFocusedCell() {\n    return $(this._getCell(this._focusedCellPosition));\n  }\n  _updateFocusedCellPositionByTarget(target) {\n    var _this$_focusedCellPos2;\n    const elementType = this._getElementType(target);\n    if (\"row\" === elementType && isDefined(null === (_this$_focusedCellPos2 = this._focusedCellPosition) || void 0 === _this$_focusedCellPos2 ? void 0 : _this$_focusedCellPos2.columnIndex)) {\n      const $row = $(target);\n      this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row));\n    } else {\n      this._updateFocusedCellPosition(this._getCellElementFromTarget(target));\n    }\n  }\n  _updateFocusedCellPosition($cell, direction) {\n    const position = this._getCellPosition($cell, direction);\n    if (position) {\n      if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\n        this.setFocusedCellPosition(position.rowIndex, position.columnIndex);\n      }\n    }\n    return position;\n  }\n  _getFocusedColumnIndexOffset(columnIndex) {\n    let offset = 0;\n    const column = this._columnsController.getVisibleColumns()[columnIndex];\n    if (column && column.fixed) {\n      offset = this._getFixedColumnIndexOffset(column);\n    } else if (columnIndex >= 0) {\n      offset = this._columnsController.getColumnIndexOffset();\n    }\n    return offset;\n  }\n  _getFixedColumnIndexOffset(column) {\n    const offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\n    return offset;\n  }\n  _getCellPosition($cell, direction) {\n    let columnIndex;\n    const $row = isElementDefined($cell) && $cell.closest(\"tr\");\n    if (isElementDefined($row)) {\n      const rowIndex = this._getRowIndex($row);\n      columnIndex = this._rowsView.getCellIndex($cell, rowIndex);\n      columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\n      if (direction) {\n        columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\n        columnIndex = this._applyColumnIndexBoundaries(columnIndex);\n      }\n      return {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n    return;\n  }\n  _focusCell($cell, isDisabled) {\n    if (this._isCellValid($cell)) {\n      this._focus($cell, isDisabled);\n      return true;\n    }\n    return;\n  }\n  _focusEditFormCell($cell) {\n    if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {\n      this._editorFactory.focus($cell, true);\n    }\n  }\n  _resetFocusedCell(preventScroll) {\n    var _this$_focusedView2;\n    const $cell = this._getFocusedCell();\n    isElementDefined($cell) && $cell.removeAttr(\"tabindex\").removeClass(CELL_FOCUS_DISABLED_CLASS);\n    this._isNeedFocus = false;\n    this._isNeedScroll = false;\n    this._focusedCellPosition = {};\n    clearTimeout(this._updateFocusTimeout);\n    null === (_this$_focusedView2 = this._focusedView) || void 0 === _this$_focusedView2 || _this$_focusedView2.renderFocusState({\n      preventScroll: preventScroll\n    });\n  }\n  restoreFocusableElement(rowIndex, $event) {\n    const that = this;\n    let args;\n    let $rowElement;\n    const isUpArrow = isDefined(rowIndex);\n    const $rowsViewElement = this._rowsView.element();\n    const {\n      columnIndex: columnIndex\n    } = that._focusedCellPosition;\n    const rowIndexOffset = that._dataController.getRowIndexOffset();\n    rowIndex = isUpArrow ? rowIndex : this._rowsView.getTopVisibleItemIndex() + rowIndexOffset;\n    if (!isUpArrow) {\n      that._editorFactory.loseFocus();\n      that._applyTabIndexToElement($rowsViewElement);\n      eventsEngine.trigger($rowsViewElement, \"focus\");\n    } else {\n      $rowElement = this._rowsView.getRow(rowIndex - rowIndexOffset);\n      args = that._fireFocusedRowChanging($event, $rowElement);\n      if (!args.cancel && args.rowIndexChanged) {\n        rowIndex = args.newRowIndex;\n      }\n    }\n    if (!isUpArrow || !args.cancel) {\n      that.setFocusedCellPosition(rowIndex, columnIndex);\n    }\n    isUpArrow && that._updateFocus();\n  }\n  _getNewPositionByCode(cellPosition, elementType, code) {\n    let {\n      columnIndex: columnIndex\n    } = cellPosition;\n    let {\n      rowIndex: rowIndex\n    } = cellPosition;\n    let visibleColumnsCount;\n    if (void 0 === cellPosition.rowIndex && \"next\" === code) {\n      return {\n        columnIndex: 0,\n        rowIndex: 0\n      };\n    }\n    switch (code) {\n      case \"nextInRow\":\n      case \"next\":\n        visibleColumnsCount = this._getVisibleColumnCount();\n        if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex++;\n        } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\n          columnIndex = 0;\n          rowIndex++;\n        }\n        break;\n      case \"previousInRow\":\n      case \"previous\":\n        if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex--;\n        } else if (rowIndex > 0 && \"previous\" === code) {\n          rowIndex--;\n          visibleColumnsCount = this._getVisibleColumnCount();\n          columnIndex = visibleColumnsCount - 1;\n        }\n        break;\n      case \"upArrow\":\n        rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\n        break;\n      case \"downArrow\":\n        rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex;\n    }\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  }\n  setFocusedCellPosition(rowIndex, columnIndex) {\n    this.setFocusedRowIndex(rowIndex);\n    this.setFocusedColumnIndex(columnIndex);\n  }\n  setFocusedRowIndex(rowIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n    this._focusedCellPosition.rowIndex = rowIndex;\n  }\n  setFocusedColumnIndex(columnIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n    this._focusedCellPosition.columnIndex = columnIndex;\n  }\n  getRowIndex() {\n    return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1;\n  }\n  getColumnIndex() {\n    return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1;\n  }\n  getVisibleRowIndex() {\n    var _this$_focusedCellPos3;\n    const rowIndex = null === (_this$_focusedCellPos3 = this._focusedCellPosition) || void 0 === _this$_focusedCellPos3 ? void 0 : _this$_focusedCellPos3.rowIndex;\n    return !isDefined(rowIndex) || rowIndex < 0 ? -1 : rowIndex - this._dataController.getRowIndexOffset();\n  }\n  getVisibleColumnIndex() {\n    var _this$_focusedCellPos4;\n    const columnIndex = null === (_this$_focusedCellPos4 = this._focusedCellPosition) || void 0 === _this$_focusedCellPos4 ? void 0 : _this$_focusedCellPos4.columnIndex;\n    return !isDefined(columnIndex) ? -1 : columnIndex - this._columnsController.getColumnIndexOffset();\n  }\n  _applyColumnIndexBoundaries(columnIndex) {\n    const visibleColumnsCount = this._getVisibleColumnCount();\n    if (columnIndex < 0) {\n      columnIndex = 0;\n    } else if (columnIndex >= visibleColumnsCount) {\n      columnIndex = visibleColumnsCount - 1;\n    }\n    return columnIndex;\n  }\n  _isCellByPositionValid(cellPosition) {\n    const $cell = $(this._getCell(cellPosition));\n    return this._isCellValid($cell);\n  }\n  _isLastRow(rowIndex) {\n    const dataController = this._dataController;\n    if (this._isVirtualRowRender()) {\n      return rowIndex >= dataController.getMaxRowIndex();\n    }\n    const lastVisibleIndex = Math.max(...dataController.items().map((item, index) => false !== item.visible ? index : -1));\n    return rowIndex === lastVisibleIndex;\n  }\n  _isFirstValidCell(cellPosition) {\n    let isFirstValidCell = false;\n    if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\n      isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition);\n    }\n    return isFirstValidCell;\n  }\n  _hasValidCellBeforePosition(cellPosition) {\n    let {\n      columnIndex: columnIndex\n    } = cellPosition;\n    let hasValidCells = false;\n    while (columnIndex > 0 && !hasValidCells) {\n      const checkingPosition = {\n        columnIndex: --columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n    return hasValidCells;\n  }\n  _hasValidCellAfterPosition(cellPosition) {\n    let {\n      columnIndex: columnIndex\n    } = cellPosition;\n    let hasValidCells = false;\n    const visibleColumnCount = this._getVisibleColumnCount();\n    while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\n      const checkingPosition = {\n        columnIndex: ++columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n    return hasValidCells;\n  }\n  _isLastValidCell(cellPosition) {\n    const nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\n    const {\n      rowIndex: rowIndex\n    } = cellPosition;\n    const checkingPosition = {\n      columnIndex: nextColumnIndex,\n      rowIndex: rowIndex\n    };\n    const visibleRows = this._dataController.getVisibleRows();\n    const row = visibleRows && visibleRows[rowIndex];\n    const isLastRow = this._isLastRow(rowIndex);\n    if (!isLastRow) {\n      return false;\n    }\n    const isFullRowFocus = \"group\" === (null === row || void 0 === row ? void 0 : row.rowType) || \"groupFooter\" === (null === row || void 0 === row ? void 0 : row.rowType);\n    if (isFullRowFocus && cellPosition.columnIndex > 0) {\n      return true;\n    }\n    if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\n      return true;\n    }\n    if (this._isCellByPositionValid(checkingPosition)) {\n      return false;\n    }\n    return this._isLastValidCell(checkingPosition);\n  }\n  _isCellValid($cell, isClick) {\n    if (isElementDefined($cell)) {\n      const $row = $cell.parent();\n      const columnIndex = this._rowsView.getCellIndex($cell) + this._columnsController.getColumnIndexOffset();\n      const column = this._getColumnByCellElement($cell);\n      const visibleColumnCount = this._getVisibleColumnCount();\n      const editingController = this._editingController;\n      const isMasterDetailRow = isDetailRow($row);\n      const isShowWhenGrouped = column && column.showWhenGrouped;\n      const isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);\n      const isValidGroupSpaceColumn = function () {\n        return !isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\"), 10) > 1;\n      };\n      const isDragCell = GridCoreKeyboardNavigationDom.isDragCell($cell);\n      if (isDragCell) {\n        return false;\n      }\n      if (this.getMasterDetailCell($cell)) {\n        return true;\n      }\n      if (visibleColumnCount > columnIndex && isValidGroupSpaceColumn()) {\n        const rowItems = this._dataController.items();\n        const visibleRowIndex = this._rowsView.getRowIndex($row);\n        const row = rowItems[visibleRowIndex];\n        const isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\n        const isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\n        const isEditing = isRowEditingInCurrentRow || isCellEditing;\n        if (column.command) {\n          if (this._isLegacyNavigation()) {\n            return !isEditing && \"expand\" === column.command;\n          }\n          if (isCellEditing) {\n            return false;\n          }\n          if (isRowEditingInCurrentRow) {\n            return \"select\" !== column.command;\n          }\n          return !isEditing;\n        }\n        if (isCellEditing && row && \"data\" !== row.rowType) {\n          return false;\n        }\n        return !isEditing || column.allowEditing || isClick;\n      }\n    }\n  }\n  getFirstValidCellInRow($row, columnIndex) {\n    const that = this;\n    const $cells = $row.find(\"> td\");\n    let $cell;\n    let $result;\n    columnIndex = columnIndex || 0;\n    for (let i = columnIndex; i < $cells.length; ++i) {\n      $cell = $cells.eq(i);\n      if (that._isCellValid($cell)) {\n        $result = $cell;\n        break;\n      }\n    }\n    return $result;\n  }\n  _getNextCell(keyCode, elementType, cellPosition) {\n    const focusedCellPosition = cellPosition || this._focusedCellPosition;\n    const isRowFocusType = this.isRowFocusType();\n    const includeCommandCells = isRowFocusType || [\"next\", \"previous\"].includes(keyCode);\n    let $cell;\n    let $row;\n    if (this._focusedView && focusedCellPosition) {\n      const newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\n      $cell = $(this._getCell(newFocusedCellPosition));\n      const isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\n      if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\n        if (isRowFocusType) {\n          $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex);\n        } else {\n          $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition);\n        }\n      }\n      $row = isElementDefined($cell) && $cell.parent();\n      if (this._hasSkipRow($row)) {\n        const rowIndex = this._getRowIndex($row);\n        if (!this._isLastRow(rowIndex)) {\n          $cell = this._getNextCell(keyCode, \"row\", {\n            columnIndex: focusedCellPosition.columnIndex,\n            rowIndex: rowIndex\n          });\n        } else {\n          return null;\n        }\n      }\n      return isElementDefined($cell) ? $cell : null;\n    }\n    return null;\n  }\n  _startEditing(eventArgs, fastEditingKey) {\n    const focusedCellPosition = this._focusedCellPosition;\n    const visibleRowIndex = this.getVisibleRowIndex();\n    const visibleColumnIndex = this.getVisibleColumnIndex();\n    const row = this._dataController.items()[visibleRowIndex];\n    const column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n    if (this._isAllowEditing(row, column)) {\n      if (this._isRowEditMode()) {\n        this._editingController.editRow(visibleRowIndex);\n      } else if (focusedCellPosition) {\n        this._startEditCell(eventArgs, fastEditingKey);\n      }\n    }\n  }\n  _isAllowEditing(row, column) {\n    return this._editingController.allowUpdating({\n      row: row\n    }) && column && column.allowEditing;\n  }\n  _editFocusedCell() {\n    const rowIndex = this.getVisibleRowIndex();\n    const colIndex = this.getVisibleColumnIndex();\n    return this._editingController.editCell(rowIndex, colIndex);\n  }\n  _startEditCell(eventArgs, fastEditingKey) {\n    this._fastEditingStarted = isDefined(fastEditingKey);\n    const editResult = this._editFocusedCell();\n    const isEditResultDeferred = isDeferred(editResult);\n    const isFastEditingStarted = this._isFastEditingStarted();\n    if (!isFastEditingStarted || !isEditResultDeferred && !editResult) {\n      return;\n    }\n    const editorValue = isEditResultDeferred && fastEditingKey === FAST_EDITING_DELETE_KEY ? \"\" : fastEditingKey;\n    const editResultDeferred = isEditResultDeferred ? editResult : Deferred().resolve();\n    const waitTemplatesDeferred = this._rowsView.waitAsyncTemplates(true);\n    when(editResultDeferred, waitTemplatesDeferred).done(() => {\n      this._editingCellHandler(eventArgs, editorValue);\n    });\n  }\n  _editingCellHandler(eventArgs, editorValue) {\n    var _$inputElement$select;\n    const $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);\n    const $inputElement = $input.get(0);\n    if (!$inputElement) {\n      return;\n    }\n    const keyDownEvent = createEvent(eventArgs, {\n      type: \"keydown\",\n      target: $inputElement\n    });\n    const keyPressEvent = createEvent(eventArgs, {\n      type: \"keypress\",\n      target: $inputElement\n    });\n    const inputEvent = createEvent(eventArgs, {\n      type: \"input\",\n      target: $inputElement\n    });\n    if (inputEvent.originalEvent) {\n      inputEvent.originalEvent = createEvent(inputEvent.originalEvent, {\n        data: editorValue\n      });\n    }\n    null === (_$inputElement$select = $inputElement.select) || void 0 === _$inputElement$select || _$inputElement$select.call($inputElement);\n    eventsEngine.trigger($input, keyDownEvent);\n    if (!keyDownEvent.isDefaultPrevented()) {\n      eventsEngine.trigger($input, keyPressEvent);\n      if (!keyPressEvent.isDefaultPrevented()) {\n        const timeout = browser.mozilla ? 25 : 0;\n        setTimeout(() => {\n          const inputValue = this._getKeyPressInputValue($input, editorValue);\n          $input.val(inputValue);\n          const $widgetContainer = $input.closest(`.${WIDGET_CLASS}`);\n          eventsEngine.off($widgetContainer, \"focusout\");\n          eventsEngine.one($widgetContainer, \"focusout\", () => {\n            eventsEngine.trigger($input, \"change\");\n          });\n          eventsEngine.trigger($input, inputEvent);\n        }, timeout);\n      }\n    }\n  }\n  _getKeyPressInputValue($input, editorValue) {\n    const inputCurrentValue = $input.val();\n    return \"-\" === editorValue && \"-0\" === inputCurrentValue ? \"-0\" : editorValue;\n  }\n  _fireFocusChangingEvents($event, $cell, fireRowEvent, isHighlighted) {\n    let args = {};\n    const cellPosition = this._getCellPosition($cell) ?? {};\n    if (this.isCellFocusType()) {\n      args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\n      if (!args.cancel) {\n        cellPosition.columnIndex = args.newColumnIndex;\n        cellPosition.rowIndex = args.newRowIndex;\n        isHighlighted = args.isHighlighted;\n        $cell = $(this._getCell(cellPosition));\n      }\n    }\n    if (!args.cancel && fireRowEvent && $cell) {\n      args = this._fireFocusedRowChanging($event, $cell.parent());\n      if (!args.cancel) {\n        cellPosition.rowIndex = args.newRowIndex;\n        args.isHighlighted = isHighlighted;\n      }\n    }\n    args.$newCellElement = $(this._getCell(cellPosition));\n    if (!args.$newCellElement.length) {\n      args.$newCellElement = $cell;\n    }\n    return args;\n  }\n  _fireFocusedCellChanging($event, $cellElement, isHighlighted) {\n    const prevColumnIndex = this.option(\"focusedColumnIndex\");\n    const prevRowIndex = this.option(\"focusedRowIndex\");\n    const cellPosition = this._getCellPosition($cellElement);\n    const columnIndex = cellPosition ? cellPosition.columnIndex : -1;\n    const rowIndex = cellPosition ? cellPosition.rowIndex : -1;\n    const visibleRows = this._dataController.getVisibleRows();\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    const args = {\n      cellElement: $cellElement,\n      prevColumnIndex: prevColumnIndex,\n      prevRowIndex: prevRowIndex,\n      newColumnIndex: columnIndex,\n      newRowIndex: rowIndex,\n      rows: visibleRows,\n      columns: visibleColumns,\n      event: $event,\n      isHighlighted: isHighlighted || false,\n      cancel: false\n    };\n    this._canceledCellPosition = null;\n    this.executeAction(\"onFocusedCellChanging\", args);\n    if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\n      args.$newCellElement = $(this._getCell({\n        columnIndex: args.newColumnIndex,\n        rowIndex: args.newRowIndex\n      }));\n    }\n    if (args.cancel) {\n      this._canceledCellPosition = {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n    return args;\n  }\n  _fireFocusedCellChanged($cell) {\n    const columnIndex = this._rowsView.getCellIndex($cell);\n    const rowOptions = null === $cell || void 0 === $cell ? void 0 : $cell.parent().data(\"options\");\n    const focusedRowKey = null === rowOptions || void 0 === rowOptions ? void 0 : rowOptions.key;\n    this._memoFireFocusedCellChanged(focusedRowKey, columnIndex);\n  }\n  _memoFireFocusedCellChanged(rowKey, columnIndex) {\n    const $cell = this._getFocusedCell();\n    const rowIndex = this._getRowIndex(null === $cell || void 0 === $cell ? void 0 : $cell.parent());\n    const localRowIndex = Math.min(rowIndex - this._dataController.getRowIndexOffset(), this._dataController.items().length - 1);\n    const isEditingCell = this._editingController.isEditCell(localRowIndex, columnIndex);\n    if (isEditingCell) {\n      return;\n    }\n    const row = this._dataController.items()[localRowIndex];\n    const column = this._columnsController.getVisibleColumns()[columnIndex];\n    this.executeAction(\"onFocusedCellChanged\", {\n      cellElement: $cell ? getPublicElement($cell) : void 0,\n      columnIndex: columnIndex,\n      rowIndex: rowIndex,\n      row: row,\n      column: column\n    });\n  }\n  _fireFocusedRowChanging(eventArgs, $newFocusedRow) {\n    const newRowIndex = this._getRowIndex($newFocusedRow);\n    const prevFocusedRowIndex = this.option(\"focusedRowIndex\");\n    const loadingOperationTypes = this._dataController.loadingOperationTypes();\n    const args = {\n      rowElement: $newFocusedRow,\n      prevRowIndex: prevFocusedRowIndex,\n      newRowIndex: newRowIndex,\n      event: eventArgs,\n      rows: this._dataController.getVisibleRows(),\n      cancel: false\n    };\n    const loadingOperations = loadingOperationTypes.sorting || loadingOperationTypes.grouping || loadingOperationTypes.filtering || loadingOperationTypes.paging;\n    if (!this._dataController || this._dataController.isLoading() && loadingOperations) {\n      args.cancel = true;\n      return args;\n    }\n    if (this.option(\"focusedRowEnabled\")) {\n      this.executeAction(\"onFocusedRowChanging\", args);\n      if (!args.cancel && args.newRowIndex !== newRowIndex) {\n        args.resetFocusedRow = args.newRowIndex < 0;\n        if (!args.resetFocusedRow) {\n          this.setFocusedRowIndex(args.newRowIndex);\n        }\n        args.rowIndexChanged = true;\n      }\n    }\n    return args;\n  }\n  _fireFocusedRowChanged() {\n    var _this$_focusControlle;\n    const focusedRowEnabled = this.option(\"focusedRowEnabled\");\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    const focusedRowIndex = null === (_this$_focusControlle = this._focusController) || void 0 === _this$_focusControlle ? void 0 : _this$_focusControlle.getFocusedRowIndexByKey(focusedRowKey);\n    if (!focusedRowEnabled || isDefined(focusedRowKey) && focusedRowIndex < 0) {\n      return;\n    }\n    this._memoFireFocusedRowChanged(focusedRowKey, focusedRowIndex);\n  }\n  _memoFireFocusedRowChanged(focusedRowKey, focusedRowIndex) {\n    const localRowIndex = focusedRowIndex - this._dataController.getRowIndexOffset();\n    this.executeAction(\"onFocusedRowChanged\", {\n      rowElement: focusedRowIndex < 0 ? void 0 : this._rowsView.getRowElement(localRowIndex),\n      rowIndex: focusedRowIndex,\n      row: focusedRowIndex < 0 ? void 0 : this._dataController.getVisibleRows()[localRowIndex]\n    });\n  }\n  _isEventInCurrentGrid(event) {\n    return gridCoreUtils.isElementInCurrentGrid(this, $(event.target));\n  }\n  _isRowEditMode() {\n    const editMode = this._editingController.getEditMode();\n    return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM;\n  }\n  _isCellEditMode() {\n    const editMode = this._editingController.getEditMode();\n    return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH;\n  }\n  _isFastEditingAllowed() {\n    return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\");\n  }\n  _getInteractiveElement($cell, isLast) {\n    const $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\n    return isLast ? $focusedElement.last() : $focusedElement.first();\n  }\n  _applyTabIndexToElement($element) {\n    const tabIndex = this.option(\"tabIndex\") ?? 0;\n    $element.attr(\"tabindex\", tabIndex);\n  }\n  _getCell(cellPosition) {\n    if (this._focusedView && cellPosition) {\n      const rowIndexOffset = this._dataController.getRowIndexOffset();\n      const column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\n      const columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\n      const rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\n      const columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\n      return this._focusedView.getCell({\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n    }\n  }\n  _getRowIndex($row) {\n    let rowIndex = this._rowsView.getRowIndex($row);\n    if (rowIndex >= 0) {\n      rowIndex += this._dataController.getRowIndexOffset();\n    }\n    return rowIndex;\n  }\n  _hasSkipRow($row) {\n    const row = $row && $row.get(0);\n    return row && \"none\" === row.style.display;\n  }\n  _allowEditingOnEnterKey() {\n    return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\");\n  }\n  _isLegacyNavigation() {\n    return this.option(\"useLegacyKeyboardNavigation\");\n  }\n  _getDirectionCodeByKey(key) {\n    let directionCode;\n    switch (key) {\n      case \"upArrow\":\n        directionCode = \"prevRow\";\n        break;\n      case \"downArrow\":\n        directionCode = \"nextRow\";\n        break;\n      case \"leftArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\n        break;\n      case \"rightArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\";\n    }\n    return directionCode;\n  }\n  _isVirtualScrolling() {\n    const scrollingMode = this.option(\"scrolling.mode\");\n    return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n  }\n  _isVirtualRowRender() {\n    return this._isVirtualScrolling() || gridCoreUtils.isVirtualRowRendering(this);\n  }\n  _isVirtualColumnRender() {\n    return \"virtual\" === this.option(\"scrolling.columnRenderingMode\");\n  }\n  _scrollBy(left, top, rowIndex, $event) {\n    const that = this;\n    const scrollable = this._rowsView.getScrollable();\n    if (that._focusedCellPosition) {\n      const scrollHandler = function () {\n        scrollable.off(\"scroll\", scrollHandler);\n        setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event));\n      };\n      scrollable.on(\"scroll\", scrollHandler);\n    }\n    return scrollable.scrollBy({\n      left: left,\n      top: top\n    });\n  }\n  _isInsideEditForm(element) {\n    const $editForm = $(element).closest(`.${this.addWidgetPrefix(EDIT_FORM_CLASS)}`);\n    return $editForm.length && this.elementIsInsideGrid($editForm);\n  }\n  getMasterDetailCell(element) {\n    const $masterDetailCell = $(element).closest(`.${MASTER_DETAIL_CELL_CLASS}`);\n    if ($masterDetailCell.length && this.elementIsInsideGrid($masterDetailCell)) {\n      return $masterDetailCell;\n    }\n    return null;\n  }\n  _processNextCellInMasterDetail($nextCell, _$cell) {\n    if (!this._isInsideEditForm($nextCell) && $nextCell) {\n      this._applyTabIndexToElement($nextCell);\n    }\n  }\n  _handleTabKeyOnMasterDetailCell(target, direction) {\n    if (this.getMasterDetailCell(target)) {\n      this._updateFocusedCellPosition($(target), direction);\n      const $nextCell = this._getNextCell(direction, \"row\");\n      this._processNextCellInMasterDetail($nextCell, $(target));\n      return true;\n    }\n    return false;\n  }\n  _getElementType(target) {\n    return $(target).is(\"tr\") ? \"row\" : \"cell\";\n  }\n  _isFastEditingStarted() {\n    return this._isFastEditingAllowed() && this._fastEditingStarted;\n  }\n  _getVisibleColumnCount() {\n    return this._columnsController.getVisibleColumns(null, true).length;\n  }\n  _isCellInRow(cellPosition, includeCommandCells) {\n    const {\n      columnIndex: columnIndex\n    } = cellPosition;\n    const visibleColumnsCount = this._getVisibleColumnCount();\n    return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1;\n  }\n  _isCellElement($element) {\n    return $element.length && \"TD\" === $element[0].tagName;\n  }\n  _getCellElementFromTarget(target) {\n    const elementType = this._getElementType(target);\n    const $targetElement = $(target);\n    let $cell;\n    if (\"cell\" === elementType) {\n      $cell = $targetElement.closest(`.${ROW_CLASS} > td`);\n    } else {\n      $cell = $targetElement.children().not(`.${COMMAND_EXPAND_CLASS}`).first();\n    }\n    return $cell;\n  }\n  _getRowsViewElement() {\n    var _this$_rowsView5;\n    return null === (_this$_rowsView5 = this._rowsView) || void 0 === _this$_rowsView5 ? void 0 : _this$_rowsView5.element();\n  }\n  isKeyboardEnabled() {\n    return this.option(\"keyboardNavigation.enabled\");\n  }\n  _processCanceledEditCellPosition(rowIndex, columnIndex) {\n    if (this._canceledCellPosition) {\n      const isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\n      this._canceledCellPosition = null;\n      return isCanceled;\n    }\n    return;\n  }\n  updateFocusedRowIndex() {\n    const dataController = this._dataController;\n    const visibleRowIndex = this.getVisibleRowIndex();\n    const visibleItems = dataController.items();\n    const lastVisibleIndex = visibleItems.length ? visibleItems.length - 1 : -1;\n    const rowIndexOffset = dataController.getRowIndexOffset();\n    if (lastVisibleIndex >= 0 && visibleRowIndex > lastVisibleIndex) {\n      this.setFocusedRowIndex(lastVisibleIndex + rowIndexOffset);\n    }\n  }\n}\nconst rowsView = Base => class extends Base {\n  _rowClick(e) {\n    const editRowIndex = this._editingController.getEditRowIndex();\n    const isKeyboardEnabled = this._keyboardNavigationController.isKeyboardEnabled();\n    if (editRowIndex === e.rowIndex) {\n      this._keyboardNavigationController.setCellFocusType();\n    }\n    const needTriggerPointerEventHandler = (isMobile() || !isKeyboardEnabled) && this.option(\"focusedRowEnabled\");\n    if (needTriggerPointerEventHandler) {\n      this._triggerPointerDownEventHandler(e, !isKeyboardEnabled);\n    }\n    super._rowClick.apply(this, arguments);\n  }\n  _triggerPointerDownEventHandler(e, force) {\n    const {\n      originalEvent: originalEvent\n    } = e.event;\n    if (originalEvent) {\n      const $cell = $(originalEvent.target);\n      const columnIndex = this.getCellIndex($cell);\n      const column = this._columnsController.getVisibleColumns()[columnIndex];\n      const row = this._dataController.items()[e.rowIndex];\n      if (this._keyboardNavigationController._isAllowEditing(row, column) || force) {\n        const eventArgs = createEvent(originalEvent, {\n          currentTarget: originalEvent.target\n        });\n        this._keyboardNavigationController._pointerEventHandler(eventArgs);\n      }\n    }\n  }\n  renderFocusState(params) {\n    super.renderFocusState(params);\n    const {\n      preventScroll: preventScroll,\n      pageSizeChanged: pageSizeChanged\n    } = params ?? {};\n    const $rowsViewElement = this.element();\n    if ($rowsViewElement && !focused($rowsViewElement)) {\n      $rowsViewElement.attr(\"tabindex\", null);\n    }\n    pageSizeChanged && this._keyboardNavigationController.updateFocusedRowIndex();\n    let rowIndex = this._keyboardNavigationController.getVisibleRowIndex();\n    if (!isDefined(rowIndex) || rowIndex < 0) {\n      rowIndex = 0;\n    }\n    const cellElements = this.getCellElements(rowIndex);\n    if (this._keyboardNavigationController.isKeyboardEnabled() && null !== cellElements && void 0 !== cellElements && cellElements.length) {\n      this.updateFocusElementTabIndex(cellElements, preventScroll);\n    }\n  }\n  updateFocusElementTabIndex(cellElements, preventScroll) {\n    const $row = cellElements.eq(0).parent();\n    if (isGroupRow($row)) {\n      this._keyboardNavigationController._applyTabIndexToElement($row);\n    } else {\n      let columnIndex = this._keyboardNavigationController.getColumnIndex();\n      if (!isDefined(columnIndex) || columnIndex < 0) {\n        columnIndex = 0;\n      }\n      this._updateFocusedCellTabIndex(cellElements, columnIndex);\n    }\n  }\n  _updateFocusedCellTabIndex(cellElements, columnIndex) {\n    const keyboardController = this._keyboardNavigationController;\n    const cellElementsLength = cellElements ? cellElements.length : -1;\n    const updateCellTabIndex = function ($cell) {\n      const isMasterDetailCell = !!keyboardController.getMasterDetailCell($cell);\n      const isValidCell = keyboardController._isCellValid($cell);\n      if (!isMasterDetailCell && isValidCell && keyboardController._isCellElement($cell)) {\n        keyboardController._applyTabIndexToElement($cell);\n        keyboardController.setCellFocusType();\n        return true;\n      }\n      return;\n    };\n    const $cell = GridCoreKeyboardNavigationDom.getCellToFocus(cellElements, columnIndex);\n    if ($cell.length) {\n      updateCellTabIndex($cell);\n    } else {\n      if (cellElementsLength <= columnIndex) {\n        columnIndex = cellElementsLength - 1;\n      }\n      for (let i = columnIndex; i < cellElementsLength; ++i) {\n        if (updateCellTabIndex($(cellElements[i]))) {\n          break;\n        }\n      }\n    }\n  }\n  renderDelayedTemplates(change) {\n    super.renderDelayedTemplates.apply(this, arguments);\n    this.waitAsyncTemplates().done(() => {\n      this._renderFocusByChange(change);\n    });\n  }\n  _renderFocusByChange(change) {\n    var _change$changeTypes;\n    const {\n      operationTypes: operationTypes,\n      repaintChangesOnly: repaintChangesOnly\n    } = change ?? {};\n    const {\n      fullReload: fullReload,\n      pageSize: pageSize\n    } = operationTypes ?? {};\n    const hasInsertsOrRemoves = !!(null !== change && void 0 !== change && null !== (_change$changeTypes = change.changeTypes) && void 0 !== _change$changeTypes && _change$changeTypes.find(changeType => \"insert\" === changeType || \"remove\" === changeType));\n    if (!change || !repaintChangesOnly || fullReload || pageSize || hasInsertsOrRemoves) {\n      const preventScroll = shouldPreventScroll(this);\n      this.renderFocusState({\n        preventScroll: preventScroll,\n        pageSizeChanged: pageSize\n      });\n    }\n  }\n  _renderCore(change) {\n    const deferred = super._renderCore.apply(this, arguments);\n    this._renderFocusByChange(change);\n    return deferred;\n  }\n  _editCellPrepared($cell) {\n    var _this$_keyboardNaviga;\n    const editorInstance = this._getEditorInstance($cell);\n    const isEditingNavigationMode = null === (_this$_keyboardNaviga = this._keyboardNavigationController) || void 0 === _this$_keyboardNaviga ? void 0 : _this$_keyboardNaviga._isFastEditingStarted();\n    if (editorInstance && isEditingNavigationMode) {\n      this._handleEditingNavigationMode(editorInstance);\n    }\n    super._editCellPrepared.apply(this, arguments);\n  }\n  _handleEditingNavigationMode(editorInstance) {\n    [\"downArrow\", \"upArrow\"].forEach(keyName => {\n      const originalKeyHandler = editorInstance._supportedKeys()[keyName];\n      editorInstance.registerKeyHandler(keyName, e => {\n        const isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\n        if (isDropDownOpened) {\n          return originalKeyHandler && originalKeyHandler.call(editorInstance, e);\n        }\n      });\n    });\n    editorInstance.registerKeyHandler(\"leftArrow\", noop);\n    editorInstance.registerKeyHandler(\"rightArrow\", noop);\n    const isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option(\"useMaskBehavior\");\n    if (isDateBoxWithMask) {\n      editorInstance.registerKeyHandler(\"enter\", noop);\n    }\n  }\n  _getEditorInstance($cell) {\n    const $editor = $cell.find(\".dx-texteditor\").eq(0);\n    return gridCoreUtils.getWidgetInstance($editor);\n  }\n};\nconst editing = Base => class extends Base {\n  editCell(rowIndex, columnIndex) {\n    if (this._keyboardNavigationController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\n      return false;\n    }\n    const isCellEditing = super.editCell(rowIndex, columnIndex);\n    if (isCellEditing) {\n      this._keyboardNavigationController.setupFocusedView();\n    }\n    return isCellEditing;\n  }\n  editRow(rowIndex) {\n    const visibleColumnIndex = this._keyboardNavigationController.getVisibleColumnIndex();\n    const column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n    if (column && column.type || this.option(\"editing.mode\") === EDIT_MODE_FORM) {\n      this._keyboardNavigationController._resetFocusedCell();\n    }\n    super.editRow(rowIndex);\n    return;\n  }\n  addRow(parentKey) {\n    this._keyboardNavigationController.setupFocusedView();\n    this._keyboardNavigationController.setCellFocusType();\n    return super.addRow.apply(this, arguments);\n  }\n  getFocusedCellInRow(rowIndex) {\n    let $cell = super.getFocusedCellInRow(rowIndex);\n    const rowIndexOffset = this._dataController.getRowIndexOffset();\n    const focusedRowIndex = this._keyboardNavigationController._focusedCellPosition.rowIndex - rowIndexOffset;\n    if (this._keyboardNavigationController.isKeyboardEnabled() && focusedRowIndex === rowIndex) {\n      const $focusedCell = this._keyboardNavigationController._getFocusedCell();\n      if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS)) {\n        $cell = $focusedCell;\n      }\n    }\n    return $cell;\n  }\n  _processCanceledEditingCell() {\n    this.closeEditCell().done(() => {\n      this._keyboardNavigationController._updateFocus();\n    });\n  }\n  closeEditCell() {\n    const keyboardNavigation = this._keyboardNavigationController;\n    keyboardNavigation._fastEditingStarted = false;\n    const result = super.closeEditCell.apply(this, arguments);\n    const $focusedElement = this._getFocusedElement();\n    const isFilterCell = !!$focusedElement.closest(`.${this.addWidgetPrefix(FILTER_ROW_CLASS)}`).length;\n    if (!isFilterCell) {\n      keyboardNavigation._updateFocus();\n    }\n    return result;\n  }\n  _getFocusedElement() {\n    var _this$component$eleme, _this$component;\n    const $element = $(null === (_this$component$eleme = (_this$component = this.component).element) || void 0 === _this$component$eleme ? void 0 : _this$component$eleme.call(_this$component));\n    const $focusedElement = $element.find(\":focus\");\n    return $focusedElement;\n  }\n  _delayedInputFocus() {\n    this._keyboardNavigationController._isNeedScroll = true;\n    super._delayedInputFocus.apply(this, arguments);\n  }\n  _isEditingStart() {\n    const cancel = super._isEditingStart.apply(this, arguments);\n    if (cancel && !this._keyboardNavigationController._isNeedFocus) {\n      const $cell = this._keyboardNavigationController._getFocusedCell();\n      this._keyboardNavigationController._focus($cell, true);\n    }\n    return cancel;\n  }\n};\nconst data = Base => class extends Base {\n  _correctRowIndices(getRowIndexCorrection) {\n    const focusedCellPosition = this._keyboardNavigationController._focusedCellPosition;\n    super._correctRowIndices.apply(this, arguments);\n    if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\n      const focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\n      if (focusedRowIndexCorrection) {\n        focusedCellPosition.rowIndex += focusedRowIndexCorrection;\n        this._editorFactoryController.refocus();\n      }\n    }\n  }\n  getMaxRowIndex() {\n    let result = this.items().length - 1;\n    const virtualItemsCount = this.virtualItemsCount();\n    if (virtualItemsCount) {\n      const rowIndexOffset = this.getRowIndexOffset();\n      result += rowIndexOffset + virtualItemsCount.end;\n    }\n    return result;\n  }\n};\nconst adaptiveColumns = Base => class extends Base {\n  _showHiddenCellsInView(_ref) {\n    let {\n      viewName: viewName,\n      $cells: $cells,\n      isCommandColumn: isCommandColumn\n    } = _ref;\n    super._showHiddenCellsInView.apply(this, arguments);\n    viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each((_, cellElement) => {\n      const $cell = $(cellElement);\n      isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0);\n    });\n  }\n  _hideVisibleCellInView(_ref2) {\n    let {\n      viewName: viewName,\n      $cell: $cell,\n      isCommandColumn: isCommandColumn\n    } = _ref2;\n    super._hideVisibleCellInView.apply(this, arguments);\n    if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {\n      $cell.removeAttr(\"tabindex\");\n    }\n  }\n  _hideVisibleColumnInView(_ref3) {\n    let {\n      view: view,\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref3;\n    super._hideVisibleColumnInView({\n      view: view,\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    });\n    if (view.name === ROWS_VIEW) {\n      this._rowsView.renderFocusState(null);\n    }\n  }\n};\nexport const keyboardNavigationModule = {\n  defaultOptions: () => ({\n    useLegacyKeyboardNavigation: false,\n    keyboardNavigation: {\n      enabled: true,\n      enterKeyAction: \"startEdit\",\n      enterKeyDirection: \"none\",\n      editOnKeyPress: false\n    }\n  }),\n  controllers: {\n    keyboardNavigation: KeyboardNavigationController\n  },\n  extenders: {\n    views: {\n      rowsView: rowsView\n    },\n    controllers: {\n      editing: editing,\n      data: data,\n      adaptiveColumns: adaptiveColumns,\n      keyboardNavigation: keyboardNavigationScrollableA11yExtender\n    }\n  }\n};","map":{"version":3,"names":["name","clickEventName","eventsEngine","pointerEvents","keyboard","addNamespace","createEvent","isCommandKeyPressed","noop","domAdapter","getPublicElement","$","browser","Deferred","when","getHeight","getOuterHeight","getOuterWidth","getWidth","isDeferred","isDefined","isEmptyObject","accessibility","focused","isElementInDom","memoize","EDIT_FORM_CLASS","EDIT_MODE_BATCH","EDIT_MODE_CELL","EDIT_MODE_FORM","EDIT_MODE_ROW","EDITOR_CELL_CLASS","FILTER_ROW_CLASS","FOCUSABLE_ELEMENT_SELECTOR","ROW_CLASS","modules","gridCoreUtils","ADAPTIVE_COLUMN_NAME_CLASS","CELL_FOCUS_DISABLED_CLASS","COLUMN_HEADERS_VIEW","COMMAND_CELL_SELECTOR","COMMAND_EDIT_CLASS","COMMAND_EXPAND_CLASS","COMMAND_SELECT_CLASS","DATA_ROW_CLASS","DATEBOX_WIDGET_NAME","DROPDOWN_EDITOR_OVERLAY_CLASS","EDIT_FORM_ITEM_CLASS","FAST_EDITING_DELETE_KEY","FOCUS_STATE_CLASS","FOCUS_TYPE_CELL","FOCUS_TYPE_ROW","FOCUSED_CLASS","FREESPACE_ROW_CLASS","FUNCTIONAL_KEYS","INTERACTIVE_ELEMENTS_SELECTOR","MASTER_DETAIL_CELL_CLASS","NON_FOCUSABLE_ELEMENTS_SELECTOR","REVERT_BUTTON_CLASS","ROWS_VIEW","ROWS_VIEW_CLASS","TABLE_CLASS","WIDGET_CLASS","GridCoreKeyboardNavigationDom","isCellInHeaderRow","isDataRow","isDetailRow","isEditForm","isEditorCell","isElementDefined","isFixedColumnIndexOffsetRequired","isGroupFooterRow","isGroupRow","isMobile","isNotFocusedRow","shouldPreventScroll","keyboardNavigationScrollableA11yExtender","KeyboardNavigationController","ViewController","init","_dataController","getController","_selectionController","_editingController","_headerPanel","getView","_rowsView","_columnHeadersView","_columnsController","_editorFactory","_focusController","_adaptiveColumnsController","_columnResizerController","_memoFireFocusedCellChanged","bind","compareType","_memoFireFocusedRowChanged","focusedHandlerWithContext","focusedHandler","columnHeadersViewRenderCompletedWithContext","columnHeadersViewRenderCompleted","rowsViewRenderCompletedWithContext","rowsViewRenderCompleted","rowsViewFocusHandlerContext","rowsViewFocusHandler","rowsViewFocusOutHandlerContext","rowsViewFocusOutHandler","_updateFocusTimeout","_fastEditingStarted","_focusedCellPosition","_canceledCellPosition","isKeyboardEnabled","_this$_editorFactory","subscribeVisibilityChange","add","createAction","_this$_editorFactory2","unsubscribeVisibilityChange","remove","initColumnHeadersViewHandler","initRowsViewHandlers","initDocumentHandlers","dispose","_resetFocusedView","off","_rowsViewKeyDownListener","_columnHeadersViewKeyDownListener","getDocument","down","_documentClickHandler","clearTimeout","$element","setupFocusedView","_isNeedScroll","is","_focusedView","getScrollable","_scrollToElement","event","target","isRelatedTargetInRowsView","relatedTarget","closest","element","length","isLink","_isEventInCurrentGrid","$focusedCell","_getFocusedCell","getCellElements","filter","eq","preventDefault","trigger","isCell","needSetFocusPosition","option","_updateFocusedCellPosition","_toggleInertAttr","subscribeToRowsViewFocusEvent","_this$_rowsView","$rowsView","on","unsubscribeFromRowsViewFocusEvent","_this$_rowsView2","initColumnHeadersViewKeyDownHandler","e","isFullUpdate","changeType","isFocusedViewCorrect","needUpdateFocus","isAppend","root","getRootNode","get","$focusedElement","find","isFocusedElementCorrect","_isFocusedElementCorrect","initPointerEventHandler","initRowsViewKeyDownHandler","_setRowsViewAttributes","_isNeedFocus","_isHiddenFocus","virtualColumnsScrolling","_e$event","isScrollEvent","type","skipFocusEvent","_updateFocus","_this$_focusedCellPos","focusedColumnIndex","columnIndex","_isColumnRendered","_this$_columnHeadersV","unsubscribeFromColumnHeadersViewKeyDownEvent","renderCompleted","_this$_columnHeadersV2","_this$_rowsView3","unsubscribeFromPointerEvent","unsubscribeFromRowsViewKeyDownEvent","document","_this$_columnResizerC","$target","tableSelector","addWidgetPrefix","rowsViewSelector","editorOverlaySelector","needKeepFocus","isRowsViewClick","isEditorOverlayClick","isColumnResizing","isResizing","isClickOutsideFocusedView","_resetFocusedCell","_getRowsViewElement","isGridEmpty","getVisibleRows","_applyTabIndexToElement","pointerEventName","_pointerEventAction","subscribeToPointerEvent","clickSelector","_pointerEventHandler","subscribeToColumnHeadersViewKeyDownEvent","$columnHeadersView","_columnHeadersViewKeyDownHandler","subscribeToRowsViewKeyDownEvent","_rowsViewKeyDownHandler","optionChanged","args","fullName","handled","isRowFocusType","focusType","isCellFocusType","setRowFocusType","setCellFocusType","headerTabKeyHandler","keyName","_this$_editingControl","needStopPropagation","isHandled","_processOnKeyDown","isEditing","originalEvent","isDefaultPrevented","includes","_updateFocusedCellPositionByTarget","_leftRightKeysHandler","ctrl","selectView","_upDownKeysHandler","_pageUpDownKeyHandler","_spaceKeyHandler","_ctrlAKeyHandler","_beginFastEditing","_tabKeyHandler","_enterKeyHandler","_escapeKeyHandler","_ctrlFKeyHandler","_f2KeyHandler","_isFastEditingAllowed","_isFastEditingStarted","stopPropagation","eventArgs","executeAction","ctrlKey","alt","altKey","shift","shiftKey","_closeEditCell","d","setTimeout","closeEditCell","always","resolve","rowIndex","getVisibleRowIndex","$event","$row","getRow","directionCode","_getDirectionCodeByKey","isEditingNavigationMode","allowNavigate","_isVirtualColumnRender","_processVirtualHorizontalPosition","$cell","_getNextCell","_arrowKeysHandlerFocusCell","isInsideMasterDetail","$masterDetail","elementIsInsideGrid","_this$_editingControl2","_this$_editingControl3","visibleRowIndex","isUpArrow","dataSource","isRowEditingInCurrentRow","isEditRowByIndex","call","_navigateNextCell","_isVirtualRowRender","isLoading","rowHeight","_scrollBy","pageIndex","pageCount","pagingEnabled","isPageUp","pageStep","scrollable","_isVirtualScrolling","container","$content","mode","isFocusedRowElement","_getElementType","isFocusedSelectionCell","hasClass","startSelectionWithCheckboxes","parent","changeItemSelection","control","selectAll","value","editingOptions","direction","isCellPositionDefined","isFirstValidCell","_isFirstValidCell","isLastValidCell","_isLastValidCell","isOriginalHandlerRequired","eventTarget","focusedViewElement","_handleTabKeyOnMasterDetailCell","addClass","_editingCellTabHandler","_targetCellTabHandler","isCommandCell","loseFocus","_isRowEditMode","_getMaxHorizontalOffset","component","scrollWidth","allVisibleColumns","getVisibleColumns","renderedVisibleColumns","column","result","indexOf","_isFixedColumn","fixed","_isColumnVirtual","localColumnIndex","getColumnIndexOffset","visibleColumns","command","getColumnIndex","nextColumnIndex","horizontalScrollPosition","needToScroll","columnsCount","_getVisibleColumnCount","columnIndexOffset","leftEdgePosition","scrollTo","left","_getHorizontalScrollPositionOffset","scrollBy","top","positionOffset","$currentCell","_getCell","currentCellWidth","rtlMultiplier","_getCellElementFromTarget","isEditingAllowed","elementType","nextCellInfo","_getNextCellByTabKey","_getColumnByCellElement","_getRowIndex","row","items","editingController","allowEditing","rowType","allowUpdating","isNewRow","_focusCell","isHighlighted","_editFocusedCell","_focusInteractiveElement","$lastInteractiveElement","_getInteractiveElement","getFirstValidCellInRow","_checkNewLineTransition","_fireFocusedCellChanging","cancel","$newCellElement","cellPosition","_getCellPosition","_fireFocusedRowChanging","rowIndexChanged","setFocusedColumnIndex","_this$_focusedView","_this$getMasterDetail","key","getKeyByRowIndex","needExpandGroupRow","needExpandMasterDetailRow","needExpandAdaptiveRow","item","isNotContinuation","data","isContinuation","changeRowExpand","toggleExpandAdaptiveDetailRow","getMasterDetailCell","focusFirstInteractiveElementInside","_processEnterKeyForDataCell","$el","focus","_getEnterKeyDirection","allowEditingOnEnterKey","_allowEditingOnEnterKey","_handleEnterKeyEditingCell","done","_startEditing","enterKeyDirection","isShift","isRowEditMode","_focusEditFormCell","saveEditData","getEditMode","cancelEditData","masterDetailCell","searchTextEditor","getSearchTextEditor","keyCode","isCellValid","_isCellValid","$nextCell","isVerticalDirection","_fireFocusChangingEvents","_focus","isDeleting","which","fastEditingKey","String","fromCharCode","_this$_rowsView4","currentTarget","$parent","isInteractiveElement","isRevertButton","isExpandCommandCell","_isInsideEditForm","_focusView","removeClass","_clickTargetCellHandler","isCellEditMode","_isCellEditMode","resetFocusedRow","_resetFocusedRow","_allowRowUpdating","not","isEditor","isDisabled","setFocusedRowIndex","prevRowIndex","activeElementSelector","focusedRowEnabled","_isCellElement","first","_focusElement","getFocusedView","rowsViewElement","$focusedView","_getFocusedViewByElement","view","$view","isLast","focusAndSelectElement","disableFocus","focusedView","$focusViewElement","$focusElement","isRowFocus","i","node","isElementInCurrentGrid","removeAttr","one","isRenderView","arguments","_needFocusEditingCell","_focusEditingCell","_hasSkipRow","$focusedElementInsideCell","isFocusedElementDefined","showEditorAlways","cellIndex","getCellIndex","isBatchEditMode","cellEditModeHasChanges","hasChanges","isNewRowBatchEditMode","isNewRowInEditMode","children","_this$_focusedCellPos2","position","setFocusedCellPosition","_getFocusedColumnIndexOffset","offset","_getFixedColumnIndexOffset","_applyColumnIndexBoundaries","preventScroll","_this$_focusedView2","renderFocusState","restoreFocusableElement","that","$rowElement","$rowsViewElement","rowIndexOffset","getRowIndexOffset","getTopVisibleItemIndex","newRowIndex","_getNewPositionByCode","code","visibleColumnsCount","_hasValidCellAfterPosition","_isLastRow","_hasValidCellBeforePosition","getRowIndex","_this$_focusedCellPos3","getVisibleColumnIndex","_this$_focusedCellPos4","_isCellByPositionValid","dataController","getMaxRowIndex","lastVisibleIndex","Math","max","map","index","visible","hasValidCells","checkingPosition","visibleColumnCount","visibleRows","isLastRow","isFullRowFocus","isClick","isMasterDetailRow","isShowWhenGrouped","showWhenGrouped","isDataCell","isValidGroupSpaceColumn","groupIndex","parseInt","attr","isDragCell","rowItems","isCellEditing","isEditRow","_isLegacyNavigation","$cells","$result","focusedCellPosition","includeCommandCells","newFocusedCellPosition","isLastCellOnDirection","_isCellInRow","visibleColumnIndex","_isAllowEditing","editRow","_startEditCell","colIndex","editCell","editResult","isEditResultDeferred","isFastEditingStarted","editorValue","editResultDeferred","waitTemplatesDeferred","waitAsyncTemplates","_editingCellHandler","_$inputElement$select","$input","$inputElement","keyDownEvent","keyPressEvent","inputEvent","select","timeout","mozilla","inputValue","_getKeyPressInputValue","val","$widgetContainer","inputCurrentValue","fireRowEvent","newColumnIndex","$cellElement","prevColumnIndex","cellElement","rows","columns","_fireFocusedCellChanged","rowOptions","focusedRowKey","rowKey","localRowIndex","min","isEditingCell","isEditCell","$newFocusedRow","prevFocusedRowIndex","loadingOperationTypes","rowElement","loadingOperations","sorting","grouping","filtering","paging","_fireFocusedRowChanged","_this$_focusControlle","focusedRowIndex","getFocusedRowIndexByKey","getRowElement","editMode","last","tabIndex","getCell","style","display","scrollingMode","isVirtualRowRendering","scrollHandler","$editForm","$masterDetailCell","_processNextCellInMasterDetail","_$cell","tagName","$targetElement","_this$_rowsView5","_processCanceledEditCellPosition","isCanceled","updateFocusedRowIndex","visibleItems","rowsView","Base","_rowClick","editRowIndex","getEditRowIndex","_keyboardNavigationController","needTriggerPointerEventHandler","_triggerPointerDownEventHandler","apply","force","params","pageSizeChanged","cellElements","updateFocusElementTabIndex","_updateFocusedCellTabIndex","keyboardController","cellElementsLength","updateCellTabIndex","isMasterDetailCell","isValidCell","getCellToFocus","renderDelayedTemplates","change","_renderFocusByChange","_change$changeTypes","operationTypes","repaintChangesOnly","fullReload","pageSize","hasInsertsOrRemoves","changeTypes","_renderCore","deferred","_editCellPrepared","_this$_keyboardNaviga","editorInstance","_getEditorInstance","_handleEditingNavigationMode","forEach","originalKeyHandler","_supportedKeys","registerKeyHandler","isDropDownOpened","_input","isDateBoxWithMask","NAME","$editor","getWidgetInstance","editing","addRow","parentKey","getFocusedCellInRow","_processCanceledEditingCell","keyboardNavigation","_getFocusedElement","isFilterCell","_this$component$eleme","_this$component","_delayedInputFocus","_isEditingStart","_correctRowIndices","getRowIndexCorrection","focusedRowIndexCorrection","_editorFactoryController","refocus","virtualItemsCount","end","adaptiveColumns","_showHiddenCellsInView","_ref","viewName","isCommandColumn","each","_","_hideVisibleCellInView","_ref2","_hideVisibleColumnInView","_ref3","visibleIndex","keyboardNavigationModule","defaultOptions","useLegacyKeyboardNavigation","enabled","enterKeyAction","editOnKeyPress","controllers","extenders","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/keyboard_navigation/m_keyboard_navigation.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/keyboard_navigation/m_keyboard_navigation.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport pointerEvents from \"../../../../common/core/events/pointer\";\r\nimport {\r\n    keyboard\r\n} from \"../../../../common/core/events/short\";\r\nimport {\r\n    addNamespace,\r\n    createEvent,\r\n    isCommandKeyPressed\r\n} from \"../../../../common/core/events/utils/index\";\r\nimport {\r\n    noop\r\n} from \"../../../../core/utils/common\";\r\nimport domAdapter from \"../../../../core/dom_adapter\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../../core/element\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    getHeight,\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    getWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDeferred,\r\n    isDefined,\r\n    isEmptyObject\r\n} from \"../../../../core/utils/type\";\r\nimport * as accessibility from \"../../../../ui/shared/accessibility\";\r\nimport {\r\n    focused\r\n} from \"../../../../ui/widget/selectors\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../../core/utils/m_dom\";\r\nimport {\r\n    memoize\r\n} from \"../../../utils/memoize\";\r\nimport {\r\n    EDIT_FORM_CLASS,\r\n    EDIT_MODE_BATCH,\r\n    EDIT_MODE_CELL,\r\n    EDIT_MODE_FORM,\r\n    EDIT_MODE_ROW,\r\n    EDITOR_CELL_CLASS,\r\n    FILTER_ROW_CLASS,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    ROW_CLASS\r\n} from \"../editing/const\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    ADAPTIVE_COLUMN_NAME_CLASS,\r\n    CELL_FOCUS_DISABLED_CLASS,\r\n    COLUMN_HEADERS_VIEW,\r\n    COMMAND_CELL_SELECTOR,\r\n    COMMAND_EDIT_CLASS,\r\n    COMMAND_EXPAND_CLASS,\r\n    COMMAND_SELECT_CLASS,\r\n    DATA_ROW_CLASS,\r\n    DATEBOX_WIDGET_NAME,\r\n    DROPDOWN_EDITOR_OVERLAY_CLASS,\r\n    EDIT_FORM_ITEM_CLASS,\r\n    FAST_EDITING_DELETE_KEY,\r\n    FOCUS_STATE_CLASS,\r\n    FOCUS_TYPE_CELL,\r\n    FOCUS_TYPE_ROW,\r\n    FOCUSED_CLASS,\r\n    FREESPACE_ROW_CLASS,\r\n    FUNCTIONAL_KEYS,\r\n    INTERACTIVE_ELEMENTS_SELECTOR,\r\n    MASTER_DETAIL_CELL_CLASS,\r\n    NON_FOCUSABLE_ELEMENTS_SELECTOR,\r\n    REVERT_BUTTON_CLASS,\r\n    ROWS_VIEW,\r\n    ROWS_VIEW_CLASS,\r\n    TABLE_CLASS,\r\n    WIDGET_CLASS\r\n} from \"./const\";\r\nimport {\r\n    GridCoreKeyboardNavigationDom\r\n} from \"./dom\";\r\nimport {\r\n    isCellInHeaderRow,\r\n    isDataRow,\r\n    isDetailRow,\r\n    isEditForm,\r\n    isEditorCell,\r\n    isElementDefined,\r\n    isFixedColumnIndexOffsetRequired,\r\n    isGroupFooterRow,\r\n    isGroupRow,\r\n    isMobile,\r\n    isNotFocusedRow,\r\n    shouldPreventScroll\r\n} from \"./m_keyboard_navigation_utils\";\r\nimport {\r\n    keyboardNavigationScrollableA11yExtender\r\n} from \"./scrollable_a11y\";\r\nexport class KeyboardNavigationController extends modules.ViewController {\r\n    init() {\r\n        this._dataController = this.getController(\"data\");\r\n        this._selectionController = this.getController(\"selection\");\r\n        this._editingController = this.getController(\"editing\");\r\n        this._headerPanel = this.getView(\"headerPanel\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._columnHeadersView = this.getView(\"columnHeadersView\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._editorFactory = this.getController(\"editorFactory\");\r\n        this._focusController = this.getController(\"focus\");\r\n        this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n        this._columnResizerController = this.getController(\"columnsResizer\");\r\n        this._memoFireFocusedCellChanged = memoize(this._memoFireFocusedCellChanged.bind(this), {\r\n            compareType: \"value\"\r\n        });\r\n        this._memoFireFocusedRowChanged = memoize(this._memoFireFocusedRowChanged.bind(this), {\r\n            compareType: \"value\"\r\n        });\r\n        this.focusedHandlerWithContext = this.focusedHandlerWithContext || this.focusedHandler.bind(this);\r\n        this.columnHeadersViewRenderCompletedWithContext = this.columnHeadersViewRenderCompletedWithContext || this.columnHeadersViewRenderCompleted.bind(this);\r\n        this.rowsViewRenderCompletedWithContext = this.rowsViewRenderCompletedWithContext || this.rowsViewRenderCompleted.bind(this);\r\n        this.rowsViewFocusHandlerContext = this.rowsViewFocusHandlerContext || this.rowsViewFocusHandler.bind(this);\r\n        this.rowsViewFocusOutHandlerContext = this.rowsViewFocusOutHandlerContext ?? this.rowsViewFocusOutHandler.bind(this);\r\n        this._updateFocusTimeout = null;\r\n        this._fastEditingStarted = false;\r\n        this._focusedCellPosition = {};\r\n        this._canceledCellPosition = null;\r\n        if (this.isKeyboardEnabled()) {\r\n            var _this$_editorFactory;\r\n            accessibility.subscribeVisibilityChange();\r\n            null === (_this$_editorFactory = this._editorFactory) || void 0 === _this$_editorFactory || _this$_editorFactory.focused.add(this.focusedHandlerWithContext);\r\n            this.createAction(\"onKeyDown\")\r\n        } else {\r\n            var _this$_editorFactory2;\r\n            accessibility.unsubscribeVisibilityChange();\r\n            null === (_this$_editorFactory2 = this._editorFactory) || void 0 === _this$_editorFactory2 || _this$_editorFactory2.focused.remove(this.focusedHandlerWithContext)\r\n        }\r\n        this.initColumnHeadersViewHandler();\r\n        this.initRowsViewHandlers();\r\n        this.initDocumentHandlers()\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        this._resetFocusedView();\r\n        keyboard.off(this._rowsViewKeyDownListener);\r\n        keyboard.off(this._columnHeadersViewKeyDownListener);\r\n        eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\r\n        clearTimeout(this._updateFocusTimeout);\r\n        accessibility.unsubscribeVisibilityChange()\r\n    }\r\n    focusedHandler($element) {\r\n        this.setupFocusedView();\r\n        if (this._isNeedScroll) {\r\n            if ($element.is(\":visible\") && this._focusedView && this._focusedView.getScrollable()) {\r\n                this._focusedView._scrollToElement($element);\r\n                this._isNeedScroll = false\r\n            }\r\n        }\r\n    }\r\n    rowsViewFocusHandler(event) {\r\n        const $element = $(event.target);\r\n        const isRelatedTargetInRowsView = $(event.relatedTarget).closest(this._rowsView.element()).length;\r\n        const isLink = $element.is(\"a\");\r\n        if (event.relatedTarget && isLink && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {\r\n            let $focusedCell = this._getFocusedCell();\r\n            $focusedCell = !isElementDefined($focusedCell) ? this._rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\r\n            if (!$element.closest($focusedCell).length) {\r\n                event.preventDefault();\r\n                eventsEngine.trigger($focusedCell, \"focus\")\r\n            }\r\n        }\r\n        const isCell = $element.is(\"td\");\r\n        const needSetFocusPosition = (this.option(\"focusedRowIndex\") ?? -1) < 0;\r\n        if (isCell && needSetFocusPosition) {\r\n            this._updateFocusedCellPosition($element)\r\n        }\r\n    }\r\n    rowsViewFocusOutHandler() {\r\n        this._toggleInertAttr(false)\r\n    }\r\n    subscribeToRowsViewFocusEvent() {\r\n        var _this$_rowsView;\r\n        const $rowsView = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.element();\r\n        eventsEngine.on($rowsView, \"focusin\", this.rowsViewFocusHandlerContext);\r\n        eventsEngine.on($rowsView, \"focusout\", this.rowsViewFocusOutHandlerContext)\r\n    }\r\n    unsubscribeFromRowsViewFocusEvent() {\r\n        var _this$_rowsView2;\r\n        const $rowsView = null === (_this$_rowsView2 = this._rowsView) || void 0 === _this$_rowsView2 ? void 0 : _this$_rowsView2.element();\r\n        eventsEngine.off($rowsView, \"focusin\", this.rowsViewFocusHandlerContext);\r\n        eventsEngine.off($rowsView, \"focusout\", this.rowsViewFocusOutHandlerContext)\r\n    }\r\n    columnHeadersViewRenderCompleted() {\r\n        this.initColumnHeadersViewKeyDownHandler()\r\n    }\r\n    rowsViewRenderCompleted(e) {\r\n        const $rowsView = this._rowsView.element();\r\n        const isFullUpdate = !e || \"refresh\" === e.changeType;\r\n        const isFocusedViewCorrect = this._focusedView && this._focusedView.name === this._rowsView.name;\r\n        let needUpdateFocus = false;\r\n        const isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\r\n        const root = $(domAdapter.getRootNode($rowsView.get && $rowsView.get(0)));\r\n        const $focusedElement = root.find(\":focus\");\r\n        const isFocusedElementCorrect = this._isFocusedElementCorrect($focusedElement, $rowsView, e);\r\n        this.unsubscribeFromRowsViewFocusEvent();\r\n        this.subscribeToRowsViewFocusEvent();\r\n        this.initPointerEventHandler();\r\n        this.initRowsViewKeyDownHandler();\r\n        this._setRowsViewAttributes();\r\n        if (isFocusedViewCorrect && isFocusedElementCorrect) {\r\n            needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate && !(null !== e && void 0 !== e && e.virtualColumnsScrolling);\r\n            if (needUpdateFocus) {\r\n                var _e$event;\r\n                const isScrollEvent = !!(null !== e && void 0 !== e && null !== (_e$event = e.event) && void 0 !== _e$event && _e$event.type);\r\n                const skipFocusEvent = (null === e || void 0 === e ? void 0 : e.virtualColumnsScrolling) && isScrollEvent;\r\n                this._updateFocus(true, skipFocusEvent)\r\n            }\r\n        }\r\n    }\r\n    _isFocusedElementCorrect($focusedElement, $rowsView, e) {\r\n        if ($focusedElement.length && !$focusedElement.closest($rowsView).length) {\r\n            return false\r\n        }\r\n        if (!$focusedElement.length && null !== e && void 0 !== e && e.virtualColumnsScrolling) {\r\n            var _this$_focusedCellPos;\r\n            const focusedColumnIndex = (null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex) ?? -1;\r\n            return this._isColumnRendered(focusedColumnIndex)\r\n        }\r\n        return true\r\n    }\r\n    initColumnHeadersViewHandler() {\r\n        var _this$_columnHeadersV;\r\n        this.unsubscribeFromColumnHeadersViewKeyDownEvent();\r\n        null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV || null === (_this$_columnHeadersV = _this$_columnHeadersV.renderCompleted) || void 0 === _this$_columnHeadersV || _this$_columnHeadersV.remove(this.columnHeadersViewRenderCompletedWithContext);\r\n        if (this.isKeyboardEnabled()) {\r\n            var _this$_columnHeadersV2;\r\n            null === (_this$_columnHeadersV2 = this._columnHeadersView) || void 0 === _this$_columnHeadersV2 || null === (_this$_columnHeadersV2 = _this$_columnHeadersV2.renderCompleted) || void 0 === _this$_columnHeadersV2 || _this$_columnHeadersV2.add(this.columnHeadersViewRenderCompletedWithContext)\r\n        }\r\n    }\r\n    initRowsViewHandlers() {\r\n        var _this$_rowsView3;\r\n        this.unsubscribeFromRowsViewFocusEvent();\r\n        this.unsubscribeFromPointerEvent();\r\n        this.unsubscribeFromRowsViewKeyDownEvent();\r\n        null === (_this$_rowsView3 = this._rowsView) || void 0 === _this$_rowsView3 || null === (_this$_rowsView3 = _this$_rowsView3.renderCompleted) || void 0 === _this$_rowsView3 || _this$_rowsView3.remove(this.rowsViewRenderCompletedWithContext);\r\n        if (this.isKeyboardEnabled()) {\r\n            this._rowsView.renderCompleted.add(this.rowsViewRenderCompletedWithContext)\r\n        }\r\n    }\r\n    initDocumentHandlers() {\r\n        const document = domAdapter.getDocument();\r\n        this._documentClickHandler = this._documentClickHandler || this.createAction((e => {\r\n            var _this$_columnResizerC;\r\n            const $target = $(e.event.target);\r\n            const tableSelector = `.${this.addWidgetPrefix(TABLE_CLASS)}`;\r\n            const rowsViewSelector = `.${this.addWidgetPrefix(ROWS_VIEW_CLASS)}`;\r\n            const editorOverlaySelector = `.${DROPDOWN_EDITOR_OVERLAY_CLASS}`;\r\n            const needKeepFocus = !!$target.closest(tableSelector).length && !isElementInDom($target);\r\n            if (needKeepFocus) {\r\n                e.event.preventDefault();\r\n                return\r\n            }\r\n            const isRowsViewClick = this._isEventInCurrentGrid(e.event) && !!$target.closest(rowsViewSelector).length;\r\n            const isEditorOverlayClick = !!$target.closest(editorOverlaySelector).length;\r\n            const isColumnResizing = !!(null !== (_this$_columnResizerC = this._columnResizerController) && void 0 !== _this$_columnResizerC && _this$_columnResizerC.isResizing());\r\n            if (!isRowsViewClick && !isEditorOverlayClick && !isColumnResizing) {\r\n                const isClickOutsideFocusedView = this._focusedView ? 0 === $target.closest(this._focusedView.element()).length : true;\r\n                if (isClickOutsideFocusedView) {\r\n                    this._resetFocusedCell(true)\r\n                }\r\n                this._resetFocusedView()\r\n            }\r\n        }));\r\n        eventsEngine.off(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\r\n        if (this.isKeyboardEnabled()) {\r\n            eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler)\r\n        }\r\n    }\r\n    _setRowsViewAttributes() {\r\n        const $rowsView = this._getRowsViewElement();\r\n        const isGridEmpty = !this._dataController.getVisibleRows().length;\r\n        if (isGridEmpty) {\r\n            this._applyTabIndexToElement($rowsView)\r\n        }\r\n    }\r\n    unsubscribeFromPointerEvent() {\r\n        const pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\r\n        const $rowsView = this._getRowsViewElement();\r\n        this._pointerEventAction && eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction)\r\n    }\r\n    subscribeToPointerEvent() {\r\n        const pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\r\n        const $rowsView = this._getRowsViewElement();\r\n        const clickSelector = `.${ROW_CLASS} > td, .${ROW_CLASS}`;\r\n        eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), clickSelector, this._pointerEventAction)\r\n    }\r\n    initPointerEventHandler() {\r\n        this._pointerEventAction = this._pointerEventAction || this.createAction(this._pointerEventHandler);\r\n        this.unsubscribeFromPointerEvent();\r\n        this.subscribeToPointerEvent()\r\n    }\r\n    unsubscribeFromColumnHeadersViewKeyDownEvent() {\r\n        if (this._columnHeadersViewKeyDownListener) {\r\n            keyboard.off(this._columnHeadersViewKeyDownListener)\r\n        }\r\n    }\r\n    subscribeToColumnHeadersViewKeyDownEvent() {\r\n        const $columnHeadersView = this._columnHeadersView.element();\r\n        this._columnHeadersViewKeyDownListener = keyboard.on($columnHeadersView, null, (e => this._columnHeadersViewKeyDownHandler(e)))\r\n    }\r\n    initColumnHeadersViewKeyDownHandler() {\r\n        this.unsubscribeFromColumnHeadersViewKeyDownEvent();\r\n        this.subscribeToColumnHeadersViewKeyDownEvent()\r\n    }\r\n    unsubscribeFromRowsViewKeyDownEvent() {\r\n        keyboard.off(this._rowsViewKeyDownListener)\r\n    }\r\n    subscribeToRowsViewKeyDownEvent() {\r\n        const $rowsView = this._getRowsViewElement();\r\n        this._rowsViewKeyDownListener = keyboard.on($rowsView, null, (e => this._rowsViewKeyDownHandler(e)))\r\n    }\r\n    initRowsViewKeyDownHandler() {\r\n        this._rowsViewKeyDownListener && this.unsubscribeFromRowsViewKeyDownEvent();\r\n        this.subscribeToRowsViewKeyDownEvent()\r\n    }\r\n    optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"keyboardNavigation\":\r\n                if (\"keyboardNavigation.enabled\" === args.fullName) {\r\n                    this.init()\r\n                }\r\n                args.handled = true;\r\n                break;\r\n            case \"useLegacyKeyboardNavigation\":\r\n                this.init();\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                super.optionChanged(args)\r\n        }\r\n    }\r\n    isRowFocusType() {\r\n        return this.focusType === FOCUS_TYPE_ROW\r\n    }\r\n    isCellFocusType() {\r\n        return this.focusType === FOCUS_TYPE_CELL\r\n    }\r\n    setRowFocusType() {\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this.focusType = FOCUS_TYPE_ROW\r\n        }\r\n    }\r\n    setCellFocusType() {\r\n        this.focusType = FOCUS_TYPE_CELL\r\n    }\r\n    headerTabKeyHandler(e) {}\r\n    _columnHeadersViewKeyDownHandler(e) {\r\n        if (\"tab\" === e.keyName) {\r\n            this.headerTabKeyHandler(e)\r\n        }\r\n    }\r\n    _rowsViewKeyDownHandler(e) {\r\n        var _this$_editingControl;\r\n        let needStopPropagation = true;\r\n        this._isNeedFocus = true;\r\n        this._isNeedScroll = true;\r\n        let isHandled = this._processOnKeyDown(e);\r\n        const isEditing = null === (_this$_editingControl = this._editingController) || void 0 === _this$_editingControl ? void 0 : _this$_editingControl.isEditing();\r\n        const {\r\n            originalEvent: originalEvent\r\n        } = e;\r\n        if (originalEvent.isDefaultPrevented()) {\r\n            this._isNeedFocus = false;\r\n            this._isNeedScroll = false;\r\n            return\r\n        }!FUNCTIONAL_KEYS.includes(e.keyName) && this._updateFocusedCellPositionByTarget(originalEvent.target);\r\n        if (!isHandled) {\r\n            switch (e.keyName) {\r\n                case \"leftArrow\":\r\n                case \"rightArrow\":\r\n                    this._leftRightKeysHandler(e, isEditing);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"upArrow\":\r\n                case \"downArrow\":\r\n                    if (e.ctrl) {\r\n                        accessibility.selectView(\"rowsView\", this, originalEvent)\r\n                    } else {\r\n                        this._upDownKeysHandler(e, isEditing)\r\n                    }\r\n                    isHandled = true;\r\n                    break;\r\n                case \"pageUp\":\r\n                case \"pageDown\":\r\n                    this._pageUpDownKeyHandler(e);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"space\":\r\n                    isHandled = this._spaceKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"A\":\r\n                    if (isCommandKeyPressed(e.originalEvent)) {\r\n                        this._ctrlAKeyHandler(e, isEditing);\r\n                        isHandled = true\r\n                    } else {\r\n                        isHandled = this._beginFastEditing(e.originalEvent)\r\n                    }\r\n                    break;\r\n                case \"tab\":\r\n                    this._tabKeyHandler(e, isEditing);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"enter\":\r\n                    this._enterKeyHandler(e, isEditing);\r\n                    isHandled = true;\r\n                    break;\r\n                case \"escape\":\r\n                    isHandled = this._escapeKeyHandler(e, isEditing);\r\n                    break;\r\n                case \"F\":\r\n                    if (isCommandKeyPressed(e.originalEvent)) {\r\n                        this._ctrlFKeyHandler(e);\r\n                        isHandled = true\r\n                    } else {\r\n                        isHandled = this._beginFastEditing(e.originalEvent)\r\n                    }\r\n                    break;\r\n                case \"F2\":\r\n                    this._f2KeyHandler();\r\n                    isHandled = true;\r\n                    break;\r\n                case \"del\":\r\n                case \"backspace\":\r\n                    if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\r\n                        isHandled = this._beginFastEditing(originalEvent, true)\r\n                    }\r\n            }\r\n            if (!isHandled && !this._beginFastEditing(originalEvent)) {\r\n                this._isNeedFocus = false;\r\n                this._isNeedScroll = false;\r\n                needStopPropagation = false\r\n            }\r\n            if (needStopPropagation) {\r\n                originalEvent.stopPropagation()\r\n            }\r\n        }\r\n    }\r\n    _processOnKeyDown(eventArgs) {\r\n        const {\r\n            originalEvent: originalEvent\r\n        } = eventArgs;\r\n        const args = {\r\n            handled: false,\r\n            event: originalEvent\r\n        };\r\n        this.executeAction(\"onKeyDown\", args);\r\n        eventArgs.ctrl = originalEvent.ctrlKey;\r\n        eventArgs.alt = originalEvent.altKey;\r\n        eventArgs.shift = originalEvent.shiftKey;\r\n        return !!args.handled\r\n    }\r\n    _closeEditCell() {\r\n        const d = Deferred();\r\n        setTimeout((() => {\r\n            this._editingController.closeEditCell().always(d.resolve)\r\n        }));\r\n        return d\r\n    }\r\n    _leftRightKeysHandler(eventArgs, isEditing) {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $event = eventArgs.originalEvent;\r\n        const $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        const directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\r\n        const isEditingNavigationMode = this._isFastEditingStarted();\r\n        const allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\r\n        if (allowNavigate) {\r\n            this.setCellFocusType();\r\n            isEditingNavigationMode && this._closeEditCell();\r\n            if (this._isVirtualColumnRender()) {\r\n                this._processVirtualHorizontalPosition(directionCode)\r\n            }\r\n            const $cell = this._getNextCell(directionCode);\r\n            if (isElementDefined($cell)) {\r\n                this._arrowKeysHandlerFocusCell($event, $cell, directionCode)\r\n            }\r\n            $event && $event.preventDefault()\r\n        }\r\n    }\r\n    isInsideMasterDetail($target) {\r\n        const $masterDetail = $target.closest(`.${MASTER_DETAIL_CELL_CLASS}`);\r\n        return !!$masterDetail.get(0) && this.elementIsInsideGrid($masterDetail) && !$target.is($masterDetail)\r\n    }\r\n    _upDownKeysHandler(eventArgs, isEditing) {\r\n        var _this$_editingControl2, _this$_editingControl3;\r\n        const visibleRowIndex = this.getVisibleRowIndex();\r\n        const $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\r\n        const $event = eventArgs.originalEvent;\r\n        const isUpArrow = \"upArrow\" === eventArgs.keyName;\r\n        const dataSource = this._dataController.dataSource();\r\n        const isRowEditingInCurrentRow = null === (_this$_editingControl2 = this._editingController) || void 0 === _this$_editingControl2 || null === (_this$_editingControl3 = _this$_editingControl2.isEditRowByIndex) || void 0 === _this$_editingControl3 ? void 0 : _this$_editingControl3.call(_this$_editingControl2, visibleRowIndex);\r\n        const isEditingNavigationMode = this._isFastEditingStarted();\r\n        const isInsideMasterDetail = this.isInsideMasterDetail($(null === $event || void 0 === $event ? void 0 : $event.target));\r\n        const allowNavigate = (!isRowEditingInCurrentRow || !isEditing || isEditingNavigationMode) && $row && !isEditForm($row) && !isInsideMasterDetail;\r\n        if (allowNavigate) {\r\n            isEditingNavigationMode && this._closeEditCell();\r\n            if (!this._navigateNextCell($event, eventArgs.keyName)) {\r\n                if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\r\n                    const rowHeight = getOuterHeight($row);\r\n                    const rowIndex = this._focusedCellPosition.rowIndex - 1;\r\n                    this._scrollBy(0, -rowHeight, rowIndex, $event)\r\n                }\r\n            }\r\n            $event && $event.preventDefault()\r\n        }\r\n    }\r\n    _pageUpDownKeyHandler(eventArgs) {\r\n        const pageIndex = this._dataController.pageIndex();\r\n        const pageCount = this._dataController.pageCount();\r\n        const pagingEnabled = this.option(\"paging.enabled\");\r\n        const isPageUp = \"pageUp\" === eventArgs.keyName;\r\n        const pageStep = isPageUp ? -1 : 1;\r\n        const scrollable = this._rowsView.getScrollable();\r\n        if (pagingEnabled && !this._isVirtualScrolling()) {\r\n            if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\r\n                this._dataController.pageIndex(pageIndex + pageStep);\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        } else if (scrollable && getHeight(scrollable.container()) < getHeight(scrollable.$content())) {\r\n            this._scrollBy(0, getHeight(scrollable.container()) * pageStep);\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    }\r\n    _spaceKeyHandler(eventArgs, isEditing) {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\r\n        if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\r\n            const isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\r\n            const isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);\r\n            if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\r\n                this._selectionController.startSelectionWithCheckboxes()\r\n            }\r\n            if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\r\n                this._selectionController.changeItemSelection(rowIndex, {\r\n                    shift: eventArgs.shift,\r\n                    control: eventArgs.ctrl\r\n                });\r\n                eventArgs.originalEvent.preventDefault();\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n        return this._beginFastEditing(eventArgs.originalEvent)\r\n    }\r\n    _ctrlAKeyHandler(eventArgs, isEditing) {\r\n        if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\r\n            this._selectionController.selectAll();\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    }\r\n    _toggleInertAttr(value) {}\r\n    _tabKeyHandler(eventArgs, isEditing) {\r\n        const editingOptions = this.option(\"editing\");\r\n        const direction = eventArgs.shift ? \"previous\" : \"next\";\r\n        const isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\r\n        const isFirstValidCell = eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\r\n        const isLastValidCell = !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition);\r\n        let isOriginalHandlerRequired = !isCellPositionDefined || isFirstValidCell || isLastValidCell;\r\n        const eventTarget = eventArgs.originalEvent.target;\r\n        const focusedViewElement = this._focusedView && this._focusedView.element();\r\n        if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\r\n            return\r\n        }\r\n        $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\r\n        if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\r\n            if ($(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\r\n                this._resetFocusedCell()\r\n            }\r\n            if (this._isVirtualColumnRender()) {\r\n                this._processVirtualHorizontalPosition(direction)\r\n            }\r\n            if (isEditing) {\r\n                if (!this._editingCellTabHandler(eventArgs, direction)) {\r\n                    return\r\n                }\r\n            } else if (this._targetCellTabHandler(eventArgs, direction)) {\r\n                isOriginalHandlerRequired = true\r\n            }\r\n        }\r\n        if (isOriginalHandlerRequired) {\r\n            const $cell = this._getFocusedCell();\r\n            const isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\r\n            if (isLastValidCell && !isCommandCell) {\r\n                this._toggleInertAttr(true)\r\n            }\r\n            this._editorFactory.loseFocus();\r\n            if (this._editingController.isEditing() && !this._isRowEditMode()) {\r\n                this._resetFocusedCell(true);\r\n                this._resetFocusedView();\r\n                this._closeEditCell()\r\n            }\r\n        } else {\r\n            eventArgs.originalEvent.preventDefault()\r\n        }\r\n    }\r\n    _getMaxHorizontalOffset() {\r\n        const scrollable = this.component.getScrollable();\r\n        return scrollable ? scrollable.scrollWidth() - getWidth(this._rowsView.element()) : 0\r\n    }\r\n    _isColumnRendered(columnIndex) {\r\n        const allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\r\n        const renderedVisibleColumns = this._columnsController.getVisibleColumns();\r\n        const column = allVisibleColumns[columnIndex];\r\n        let result = false;\r\n        if (column) {\r\n            result = renderedVisibleColumns.indexOf(column) >= 0\r\n        }\r\n        return result\r\n    }\r\n    _isFixedColumn(columnIndex) {\r\n        const allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\r\n        const column = allVisibleColumns[columnIndex];\r\n        return !!column && !!column.fixed\r\n    }\r\n    _isColumnVirtual(columnIndex) {\r\n        const localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        const column = visibleColumns[localColumnIndex];\r\n        return !!column && \"virtual\" === column.command\r\n    }\r\n    _processVirtualHorizontalPosition(direction) {\r\n        const scrollable = this.component.getScrollable();\r\n        const columnIndex = this.getColumnIndex();\r\n        let nextColumnIndex;\r\n        let horizontalScrollPosition = 0;\r\n        let needToScroll = false;\r\n        switch (direction) {\r\n            case \"next\":\r\n            case \"nextInRow\": {\r\n                const columnsCount = this._getVisibleColumnCount();\r\n                nextColumnIndex = columnIndex + 1;\r\n                horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\r\n                if (\"next\" === direction) {\r\n                    needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                } else {\r\n                    needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                }\r\n                break\r\n            }\r\n            case \"previous\":\r\n            case \"previousInRow\":\r\n                nextColumnIndex = columnIndex - 1;\r\n                horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\r\n                if (\"previous\" === direction) {\r\n                    const columnIndexOffset = this._columnsController.getColumnIndexOffset();\r\n                    const leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\r\n                    needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                } else {\r\n                    needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)\r\n                }\r\n        }\r\n        if (needToScroll) {\r\n            scrollable.scrollTo({\r\n                left: horizontalScrollPosition\r\n            })\r\n        } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\r\n            horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\r\n            0 !== horizontalScrollPosition && scrollable.scrollBy({\r\n                left: horizontalScrollPosition,\r\n                top: 0\r\n            })\r\n        }\r\n    }\r\n    _getHorizontalScrollPositionOffset(direction) {\r\n        let positionOffset = 0;\r\n        const $currentCell = this._getCell(this._focusedCellPosition);\r\n        const currentCellWidth = $currentCell && getOuterWidth($currentCell);\r\n        if (currentCellWidth > 0) {\r\n            const rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\r\n            positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1\r\n        }\r\n        return positionOffset\r\n    }\r\n    _editingCellTabHandler(eventArgs, direction) {\r\n        const eventTarget = eventArgs.originalEvent.target;\r\n        let $cell = this._getCellElementFromTarget(eventTarget);\r\n        let isEditingAllowed;\r\n        const $event = eventArgs.originalEvent;\r\n        const elementType = this._getElementType(eventTarget);\r\n        if ($cell.is(COMMAND_CELL_SELECTOR)) {\r\n            return !this._targetCellTabHandler(eventArgs, direction)\r\n        }\r\n        this._updateFocusedCellPosition($cell);\r\n        const nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\r\n        $cell = nextCellInfo.$cell;\r\n        if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\r\n            return false\r\n        }\r\n        const column = this._getColumnByCellElement($cell);\r\n        const $row = $cell.parent();\r\n        const rowIndex = this._getRowIndex($row);\r\n        const row = this._dataController.items()[rowIndex];\r\n        const editingController = this._editingController;\r\n        if (column && column.allowEditing) {\r\n            const isDataRow = !row || \"data\" === row.rowType;\r\n            isEditingAllowed = editingController.allowUpdating({\r\n                row: row\r\n            }) ? isDataRow : row && row.isNewRow\r\n        }\r\n        if (!isEditingAllowed) {\r\n            this._closeEditCell()\r\n        }\r\n        if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\r\n            if (!this._isRowEditMode() && isEditingAllowed) {\r\n                this._editFocusedCell()\r\n            } else {\r\n                this._focusInteractiveElement($cell, eventArgs.shift)\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    _targetCellTabHandler(eventArgs, direction) {\r\n        const $event = eventArgs.originalEvent;\r\n        let eventTarget = $event.target;\r\n        let elementType = this._getElementType(eventTarget);\r\n        let $cell = this._getCellElementFromTarget(eventTarget);\r\n        const $lastInteractiveElement = \"cell\" === elementType && this._getInteractiveElement($cell, !eventArgs.shift);\r\n        let isOriginalHandlerRequired = false;\r\n        if (!isEditorCell(this, $cell) && null !== $lastInteractiveElement && void 0 !== $lastInteractiveElement && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\r\n            isOriginalHandlerRequired = true\r\n        } else {\r\n            if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(ROW_CLASS)) {\r\n                this._updateFocusedCellPosition($cell)\r\n            }\r\n            elementType = this._getElementType(eventTarget);\r\n            if (this.isRowFocusType()) {\r\n                this.setCellFocusType();\r\n                if (\"row\" === elementType && isDataRow($(eventTarget))) {\r\n                    eventTarget = this.getFirstValidCellInRow($(eventTarget));\r\n                    elementType = this._getElementType(eventTarget)\r\n                }\r\n            }\r\n            const nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\r\n            $cell = nextCellInfo.$cell;\r\n            if (!$cell) {\r\n                return false\r\n            }\r\n            $cell = this._checkNewLineTransition($event, $cell);\r\n            if (!$cell) {\r\n                return false\r\n            }\r\n            this._focusCell($cell, !nextCellInfo.isHighlighted);\r\n            if (!isEditorCell(this, $cell)) {\r\n                this._focusInteractiveElement($cell, eventArgs.shift)\r\n            }\r\n        }\r\n        return isOriginalHandlerRequired\r\n    }\r\n    _getNextCellByTabKey($event, direction, elementType) {\r\n        let $cell = this._getNextCell(direction, elementType);\r\n        const args = $cell && this._fireFocusedCellChanging($event, $cell, true);\r\n        if (!args || args.cancel) {\r\n            return {}\r\n        }\r\n        if (args.$newCellElement) {\r\n            $cell = args.$newCellElement\r\n        }\r\n        return {\r\n            $cell: $cell,\r\n            isHighlighted: args.isHighlighted\r\n        }\r\n    }\r\n    _checkNewLineTransition($event, $cell) {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $row = $cell.parent();\r\n        if (rowIndex !== this._getRowIndex($row)) {\r\n            const cellPosition = this._getCellPosition($cell);\r\n            const args = this._fireFocusedRowChanging($event, $row);\r\n            if (args.cancel) {\r\n                return\r\n            }\r\n            if (args.rowIndexChanged && cellPosition) {\r\n                this.setFocusedColumnIndex(cellPosition.columnIndex);\r\n                $cell = this._getFocusedCell()\r\n            }\r\n        }\r\n        return $cell\r\n    }\r\n    _enterKeyHandler(eventArgs, isEditing) {\r\n        var _this$_focusedView, _this$getMasterDetail;\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const key = this._dataController.getKeyByRowIndex(rowIndex);\r\n        const $row = null === (_this$_focusedView = this._focusedView) || void 0 === _this$_focusedView ? void 0 : _this$_focusedView.getRow(rowIndex);\r\n        const $cell = this._getFocusedCell();\r\n        const needExpandGroupRow = this.option(\"grouping.allowCollapsing\") && isGroupRow($row);\r\n        const needExpandMasterDetailRow = this.option(\"masterDetail.enabled\") && (null === $cell || void 0 === $cell ? void 0 : $cell.hasClass(COMMAND_EXPAND_CLASS));\r\n        const needExpandAdaptiveRow = null === $cell || void 0 === $cell ? void 0 : $cell.hasClass(ADAPTIVE_COLUMN_NAME_CLASS);\r\n        if (needExpandGroupRow || needExpandMasterDetailRow) {\r\n            const item = this._dataController.items()[rowIndex];\r\n            const isNotContinuation = (null === item || void 0 === item ? void 0 : item.data) && !item.data.isContinuation;\r\n            if (isDefined(key) && isNotContinuation) {\r\n                this._dataController.changeRowExpand(key)\r\n            }\r\n        } else if (needExpandAdaptiveRow) {\r\n            this._adaptiveColumnsController.toggleExpandAdaptiveDetailRow(key);\r\n            this._updateFocusedCellPosition($cell)\r\n        } else if (null !== (_this$getMasterDetail = this.getMasterDetailCell($cell)) && void 0 !== _this$getMasterDetail && _this$getMasterDetail.is($cell)) {\r\n            if ($cell.is(\":focus\")) {\r\n                this.focusFirstInteractiveElementInside($cell)\r\n            }\r\n        } else if (!(null !== $cell && void 0 !== $cell && $cell.hasClass(COMMAND_EDIT_CLASS))) {\r\n            this._processEnterKeyForDataCell(eventArgs, isEditing)\r\n        }\r\n    }\r\n    focusFirstInteractiveElementInside($el) {\r\n        $el.find(INTERACTIVE_ELEMENTS_SELECTOR).get(0).focus()\r\n    }\r\n    _processEnterKeyForDataCell(eventArgs, isEditing) {\r\n        const direction = this._getEnterKeyDirection(eventArgs);\r\n        const allowEditingOnEnterKey = this._allowEditingOnEnterKey();\r\n        if (isEditing || !allowEditingOnEnterKey && direction) {\r\n            this._handleEnterKeyEditingCell(eventArgs.originalEvent).done((() => {\r\n                if (\"next\" === direction || \"previous\" === direction) {\r\n                    this._targetCellTabHandler(eventArgs, direction)\r\n                } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\r\n                    this._navigateNextCell(eventArgs.originalEvent, direction)\r\n                }\r\n            }))\r\n        } else if (allowEditingOnEnterKey) {\r\n            this._startEditing(eventArgs)\r\n        }\r\n    }\r\n    _getEnterKeyDirection(eventArgs) {\r\n        const enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\r\n        const isShift = eventArgs.shift;\r\n        if (\"column\" === enterKeyDirection) {\r\n            return isShift ? \"upArrow\" : \"downArrow\"\r\n        }\r\n        if (\"row\" === enterKeyDirection) {\r\n            return isShift ? \"previous\" : \"next\"\r\n        }\r\n        return\r\n    }\r\n    _handleEnterKeyEditingCell(event) {\r\n        const d = Deferred();\r\n        const {\r\n            target: target\r\n        } = event;\r\n        const $cell = this._getCellElementFromTarget(target);\r\n        const isRowEditMode = this._isRowEditMode();\r\n        this._updateFocusedCellPosition($cell);\r\n        if (isRowEditMode) {\r\n            this._focusEditFormCell($cell);\r\n            setTimeout(this._editingController.saveEditData.bind(this._editingController));\r\n            d.resolve()\r\n        } else {\r\n            eventsEngine.trigger($(target), \"change\");\r\n            this._closeEditCell().always(d.resolve);\r\n            event.preventDefault()\r\n        }\r\n        return d\r\n    }\r\n    _escapeKeyHandler(eventArgs, isEditing) {\r\n        const $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\r\n        if (isEditing) {\r\n            this._updateFocusedCellPosition($cell);\r\n            if (!this._isRowEditMode()) {\r\n                if (\"cell\" === this._editingController.getEditMode()) {\r\n                    this._editingController.cancelEditData()\r\n                } else {\r\n                    this._closeEditCell()\r\n                }\r\n            } else {\r\n                this._focusEditFormCell($cell);\r\n                this._editingController.cancelEditData();\r\n                if (0 === this._dataController.items().length) {\r\n                    this._resetFocusedCell();\r\n                    this._editorFactory.loseFocus()\r\n                }\r\n            }\r\n            eventArgs.originalEvent.preventDefault();\r\n            return true\r\n        }\r\n        const masterDetailCell = this.getMasterDetailCell($cell);\r\n        if (masterDetailCell) {\r\n            this._focusCell(masterDetailCell);\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    _ctrlFKeyHandler(eventArgs) {\r\n        if (this.option(\"searchPanel.visible\")) {\r\n            const searchTextEditor = this._headerPanel.getSearchTextEditor();\r\n            if (searchTextEditor) {\r\n                searchTextEditor.focus();\r\n                eventArgs.originalEvent.preventDefault()\r\n            }\r\n        }\r\n    }\r\n    _f2KeyHandler() {\r\n        const isEditing = this._editingController.isEditing();\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const $row = this._focusedView && this._focusedView.getRow(rowIndex);\r\n        if (!isEditing && isDataRow($row)) {\r\n            this._startEditing()\r\n        }\r\n    }\r\n    _navigateNextCell($event, keyCode) {\r\n        const $cell = this._getNextCell(keyCode);\r\n        const directionCode = this._getDirectionCodeByKey(keyCode);\r\n        const isCellValid = $cell && this._isCellValid($cell);\r\n        const result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\r\n        return result\r\n    }\r\n    _arrowKeysHandlerFocusCell($event, $nextCell, direction) {\r\n        const isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\r\n        const args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\r\n        $nextCell = args.$newCellElement;\r\n        if (!args.cancel && this._isCellValid($nextCell)) {\r\n            this._focus($nextCell, !args.isHighlighted);\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    _beginFastEditing(originalEvent, isDeleting) {\r\n        if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\r\n            return false\r\n        }\r\n        if (isDeleting) {\r\n            this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY)\r\n        } else {\r\n            const {\r\n                key: key\r\n            } = originalEvent;\r\n            const keyCode = originalEvent.keyCode || originalEvent.which;\r\n            const fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\r\n            if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {\r\n                this._startEditing(originalEvent, fastEditingKey)\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    _pointerEventHandler(e) {\r\n        var _this$_rowsView4;\r\n        const event = e.event || e;\r\n        let $target = $(event.currentTarget);\r\n        const focusedViewElement = null === (_this$_rowsView4 = this._rowsView) || void 0 === _this$_rowsView4 ? void 0 : _this$_rowsView4.element();\r\n        const $parent = $target.parent();\r\n        const isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\r\n        const isRevertButton = !!$(event.target).closest(`.${REVERT_BUTTON_CLASS}`).length;\r\n        const isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS);\r\n        if (!this._isEventInCurrentGrid(event)) {\r\n            return\r\n        }\r\n        if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\r\n            $target = this._isInsideEditForm($target) ? $(event.target) : $target;\r\n            this._focusView();\r\n            $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\r\n            if ($parent.hasClass(FREESPACE_ROW_CLASS)) {\r\n                this._updateFocusedCellPosition($target);\r\n                this._applyTabIndexToElement(this._focusedView.element());\r\n                this._focusedView.focus(true)\r\n            } else if (!this.getMasterDetailCell($target)) {\r\n                this._clickTargetCellHandler(event, $target)\r\n            } else {\r\n                this._updateFocusedCellPosition($target)\r\n            }\r\n        } else if ($target.is(\"td\")) {\r\n            this._resetFocusedCell()\r\n        }\r\n    }\r\n    _clickTargetCellHandler(event, $cell) {\r\n        const column = this._getColumnByCellElement($cell);\r\n        const isCellEditMode = this._isCellEditMode();\r\n        this.setCellFocusType();\r\n        const args = this._fireFocusChangingEvents(event, $cell, true);\r\n        $cell = args.$newCellElement;\r\n        if (!args.cancel) {\r\n            if (args.resetFocusedRow) {\r\n                this._focusController._resetFocusedRow();\r\n                return\r\n            }\r\n            if (args.rowIndexChanged) {\r\n                $cell = this._getFocusedCell()\r\n            }\r\n            if (!args.isHighlighted && !isCellEditMode) {\r\n                this.setRowFocusType()\r\n            }\r\n            this._updateFocusedCellPosition($cell);\r\n            if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\r\n                this._isNeedFocus = false;\r\n                this._isHiddenFocus = false\r\n            } else {\r\n                $cell = this._getFocusedCell();\r\n                const $target = event && $(event.target).closest(`${NON_FOCUSABLE_ELEMENTS_SELECTOR}, td`);\r\n                const skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);\r\n                const isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS);\r\n                const isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);\r\n                this._focus($cell, isDisabled, skipFocusEvent)\r\n            }\r\n        } else {\r\n            this.setRowFocusType();\r\n            this.setFocusedRowIndex(args.prevRowIndex);\r\n            if (this._editingController.isEditing() && isCellEditMode) {\r\n                this._closeEditCell()\r\n            }\r\n        }\r\n    }\r\n    _allowRowUpdating() {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const row = this._dataController.items()[rowIndex];\r\n        return this._editingController.allowUpdating({\r\n            row: row\r\n        }, \"click\")\r\n    }\r\n    focus(element) {\r\n        let activeElementSelector;\r\n        const focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        const isHighlighted = this._isCellElement($(element));\r\n        if (!element) {\r\n            activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\r\n            if (!focusedRowEnabled) {\r\n                activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\"\r\n            }\r\n            element = this.component.$element().find(activeElementSelector).first()\r\n        }\r\n        element && this._focusElement($(element), isHighlighted)\r\n    }\r\n    getFocusedView() {\r\n        return this._focusedView\r\n    }\r\n    setupFocusedView() {\r\n        if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\r\n            this._focusView()\r\n        }\r\n    }\r\n    _focusElement($element, isHighlighted) {\r\n        const rowsViewElement = $(this._getRowsViewElement());\r\n        const $focusedView = $element.closest(rowsViewElement);\r\n        const isRowFocusType = this.isRowFocusType();\r\n        let args = {};\r\n        if (!$focusedView.length || this._isCellElement($element) && !this._isCellValid($element)) {\r\n            return\r\n        }\r\n        this._focusView();\r\n        this._isNeedFocus = true;\r\n        this._isNeedScroll = true;\r\n        if (this._isCellElement($element) || isGroupRow($element)) {\r\n            this.setCellFocusType();\r\n            args = this._fireFocusChangingEvents(null, $element, true, isHighlighted);\r\n            $element = args.$newCellElement;\r\n            if (isRowFocusType && !args.isHighlighted) {\r\n                this.setRowFocusType()\r\n            }\r\n        }\r\n        if (!args.cancel) {\r\n            this._focus($element, !args.isHighlighted);\r\n            this._focusInteractiveElement($element)\r\n        }\r\n    }\r\n    _getFocusedViewByElement($element) {\r\n        const view = this.getFocusedView();\r\n        const $view = view && $(view.element());\r\n        return $element && 0 !== $element.closest($view).length\r\n    }\r\n    _focusView() {\r\n        this._focusedView = this._rowsView\r\n    }\r\n    _resetFocusedView() {\r\n        this.setRowFocusType();\r\n        this._focusedView = null\r\n    }\r\n    _focusInteractiveElement($cell, isLast) {\r\n        if (!$cell) {\r\n            return\r\n        }\r\n        const $focusedElement = this._getInteractiveElement($cell, isLast);\r\n        gridCoreUtils.focusAndSelectElement(this, $focusedElement)\r\n    }\r\n    _focus($cell, disableFocus, skipFocusEvent) {\r\n        const $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(`.${ROW_CLASS}`) : $cell;\r\n        if ($row && isNotFocusedRow($row)) {\r\n            return\r\n        }\r\n        const focusedView = this._focusedView;\r\n        const $focusViewElement = focusedView && focusedView.element();\r\n        let $focusElement;\r\n        this._isHiddenFocus = disableFocus;\r\n        const isRowFocus = isGroupRow($row) || isGroupFooterRow($row) || this.isRowFocusType();\r\n        if (isRowFocus) {\r\n            $focusElement = $row;\r\n            if (focusedView) {\r\n                this.setFocusedRowIndex(this._getRowIndex($row))\r\n            }\r\n        } else if (this._isCellElement($cell)) {\r\n            $focusElement = $cell;\r\n            this._updateFocusedCellPosition($cell)\r\n        }\r\n        if ($focusElement) {\r\n            if ($focusViewElement) {\r\n                $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").filter(((i, node) => gridCoreUtils.isElementInCurrentGrid(this, $(node)))).not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeClass(FOCUSED_CLASS).removeAttr(\"tabindex\")\r\n            }\r\n            eventsEngine.one($focusElement, \"blur\", (e => {\r\n                if (e.relatedTarget) {\r\n                    $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS).removeClass(FOCUSED_CLASS)\r\n                }\r\n            }));\r\n            if (!skipFocusEvent) {\r\n                this._applyTabIndexToElement($focusElement);\r\n                eventsEngine.trigger($focusElement, \"focus\")\r\n            }\r\n            if (disableFocus) {\r\n                $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS);\r\n                if (isRowFocus) {\r\n                    $cell.addClass(CELL_FOCUS_DISABLED_CLASS)\r\n                }\r\n            } else {\r\n                this._editorFactory.focus($focusElement)\r\n            }\r\n        }\r\n    }\r\n    _updateFocus(isRenderView) {\r\n        let skipFocusEvent = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        this._updateFocusTimeout = setTimeout((() => {\r\n            if (this._needFocusEditingCell()) {\r\n                this._editingController._focusEditingCell();\r\n                return\r\n            }\r\n            let $cell = this._getFocusedCell();\r\n            const isEditing = this._editingController.isEditing();\r\n            if (!this.getMasterDetailCell($cell) || this._isRowEditMode()) {\r\n                if (this._hasSkipRow($cell.parent())) {\r\n                    const direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\r\n                    $cell = this._getNextCell(direction)\r\n                }\r\n                if (isElementDefined($cell)) {\r\n                    if ($cell.is(\"td\") || $cell.hasClass(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {\r\n                        const isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\r\n                        const $focusedElementInsideCell = $cell.find(\":focus\");\r\n                        const isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\r\n                        const column = this._getColumnByCellElement($cell);\r\n                        if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {\r\n                            if (isCommandCell && isFocusedElementDefined) {\r\n                                gridCoreUtils.focusAndSelectElement(this, $focusedElementInsideCell);\r\n                                return\r\n                            }!isFocusedElementDefined && this._focus($cell, false, skipFocusEvent)\r\n                        } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {\r\n                            this._focus($cell, this._isHiddenFocus, skipFocusEvent)\r\n                        }\r\n                        if (isEditing && !(null !== column && void 0 !== column && column.showEditorAlways)) {\r\n                            this._focusInteractiveElement.bind(this)($cell)\r\n                        }\r\n                    } else {\r\n                        eventsEngine.trigger($cell, \"focus\")\r\n                    }\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    _getColumnByCellElement($cell) {\r\n        const cellIndex = this._rowsView.getCellIndex($cell);\r\n        const columnIndex = cellIndex + this._columnsController.getColumnIndexOffset();\r\n        return this._columnsController.getVisibleColumns(null, true)[columnIndex]\r\n    }\r\n    _needFocusEditingCell() {\r\n        const isCellEditMode = this._editingController.getEditMode() === EDIT_MODE_CELL;\r\n        const isBatchEditMode = this._editingController.getEditMode() === EDIT_MODE_BATCH;\r\n        const cellEditModeHasChanges = isCellEditMode && this._editingController.hasChanges();\r\n        const isNewRowBatchEditMode = isBatchEditMode && this._editingController.isNewRowInEditMode();\r\n        const $cell = this._getFocusedCell();\r\n        return (0 === $cell.children().length || $cell.find(FOCUSABLE_ELEMENT_SELECTOR).length > 0) && (cellEditModeHasChanges || isNewRowBatchEditMode)\r\n    }\r\n    _getFocusedCell() {\r\n        return $(this._getCell(this._focusedCellPosition))\r\n    }\r\n    _updateFocusedCellPositionByTarget(target) {\r\n        var _this$_focusedCellPos2;\r\n        const elementType = this._getElementType(target);\r\n        if (\"row\" === elementType && isDefined(null === (_this$_focusedCellPos2 = this._focusedCellPosition) || void 0 === _this$_focusedCellPos2 ? void 0 : _this$_focusedCellPos2.columnIndex)) {\r\n            const $row = $(target);\r\n            this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row))\r\n        } else {\r\n            this._updateFocusedCellPosition(this._getCellElementFromTarget(target))\r\n        }\r\n    }\r\n    _updateFocusedCellPosition($cell, direction) {\r\n        const position = this._getCellPosition($cell, direction);\r\n        if (position) {\r\n            if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\r\n                this.setFocusedCellPosition(position.rowIndex, position.columnIndex)\r\n            }\r\n        }\r\n        return position\r\n    }\r\n    _getFocusedColumnIndexOffset(columnIndex) {\r\n        let offset = 0;\r\n        const column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        if (column && column.fixed) {\r\n            offset = this._getFixedColumnIndexOffset(column)\r\n        } else if (columnIndex >= 0) {\r\n            offset = this._columnsController.getColumnIndexOffset()\r\n        }\r\n        return offset\r\n    }\r\n    _getFixedColumnIndexOffset(column) {\r\n        const offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\r\n        return offset\r\n    }\r\n    _getCellPosition($cell, direction) {\r\n        let columnIndex;\r\n        const $row = isElementDefined($cell) && $cell.closest(\"tr\");\r\n        if (isElementDefined($row)) {\r\n            const rowIndex = this._getRowIndex($row);\r\n            columnIndex = this._rowsView.getCellIndex($cell, rowIndex);\r\n            columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\r\n            if (direction) {\r\n                columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\r\n                columnIndex = this._applyColumnIndexBoundaries(columnIndex)\r\n            }\r\n            return {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            }\r\n        }\r\n        return\r\n    }\r\n    _focusCell($cell, isDisabled) {\r\n        if (this._isCellValid($cell)) {\r\n            this._focus($cell, isDisabled);\r\n            return true\r\n        }\r\n        return\r\n    }\r\n    _focusEditFormCell($cell) {\r\n        if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {\r\n            this._editorFactory.focus($cell, true)\r\n        }\r\n    }\r\n    _resetFocusedCell(preventScroll) {\r\n        var _this$_focusedView2;\r\n        const $cell = this._getFocusedCell();\r\n        isElementDefined($cell) && $cell.removeAttr(\"tabindex\").removeClass(CELL_FOCUS_DISABLED_CLASS);\r\n        this._isNeedFocus = false;\r\n        this._isNeedScroll = false;\r\n        this._focusedCellPosition = {};\r\n        clearTimeout(this._updateFocusTimeout);\r\n        null === (_this$_focusedView2 = this._focusedView) || void 0 === _this$_focusedView2 || _this$_focusedView2.renderFocusState({\r\n            preventScroll: preventScroll\r\n        })\r\n    }\r\n    restoreFocusableElement(rowIndex, $event) {\r\n        const that = this;\r\n        let args;\r\n        let $rowElement;\r\n        const isUpArrow = isDefined(rowIndex);\r\n        const $rowsViewElement = this._rowsView.element();\r\n        const {\r\n            columnIndex: columnIndex\r\n        } = that._focusedCellPosition;\r\n        const rowIndexOffset = that._dataController.getRowIndexOffset();\r\n        rowIndex = isUpArrow ? rowIndex : this._rowsView.getTopVisibleItemIndex() + rowIndexOffset;\r\n        if (!isUpArrow) {\r\n            that._editorFactory.loseFocus();\r\n            that._applyTabIndexToElement($rowsViewElement);\r\n            eventsEngine.trigger($rowsViewElement, \"focus\")\r\n        } else {\r\n            $rowElement = this._rowsView.getRow(rowIndex - rowIndexOffset);\r\n            args = that._fireFocusedRowChanging($event, $rowElement);\r\n            if (!args.cancel && args.rowIndexChanged) {\r\n                rowIndex = args.newRowIndex\r\n            }\r\n        }\r\n        if (!isUpArrow || !args.cancel) {\r\n            that.setFocusedCellPosition(rowIndex, columnIndex)\r\n        }\r\n        isUpArrow && that._updateFocus()\r\n    }\r\n    _getNewPositionByCode(cellPosition, elementType, code) {\r\n        let {\r\n            columnIndex: columnIndex\r\n        } = cellPosition;\r\n        let {\r\n            rowIndex: rowIndex\r\n        } = cellPosition;\r\n        let visibleColumnsCount;\r\n        if (void 0 === cellPosition.rowIndex && \"next\" === code) {\r\n            return {\r\n                columnIndex: 0,\r\n                rowIndex: 0\r\n            }\r\n        }\r\n        switch (code) {\r\n            case \"nextInRow\":\r\n            case \"next\":\r\n                visibleColumnsCount = this._getVisibleColumnCount();\r\n                if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })) {\r\n                    columnIndex++\r\n                } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\r\n                    columnIndex = 0;\r\n                    rowIndex++\r\n                }\r\n                break;\r\n            case \"previousInRow\":\r\n            case \"previous\":\r\n                if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })) {\r\n                    columnIndex--\r\n                } else if (rowIndex > 0 && \"previous\" === code) {\r\n                    rowIndex--;\r\n                    visibleColumnsCount = this._getVisibleColumnCount();\r\n                    columnIndex = visibleColumnsCount - 1\r\n                }\r\n                break;\r\n            case \"upArrow\":\r\n                rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\r\n                break;\r\n            case \"downArrow\":\r\n                rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex\r\n        }\r\n        return {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    }\r\n    setFocusedCellPosition(rowIndex, columnIndex) {\r\n        this.setFocusedRowIndex(rowIndex);\r\n        this.setFocusedColumnIndex(columnIndex)\r\n    }\r\n    setFocusedRowIndex(rowIndex) {\r\n        if (!this._focusedCellPosition) {\r\n            this._focusedCellPosition = {}\r\n        }\r\n        this._focusedCellPosition.rowIndex = rowIndex\r\n    }\r\n    setFocusedColumnIndex(columnIndex) {\r\n        if (!this._focusedCellPosition) {\r\n            this._focusedCellPosition = {}\r\n        }\r\n        this._focusedCellPosition.columnIndex = columnIndex\r\n    }\r\n    getRowIndex() {\r\n        return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1\r\n    }\r\n    getColumnIndex() {\r\n        return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1\r\n    }\r\n    getVisibleRowIndex() {\r\n        var _this$_focusedCellPos3;\r\n        const rowIndex = null === (_this$_focusedCellPos3 = this._focusedCellPosition) || void 0 === _this$_focusedCellPos3 ? void 0 : _this$_focusedCellPos3.rowIndex;\r\n        return !isDefined(rowIndex) || rowIndex < 0 ? -1 : rowIndex - this._dataController.getRowIndexOffset()\r\n    }\r\n    getVisibleColumnIndex() {\r\n        var _this$_focusedCellPos4;\r\n        const columnIndex = null === (_this$_focusedCellPos4 = this._focusedCellPosition) || void 0 === _this$_focusedCellPos4 ? void 0 : _this$_focusedCellPos4.columnIndex;\r\n        return !isDefined(columnIndex) ? -1 : columnIndex - this._columnsController.getColumnIndexOffset()\r\n    }\r\n    _applyColumnIndexBoundaries(columnIndex) {\r\n        const visibleColumnsCount = this._getVisibleColumnCount();\r\n        if (columnIndex < 0) {\r\n            columnIndex = 0\r\n        } else if (columnIndex >= visibleColumnsCount) {\r\n            columnIndex = visibleColumnsCount - 1\r\n        }\r\n        return columnIndex\r\n    }\r\n    _isCellByPositionValid(cellPosition) {\r\n        const $cell = $(this._getCell(cellPosition));\r\n        return this._isCellValid($cell)\r\n    }\r\n    _isLastRow(rowIndex) {\r\n        const dataController = this._dataController;\r\n        if (this._isVirtualRowRender()) {\r\n            return rowIndex >= dataController.getMaxRowIndex()\r\n        }\r\n        const lastVisibleIndex = Math.max(...dataController.items().map(((item, index) => false !== item.visible ? index : -1)));\r\n        return rowIndex === lastVisibleIndex\r\n    }\r\n    _isFirstValidCell(cellPosition) {\r\n        let isFirstValidCell = false;\r\n        if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\r\n            isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition)\r\n        }\r\n        return isFirstValidCell\r\n    }\r\n    _hasValidCellBeforePosition(cellPosition) {\r\n        let {\r\n            columnIndex: columnIndex\r\n        } = cellPosition;\r\n        let hasValidCells = false;\r\n        while (columnIndex > 0 && !hasValidCells) {\r\n            const checkingPosition = {\r\n                columnIndex: --columnIndex,\r\n                rowIndex: cellPosition.rowIndex\r\n            };\r\n            hasValidCells = this._isCellByPositionValid(checkingPosition)\r\n        }\r\n        return hasValidCells\r\n    }\r\n    _hasValidCellAfterPosition(cellPosition) {\r\n        let {\r\n            columnIndex: columnIndex\r\n        } = cellPosition;\r\n        let hasValidCells = false;\r\n        const visibleColumnCount = this._getVisibleColumnCount();\r\n        while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\r\n            const checkingPosition = {\r\n                columnIndex: ++columnIndex,\r\n                rowIndex: cellPosition.rowIndex\r\n            };\r\n            hasValidCells = this._isCellByPositionValid(checkingPosition)\r\n        }\r\n        return hasValidCells\r\n    }\r\n    _isLastValidCell(cellPosition) {\r\n        const nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\r\n        const {\r\n            rowIndex: rowIndex\r\n        } = cellPosition;\r\n        const checkingPosition = {\r\n            columnIndex: nextColumnIndex,\r\n            rowIndex: rowIndex\r\n        };\r\n        const visibleRows = this._dataController.getVisibleRows();\r\n        const row = visibleRows && visibleRows[rowIndex];\r\n        const isLastRow = this._isLastRow(rowIndex);\r\n        if (!isLastRow) {\r\n            return false\r\n        }\r\n        const isFullRowFocus = \"group\" === (null === row || void 0 === row ? void 0 : row.rowType) || \"groupFooter\" === (null === row || void 0 === row ? void 0 : row.rowType);\r\n        if (isFullRowFocus && cellPosition.columnIndex > 0) {\r\n            return true\r\n        }\r\n        if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\r\n            return true\r\n        }\r\n        if (this._isCellByPositionValid(checkingPosition)) {\r\n            return false\r\n        }\r\n        return this._isLastValidCell(checkingPosition)\r\n    }\r\n    _isCellValid($cell, isClick) {\r\n        if (isElementDefined($cell)) {\r\n            const $row = $cell.parent();\r\n            const columnIndex = this._rowsView.getCellIndex($cell) + this._columnsController.getColumnIndexOffset();\r\n            const column = this._getColumnByCellElement($cell);\r\n            const visibleColumnCount = this._getVisibleColumnCount();\r\n            const editingController = this._editingController;\r\n            const isMasterDetailRow = isDetailRow($row);\r\n            const isShowWhenGrouped = column && column.showWhenGrouped;\r\n            const isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);\r\n            const isValidGroupSpaceColumn = function() {\r\n                return !isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\"), 10) > 1\r\n            };\r\n            const isDragCell = GridCoreKeyboardNavigationDom.isDragCell($cell);\r\n            if (isDragCell) {\r\n                return false\r\n            }\r\n            if (this.getMasterDetailCell($cell)) {\r\n                return true\r\n            }\r\n            if (visibleColumnCount > columnIndex && isValidGroupSpaceColumn()) {\r\n                const rowItems = this._dataController.items();\r\n                const visibleRowIndex = this._rowsView.getRowIndex($row);\r\n                const row = rowItems[visibleRowIndex];\r\n                const isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\r\n                const isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\r\n                const isEditing = isRowEditingInCurrentRow || isCellEditing;\r\n                if (column.command) {\r\n                    if (this._isLegacyNavigation()) {\r\n                        return !isEditing && \"expand\" === column.command\r\n                    }\r\n                    if (isCellEditing) {\r\n                        return false\r\n                    }\r\n                    if (isRowEditingInCurrentRow) {\r\n                        return \"select\" !== column.command\r\n                    }\r\n                    return !isEditing\r\n                }\r\n                if (isCellEditing && row && \"data\" !== row.rowType) {\r\n                    return false\r\n                }\r\n                return !isEditing || column.allowEditing || isClick\r\n            }\r\n        }\r\n    }\r\n    getFirstValidCellInRow($row, columnIndex) {\r\n        const that = this;\r\n        const $cells = $row.find(\"> td\");\r\n        let $cell;\r\n        let $result;\r\n        columnIndex = columnIndex || 0;\r\n        for (let i = columnIndex; i < $cells.length; ++i) {\r\n            $cell = $cells.eq(i);\r\n            if (that._isCellValid($cell)) {\r\n                $result = $cell;\r\n                break\r\n            }\r\n        }\r\n        return $result\r\n    }\r\n    _getNextCell(keyCode, elementType, cellPosition) {\r\n        const focusedCellPosition = cellPosition || this._focusedCellPosition;\r\n        const isRowFocusType = this.isRowFocusType();\r\n        const includeCommandCells = isRowFocusType || [\"next\", \"previous\"].includes(keyCode);\r\n        let $cell;\r\n        let $row;\r\n        if (this._focusedView && focusedCellPosition) {\r\n            const newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\r\n            $cell = $(this._getCell(newFocusedCellPosition));\r\n            const isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\r\n            if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\r\n                if (isRowFocusType) {\r\n                    $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex)\r\n                } else {\r\n                    $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition)\r\n                }\r\n            }\r\n            $row = isElementDefined($cell) && $cell.parent();\r\n            if (this._hasSkipRow($row)) {\r\n                const rowIndex = this._getRowIndex($row);\r\n                if (!this._isLastRow(rowIndex)) {\r\n                    $cell = this._getNextCell(keyCode, \"row\", {\r\n                        columnIndex: focusedCellPosition.columnIndex,\r\n                        rowIndex: rowIndex\r\n                    })\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n            return isElementDefined($cell) ? $cell : null\r\n        }\r\n        return null\r\n    }\r\n    _startEditing(eventArgs, fastEditingKey) {\r\n        const focusedCellPosition = this._focusedCellPosition;\r\n        const visibleRowIndex = this.getVisibleRowIndex();\r\n        const visibleColumnIndex = this.getVisibleColumnIndex();\r\n        const row = this._dataController.items()[visibleRowIndex];\r\n        const column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\r\n        if (this._isAllowEditing(row, column)) {\r\n            if (this._isRowEditMode()) {\r\n                this._editingController.editRow(visibleRowIndex)\r\n            } else if (focusedCellPosition) {\r\n                this._startEditCell(eventArgs, fastEditingKey)\r\n            }\r\n        }\r\n    }\r\n    _isAllowEditing(row, column) {\r\n        return this._editingController.allowUpdating({\r\n            row: row\r\n        }) && column && column.allowEditing\r\n    }\r\n    _editFocusedCell() {\r\n        const rowIndex = this.getVisibleRowIndex();\r\n        const colIndex = this.getVisibleColumnIndex();\r\n        return this._editingController.editCell(rowIndex, colIndex)\r\n    }\r\n    _startEditCell(eventArgs, fastEditingKey) {\r\n        this._fastEditingStarted = isDefined(fastEditingKey);\r\n        const editResult = this._editFocusedCell();\r\n        const isEditResultDeferred = isDeferred(editResult);\r\n        const isFastEditingStarted = this._isFastEditingStarted();\r\n        if (!isFastEditingStarted || !isEditResultDeferred && !editResult) {\r\n            return\r\n        }\r\n        const editorValue = isEditResultDeferred && fastEditingKey === FAST_EDITING_DELETE_KEY ? \"\" : fastEditingKey;\r\n        const editResultDeferred = isEditResultDeferred ? editResult : Deferred().resolve();\r\n        const waitTemplatesDeferred = this._rowsView.waitAsyncTemplates(true);\r\n        when(editResultDeferred, waitTemplatesDeferred).done((() => {\r\n            this._editingCellHandler(eventArgs, editorValue)\r\n        }))\r\n    }\r\n    _editingCellHandler(eventArgs, editorValue) {\r\n        var _$inputElement$select;\r\n        const $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);\r\n        const $inputElement = $input.get(0);\r\n        if (!$inputElement) {\r\n            return\r\n        }\r\n        const keyDownEvent = createEvent(eventArgs, {\r\n            type: \"keydown\",\r\n            target: $inputElement\r\n        });\r\n        const keyPressEvent = createEvent(eventArgs, {\r\n            type: \"keypress\",\r\n            target: $inputElement\r\n        });\r\n        const inputEvent = createEvent(eventArgs, {\r\n            type: \"input\",\r\n            target: $inputElement\r\n        });\r\n        if (inputEvent.originalEvent) {\r\n            inputEvent.originalEvent = createEvent(inputEvent.originalEvent, {\r\n                data: editorValue\r\n            })\r\n        }\r\n        null === (_$inputElement$select = $inputElement.select) || void 0 === _$inputElement$select || _$inputElement$select.call($inputElement);\r\n        eventsEngine.trigger($input, keyDownEvent);\r\n        if (!keyDownEvent.isDefaultPrevented()) {\r\n            eventsEngine.trigger($input, keyPressEvent);\r\n            if (!keyPressEvent.isDefaultPrevented()) {\r\n                const timeout = browser.mozilla ? 25 : 0;\r\n                setTimeout((() => {\r\n                    const inputValue = this._getKeyPressInputValue($input, editorValue);\r\n                    $input.val(inputValue);\r\n                    const $widgetContainer = $input.closest(`.${WIDGET_CLASS}`);\r\n                    eventsEngine.off($widgetContainer, \"focusout\");\r\n                    eventsEngine.one($widgetContainer, \"focusout\", (() => {\r\n                        eventsEngine.trigger($input, \"change\")\r\n                    }));\r\n                    eventsEngine.trigger($input, inputEvent)\r\n                }), timeout)\r\n            }\r\n        }\r\n    }\r\n    _getKeyPressInputValue($input, editorValue) {\r\n        const inputCurrentValue = $input.val();\r\n        return \"-\" === editorValue && \"-0\" === inputCurrentValue ? \"-0\" : editorValue\r\n    }\r\n    _fireFocusChangingEvents($event, $cell, fireRowEvent, isHighlighted) {\r\n        let args = {};\r\n        const cellPosition = this._getCellPosition($cell) ?? {};\r\n        if (this.isCellFocusType()) {\r\n            args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\r\n            if (!args.cancel) {\r\n                cellPosition.columnIndex = args.newColumnIndex;\r\n                cellPosition.rowIndex = args.newRowIndex;\r\n                isHighlighted = args.isHighlighted;\r\n                $cell = $(this._getCell(cellPosition))\r\n            }\r\n        }\r\n        if (!args.cancel && fireRowEvent && $cell) {\r\n            args = this._fireFocusedRowChanging($event, $cell.parent());\r\n            if (!args.cancel) {\r\n                cellPosition.rowIndex = args.newRowIndex;\r\n                args.isHighlighted = isHighlighted\r\n            }\r\n        }\r\n        args.$newCellElement = $(this._getCell(cellPosition));\r\n        if (!args.$newCellElement.length) {\r\n            args.$newCellElement = $cell\r\n        }\r\n        return args\r\n    }\r\n    _fireFocusedCellChanging($event, $cellElement, isHighlighted) {\r\n        const prevColumnIndex = this.option(\"focusedColumnIndex\");\r\n        const prevRowIndex = this.option(\"focusedRowIndex\");\r\n        const cellPosition = this._getCellPosition($cellElement);\r\n        const columnIndex = cellPosition ? cellPosition.columnIndex : -1;\r\n        const rowIndex = cellPosition ? cellPosition.rowIndex : -1;\r\n        const visibleRows = this._dataController.getVisibleRows();\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        const args = {\r\n            cellElement: $cellElement,\r\n            prevColumnIndex: prevColumnIndex,\r\n            prevRowIndex: prevRowIndex,\r\n            newColumnIndex: columnIndex,\r\n            newRowIndex: rowIndex,\r\n            rows: visibleRows,\r\n            columns: visibleColumns,\r\n            event: $event,\r\n            isHighlighted: isHighlighted || false,\r\n            cancel: false\r\n        };\r\n        this._canceledCellPosition = null;\r\n        this.executeAction(\"onFocusedCellChanging\", args);\r\n        if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\r\n            args.$newCellElement = $(this._getCell({\r\n                columnIndex: args.newColumnIndex,\r\n                rowIndex: args.newRowIndex\r\n            }))\r\n        }\r\n        if (args.cancel) {\r\n            this._canceledCellPosition = {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            }\r\n        }\r\n        return args\r\n    }\r\n    _fireFocusedCellChanged($cell) {\r\n        const columnIndex = this._rowsView.getCellIndex($cell);\r\n        const rowOptions = null === $cell || void 0 === $cell ? void 0 : $cell.parent().data(\"options\");\r\n        const focusedRowKey = null === rowOptions || void 0 === rowOptions ? void 0 : rowOptions.key;\r\n        this._memoFireFocusedCellChanged(focusedRowKey, columnIndex)\r\n    }\r\n    _memoFireFocusedCellChanged(rowKey, columnIndex) {\r\n        const $cell = this._getFocusedCell();\r\n        const rowIndex = this._getRowIndex(null === $cell || void 0 === $cell ? void 0 : $cell.parent());\r\n        const localRowIndex = Math.min(rowIndex - this._dataController.getRowIndexOffset(), this._dataController.items().length - 1);\r\n        const isEditingCell = this._editingController.isEditCell(localRowIndex, columnIndex);\r\n        if (isEditingCell) {\r\n            return\r\n        }\r\n        const row = this._dataController.items()[localRowIndex];\r\n        const column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        this.executeAction(\"onFocusedCellChanged\", {\r\n            cellElement: $cell ? getPublicElement($cell) : void 0,\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex,\r\n            row: row,\r\n            column: column\r\n        })\r\n    }\r\n    _fireFocusedRowChanging(eventArgs, $newFocusedRow) {\r\n        const newRowIndex = this._getRowIndex($newFocusedRow);\r\n        const prevFocusedRowIndex = this.option(\"focusedRowIndex\");\r\n        const loadingOperationTypes = this._dataController.loadingOperationTypes();\r\n        const args = {\r\n            rowElement: $newFocusedRow,\r\n            prevRowIndex: prevFocusedRowIndex,\r\n            newRowIndex: newRowIndex,\r\n            event: eventArgs,\r\n            rows: this._dataController.getVisibleRows(),\r\n            cancel: false\r\n        };\r\n        const loadingOperations = loadingOperationTypes.sorting || loadingOperationTypes.grouping || loadingOperationTypes.filtering || loadingOperationTypes.paging;\r\n        if (!this._dataController || this._dataController.isLoading() && loadingOperations) {\r\n            args.cancel = true;\r\n            return args\r\n        }\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this.executeAction(\"onFocusedRowChanging\", args);\r\n            if (!args.cancel && args.newRowIndex !== newRowIndex) {\r\n                args.resetFocusedRow = args.newRowIndex < 0;\r\n                if (!args.resetFocusedRow) {\r\n                    this.setFocusedRowIndex(args.newRowIndex)\r\n                }\r\n                args.rowIndexChanged = true\r\n            }\r\n        }\r\n        return args\r\n    }\r\n    _fireFocusedRowChanged() {\r\n        var _this$_focusControlle;\r\n        const focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        const focusedRowIndex = null === (_this$_focusControlle = this._focusController) || void 0 === _this$_focusControlle ? void 0 : _this$_focusControlle.getFocusedRowIndexByKey(focusedRowKey);\r\n        if (!focusedRowEnabled || isDefined(focusedRowKey) && focusedRowIndex < 0) {\r\n            return\r\n        }\r\n        this._memoFireFocusedRowChanged(focusedRowKey, focusedRowIndex)\r\n    }\r\n    _memoFireFocusedRowChanged(focusedRowKey, focusedRowIndex) {\r\n        const localRowIndex = focusedRowIndex - this._dataController.getRowIndexOffset();\r\n        this.executeAction(\"onFocusedRowChanged\", {\r\n            rowElement: focusedRowIndex < 0 ? void 0 : this._rowsView.getRowElement(localRowIndex),\r\n            rowIndex: focusedRowIndex,\r\n            row: focusedRowIndex < 0 ? void 0 : this._dataController.getVisibleRows()[localRowIndex]\r\n        })\r\n    }\r\n    _isEventInCurrentGrid(event) {\r\n        return gridCoreUtils.isElementInCurrentGrid(this, $(event.target))\r\n    }\r\n    _isRowEditMode() {\r\n        const editMode = this._editingController.getEditMode();\r\n        return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM\r\n    }\r\n    _isCellEditMode() {\r\n        const editMode = this._editingController.getEditMode();\r\n        return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH\r\n    }\r\n    _isFastEditingAllowed() {\r\n        return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\")\r\n    }\r\n    _getInteractiveElement($cell, isLast) {\r\n        const $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\r\n        return isLast ? $focusedElement.last() : $focusedElement.first()\r\n    }\r\n    _applyTabIndexToElement($element) {\r\n        const tabIndex = this.option(\"tabIndex\") ?? 0;\r\n        $element.attr(\"tabindex\", tabIndex)\r\n    }\r\n    _getCell(cellPosition) {\r\n        if (this._focusedView && cellPosition) {\r\n            const rowIndexOffset = this._dataController.getRowIndexOffset();\r\n            const column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\r\n            const columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\r\n            const rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\r\n            const columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\r\n            return this._focusedView.getCell({\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            })\r\n        }\r\n    }\r\n    _getRowIndex($row) {\r\n        let rowIndex = this._rowsView.getRowIndex($row);\r\n        if (rowIndex >= 0) {\r\n            rowIndex += this._dataController.getRowIndexOffset()\r\n        }\r\n        return rowIndex\r\n    }\r\n    _hasSkipRow($row) {\r\n        const row = $row && $row.get(0);\r\n        return row && \"none\" === row.style.display\r\n    }\r\n    _allowEditingOnEnterKey() {\r\n        return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\")\r\n    }\r\n    _isLegacyNavigation() {\r\n        return this.option(\"useLegacyKeyboardNavigation\")\r\n    }\r\n    _getDirectionCodeByKey(key) {\r\n        let directionCode;\r\n        switch (key) {\r\n            case \"upArrow\":\r\n                directionCode = \"prevRow\";\r\n                break;\r\n            case \"downArrow\":\r\n                directionCode = \"nextRow\";\r\n                break;\r\n            case \"leftArrow\":\r\n                directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\r\n                break;\r\n            case \"rightArrow\":\r\n                directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\"\r\n        }\r\n        return directionCode\r\n    }\r\n    _isVirtualScrolling() {\r\n        const scrollingMode = this.option(\"scrolling.mode\");\r\n        return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode\r\n    }\r\n    _isVirtualRowRender() {\r\n        return this._isVirtualScrolling() || gridCoreUtils.isVirtualRowRendering(this)\r\n    }\r\n    _isVirtualColumnRender() {\r\n        return \"virtual\" === this.option(\"scrolling.columnRenderingMode\")\r\n    }\r\n    _scrollBy(left, top, rowIndex, $event) {\r\n        const that = this;\r\n        const scrollable = this._rowsView.getScrollable();\r\n        if (that._focusedCellPosition) {\r\n            const scrollHandler = function() {\r\n                scrollable.off(\"scroll\", scrollHandler);\r\n                setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event))\r\n            };\r\n            scrollable.on(\"scroll\", scrollHandler)\r\n        }\r\n        return scrollable.scrollBy({\r\n            left: left,\r\n            top: top\r\n        })\r\n    }\r\n    _isInsideEditForm(element) {\r\n        const $editForm = $(element).closest(`.${this.addWidgetPrefix(EDIT_FORM_CLASS)}`);\r\n        return $editForm.length && this.elementIsInsideGrid($editForm)\r\n    }\r\n    getMasterDetailCell(element) {\r\n        const $masterDetailCell = $(element).closest(`.${MASTER_DETAIL_CELL_CLASS}`);\r\n        if ($masterDetailCell.length && this.elementIsInsideGrid($masterDetailCell)) {\r\n            return $masterDetailCell\r\n        }\r\n        return null\r\n    }\r\n    _processNextCellInMasterDetail($nextCell, _$cell) {\r\n        if (!this._isInsideEditForm($nextCell) && $nextCell) {\r\n            this._applyTabIndexToElement($nextCell)\r\n        }\r\n    }\r\n    _handleTabKeyOnMasterDetailCell(target, direction) {\r\n        if (this.getMasterDetailCell(target)) {\r\n            this._updateFocusedCellPosition($(target), direction);\r\n            const $nextCell = this._getNextCell(direction, \"row\");\r\n            this._processNextCellInMasterDetail($nextCell, $(target));\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    _getElementType(target) {\r\n        return $(target).is(\"tr\") ? \"row\" : \"cell\"\r\n    }\r\n    _isFastEditingStarted() {\r\n        return this._isFastEditingAllowed() && this._fastEditingStarted\r\n    }\r\n    _getVisibleColumnCount() {\r\n        return this._columnsController.getVisibleColumns(null, true).length\r\n    }\r\n    _isCellInRow(cellPosition, includeCommandCells) {\r\n        const {\r\n            columnIndex: columnIndex\r\n        } = cellPosition;\r\n        const visibleColumnsCount = this._getVisibleColumnCount();\r\n        return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1\r\n    }\r\n    _isCellElement($element) {\r\n        return $element.length && \"TD\" === $element[0].tagName\r\n    }\r\n    _getCellElementFromTarget(target) {\r\n        const elementType = this._getElementType(target);\r\n        const $targetElement = $(target);\r\n        let $cell;\r\n        if (\"cell\" === elementType) {\r\n            $cell = $targetElement.closest(`.${ROW_CLASS} > td`)\r\n        } else {\r\n            $cell = $targetElement.children().not(`.${COMMAND_EXPAND_CLASS}`).first()\r\n        }\r\n        return $cell\r\n    }\r\n    _getRowsViewElement() {\r\n        var _this$_rowsView5;\r\n        return null === (_this$_rowsView5 = this._rowsView) || void 0 === _this$_rowsView5 ? void 0 : _this$_rowsView5.element()\r\n    }\r\n    isKeyboardEnabled() {\r\n        return this.option(\"keyboardNavigation.enabled\")\r\n    }\r\n    _processCanceledEditCellPosition(rowIndex, columnIndex) {\r\n        if (this._canceledCellPosition) {\r\n            const isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\r\n            this._canceledCellPosition = null;\r\n            return isCanceled\r\n        }\r\n        return\r\n    }\r\n    updateFocusedRowIndex() {\r\n        const dataController = this._dataController;\r\n        const visibleRowIndex = this.getVisibleRowIndex();\r\n        const visibleItems = dataController.items();\r\n        const lastVisibleIndex = visibleItems.length ? visibleItems.length - 1 : -1;\r\n        const rowIndexOffset = dataController.getRowIndexOffset();\r\n        if (lastVisibleIndex >= 0 && visibleRowIndex > lastVisibleIndex) {\r\n            this.setFocusedRowIndex(lastVisibleIndex + rowIndexOffset)\r\n        }\r\n    }\r\n}\r\nconst rowsView = Base => class extends Base {\r\n    _rowClick(e) {\r\n        const editRowIndex = this._editingController.getEditRowIndex();\r\n        const isKeyboardEnabled = this._keyboardNavigationController.isKeyboardEnabled();\r\n        if (editRowIndex === e.rowIndex) {\r\n            this._keyboardNavigationController.setCellFocusType()\r\n        }\r\n        const needTriggerPointerEventHandler = (isMobile() || !isKeyboardEnabled) && this.option(\"focusedRowEnabled\");\r\n        if (needTriggerPointerEventHandler) {\r\n            this._triggerPointerDownEventHandler(e, !isKeyboardEnabled)\r\n        }\r\n        super._rowClick.apply(this, arguments)\r\n    }\r\n    _triggerPointerDownEventHandler(e, force) {\r\n        const {\r\n            originalEvent: originalEvent\r\n        } = e.event;\r\n        if (originalEvent) {\r\n            const $cell = $(originalEvent.target);\r\n            const columnIndex = this.getCellIndex($cell);\r\n            const column = this._columnsController.getVisibleColumns()[columnIndex];\r\n            const row = this._dataController.items()[e.rowIndex];\r\n            if (this._keyboardNavigationController._isAllowEditing(row, column) || force) {\r\n                const eventArgs = createEvent(originalEvent, {\r\n                    currentTarget: originalEvent.target\r\n                });\r\n                this._keyboardNavigationController._pointerEventHandler(eventArgs)\r\n            }\r\n        }\r\n    }\r\n    renderFocusState(params) {\r\n        super.renderFocusState(params);\r\n        const {\r\n            preventScroll: preventScroll,\r\n            pageSizeChanged: pageSizeChanged\r\n        } = params ?? {};\r\n        const $rowsViewElement = this.element();\r\n        if ($rowsViewElement && !focused($rowsViewElement)) {\r\n            $rowsViewElement.attr(\"tabindex\", null)\r\n        }\r\n        pageSizeChanged && this._keyboardNavigationController.updateFocusedRowIndex();\r\n        let rowIndex = this._keyboardNavigationController.getVisibleRowIndex();\r\n        if (!isDefined(rowIndex) || rowIndex < 0) {\r\n            rowIndex = 0\r\n        }\r\n        const cellElements = this.getCellElements(rowIndex);\r\n        if (this._keyboardNavigationController.isKeyboardEnabled() && null !== cellElements && void 0 !== cellElements && cellElements.length) {\r\n            this.updateFocusElementTabIndex(cellElements, preventScroll)\r\n        }\r\n    }\r\n    updateFocusElementTabIndex(cellElements, preventScroll) {\r\n        const $row = cellElements.eq(0).parent();\r\n        if (isGroupRow($row)) {\r\n            this._keyboardNavigationController._applyTabIndexToElement($row)\r\n        } else {\r\n            let columnIndex = this._keyboardNavigationController.getColumnIndex();\r\n            if (!isDefined(columnIndex) || columnIndex < 0) {\r\n                columnIndex = 0\r\n            }\r\n            this._updateFocusedCellTabIndex(cellElements, columnIndex)\r\n        }\r\n    }\r\n    _updateFocusedCellTabIndex(cellElements, columnIndex) {\r\n        const keyboardController = this._keyboardNavigationController;\r\n        const cellElementsLength = cellElements ? cellElements.length : -1;\r\n        const updateCellTabIndex = function($cell) {\r\n            const isMasterDetailCell = !!keyboardController.getMasterDetailCell($cell);\r\n            const isValidCell = keyboardController._isCellValid($cell);\r\n            if (!isMasterDetailCell && isValidCell && keyboardController._isCellElement($cell)) {\r\n                keyboardController._applyTabIndexToElement($cell);\r\n                keyboardController.setCellFocusType();\r\n                return true\r\n            }\r\n            return\r\n        };\r\n        const $cell = GridCoreKeyboardNavigationDom.getCellToFocus(cellElements, columnIndex);\r\n        if ($cell.length) {\r\n            updateCellTabIndex($cell)\r\n        } else {\r\n            if (cellElementsLength <= columnIndex) {\r\n                columnIndex = cellElementsLength - 1\r\n            }\r\n            for (let i = columnIndex; i < cellElementsLength; ++i) {\r\n                if (updateCellTabIndex($(cellElements[i]))) {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n    renderDelayedTemplates(change) {\r\n        super.renderDelayedTemplates.apply(this, arguments);\r\n        this.waitAsyncTemplates().done((() => {\r\n            this._renderFocusByChange(change)\r\n        }))\r\n    }\r\n    _renderFocusByChange(change) {\r\n        var _change$changeTypes;\r\n        const {\r\n            operationTypes: operationTypes,\r\n            repaintChangesOnly: repaintChangesOnly\r\n        } = change ?? {};\r\n        const {\r\n            fullReload: fullReload,\r\n            pageSize: pageSize\r\n        } = operationTypes ?? {};\r\n        const hasInsertsOrRemoves = !!(null !== change && void 0 !== change && null !== (_change$changeTypes = change.changeTypes) && void 0 !== _change$changeTypes && _change$changeTypes.find((changeType => \"insert\" === changeType || \"remove\" === changeType)));\r\n        if (!change || !repaintChangesOnly || fullReload || pageSize || hasInsertsOrRemoves) {\r\n            const preventScroll = shouldPreventScroll(this);\r\n            this.renderFocusState({\r\n                preventScroll: preventScroll,\r\n                pageSizeChanged: pageSize\r\n            })\r\n        }\r\n    }\r\n    _renderCore(change) {\r\n        const deferred = super._renderCore.apply(this, arguments);\r\n        this._renderFocusByChange(change);\r\n        return deferred\r\n    }\r\n    _editCellPrepared($cell) {\r\n        var _this$_keyboardNaviga;\r\n        const editorInstance = this._getEditorInstance($cell);\r\n        const isEditingNavigationMode = null === (_this$_keyboardNaviga = this._keyboardNavigationController) || void 0 === _this$_keyboardNaviga ? void 0 : _this$_keyboardNaviga._isFastEditingStarted();\r\n        if (editorInstance && isEditingNavigationMode) {\r\n            this._handleEditingNavigationMode(editorInstance)\r\n        }\r\n        super._editCellPrepared.apply(this, arguments)\r\n    }\r\n    _handleEditingNavigationMode(editorInstance) {\r\n        [\"downArrow\", \"upArrow\"].forEach((keyName => {\r\n            const originalKeyHandler = editorInstance._supportedKeys()[keyName];\r\n            editorInstance.registerKeyHandler(keyName, (e => {\r\n                const isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\r\n                if (isDropDownOpened) {\r\n                    return originalKeyHandler && originalKeyHandler.call(editorInstance, e)\r\n                }\r\n            }))\r\n        }));\r\n        editorInstance.registerKeyHandler(\"leftArrow\", noop);\r\n        editorInstance.registerKeyHandler(\"rightArrow\", noop);\r\n        const isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option(\"useMaskBehavior\");\r\n        if (isDateBoxWithMask) {\r\n            editorInstance.registerKeyHandler(\"enter\", noop)\r\n        }\r\n    }\r\n    _getEditorInstance($cell) {\r\n        const $editor = $cell.find(\".dx-texteditor\").eq(0);\r\n        return gridCoreUtils.getWidgetInstance($editor)\r\n    }\r\n};\r\nconst editing = Base => class extends Base {\r\n    editCell(rowIndex, columnIndex) {\r\n        if (this._keyboardNavigationController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\r\n            return false\r\n        }\r\n        const isCellEditing = super.editCell(rowIndex, columnIndex);\r\n        if (isCellEditing) {\r\n            this._keyboardNavigationController.setupFocusedView()\r\n        }\r\n        return isCellEditing\r\n    }\r\n    editRow(rowIndex) {\r\n        const visibleColumnIndex = this._keyboardNavigationController.getVisibleColumnIndex();\r\n        const column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\r\n        if (column && column.type || this.option(\"editing.mode\") === EDIT_MODE_FORM) {\r\n            this._keyboardNavigationController._resetFocusedCell()\r\n        }\r\n        super.editRow(rowIndex);\r\n        return\r\n    }\r\n    addRow(parentKey) {\r\n        this._keyboardNavigationController.setupFocusedView();\r\n        this._keyboardNavigationController.setCellFocusType();\r\n        return super.addRow.apply(this, arguments)\r\n    }\r\n    getFocusedCellInRow(rowIndex) {\r\n        let $cell = super.getFocusedCellInRow(rowIndex);\r\n        const rowIndexOffset = this._dataController.getRowIndexOffset();\r\n        const focusedRowIndex = this._keyboardNavigationController._focusedCellPosition.rowIndex - rowIndexOffset;\r\n        if (this._keyboardNavigationController.isKeyboardEnabled() && focusedRowIndex === rowIndex) {\r\n            const $focusedCell = this._keyboardNavigationController._getFocusedCell();\r\n            if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS)) {\r\n                $cell = $focusedCell\r\n            }\r\n        }\r\n        return $cell\r\n    }\r\n    _processCanceledEditingCell() {\r\n        this.closeEditCell().done((() => {\r\n            this._keyboardNavigationController._updateFocus()\r\n        }))\r\n    }\r\n    closeEditCell() {\r\n        const keyboardNavigation = this._keyboardNavigationController;\r\n        keyboardNavigation._fastEditingStarted = false;\r\n        const result = super.closeEditCell.apply(this, arguments);\r\n        const $focusedElement = this._getFocusedElement();\r\n        const isFilterCell = !!$focusedElement.closest(`.${this.addWidgetPrefix(FILTER_ROW_CLASS)}`).length;\r\n        if (!isFilterCell) {\r\n            keyboardNavigation._updateFocus()\r\n        }\r\n        return result\r\n    }\r\n    _getFocusedElement() {\r\n        var _this$component$eleme, _this$component;\r\n        const $element = $(null === (_this$component$eleme = (_this$component = this.component).element) || void 0 === _this$component$eleme ? void 0 : _this$component$eleme.call(_this$component));\r\n        const $focusedElement = $element.find(\":focus\");\r\n        return $focusedElement\r\n    }\r\n    _delayedInputFocus() {\r\n        this._keyboardNavigationController._isNeedScroll = true;\r\n        super._delayedInputFocus.apply(this, arguments)\r\n    }\r\n    _isEditingStart() {\r\n        const cancel = super._isEditingStart.apply(this, arguments);\r\n        if (cancel && !this._keyboardNavigationController._isNeedFocus) {\r\n            const $cell = this._keyboardNavigationController._getFocusedCell();\r\n            this._keyboardNavigationController._focus($cell, true)\r\n        }\r\n        return cancel\r\n    }\r\n};\r\nconst data = Base => class extends Base {\r\n    _correctRowIndices(getRowIndexCorrection) {\r\n        const focusedCellPosition = this._keyboardNavigationController._focusedCellPosition;\r\n        super._correctRowIndices.apply(this, arguments);\r\n        if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\r\n            const focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\r\n            if (focusedRowIndexCorrection) {\r\n                focusedCellPosition.rowIndex += focusedRowIndexCorrection;\r\n                this._editorFactoryController.refocus()\r\n            }\r\n        }\r\n    }\r\n    getMaxRowIndex() {\r\n        let result = this.items().length - 1;\r\n        const virtualItemsCount = this.virtualItemsCount();\r\n        if (virtualItemsCount) {\r\n            const rowIndexOffset = this.getRowIndexOffset();\r\n            result += rowIndexOffset + virtualItemsCount.end\r\n        }\r\n        return result\r\n    }\r\n};\r\nconst adaptiveColumns = Base => class extends Base {\r\n    _showHiddenCellsInView(_ref) {\r\n        let {\r\n            viewName: viewName,\r\n            $cells: $cells,\r\n            isCommandColumn: isCommandColumn\r\n        } = _ref;\r\n        super._showHiddenCellsInView.apply(this, arguments);\r\n        viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each(((_, cellElement) => {\r\n            const $cell = $(cellElement);\r\n            isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0)\r\n        }))\r\n    }\r\n    _hideVisibleCellInView(_ref2) {\r\n        let {\r\n            viewName: viewName,\r\n            $cell: $cell,\r\n            isCommandColumn: isCommandColumn\r\n        } = _ref2;\r\n        super._hideVisibleCellInView.apply(this, arguments);\r\n        if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {\r\n            $cell.removeAttr(\"tabindex\")\r\n        }\r\n    }\r\n    _hideVisibleColumnInView(_ref3) {\r\n        let {\r\n            view: view,\r\n            isCommandColumn: isCommandColumn,\r\n            visibleIndex: visibleIndex\r\n        } = _ref3;\r\n        super._hideVisibleColumnInView({\r\n            view: view,\r\n            isCommandColumn: isCommandColumn,\r\n            visibleIndex: visibleIndex\r\n        });\r\n        if (view.name === ROWS_VIEW) {\r\n            this._rowsView.renderFocusState(null)\r\n        }\r\n    }\r\n};\r\nexport const keyboardNavigationModule = {\r\n    defaultOptions: () => ({\r\n        useLegacyKeyboardNavigation: false,\r\n        keyboardNavigation: {\r\n            enabled: true,\r\n            enterKeyAction: \"startEdit\",\r\n            enterKeyDirection: \"none\",\r\n            editOnKeyPress: false\r\n        }\r\n    }),\r\n    controllers: {\r\n        keyboardNavigation: KeyboardNavigationController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: rowsView\r\n        },\r\n        controllers: {\r\n            editing: editing,\r\n            data: data,\r\n            adaptiveColumns: adaptiveColumns,\r\n            keyboardNavigation: keyboardNavigationScrollableA11yExtender\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}