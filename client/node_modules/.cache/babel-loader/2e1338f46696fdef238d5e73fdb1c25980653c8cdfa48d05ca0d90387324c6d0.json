{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/sticky_columns/m_sticky_columns.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../../core/renderer\";\nimport { getBoundingRect } from \"../../../../core/utils/position\";\nimport { getWidth, setWidth } from \"../../../../core/utils/size\";\nimport { getElementLocationInternal } from \"../../../ui/scroll_view/utils/get_element_location_internal\";\nimport { HIDDEN_COLUMNS_WIDTH } from \"../adaptivity/const\";\nimport { isAdaptiveItem, isGroupFooterRow, isGroupRow as isGroupRowElement } from \"../keyboard_navigation/m_keyboard_navigation_utils\";\nimport gridCoreUtils from \"../m_utils\";\nimport { CLASSES as MASTER_DETAIL_CLASSES } from \"../master_detail/const\";\nimport { isGroupRow } from \"../views/m_rows_view\";\nimport { CLASSES, StickyPosition } from \"./const\";\nimport { GridCoreStickyColumnsDom } from \"./dom\";\nimport { getColumnFixedPosition, getStickyOffset, isFirstFixedColumn, isFixedEdge, isLastFixedColumn, needToDisableStickyColumn, needToRemoveColumnBorder, normalizeOffset, processFixedColumns } from \"./utils\";\nconst baseStickyColumns = Base => class extends Base {\n  _addStickyColumnBorderLeftClass($cell, column, rowIndex) {\n    let onlyWithinBandColumn = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;\n    let fixedPosition = arguments.length > 4 ? arguments[4] : void 0;\n    const isFirstFixedCell = isFirstFixedColumn(this._columnsController, column, rowIndex, onlyWithinBandColumn, fixedPosition);\n    if (isFirstFixedCell) {\n      GridCoreStickyColumnsDom.addStickyColumnBorderLeftClass($cell, this.addWidgetPrefix.bind(this));\n    }\n  }\n  _addStickyColumnBorderRightClass($cell, column, rowIndex) {\n    let onlyWithinBandColumn = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;\n    let fixedPosition = arguments.length > 4 ? arguments[4] : void 0;\n    const isLastFixedCell = isLastFixedColumn(this._columnsController, column, rowIndex, onlyWithinBandColumn, fixedPosition);\n    if (isLastFixedCell) {\n      GridCoreStickyColumnsDom.addStickyColumnBorderRightClass($cell, this.addWidgetPrefix.bind(this));\n    }\n  }\n  updateBorderCellClasses($cell, column, rowIndex) {\n    const columnsController = this._columnsController;\n    const isRowsView = \"rowsView\" === this.name;\n    const needToRemoveBorder = needToRemoveColumnBorder(columnsController, column, rowIndex, isRowsView);\n    const isFirstColumn = null === columnsController || void 0 === columnsController ? void 0 : columnsController.isFirstColumn(column, rowIndex);\n    GridCoreStickyColumnsDom.toggleColumnNoBorderClass($cell, needToRemoveBorder, this.addWidgetPrefix.bind(this));\n    GridCoreStickyColumnsDom.toggleFirstHeaderClass($cell, isFirstColumn, this.addWidgetPrefix.bind(this));\n  }\n  _updateBorderClasses() {\n    const isColumnHeadersView = \"columnHeadersView\" === this.name;\n    const $rows = this._getRowElementsCore().not(`.${MASTER_DETAIL_CLASSES.detailRow}`).toArray();\n    $rows.forEach((row, index) => {\n      const rowIndex = isColumnHeadersView ? index : null;\n      const $cells = $(row).children(\"td\").toArray();\n      let columns = this.getColumns(rowIndex);\n      columns = processFixedColumns(this._columnsController, columns);\n      $cells.forEach((cell, cellIndex) => {\n        const $cell = $(cell);\n        const column = columns[cellIndex];\n        if (column.visibleWidth !== HIDDEN_COLUMNS_WIDTH) {\n          this.updateBorderCellClasses($cell, column, rowIndex);\n        }\n      });\n    });\n  }\n  _renderCore(options) {\n    const deferred = super._renderCore(options);\n    const $element = this.element();\n    const hasStickyColumns = this.hasStickyColumns();\n    GridCoreStickyColumnsDom.toggleStickyColumnsClass($element, hasStickyColumns, this.addWidgetPrefix.bind(this));\n    if (hasStickyColumns) {\n      return deferred.done(() => {\n        this.setStickyOffsets();\n      });\n    }\n    return deferred;\n  }\n  _createCell(options) {\n    const {\n      column: column\n    } = options;\n    const {\n      rowType: rowType\n    } = options;\n    const $cell = super._createCell(options);\n    const hasStickyColumns = this.hasStickyColumns();\n    const rowIndex = \"header\" === rowType ? options.rowIndex : null;\n    const isSummary = \"groupFooter\" === rowType || \"totalFooter\" === rowType || \"group\" === rowType;\n    const isExpandColumn = column.command && \"expand\" === column.command;\n    if (hasStickyColumns && !needToDisableStickyColumn(this._columnsController, column)) {\n      this.updateBorderCellClasses($cell, column, rowIndex);\n      if (column.fixed) {\n        const fixedPosition = getColumnFixedPosition(this._columnsController, column);\n        GridCoreStickyColumnsDom.addStickyColumnClass($cell, fixedPosition, this.addWidgetPrefix.bind(this));\n        if (!isSummary && !isExpandColumn) {\n          switch (fixedPosition) {\n            case StickyPosition.Right:\n              this._addStickyColumnBorderLeftClass($cell, column, rowIndex, false, StickyPosition.Right);\n              break;\n            case StickyPosition.Sticky:\n              this._addStickyColumnBorderLeftClass($cell, column, rowIndex, true);\n              this._addStickyColumnBorderRightClass($cell, column, rowIndex, true);\n              break;\n            default:\n              this._addStickyColumnBorderRightClass($cell, column, rowIndex, false, StickyPosition.Left);\n          }\n        }\n      }\n    }\n    return $cell;\n  }\n  setStickyOffsets(rowIndex, offsets) {\n    const columnsController = this._columnsController;\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    const showColumnHeaders = this.option(\"showColumnHeaders\");\n    let widths = this.getColumnWidths(void 0, rowIndex);\n    let columns = this.getColumns(showColumnHeaders ? rowIndex : void 0);\n    columns = processFixedColumns(this._columnsController, columns);\n    if (rtlEnabled) {\n      columns = rtlEnabled ? [...columns].reverse() : columns;\n      widths = rtlEnabled ? [...widths].reverse() : widths;\n    }\n    columns.forEach((column, columnIndex) => {\n      if (column.fixed) {\n        const visibleColumnIndex = rtlEnabled ? columns.length - columnIndex - 1 : columnIndex;\n        const offset = getStickyOffset(columnsController, columns, widths, columnIndex, offsets);\n        if (offsets) {\n          offsets[column.index] = offset;\n        }\n        const styleProps = normalizeOffset(offset);\n        this.setCellProperties(styleProps, visibleColumnIndex, rowIndex);\n      }\n    });\n  }\n  setColumnWidths(options) {\n    const hasStickyColumns = this.hasStickyColumns();\n    const columnsResizerController = this.getController(\"columnsResizer\");\n    const isColumnResizing = null === columnsResizerController || void 0 === columnsResizerController ? void 0 : columnsResizerController.isResizing();\n    super.setColumnWidths(options);\n    if (hasStickyColumns && isColumnResizing) {\n      this.setStickyOffsets();\n    }\n  }\n  _resizeCore() {\n    const hasStickyColumns = this.hasStickyColumns();\n    const adaptiveColumns = this.getController(\"adaptiveColumns\");\n    const hidingColumnsQueue = null === adaptiveColumns || void 0 === adaptiveColumns ? void 0 : adaptiveColumns.getHidingColumnsQueue();\n    super._resizeCore.apply(this, arguments);\n    if (hasStickyColumns) {\n      this.setStickyOffsets();\n      if (null !== hidingColumnsQueue && void 0 !== hidingColumnsQueue && hidingColumnsQueue.length) {\n        this._updateBorderClasses();\n      }\n    }\n  }\n  hasStickyColumns() {\n    var _this$_columnsControl;\n    const stickyColumns = null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.getStickyColumns();\n    return true !== this.option(\"columnFixing.legacyMode\") && !!stickyColumns.length;\n  }\n};\nconst columnHeadersView = Base => class extends baseStickyColumns(Base) {\n  setStickyOffsets() {\n    const offsets = {};\n    const rows = this._getRows();\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      var _rows$rowIndex;\n      const isFilterRow = \"filter\" === (null === rows || void 0 === rows || null === (_rows$rowIndex = rows[rowIndex]) || void 0 === _rows$rowIndex ? void 0 : _rows$rowIndex.rowType);\n      super.setStickyOffsets(rowIndex, isFilterRow ? void 0 : offsets);\n    }\n  }\n  getContextMenuItems(options) {\n    const {\n      column: column\n    } = options;\n    const columnsController = this._columnsController;\n    const columnFixingOptions = this.option(\"columnFixing\");\n    let items = super.getContextMenuItems(options);\n    if (options.row && \"header\" === options.row.rowType) {\n      if (true === columnFixingOptions.enabled && column && column.allowFixing) {\n        const onItemClick = params => {\n          switch (params.itemData.value) {\n            case \"none\":\n              this._columnsController.columnOption(column.index, \"fixed\", false);\n              break;\n            case \"left\":\n              this._columnsController.columnOption(column.index, {\n                fixed: true,\n                fixedPosition: \"left\"\n              });\n              break;\n            case \"right\":\n              this._columnsController.columnOption(column.index, {\n                fixed: true,\n                fixedPosition: \"right\"\n              });\n              break;\n            case \"sticky\":\n              this._columnsController.columnOption(column.index, {\n                fixed: true,\n                fixedPosition: \"sticky\"\n              });\n          }\n        };\n        const fixedPositionItems = [{\n          text: columnFixingOptions.texts.leftPosition,\n          icon: columnFixingOptions.icons.leftPosition,\n          value: \"left\",\n          disabled: column.fixed && (!column.fixedPosition || \"left\" === column.fixedPosition),\n          onItemClick: onItemClick\n        }, {\n          text: columnFixingOptions.texts.rightPosition,\n          icon: columnFixingOptions.icons.rightPosition,\n          value: \"right\",\n          disabled: column.fixed && \"right\" === column.fixedPosition,\n          onItemClick: onItemClick\n        }];\n        if (true !== this.option(\"columnFixing.legacyMode\") && !columnsController.isVirtualMode()) {\n          fixedPositionItems.push({\n            text: columnFixingOptions.texts.stickyPosition,\n            icon: columnFixingOptions.icons.stickyPosition,\n            value: \"sticky\",\n            disabled: column.fixed && column.fixedPosition === StickyPosition.Sticky,\n            onItemClick: onItemClick\n          });\n        }\n        items = items || [];\n        items.push({\n          text: columnFixingOptions.texts.fix,\n          icon: columnFixingOptions.icons.fix,\n          beginGroup: true,\n          items: fixedPositionItems\n        }, {\n          text: columnFixingOptions.texts.unfix,\n          icon: columnFixingOptions.icons.unfix,\n          value: \"none\",\n          disabled: !column.fixed,\n          onItemClick: onItemClick\n        });\n      }\n    }\n    return items;\n  }\n};\nconst rowsView = Base => class extends baseStickyColumns(Base) {\n  _getMasterDetailWidth() {\n    const componentWidth = getWidth(this.component.$element()) ?? 0;\n    const borderWidth = gridCoreUtils.getComponentBorderWidth(this, this._$element);\n    return componentWidth - borderWidth - this.getScrollbarWidth();\n  }\n  _renderMasterDetailCell($row, row, options) {\n    const $detailCell = super._renderMasterDetailCell($row, row, options);\n    if (this.hasStickyColumns()) {\n      $detailCell.addClass(this.addWidgetPrefix(CLASSES.stickyColumnLeft));\n      setWidth($detailCell, this._getMasterDetailWidth());\n    }\n    return $detailCell;\n  }\n  _updateMasterDetailWidths() {\n    const width = this._getMasterDetailWidth();\n    const $masterDetailCells = this._getRowElements().children(\".dx-master-detail-cell\");\n    setWidth($masterDetailCells, `${width}px`);\n  }\n  setStickyOffsets(rowIndex, offsets) {\n    super.setStickyOffsets(rowIndex, offsets);\n    this.setStickyOffsetsForGroupCells();\n  }\n  setStickyOffsetsForGroupCells() {\n    const groupColumns = this._columnsController.getGroupColumns();\n    let columns = this.getColumns();\n    let widths = this.getColumnWidths();\n    const columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(columns);\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    if (rtlEnabled) {\n      columns = rtlEnabled ? [...columns].reverse() : columns;\n      widths = rtlEnabled ? [...widths].reverse() : widths;\n    }\n    const $tableElement = this.getTableElement();\n    groupColumns.forEach(column => {\n      const columnIndex = columnsCountBeforeGroups + column.groupIndex + 1;\n      const visibleColumnIndex = rtlEnabled ? columns.length - columnIndex - 1 : columnIndex;\n      const offset = getStickyOffset(this._columnsController, columns, widths, visibleColumnIndex);\n      const styleProps = normalizeOffset(offset);\n      const $cells = $tableElement.children().children(\".dx-group-row\").find(`.dx-group-cell[aria-colindex='${columnIndex + 1}']`);\n      for (let i = 0; i < $cells.length; i += 1) {\n        const cell = $cells.get(i);\n        const container = $(cell).find(\".dx-datagrid-group-row-container\").get(0);\n        Object.assign(cell.style, styleProps);\n        Object.assign(container.style, styleProps);\n      }\n    });\n  }\n  _resizeCore() {\n    const hasStickyColumns = this.hasStickyColumns();\n    super._resizeCore.apply(this, arguments);\n    if (hasStickyColumns) {\n      this._updateMasterDetailWidths();\n    }\n  }\n  _renderCellContent($cell, options, renderOptions) {\n    if (!isGroupRow(options) || !this.hasStickyColumns()) {\n      return super._renderCellContent($cell, options, renderOptions);\n    }\n    const $container = $(\"<div>\").addClass(this.addWidgetPrefix(CLASSES.groupRowContainer)).appendTo($cell);\n    return super._renderCellContent($container, options, renderOptions);\n  }\n  _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n    super._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n    const stickySummarySelector = `.${this.addWidgetPrefix(CLASSES.stickyColumn)}`;\n    if ($groupCell.parent().find(stickySummarySelector).length && GridCoreStickyColumnsDom.doesGroupCellEndInFirstColumn($groupCell)) {\n      GridCoreStickyColumnsDom.addStickyColumnBorderRightClass($groupCell, this.addWidgetPrefix.bind(this));\n    }\n  }\n  _handleScroll(e) {\n    const hasStickyColumns = this.hasStickyColumns();\n    super._handleScroll(e);\n    if (hasStickyColumns) {\n      const editorFactoryController = this.getController(\"editorFactory\");\n      const hasOverlayElements = editorFactoryController.hasOverlayElements();\n      if (hasOverlayElements) {\n        const $focusedElement = editorFactoryController.focus();\n        editorFactoryController.focus($focusedElement);\n      }\n    }\n  }\n  _scrollToElement($element, offset) {\n    let scrollOffset = offset;\n    const scrollable = this.getScrollable();\n    const hasStickyColumns = this.hasStickyColumns();\n    if (hasStickyColumns && scrollable) {\n      const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));\n      if (!$element.is(\"td\") || isFixedCell) {\n        return;\n      }\n      const $row = null === $element || void 0 === $element ? void 0 : $element.closest(\"tr\");\n      const $cells = null === $row || void 0 === $row ? void 0 : $row.children();\n      scrollOffset = GridCoreStickyColumnsDom.getScrollPadding($cells, $(scrollable.container()), this.addWidgetPrefix.bind(this));\n    }\n    super._scrollToElement($element, scrollOffset);\n  }\n};\nconst footerView = Base => class extends baseStickyColumns(Base) {};\nconst columnsResizer = Base => class extends Base {\n  getSeparatorOffsetX($cell) {\n    var _this$_columnHeadersV;\n    const hasStickyColumns = null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.hasStickyColumns();\n    if (hasStickyColumns) {\n      const $container = $(this._columnHeadersView.getContent());\n      const isFixedCellPinnedToRight = GridCoreStickyColumnsDom.isFixedCellPinnedToRight($cell, $container, this.addWidgetPrefix.bind(this));\n      const isWidgetResizingMode = \"widget\" === this.option(\"columnResizingMode\");\n      if (isWidgetResizingMode && isFixedCellPinnedToRight) {\n        var _$cell$offset;\n        return (null === (_$cell$offset = $cell.offset()) || void 0 === _$cell$offset ? void 0 : _$cell$offset.left) ?? 0;\n      }\n    }\n    return super.getSeparatorOffsetX($cell);\n  }\n  _correctColumnIndexForPoint(point, correctionValue, columns) {\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    const isWidgetResizingMode = \"widget\" === this.option(\"columnResizingMode\");\n    const columnIndex = Math.max(point.index - 1, 0);\n    const column = columns[columnIndex];\n    const nextColumnIndex = this._getNextColumnIndex(columnIndex);\n    const nextColumn = columns[nextColumnIndex];\n    if (isWidgetResizingMode && !isFixedEdge(point, column, nextColumn)) {\n      const $container = $(this._columnHeadersView.getContent());\n      const isFixedCellPinnedToRight = GridCoreStickyColumnsDom.isFixedCellPinnedToRight($(point.item), $container, this.addWidgetPrefix.bind(this));\n      if (isFixedCellPinnedToRight) {\n        point.columnIndex -= rtlEnabled ? 1 : 0;\n        return;\n      }\n    }\n    super._correctColumnIndexForPoint(point, correctionValue, columns);\n  }\n  _needToInvertResizing($cell) {\n    const result = super._needToInvertResizing($cell);\n    const isWidgetResizingMode = \"widget\" === this.option(\"columnResizingMode\");\n    if (!result && isWidgetResizingMode) {\n      const $container = $(this._columnHeadersView.getContent());\n      return GridCoreStickyColumnsDom.isFixedCellPinnedToRight($cell, $container, this.addWidgetPrefix.bind(this));\n    }\n    return result;\n  }\n  _generatePointsByColumns() {\n    var _this$_columnHeadersV2;\n    const hasStickyColumns = null === (_this$_columnHeadersV2 = this._columnHeadersView) || void 0 === _this$_columnHeadersV2 ? void 0 : _this$_columnHeadersV2.hasStickyColumns();\n    super._generatePointsByColumns(hasStickyColumns);\n  }\n  _pointCreated(point, cellsLength, columns) {\n    var _this$_columnHeadersV3;\n    const hasStickyColumns = null === (_this$_columnHeadersV3 = this._columnHeadersView) || void 0 === _this$_columnHeadersV3 ? void 0 : _this$_columnHeadersV3.hasStickyColumns();\n    const result = super._pointCreated(point, cellsLength, columns);\n    const needToCheckPoint = hasStickyColumns && cellsLength > 0;\n    if (needToCheckPoint && !result) {\n      const column = columns[point.index - 1];\n      const nextColumnIndex = this._getNextColumnIndex(point.index - 1);\n      const nextColumn = columns[nextColumnIndex];\n      return GridCoreStickyColumnsDom.noNeedToCreateResizingPoint(this._columnHeadersView, {\n        point: point,\n        column: column,\n        nextColumn: nextColumn\n      }, this.addWidgetPrefix.bind(this));\n    }\n    return result;\n  }\n};\nconst draggingHeader = Base => class extends Base {\n  _generatePointsByColumns(options) {\n    var _this$_columnHeadersV4;\n    const hasStickyColumns = null === (_this$_columnHeadersV4 = this._columnHeadersView) || void 0 === _this$_columnHeadersV4 ? void 0 : _this$_columnHeadersV4.hasStickyColumns();\n    const {\n      sourceLocation: sourceLocation,\n      sourceColumn: sourceColumn,\n      targetDraggingPanel: targetDraggingPanel\n    } = options;\n    const isDraggingBetweenHeaders = \"headers\" === sourceLocation && \"headers\" === (null === targetDraggingPanel || void 0 === targetDraggingPanel ? void 0 : targetDraggingPanel.getName());\n    if (hasStickyColumns && isDraggingBetweenHeaders) {\n      const columnFixedPosition = getColumnFixedPosition(this._columnsController, sourceColumn);\n      switch (true) {\n        case sourceColumn.fixed && columnFixedPosition === StickyPosition.Left:\n          options.columnElements = GridCoreStickyColumnsDom.getLeftFixedCells(options.columnElements, this.addWidgetPrefix.bind(this));\n          options.startColumnIndex = options.columnElements.eq(0).index();\n          break;\n        case sourceColumn.fixed && columnFixedPosition === StickyPosition.Right:\n          options.columnElements = GridCoreStickyColumnsDom.getRightFixedCells(options.columnElements, this.addWidgetPrefix.bind(this));\n          options.startColumnIndex = options.columnElements.eq(0).index();\n          break;\n        default:\n          options.columnElements = GridCoreStickyColumnsDom.getNonFixedAndStickyCells(options.columnElements, this.addWidgetPrefix.bind(this));\n          options.startColumnIndex = options.columnElements.eq(0).index();\n      }\n    }\n    return super._generatePointsByColumns(options, hasStickyColumns);\n  }\n  _pointCreated(point, columns, location, sourceColumn) {\n    const hasStickyColumns = this._columnHeadersView.hasStickyColumns();\n    const $cells = this._columnHeadersView.getColumnElements();\n    const needToCheckPoint = hasStickyColumns && \"headers\" === location && (null === $cells || void 0 === $cells ? void 0 : $cells.length) && (!sourceColumn.fixed || sourceColumn.fixedPosition === StickyPosition.Sticky);\n    const result = super._pointCreated(point, columns, location, sourceColumn);\n    if (needToCheckPoint && !result) {\n      return GridCoreStickyColumnsDom.noNeedToCreateReorderingPoint(point, $cells, $(this._columnHeadersView.getContent()), this.addWidgetPrefix.bind(this));\n    }\n    return result;\n  }\n};\nconst editorFactory = Base => class extends Base {\n  getOverlayContainerIfNeeded($cell) {\n    const hasFixedColumns = this._rowsView.hasStickyColumns();\n    const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($cell, this.addWidgetPrefix.bind(this));\n    if (hasFixedColumns && isFixedCell) {\n      return $cell.closest(`.${this.addWidgetPrefix(CLASSES.stickyColumns)}`);\n    }\n    return;\n  }\n  updateFocusOverlaySize($element, position) {\n    const hasFixedColumns = this._rowsView.hasStickyColumns();\n    if (!hasFixedColumns) {\n      super.updateFocusOverlaySize($element, position);\n    }\n  }\n  getFocusOverlaySize($element) {\n    const hasFixedColumns = this._rowsView.hasStickyColumns();\n    if (hasFixedColumns) {\n      const elementRect = getBoundingRect($element.get(0));\n      const isLastCell = GridCoreStickyColumnsDom.isLastCell($element);\n      const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));\n      return {\n        width: elementRect.right - elementRect.left + (isLastCell || isFixedCell ? 0 : 1),\n        height: elementRect.bottom - elementRect.top\n      };\n    }\n    return super.getFocusOverlaySize($element);\n  }\n  getValidationMessageContainer($cell) {\n    return this.getOverlayContainerIfNeeded($cell) ?? super.getValidationMessageContainer($cell);\n  }\n  getRevertButtonContainer($cell) {\n    return this.getOverlayContainerIfNeeded($cell) ?? super.getRevertButtonContainer($cell);\n  }\n  getFocusOverlayContainer($focusedElement) {\n    return this.getOverlayContainerIfNeeded($focusedElement) ?? super.getFocusOverlayContainer($focusedElement);\n  }\n  overlayPositionedHandler(e, isOverlayVisible) {\n    const columnHeaders = this.getView(\"columnHeadersView\");\n    const hasStickyColumns = columnHeaders.hasStickyColumns();\n    super.overlayPositionedHandler(e, isOverlayVisible);\n    if (hasStickyColumns) {\n      const $cell = $(e.element).closest(\"td\");\n      if (!GridCoreStickyColumnsDom.isFixedCell($cell, this.addWidgetPrefix.bind(this))) {\n        const $wrapper = e.component.$wrapper();\n        const $overlayContent = e.component.$content();\n        const isOutsideVisibleArea = GridCoreStickyColumnsDom.isOutsideVisibleArea($overlayContent, $(columnHeaders.getColumnElements()), $(columnHeaders.getContent()), this.addWidgetPrefix.bind(this));\n        $wrapper.css(\"zIndex\", isOutsideVisibleArea ? 1 : (null === this || void 0 === this ? void 0 : this.getOverlayBaseZIndex()) ?? 0);\n      }\n    }\n  }\n  updateFocusOverlay($element) {\n    let isHideBorder = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    if (!isHideBorder) {\n      const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));\n      this._$focusOverlay.toggleClass(CLASSES.focusedFixedElement, isFixedCell);\n      const isGroupElement = isGroupRowElement($element);\n      const isGroupFooterRowElement = isGroupFooterRow($element);\n      const isAdaptiveElement = isAdaptiveItem($element);\n      if (isFixedCell || isGroupElement || isGroupFooterRowElement || isAdaptiveElement) {\n        this._$focusOverlay.toggleClass(CLASSES.focusedFixedElement, true);\n      }\n    }\n    super.updateFocusOverlay($element, isHideBorder);\n  }\n};\nconst resizing = Base => class extends Base {\n  resize() {\n    const result = super.resize();\n    const hasStickyColumns = this._columnHeadersView.hasStickyColumns();\n    if (hasStickyColumns && null !== this && void 0 !== this && this.hasResizeTimeout()) {\n      this._rowsView.setStickyOffsets();\n    }\n    return result;\n  }\n};\nconst keyboardNavigation = Base => class extends Base {\n  headerTabKeyHandler(_ref) {\n    var _this$_columnHeadersV5, _this$_rowsView;\n    let {\n      originalEvent: originalEvent,\n      shift: shift\n    } = _ref;\n    const hasStickyColumns = null === (_this$_columnHeadersV5 = this._columnHeadersView) || void 0 === _this$_columnHeadersV5 ? void 0 : _this$_columnHeadersV5.hasStickyColumns();\n    const scrollable = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.getScrollable();\n    if (hasStickyColumns && scrollable) {\n      const $cell = $(originalEvent.target).closest(\"td\");\n      const $nextCell = GridCoreStickyColumnsDom.getNextHeaderCell($cell, shift ? \"previous\" : \"next\");\n      const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($nextCell, this.addWidgetPrefix.bind(this));\n      if ($nextCell.length && !isFixedCell) {\n        const $cells = $(this._columnHeadersView.getColumnElements());\n        const cellIsOutsideVisibleArea = GridCoreStickyColumnsDom.isOutsideVisibleArea($nextCell, $cells, $(this._columnHeadersView.getContent()), this.addWidgetPrefix.bind(this));\n        if (cellIsOutsideVisibleArea) {\n          const scrollPadding = GridCoreStickyColumnsDom.getScrollPadding($cells, $(scrollable.container()), this.addWidgetPrefix.bind(this));\n          const scrollPosition = getElementLocationInternal($nextCell[0], \"horizontal\", $(this._columnHeadersView.getContent())[0], scrollable.scrollOffset(), scrollPadding, this.addWidgetPrefix(\"table\"));\n          scrollable.scrollTo({\n            x: scrollPosition\n          });\n        }\n      }\n    }\n  }\n};\nexport const stickyColumnsModule = {\n  extenders: {\n    views: {\n      columnHeadersView: columnHeadersView,\n      rowsView: rowsView,\n      footerView: footerView\n    },\n    controllers: {\n      columnsResizer: columnsResizer,\n      draggingHeader: draggingHeader,\n      editorFactory: editorFactory,\n      resizing: resizing,\n      keyboardNavigation: keyboardNavigation\n    }\n  }\n};","map":{"version":3,"names":["$","getBoundingRect","getWidth","setWidth","getElementLocationInternal","HIDDEN_COLUMNS_WIDTH","isAdaptiveItem","isGroupFooterRow","isGroupRow","isGroupRowElement","gridCoreUtils","CLASSES","MASTER_DETAIL_CLASSES","StickyPosition","GridCoreStickyColumnsDom","getColumnFixedPosition","getStickyOffset","isFirstFixedColumn","isFixedEdge","isLastFixedColumn","needToDisableStickyColumn","needToRemoveColumnBorder","normalizeOffset","processFixedColumns","baseStickyColumns","Base","_addStickyColumnBorderLeftClass","$cell","column","rowIndex","onlyWithinBandColumn","arguments","length","fixedPosition","isFirstFixedCell","_columnsController","addStickyColumnBorderLeftClass","addWidgetPrefix","bind","_addStickyColumnBorderRightClass","isLastFixedCell","addStickyColumnBorderRightClass","updateBorderCellClasses","columnsController","isRowsView","name","needToRemoveBorder","isFirstColumn","toggleColumnNoBorderClass","toggleFirstHeaderClass","_updateBorderClasses","isColumnHeadersView","$rows","_getRowElementsCore","not","detailRow","toArray","forEach","row","index","$cells","children","columns","getColumns","cell","cellIndex","visibleWidth","_renderCore","options","deferred","$element","element","hasStickyColumns","toggleStickyColumnsClass","done","setStickyOffsets","_createCell","rowType","isSummary","isExpandColumn","command","fixed","addStickyColumnClass","Right","Sticky","Left","offsets","rtlEnabled","option","showColumnHeaders","widths","getColumnWidths","reverse","columnIndex","visibleColumnIndex","offset","styleProps","setCellProperties","setColumnWidths","columnsResizerController","getController","isColumnResizing","isResizing","_resizeCore","adaptiveColumns","hidingColumnsQueue","getHidingColumnsQueue","apply","_this$_columnsControl","stickyColumns","getStickyColumns","columnHeadersView","rows","_getRows","_rows$rowIndex","isFilterRow","getContextMenuItems","columnFixingOptions","items","enabled","allowFixing","onItemClick","params","itemData","value","columnOption","fixedPositionItems","text","texts","leftPosition","icon","icons","disabled","rightPosition","isVirtualMode","push","stickyPosition","fix","beginGroup","unfix","rowsView","_getMasterDetailWidth","componentWidth","component","borderWidth","getComponentBorderWidth","_$element","getScrollbarWidth","_renderMasterDetailCell","$row","$detailCell","addClass","stickyColumnLeft","_updateMasterDetailWidths","width","$masterDetailCells","_getRowElements","setStickyOffsetsForGroupCells","groupColumns","getGroupColumns","columnsCountBeforeGroups","_getColumnsCountBeforeGroups","$tableElement","getTableElement","groupIndex","find","i","get","container","Object","assign","style","_renderCellContent","renderOptions","$container","groupRowContainer","appendTo","_renderGroupSummaryCellsCore","$groupCell","groupCellColSpan","alignByColumnCellCount","stickySummarySelector","stickyColumn","parent","doesGroupCellEndInFirstColumn","_handleScroll","e","editorFactoryController","hasOverlayElements","$focusedElement","focus","_scrollToElement","scrollOffset","scrollable","getScrollable","isFixedCell","is","closest","getScrollPadding","footerView","columnsResizer","getSeparatorOffsetX","_this$_columnHeadersV","_columnHeadersView","getContent","isFixedCellPinnedToRight","isWidgetResizingMode","_$cell$offset","left","_correctColumnIndexForPoint","point","correctionValue","Math","max","nextColumnIndex","_getNextColumnIndex","nextColumn","item","_needToInvertResizing","result","_generatePointsByColumns","_this$_columnHeadersV2","_pointCreated","cellsLength","_this$_columnHeadersV3","needToCheckPoint","noNeedToCreateResizingPoint","draggingHeader","_this$_columnHeadersV4","sourceLocation","sourceColumn","targetDraggingPanel","isDraggingBetweenHeaders","getName","columnFixedPosition","columnElements","getLeftFixedCells","startColumnIndex","eq","getRightFixedCells","getNonFixedAndStickyCells","location","getColumnElements","noNeedToCreateReorderingPoint","editorFactory","getOverlayContainerIfNeeded","hasFixedColumns","_rowsView","updateFocusOverlaySize","position","getFocusOverlaySize","elementRect","isLastCell","right","height","bottom","top","getValidationMessageContainer","getRevertButtonContainer","getFocusOverlayContainer","overlayPositionedHandler","isOverlayVisible","columnHeaders","getView","$wrapper","$overlayContent","$content","isOutsideVisibleArea","css","getOverlayBaseZIndex","updateFocusOverlay","isHideBorder","_$focusOverlay","toggleClass","focusedFixedElement","isGroupElement","isGroupFooterRowElement","isAdaptiveElement","resizing","resize","hasResizeTimeout","keyboardNavigation","headerTabKeyHandler","_ref","_this$_columnHeadersV5","_this$_rowsView","originalEvent","shift","target","$nextCell","getNextHeaderCell","cellIsOutsideVisibleArea","scrollPadding","scrollPosition","scrollTo","x","stickyColumnsModule","extenders","views","controllers"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/sticky_columns/m_sticky_columns.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/sticky_columns/m_sticky_columns.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    getWidth,\r\n    setWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    getElementLocationInternal\r\n} from \"../../../ui/scroll_view/utils/get_element_location_internal\";\r\nimport {\r\n    HIDDEN_COLUMNS_WIDTH\r\n} from \"../adaptivity/const\";\r\nimport {\r\n    isAdaptiveItem,\r\n    isGroupFooterRow,\r\n    isGroupRow as isGroupRowElement\r\n} from \"../keyboard_navigation/m_keyboard_navigation_utils\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    CLASSES as MASTER_DETAIL_CLASSES\r\n} from \"../master_detail/const\";\r\nimport {\r\n    isGroupRow\r\n} from \"../views/m_rows_view\";\r\nimport {\r\n    CLASSES,\r\n    StickyPosition\r\n} from \"./const\";\r\nimport {\r\n    GridCoreStickyColumnsDom\r\n} from \"./dom\";\r\nimport {\r\n    getColumnFixedPosition,\r\n    getStickyOffset,\r\n    isFirstFixedColumn,\r\n    isFixedEdge,\r\n    isLastFixedColumn,\r\n    needToDisableStickyColumn,\r\n    needToRemoveColumnBorder,\r\n    normalizeOffset,\r\n    processFixedColumns\r\n} from \"./utils\";\r\nconst baseStickyColumns = Base => class extends Base {\r\n    _addStickyColumnBorderLeftClass($cell, column, rowIndex) {\r\n        let onlyWithinBandColumn = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;\r\n        let fixedPosition = arguments.length > 4 ? arguments[4] : void 0;\r\n        const isFirstFixedCell = isFirstFixedColumn(this._columnsController, column, rowIndex, onlyWithinBandColumn, fixedPosition);\r\n        if (isFirstFixedCell) {\r\n            GridCoreStickyColumnsDom.addStickyColumnBorderLeftClass($cell, this.addWidgetPrefix.bind(this))\r\n        }\r\n    }\r\n    _addStickyColumnBorderRightClass($cell, column, rowIndex) {\r\n        let onlyWithinBandColumn = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : false;\r\n        let fixedPosition = arguments.length > 4 ? arguments[4] : void 0;\r\n        const isLastFixedCell = isLastFixedColumn(this._columnsController, column, rowIndex, onlyWithinBandColumn, fixedPosition);\r\n        if (isLastFixedCell) {\r\n            GridCoreStickyColumnsDom.addStickyColumnBorderRightClass($cell, this.addWidgetPrefix.bind(this))\r\n        }\r\n    }\r\n    updateBorderCellClasses($cell, column, rowIndex) {\r\n        const columnsController = this._columnsController;\r\n        const isRowsView = \"rowsView\" === this.name;\r\n        const needToRemoveBorder = needToRemoveColumnBorder(columnsController, column, rowIndex, isRowsView);\r\n        const isFirstColumn = null === columnsController || void 0 === columnsController ? void 0 : columnsController.isFirstColumn(column, rowIndex);\r\n        GridCoreStickyColumnsDom.toggleColumnNoBorderClass($cell, needToRemoveBorder, this.addWidgetPrefix.bind(this));\r\n        GridCoreStickyColumnsDom.toggleFirstHeaderClass($cell, isFirstColumn, this.addWidgetPrefix.bind(this))\r\n    }\r\n    _updateBorderClasses() {\r\n        const isColumnHeadersView = \"columnHeadersView\" === this.name;\r\n        const $rows = this._getRowElementsCore().not(`.${MASTER_DETAIL_CLASSES.detailRow}`).toArray();\r\n        $rows.forEach(((row, index) => {\r\n            const rowIndex = isColumnHeadersView ? index : null;\r\n            const $cells = $(row).children(\"td\").toArray();\r\n            let columns = this.getColumns(rowIndex);\r\n            columns = processFixedColumns(this._columnsController, columns);\r\n            $cells.forEach(((cell, cellIndex) => {\r\n                const $cell = $(cell);\r\n                const column = columns[cellIndex];\r\n                if (column.visibleWidth !== HIDDEN_COLUMNS_WIDTH) {\r\n                    this.updateBorderCellClasses($cell, column, rowIndex)\r\n                }\r\n            }))\r\n        }))\r\n    }\r\n    _renderCore(options) {\r\n        const deferred = super._renderCore(options);\r\n        const $element = this.element();\r\n        const hasStickyColumns = this.hasStickyColumns();\r\n        GridCoreStickyColumnsDom.toggleStickyColumnsClass($element, hasStickyColumns, this.addWidgetPrefix.bind(this));\r\n        if (hasStickyColumns) {\r\n            return deferred.done((() => {\r\n                this.setStickyOffsets()\r\n            }))\r\n        }\r\n        return deferred\r\n    }\r\n    _createCell(options) {\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const {\r\n            rowType: rowType\r\n        } = options;\r\n        const $cell = super._createCell(options);\r\n        const hasStickyColumns = this.hasStickyColumns();\r\n        const rowIndex = \"header\" === rowType ? options.rowIndex : null;\r\n        const isSummary = \"groupFooter\" === rowType || \"totalFooter\" === rowType || \"group\" === rowType;\r\n        const isExpandColumn = column.command && \"expand\" === column.command;\r\n        if (hasStickyColumns && !needToDisableStickyColumn(this._columnsController, column)) {\r\n            this.updateBorderCellClasses($cell, column, rowIndex);\r\n            if (column.fixed) {\r\n                const fixedPosition = getColumnFixedPosition(this._columnsController, column);\r\n                GridCoreStickyColumnsDom.addStickyColumnClass($cell, fixedPosition, this.addWidgetPrefix.bind(this));\r\n                if (!isSummary && !isExpandColumn) {\r\n                    switch (fixedPosition) {\r\n                        case StickyPosition.Right:\r\n                            this._addStickyColumnBorderLeftClass($cell, column, rowIndex, false, StickyPosition.Right);\r\n                            break;\r\n                        case StickyPosition.Sticky:\r\n                            this._addStickyColumnBorderLeftClass($cell, column, rowIndex, true);\r\n                            this._addStickyColumnBorderRightClass($cell, column, rowIndex, true);\r\n                            break;\r\n                        default:\r\n                            this._addStickyColumnBorderRightClass($cell, column, rowIndex, false, StickyPosition.Left)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return $cell\r\n    }\r\n    setStickyOffsets(rowIndex, offsets) {\r\n        const columnsController = this._columnsController;\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        const showColumnHeaders = this.option(\"showColumnHeaders\");\r\n        let widths = this.getColumnWidths(void 0, rowIndex);\r\n        let columns = this.getColumns(showColumnHeaders ? rowIndex : void 0);\r\n        columns = processFixedColumns(this._columnsController, columns);\r\n        if (rtlEnabled) {\r\n            columns = rtlEnabled ? [...columns].reverse() : columns;\r\n            widths = rtlEnabled ? [...widths].reverse() : widths\r\n        }\r\n        columns.forEach(((column, columnIndex) => {\r\n            if (column.fixed) {\r\n                const visibleColumnIndex = rtlEnabled ? columns.length - columnIndex - 1 : columnIndex;\r\n                const offset = getStickyOffset(columnsController, columns, widths, columnIndex, offsets);\r\n                if (offsets) {\r\n                    offsets[column.index] = offset\r\n                }\r\n                const styleProps = normalizeOffset(offset);\r\n                this.setCellProperties(styleProps, visibleColumnIndex, rowIndex)\r\n            }\r\n        }))\r\n    }\r\n    setColumnWidths(options) {\r\n        const hasStickyColumns = this.hasStickyColumns();\r\n        const columnsResizerController = this.getController(\"columnsResizer\");\r\n        const isColumnResizing = null === columnsResizerController || void 0 === columnsResizerController ? void 0 : columnsResizerController.isResizing();\r\n        super.setColumnWidths(options);\r\n        if (hasStickyColumns && isColumnResizing) {\r\n            this.setStickyOffsets()\r\n        }\r\n    }\r\n    _resizeCore() {\r\n        const hasStickyColumns = this.hasStickyColumns();\r\n        const adaptiveColumns = this.getController(\"adaptiveColumns\");\r\n        const hidingColumnsQueue = null === adaptiveColumns || void 0 === adaptiveColumns ? void 0 : adaptiveColumns.getHidingColumnsQueue();\r\n        super._resizeCore.apply(this, arguments);\r\n        if (hasStickyColumns) {\r\n            this.setStickyOffsets();\r\n            if (null !== hidingColumnsQueue && void 0 !== hidingColumnsQueue && hidingColumnsQueue.length) {\r\n                this._updateBorderClasses()\r\n            }\r\n        }\r\n    }\r\n    hasStickyColumns() {\r\n        var _this$_columnsControl;\r\n        const stickyColumns = null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.getStickyColumns();\r\n        return true !== this.option(\"columnFixing.legacyMode\") && !!stickyColumns.length\r\n    }\r\n};\r\nconst columnHeadersView = Base => class extends(baseStickyColumns(Base)) {\r\n    setStickyOffsets() {\r\n        const offsets = {};\r\n        const rows = this._getRows();\r\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n            var _rows$rowIndex;\r\n            const isFilterRow = \"filter\" === (null === rows || void 0 === rows || null === (_rows$rowIndex = rows[rowIndex]) || void 0 === _rows$rowIndex ? void 0 : _rows$rowIndex.rowType);\r\n            super.setStickyOffsets(rowIndex, isFilterRow ? void 0 : offsets)\r\n        }\r\n    }\r\n    getContextMenuItems(options) {\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const columnsController = this._columnsController;\r\n        const columnFixingOptions = this.option(\"columnFixing\");\r\n        let items = super.getContextMenuItems(options);\r\n        if (options.row && \"header\" === options.row.rowType) {\r\n            if (true === columnFixingOptions.enabled && column && column.allowFixing) {\r\n                const onItemClick = params => {\r\n                    switch (params.itemData.value) {\r\n                        case \"none\":\r\n                            this._columnsController.columnOption(column.index, \"fixed\", false);\r\n                            break;\r\n                        case \"left\":\r\n                            this._columnsController.columnOption(column.index, {\r\n                                fixed: true,\r\n                                fixedPosition: \"left\"\r\n                            });\r\n                            break;\r\n                        case \"right\":\r\n                            this._columnsController.columnOption(column.index, {\r\n                                fixed: true,\r\n                                fixedPosition: \"right\"\r\n                            });\r\n                            break;\r\n                        case \"sticky\":\r\n                            this._columnsController.columnOption(column.index, {\r\n                                fixed: true,\r\n                                fixedPosition: \"sticky\"\r\n                            })\r\n                    }\r\n                };\r\n                const fixedPositionItems = [{\r\n                    text: columnFixingOptions.texts.leftPosition,\r\n                    icon: columnFixingOptions.icons.leftPosition,\r\n                    value: \"left\",\r\n                    disabled: column.fixed && (!column.fixedPosition || \"left\" === column.fixedPosition),\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: columnFixingOptions.texts.rightPosition,\r\n                    icon: columnFixingOptions.icons.rightPosition,\r\n                    value: \"right\",\r\n                    disabled: column.fixed && \"right\" === column.fixedPosition,\r\n                    onItemClick: onItemClick\r\n                }];\r\n                if (true !== this.option(\"columnFixing.legacyMode\") && !columnsController.isVirtualMode()) {\r\n                    fixedPositionItems.push({\r\n                        text: columnFixingOptions.texts.stickyPosition,\r\n                        icon: columnFixingOptions.icons.stickyPosition,\r\n                        value: \"sticky\",\r\n                        disabled: column.fixed && column.fixedPosition === StickyPosition.Sticky,\r\n                        onItemClick: onItemClick\r\n                    })\r\n                }\r\n                items = items || [];\r\n                items.push({\r\n                    text: columnFixingOptions.texts.fix,\r\n                    icon: columnFixingOptions.icons.fix,\r\n                    beginGroup: true,\r\n                    items: fixedPositionItems\r\n                }, {\r\n                    text: columnFixingOptions.texts.unfix,\r\n                    icon: columnFixingOptions.icons.unfix,\r\n                    value: \"none\",\r\n                    disabled: !column.fixed,\r\n                    onItemClick: onItemClick\r\n                })\r\n            }\r\n        }\r\n        return items\r\n    }\r\n};\r\nconst rowsView = Base => class extends(baseStickyColumns(Base)) {\r\n    _getMasterDetailWidth() {\r\n        const componentWidth = getWidth(this.component.$element()) ?? 0;\r\n        const borderWidth = gridCoreUtils.getComponentBorderWidth(this, this._$element);\r\n        return componentWidth - borderWidth - this.getScrollbarWidth()\r\n    }\r\n    _renderMasterDetailCell($row, row, options) {\r\n        const $detailCell = super._renderMasterDetailCell($row, row, options);\r\n        if (this.hasStickyColumns()) {\r\n            $detailCell.addClass(this.addWidgetPrefix(CLASSES.stickyColumnLeft));\r\n            setWidth($detailCell, this._getMasterDetailWidth())\r\n        }\r\n        return $detailCell\r\n    }\r\n    _updateMasterDetailWidths() {\r\n        const width = this._getMasterDetailWidth();\r\n        const $masterDetailCells = this._getRowElements().children(\".dx-master-detail-cell\");\r\n        setWidth($masterDetailCells, `${width}px`)\r\n    }\r\n    setStickyOffsets(rowIndex, offsets) {\r\n        super.setStickyOffsets(rowIndex, offsets);\r\n        this.setStickyOffsetsForGroupCells()\r\n    }\r\n    setStickyOffsetsForGroupCells() {\r\n        const groupColumns = this._columnsController.getGroupColumns();\r\n        let columns = this.getColumns();\r\n        let widths = this.getColumnWidths();\r\n        const columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(columns);\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        if (rtlEnabled) {\r\n            columns = rtlEnabled ? [...columns].reverse() : columns;\r\n            widths = rtlEnabled ? [...widths].reverse() : widths\r\n        }\r\n        const $tableElement = this.getTableElement();\r\n        groupColumns.forEach((column => {\r\n            const columnIndex = columnsCountBeforeGroups + column.groupIndex + 1;\r\n            const visibleColumnIndex = rtlEnabled ? columns.length - columnIndex - 1 : columnIndex;\r\n            const offset = getStickyOffset(this._columnsController, columns, widths, visibleColumnIndex);\r\n            const styleProps = normalizeOffset(offset);\r\n            const $cells = $tableElement.children().children(\".dx-group-row\").find(`.dx-group-cell[aria-colindex='${columnIndex+1}']`);\r\n            for (let i = 0; i < $cells.length; i += 1) {\r\n                const cell = $cells.get(i);\r\n                const container = $(cell).find(\".dx-datagrid-group-row-container\").get(0);\r\n                Object.assign(cell.style, styleProps);\r\n                Object.assign(container.style, styleProps)\r\n            }\r\n        }))\r\n    }\r\n    _resizeCore() {\r\n        const hasStickyColumns = this.hasStickyColumns();\r\n        super._resizeCore.apply(this, arguments);\r\n        if (hasStickyColumns) {\r\n            this._updateMasterDetailWidths()\r\n        }\r\n    }\r\n    _renderCellContent($cell, options, renderOptions) {\r\n        if (!isGroupRow(options) || !this.hasStickyColumns()) {\r\n            return super._renderCellContent($cell, options, renderOptions)\r\n        }\r\n        const $container = $(\"<div>\").addClass(this.addWidgetPrefix(CLASSES.groupRowContainer)).appendTo($cell);\r\n        return super._renderCellContent($container, options, renderOptions)\r\n    }\r\n    _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\r\n        super._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\r\n        const stickySummarySelector = `.${this.addWidgetPrefix(CLASSES.stickyColumn)}`;\r\n        if ($groupCell.parent().find(stickySummarySelector).length && GridCoreStickyColumnsDom.doesGroupCellEndInFirstColumn($groupCell)) {\r\n            GridCoreStickyColumnsDom.addStickyColumnBorderRightClass($groupCell, this.addWidgetPrefix.bind(this))\r\n        }\r\n    }\r\n    _handleScroll(e) {\r\n        const hasStickyColumns = this.hasStickyColumns();\r\n        super._handleScroll(e);\r\n        if (hasStickyColumns) {\r\n            const editorFactoryController = this.getController(\"editorFactory\");\r\n            const hasOverlayElements = editorFactoryController.hasOverlayElements();\r\n            if (hasOverlayElements) {\r\n                const $focusedElement = editorFactoryController.focus();\r\n                editorFactoryController.focus($focusedElement)\r\n            }\r\n        }\r\n    }\r\n    _scrollToElement($element, offset) {\r\n        let scrollOffset = offset;\r\n        const scrollable = this.getScrollable();\r\n        const hasStickyColumns = this.hasStickyColumns();\r\n        if (hasStickyColumns && scrollable) {\r\n            const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));\r\n            if (!$element.is(\"td\") || isFixedCell) {\r\n                return\r\n            }\r\n            const $row = null === $element || void 0 === $element ? void 0 : $element.closest(\"tr\");\r\n            const $cells = null === $row || void 0 === $row ? void 0 : $row.children();\r\n            scrollOffset = GridCoreStickyColumnsDom.getScrollPadding($cells, $(scrollable.container()), this.addWidgetPrefix.bind(this))\r\n        }\r\n        super._scrollToElement($element, scrollOffset)\r\n    }\r\n};\r\nconst footerView = Base => class extends(baseStickyColumns(Base)) {};\r\nconst columnsResizer = Base => class extends Base {\r\n    getSeparatorOffsetX($cell) {\r\n        var _this$_columnHeadersV;\r\n        const hasStickyColumns = null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.hasStickyColumns();\r\n        if (hasStickyColumns) {\r\n            const $container = $(this._columnHeadersView.getContent());\r\n            const isFixedCellPinnedToRight = GridCoreStickyColumnsDom.isFixedCellPinnedToRight($cell, $container, this.addWidgetPrefix.bind(this));\r\n            const isWidgetResizingMode = \"widget\" === this.option(\"columnResizingMode\");\r\n            if (isWidgetResizingMode && isFixedCellPinnedToRight) {\r\n                var _$cell$offset;\r\n                return (null === (_$cell$offset = $cell.offset()) || void 0 === _$cell$offset ? void 0 : _$cell$offset.left) ?? 0\r\n            }\r\n        }\r\n        return super.getSeparatorOffsetX($cell)\r\n    }\r\n    _correctColumnIndexForPoint(point, correctionValue, columns) {\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        const isWidgetResizingMode = \"widget\" === this.option(\"columnResizingMode\");\r\n        const columnIndex = Math.max(point.index - 1, 0);\r\n        const column = columns[columnIndex];\r\n        const nextColumnIndex = this._getNextColumnIndex(columnIndex);\r\n        const nextColumn = columns[nextColumnIndex];\r\n        if (isWidgetResizingMode && !isFixedEdge(point, column, nextColumn)) {\r\n            const $container = $(this._columnHeadersView.getContent());\r\n            const isFixedCellPinnedToRight = GridCoreStickyColumnsDom.isFixedCellPinnedToRight($(point.item), $container, this.addWidgetPrefix.bind(this));\r\n            if (isFixedCellPinnedToRight) {\r\n                point.columnIndex -= rtlEnabled ? 1 : 0;\r\n                return\r\n            }\r\n        }\r\n        super._correctColumnIndexForPoint(point, correctionValue, columns)\r\n    }\r\n    _needToInvertResizing($cell) {\r\n        const result = super._needToInvertResizing($cell);\r\n        const isWidgetResizingMode = \"widget\" === this.option(\"columnResizingMode\");\r\n        if (!result && isWidgetResizingMode) {\r\n            const $container = $(this._columnHeadersView.getContent());\r\n            return GridCoreStickyColumnsDom.isFixedCellPinnedToRight($cell, $container, this.addWidgetPrefix.bind(this))\r\n        }\r\n        return result\r\n    }\r\n    _generatePointsByColumns() {\r\n        var _this$_columnHeadersV2;\r\n        const hasStickyColumns = null === (_this$_columnHeadersV2 = this._columnHeadersView) || void 0 === _this$_columnHeadersV2 ? void 0 : _this$_columnHeadersV2.hasStickyColumns();\r\n        super._generatePointsByColumns(hasStickyColumns)\r\n    }\r\n    _pointCreated(point, cellsLength, columns) {\r\n        var _this$_columnHeadersV3;\r\n        const hasStickyColumns = null === (_this$_columnHeadersV3 = this._columnHeadersView) || void 0 === _this$_columnHeadersV3 ? void 0 : _this$_columnHeadersV3.hasStickyColumns();\r\n        const result = super._pointCreated(point, cellsLength, columns);\r\n        const needToCheckPoint = hasStickyColumns && cellsLength > 0;\r\n        if (needToCheckPoint && !result) {\r\n            const column = columns[point.index - 1];\r\n            const nextColumnIndex = this._getNextColumnIndex(point.index - 1);\r\n            const nextColumn = columns[nextColumnIndex];\r\n            return GridCoreStickyColumnsDom.noNeedToCreateResizingPoint(this._columnHeadersView, {\r\n                point: point,\r\n                column: column,\r\n                nextColumn: nextColumn\r\n            }, this.addWidgetPrefix.bind(this))\r\n        }\r\n        return result\r\n    }\r\n};\r\nconst draggingHeader = Base => class extends Base {\r\n    _generatePointsByColumns(options) {\r\n        var _this$_columnHeadersV4;\r\n        const hasStickyColumns = null === (_this$_columnHeadersV4 = this._columnHeadersView) || void 0 === _this$_columnHeadersV4 ? void 0 : _this$_columnHeadersV4.hasStickyColumns();\r\n        const {\r\n            sourceLocation: sourceLocation,\r\n            sourceColumn: sourceColumn,\r\n            targetDraggingPanel: targetDraggingPanel\r\n        } = options;\r\n        const isDraggingBetweenHeaders = \"headers\" === sourceLocation && \"headers\" === (null === targetDraggingPanel || void 0 === targetDraggingPanel ? void 0 : targetDraggingPanel.getName());\r\n        if (hasStickyColumns && isDraggingBetweenHeaders) {\r\n            const columnFixedPosition = getColumnFixedPosition(this._columnsController, sourceColumn);\r\n            switch (true) {\r\n                case sourceColumn.fixed && columnFixedPosition === StickyPosition.Left:\r\n                    options.columnElements = GridCoreStickyColumnsDom.getLeftFixedCells(options.columnElements, this.addWidgetPrefix.bind(this));\r\n                    options.startColumnIndex = options.columnElements.eq(0).index();\r\n                    break;\r\n                case sourceColumn.fixed && columnFixedPosition === StickyPosition.Right:\r\n                    options.columnElements = GridCoreStickyColumnsDom.getRightFixedCells(options.columnElements, this.addWidgetPrefix.bind(this));\r\n                    options.startColumnIndex = options.columnElements.eq(0).index();\r\n                    break;\r\n                default:\r\n                    options.columnElements = GridCoreStickyColumnsDom.getNonFixedAndStickyCells(options.columnElements, this.addWidgetPrefix.bind(this));\r\n                    options.startColumnIndex = options.columnElements.eq(0).index()\r\n            }\r\n        }\r\n        return super._generatePointsByColumns(options, hasStickyColumns)\r\n    }\r\n    _pointCreated(point, columns, location, sourceColumn) {\r\n        const hasStickyColumns = this._columnHeadersView.hasStickyColumns();\r\n        const $cells = this._columnHeadersView.getColumnElements();\r\n        const needToCheckPoint = hasStickyColumns && \"headers\" === location && (null === $cells || void 0 === $cells ? void 0 : $cells.length) && (!sourceColumn.fixed || sourceColumn.fixedPosition === StickyPosition.Sticky);\r\n        const result = super._pointCreated(point, columns, location, sourceColumn);\r\n        if (needToCheckPoint && !result) {\r\n            return GridCoreStickyColumnsDom.noNeedToCreateReorderingPoint(point, $cells, $(this._columnHeadersView.getContent()), this.addWidgetPrefix.bind(this))\r\n        }\r\n        return result\r\n    }\r\n};\r\nconst editorFactory = Base => class extends Base {\r\n    getOverlayContainerIfNeeded($cell) {\r\n        const hasFixedColumns = this._rowsView.hasStickyColumns();\r\n        const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($cell, this.addWidgetPrefix.bind(this));\r\n        if (hasFixedColumns && isFixedCell) {\r\n            return $cell.closest(`.${this.addWidgetPrefix(CLASSES.stickyColumns)}`)\r\n        }\r\n        return\r\n    }\r\n    updateFocusOverlaySize($element, position) {\r\n        const hasFixedColumns = this._rowsView.hasStickyColumns();\r\n        if (!hasFixedColumns) {\r\n            super.updateFocusOverlaySize($element, position)\r\n        }\r\n    }\r\n    getFocusOverlaySize($element) {\r\n        const hasFixedColumns = this._rowsView.hasStickyColumns();\r\n        if (hasFixedColumns) {\r\n            const elementRect = getBoundingRect($element.get(0));\r\n            const isLastCell = GridCoreStickyColumnsDom.isLastCell($element);\r\n            const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));\r\n            return {\r\n                width: elementRect.right - elementRect.left + (isLastCell || isFixedCell ? 0 : 1),\r\n                height: elementRect.bottom - elementRect.top\r\n            }\r\n        }\r\n        return super.getFocusOverlaySize($element)\r\n    }\r\n    getValidationMessageContainer($cell) {\r\n        return this.getOverlayContainerIfNeeded($cell) ?? super.getValidationMessageContainer($cell)\r\n    }\r\n    getRevertButtonContainer($cell) {\r\n        return this.getOverlayContainerIfNeeded($cell) ?? super.getRevertButtonContainer($cell)\r\n    }\r\n    getFocusOverlayContainer($focusedElement) {\r\n        return this.getOverlayContainerIfNeeded($focusedElement) ?? super.getFocusOverlayContainer($focusedElement)\r\n    }\r\n    overlayPositionedHandler(e, isOverlayVisible) {\r\n        const columnHeaders = this.getView(\"columnHeadersView\");\r\n        const hasStickyColumns = columnHeaders.hasStickyColumns();\r\n        super.overlayPositionedHandler(e, isOverlayVisible);\r\n        if (hasStickyColumns) {\r\n            const $cell = $(e.element).closest(\"td\");\r\n            if (!GridCoreStickyColumnsDom.isFixedCell($cell, this.addWidgetPrefix.bind(this))) {\r\n                const $wrapper = e.component.$wrapper();\r\n                const $overlayContent = e.component.$content();\r\n                const isOutsideVisibleArea = GridCoreStickyColumnsDom.isOutsideVisibleArea($overlayContent, $(columnHeaders.getColumnElements()), $(columnHeaders.getContent()), this.addWidgetPrefix.bind(this));\r\n                $wrapper.css(\"zIndex\", isOutsideVisibleArea ? 1 : (null === this || void 0 === this ? void 0 : this.getOverlayBaseZIndex()) ?? 0)\r\n            }\r\n        }\r\n    }\r\n    updateFocusOverlay($element) {\r\n        let isHideBorder = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        if (!isHideBorder) {\r\n            const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($element, this.addWidgetPrefix.bind(this));\r\n            this._$focusOverlay.toggleClass(CLASSES.focusedFixedElement, isFixedCell);\r\n            const isGroupElement = isGroupRowElement($element);\r\n            const isGroupFooterRowElement = isGroupFooterRow($element);\r\n            const isAdaptiveElement = isAdaptiveItem($element);\r\n            if (isFixedCell || isGroupElement || isGroupFooterRowElement || isAdaptiveElement) {\r\n                this._$focusOverlay.toggleClass(CLASSES.focusedFixedElement, true)\r\n            }\r\n        }\r\n        super.updateFocusOverlay($element, isHideBorder)\r\n    }\r\n};\r\nconst resizing = Base => class extends Base {\r\n    resize() {\r\n        const result = super.resize();\r\n        const hasStickyColumns = this._columnHeadersView.hasStickyColumns();\r\n        if (hasStickyColumns && null !== this && void 0 !== this && this.hasResizeTimeout()) {\r\n            this._rowsView.setStickyOffsets()\r\n        }\r\n        return result\r\n    }\r\n};\r\nconst keyboardNavigation = Base => class extends Base {\r\n    headerTabKeyHandler(_ref) {\r\n        var _this$_columnHeadersV5, _this$_rowsView;\r\n        let {\r\n            originalEvent: originalEvent,\r\n            shift: shift\r\n        } = _ref;\r\n        const hasStickyColumns = null === (_this$_columnHeadersV5 = this._columnHeadersView) || void 0 === _this$_columnHeadersV5 ? void 0 : _this$_columnHeadersV5.hasStickyColumns();\r\n        const scrollable = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.getScrollable();\r\n        if (hasStickyColumns && scrollable) {\r\n            const $cell = $(originalEvent.target).closest(\"td\");\r\n            const $nextCell = GridCoreStickyColumnsDom.getNextHeaderCell($cell, shift ? \"previous\" : \"next\");\r\n            const isFixedCell = GridCoreStickyColumnsDom.isFixedCell($nextCell, this.addWidgetPrefix.bind(this));\r\n            if ($nextCell.length && !isFixedCell) {\r\n                const $cells = $(this._columnHeadersView.getColumnElements());\r\n                const cellIsOutsideVisibleArea = GridCoreStickyColumnsDom.isOutsideVisibleArea($nextCell, $cells, $(this._columnHeadersView.getContent()), this.addWidgetPrefix.bind(this));\r\n                if (cellIsOutsideVisibleArea) {\r\n                    const scrollPadding = GridCoreStickyColumnsDom.getScrollPadding($cells, $(scrollable.container()), this.addWidgetPrefix.bind(this));\r\n                    const scrollPosition = getElementLocationInternal($nextCell[0], \"horizontal\", $(this._columnHeadersView.getContent())[0], scrollable.scrollOffset(), scrollPadding, this.addWidgetPrefix(\"table\"));\r\n                    scrollable.scrollTo({\r\n                        x: scrollPosition\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexport const stickyColumnsModule = {\r\n    extenders: {\r\n        views: {\r\n            columnHeadersView: columnHeadersView,\r\n            rowsView: rowsView,\r\n            footerView: footerView\r\n        },\r\n        controllers: {\r\n            columnsResizer: columnsResizer,\r\n            draggingHeader: draggingHeader,\r\n            editorFactory: editorFactory,\r\n            resizing: resizing,\r\n            keyboardNavigation: keyboardNavigation\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}