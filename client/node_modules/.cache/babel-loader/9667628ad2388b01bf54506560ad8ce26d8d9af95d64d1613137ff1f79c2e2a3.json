{"ast":null,"code":"// import React, { useMemo } from \"react\";\n// import { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table'\n// import planets from '../server/database/data.json'\n// import { COLUMNS } from \"./columns\";\n// import './table.css';\n\n// export const BasicTable = () => {\n//     // Мемоизация колонок и данных для оптимизации производительности\n//     const columns = useMemo(\n//       () => [\n//         ...COLUMNS.filter((col) => col.accessorKey !== 'suitabilityId'), // Удаляем старую колонку suitabilityId\n//         {\n//           id: 'suitability', // Добавляем уникальный id для колонки\n//           header: 'Suitability',\n//           accessorFn: (row) => {\n//             // Маппинг suitabilityId на название из planets.suitabilities\n//             const suitability = planets.suitabilities.find(\n//               (s) => s.id === row.suitabilityId\n//             );\n//             return suitability ? suitability.name : row.suitabilityId;\n//           },\n//         },\n//       ],\n//       []\n//     );\n//     const data = useMemo(() => planets.planets, []); // Используем planets.planets вместо всего объекта\n\n//     // Используем useReactTable с getCoreRowModel для базовой функциональности\n//     const table = useReactTable({\n//       data,\n//       columns,\n//       getCoreRowModel: getCoreRowModel(),\n//     });\n\n//     return (\n//       <table>\n//         <thead>\n//           {table.getHeaderGroups().map((headerGroup) => (\n//             <tr key={headerGroup.id}>\n//               {headerGroup.headers.map((header) => (\n//                 <th key={header.id}>\n//                   {header.isPlaceholder\n//                     ? null\n//                     : flexRender(header.column.columnDef.header, header.getContext())}\n//                 </th>\n//               ))}\n//             </tr>\n//           ))}\n//         </thead>\n//         <tbody>\n//           {table.getRowModel().rows.map((row) => (\n//             <tr key={row.id}>\n//               {row.getVisibleCells().map((cell) => (\n//                 <td key={cell.id}>\n//                   {flexRender(cell.column.columnDef.cell, cell.getContext())}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     );\n//   };","map":{"version":3,"names":[],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/src/components/BasicTable.js"],"sourcesContent":["// import React, { useMemo } from \"react\";\r\n// import { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table'\r\n// import planets from '../server/database/data.json'\r\n// import { COLUMNS } from \"./columns\";\r\n// import './table.css';\r\n\r\n// export const BasicTable = () => {\r\n//     // Мемоизация колонок и данных для оптимизации производительности\r\n//     const columns = useMemo(\r\n//       () => [\r\n//         ...COLUMNS.filter((col) => col.accessorKey !== 'suitabilityId'), // Удаляем старую колонку suitabilityId\r\n//         {\r\n//           id: 'suitability', // Добавляем уникальный id для колонки\r\n//           header: 'Suitability',\r\n//           accessorFn: (row) => {\r\n//             // Маппинг suitabilityId на название из planets.suitabilities\r\n//             const suitability = planets.suitabilities.find(\r\n//               (s) => s.id === row.suitabilityId\r\n//             );\r\n//             return suitability ? suitability.name : row.suitabilityId;\r\n//           },\r\n//         },\r\n//       ],\r\n//       []\r\n//     );\r\n//     const data = useMemo(() => planets.planets, []); // Используем planets.planets вместо всего объекта\r\n  \r\n//     // Используем useReactTable с getCoreRowModel для базовой функциональности\r\n//     const table = useReactTable({\r\n//       data,\r\n//       columns,\r\n//       getCoreRowModel: getCoreRowModel(),\r\n//     });\r\n  \r\n//     return (\r\n//       <table>\r\n//         <thead>\r\n//           {table.getHeaderGroups().map((headerGroup) => (\r\n//             <tr key={headerGroup.id}>\r\n//               {headerGroup.headers.map((header) => (\r\n//                 <th key={header.id}>\r\n//                   {header.isPlaceholder\r\n//                     ? null\r\n//                     : flexRender(header.column.columnDef.header, header.getContext())}\r\n//                 </th>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </thead>\r\n//         <tbody>\r\n//           {table.getRowModel().rows.map((row) => (\r\n//             <tr key={row.id}>\r\n//               {row.getVisibleCells().map((cell) => (\r\n//                 <td key={cell.id}>\r\n//                   {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     );\r\n//   };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}