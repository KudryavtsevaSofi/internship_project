{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editing/m_editing_form_based.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport { removeEvent } from \"../../../../common/core/events/remove\";\nimport devices from \"../../../../core/devices\";\nimport Guid from \"../../../../core/guid\";\nimport $ from \"../../../../core/renderer\";\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport { Deferred } from \"../../../../core/utils/deferred\";\nimport { isElementInDom } from \"../../../../core/utils/dom\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { isDefined, isString } from \"../../../../core/utils/type\";\nimport Button from \"../../../../ui/button\";\nimport Form from \"../../../../ui/form\";\nimport Popup from \"../../../../ui/popup/ui.popup\";\nimport Scrollable from \"../../../../ui/scroll_view/ui.scrollable\";\nimport gridCoreUtils from \"../m_utils\";\nimport { BUTTON_CLASS, DATA_EDIT_DATA_INSERT_TYPE, EDIT_FORM_ITEM_CLASS, EDIT_MODE_FORM, EDIT_POPUP_CLASS, EDIT_POPUP_FORM_CLASS, EDITING_EDITROWKEY_OPTION_NAME, EDITING_FORM_OPTION_NAME, EDITING_POPUP_OPTION_NAME, FOCUSABLE_ELEMENT_CLASS, FOCUSABLE_ELEMENT_SELECTOR, FORM_BUTTONS_CONTAINER_CLASS } from \"./const\";\nimport { forEachFormItems, getEditorType } from \"./m_editing_utils\";\nconst editingControllerExtender = Base => class extends Base {\n  init() {\n    this._editForm = null;\n    this._updateEditFormDeferred = null;\n    super.init();\n  }\n  isEditRow(rowIndex) {\n    return !this.isPopupEditMode() && super.isEditRow(rowIndex);\n  }\n  isFormOrPopupEditMode() {\n    return this.isPopupEditMode() || this.isFormEditMode();\n  }\n  isFormEditMode() {\n    const editMode = this.option(\"editing.mode\");\n    return editMode === EDIT_MODE_FORM;\n  }\n  getFirstEditableColumnIndex() {\n    const firstFormItem = this._firstFormItem;\n    if (this.isFormEditMode() && firstFormItem) {\n      const editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n      const editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\n      const $editFormElements = this._rowsView.getCellElements(editRowIndex);\n      return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column);\n    }\n    return super.getFirstEditableColumnIndex();\n  }\n  getEditFormRowIndex() {\n    return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : super.getEditFormRowIndex();\n  }\n  _isEditColumnVisible() {\n    const result = super._isEditColumnVisible();\n    const editingOptions = this.option(\"editing\");\n    return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result : result;\n  }\n  _handleDataChanged(args) {\n    if (this.isPopupEditMode()) {\n      var _args$items, _args$changeTypes;\n      const editRowKey = this.option(\"editing.editRowKey\");\n      const hasEditRow = null === args || void 0 === args || null === (_args$items = args.items) || void 0 === _args$items ? void 0 : _args$items.some(item => equalByValue(item.key, editRowKey));\n      const onlyInsertChanges = (null === (_args$changeTypes = args.changeTypes) || void 0 === _args$changeTypes ? void 0 : _args$changeTypes.length) && args.changeTypes.every(item => \"insert\" === item);\n      if ((\"refresh\" === args.changeType || hasEditRow && args.isOptionChanged) && !onlyInsertChanges) {\n        this._repaintEditPopup();\n      }\n    }\n    super._handleDataChanged(args);\n  }\n  getPopupContent() {\n    var _this$_editPopup;\n    const popupVisible = null === (_this$_editPopup = this._editPopup) || void 0 === _this$_editPopup ? void 0 : _this$_editPopup.option(\"visible\");\n    if (this.isPopupEditMode() && popupVisible) {\n      return this._$popupContent;\n    }\n  }\n  _showAddedRow(rowIndex) {\n    if (this.isPopupEditMode()) {\n      this._showEditPopup(rowIndex);\n    } else {\n      super._showAddedRow(rowIndex);\n    }\n  }\n  _cancelEditDataCore() {\n    super._cancelEditDataCore();\n    if (this.isPopupEditMode()) {\n      this._hideEditPopup();\n    }\n  }\n  _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {\n    const editForm = this._editForm;\n    if (this.isPopupEditMode()) {\n      if (this.option(\"repaintChangesOnly\")) {\n        var _row$update;\n        null === (_row$update = row.update) || void 0 === _row$update || _row$update.call(row, row);\n        this._rowsView.renderDelayedTemplates();\n      } else if (editForm) {\n        this._updateEditFormDeferred = new Deferred().done(() => editForm.repaint());\n        if (!this._updateLockCount) {\n          this._updateEditFormDeferred.resolve();\n        }\n      }\n    } else {\n      super._updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue);\n    }\n  }\n  _showEditPopup(rowIndex, repaintForm) {\n    const isMobileDevice = \"desktop\" !== devices.current().deviceType;\n    const editPopupClass = this.addWidgetPrefix(EDIT_POPUP_CLASS);\n    const popupOptions = extend({\n      showTitle: false,\n      fullScreen: isMobileDevice,\n      wrapperAttr: {\n        class: editPopupClass\n      },\n      toolbarItems: [{\n        toolbar: \"bottom\",\n        location: \"after\",\n        widget: \"dxButton\",\n        options: this._getSaveButtonConfig()\n      }, {\n        toolbar: \"bottom\",\n        location: \"after\",\n        widget: \"dxButton\",\n        options: this._getCancelButtonConfig()\n      }],\n      contentTemplate: this._getPopupEditFormTemplate(rowIndex)\n    }, this.option(EDITING_POPUP_OPTION_NAME));\n    if (!this._editPopup) {\n      const $popupContainer = $(\"<div>\").appendTo(this.component.$element()).addClass(editPopupClass);\n      this._editPopup = this._createComponent($popupContainer, Popup);\n      this._editPopup.on(\"hiding\", this._getEditPopupHiddenHandler());\n      this._editPopup.on(\"shown\", e => {\n        eventsEngine.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(`.${FOCUSABLE_ELEMENT_CLASS}`).first(), \"focus\");\n        if (repaintForm) {\n          var _this$_editForm;\n          null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm || _this$_editForm.repaint();\n        }\n      });\n    }\n    this._editPopup.option(popupOptions);\n    this._editPopup.show();\n    super._showEditPopup(rowIndex, repaintForm);\n  }\n  _getPopupEditFormTemplate(rowIndex) {\n    const row = this.component.getVisibleRows()[rowIndex];\n    const templateOptions = {\n      row: row,\n      values: row.values,\n      rowType: row.rowType,\n      key: row.key,\n      rowIndex: rowIndex\n    };\n    this._rowsView._addWatchMethod(templateOptions, row);\n    return container => {\n      const formTemplate = this.getEditFormTemplate();\n      const scrollable = this._createComponent($(\"<div>\").appendTo(container), Scrollable);\n      this._$popupContent = $(scrollable.content());\n      formTemplate(this._$popupContent, templateOptions, {\n        isPopupForm: true\n      });\n      this._rowsView.renderDelayedTemplates();\n      $(container).parent().attr(\"aria-label\", this.localize(\"dxDataGrid-ariaEditForm\"));\n    };\n  }\n  _repaintEditPopup() {\n    const rowIndex = this._getVisibleEditRowIndex();\n    if (rowIndex >= 0) {\n      var _this$_editPopup2, _this$_editPopup3;\n      const defaultAnimation = null === (_this$_editPopup2 = this._editPopup) || void 0 === _this$_editPopup2 ? void 0 : _this$_editPopup2.option(\"animation\");\n      null === (_this$_editPopup3 = this._editPopup) || void 0 === _this$_editPopup3 || _this$_editPopup3.option(\"animation\", null);\n      this._showEditPopup(rowIndex, true);\n      if (void 0 !== defaultAnimation) {\n        this._editPopup.option(\"animation\", defaultAnimation);\n      }\n    }\n  }\n  _hideEditPopup() {\n    var _this$_editPopup4;\n    null === (_this$_editPopup4 = this._editPopup) || void 0 === _this$_editPopup4 || _this$_editPopup4.option(\"visible\", false);\n  }\n  optionChanged(args) {\n    if (\"editing\" === args.name && this.isFormOrPopupEditMode()) {\n      const {\n        fullName: fullName\n      } = args;\n      if (0 === fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\n        this._handleFormOptionChange(args);\n        args.handled = true;\n      } else if (0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\n        this._handlePopupOptionChange(args);\n        args.handled = true;\n      }\n    }\n    super.optionChanged(args);\n  }\n  _handleFormOptionChange(args) {\n    var _this$_editPopup5;\n    if (this.isFormEditMode()) {\n      const editRowIndex = this._getVisibleEditRowIndex();\n      if (editRowIndex >= 0) {\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [editRowIndex]\n        });\n      }\n    } else if (null !== (_this$_editPopup5 = this._editPopup) && void 0 !== _this$_editPopup5 && _this$_editPopup5.option(\"visible\") && 0 === args.fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\n      this._repaintEditPopup();\n    }\n  }\n  _handlePopupOptionChange(args) {\n    const editPopup = this._editPopup;\n    if (editPopup) {\n      const popupOptionName = args.fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\n      if (popupOptionName) {\n        editPopup.option(popupOptionName, args.value);\n      } else {\n        editPopup.option(args.value);\n      }\n    }\n  }\n  renderFormEditorTemplate(detailCellOptions, item, formTemplateOptions, container, isReadOnly) {\n    const that = this;\n    const $container = $(container);\n    const {\n      column: column\n    } = item;\n    const editorType = getEditorType(item);\n    const row = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row;\n    const rowData = null === row || void 0 === row ? void 0 : row.data;\n    const form = formTemplateOptions.component;\n    const value = column.calculateCellValue(rowData);\n    const displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, null === row || void 0 === row ? void 0 : row.rowType);\n    const {\n      label: label,\n      labelMark: labelMark,\n      labelMode: labelMode\n    } = formTemplateOptions.editorOptions || {};\n    const cellOptions = extend({}, detailCellOptions, {\n      data: rowData,\n      cellElement: null,\n      isOnForm: true,\n      item: item,\n      id: form.getItemID(item.name || item.dataField),\n      column: extend({}, column, {\n        editorType: editorType,\n        editorOptions: extend({\n          label: label,\n          labelMark: labelMark,\n          labelMode: labelMode\n        }, column.editorOptions, item.editorOptions)\n      }),\n      columnIndex: column.index,\n      setValue: !isReadOnly && column.allowEditing && function (value, text) {\n        that.updateFieldValue(cellOptions, value, text);\n      }\n    });\n    cellOptions.value = value;\n    cellOptions.displayValue = displayValue;\n    cellOptions.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\n    const template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);\n    this._rowsView.renderTemplate($container, template, cellOptions, !!isElementInDom($container)).done(() => {\n      this._rowsView._updateCell($container, cellOptions);\n    });\n    return cellOptions;\n  }\n  getFormEditorTemplate(cellOptions, item) {\n    const column = this.component.columnOption(item.name || item.dataField);\n    return (options, container) => {\n      const $container = $(container);\n      const {\n        row: row\n      } = cellOptions;\n      if (null !== row && void 0 !== row && row.watch) {\n        const dispose = row.watch(() => column.selector(row.data), () => {\n          var _validator;\n          let $editorElement = $container.find(\".dx-widget\").first();\n          let validator = $editorElement.data(\"dxValidator\");\n          const validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\n          $container.contents().remove();\n          cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options, $container);\n          $editorElement = $container.find(\".dx-widget\").first();\n          validator = $editorElement.data(\"dxValidator\");\n          if (validatorOptions && !validator) {\n            $editorElement.dxValidator({\n              validationRules: validatorOptions.validationRules,\n              validationGroup: validatorOptions.validationGroup,\n              dataGetter: validatorOptions.dataGetter\n            });\n          }\n        });\n        eventsEngine.on($container, removeEvent, dispose);\n      }\n      cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options, $container);\n    };\n  }\n  getEditFormOptions(detailOptions) {\n    var _this$_getValidationG;\n    const editFormOptions = null === (_this$_getValidationG = this._getValidationGroupsInForm) || void 0 === _this$_getValidationG ? void 0 : _this$_getValidationG.call(this, detailOptions);\n    const userCustomizeItem = this.option(\"editing.form.customizeItem\");\n    const editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\n    let items = this.option(\"editing.form.items\");\n    const isCustomEditorType = {};\n    if (!items) {\n      const columns = this._columnsController.getColumns();\n      items = [];\n      each(columns, (_, column) => {\n        if (!column.isBand && !column.type) {\n          items.push({\n            column: column,\n            name: column.name,\n            dataField: column.dataField\n          });\n        }\n      });\n    } else {\n      forEachFormItems(items, item => {\n        const itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\n        if (itemId) {\n          isCustomEditorType[itemId] = !!item.editorType;\n        }\n      });\n    }\n    return extend({}, editFormOptions, {\n      items: items,\n      formID: `dx-${new Guid()}`,\n      customizeItem: item => {\n        let column;\n        const itemId = item.name || item.dataField;\n        if (item.column || itemId) {\n          column = item.column || this._columnsController.columnOption(item.name ? `name:${item.name}` : `dataField:${item.dataField}`);\n        }\n        if (column) {\n          item.label = item.label || {};\n          item.label.text = item.label.text || column.caption;\n          if (\"boolean\" === column.dataType && void 0 === item.label.visible) {\n            const labelMode = this.option(\"editing.form.labelMode\");\n            if (\"floating\" === labelMode || \"static\" === labelMode) {\n              item.label.visible = true;\n            }\n          }\n          item.template = item.template || this.getFormEditorTemplate(detailOptions, item);\n          item.column = column;\n          item.isCustomEditorType = isCustomEditorType[itemId];\n          if (column.formItem) {\n            extend(item, column.formItem);\n          }\n          if (void 0 === item.isRequired && column.validationRules) {\n            item.isRequired = column.validationRules.some(rule => \"required\" === rule.type);\n            item.validationRules = [];\n          }\n          const itemVisible = isDefined(item.visible) ? item.visible : true;\n          if (!this._firstFormItem && itemVisible) {\n            this._firstFormItem = item;\n          }\n        }\n        null === userCustomizeItem || void 0 === userCustomizeItem || userCustomizeItem.call(this, item);\n        item.cssClass = isString(item.cssClass) ? `${item.cssClass} ${editFormItemClass}` : editFormItemClass;\n      }\n    });\n  }\n  getEditFormTemplate() {\n    return ($container, detailOptions, options) => {\n      const editFormOptions = this.option(EDITING_FORM_OPTION_NAME);\n      const baseEditFormOptions = this.getEditFormOptions(detailOptions);\n      const $formContainer = $(\"<div>\").appendTo($container);\n      const isPopupForm = null === options || void 0 === options ? void 0 : options.isPopupForm;\n      this._firstFormItem = void 0;\n      if (isPopupForm) {\n        $formContainer.addClass(this.addWidgetPrefix(EDIT_POPUP_FORM_CLASS));\n      }\n      this._editForm = this._createComponent($formContainer, Form, extend({}, editFormOptions, baseEditFormOptions));\n      if (!isPopupForm) {\n        const $buttonsContainer = $(\"<div>\").addClass(this.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\n        this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getSaveButtonConfig());\n        this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getCancelButtonConfig());\n      }\n      this._editForm.on(\"contentReady\", () => {\n        var _this$_editPopup6;\n        this._rowsView.renderDelayedTemplates();\n        null === (_this$_editPopup6 = this._editPopup) || void 0 === _this$_editPopup6 || _this$_editPopup6.repaint();\n      });\n    };\n  }\n  getEditForm() {\n    return this._editForm;\n  }\n  _endUpdateCore() {\n    var _this$_updateEditForm;\n    null === (_this$_updateEditForm = this._updateEditFormDeferred) || void 0 === _this$_updateEditForm || _this$_updateEditForm.resolve();\n  }\n  _beforeEndSaving(changes) {\n    super._beforeEndSaving(changes);\n    if (this.isPopupEditMode()) {\n      var _this$_editPopup7;\n      null === (_this$_editPopup7 = this._editPopup) || void 0 === _this$_editPopup7 || _this$_editPopup7.hide();\n    }\n  }\n  _processDataItemCore(item, change, key, columns, generateDataValues) {\n    const {\n      type: type\n    } = change;\n    if (this.isPopupEditMode() && type === DATA_EDIT_DATA_INSERT_TYPE) {\n      item.visible = false;\n    }\n    super._processDataItemCore(item, change, key, columns, generateDataValues);\n  }\n  _editRowFromOptionChangedCore(rowIndices, rowIndex) {\n    const isPopupEditMode = this.isPopupEditMode();\n    super._editRowFromOptionChangedCore(rowIndices, rowIndex, isPopupEditMode);\n    if (isPopupEditMode) {\n      this._showEditPopup(rowIndex);\n    }\n  }\n};\nconst data = Base => class extends Base {\n  _updateEditItem(item) {\n    if (this._editingController.isFormEditMode()) {\n      item.rowType = \"detail\";\n    }\n  }\n  _getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n    if (false === isLiveUpdate && newItem.isEditing && this._editingController.isFormEditMode()) {\n      return;\n    }\n    return super._getChangedColumnIndices.apply(this, arguments);\n  }\n};\nconst rowsView = Base => class extends Base {\n  _renderCellContent($cell, options) {\n    if (\"data\" === options.rowType && this._editingController.isPopupEditMode() && false === options.row.visible) {\n      return;\n    }\n    super._renderCellContent.apply(this, arguments);\n  }\n  getCellElements(rowIndex) {\n    const $cellElements = super.getCellElements(rowIndex);\n    const editingController = this._editingController;\n    const editForm = editingController.getEditForm();\n    const editFormRowIndex = editingController.getEditFormRowIndex();\n    if (editFormRowIndex === rowIndex && $cellElements && editForm) {\n      return editForm.$element().find(`.${this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS)}, .${BUTTON_CLASS}`);\n    }\n    return $cellElements;\n  }\n  _getVisibleColumnIndex($cells, rowIndex, columnIdentifier) {\n    const editFormRowIndex = this._editingController.getEditFormRowIndex();\n    if (editFormRowIndex === rowIndex && isString(columnIdentifier)) {\n      const column = this._columnsController.columnOption(columnIdentifier);\n      return this._getEditFormEditorVisibleIndex($cells, column);\n    }\n    return super._getVisibleColumnIndex.apply(this, arguments);\n  }\n  _getEditFormEditorVisibleIndex($cells, column) {\n    let visibleIndex = -1;\n    each($cells, (index, cellElement) => {\n      const item = $(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\n      if (null !== item && void 0 !== item && item.column && column && item.column.index === column.index) {\n        visibleIndex = index;\n        return false;\n      }\n    });\n    return visibleIndex;\n  }\n  _isFormItem(parameters) {\n    const isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\n    const isPopupEditing = \"data\" === parameters.rowType && this._editingController.isPopupEditMode();\n    return (isDetailRow || isPopupEditing) && parameters.item;\n  }\n  _updateCell($cell, parameters) {\n    if (this._isFormItem(parameters)) {\n      this._formItemPrepared(parameters, $cell);\n    } else {\n      super._updateCell($cell, parameters);\n    }\n  }\n  _updateContent() {\n    const editingController = this._editingController;\n    const oldEditForm = editingController.getEditForm();\n    const validationGroup = null === oldEditForm || void 0 === oldEditForm ? void 0 : oldEditForm.option(\"validationGroup\");\n    const deferred = super._updateContent.apply(this, arguments);\n    return deferred.done(() => {\n      const newEditForm = editingController.getEditForm();\n      if (validationGroup && newEditForm && newEditForm !== oldEditForm) {\n        newEditForm.option(\"validationGroup\", validationGroup);\n      }\n    });\n  }\n};\nexport const editingFormBasedModule = {\n  extenders: {\n    controllers: {\n      editing: editingControllerExtender,\n      data: data\n    },\n    views: {\n      rowsView: rowsView\n    }\n  }\n};","map":{"version":3,"names":["eventsEngine","removeEvent","devices","Guid","$","equalByValue","Deferred","isElementInDom","extend","each","isDefined","isString","Button","Form","Popup","Scrollable","gridCoreUtils","BUTTON_CLASS","DATA_EDIT_DATA_INSERT_TYPE","EDIT_FORM_ITEM_CLASS","EDIT_MODE_FORM","EDIT_POPUP_CLASS","EDIT_POPUP_FORM_CLASS","EDITING_EDITROWKEY_OPTION_NAME","EDITING_FORM_OPTION_NAME","EDITING_POPUP_OPTION_NAME","FOCUSABLE_ELEMENT_CLASS","FOCUSABLE_ELEMENT_SELECTOR","FORM_BUTTONS_CONTAINER_CLASS","forEachFormItems","getEditorType","editingControllerExtender","Base","init","_editForm","_updateEditFormDeferred","isEditRow","rowIndex","isPopupEditMode","isFormOrPopupEditMode","isFormEditMode","editMode","option","getFirstEditableColumnIndex","firstFormItem","_firstFormItem","editRowKey","editRowIndex","_dataController","getRowIndexByKey","$editFormElements","_rowsView","getCellElements","_getEditFormEditorVisibleIndex","column","getEditFormRowIndex","_getVisibleEditRowIndex","_isEditColumnVisible","result","editingOptions","allowUpdating","_handleDataChanged","args","_args$items","_args$changeTypes","hasEditRow","items","some","item","key","onlyInsertChanges","changeTypes","length","every","changeType","isOptionChanged","_repaintEditPopup","getPopupContent","_this$_editPopup","popupVisible","_editPopup","_$popupContent","_showAddedRow","_showEditPopup","_cancelEditDataCore","_hideEditPopup","_updateEditRowCore","row","skipCurrentRow","isCustomSetCellValue","editForm","_row$update","update","call","renderDelayedTemplates","done","repaint","_updateLockCount","resolve","repaintForm","isMobileDevice","current","deviceType","editPopupClass","addWidgetPrefix","popupOptions","showTitle","fullScreen","wrapperAttr","class","toolbarItems","toolbar","location","widget","options","_getSaveButtonConfig","_getCancelButtonConfig","contentTemplate","_getPopupEditFormTemplate","$popupContainer","appendTo","component","$element","addClass","_createComponent","on","_getEditPopupHiddenHandler","e","trigger","$content","find","not","first","_this$_editForm","show","getVisibleRows","templateOptions","values","rowType","_addWatchMethod","container","formTemplate","getEditFormTemplate","scrollable","content","isPopupForm","parent","attr","localize","_this$_editPopup2","_this$_editPopup3","defaultAnimation","_this$_editPopup4","optionChanged","name","fullName","indexOf","_handleFormOptionChange","handled","_handlePopupOptionChange","_this$_editPopup5","updateItems","rowIndices","editPopup","popupOptionName","slice","value","renderFormEditorTemplate","detailCellOptions","formTemplateOptions","isReadOnly","that","$container","editorType","rowData","data","form","calculateCellValue","displayValue","getDisplayValue","label","labelMark","labelMode","editorOptions","cellOptions","cellElement","isOnForm","id","getItemID","dataField","columnIndex","index","setValue","allowEditing","text","updateFieldValue","command","formatValue","template","_getFormEditItemTemplate","bind","renderTemplate","_updateCell","getFormEditorTemplate","columnOption","watch","dispose","selector","_validator","$editorElement","validator","validatorOptions","contents","remove","dxValidator","validationRules","validationGroup","dataGetter","getEditFormOptions","detailOptions","_this$_getValidationG","editFormOptions","_getValidationGroupsInForm","userCustomizeItem","editFormItemClass","isCustomEditorType","columns","_columnsController","getColumns","_","isBand","type","push","itemId","formID","customizeItem","caption","dataType","visible","formItem","isRequired","rule","itemVisible","cssClass","baseEditFormOptions","$formContainer","$buttonsContainer","_this$_editPopup6","getEditForm","_endUpdateCore","_this$_updateEditForm","_beforeEndSaving","changes","_this$_editPopup7","hide","_processDataItemCore","change","generateDataValues","_editRowFromOptionChangedCore","_updateEditItem","_editingController","_getChangedColumnIndices","oldItem","newItem","visibleRowIndex","isLiveUpdate","isEditing","apply","arguments","rowsView","_renderCellContent","$cell","$cellElements","editingController","editFormRowIndex","_getVisibleColumnIndex","$cells","columnIdentifier","visibleIndex","_isFormItem","parameters","isDetailRow","isPopupEditing","_formItemPrepared","_updateContent","oldEditForm","deferred","newEditForm","editingFormBasedModule","extenders","controllers","editing","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing_form_based.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editing/m_editing_form_based.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport {\r\n    removeEvent\r\n} from \"../../../../common/core/events/remove\";\r\nimport devices from \"../../../../core/devices\";\r\nimport Guid from \"../../../../core/guid\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../../../core/utils/dom\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport Button from \"../../../../ui/button\";\r\nimport Form from \"../../../../ui/form\";\r\nimport Popup from \"../../../../ui/popup/ui.popup\";\r\nimport Scrollable from \"../../../../ui/scroll_view/ui.scrollable\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    BUTTON_CLASS,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    EDIT_FORM_ITEM_CLASS,\r\n    EDIT_MODE_FORM,\r\n    EDIT_POPUP_CLASS,\r\n    EDIT_POPUP_FORM_CLASS,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_FORM_OPTION_NAME,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    FOCUSABLE_ELEMENT_CLASS,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    FORM_BUTTONS_CONTAINER_CLASS\r\n} from \"./const\";\r\nimport {\r\n    forEachFormItems,\r\n    getEditorType\r\n} from \"./m_editing_utils\";\r\nconst editingControllerExtender = Base => class extends Base {\r\n    init() {\r\n        this._editForm = null;\r\n        this._updateEditFormDeferred = null;\r\n        super.init()\r\n    }\r\n    isEditRow(rowIndex) {\r\n        return !this.isPopupEditMode() && super.isEditRow(rowIndex)\r\n    }\r\n    isFormOrPopupEditMode() {\r\n        return this.isPopupEditMode() || this.isFormEditMode()\r\n    }\r\n    isFormEditMode() {\r\n        const editMode = this.option(\"editing.mode\");\r\n        return editMode === EDIT_MODE_FORM\r\n    }\r\n    getFirstEditableColumnIndex() {\r\n        const firstFormItem = this._firstFormItem;\r\n        if (this.isFormEditMode() && firstFormItem) {\r\n            const editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n            const editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\r\n            const $editFormElements = this._rowsView.getCellElements(editRowIndex);\r\n            return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column)\r\n        }\r\n        return super.getFirstEditableColumnIndex()\r\n    }\r\n    getEditFormRowIndex() {\r\n        return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : super.getEditFormRowIndex()\r\n    }\r\n    _isEditColumnVisible() {\r\n        const result = super._isEditColumnVisible();\r\n        const editingOptions = this.option(\"editing\");\r\n        return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result : result\r\n    }\r\n    _handleDataChanged(args) {\r\n        if (this.isPopupEditMode()) {\r\n            var _args$items, _args$changeTypes;\r\n            const editRowKey = this.option(\"editing.editRowKey\");\r\n            const hasEditRow = null === args || void 0 === args || null === (_args$items = args.items) || void 0 === _args$items ? void 0 : _args$items.some((item => equalByValue(item.key, editRowKey)));\r\n            const onlyInsertChanges = (null === (_args$changeTypes = args.changeTypes) || void 0 === _args$changeTypes ? void 0 : _args$changeTypes.length) && args.changeTypes.every((item => \"insert\" === item));\r\n            if ((\"refresh\" === args.changeType || hasEditRow && args.isOptionChanged) && !onlyInsertChanges) {\r\n                this._repaintEditPopup()\r\n            }\r\n        }\r\n        super._handleDataChanged(args)\r\n    }\r\n    getPopupContent() {\r\n        var _this$_editPopup;\r\n        const popupVisible = null === (_this$_editPopup = this._editPopup) || void 0 === _this$_editPopup ? void 0 : _this$_editPopup.option(\"visible\");\r\n        if (this.isPopupEditMode() && popupVisible) {\r\n            return this._$popupContent\r\n        }\r\n    }\r\n    _showAddedRow(rowIndex) {\r\n        if (this.isPopupEditMode()) {\r\n            this._showEditPopup(rowIndex)\r\n        } else {\r\n            super._showAddedRow(rowIndex)\r\n        }\r\n    }\r\n    _cancelEditDataCore() {\r\n        super._cancelEditDataCore();\r\n        if (this.isPopupEditMode()) {\r\n            this._hideEditPopup()\r\n        }\r\n    }\r\n    _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {\r\n        const editForm = this._editForm;\r\n        if (this.isPopupEditMode()) {\r\n            if (this.option(\"repaintChangesOnly\")) {\r\n                var _row$update;\r\n                null === (_row$update = row.update) || void 0 === _row$update || _row$update.call(row, row);\r\n                this._rowsView.renderDelayedTemplates()\r\n            } else if (editForm) {\r\n                this._updateEditFormDeferred = (new Deferred).done((() => editForm.repaint()));\r\n                if (!this._updateLockCount) {\r\n                    this._updateEditFormDeferred.resolve()\r\n                }\r\n            }\r\n        } else {\r\n            super._updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue)\r\n        }\r\n    }\r\n    _showEditPopup(rowIndex, repaintForm) {\r\n        const isMobileDevice = \"desktop\" !== devices.current().deviceType;\r\n        const editPopupClass = this.addWidgetPrefix(EDIT_POPUP_CLASS);\r\n        const popupOptions = extend({\r\n            showTitle: false,\r\n            fullScreen: isMobileDevice,\r\n            wrapperAttr: {\r\n                class: editPopupClass\r\n            },\r\n            toolbarItems: [{\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                widget: \"dxButton\",\r\n                options: this._getSaveButtonConfig()\r\n            }, {\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                widget: \"dxButton\",\r\n                options: this._getCancelButtonConfig()\r\n            }],\r\n            contentTemplate: this._getPopupEditFormTemplate(rowIndex)\r\n        }, this.option(EDITING_POPUP_OPTION_NAME));\r\n        if (!this._editPopup) {\r\n            const $popupContainer = $(\"<div>\").appendTo(this.component.$element()).addClass(editPopupClass);\r\n            this._editPopup = this._createComponent($popupContainer, Popup);\r\n            this._editPopup.on(\"hiding\", this._getEditPopupHiddenHandler());\r\n            this._editPopup.on(\"shown\", (e => {\r\n                eventsEngine.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(`.${FOCUSABLE_ELEMENT_CLASS}`).first(), \"focus\");\r\n                if (repaintForm) {\r\n                    var _this$_editForm;\r\n                    null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm || _this$_editForm.repaint()\r\n                }\r\n            }))\r\n        }\r\n        this._editPopup.option(popupOptions);\r\n        this._editPopup.show();\r\n        super._showEditPopup(rowIndex, repaintForm)\r\n    }\r\n    _getPopupEditFormTemplate(rowIndex) {\r\n        const row = this.component.getVisibleRows()[rowIndex];\r\n        const templateOptions = {\r\n            row: row,\r\n            values: row.values,\r\n            rowType: row.rowType,\r\n            key: row.key,\r\n            rowIndex: rowIndex\r\n        };\r\n        this._rowsView._addWatchMethod(templateOptions, row);\r\n        return container => {\r\n            const formTemplate = this.getEditFormTemplate();\r\n            const scrollable = this._createComponent($(\"<div>\").appendTo(container), Scrollable);\r\n            this._$popupContent = $(scrollable.content());\r\n            formTemplate(this._$popupContent, templateOptions, {\r\n                isPopupForm: true\r\n            });\r\n            this._rowsView.renderDelayedTemplates();\r\n            $(container).parent().attr(\"aria-label\", this.localize(\"dxDataGrid-ariaEditForm\"))\r\n        }\r\n    }\r\n    _repaintEditPopup() {\r\n        const rowIndex = this._getVisibleEditRowIndex();\r\n        if (rowIndex >= 0) {\r\n            var _this$_editPopup2, _this$_editPopup3;\r\n            const defaultAnimation = null === (_this$_editPopup2 = this._editPopup) || void 0 === _this$_editPopup2 ? void 0 : _this$_editPopup2.option(\"animation\");\r\n            null === (_this$_editPopup3 = this._editPopup) || void 0 === _this$_editPopup3 || _this$_editPopup3.option(\"animation\", null);\r\n            this._showEditPopup(rowIndex, true);\r\n            if (void 0 !== defaultAnimation) {\r\n                this._editPopup.option(\"animation\", defaultAnimation)\r\n            }\r\n        }\r\n    }\r\n    _hideEditPopup() {\r\n        var _this$_editPopup4;\r\n        null === (_this$_editPopup4 = this._editPopup) || void 0 === _this$_editPopup4 || _this$_editPopup4.option(\"visible\", false)\r\n    }\r\n    optionChanged(args) {\r\n        if (\"editing\" === args.name && this.isFormOrPopupEditMode()) {\r\n            const {\r\n                fullName: fullName\r\n            } = args;\r\n            if (0 === fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\r\n                this._handleFormOptionChange(args);\r\n                args.handled = true\r\n            } else if (0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\r\n                this._handlePopupOptionChange(args);\r\n                args.handled = true\r\n            }\r\n        }\r\n        super.optionChanged(args)\r\n    }\r\n    _handleFormOptionChange(args) {\r\n        var _this$_editPopup5;\r\n        if (this.isFormEditMode()) {\r\n            const editRowIndex = this._getVisibleEditRowIndex();\r\n            if (editRowIndex >= 0) {\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [editRowIndex]\r\n                })\r\n            }\r\n        } else if (null !== (_this$_editPopup5 = this._editPopup) && void 0 !== _this$_editPopup5 && _this$_editPopup5.option(\"visible\") && 0 === args.fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\r\n            this._repaintEditPopup()\r\n        }\r\n    }\r\n    _handlePopupOptionChange(args) {\r\n        const editPopup = this._editPopup;\r\n        if (editPopup) {\r\n            const popupOptionName = args.fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\r\n            if (popupOptionName) {\r\n                editPopup.option(popupOptionName, args.value)\r\n            } else {\r\n                editPopup.option(args.value)\r\n            }\r\n        }\r\n    }\r\n    renderFormEditorTemplate(detailCellOptions, item, formTemplateOptions, container, isReadOnly) {\r\n        const that = this;\r\n        const $container = $(container);\r\n        const {\r\n            column: column\r\n        } = item;\r\n        const editorType = getEditorType(item);\r\n        const row = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row;\r\n        const rowData = null === row || void 0 === row ? void 0 : row.data;\r\n        const form = formTemplateOptions.component;\r\n        const value = column.calculateCellValue(rowData);\r\n        const displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, null === row || void 0 === row ? void 0 : row.rowType);\r\n        const {\r\n            label: label,\r\n            labelMark: labelMark,\r\n            labelMode: labelMode\r\n        } = formTemplateOptions.editorOptions || {};\r\n        const cellOptions = extend({}, detailCellOptions, {\r\n            data: rowData,\r\n            cellElement: null,\r\n            isOnForm: true,\r\n            item: item,\r\n            id: form.getItemID(item.name || item.dataField),\r\n            column: extend({}, column, {\r\n                editorType: editorType,\r\n                editorOptions: extend({\r\n                    label: label,\r\n                    labelMark: labelMark,\r\n                    labelMode: labelMode\r\n                }, column.editorOptions, item.editorOptions)\r\n            }),\r\n            columnIndex: column.index,\r\n            setValue: !isReadOnly && column.allowEditing && function(value, text) {\r\n                that.updateFieldValue(cellOptions, value, text)\r\n            }\r\n        });\r\n        cellOptions.value = value;\r\n        cellOptions.displayValue = displayValue;\r\n        cellOptions.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\r\n        const template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);\r\n        this._rowsView.renderTemplate($container, template, cellOptions, !!isElementInDom($container)).done((() => {\r\n            this._rowsView._updateCell($container, cellOptions)\r\n        }));\r\n        return cellOptions\r\n    }\r\n    getFormEditorTemplate(cellOptions, item) {\r\n        const column = this.component.columnOption(item.name || item.dataField);\r\n        return (options, container) => {\r\n            const $container = $(container);\r\n            const {\r\n                row: row\r\n            } = cellOptions;\r\n            if (null !== row && void 0 !== row && row.watch) {\r\n                const dispose = row.watch((() => column.selector(row.data)), (() => {\r\n                    var _validator;\r\n                    let $editorElement = $container.find(\".dx-widget\").first();\r\n                    let validator = $editorElement.data(\"dxValidator\");\r\n                    const validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\r\n                    $container.contents().remove();\r\n                    cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options, $container);\r\n                    $editorElement = $container.find(\".dx-widget\").first();\r\n                    validator = $editorElement.data(\"dxValidator\");\r\n                    if (validatorOptions && !validator) {\r\n                        $editorElement.dxValidator({\r\n                            validationRules: validatorOptions.validationRules,\r\n                            validationGroup: validatorOptions.validationGroup,\r\n                            dataGetter: validatorOptions.dataGetter\r\n                        })\r\n                    }\r\n                }));\r\n                eventsEngine.on($container, removeEvent, dispose)\r\n            }\r\n            cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options, $container)\r\n        }\r\n    }\r\n    getEditFormOptions(detailOptions) {\r\n        var _this$_getValidationG;\r\n        const editFormOptions = null === (_this$_getValidationG = this._getValidationGroupsInForm) || void 0 === _this$_getValidationG ? void 0 : _this$_getValidationG.call(this, detailOptions);\r\n        const userCustomizeItem = this.option(\"editing.form.customizeItem\");\r\n        const editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\r\n        let items = this.option(\"editing.form.items\");\r\n        const isCustomEditorType = {};\r\n        if (!items) {\r\n            const columns = this._columnsController.getColumns();\r\n            items = [];\r\n            each(columns, ((_, column) => {\r\n                if (!column.isBand && !column.type) {\r\n                    items.push({\r\n                        column: column,\r\n                        name: column.name,\r\n                        dataField: column.dataField\r\n                    })\r\n                }\r\n            }))\r\n        } else {\r\n            forEachFormItems(items, (item => {\r\n                const itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\r\n                if (itemId) {\r\n                    isCustomEditorType[itemId] = !!item.editorType\r\n                }\r\n            }))\r\n        }\r\n        return extend({}, editFormOptions, {\r\n            items: items,\r\n            formID: `dx-${new Guid}`,\r\n            customizeItem: item => {\r\n                let column;\r\n                const itemId = item.name || item.dataField;\r\n                if (item.column || itemId) {\r\n                    column = item.column || this._columnsController.columnOption(item.name ? `name:${item.name}` : `dataField:${item.dataField}`)\r\n                }\r\n                if (column) {\r\n                    item.label = item.label || {};\r\n                    item.label.text = item.label.text || column.caption;\r\n                    if (\"boolean\" === column.dataType && void 0 === item.label.visible) {\r\n                        const labelMode = this.option(\"editing.form.labelMode\");\r\n                        if (\"floating\" === labelMode || \"static\" === labelMode) {\r\n                            item.label.visible = true\r\n                        }\r\n                    }\r\n                    item.template = item.template || this.getFormEditorTemplate(detailOptions, item);\r\n                    item.column = column;\r\n                    item.isCustomEditorType = isCustomEditorType[itemId];\r\n                    if (column.formItem) {\r\n                        extend(item, column.formItem)\r\n                    }\r\n                    if (void 0 === item.isRequired && column.validationRules) {\r\n                        item.isRequired = column.validationRules.some((rule => \"required\" === rule.type));\r\n                        item.validationRules = []\r\n                    }\r\n                    const itemVisible = isDefined(item.visible) ? item.visible : true;\r\n                    if (!this._firstFormItem && itemVisible) {\r\n                        this._firstFormItem = item\r\n                    }\r\n                }\r\n                null === userCustomizeItem || void 0 === userCustomizeItem || userCustomizeItem.call(this, item);\r\n                item.cssClass = isString(item.cssClass) ? `${item.cssClass} ${editFormItemClass}` : editFormItemClass\r\n            }\r\n        })\r\n    }\r\n    getEditFormTemplate() {\r\n        return ($container, detailOptions, options) => {\r\n            const editFormOptions = this.option(EDITING_FORM_OPTION_NAME);\r\n            const baseEditFormOptions = this.getEditFormOptions(detailOptions);\r\n            const $formContainer = $(\"<div>\").appendTo($container);\r\n            const isPopupForm = null === options || void 0 === options ? void 0 : options.isPopupForm;\r\n            this._firstFormItem = void 0;\r\n            if (isPopupForm) {\r\n                $formContainer.addClass(this.addWidgetPrefix(EDIT_POPUP_FORM_CLASS))\r\n            }\r\n            this._editForm = this._createComponent($formContainer, Form, extend({}, editFormOptions, baseEditFormOptions));\r\n            if (!isPopupForm) {\r\n                const $buttonsContainer = $(\"<div>\").addClass(this.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\r\n                this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getSaveButtonConfig());\r\n                this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getCancelButtonConfig())\r\n            }\r\n            this._editForm.on(\"contentReady\", (() => {\r\n                var _this$_editPopup6;\r\n                this._rowsView.renderDelayedTemplates();\r\n                null === (_this$_editPopup6 = this._editPopup) || void 0 === _this$_editPopup6 || _this$_editPopup6.repaint()\r\n            }))\r\n        }\r\n    }\r\n    getEditForm() {\r\n        return this._editForm\r\n    }\r\n    _endUpdateCore() {\r\n        var _this$_updateEditForm;\r\n        null === (_this$_updateEditForm = this._updateEditFormDeferred) || void 0 === _this$_updateEditForm || _this$_updateEditForm.resolve()\r\n    }\r\n    _beforeEndSaving(changes) {\r\n        super._beforeEndSaving(changes);\r\n        if (this.isPopupEditMode()) {\r\n            var _this$_editPopup7;\r\n            null === (_this$_editPopup7 = this._editPopup) || void 0 === _this$_editPopup7 || _this$_editPopup7.hide()\r\n        }\r\n    }\r\n    _processDataItemCore(item, change, key, columns, generateDataValues) {\r\n        const {\r\n            type: type\r\n        } = change;\r\n        if (this.isPopupEditMode() && type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n            item.visible = false\r\n        }\r\n        super._processDataItemCore(item, change, key, columns, generateDataValues)\r\n    }\r\n    _editRowFromOptionChangedCore(rowIndices, rowIndex) {\r\n        const isPopupEditMode = this.isPopupEditMode();\r\n        super._editRowFromOptionChangedCore(rowIndices, rowIndex, isPopupEditMode);\r\n        if (isPopupEditMode) {\r\n            this._showEditPopup(rowIndex)\r\n        }\r\n    }\r\n};\r\nconst data = Base => class extends Base {\r\n    _updateEditItem(item) {\r\n        if (this._editingController.isFormEditMode()) {\r\n            item.rowType = \"detail\"\r\n        }\r\n    }\r\n    _getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n        if (false === isLiveUpdate && newItem.isEditing && this._editingController.isFormEditMode()) {\r\n            return\r\n        }\r\n        return super._getChangedColumnIndices.apply(this, arguments)\r\n    }\r\n};\r\nconst rowsView = Base => class extends Base {\r\n    _renderCellContent($cell, options) {\r\n        if (\"data\" === options.rowType && this._editingController.isPopupEditMode() && false === options.row.visible) {\r\n            return\r\n        }\r\n        super._renderCellContent.apply(this, arguments)\r\n    }\r\n    getCellElements(rowIndex) {\r\n        const $cellElements = super.getCellElements(rowIndex);\r\n        const editingController = this._editingController;\r\n        const editForm = editingController.getEditForm();\r\n        const editFormRowIndex = editingController.getEditFormRowIndex();\r\n        if (editFormRowIndex === rowIndex && $cellElements && editForm) {\r\n            return editForm.$element().find(`.${this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS)}, .${BUTTON_CLASS}`)\r\n        }\r\n        return $cellElements\r\n    }\r\n    _getVisibleColumnIndex($cells, rowIndex, columnIdentifier) {\r\n        const editFormRowIndex = this._editingController.getEditFormRowIndex();\r\n        if (editFormRowIndex === rowIndex && isString(columnIdentifier)) {\r\n            const column = this._columnsController.columnOption(columnIdentifier);\r\n            return this._getEditFormEditorVisibleIndex($cells, column)\r\n        }\r\n        return super._getVisibleColumnIndex.apply(this, arguments)\r\n    }\r\n    _getEditFormEditorVisibleIndex($cells, column) {\r\n        let visibleIndex = -1;\r\n        each($cells, ((index, cellElement) => {\r\n            const item = $(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\r\n            if (null !== item && void 0 !== item && item.column && column && item.column.index === column.index) {\r\n                visibleIndex = index;\r\n                return false\r\n            }\r\n        }));\r\n        return visibleIndex\r\n    }\r\n    _isFormItem(parameters) {\r\n        const isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\r\n        const isPopupEditing = \"data\" === parameters.rowType && this._editingController.isPopupEditMode();\r\n        return (isDetailRow || isPopupEditing) && parameters.item\r\n    }\r\n    _updateCell($cell, parameters) {\r\n        if (this._isFormItem(parameters)) {\r\n            this._formItemPrepared(parameters, $cell)\r\n        } else {\r\n            super._updateCell($cell, parameters)\r\n        }\r\n    }\r\n    _updateContent() {\r\n        const editingController = this._editingController;\r\n        const oldEditForm = editingController.getEditForm();\r\n        const validationGroup = null === oldEditForm || void 0 === oldEditForm ? void 0 : oldEditForm.option(\"validationGroup\");\r\n        const deferred = super._updateContent.apply(this, arguments);\r\n        return deferred.done((() => {\r\n            const newEditForm = editingController.getEditForm();\r\n            if (validationGroup && newEditForm && newEditForm !== oldEditForm) {\r\n                newEditForm.option(\"validationGroup\", validationGroup)\r\n            }\r\n        }))\r\n    }\r\n};\r\nexport const editingFormBasedModule = {\r\n    extenders: {\r\n        controllers: {\r\n            editing: editingControllerExtender,\r\n            data: data\r\n        },\r\n        views: {\r\n            rowsView: rowsView\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,YAAY,MAAM,mDAAmD;AAC5E,SACIC,WAAW,QACR,uCAAuC;AAC9C,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,CAAC,MAAM,2BAA2B;AACzC,SACIC,YAAY,QACT,+BAA+B;AACtC,SACIC,QAAQ,QACL,iCAAiC;AACxC,SACIC,cAAc,QACX,4BAA4B;AACnC,SACIC,MAAM,QACH,+BAA+B;AACtC,SACIC,IAAI,QACD,iCAAiC;AACxC,SACIC,SAAS,EACTC,QAAQ,QACL,6BAA6B;AACpC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,KAAK,MAAM,+BAA+B;AACjD,OAAOC,UAAU,MAAM,0CAA0C;AACjE,OAAOC,aAAa,MAAM,YAAY;AACtC,SACIC,YAAY,EACZC,0BAA0B,EAC1BC,oBAAoB,EACpBC,cAAc,EACdC,gBAAgB,EAChBC,qBAAqB,EACrBC,8BAA8B,EAC9BC,wBAAwB,EACxBC,yBAAyB,EACzBC,uBAAuB,EACvBC,0BAA0B,EAC1BC,4BAA4B,QACzB,SAAS;AAChB,SACIC,gBAAgB,EAChBC,aAAa,QACV,mBAAmB;AAC1B,MAAMC,yBAAyB,GAAGC,IAAI,IAAI,cAAcA,IAAI,CAAC;EACzDC,IAAIA,CAAA,EAAG;IACH,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,uBAAuB,GAAG,IAAI;IACnC,KAAK,CAACF,IAAI,CAAC,CAAC;EAChB;EACAG,SAASA,CAACC,QAAQ,EAAE;IAChB,OAAO,CAAC,IAAI,CAACC,eAAe,CAAC,CAAC,IAAI,KAAK,CAACF,SAAS,CAACC,QAAQ,CAAC;EAC/D;EACAE,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACD,eAAe,CAAC,CAAC,IAAI,IAAI,CAACE,cAAc,CAAC,CAAC;EAC1D;EACAA,cAAcA,CAAA,EAAG;IACb,MAAMC,QAAQ,GAAG,IAAI,CAACC,MAAM,CAAC,cAAc,CAAC;IAC5C,OAAOD,QAAQ,KAAKrB,cAAc;EACtC;EACAuB,2BAA2BA,CAAA,EAAG;IAC1B,MAAMC,aAAa,GAAG,IAAI,CAACC,cAAc;IACzC,IAAI,IAAI,CAACL,cAAc,CAAC,CAAC,IAAII,aAAa,EAAE;MACxC,MAAME,UAAU,GAAG,IAAI,CAACJ,MAAM,CAACnB,8BAA8B,CAAC;MAC9D,MAAMwB,YAAY,GAAG,IAAI,CAACC,eAAe,CAACC,gBAAgB,CAACH,UAAU,CAAC;MACtE,MAAMI,iBAAiB,GAAG,IAAI,CAACC,SAAS,CAACC,eAAe,CAACL,YAAY,CAAC;MACtE,OAAO,IAAI,CAACI,SAAS,CAACE,8BAA8B,CAACH,iBAAiB,EAAEN,aAAa,CAACU,MAAM,CAAC;IACjG;IACA,OAAO,KAAK,CAACX,2BAA2B,CAAC,CAAC;EAC9C;EACAY,mBAAmBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAChB,qBAAqB,CAAC,CAAC,GAAG,IAAI,CAACiB,uBAAuB,CAAC,CAAC,GAAG,KAAK,CAACD,mBAAmB,CAAC,CAAC;EACtG;EACAE,oBAAoBA,CAAA,EAAG;IACnB,MAAMC,MAAM,GAAG,KAAK,CAACD,oBAAoB,CAAC,CAAC;IAC3C,MAAME,cAAc,GAAG,IAAI,CAACjB,MAAM,CAAC,SAAS,CAAC;IAC7C,OAAO,IAAI,CAACH,qBAAqB,CAAC,CAAC,GAAGoB,cAAc,CAACC,aAAa,IAAIF,MAAM,GAAGA,MAAM;EACzF;EACAG,kBAAkBA,CAACC,IAAI,EAAE;IACrB,IAAI,IAAI,CAACxB,eAAe,CAAC,CAAC,EAAE;MACxB,IAAIyB,WAAW,EAAEC,iBAAiB;MAClC,MAAMlB,UAAU,GAAG,IAAI,CAACJ,MAAM,CAAC,oBAAoB,CAAC;MACpD,MAAMuB,UAAU,GAAG,IAAI,KAAKH,IAAI,IAAI,KAAK,CAAC,KAAKA,IAAI,IAAI,IAAI,MAAMC,WAAW,GAAGD,IAAI,CAACI,KAAK,CAAC,IAAI,KAAK,CAAC,KAAKH,WAAW,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACI,IAAI,CAAEC,IAAI,IAAI/D,YAAY,CAAC+D,IAAI,CAACC,GAAG,EAAEvB,UAAU,CAAE,CAAC;MAC9L,MAAMwB,iBAAiB,GAAG,CAAC,IAAI,MAAMN,iBAAiB,GAAGF,IAAI,CAACS,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKP,iBAAiB,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACQ,MAAM,KAAKV,IAAI,CAACS,WAAW,CAACE,KAAK,CAAEL,IAAI,IAAI,QAAQ,KAAKA,IAAK,CAAC;MACtM,IAAI,CAAC,SAAS,KAAKN,IAAI,CAACY,UAAU,IAAIT,UAAU,IAAIH,IAAI,CAACa,eAAe,KAAK,CAACL,iBAAiB,EAAE;QAC7F,IAAI,CAACM,iBAAiB,CAAC,CAAC;MAC5B;IACJ;IACA,KAAK,CAACf,kBAAkB,CAACC,IAAI,CAAC;EAClC;EACAe,eAAeA,CAAA,EAAG;IACd,IAAIC,gBAAgB;IACpB,MAAMC,YAAY,GAAG,IAAI,MAAMD,gBAAgB,GAAG,IAAI,CAACE,UAAU,CAAC,IAAI,KAAK,CAAC,KAAKF,gBAAgB,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACpC,MAAM,CAAC,SAAS,CAAC;IAC/I,IAAI,IAAI,CAACJ,eAAe,CAAC,CAAC,IAAIyC,YAAY,EAAE;MACxC,OAAO,IAAI,CAACE,cAAc;IAC9B;EACJ;EACAC,aAAaA,CAAC7C,QAAQ,EAAE;IACpB,IAAI,IAAI,CAACC,eAAe,CAAC,CAAC,EAAE;MACxB,IAAI,CAAC6C,cAAc,CAAC9C,QAAQ,CAAC;IACjC,CAAC,MAAM;MACH,KAAK,CAAC6C,aAAa,CAAC7C,QAAQ,CAAC;IACjC;EACJ;EACA+C,mBAAmBA,CAAA,EAAG;IAClB,KAAK,CAACA,mBAAmB,CAAC,CAAC;IAC3B,IAAI,IAAI,CAAC9C,eAAe,CAAC,CAAC,EAAE;MACxB,IAAI,CAAC+C,cAAc,CAAC,CAAC;IACzB;EACJ;EACAC,kBAAkBA,CAACC,GAAG,EAAEC,cAAc,EAAEC,oBAAoB,EAAE;IAC1D,MAAMC,QAAQ,GAAG,IAAI,CAACxD,SAAS;IAC/B,IAAI,IAAI,CAACI,eAAe,CAAC,CAAC,EAAE;MACxB,IAAI,IAAI,CAACI,MAAM,CAAC,oBAAoB,CAAC,EAAE;QACnC,IAAIiD,WAAW;QACf,IAAI,MAAMA,WAAW,GAAGJ,GAAG,CAACK,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKD,WAAW,IAAIA,WAAW,CAACE,IAAI,CAACN,GAAG,EAAEA,GAAG,CAAC;QAC3F,IAAI,CAACpC,SAAS,CAAC2C,sBAAsB,CAAC,CAAC;MAC3C,CAAC,MAAM,IAAIJ,QAAQ,EAAE;QACjB,IAAI,CAACvD,uBAAuB,GAAI,IAAI7B,QAAQ,CAAD,CAAC,CAAEyF,IAAI,CAAE,MAAML,QAAQ,CAACM,OAAO,CAAC,CAAE,CAAC;QAC9E,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;UACxB,IAAI,CAAC9D,uBAAuB,CAAC+D,OAAO,CAAC,CAAC;QAC1C;MACJ;IACJ,CAAC,MAAM;MACH,KAAK,CAACZ,kBAAkB,CAACC,GAAG,EAAEC,cAAc,EAAEC,oBAAoB,CAAC;IACvE;EACJ;EACAN,cAAcA,CAAC9C,QAAQ,EAAE8D,WAAW,EAAE;IAClC,MAAMC,cAAc,GAAG,SAAS,KAAKlG,OAAO,CAACmG,OAAO,CAAC,CAAC,CAACC,UAAU;IACjE,MAAMC,cAAc,GAAG,IAAI,CAACC,eAAe,CAACnF,gBAAgB,CAAC;IAC7D,MAAMoF,YAAY,GAAGjG,MAAM,CAAC;MACxBkG,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAEP,cAAc;MAC1BQ,WAAW,EAAE;QACTC,KAAK,EAAEN;MACX,CAAC;MACDO,YAAY,EAAE,CAAC;QACXC,OAAO,EAAE,QAAQ;QACjBC,QAAQ,EAAE,OAAO;QACjBC,MAAM,EAAE,UAAU;QAClBC,OAAO,EAAE,IAAI,CAACC,oBAAoB,CAAC;MACvC,CAAC,EAAE;QACCJ,OAAO,EAAE,QAAQ;QACjBC,QAAQ,EAAE,OAAO;QACjBC,MAAM,EAAE,UAAU;QAClBC,OAAO,EAAE,IAAI,CAACE,sBAAsB,CAAC;MACzC,CAAC,CAAC;MACFC,eAAe,EAAE,IAAI,CAACC,yBAAyB,CAACjF,QAAQ;IAC5D,CAAC,EAAE,IAAI,CAACK,MAAM,CAACjB,yBAAyB,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI,CAACuD,UAAU,EAAE;MAClB,MAAMuC,eAAe,GAAGnH,CAAC,CAAC,OAAO,CAAC,CAACoH,QAAQ,CAAC,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACpB,cAAc,CAAC;MAC/F,IAAI,CAACvB,UAAU,GAAG,IAAI,CAAC4C,gBAAgB,CAACL,eAAe,EAAEzG,KAAK,CAAC;MAC/D,IAAI,CAACkE,UAAU,CAAC6C,EAAE,CAAC,QAAQ,EAAE,IAAI,CAACC,0BAA0B,CAAC,CAAC,CAAC;MAC/D,IAAI,CAAC9C,UAAU,CAAC6C,EAAE,CAAC,OAAO,EAAGE,CAAC,IAAI;QAC9B/H,YAAY,CAACgI,OAAO,CAACD,CAAC,CAACN,SAAS,CAACQ,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACvG,0BAA0B,CAAC,CAACwG,GAAG,CAAC,IAAIzG,uBAAuB,EAAE,CAAC,CAAC0G,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC;QACjI,IAAIjC,WAAW,EAAE;UACb,IAAIkC,eAAe;UACnB,IAAI,MAAMA,eAAe,GAAG,IAAI,CAACnG,SAAS,CAAC,IAAI,KAAK,CAAC,KAAKmG,eAAe,IAAIA,eAAe,CAACrC,OAAO,CAAC,CAAC;QAC1G;MACJ,CAAE,CAAC;IACP;IACA,IAAI,CAAChB,UAAU,CAACtC,MAAM,CAAC+D,YAAY,CAAC;IACpC,IAAI,CAACzB,UAAU,CAACsD,IAAI,CAAC,CAAC;IACtB,KAAK,CAACnD,cAAc,CAAC9C,QAAQ,EAAE8D,WAAW,CAAC;EAC/C;EACAmB,yBAAyBA,CAACjF,QAAQ,EAAE;IAChC,MAAMkD,GAAG,GAAG,IAAI,CAACkC,SAAS,CAACc,cAAc,CAAC,CAAC,CAAClG,QAAQ,CAAC;IACrD,MAAMmG,eAAe,GAAG;MACpBjD,GAAG,EAAEA,GAAG;MACRkD,MAAM,EAAElD,GAAG,CAACkD,MAAM;MAClBC,OAAO,EAAEnD,GAAG,CAACmD,OAAO;MACpBrE,GAAG,EAAEkB,GAAG,CAAClB,GAAG;MACZhC,QAAQ,EAAEA;IACd,CAAC;IACD,IAAI,CAACc,SAAS,CAACwF,eAAe,CAACH,eAAe,EAAEjD,GAAG,CAAC;IACpD,OAAOqD,SAAS,IAAI;MAChB,MAAMC,YAAY,GAAG,IAAI,CAACC,mBAAmB,CAAC,CAAC;MAC/C,MAAMC,UAAU,GAAG,IAAI,CAACnB,gBAAgB,CAACxH,CAAC,CAAC,OAAO,CAAC,CAACoH,QAAQ,CAACoB,SAAS,CAAC,EAAE7H,UAAU,CAAC;MACpF,IAAI,CAACkE,cAAc,GAAG7E,CAAC,CAAC2I,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC;MAC7CH,YAAY,CAAC,IAAI,CAAC5D,cAAc,EAAEuD,eAAe,EAAE;QAC/CS,WAAW,EAAE;MACjB,CAAC,CAAC;MACF,IAAI,CAAC9F,SAAS,CAAC2C,sBAAsB,CAAC,CAAC;MACvC1F,CAAC,CAACwI,SAAS,CAAC,CAACM,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,YAAY,EAAE,IAAI,CAACC,QAAQ,CAAC,yBAAyB,CAAC,CAAC;IACtF,CAAC;EACL;EACAxE,iBAAiBA,CAAA,EAAG;IAChB,MAAMvC,QAAQ,GAAG,IAAI,CAACmB,uBAAuB,CAAC,CAAC;IAC/C,IAAInB,QAAQ,IAAI,CAAC,EAAE;MACf,IAAIgH,iBAAiB,EAAEC,iBAAiB;MACxC,MAAMC,gBAAgB,GAAG,IAAI,MAAMF,iBAAiB,GAAG,IAAI,CAACrE,UAAU,CAAC,IAAI,KAAK,CAAC,KAAKqE,iBAAiB,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAAC3G,MAAM,CAAC,WAAW,CAAC;MACxJ,IAAI,MAAM4G,iBAAiB,GAAG,IAAI,CAACtE,UAAU,CAAC,IAAI,KAAK,CAAC,KAAKsE,iBAAiB,IAAIA,iBAAiB,CAAC5G,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;MAC7H,IAAI,CAACyC,cAAc,CAAC9C,QAAQ,EAAE,IAAI,CAAC;MACnC,IAAI,KAAK,CAAC,KAAKkH,gBAAgB,EAAE;QAC7B,IAAI,CAACvE,UAAU,CAACtC,MAAM,CAAC,WAAW,EAAE6G,gBAAgB,CAAC;MACzD;IACJ;EACJ;EACAlE,cAAcA,CAAA,EAAG;IACb,IAAImE,iBAAiB;IACrB,IAAI,MAAMA,iBAAiB,GAAG,IAAI,CAACxE,UAAU,CAAC,IAAI,KAAK,CAAC,KAAKwE,iBAAiB,IAAIA,iBAAiB,CAAC9G,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;EAChI;EACA+G,aAAaA,CAAC3F,IAAI,EAAE;IAChB,IAAI,SAAS,KAAKA,IAAI,CAAC4F,IAAI,IAAI,IAAI,CAACnH,qBAAqB,CAAC,CAAC,EAAE;MACzD,MAAM;QACFoH,QAAQ,EAAEA;MACd,CAAC,GAAG7F,IAAI;MACR,IAAI,CAAC,KAAK6F,QAAQ,CAACC,OAAO,CAACpI,wBAAwB,CAAC,EAAE;QAClD,IAAI,CAACqI,uBAAuB,CAAC/F,IAAI,CAAC;QAClCA,IAAI,CAACgG,OAAO,GAAG,IAAI;MACvB,CAAC,MAAM,IAAI,CAAC,KAAKH,QAAQ,CAACC,OAAO,CAACnI,yBAAyB,CAAC,EAAE;QAC1D,IAAI,CAACsI,wBAAwB,CAACjG,IAAI,CAAC;QACnCA,IAAI,CAACgG,OAAO,GAAG,IAAI;MACvB;IACJ;IACA,KAAK,CAACL,aAAa,CAAC3F,IAAI,CAAC;EAC7B;EACA+F,uBAAuBA,CAAC/F,IAAI,EAAE;IAC1B,IAAIkG,iBAAiB;IACrB,IAAI,IAAI,CAACxH,cAAc,CAAC,CAAC,EAAE;MACvB,MAAMO,YAAY,GAAG,IAAI,CAACS,uBAAuB,CAAC,CAAC;MACnD,IAAIT,YAAY,IAAI,CAAC,EAAE;QACnB,IAAI,CAACC,eAAe,CAACiH,WAAW,CAAC;UAC7BvF,UAAU,EAAE,QAAQ;UACpBwF,UAAU,EAAE,CAACnH,YAAY;QAC7B,CAAC,CAAC;MACN;IACJ,CAAC,MAAM,IAAI,IAAI,MAAMiH,iBAAiB,GAAG,IAAI,CAAChF,UAAU,CAAC,IAAI,KAAK,CAAC,KAAKgF,iBAAiB,IAAIA,iBAAiB,CAACtH,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAKoB,IAAI,CAAC6F,QAAQ,CAACC,OAAO,CAACpI,wBAAwB,CAAC,EAAE;MACvL,IAAI,CAACoD,iBAAiB,CAAC,CAAC;IAC5B;EACJ;EACAmF,wBAAwBA,CAACjG,IAAI,EAAE;IAC3B,MAAMqG,SAAS,GAAG,IAAI,CAACnF,UAAU;IACjC,IAAImF,SAAS,EAAE;MACX,MAAMC,eAAe,GAAGtG,IAAI,CAAC6F,QAAQ,CAACU,KAAK,CAAC5I,yBAAyB,CAAC+C,MAAM,GAAG,CAAC,CAAC;MACjF,IAAI4F,eAAe,EAAE;QACjBD,SAAS,CAACzH,MAAM,CAAC0H,eAAe,EAAEtG,IAAI,CAACwG,KAAK,CAAC;MACjD,CAAC,MAAM;QACHH,SAAS,CAACzH,MAAM,CAACoB,IAAI,CAACwG,KAAK,CAAC;MAChC;IACJ;EACJ;EACAC,wBAAwBA,CAACC,iBAAiB,EAAEpG,IAAI,EAAEqG,mBAAmB,EAAE7B,SAAS,EAAE8B,UAAU,EAAE;IAC1F,MAAMC,IAAI,GAAG,IAAI;IACjB,MAAMC,UAAU,GAAGxK,CAAC,CAACwI,SAAS,CAAC;IAC/B,MAAM;MACFtF,MAAM,EAAEA;IACZ,CAAC,GAAGc,IAAI;IACR,MAAMyG,UAAU,GAAG/I,aAAa,CAACsC,IAAI,CAAC;IACtC,MAAMmB,GAAG,GAAG,IAAI,KAAKiF,iBAAiB,IAAI,KAAK,CAAC,KAAKA,iBAAiB,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACjF,GAAG;IACvG,MAAMuF,OAAO,GAAG,IAAI,KAAKvF,GAAG,IAAI,KAAK,CAAC,KAAKA,GAAG,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACwF,IAAI;IAClE,MAAMC,IAAI,GAAGP,mBAAmB,CAAChD,SAAS;IAC1C,MAAM6C,KAAK,GAAGhH,MAAM,CAAC2H,kBAAkB,CAACH,OAAO,CAAC;IAChD,MAAMI,YAAY,GAAGlK,aAAa,CAACmK,eAAe,CAAC7H,MAAM,EAAEgH,KAAK,EAAEQ,OAAO,EAAE,IAAI,KAAKvF,GAAG,IAAI,KAAK,CAAC,KAAKA,GAAG,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACmD,OAAO,CAAC;IACjI,MAAM;MACF0C,KAAK,EAAEA,KAAK;MACZC,SAAS,EAAEA,SAAS;MACpBC,SAAS,EAAEA;IACf,CAAC,GAAGb,mBAAmB,CAACc,aAAa,IAAI,CAAC,CAAC;IAC3C,MAAMC,WAAW,GAAGhL,MAAM,CAAC,CAAC,CAAC,EAAEgK,iBAAiB,EAAE;MAC9CO,IAAI,EAAED,OAAO;MACbW,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAE,IAAI;MACdtH,IAAI,EAAEA,IAAI;MACVuH,EAAE,EAAEX,IAAI,CAACY,SAAS,CAACxH,IAAI,CAACsF,IAAI,IAAItF,IAAI,CAACyH,SAAS,CAAC;MAC/CvI,MAAM,EAAE9C,MAAM,CAAC,CAAC,CAAC,EAAE8C,MAAM,EAAE;QACvBuH,UAAU,EAAEA,UAAU;QACtBU,aAAa,EAAE/K,MAAM,CAAC;UAClB4K,KAAK,EAAEA,KAAK;UACZC,SAAS,EAAEA,SAAS;UACpBC,SAAS,EAAEA;QACf,CAAC,EAAEhI,MAAM,CAACiI,aAAa,EAAEnH,IAAI,CAACmH,aAAa;MAC/C,CAAC,CAAC;MACFO,WAAW,EAAExI,MAAM,CAACyI,KAAK;MACzBC,QAAQ,EAAE,CAACtB,UAAU,IAAIpH,MAAM,CAAC2I,YAAY,IAAI,UAAS3B,KAAK,EAAE4B,IAAI,EAAE;QAClEvB,IAAI,CAACwB,gBAAgB,CAACX,WAAW,EAAElB,KAAK,EAAE4B,IAAI,CAAC;MACnD;IACJ,CAAC,CAAC;IACFV,WAAW,CAAClB,KAAK,GAAGA,KAAK;IACzBkB,WAAW,CAACN,YAAY,GAAGA,YAAY;IACvCM,WAAW,CAACU,IAAI,GAAG,CAAC5I,MAAM,CAAC8I,OAAO,GAAGpL,aAAa,CAACqL,WAAW,CAACnB,YAAY,EAAE5H,MAAM,CAAC,GAAG,EAAE;IACzF,MAAMgJ,QAAQ,GAAG,IAAI,CAACC,wBAAwB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAChB,WAAW,EAAElI,MAAM,CAAC;IAC9E,IAAI,CAACH,SAAS,CAACsJ,cAAc,CAAC7B,UAAU,EAAE0B,QAAQ,EAAEd,WAAW,EAAE,CAAC,CAACjL,cAAc,CAACqK,UAAU,CAAC,CAAC,CAAC7E,IAAI,CAAE,MAAM;MACvG,IAAI,CAAC5C,SAAS,CAACuJ,WAAW,CAAC9B,UAAU,EAAEY,WAAW,CAAC;IACvD,CAAE,CAAC;IACH,OAAOA,WAAW;EACtB;EACAmB,qBAAqBA,CAACnB,WAAW,EAAEpH,IAAI,EAAE;IACrC,MAAMd,MAAM,GAAG,IAAI,CAACmE,SAAS,CAACmF,YAAY,CAACxI,IAAI,CAACsF,IAAI,IAAItF,IAAI,CAACyH,SAAS,CAAC;IACvE,OAAO,CAAC3E,OAAO,EAAE0B,SAAS,KAAK;MAC3B,MAAMgC,UAAU,GAAGxK,CAAC,CAACwI,SAAS,CAAC;MAC/B,MAAM;QACFrD,GAAG,EAAEA;MACT,CAAC,GAAGiG,WAAW;MACf,IAAI,IAAI,KAAKjG,GAAG,IAAI,KAAK,CAAC,KAAKA,GAAG,IAAIA,GAAG,CAACsH,KAAK,EAAE;QAC7C,MAAMC,OAAO,GAAGvH,GAAG,CAACsH,KAAK,CAAE,MAAMvJ,MAAM,CAACyJ,QAAQ,CAACxH,GAAG,CAACwF,IAAI,CAAC,EAAI,MAAM;UAChE,IAAIiC,UAAU;UACd,IAAIC,cAAc,GAAGrC,UAAU,CAAC1C,IAAI,CAAC,YAAY,CAAC,CAACE,KAAK,CAAC,CAAC;UAC1D,IAAI8E,SAAS,GAAGD,cAAc,CAAClC,IAAI,CAAC,aAAa,CAAC;UAClD,MAAMoC,gBAAgB,GAAG,IAAI,MAAMH,UAAU,GAAGE,SAAS,CAAC,IAAI,KAAK,CAAC,KAAKF,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACtK,MAAM,CAAC,CAAC;UAClHkI,UAAU,CAACwC,QAAQ,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;UAC9B7B,WAAW,GAAG,IAAI,CAACjB,wBAAwB,CAACiC,IAAI,CAAC,IAAI,CAAC,CAAChB,WAAW,EAAEpH,IAAI,EAAE8C,OAAO,EAAE0D,UAAU,CAAC;UAC9FqC,cAAc,GAAGrC,UAAU,CAAC1C,IAAI,CAAC,YAAY,CAAC,CAACE,KAAK,CAAC,CAAC;UACtD8E,SAAS,GAAGD,cAAc,CAAClC,IAAI,CAAC,aAAa,CAAC;UAC9C,IAAIoC,gBAAgB,IAAI,CAACD,SAAS,EAAE;YAChCD,cAAc,CAACK,WAAW,CAAC;cACvBC,eAAe,EAAEJ,gBAAgB,CAACI,eAAe;cACjDC,eAAe,EAAEL,gBAAgB,CAACK,eAAe;cACjDC,UAAU,EAAEN,gBAAgB,CAACM;YACjC,CAAC,CAAC;UACN;QACJ,CAAE,CAAC;QACHzN,YAAY,CAAC6H,EAAE,CAAC+C,UAAU,EAAE3K,WAAW,EAAE6M,OAAO,CAAC;MACrD;MACAtB,WAAW,GAAG,IAAI,CAACjB,wBAAwB,CAACiC,IAAI,CAAC,IAAI,CAAC,CAAChB,WAAW,EAAEpH,IAAI,EAAE8C,OAAO,EAAE0D,UAAU,CAAC;IAClG,CAAC;EACL;EACA8C,kBAAkBA,CAACC,aAAa,EAAE;IAC9B,IAAIC,qBAAqB;IACzB,MAAMC,eAAe,GAAG,IAAI,MAAMD,qBAAqB,GAAG,IAAI,CAACE,0BAA0B,CAAC,IAAI,KAAK,CAAC,KAAKF,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAAC/H,IAAI,CAAC,IAAI,EAAE8H,aAAa,CAAC;IACzL,MAAMI,iBAAiB,GAAG,IAAI,CAACrL,MAAM,CAAC,4BAA4B,CAAC;IACnE,MAAMsL,iBAAiB,GAAG,IAAI,CAACxH,eAAe,CAACrF,oBAAoB,CAAC;IACpE,IAAI+C,KAAK,GAAG,IAAI,CAACxB,MAAM,CAAC,oBAAoB,CAAC;IAC7C,MAAMuL,kBAAkB,GAAG,CAAC,CAAC;IAC7B,IAAI,CAAC/J,KAAK,EAAE;MACR,MAAMgK,OAAO,GAAG,IAAI,CAACC,kBAAkB,CAACC,UAAU,CAAC,CAAC;MACpDlK,KAAK,GAAG,EAAE;MACVzD,IAAI,CAACyN,OAAO,EAAG,CAACG,CAAC,EAAE/K,MAAM,KAAK;QAC1B,IAAI,CAACA,MAAM,CAACgL,MAAM,IAAI,CAAChL,MAAM,CAACiL,IAAI,EAAE;UAChCrK,KAAK,CAACsK,IAAI,CAAC;YACPlL,MAAM,EAAEA,MAAM;YACdoG,IAAI,EAAEpG,MAAM,CAACoG,IAAI;YACjBmC,SAAS,EAAEvI,MAAM,CAACuI;UACtB,CAAC,CAAC;QACN;MACJ,CAAE,CAAC;IACP,CAAC,MAAM;MACHhK,gBAAgB,CAACqC,KAAK,EAAGE,IAAI,IAAI;QAC7B,MAAMqK,MAAM,GAAG,CAAC,IAAI,KAAKrK,IAAI,IAAI,KAAK,CAAC,KAAKA,IAAI,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACsF,IAAI,MAAM,IAAI,KAAKtF,IAAI,IAAI,KAAK,CAAC,KAAKA,IAAI,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACyH,SAAS,CAAC;QACtI,IAAI4C,MAAM,EAAE;UACRR,kBAAkB,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACrK,IAAI,CAACyG,UAAU;QAClD;MACJ,CAAE,CAAC;IACP;IACA,OAAOrK,MAAM,CAAC,CAAC,CAAC,EAAEqN,eAAe,EAAE;MAC/B3J,KAAK,EAAEA,KAAK;MACZwK,MAAM,EAAE,MAAM,IAAIvO,IAAI,CAAD,CAAC,EAAE;MACxBwO,aAAa,EAAEvK,IAAI,IAAI;QACnB,IAAId,MAAM;QACV,MAAMmL,MAAM,GAAGrK,IAAI,CAACsF,IAAI,IAAItF,IAAI,CAACyH,SAAS;QAC1C,IAAIzH,IAAI,CAACd,MAAM,IAAImL,MAAM,EAAE;UACvBnL,MAAM,GAAGc,IAAI,CAACd,MAAM,IAAI,IAAI,CAAC6K,kBAAkB,CAACvB,YAAY,CAACxI,IAAI,CAACsF,IAAI,GAAG,QAAQtF,IAAI,CAACsF,IAAI,EAAE,GAAG,aAAatF,IAAI,CAACyH,SAAS,EAAE,CAAC;QACjI;QACA,IAAIvI,MAAM,EAAE;UACRc,IAAI,CAACgH,KAAK,GAAGhH,IAAI,CAACgH,KAAK,IAAI,CAAC,CAAC;UAC7BhH,IAAI,CAACgH,KAAK,CAACc,IAAI,GAAG9H,IAAI,CAACgH,KAAK,CAACc,IAAI,IAAI5I,MAAM,CAACsL,OAAO;UACnD,IAAI,SAAS,KAAKtL,MAAM,CAACuL,QAAQ,IAAI,KAAK,CAAC,KAAKzK,IAAI,CAACgH,KAAK,CAAC0D,OAAO,EAAE;YAChE,MAAMxD,SAAS,GAAG,IAAI,CAAC5I,MAAM,CAAC,wBAAwB,CAAC;YACvD,IAAI,UAAU,KAAK4I,SAAS,IAAI,QAAQ,KAAKA,SAAS,EAAE;cACpDlH,IAAI,CAACgH,KAAK,CAAC0D,OAAO,GAAG,IAAI;YAC7B;UACJ;UACA1K,IAAI,CAACkI,QAAQ,GAAGlI,IAAI,CAACkI,QAAQ,IAAI,IAAI,CAACK,qBAAqB,CAACgB,aAAa,EAAEvJ,IAAI,CAAC;UAChFA,IAAI,CAACd,MAAM,GAAGA,MAAM;UACpBc,IAAI,CAAC6J,kBAAkB,GAAGA,kBAAkB,CAACQ,MAAM,CAAC;UACpD,IAAInL,MAAM,CAACyL,QAAQ,EAAE;YACjBvO,MAAM,CAAC4D,IAAI,EAAEd,MAAM,CAACyL,QAAQ,CAAC;UACjC;UACA,IAAI,KAAK,CAAC,KAAK3K,IAAI,CAAC4K,UAAU,IAAI1L,MAAM,CAACiK,eAAe,EAAE;YACtDnJ,IAAI,CAAC4K,UAAU,GAAG1L,MAAM,CAACiK,eAAe,CAACpJ,IAAI,CAAE8K,IAAI,IAAI,UAAU,KAAKA,IAAI,CAACV,IAAK,CAAC;YACjFnK,IAAI,CAACmJ,eAAe,GAAG,EAAE;UAC7B;UACA,MAAM2B,WAAW,GAAGxO,SAAS,CAAC0D,IAAI,CAAC0K,OAAO,CAAC,GAAG1K,IAAI,CAAC0K,OAAO,GAAG,IAAI;UACjE,IAAI,CAAC,IAAI,CAACjM,cAAc,IAAIqM,WAAW,EAAE;YACrC,IAAI,CAACrM,cAAc,GAAGuB,IAAI;UAC9B;QACJ;QACA,IAAI,KAAK2J,iBAAiB,IAAI,KAAK,CAAC,KAAKA,iBAAiB,IAAIA,iBAAiB,CAAClI,IAAI,CAAC,IAAI,EAAEzB,IAAI,CAAC;QAChGA,IAAI,CAAC+K,QAAQ,GAAGxO,QAAQ,CAACyD,IAAI,CAAC+K,QAAQ,CAAC,GAAG,GAAG/K,IAAI,CAAC+K,QAAQ,IAAInB,iBAAiB,EAAE,GAAGA,iBAAiB;MACzG;IACJ,CAAC,CAAC;EACN;EACAlF,mBAAmBA,CAAA,EAAG;IAClB,OAAO,CAAC8B,UAAU,EAAE+C,aAAa,EAAEzG,OAAO,KAAK;MAC3C,MAAM2G,eAAe,GAAG,IAAI,CAACnL,MAAM,CAAClB,wBAAwB,CAAC;MAC7D,MAAM4N,mBAAmB,GAAG,IAAI,CAAC1B,kBAAkB,CAACC,aAAa,CAAC;MAClE,MAAM0B,cAAc,GAAGjP,CAAC,CAAC,OAAO,CAAC,CAACoH,QAAQ,CAACoD,UAAU,CAAC;MACtD,MAAM3B,WAAW,GAAG,IAAI,KAAK/B,OAAO,IAAI,KAAK,CAAC,KAAKA,OAAO,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC+B,WAAW;MACzF,IAAI,CAACpG,cAAc,GAAG,KAAK,CAAC;MAC5B,IAAIoG,WAAW,EAAE;QACboG,cAAc,CAAC1H,QAAQ,CAAC,IAAI,CAACnB,eAAe,CAAClF,qBAAqB,CAAC,CAAC;MACxE;MACA,IAAI,CAACY,SAAS,GAAG,IAAI,CAAC0F,gBAAgB,CAACyH,cAAc,EAAExO,IAAI,EAAEL,MAAM,CAAC,CAAC,CAAC,EAAEqN,eAAe,EAAEuB,mBAAmB,CAAC,CAAC;MAC9G,IAAI,CAACnG,WAAW,EAAE;QACd,MAAMqG,iBAAiB,GAAGlP,CAAC,CAAC,OAAO,CAAC,CAACuH,QAAQ,CAAC,IAAI,CAACnB,eAAe,CAAC5E,4BAA4B,CAAC,CAAC,CAAC4F,QAAQ,CAACoD,UAAU,CAAC;QACtH,IAAI,CAAChD,gBAAgB,CAACxH,CAAC,CAAC,OAAO,CAAC,CAACoH,QAAQ,CAAC8H,iBAAiB,CAAC,EAAE1O,MAAM,EAAE,IAAI,CAACuG,oBAAoB,CAAC,CAAC,CAAC;QAClG,IAAI,CAACS,gBAAgB,CAACxH,CAAC,CAAC,OAAO,CAAC,CAACoH,QAAQ,CAAC8H,iBAAiB,CAAC,EAAE1O,MAAM,EAAE,IAAI,CAACwG,sBAAsB,CAAC,CAAC,CAAC;MACxG;MACA,IAAI,CAAClF,SAAS,CAAC2F,EAAE,CAAC,cAAc,EAAG,MAAM;QACrC,IAAI0H,iBAAiB;QACrB,IAAI,CAACpM,SAAS,CAAC2C,sBAAsB,CAAC,CAAC;QACvC,IAAI,MAAMyJ,iBAAiB,GAAG,IAAI,CAACvK,UAAU,CAAC,IAAI,KAAK,CAAC,KAAKuK,iBAAiB,IAAIA,iBAAiB,CAACvJ,OAAO,CAAC,CAAC;MACjH,CAAE,CAAC;IACP,CAAC;EACL;EACAwJ,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACtN,SAAS;EACzB;EACAuN,cAAcA,CAAA,EAAG;IACb,IAAIC,qBAAqB;IACzB,IAAI,MAAMA,qBAAqB,GAAG,IAAI,CAACvN,uBAAuB,CAAC,IAAI,KAAK,CAAC,KAAKuN,qBAAqB,IAAIA,qBAAqB,CAACxJ,OAAO,CAAC,CAAC;EAC1I;EACAyJ,gBAAgBA,CAACC,OAAO,EAAE;IACtB,KAAK,CAACD,gBAAgB,CAACC,OAAO,CAAC;IAC/B,IAAI,IAAI,CAACtN,eAAe,CAAC,CAAC,EAAE;MACxB,IAAIuN,iBAAiB;MACrB,IAAI,MAAMA,iBAAiB,GAAG,IAAI,CAAC7K,UAAU,CAAC,IAAI,KAAK,CAAC,KAAK6K,iBAAiB,IAAIA,iBAAiB,CAACC,IAAI,CAAC,CAAC;IAC9G;EACJ;EACAC,oBAAoBA,CAAC3L,IAAI,EAAE4L,MAAM,EAAE3L,GAAG,EAAE6J,OAAO,EAAE+B,kBAAkB,EAAE;IACjE,MAAM;MACF1B,IAAI,EAAEA;IACV,CAAC,GAAGyB,MAAM;IACV,IAAI,IAAI,CAAC1N,eAAe,CAAC,CAAC,IAAIiM,IAAI,KAAKrN,0BAA0B,EAAE;MAC/DkD,IAAI,CAAC0K,OAAO,GAAG,KAAK;IACxB;IACA,KAAK,CAACiB,oBAAoB,CAAC3L,IAAI,EAAE4L,MAAM,EAAE3L,GAAG,EAAE6J,OAAO,EAAE+B,kBAAkB,CAAC;EAC9E;EACAC,6BAA6BA,CAAChG,UAAU,EAAE7H,QAAQ,EAAE;IAChD,MAAMC,eAAe,GAAG,IAAI,CAACA,eAAe,CAAC,CAAC;IAC9C,KAAK,CAAC4N,6BAA6B,CAAChG,UAAU,EAAE7H,QAAQ,EAAEC,eAAe,CAAC;IAC1E,IAAIA,eAAe,EAAE;MACjB,IAAI,CAAC6C,cAAc,CAAC9C,QAAQ,CAAC;IACjC;EACJ;AACJ,CAAC;AACD,MAAM0I,IAAI,GAAG/I,IAAI,IAAI,cAAcA,IAAI,CAAC;EACpCmO,eAAeA,CAAC/L,IAAI,EAAE;IAClB,IAAI,IAAI,CAACgM,kBAAkB,CAAC5N,cAAc,CAAC,CAAC,EAAE;MAC1C4B,IAAI,CAACsE,OAAO,GAAG,QAAQ;IAC3B;EACJ;EACA2H,wBAAwBA,CAACC,OAAO,EAAEC,OAAO,EAAEC,eAAe,EAAEC,YAAY,EAAE;IACtE,IAAI,KAAK,KAAKA,YAAY,IAAIF,OAAO,CAACG,SAAS,IAAI,IAAI,CAACN,kBAAkB,CAAC5N,cAAc,CAAC,CAAC,EAAE;MACzF;IACJ;IACA,OAAO,KAAK,CAAC6N,wBAAwB,CAACM,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAChE;AACJ,CAAC;AACD,MAAMC,QAAQ,GAAG7O,IAAI,IAAI,cAAcA,IAAI,CAAC;EACxC8O,kBAAkBA,CAACC,KAAK,EAAE7J,OAAO,EAAE;IAC/B,IAAI,MAAM,KAAKA,OAAO,CAACwB,OAAO,IAAI,IAAI,CAAC0H,kBAAkB,CAAC9N,eAAe,CAAC,CAAC,IAAI,KAAK,KAAK4E,OAAO,CAAC3B,GAAG,CAACuJ,OAAO,EAAE;MAC1G;IACJ;IACA,KAAK,CAACgC,kBAAkB,CAACH,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EACnD;EACAxN,eAAeA,CAACf,QAAQ,EAAE;IACtB,MAAM2O,aAAa,GAAG,KAAK,CAAC5N,eAAe,CAACf,QAAQ,CAAC;IACrD,MAAM4O,iBAAiB,GAAG,IAAI,CAACb,kBAAkB;IACjD,MAAM1K,QAAQ,GAAGuL,iBAAiB,CAACzB,WAAW,CAAC,CAAC;IAChD,MAAM0B,gBAAgB,GAAGD,iBAAiB,CAAC1N,mBAAmB,CAAC,CAAC;IAChE,IAAI2N,gBAAgB,KAAK7O,QAAQ,IAAI2O,aAAa,IAAItL,QAAQ,EAAE;MAC5D,OAAOA,QAAQ,CAACgC,QAAQ,CAAC,CAAC,CAACQ,IAAI,CAAC,IAAI,IAAI,CAAC1B,eAAe,CAACrF,oBAAoB,CAAC,MAAMF,YAAY,EAAE,CAAC;IACvG;IACA,OAAO+P,aAAa;EACxB;EACAG,sBAAsBA,CAACC,MAAM,EAAE/O,QAAQ,EAAEgP,gBAAgB,EAAE;IACvD,MAAMH,gBAAgB,GAAG,IAAI,CAACd,kBAAkB,CAAC7M,mBAAmB,CAAC,CAAC;IACtE,IAAI2N,gBAAgB,KAAK7O,QAAQ,IAAI1B,QAAQ,CAAC0Q,gBAAgB,CAAC,EAAE;MAC7D,MAAM/N,MAAM,GAAG,IAAI,CAAC6K,kBAAkB,CAACvB,YAAY,CAACyE,gBAAgB,CAAC;MACrE,OAAO,IAAI,CAAChO,8BAA8B,CAAC+N,MAAM,EAAE9N,MAAM,CAAC;IAC9D;IACA,OAAO,KAAK,CAAC6N,sBAAsB,CAACR,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC9D;EACAvN,8BAA8BA,CAAC+N,MAAM,EAAE9N,MAAM,EAAE;IAC3C,IAAIgO,YAAY,GAAG,CAAC,CAAC;IACrB7Q,IAAI,CAAC2Q,MAAM,EAAG,CAACrF,KAAK,EAAEN,WAAW,KAAK;MAClC,MAAMrH,IAAI,GAAGhE,CAAC,CAACqL,WAAW,CAAC,CAACvD,IAAI,CAAC,wBAAwB,CAAC,CAAC6C,IAAI,CAAC,cAAc,CAAC;MAC/E,IAAI,IAAI,KAAK3G,IAAI,IAAI,KAAK,CAAC,KAAKA,IAAI,IAAIA,IAAI,CAACd,MAAM,IAAIA,MAAM,IAAIc,IAAI,CAACd,MAAM,CAACyI,KAAK,KAAKzI,MAAM,CAACyI,KAAK,EAAE;QACjGuF,YAAY,GAAGvF,KAAK;QACpB,OAAO,KAAK;MAChB;IACJ,CAAE,CAAC;IACH,OAAOuF,YAAY;EACvB;EACAC,WAAWA,CAACC,UAAU,EAAE;IACpB,MAAMC,WAAW,GAAG,QAAQ,KAAKD,UAAU,CAAC9I,OAAO,IAAI,gBAAgB,KAAK8I,UAAU,CAAC9I,OAAO;IAC9F,MAAMgJ,cAAc,GAAG,MAAM,KAAKF,UAAU,CAAC9I,OAAO,IAAI,IAAI,CAAC0H,kBAAkB,CAAC9N,eAAe,CAAC,CAAC;IACjG,OAAO,CAACmP,WAAW,IAAIC,cAAc,KAAKF,UAAU,CAACpN,IAAI;EAC7D;EACAsI,WAAWA,CAACqE,KAAK,EAAES,UAAU,EAAE;IAC3B,IAAI,IAAI,CAACD,WAAW,CAACC,UAAU,CAAC,EAAE;MAC9B,IAAI,CAACG,iBAAiB,CAACH,UAAU,EAAET,KAAK,CAAC;IAC7C,CAAC,MAAM;MACH,KAAK,CAACrE,WAAW,CAACqE,KAAK,EAAES,UAAU,CAAC;IACxC;EACJ;EACAI,cAAcA,CAAA,EAAG;IACb,MAAMX,iBAAiB,GAAG,IAAI,CAACb,kBAAkB;IACjD,MAAMyB,WAAW,GAAGZ,iBAAiB,CAACzB,WAAW,CAAC,CAAC;IACnD,MAAMhC,eAAe,GAAG,IAAI,KAAKqE,WAAW,IAAI,KAAK,CAAC,KAAKA,WAAW,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACnP,MAAM,CAAC,iBAAiB,CAAC;IACvH,MAAMoP,QAAQ,GAAG,KAAK,CAACF,cAAc,CAACjB,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC5D,OAAOkB,QAAQ,CAAC/L,IAAI,CAAE,MAAM;MACxB,MAAMgM,WAAW,GAAGd,iBAAiB,CAACzB,WAAW,CAAC,CAAC;MACnD,IAAIhC,eAAe,IAAIuE,WAAW,IAAIA,WAAW,KAAKF,WAAW,EAAE;QAC/DE,WAAW,CAACrP,MAAM,CAAC,iBAAiB,EAAE8K,eAAe,CAAC;MAC1D;IACJ,CAAE,CAAC;EACP;AACJ,CAAC;AACD,OAAO,MAAMwE,sBAAsB,GAAG;EAClCC,SAAS,EAAE;IACPC,WAAW,EAAE;MACTC,OAAO,EAAEpQ,yBAAyB;MAClCgJ,IAAI,EAAEA;IACV,CAAC;IACDqH,KAAK,EAAE;MACHvB,QAAQ,EAAEA;IACd;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}