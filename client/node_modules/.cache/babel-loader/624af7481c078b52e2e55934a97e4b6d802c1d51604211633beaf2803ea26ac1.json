{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/virtual_columns/m_virtual_columns_core.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../../../core/utils/extend\";\nexport function foreachColumnInfo(info, callback, rowIndex, offsets, columnCount, lastProcessedIndexes) {\n  rowIndex = rowIndex || 0;\n  offsets = offsets || [];\n  lastProcessedIndexes = lastProcessedIndexes || [];\n  offsets[rowIndex] = offsets[rowIndex] || 0;\n  const row = info[rowIndex];\n  const startIndex = lastProcessedIndexes[rowIndex] + 1 || 0;\n  let processedColumnCount = 0;\n  let colIndex;\n  if (!row) {\n    return;\n  }\n  for (colIndex = startIndex; colIndex < row.length; colIndex++) {\n    const cell = row[colIndex];\n    const visibleIndex = colIndex + offsets[rowIndex];\n    const colspan = cell.colspan || 1;\n    foreachColumnInfo(info, callback, rowIndex + (cell.rowspan || 1), offsets, colspan, lastProcessedIndexes);\n    offsets[rowIndex] += colspan - 1;\n    processedColumnCount += colspan;\n    if (cell.rowspan) {\n      for (let i = rowIndex + 1; i < rowIndex + cell.rowspan; i++) {\n        offsets[i] = offsets[i] || 0;\n        offsets[i] += cell.colspan || 1;\n      }\n    }\n    if (false === callback(cell, visibleIndex, rowIndex, colIndex)) {\n      break;\n    }\n    if (void 0 !== columnCount && processedColumnCount >= columnCount) {\n      break;\n    }\n  }\n  lastProcessedIndexes[rowIndex] = colIndex;\n}\nexport function createColumnsInfo(info, startIndex, endIndex) {\n  const newInfo = [];\n  foreachColumnInfo(info, (columnInfo, visibleIndex, rowIndex) => {\n    let cell = columnInfo;\n    let colspan;\n    const cellColspan = cell.colspan || 1;\n    const isVisible = visibleIndex + cellColspan - 1 >= startIndex && visibleIndex < endIndex;\n    newInfo[rowIndex] = newInfo[rowIndex] || [];\n    if (isVisible) {\n      if (visibleIndex < startIndex) {\n        colspan = cellColspan - (startIndex - visibleIndex);\n        visibleIndex = startIndex;\n      } else {\n        colspan = cellColspan;\n      }\n      if (visibleIndex + colspan > endIndex) {\n        colspan = endIndex - visibleIndex;\n      }\n      if (colspan !== cellColspan) {\n        cell = extend({}, cell, {\n          colspan: colspan\n        });\n      }\n      newInfo[rowIndex].push(cell);\n    } else if (visibleIndex > endIndex) {\n      return false;\n    }\n    return;\n  });\n  for (let i = 0; i < newInfo.length; i++) {\n    newInfo[i] = newInfo[i] || [];\n  }\n  return newInfo;\n}","map":{"version":3,"names":["extend","foreachColumnInfo","info","callback","rowIndex","offsets","columnCount","lastProcessedIndexes","row","startIndex","processedColumnCount","colIndex","length","cell","visibleIndex","colspan","rowspan","i","createColumnsInfo","endIndex","newInfo","columnInfo","cellColspan","isVisible","push"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/virtual_columns/m_virtual_columns_core.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/virtual_columns/m_virtual_columns_core.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nexport function foreachColumnInfo(info, callback, rowIndex, offsets, columnCount, lastProcessedIndexes) {\r\n    rowIndex = rowIndex || 0;\r\n    offsets = offsets || [];\r\n    lastProcessedIndexes = lastProcessedIndexes || [];\r\n    offsets[rowIndex] = offsets[rowIndex] || 0;\r\n    const row = info[rowIndex];\r\n    const startIndex = lastProcessedIndexes[rowIndex] + 1 || 0;\r\n    let processedColumnCount = 0;\r\n    let colIndex;\r\n    if (!row) {\r\n        return\r\n    }\r\n    for (colIndex = startIndex; colIndex < row.length; colIndex++) {\r\n        const cell = row[colIndex];\r\n        const visibleIndex = colIndex + offsets[rowIndex];\r\n        const colspan = cell.colspan || 1;\r\n        foreachColumnInfo(info, callback, rowIndex + (cell.rowspan || 1), offsets, colspan, lastProcessedIndexes);\r\n        offsets[rowIndex] += colspan - 1;\r\n        processedColumnCount += colspan;\r\n        if (cell.rowspan) {\r\n            for (let i = rowIndex + 1; i < rowIndex + cell.rowspan; i++) {\r\n                offsets[i] = offsets[i] || 0;\r\n                offsets[i] += cell.colspan || 1\r\n            }\r\n        }\r\n        if (false === callback(cell, visibleIndex, rowIndex, colIndex)) {\r\n            break\r\n        }\r\n        if (void 0 !== columnCount && processedColumnCount >= columnCount) {\r\n            break\r\n        }\r\n    }\r\n    lastProcessedIndexes[rowIndex] = colIndex\r\n}\r\nexport function createColumnsInfo(info, startIndex, endIndex) {\r\n    const newInfo = [];\r\n    foreachColumnInfo(info, ((columnInfo, visibleIndex, rowIndex) => {\r\n        let cell = columnInfo;\r\n        let colspan;\r\n        const cellColspan = cell.colspan || 1;\r\n        const isVisible = visibleIndex + cellColspan - 1 >= startIndex && visibleIndex < endIndex;\r\n        newInfo[rowIndex] = newInfo[rowIndex] || [];\r\n        if (isVisible) {\r\n            if (visibleIndex < startIndex) {\r\n                colspan = cellColspan - (startIndex - visibleIndex);\r\n                visibleIndex = startIndex\r\n            } else {\r\n                colspan = cellColspan\r\n            }\r\n            if (visibleIndex + colspan > endIndex) {\r\n                colspan = endIndex - visibleIndex\r\n            }\r\n            if (colspan !== cellColspan) {\r\n                cell = extend({}, cell, {\r\n                    colspan: colspan\r\n                })\r\n            }\r\n            newInfo[rowIndex].push(cell)\r\n        } else if (visibleIndex > endIndex) {\r\n            return false\r\n        }\r\n        return\r\n    }));\r\n    for (let i = 0; i < newInfo.length; i++) {\r\n        newInfo[i] = newInfo[i] || []\r\n    }\r\n    return newInfo\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,MAAM,QACH,+BAA+B;AACtC,OAAO,SAASC,iBAAiBA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,WAAW,EAAEC,oBAAoB,EAAE;EACpGH,QAAQ,GAAGA,QAAQ,IAAI,CAAC;EACxBC,OAAO,GAAGA,OAAO,IAAI,EAAE;EACvBE,oBAAoB,GAAGA,oBAAoB,IAAI,EAAE;EACjDF,OAAO,CAACD,QAAQ,CAAC,GAAGC,OAAO,CAACD,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAMI,GAAG,GAAGN,IAAI,CAACE,QAAQ,CAAC;EAC1B,MAAMK,UAAU,GAAGF,oBAAoB,CAACH,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC;EAC1D,IAAIM,oBAAoB,GAAG,CAAC;EAC5B,IAAIC,QAAQ;EACZ,IAAI,CAACH,GAAG,EAAE;IACN;EACJ;EACA,KAAKG,QAAQ,GAAGF,UAAU,EAAEE,QAAQ,GAAGH,GAAG,CAACI,MAAM,EAAED,QAAQ,EAAE,EAAE;IAC3D,MAAME,IAAI,GAAGL,GAAG,CAACG,QAAQ,CAAC;IAC1B,MAAMG,YAAY,GAAGH,QAAQ,GAAGN,OAAO,CAACD,QAAQ,CAAC;IACjD,MAAMW,OAAO,GAAGF,IAAI,CAACE,OAAO,IAAI,CAAC;IACjCd,iBAAiB,CAACC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,IAAIS,IAAI,CAACG,OAAO,IAAI,CAAC,CAAC,EAAEX,OAAO,EAAEU,OAAO,EAAER,oBAAoB,CAAC;IACzGF,OAAO,CAACD,QAAQ,CAAC,IAAIW,OAAO,GAAG,CAAC;IAChCL,oBAAoB,IAAIK,OAAO;IAC/B,IAAIF,IAAI,CAACG,OAAO,EAAE;MACd,KAAK,IAAIC,CAAC,GAAGb,QAAQ,GAAG,CAAC,EAAEa,CAAC,GAAGb,QAAQ,GAAGS,IAAI,CAACG,OAAO,EAAEC,CAAC,EAAE,EAAE;QACzDZ,OAAO,CAACY,CAAC,CAAC,GAAGZ,OAAO,CAACY,CAAC,CAAC,IAAI,CAAC;QAC5BZ,OAAO,CAACY,CAAC,CAAC,IAAIJ,IAAI,CAACE,OAAO,IAAI,CAAC;MACnC;IACJ;IACA,IAAI,KAAK,KAAKZ,QAAQ,CAACU,IAAI,EAAEC,YAAY,EAAEV,QAAQ,EAAEO,QAAQ,CAAC,EAAE;MAC5D;IACJ;IACA,IAAI,KAAK,CAAC,KAAKL,WAAW,IAAII,oBAAoB,IAAIJ,WAAW,EAAE;MAC/D;IACJ;EACJ;EACAC,oBAAoB,CAACH,QAAQ,CAAC,GAAGO,QAAQ;AAC7C;AACA,OAAO,SAASO,iBAAiBA,CAAChB,IAAI,EAAEO,UAAU,EAAEU,QAAQ,EAAE;EAC1D,MAAMC,OAAO,GAAG,EAAE;EAClBnB,iBAAiB,CAACC,IAAI,EAAG,CAACmB,UAAU,EAAEP,YAAY,EAAEV,QAAQ,KAAK;IAC7D,IAAIS,IAAI,GAAGQ,UAAU;IACrB,IAAIN,OAAO;IACX,MAAMO,WAAW,GAAGT,IAAI,CAACE,OAAO,IAAI,CAAC;IACrC,MAAMQ,SAAS,GAAGT,YAAY,GAAGQ,WAAW,GAAG,CAAC,IAAIb,UAAU,IAAIK,YAAY,GAAGK,QAAQ;IACzFC,OAAO,CAAChB,QAAQ,CAAC,GAAGgB,OAAO,CAAChB,QAAQ,CAAC,IAAI,EAAE;IAC3C,IAAImB,SAAS,EAAE;MACX,IAAIT,YAAY,GAAGL,UAAU,EAAE;QAC3BM,OAAO,GAAGO,WAAW,IAAIb,UAAU,GAAGK,YAAY,CAAC;QACnDA,YAAY,GAAGL,UAAU;MAC7B,CAAC,MAAM;QACHM,OAAO,GAAGO,WAAW;MACzB;MACA,IAAIR,YAAY,GAAGC,OAAO,GAAGI,QAAQ,EAAE;QACnCJ,OAAO,GAAGI,QAAQ,GAAGL,YAAY;MACrC;MACA,IAAIC,OAAO,KAAKO,WAAW,EAAE;QACzBT,IAAI,GAAGb,MAAM,CAAC,CAAC,CAAC,EAAEa,IAAI,EAAE;UACpBE,OAAO,EAAEA;QACb,CAAC,CAAC;MACN;MACAK,OAAO,CAAChB,QAAQ,CAAC,CAACoB,IAAI,CAACX,IAAI,CAAC;IAChC,CAAC,MAAM,IAAIC,YAAY,GAAGK,QAAQ,EAAE;MAChC,OAAO,KAAK;IAChB;IACA;EACJ,CAAE,CAAC;EACH,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,OAAO,CAACR,MAAM,EAAEK,CAAC,EAAE,EAAE;IACrCG,OAAO,CAACH,CAAC,CAAC,GAAGG,OAAO,CAACH,CAAC,CAAC,IAAI,EAAE;EACjC;EACA,OAAOG,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}