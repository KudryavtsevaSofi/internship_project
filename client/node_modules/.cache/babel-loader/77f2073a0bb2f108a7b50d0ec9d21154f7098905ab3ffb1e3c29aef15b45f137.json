{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/m_drop_down_button.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport messageLocalization from \"../../common/core/localization/message\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { getPublicElement } from \"../../core/element\";\nimport Guid from \"../../core/guid\";\nimport $ from \"../../core/renderer\";\nimport { FunctionTemplate } from \"../../core/templates/function_template\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport { isDefined, isObject, isPlainObject } from \"../../core/utils/type\";\nimport DataController from \"../../data_controller\";\nimport ButtonGroup from \"../../ui/button_group\";\nimport List from \"../../ui/list_light\";\nimport Widget from \"../core/widget/widget\";\nimport { getElementWidth, getSizeValue } from \"../ui/drop_down_editor/m_utils\";\nimport Popup from \"../ui/popup/m_popup\";\nconst DROP_DOWN_BUTTON_CLASS = \"dx-dropdownbutton\";\nconst DROP_DOWN_BUTTON_CONTENT = \"dx-dropdownbutton-content\";\nconst DROP_DOWN_BUTTON_ACTION_CLASS = \"dx-dropdownbutton-action\";\nconst DROP_DOWN_BUTTON_TOGGLE_CLASS = \"dx-dropdownbutton-toggle\";\nconst DROP_DOWN_BUTTON_HAS_ARROW_CLASS = \"dx-dropdownbutton-has-arrow\";\nconst DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS = \"dx-dropdownbutton-popup-wrapper\";\nconst DROP_DOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nconst DX_BUTTON_CLASS = \"dx-button\";\nconst DX_BUTTON_TEXT_CLASS = \"dx-button-text\";\nconst DX_ICON_RIGHT_CLASS = \"dx-icon-right\";\nconst OVERLAY_CONTENT_LABEL = \"Dropdown\";\nclass DropDownButton extends Widget {\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      itemTemplate: \"item\",\n      keyExpr: \"this\",\n      selectedItem: null,\n      selectedItemKey: null,\n      stylingMode: \"outlined\",\n      deferRendering: true,\n      noDataText: messageLocalization.format(\"dxCollectionWidget-noDataText\"),\n      useSelectMode: false,\n      splitButton: false,\n      showArrowIcon: true,\n      template: null,\n      text: \"\",\n      type: \"normal\",\n      onButtonClick: null,\n      onSelectionChanged: null,\n      onItemClick: null,\n      opened: false,\n      items: null,\n      dataSource: null,\n      focusStateEnabled: true,\n      hoverStateEnabled: true,\n      dropDownOptions: {},\n      dropDownContentTemplate: \"content\",\n      wrapItemText: false,\n      useItemTextAsTitle: true,\n      grouped: false,\n      groupTemplate: \"group\",\n      buttonGroupOptions: {}\n    });\n  }\n  _setOptionsByReference() {\n    super._setOptionsByReference();\n    extend(this._optionsByReference, {\n      selectedItem: true\n    });\n  }\n  _init() {\n    super._init();\n    this._createItemClickAction();\n    this._createActionClickAction();\n    this._createSelectionChangedAction();\n    this._initDataController();\n    this._compileKeyGetter();\n    this._compileDisplayGetter();\n    this._options.cache(\"buttonGroupOptions\", this.option(\"buttonGroupOptions\"));\n    this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"));\n  }\n  _initDataController() {\n    const dataSource = this.option(\"dataSource\");\n    this._dataController = new DataController(dataSource ?? this.option(\"items\"), {\n      key: this.option(\"keyExpr\")\n    });\n  }\n  _initTemplates() {\n    this._templateManager.addDefaultTemplates({\n      content: new FunctionTemplate(options => {\n        const $popupContent = $(options.container);\n        const $listContainer = $(\"<div>\").appendTo($popupContent);\n        this._list = this._createComponent($listContainer, List, this._listOptions());\n        this._list.registerKeyHandler(\"escape\", this._escHandler.bind(this));\n        this._list.registerKeyHandler(\"tab\", this._escHandler.bind(this));\n        this._list.registerKeyHandler(\"leftArrow\", this._escHandler.bind(this));\n        this._list.registerKeyHandler(\"rightArrow\", this._escHandler.bind(this));\n      })\n    });\n    super._initTemplates();\n  }\n  _compileKeyGetter() {\n    this._keyGetter = compileGetter(this._dataController.key());\n  }\n  _compileDisplayGetter() {\n    const {\n      displayExpr: displayExpr\n    } = this.option();\n    this._displayGetter = compileGetter(displayExpr);\n  }\n  _initMarkup() {\n    super._initMarkup();\n    this.$element().addClass(\"dx-dropdownbutton\");\n    this._renderButtonGroup();\n    this._updateArrowClass();\n    if (isDefined(this.option(\"selectedItemKey\"))) {\n      this._loadSelectedItem().done(this._updateActionButton.bind(this));\n    }\n  }\n  _renderFocusTarget() {}\n  _render() {\n    if (!this.option(\"deferRendering\") || this.option(\"opened\")) {\n      this._renderPopup();\n    }\n    super._render();\n  }\n  _renderContentImpl() {\n    if (this._popup) {\n      this._renderPopupContent();\n    }\n    return super._renderContentImpl();\n  }\n  _loadSelectedItem() {\n    var _this$_loadSingleDefe;\n    null === (_this$_loadSingleDefe = this._loadSingleDeferred) || void 0 === _this$_loadSingleDefe || _this$_loadSingleDefe.reject();\n    const d = Deferred();\n    if (this._list && void 0 !== this._lastSelectedItemData) {\n      const cachedResult = this.option(\"useSelectMode\") ? this._list.option(\"selectedItem\") : this._lastSelectedItemData;\n      return d.resolve(cachedResult);\n    }\n    this._lastSelectedItemData = void 0;\n    const selectedItemKey = this.option(\"selectedItemKey\");\n    this._dataController.loadSingle(selectedItemKey).done(d.resolve).fail(() => {\n      d.reject(null);\n    });\n    this._loadSingleDeferred = d;\n    return d.promise();\n  }\n  _createActionClickAction() {\n    this._actionClickAction = this._createActionByOption(\"onButtonClick\");\n  }\n  _createSelectionChangedAction() {\n    this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n  }\n  _createItemClickAction() {\n    this._itemClickAction = this._createActionByOption(\"onItemClick\");\n  }\n  _fireSelectionChangedAction(_ref) {\n    let {\n      previousValue: previousValue,\n      value: value\n    } = _ref;\n    this._selectionChangedAction({\n      item: value,\n      previousItem: previousValue\n    });\n  }\n  _fireItemClickAction(_ref2) {\n    let {\n      event: event,\n      itemElement: itemElement,\n      itemData: itemData\n    } = _ref2;\n    return this._itemClickAction({\n      event: event,\n      itemElement: itemElement,\n      itemData: this._actionItem || itemData\n    });\n  }\n  _getButtonTemplate() {\n    const {\n      template: template,\n      splitButton: splitButton,\n      showArrowIcon: showArrowIcon\n    } = this.option();\n    if (template) {\n      return template;\n    }\n    return splitButton || !showArrowIcon ? \"content\" : (_ref3, buttonContent) => {\n      let {\n        text: text,\n        icon: icon\n      } = _ref3;\n      const $firstIcon = getImageContainer(icon);\n      const $textContainer = text ? $(\"<span>\").text(text).addClass(\"dx-button-text\") : void 0;\n      const $secondIcon = getImageContainer(\"spindown\").addClass(\"dx-icon-right\");\n      $(buttonContent).append($firstIcon, $textContainer, $secondIcon);\n    };\n  }\n  _getActionButtonConfig() {\n    const {\n      icon: icon,\n      text: text,\n      type: type,\n      splitButton: splitButton\n    } = this.option();\n    const actionButtonConfig = {\n      text: text,\n      icon: icon,\n      type: type,\n      template: this._getButtonTemplate(),\n      elementAttr: {\n        class: \"dx-dropdownbutton-action\"\n      }\n    };\n    if (splitButton) {\n      actionButtonConfig.elementAttr.role = \"menuitem\";\n    }\n    return actionButtonConfig;\n  }\n  _getSpinButtonConfig() {\n    const {\n      type: type\n    } = this.option();\n    const config = {\n      type: type,\n      icon: \"spindown\",\n      elementAttr: {\n        class: \"dx-dropdownbutton-toggle\",\n        role: \"menuitem\"\n      }\n    };\n    return config;\n  }\n  _getButtonGroupItems() {\n    const {\n      splitButton: splitButton\n    } = this.option();\n    const items = [this._getActionButtonConfig()];\n    if (splitButton) {\n      items.push(this._getSpinButtonConfig());\n    }\n    return items;\n  }\n  _buttonGroupItemClick(_ref4) {\n    let {\n      event: event,\n      itemData: itemData\n    } = _ref4;\n    const isActionButton = \"dx-dropdownbutton-action\" === itemData.elementAttr.class;\n    const isToggleButton = \"dx-dropdownbutton-toggle\" === itemData.elementAttr.class;\n    if (isToggleButton) {\n      this.toggle();\n    } else if (isActionButton) {\n      this._actionClickAction({\n        event: event,\n        selectedItem: this.option(\"selectedItem\")\n      });\n      if (!this.option(\"splitButton\")) {\n        this.toggle();\n      }\n    }\n  }\n  _getButtonGroupOptions() {\n    const {\n      accessKey: accessKey,\n      focusStateEnabled: focusStateEnabled,\n      hoverStateEnabled: hoverStateEnabled,\n      splitButton: splitButton,\n      stylingMode: stylingMode,\n      tabIndex: tabIndex\n    } = this.option();\n    const buttonGroupOptions = _extends({\n      items: this._getButtonGroupItems(),\n      width: \"100%\",\n      height: \"100%\",\n      selectionMode: \"none\",\n      focusStateEnabled: focusStateEnabled,\n      hoverStateEnabled: hoverStateEnabled,\n      stylingMode: stylingMode,\n      accessKey: accessKey,\n      tabIndex: tabIndex,\n      elementAttr: {\n        role: splitButton ? \"menu\" : \"group\"\n      },\n      onItemClick: this._buttonGroupItemClick.bind(this),\n      onKeyboardHandled: e => this._keyboardHandler(e)\n    }, this._options.cache(\"buttonGroupOptions\"));\n    return buttonGroupOptions;\n  }\n  _renderPopupContent() {\n    const $content = this._popup.$content();\n    const template = this._getTemplateByOption(\"dropDownContentTemplate\");\n    $content.empty();\n    this._popupContentId = `dx-${new Guid()}`;\n    this.setAria(\"id\", this._popupContentId, $content);\n    return template.render({\n      container: getPublicElement($content),\n      model: this.option(\"items\") || this._dataController.getDataSource()\n    });\n  }\n  _popupOptions() {\n    const horizontalAlignment = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\n    return extend({\n      dragEnabled: false,\n      focusStateEnabled: false,\n      deferRendering: this.option(\"deferRendering\"),\n      hideOnOutsideClick: e => {\n        const $element = this.$element();\n        const $buttonClicked = $(e.target).closest(\".dx-dropdownbutton\");\n        return !$buttonClicked.is($element);\n      },\n      showTitle: false,\n      animation: {\n        show: {\n          type: \"fade\",\n          duration: 0,\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          duration: 400,\n          from: 1,\n          to: 0\n        }\n      },\n      _ignoreFunctionValueDeprecation: true,\n      width: () => getElementWidth(this.$element()),\n      height: \"auto\",\n      shading: false,\n      position: {\n        of: this.$element(),\n        collision: \"flipfit\",\n        my: `${horizontalAlignment} top`,\n        at: `${horizontalAlignment} bottom`\n      },\n      _wrapperClassExternal: \"dx-dropdowneditor-overlay\"\n    }, this._options.cache(\"dropDownOptions\"), {\n      visible: this.option(\"opened\")\n    });\n  }\n  _listOptions() {\n    const selectedItemKey = this.option(\"selectedItemKey\");\n    const useSelectMode = this.option(\"useSelectMode\");\n    return {\n      selectionMode: useSelectMode ? \"single\" : \"none\",\n      wrapItemText: this.option(\"wrapItemText\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      useItemTextAsTitle: this.option(\"useItemTextAsTitle\"),\n      onContentReady: () => this._fireContentReadyAction(),\n      selectedItemKeys: isDefined(selectedItemKey) && useSelectMode ? [selectedItemKey] : [],\n      grouped: this.option(\"grouped\"),\n      groupTemplate: this.option(\"groupTemplate\"),\n      keyExpr: this._dataController.key(),\n      noDataText: this.option(\"noDataText\"),\n      displayExpr: this.option(\"displayExpr\"),\n      itemTemplate: this.option(\"itemTemplate\"),\n      items: this.option(\"items\"),\n      dataSource: this._dataController.getDataSource(),\n      onItemClick: e => {\n        if (!this.option(\"useSelectMode\")) {\n          this._lastSelectedItemData = e.itemData;\n        }\n        this.option(\"selectedItemKey\", this._keyGetter(e.itemData));\n        const actionResult = this._fireItemClickAction(e);\n        if (false !== actionResult) {\n          this.toggle(false);\n          this._buttonGroup.focus();\n        }\n      }\n    };\n  }\n  _upDownKeyHandler() {\n    var _this$_popup;\n    if (null !== (_this$_popup = this._popup) && void 0 !== _this$_popup && _this$_popup.option(\"visible\") && this._list) {\n      this._list.focus();\n    } else {\n      this.open();\n    }\n    return true;\n  }\n  _escHandler() {\n    this.close();\n    this._buttonGroup.focus();\n    return true;\n  }\n  _tabHandler() {\n    this.close();\n    return true;\n  }\n  _renderPopup() {\n    const $popup = $(\"<div>\");\n    this.$element().append($popup);\n    this._popup = this._createComponent($popup, Popup, this._popupOptions());\n    this._popup.$content().addClass(DROP_DOWN_BUTTON_CONTENT);\n    this._popup.$wrapper().addClass(\"dx-dropdownbutton-popup-wrapper\");\n    this._popup.$overlayContent().attr(\"aria-label\", \"Dropdown\");\n    this._popup.on(\"hiding\", this._popupHidingHandler.bind(this));\n    this._popup.on(\"showing\", this._popupShowingHandler.bind(this));\n    this._bindInnerWidgetOptions(this._popup, \"dropDownOptions\");\n  }\n  _popupHidingHandler() {\n    this.option(\"opened\", false);\n    this._updateAriaAttributes(false);\n  }\n  _popupOptionChanged(args) {\n    const options = Widget.getOptionsFromContainer(args);\n    this._setPopupOption(options);\n    const optionsKeys = Object.keys(options);\n    if (optionsKeys.includes(\"width\") || optionsKeys.includes(\"height\")) {\n      this._dimensionChanged();\n    }\n  }\n  _dimensionChanged() {\n    const popupWidth = getSizeValue(this.option(\"dropDownOptions.width\"));\n    if (void 0 === popupWidth) {\n      this._setPopupOption(\"width\", () => getElementWidth(this.$element()));\n    }\n  }\n  _setPopupOption(optionName, value) {\n    this._setWidgetOption(\"_popup\", arguments);\n  }\n  _popupShowingHandler() {\n    this.option(\"opened\", true);\n    this._updateAriaAttributes(true);\n  }\n  _setElementAria(value) {\n    const elementAria = {\n      owns: value ? this._popupContentId : void 0\n    };\n    this.setAria(elementAria, this.$element());\n  }\n  _setButtonsAria(value) {\n    const commonButtonAria = {\n      expanded: value,\n      haspopup: \"listbox\"\n    };\n    const firstButtonAria = {};\n    if (!this.option(\"text\")) {\n      firstButtonAria.label = \"dropdownbutton\";\n    }\n    this._getButtons().each((index, $button) => {\n      if (0 === index) {\n        this.setAria(_extends({}, firstButtonAria, commonButtonAria), $($button));\n      } else {\n        this.setAria(commonButtonAria, $($button));\n      }\n    });\n  }\n  _updateAriaAttributes(value) {\n    this._setElementAria(value);\n    this._setButtonsAria(value);\n  }\n  _getButtons() {\n    return this._buttonGroup.$element().find(\".dx-button\");\n  }\n  _renderButtonGroup() {\n    var _this$_buttonGroup;\n    const $buttonGroup = (null === (_this$_buttonGroup = this._buttonGroup) || void 0 === _this$_buttonGroup ? void 0 : _this$_buttonGroup.$element()) || $(\"<div>\");\n    if (!this._buttonGroup) {\n      this.$element().append($buttonGroup);\n    }\n    this._buttonGroup = this._createComponent($buttonGroup, ButtonGroup, this._getButtonGroupOptions());\n    this._buttonGroup.registerKeyHandler(\"downArrow\", this._upDownKeyHandler.bind(this));\n    this._buttonGroup.registerKeyHandler(\"tab\", this._tabHandler.bind(this));\n    this._buttonGroup.registerKeyHandler(\"upArrow\", this._upDownKeyHandler.bind(this));\n    this._buttonGroup.registerKeyHandler(\"escape\", this._escHandler.bind(this));\n    this._bindInnerWidgetOptions(this._buttonGroup, \"buttonGroupOptions\");\n    this._updateAriaAttributes(this.option(\"opened\"));\n  }\n  _updateArrowClass() {\n    const hasArrow = this.option(\"splitButton\") || this.option(\"showArrowIcon\");\n    this.$element().toggleClass(\"dx-dropdownbutton-has-arrow\", hasArrow);\n  }\n  toggle(visible) {\n    var _this$_popup2;\n    if (!this._popup) {\n      this._renderPopup();\n      this._renderContent();\n    }\n    return null === (_this$_popup2 = this._popup) || void 0 === _this$_popup2 ? void 0 : _this$_popup2.toggle(visible);\n  }\n  open() {\n    return this.toggle(true);\n  }\n  close() {\n    return this.toggle(false);\n  }\n  _setListOption(name, value) {\n    var _this$_list;\n    null === (_this$_list = this._list) || void 0 === _this$_list || _this$_list.option(name, value);\n  }\n  _getDisplayValue(item) {\n    const isPrimitiveItem = !isObject(item);\n    const displayValue = isPrimitiveItem ? item : this._displayGetter(item);\n    return !isObject(displayValue) ? String(ensureDefined(displayValue, \"\")) : \"\";\n  }\n  _updateActionButton(selectedItem) {\n    if (this.option(\"useSelectMode\")) {\n      this.option({\n        text: this._getDisplayValue(selectedItem),\n        icon: isPlainObject(selectedItem) ? selectedItem.icon : void 0\n      });\n    }\n    this._setOptionWithoutOptionChange(\"selectedItem\", selectedItem);\n    this._setOptionWithoutOptionChange(\"selectedItemKey\", this._keyGetter(selectedItem));\n  }\n  _clean() {\n    var _this$_list2, _this$_popup3;\n    null === (_this$_list2 = this._list) || void 0 === _this$_list2 || _this$_list2.$element().remove();\n    null === (_this$_popup3 = this._popup) || void 0 === _this$_popup3 || _this$_popup3.$element().remove();\n  }\n  _selectedItemKeyChanged(value) {\n    this._setListOption(\"selectedItemKeys\", this.option(\"useSelectMode\") && isDefined(value) ? [value] : []);\n    const previousItem = this.option(\"selectedItem\");\n    this._loadSelectedItem().always(selectedItem => {\n      this._updateActionButton(selectedItem);\n      if (this._displayGetter(previousItem) !== this._displayGetter(selectedItem)) {\n        this._fireSelectionChangedAction({\n          previousValue: previousItem,\n          value: selectedItem\n        });\n      }\n    });\n  }\n  _updateButtonGroup(name, value) {\n    this._buttonGroup.option(name, value);\n    this._updateAriaAttributes(this.option(\"opened\"));\n  }\n  _actionButtonOptionChanged(_ref5) {\n    let {\n      name: name,\n      value: value\n    } = _ref5;\n    const newConfig = {};\n    newConfig[name] = value;\n    this._updateButtonGroup(\"items[0]\", extend({}, this._getActionButtonConfig(), newConfig));\n    this._popup && this._popup.repaint();\n  }\n  _selectModeChanged(value) {\n    if (value) {\n      this._setListOption(\"selectionMode\", \"single\");\n      const selectedItemKey = this.option(\"selectedItemKey\");\n      this._setListOption(\"selectedItemKeys\", isDefined(selectedItemKey) ? [selectedItemKey] : []);\n      this._selectedItemKeyChanged(this.option(\"selectedItemKey\"));\n    } else {\n      this._setListOption(\"selectionMode\", \"none\");\n      this.option({\n        selectedItemKey: void 0,\n        selectedItem: void 0\n      });\n      this._actionButtonOptionChanged({\n        text: this.option(\"text\")\n      });\n    }\n  }\n  _updateItemCollection(optionName) {\n    const selectedItemKey = this.option(\"selectedItemKey\");\n    this._setListOption(\"selectedItem\", null);\n    this._setWidgetOption(\"_list\", [optionName]);\n    if (isDefined(selectedItemKey)) {\n      this._loadSelectedItem().done(selectedItem => {\n        this._setListOption(\"selectedItemKeys\", [selectedItemKey]);\n        this._setListOption(\"selectedItem\", selectedItem);\n      }).fail(error => {\n        this._setListOption(\"selectedItemKeys\", []);\n      }).always(this._updateActionButton.bind(this));\n    }\n  }\n  _updateDataController(items) {\n    this._dataController.updateDataSource(items, this.option(\"keyExpr\"));\n    this._updateKeyExpr();\n  }\n  _updateKeyExpr() {\n    this._compileKeyGetter();\n    this._setListOption(\"keyExpr\", this._dataController.key());\n  }\n  focus() {\n    this._buttonGroup.focus();\n  }\n  _optionChanged(args) {\n    var _this$_popup4;\n    const {\n      name: name,\n      value: value\n    } = args;\n    switch (name) {\n      case \"useSelectMode\":\n        this._selectModeChanged(value);\n        break;\n      case \"splitButton\":\n        this._updateArrowClass();\n        this._renderButtonGroup();\n        break;\n      case \"displayExpr\":\n        this._compileDisplayGetter();\n        this._setListOption(name, value);\n        this._updateActionButton(this.option(\"selectedItem\"));\n        break;\n      case \"keyExpr\":\n        this._updateDataController();\n        break;\n      case \"buttonGroupOptions\":\n        this._innerWidgetOptionChanged(this._buttonGroup, args);\n        break;\n      case \"dropDownOptions\":\n        if (\"dropDownOptions.visible\" === args.fullName) {\n          break;\n        }\n        if (void 0 !== args.value.visible) {\n          delete args.value.visible;\n        }\n        this._popupOptionChanged(args);\n        this._innerWidgetOptionChanged(this._popup, args);\n        break;\n      case \"opened\":\n        this.toggle(value);\n        break;\n      case \"focusStateEnabled\":\n      case \"hoverStateEnabled\":\n        this._setListOption(name, value);\n        this._updateButtonGroup(name, value);\n        super._optionChanged(args);\n        break;\n      case \"items\":\n        this._updateDataController(this.option(\"items\"));\n        this._updateItemCollection(name);\n        break;\n      case \"dataSource\":\n        this._dataController.updateDataSource(value);\n        this._updateKeyExpr();\n        this._updateItemCollection(name);\n        break;\n      case \"icon\":\n      case \"text\":\n        this._actionButtonOptionChanged(args);\n        break;\n      case \"showArrowIcon\":\n        this._updateArrowClass();\n        this._renderButtonGroup();\n        this._popup && this._popup.repaint();\n        break;\n      case \"width\":\n      case \"height\":\n        super._optionChanged(args);\n        null === (_this$_popup4 = this._popup) || void 0 === _this$_popup4 || _this$_popup4.repaint();\n        break;\n      case \"stylingMode\":\n      case \"tabIndex\":\n        this._updateButtonGroup(name, value);\n        break;\n      case \"type\":\n        this._updateButtonGroup(\"items\", this._getButtonGroupItems());\n        break;\n      case \"itemTemplate\":\n      case \"grouped\":\n      case \"noDataText\":\n      case \"groupTemplate\":\n      case \"wrapItemText\":\n      case \"useItemTextAsTitle\":\n        this._setListOption(name, value);\n        break;\n      case \"dropDownContentTemplate\":\n        this._renderContent();\n        break;\n      case \"selectedItemKey\":\n        this._selectedItemKeyChanged(value);\n        break;\n      case \"selectedItem\":\n        break;\n      case \"onItemClick\":\n        this._createItemClickAction();\n        break;\n      case \"onButtonClick\":\n        this._createActionClickAction();\n        break;\n      case \"onSelectionChanged\":\n        this._createSelectionChangedAction();\n        break;\n      case \"deferRendering\":\n        {\n          const {\n            opened: opened\n          } = this.option();\n          this.toggle(opened);\n          break;\n        }\n      case \"template\":\n        this._renderButtonGroup();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  getDataSource() {\n    return this._dataController.getDataSource();\n  }\n}\nregisterComponent(\"dxDropDownButton\", DropDownButton);\nexport default DropDownButton;","map":{"version":3,"names":["_extends","messageLocalization","registerComponent","getPublicElement","Guid","$","FunctionTemplate","ensureDefined","compileGetter","Deferred","extend","getImageContainer","isDefined","isObject","isPlainObject","DataController","ButtonGroup","List","Widget","getElementWidth","getSizeValue","Popup","DROP_DOWN_BUTTON_CLASS","DROP_DOWN_BUTTON_CONTENT","DROP_DOWN_BUTTON_ACTION_CLASS","DROP_DOWN_BUTTON_TOGGLE_CLASS","DROP_DOWN_BUTTON_HAS_ARROW_CLASS","DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS","DROP_DOWN_EDITOR_OVERLAY_CLASS","DX_BUTTON_CLASS","DX_BUTTON_TEXT_CLASS","DX_ICON_RIGHT_CLASS","OVERLAY_CONTENT_LABEL","DropDownButton","_getDefaultOptions","itemTemplate","keyExpr","selectedItem","selectedItemKey","stylingMode","deferRendering","noDataText","format","useSelectMode","splitButton","showArrowIcon","template","text","type","onButtonClick","onSelectionChanged","onItemClick","opened","items","dataSource","focusStateEnabled","hoverStateEnabled","dropDownOptions","dropDownContentTemplate","wrapItemText","useItemTextAsTitle","grouped","groupTemplate","buttonGroupOptions","_setOptionsByReference","_optionsByReference","_init","_createItemClickAction","_createActionClickAction","_createSelectionChangedAction","_initDataController","_compileKeyGetter","_compileDisplayGetter","_options","cache","option","_dataController","key","_initTemplates","_templateManager","addDefaultTemplates","content","options","$popupContent","container","$listContainer","appendTo","_list","_createComponent","_listOptions","registerKeyHandler","_escHandler","bind","_keyGetter","displayExpr","_displayGetter","_initMarkup","$element","addClass","_renderButtonGroup","_updateArrowClass","_loadSelectedItem","done","_updateActionButton","_renderFocusTarget","_render","_renderPopup","_renderContentImpl","_popup","_renderPopupContent","_this$_loadSingleDefe","_loadSingleDeferred","reject","d","_lastSelectedItemData","cachedResult","resolve","loadSingle","fail","promise","_actionClickAction","_createActionByOption","_selectionChangedAction","_itemClickAction","_fireSelectionChangedAction","_ref","previousValue","value","item","previousItem","_fireItemClickAction","_ref2","event","itemElement","itemData","_actionItem","_getButtonTemplate","_ref3","buttonContent","icon","$firstIcon","$textContainer","$secondIcon","append","_getActionButtonConfig","actionButtonConfig","elementAttr","class","role","_getSpinButtonConfig","config","_getButtonGroupItems","push","_buttonGroupItemClick","_ref4","isActionButton","isToggleButton","toggle","_getButtonGroupOptions","accessKey","tabIndex","width","height","selectionMode","onKeyboardHandled","e","_keyboardHandler","$content","_getTemplateByOption","empty","_popupContentId","setAria","render","model","getDataSource","_popupOptions","horizontalAlignment","dragEnabled","hideOnOutsideClick","$buttonClicked","target","closest","is","showTitle","animation","show","duration","from","to","hide","_ignoreFunctionValueDeprecation","shading","position","of","collision","my","at","_wrapperClassExternal","visible","onContentReady","_fireContentReadyAction","selectedItemKeys","actionResult","_buttonGroup","focus","_upDownKeyHandler","_this$_popup","open","close","_tabHandler","$popup","$wrapper","$overlayContent","attr","on","_popupHidingHandler","_popupShowingHandler","_bindInnerWidgetOptions","_updateAriaAttributes","_popupOptionChanged","args","getOptionsFromContainer","_setPopupOption","optionsKeys","Object","keys","includes","_dimensionChanged","popupWidth","optionName","_setWidgetOption","arguments","_setElementAria","elementAria","owns","_setButtonsAria","commonButtonAria","expanded","haspopup","firstButtonAria","label","_getButtons","each","index","$button","find","_this$_buttonGroup","$buttonGroup","hasArrow","toggleClass","_this$_popup2","_renderContent","_setListOption","name","_this$_list","_getDisplayValue","isPrimitiveItem","displayValue","String","_setOptionWithoutOptionChange","_clean","_this$_list2","_this$_popup3","remove","_selectedItemKeyChanged","always","_updateButtonGroup","_actionButtonOptionChanged","_ref5","newConfig","repaint","_selectModeChanged","_updateItemCollection","error","_updateDataController","updateDataSource","_updateKeyExpr","_optionChanged","_this$_popup4","_innerWidgetOptionChanged","fullName"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/m_drop_down_button.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/m_drop_down_button.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport messageLocalization from \"../../common/core/localization/message\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../core/element\";\r\nimport Guid from \"../../core/guid\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    FunctionTemplate\r\n} from \"../../core/templates/function_template\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    compileGetter\r\n} from \"../../core/utils/data\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    getImageContainer\r\n} from \"../../core/utils/icon\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isPlainObject\r\n} from \"../../core/utils/type\";\r\nimport DataController from \"../../data_controller\";\r\nimport ButtonGroup from \"../../ui/button_group\";\r\nimport List from \"../../ui/list_light\";\r\nimport Widget from \"../core/widget/widget\";\r\nimport {\r\n    getElementWidth,\r\n    getSizeValue\r\n} from \"../ui/drop_down_editor/m_utils\";\r\nimport Popup from \"../ui/popup/m_popup\";\r\nconst DROP_DOWN_BUTTON_CLASS = \"dx-dropdownbutton\";\r\nconst DROP_DOWN_BUTTON_CONTENT = \"dx-dropdownbutton-content\";\r\nconst DROP_DOWN_BUTTON_ACTION_CLASS = \"dx-dropdownbutton-action\";\r\nconst DROP_DOWN_BUTTON_TOGGLE_CLASS = \"dx-dropdownbutton-toggle\";\r\nconst DROP_DOWN_BUTTON_HAS_ARROW_CLASS = \"dx-dropdownbutton-has-arrow\";\r\nconst DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS = \"dx-dropdownbutton-popup-wrapper\";\r\nconst DROP_DOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nconst DX_BUTTON_CLASS = \"dx-button\";\r\nconst DX_BUTTON_TEXT_CLASS = \"dx-button-text\";\r\nconst DX_ICON_RIGHT_CLASS = \"dx-icon-right\";\r\nconst OVERLAY_CONTENT_LABEL = \"Dropdown\";\r\nclass DropDownButton extends Widget {\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            itemTemplate: \"item\",\r\n            keyExpr: \"this\",\r\n            selectedItem: null,\r\n            selectedItemKey: null,\r\n            stylingMode: \"outlined\",\r\n            deferRendering: true,\r\n            noDataText: messageLocalization.format(\"dxCollectionWidget-noDataText\"),\r\n            useSelectMode: false,\r\n            splitButton: false,\r\n            showArrowIcon: true,\r\n            template: null,\r\n            text: \"\",\r\n            type: \"normal\",\r\n            onButtonClick: null,\r\n            onSelectionChanged: null,\r\n            onItemClick: null,\r\n            opened: false,\r\n            items: null,\r\n            dataSource: null,\r\n            focusStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            dropDownOptions: {},\r\n            dropDownContentTemplate: \"content\",\r\n            wrapItemText: false,\r\n            useItemTextAsTitle: true,\r\n            grouped: false,\r\n            groupTemplate: \"group\",\r\n            buttonGroupOptions: {}\r\n        })\r\n    }\r\n    _setOptionsByReference() {\r\n        super._setOptionsByReference();\r\n        extend(this._optionsByReference, {\r\n            selectedItem: true\r\n        })\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._createItemClickAction();\r\n        this._createActionClickAction();\r\n        this._createSelectionChangedAction();\r\n        this._initDataController();\r\n        this._compileKeyGetter();\r\n        this._compileDisplayGetter();\r\n        this._options.cache(\"buttonGroupOptions\", this.option(\"buttonGroupOptions\"));\r\n        this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"))\r\n    }\r\n    _initDataController() {\r\n        const dataSource = this.option(\"dataSource\");\r\n        this._dataController = new DataController(dataSource ?? this.option(\"items\"), {\r\n            key: this.option(\"keyExpr\")\r\n        })\r\n    }\r\n    _initTemplates() {\r\n        this._templateManager.addDefaultTemplates({\r\n            content: new FunctionTemplate((options => {\r\n                const $popupContent = $(options.container);\r\n                const $listContainer = $(\"<div>\").appendTo($popupContent);\r\n                this._list = this._createComponent($listContainer, List, this._listOptions());\r\n                this._list.registerKeyHandler(\"escape\", this._escHandler.bind(this));\r\n                this._list.registerKeyHandler(\"tab\", this._escHandler.bind(this));\r\n                this._list.registerKeyHandler(\"leftArrow\", this._escHandler.bind(this));\r\n                this._list.registerKeyHandler(\"rightArrow\", this._escHandler.bind(this))\r\n            }))\r\n        });\r\n        super._initTemplates()\r\n    }\r\n    _compileKeyGetter() {\r\n        this._keyGetter = compileGetter(this._dataController.key())\r\n    }\r\n    _compileDisplayGetter() {\r\n        const {\r\n            displayExpr: displayExpr\r\n        } = this.option();\r\n        this._displayGetter = compileGetter(displayExpr)\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this.$element().addClass(\"dx-dropdownbutton\");\r\n        this._renderButtonGroup();\r\n        this._updateArrowClass();\r\n        if (isDefined(this.option(\"selectedItemKey\"))) {\r\n            this._loadSelectedItem().done(this._updateActionButton.bind(this))\r\n        }\r\n    }\r\n    _renderFocusTarget() {}\r\n    _render() {\r\n        if (!this.option(\"deferRendering\") || this.option(\"opened\")) {\r\n            this._renderPopup()\r\n        }\r\n        super._render()\r\n    }\r\n    _renderContentImpl() {\r\n        if (this._popup) {\r\n            this._renderPopupContent()\r\n        }\r\n        return super._renderContentImpl()\r\n    }\r\n    _loadSelectedItem() {\r\n        var _this$_loadSingleDefe;\r\n        null === (_this$_loadSingleDefe = this._loadSingleDeferred) || void 0 === _this$_loadSingleDefe || _this$_loadSingleDefe.reject();\r\n        const d = Deferred();\r\n        if (this._list && void 0 !== this._lastSelectedItemData) {\r\n            const cachedResult = this.option(\"useSelectMode\") ? this._list.option(\"selectedItem\") : this._lastSelectedItemData;\r\n            return d.resolve(cachedResult)\r\n        }\r\n        this._lastSelectedItemData = void 0;\r\n        const selectedItemKey = this.option(\"selectedItemKey\");\r\n        this._dataController.loadSingle(selectedItemKey).done(d.resolve).fail((() => {\r\n            d.reject(null)\r\n        }));\r\n        this._loadSingleDeferred = d;\r\n        return d.promise()\r\n    }\r\n    _createActionClickAction() {\r\n        this._actionClickAction = this._createActionByOption(\"onButtonClick\")\r\n    }\r\n    _createSelectionChangedAction() {\r\n        this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\")\r\n    }\r\n    _createItemClickAction() {\r\n        this._itemClickAction = this._createActionByOption(\"onItemClick\")\r\n    }\r\n    _fireSelectionChangedAction(_ref) {\r\n        let {\r\n            previousValue: previousValue,\r\n            value: value\r\n        } = _ref;\r\n        this._selectionChangedAction({\r\n            item: value,\r\n            previousItem: previousValue\r\n        })\r\n    }\r\n    _fireItemClickAction(_ref2) {\r\n        let {\r\n            event: event,\r\n            itemElement: itemElement,\r\n            itemData: itemData\r\n        } = _ref2;\r\n        return this._itemClickAction({\r\n            event: event,\r\n            itemElement: itemElement,\r\n            itemData: this._actionItem || itemData\r\n        })\r\n    }\r\n    _getButtonTemplate() {\r\n        const {\r\n            template: template,\r\n            splitButton: splitButton,\r\n            showArrowIcon: showArrowIcon\r\n        } = this.option();\r\n        if (template) {\r\n            return template\r\n        }\r\n        return splitButton || !showArrowIcon ? \"content\" : (_ref3, buttonContent) => {\r\n            let {\r\n                text: text,\r\n                icon: icon\r\n            } = _ref3;\r\n            const $firstIcon = getImageContainer(icon);\r\n            const $textContainer = text ? $(\"<span>\").text(text).addClass(\"dx-button-text\") : void 0;\r\n            const $secondIcon = getImageContainer(\"spindown\").addClass(\"dx-icon-right\");\r\n            $(buttonContent).append($firstIcon, $textContainer, $secondIcon)\r\n        }\r\n    }\r\n    _getActionButtonConfig() {\r\n        const {\r\n            icon: icon,\r\n            text: text,\r\n            type: type,\r\n            splitButton: splitButton\r\n        } = this.option();\r\n        const actionButtonConfig = {\r\n            text: text,\r\n            icon: icon,\r\n            type: type,\r\n            template: this._getButtonTemplate(),\r\n            elementAttr: {\r\n                class: \"dx-dropdownbutton-action\"\r\n            }\r\n        };\r\n        if (splitButton) {\r\n            actionButtonConfig.elementAttr.role = \"menuitem\"\r\n        }\r\n        return actionButtonConfig\r\n    }\r\n    _getSpinButtonConfig() {\r\n        const {\r\n            type: type\r\n        } = this.option();\r\n        const config = {\r\n            type: type,\r\n            icon: \"spindown\",\r\n            elementAttr: {\r\n                class: \"dx-dropdownbutton-toggle\",\r\n                role: \"menuitem\"\r\n            }\r\n        };\r\n        return config\r\n    }\r\n    _getButtonGroupItems() {\r\n        const {\r\n            splitButton: splitButton\r\n        } = this.option();\r\n        const items = [this._getActionButtonConfig()];\r\n        if (splitButton) {\r\n            items.push(this._getSpinButtonConfig())\r\n        }\r\n        return items\r\n    }\r\n    _buttonGroupItemClick(_ref4) {\r\n        let {\r\n            event: event,\r\n            itemData: itemData\r\n        } = _ref4;\r\n        const isActionButton = \"dx-dropdownbutton-action\" === itemData.elementAttr.class;\r\n        const isToggleButton = \"dx-dropdownbutton-toggle\" === itemData.elementAttr.class;\r\n        if (isToggleButton) {\r\n            this.toggle()\r\n        } else if (isActionButton) {\r\n            this._actionClickAction({\r\n                event: event,\r\n                selectedItem: this.option(\"selectedItem\")\r\n            });\r\n            if (!this.option(\"splitButton\")) {\r\n                this.toggle()\r\n            }\r\n        }\r\n    }\r\n    _getButtonGroupOptions() {\r\n        const {\r\n            accessKey: accessKey,\r\n            focusStateEnabled: focusStateEnabled,\r\n            hoverStateEnabled: hoverStateEnabled,\r\n            splitButton: splitButton,\r\n            stylingMode: stylingMode,\r\n            tabIndex: tabIndex\r\n        } = this.option();\r\n        const buttonGroupOptions = _extends({\r\n            items: this._getButtonGroupItems(),\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            selectionMode: \"none\",\r\n            focusStateEnabled: focusStateEnabled,\r\n            hoverStateEnabled: hoverStateEnabled,\r\n            stylingMode: stylingMode,\r\n            accessKey: accessKey,\r\n            tabIndex: tabIndex,\r\n            elementAttr: {\r\n                role: splitButton ? \"menu\" : \"group\"\r\n            },\r\n            onItemClick: this._buttonGroupItemClick.bind(this),\r\n            onKeyboardHandled: e => this._keyboardHandler(e)\r\n        }, this._options.cache(\"buttonGroupOptions\"));\r\n        return buttonGroupOptions\r\n    }\r\n    _renderPopupContent() {\r\n        const $content = this._popup.$content();\r\n        const template = this._getTemplateByOption(\"dropDownContentTemplate\");\r\n        $content.empty();\r\n        this._popupContentId = `dx-${new Guid}`;\r\n        this.setAria(\"id\", this._popupContentId, $content);\r\n        return template.render({\r\n            container: getPublicElement($content),\r\n            model: this.option(\"items\") || this._dataController.getDataSource()\r\n        })\r\n    }\r\n    _popupOptions() {\r\n        const horizontalAlignment = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\r\n        return extend({\r\n            dragEnabled: false,\r\n            focusStateEnabled: false,\r\n            deferRendering: this.option(\"deferRendering\"),\r\n            hideOnOutsideClick: e => {\r\n                const $element = this.$element();\r\n                const $buttonClicked = $(e.target).closest(\".dx-dropdownbutton\");\r\n                return !$buttonClicked.is($element)\r\n            },\r\n            showTitle: false,\r\n            animation: {\r\n                show: {\r\n                    type: \"fade\",\r\n                    duration: 0,\r\n                    from: 0,\r\n                    to: 1\r\n                },\r\n                hide: {\r\n                    type: \"fade\",\r\n                    duration: 400,\r\n                    from: 1,\r\n                    to: 0\r\n                }\r\n            },\r\n            _ignoreFunctionValueDeprecation: true,\r\n            width: () => getElementWidth(this.$element()),\r\n            height: \"auto\",\r\n            shading: false,\r\n            position: {\r\n                of: this.$element(),\r\n                collision: \"flipfit\",\r\n                my: `${horizontalAlignment} top`,\r\n                at: `${horizontalAlignment} bottom`\r\n            },\r\n            _wrapperClassExternal: \"dx-dropdowneditor-overlay\"\r\n        }, this._options.cache(\"dropDownOptions\"), {\r\n            visible: this.option(\"opened\")\r\n        })\r\n    }\r\n    _listOptions() {\r\n        const selectedItemKey = this.option(\"selectedItemKey\");\r\n        const useSelectMode = this.option(\"useSelectMode\");\r\n        return {\r\n            selectionMode: useSelectMode ? \"single\" : \"none\",\r\n            wrapItemText: this.option(\"wrapItemText\"),\r\n            focusStateEnabled: this.option(\"focusStateEnabled\"),\r\n            hoverStateEnabled: this.option(\"hoverStateEnabled\"),\r\n            useItemTextAsTitle: this.option(\"useItemTextAsTitle\"),\r\n            onContentReady: () => this._fireContentReadyAction(),\r\n            selectedItemKeys: isDefined(selectedItemKey) && useSelectMode ? [selectedItemKey] : [],\r\n            grouped: this.option(\"grouped\"),\r\n            groupTemplate: this.option(\"groupTemplate\"),\r\n            keyExpr: this._dataController.key(),\r\n            noDataText: this.option(\"noDataText\"),\r\n            displayExpr: this.option(\"displayExpr\"),\r\n            itemTemplate: this.option(\"itemTemplate\"),\r\n            items: this.option(\"items\"),\r\n            dataSource: this._dataController.getDataSource(),\r\n            onItemClick: e => {\r\n                if (!this.option(\"useSelectMode\")) {\r\n                    this._lastSelectedItemData = e.itemData\r\n                }\r\n                this.option(\"selectedItemKey\", this._keyGetter(e.itemData));\r\n                const actionResult = this._fireItemClickAction(e);\r\n                if (false !== actionResult) {\r\n                    this.toggle(false);\r\n                    this._buttonGroup.focus()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _upDownKeyHandler() {\r\n        var _this$_popup;\r\n        if (null !== (_this$_popup = this._popup) && void 0 !== _this$_popup && _this$_popup.option(\"visible\") && this._list) {\r\n            this._list.focus()\r\n        } else {\r\n            this.open()\r\n        }\r\n        return true\r\n    }\r\n    _escHandler() {\r\n        this.close();\r\n        this._buttonGroup.focus();\r\n        return true\r\n    }\r\n    _tabHandler() {\r\n        this.close();\r\n        return true\r\n    }\r\n    _renderPopup() {\r\n        const $popup = $(\"<div>\");\r\n        this.$element().append($popup);\r\n        this._popup = this._createComponent($popup, Popup, this._popupOptions());\r\n        this._popup.$content().addClass(DROP_DOWN_BUTTON_CONTENT);\r\n        this._popup.$wrapper().addClass(\"dx-dropdownbutton-popup-wrapper\");\r\n        this._popup.$overlayContent().attr(\"aria-label\", \"Dropdown\");\r\n        this._popup.on(\"hiding\", this._popupHidingHandler.bind(this));\r\n        this._popup.on(\"showing\", this._popupShowingHandler.bind(this));\r\n        this._bindInnerWidgetOptions(this._popup, \"dropDownOptions\")\r\n    }\r\n    _popupHidingHandler() {\r\n        this.option(\"opened\", false);\r\n        this._updateAriaAttributes(false)\r\n    }\r\n    _popupOptionChanged(args) {\r\n        const options = Widget.getOptionsFromContainer(args);\r\n        this._setPopupOption(options);\r\n        const optionsKeys = Object.keys(options);\r\n        if (optionsKeys.includes(\"width\") || optionsKeys.includes(\"height\")) {\r\n            this._dimensionChanged()\r\n        }\r\n    }\r\n    _dimensionChanged() {\r\n        const popupWidth = getSizeValue(this.option(\"dropDownOptions.width\"));\r\n        if (void 0 === popupWidth) {\r\n            this._setPopupOption(\"width\", (() => getElementWidth(this.$element())))\r\n        }\r\n    }\r\n    _setPopupOption(optionName, value) {\r\n        this._setWidgetOption(\"_popup\", arguments)\r\n    }\r\n    _popupShowingHandler() {\r\n        this.option(\"opened\", true);\r\n        this._updateAriaAttributes(true)\r\n    }\r\n    _setElementAria(value) {\r\n        const elementAria = {\r\n            owns: value ? this._popupContentId : void 0\r\n        };\r\n        this.setAria(elementAria, this.$element())\r\n    }\r\n    _setButtonsAria(value) {\r\n        const commonButtonAria = {\r\n            expanded: value,\r\n            haspopup: \"listbox\"\r\n        };\r\n        const firstButtonAria = {};\r\n        if (!this.option(\"text\")) {\r\n            firstButtonAria.label = \"dropdownbutton\"\r\n        }\r\n        this._getButtons().each(((index, $button) => {\r\n            if (0 === index) {\r\n                this.setAria(_extends({}, firstButtonAria, commonButtonAria), $($button))\r\n            } else {\r\n                this.setAria(commonButtonAria, $($button))\r\n            }\r\n        }))\r\n    }\r\n    _updateAriaAttributes(value) {\r\n        this._setElementAria(value);\r\n        this._setButtonsAria(value)\r\n    }\r\n    _getButtons() {\r\n        return this._buttonGroup.$element().find(\".dx-button\")\r\n    }\r\n    _renderButtonGroup() {\r\n        var _this$_buttonGroup;\r\n        const $buttonGroup = (null === (_this$_buttonGroup = this._buttonGroup) || void 0 === _this$_buttonGroup ? void 0 : _this$_buttonGroup.$element()) || $(\"<div>\");\r\n        if (!this._buttonGroup) {\r\n            this.$element().append($buttonGroup)\r\n        }\r\n        this._buttonGroup = this._createComponent($buttonGroup, ButtonGroup, this._getButtonGroupOptions());\r\n        this._buttonGroup.registerKeyHandler(\"downArrow\", this._upDownKeyHandler.bind(this));\r\n        this._buttonGroup.registerKeyHandler(\"tab\", this._tabHandler.bind(this));\r\n        this._buttonGroup.registerKeyHandler(\"upArrow\", this._upDownKeyHandler.bind(this));\r\n        this._buttonGroup.registerKeyHandler(\"escape\", this._escHandler.bind(this));\r\n        this._bindInnerWidgetOptions(this._buttonGroup, \"buttonGroupOptions\");\r\n        this._updateAriaAttributes(this.option(\"opened\"))\r\n    }\r\n    _updateArrowClass() {\r\n        const hasArrow = this.option(\"splitButton\") || this.option(\"showArrowIcon\");\r\n        this.$element().toggleClass(\"dx-dropdownbutton-has-arrow\", hasArrow)\r\n    }\r\n    toggle(visible) {\r\n        var _this$_popup2;\r\n        if (!this._popup) {\r\n            this._renderPopup();\r\n            this._renderContent()\r\n        }\r\n        return null === (_this$_popup2 = this._popup) || void 0 === _this$_popup2 ? void 0 : _this$_popup2.toggle(visible)\r\n    }\r\n    open() {\r\n        return this.toggle(true)\r\n    }\r\n    close() {\r\n        return this.toggle(false)\r\n    }\r\n    _setListOption(name, value) {\r\n        var _this$_list;\r\n        null === (_this$_list = this._list) || void 0 === _this$_list || _this$_list.option(name, value)\r\n    }\r\n    _getDisplayValue(item) {\r\n        const isPrimitiveItem = !isObject(item);\r\n        const displayValue = isPrimitiveItem ? item : this._displayGetter(item);\r\n        return !isObject(displayValue) ? String(ensureDefined(displayValue, \"\")) : \"\"\r\n    }\r\n    _updateActionButton(selectedItem) {\r\n        if (this.option(\"useSelectMode\")) {\r\n            this.option({\r\n                text: this._getDisplayValue(selectedItem),\r\n                icon: isPlainObject(selectedItem) ? selectedItem.icon : void 0\r\n            })\r\n        }\r\n        this._setOptionWithoutOptionChange(\"selectedItem\", selectedItem);\r\n        this._setOptionWithoutOptionChange(\"selectedItemKey\", this._keyGetter(selectedItem))\r\n    }\r\n    _clean() {\r\n        var _this$_list2, _this$_popup3;\r\n        null === (_this$_list2 = this._list) || void 0 === _this$_list2 || _this$_list2.$element().remove();\r\n        null === (_this$_popup3 = this._popup) || void 0 === _this$_popup3 || _this$_popup3.$element().remove()\r\n    }\r\n    _selectedItemKeyChanged(value) {\r\n        this._setListOption(\"selectedItemKeys\", this.option(\"useSelectMode\") && isDefined(value) ? [value] : []);\r\n        const previousItem = this.option(\"selectedItem\");\r\n        this._loadSelectedItem().always((selectedItem => {\r\n            this._updateActionButton(selectedItem);\r\n            if (this._displayGetter(previousItem) !== this._displayGetter(selectedItem)) {\r\n                this._fireSelectionChangedAction({\r\n                    previousValue: previousItem,\r\n                    value: selectedItem\r\n                })\r\n            }\r\n        }))\r\n    }\r\n    _updateButtonGroup(name, value) {\r\n        this._buttonGroup.option(name, value);\r\n        this._updateAriaAttributes(this.option(\"opened\"))\r\n    }\r\n    _actionButtonOptionChanged(_ref5) {\r\n        let {\r\n            name: name,\r\n            value: value\r\n        } = _ref5;\r\n        const newConfig = {};\r\n        newConfig[name] = value;\r\n        this._updateButtonGroup(\"items[0]\", extend({}, this._getActionButtonConfig(), newConfig));\r\n        this._popup && this._popup.repaint()\r\n    }\r\n    _selectModeChanged(value) {\r\n        if (value) {\r\n            this._setListOption(\"selectionMode\", \"single\");\r\n            const selectedItemKey = this.option(\"selectedItemKey\");\r\n            this._setListOption(\"selectedItemKeys\", isDefined(selectedItemKey) ? [selectedItemKey] : []);\r\n            this._selectedItemKeyChanged(this.option(\"selectedItemKey\"))\r\n        } else {\r\n            this._setListOption(\"selectionMode\", \"none\");\r\n            this.option({\r\n                selectedItemKey: void 0,\r\n                selectedItem: void 0\r\n            });\r\n            this._actionButtonOptionChanged({\r\n                text: this.option(\"text\")\r\n            })\r\n        }\r\n    }\r\n    _updateItemCollection(optionName) {\r\n        const selectedItemKey = this.option(\"selectedItemKey\");\r\n        this._setListOption(\"selectedItem\", null);\r\n        this._setWidgetOption(\"_list\", [optionName]);\r\n        if (isDefined(selectedItemKey)) {\r\n            this._loadSelectedItem().done((selectedItem => {\r\n                this._setListOption(\"selectedItemKeys\", [selectedItemKey]);\r\n                this._setListOption(\"selectedItem\", selectedItem)\r\n            })).fail((error => {\r\n                this._setListOption(\"selectedItemKeys\", [])\r\n            })).always(this._updateActionButton.bind(this))\r\n        }\r\n    }\r\n    _updateDataController(items) {\r\n        this._dataController.updateDataSource(items, this.option(\"keyExpr\"));\r\n        this._updateKeyExpr()\r\n    }\r\n    _updateKeyExpr() {\r\n        this._compileKeyGetter();\r\n        this._setListOption(\"keyExpr\", this._dataController.key())\r\n    }\r\n    focus() {\r\n        this._buttonGroup.focus()\r\n    }\r\n    _optionChanged(args) {\r\n        var _this$_popup4;\r\n        const {\r\n            name: name,\r\n            value: value\r\n        } = args;\r\n        switch (name) {\r\n            case \"useSelectMode\":\r\n                this._selectModeChanged(value);\r\n                break;\r\n            case \"splitButton\":\r\n                this._updateArrowClass();\r\n                this._renderButtonGroup();\r\n                break;\r\n            case \"displayExpr\":\r\n                this._compileDisplayGetter();\r\n                this._setListOption(name, value);\r\n                this._updateActionButton(this.option(\"selectedItem\"));\r\n                break;\r\n            case \"keyExpr\":\r\n                this._updateDataController();\r\n                break;\r\n            case \"buttonGroupOptions\":\r\n                this._innerWidgetOptionChanged(this._buttonGroup, args);\r\n                break;\r\n            case \"dropDownOptions\":\r\n                if (\"dropDownOptions.visible\" === args.fullName) {\r\n                    break\r\n                }\r\n                if (void 0 !== args.value.visible) {\r\n                    delete args.value.visible\r\n                }\r\n                this._popupOptionChanged(args);\r\n                this._innerWidgetOptionChanged(this._popup, args);\r\n                break;\r\n            case \"opened\":\r\n                this.toggle(value);\r\n                break;\r\n            case \"focusStateEnabled\":\r\n            case \"hoverStateEnabled\":\r\n                this._setListOption(name, value);\r\n                this._updateButtonGroup(name, value);\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"items\":\r\n                this._updateDataController(this.option(\"items\"));\r\n                this._updateItemCollection(name);\r\n                break;\r\n            case \"dataSource\":\r\n                this._dataController.updateDataSource(value);\r\n                this._updateKeyExpr();\r\n                this._updateItemCollection(name);\r\n                break;\r\n            case \"icon\":\r\n            case \"text\":\r\n                this._actionButtonOptionChanged(args);\r\n                break;\r\n            case \"showArrowIcon\":\r\n                this._updateArrowClass();\r\n                this._renderButtonGroup();\r\n                this._popup && this._popup.repaint();\r\n                break;\r\n            case \"width\":\r\n            case \"height\":\r\n                super._optionChanged(args);\r\n                null === (_this$_popup4 = this._popup) || void 0 === _this$_popup4 || _this$_popup4.repaint();\r\n                break;\r\n            case \"stylingMode\":\r\n            case \"tabIndex\":\r\n                this._updateButtonGroup(name, value);\r\n                break;\r\n            case \"type\":\r\n                this._updateButtonGroup(\"items\", this._getButtonGroupItems());\r\n                break;\r\n            case \"itemTemplate\":\r\n            case \"grouped\":\r\n            case \"noDataText\":\r\n            case \"groupTemplate\":\r\n            case \"wrapItemText\":\r\n            case \"useItemTextAsTitle\":\r\n                this._setListOption(name, value);\r\n                break;\r\n            case \"dropDownContentTemplate\":\r\n                this._renderContent();\r\n                break;\r\n            case \"selectedItemKey\":\r\n                this._selectedItemKeyChanged(value);\r\n                break;\r\n            case \"selectedItem\":\r\n                break;\r\n            case \"onItemClick\":\r\n                this._createItemClickAction();\r\n                break;\r\n            case \"onButtonClick\":\r\n                this._createActionClickAction();\r\n                break;\r\n            case \"onSelectionChanged\":\r\n                this._createSelectionChangedAction();\r\n                break;\r\n            case \"deferRendering\": {\r\n                const {\r\n                    opened: opened\r\n                } = this.option();\r\n                this.toggle(opened);\r\n                break\r\n            }\r\n            case \"template\":\r\n                this._renderButtonGroup();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    getDataSource() {\r\n        return this._dataController.getDataSource()\r\n    }\r\n}\r\nregisterComponent(\"dxDropDownButton\", DropDownButton);\r\nexport default DropDownButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}