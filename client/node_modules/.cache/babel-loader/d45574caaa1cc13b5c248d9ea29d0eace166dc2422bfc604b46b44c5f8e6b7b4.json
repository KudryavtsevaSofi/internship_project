{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/filter/m_filter_row.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport { normalizeKeyName } from \"../../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport $ from \"../../../../core/renderer\";\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each, map } from \"../../../../core/utils/iterator\";\nimport { getOuterWidth } from \"../../../../core/utils/size\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport Editor from \"../../../../ui/editor/editor\";\nimport Menu from \"../../../../ui/menu\";\nimport Overlay from \"../../../../ui/overlay/ui.overlay\";\nimport { selectView } from \"../../../../ui/shared/accessibility\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nconst OPERATION_ICONS = {\n  \"=\": \"filter-operation-equals\",\n  \"<>\": \"filter-operation-not-equals\",\n  \"<\": \"filter-operation-less\",\n  \"<=\": \"filter-operation-less-equal\",\n  \">\": \"filter-operation-greater\",\n  \">=\": \"filter-operation-greater-equal\",\n  default: \"filter-operation-default\",\n  notcontains: \"filter-operation-not-contains\",\n  contains: \"filter-operation-contains\",\n  startswith: \"filter-operation-starts-with\",\n  endswith: \"filter-operation-ends-with\",\n  between: \"filter-operation-between\"\n};\nconst OPERATION_DESCRIPTORS = {\n  \"=\": \"equal\",\n  \"<>\": \"notEqual\",\n  \"<\": \"lessThan\",\n  \"<=\": \"lessThanOrEqual\",\n  \">\": \"greaterThan\",\n  \">=\": \"greaterThanOrEqual\",\n  startswith: \"startsWith\",\n  contains: \"contains\",\n  notcontains: \"notContains\",\n  endswith: \"endsWith\",\n  between: \"between\"\n};\nconst FILTERING_TIMEOUT = 700;\nconst CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;\nconst FILTER_ROW_CLASS = \"filter-row\";\nconst FILTER_RANGE_OVERLAY_CLASS = \"filter-range-overlay\";\nconst FILTER_RANGE_START_CLASS = \"filter-range-start\";\nconst FILTER_RANGE_END_CLASS = \"filter-range-end\";\nconst MENU_CLASS = \"dx-menu\";\nconst EDITOR_WITH_MENU_CLASS = \"dx-editor-with-menu\";\nconst EDITOR_CONTAINER_CLASS = \"dx-editor-container\";\nconst EDITOR_CELL_CLASS = \"dx-editor-cell\";\nconst FILTER_MENU = \"dx-filter-menu\";\nconst APPLY_BUTTON_CLASS = \"dx-apply-button\";\nconst HIGHLIGHT_OUTLINE_CLASS = \"dx-highlight-outline\";\nconst FOCUSED_CLASS = \"dx-focused\";\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nconst FILTER_RANGE_CONTENT_CLASS = \"dx-filter-range-content\";\nconst FILTER_MODIFIED_CLASS = \"dx-filter-modified\";\nconst EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\nconst BETWEEN_OPERATION_DATA_TYPES = [\"date\", \"datetime\", \"number\"];\nconst ARIA_SEARCH_BOX = messageLocalization.format(\"dxDataGrid-ariaSearchBox\");\nfunction isOnClickApplyFilterMode(that) {\n  return \"onClick\" === that.option(\"filterRow.applyFilter\");\n}\nconst getEditorInstance = function ($editorContainer) {\n  const $editor = $editorContainer && $editorContainer.children();\n  const componentNames = $editor && $editor.data(\"dxComponents\");\n  const editor = componentNames && componentNames.length && $editor.data(componentNames[0]);\n  if (editor instanceof Editor) {\n    return editor;\n  }\n  return null;\n};\nconst getRangeTextByFilterValue = function (that, column) {\n  let result = \"\";\n  let rangeEnd = \"\";\n  const filterValue = getColumnFilterValue(that, column);\n  const formatOptions = gridCoreUtils.getFormatOptionsByColumn(column, \"filterRow\");\n  if (Array.isArray(filterValue)) {\n    result = gridCoreUtils.formatValue(filterValue[0], formatOptions);\n    rangeEnd = gridCoreUtils.formatValue(filterValue[1], formatOptions);\n    if (\"\" !== rangeEnd) {\n      result += ` - ${rangeEnd}`;\n    }\n  } else if (isDefined(filterValue)) {\n    result = gridCoreUtils.formatValue(filterValue, formatOptions);\n  }\n  return result;\n};\nfunction getColumnFilterValue(that, column) {\n  if (column) {\n    return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue;\n  }\n}\nconst getColumnSelectedFilterOperation = function (that, column) {\n  if (column) {\n    return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation;\n  }\n};\nconst isValidFilterValue = function (filterValue, column) {\n  if (column && BETWEEN_OPERATION_DATA_TYPES.includes(column.dataType) && Array.isArray(filterValue)) {\n    return false;\n  }\n  return void 0 !== filterValue;\n};\nconst getFilterValue = function (that, columnIndex, $editorContainer) {\n  const column = that._columnsController.columnOption(columnIndex);\n  const filterValue = getColumnFilterValue(that, column);\n  const isFilterRange = $editorContainer.closest(`.${that.addWidgetPrefix(\"filter-range-overlay\")}`).length;\n  const isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(\"filter-range-start\"));\n  if (filterValue && Array.isArray(filterValue) && \"between\" === getColumnSelectedFilterOperation(that, column)) {\n    if (isRangeStart) {\n      return filterValue[0];\n    }\n    return filterValue[1];\n  }\n  return !isFilterRange && isValidFilterValue(filterValue, column) ? filterValue : null;\n};\nconst normalizeFilterValue = function (that, filterValue, column, $editorContainer) {\n  if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n    const columnFilterValue = getColumnFilterValue(that, column);\n    if ($editorContainer.hasClass(that.addWidgetPrefix(\"filter-range-start\"))) {\n      return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0];\n    }\n    return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue];\n  }\n  return filterValue;\n};\nconst updateFilterValue = function (that, options) {\n  const value = \"\" === options.value ? null : options.value;\n  const $editorContainer = options.container;\n  const column = that._columnsController.columnOption(options.column.index);\n  const filterValue = getFilterValue(that, column.index, $editorContainer);\n  if (!isDefined(filterValue) && !isDefined(value)) {\n    return;\n  }\n  that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);\n  const columnOptionName = isOnClickApplyFilterMode(that) ? \"bufferedFilterValue\" : \"filterValue\";\n  const normalizedValue = normalizeFilterValue(that, value, column, $editorContainer);\n  const isBetween = \"between\" === getColumnSelectedFilterOperation(that, column);\n  const notFireEvent = options.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.includes(void 0);\n  that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent);\n};\nconst columnHeadersView = Base => class extends Base {\n  init() {\n    super.init();\n    this._applyFilterViewController = this.getController(\"applyFilter\");\n  }\n  optionChanged(args) {\n    switch (args.name) {\n      case \"filterRow\":\n      case \"showColumnLines\":\n        this._invalidate(true, true);\n        args.handled = true;\n        break;\n      case \"syncLookupFilterValues\":\n        if (args.value) {\n          this.updateLookupDataSource();\n        } else {\n          this.render();\n        }\n        args.handled = true;\n        break;\n      default:\n        super.optionChanged(args);\n    }\n  }\n  _updateEditorValue(column, $editorContainer) {\n    const editor = getEditorInstance($editorContainer);\n    editor && editor.option(\"value\", getFilterValue(this, column.index, $editorContainer));\n  }\n  _columnOptionChanged(e) {\n    const that = this;\n    const {\n      optionNames: optionNames\n    } = e;\n    let $cell;\n    let $editorContainer;\n    let $editorRangeElements;\n    let $menu;\n    if (gridCoreUtils.checkChanges(optionNames, [\"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"filterValues\", \"filterType\"]) && void 0 !== e.columnIndex) {\n      const visibleIndex = that._columnsController.getVisibleIndex(e.columnIndex);\n      const column = that._columnsController.columnOption(e.columnIndex);\n      $cell = that._getCellElement(that.element().find(`.${that.addWidgetPrefix(\"filter-row\")}`).index(), visibleIndex) ?? $();\n      $editorContainer = $cell.find(\".dx-editor-container\").first();\n      if (optionNames.filterValue || optionNames.bufferedFilterValue) {\n        that._updateEditorValue(column, $editorContainer);\n        const overlayInstance = $cell.find(`.${that.addWidgetPrefix(\"filter-range-overlay\")}`).data(\"dxOverlay\");\n        if (overlayInstance) {\n          $editorRangeElements = overlayInstance.$content().find(\".dx-editor-container\");\n          that._updateEditorValue(column, $editorRangeElements.first());\n          that._updateEditorValue(column, $editorRangeElements.last());\n        }\n        if (!overlayInstance || !overlayInstance.option(\"visible\")) {\n          that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n        }\n      }\n      if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {\n        if (visibleIndex >= 0 && column) {\n          $menu = $cell.find(\".dx-menu\");\n          if ($menu.length) {\n            that._updateFilterOperationChooser($menu, column, $editorContainer);\n            if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n              that._renderFilterRangeContent($cell, column);\n            } else if ($editorContainer.find(\".dx-filter-range-content\").length) {\n              that._renderEditor($editorContainer, that._getEditorOptions($editorContainer, column));\n              that._hideFilterRange();\n            }\n          }\n        }\n      }\n      return;\n    }\n    super._columnOptionChanged(e);\n  }\n  _renderCore() {\n    this._filterRangeOverlayInstance = null;\n    return super._renderCore.apply(this, arguments);\n  }\n  _resizeCore() {\n    var _this$_filterRangeOve;\n    super._resizeCore.apply(this, arguments);\n    null === (_this$_filterRangeOve = this._filterRangeOverlayInstance) || void 0 === _this$_filterRangeOve || _this$_filterRangeOve.repaint();\n  }\n  isFilterRowVisible() {\n    return this._isElementVisible(this.option(\"filterRow\"));\n  }\n  isVisible() {\n    return super.isVisible() || this.isFilterRowVisible();\n  }\n  _initFilterRangeOverlay($cell, column) {\n    const that = this;\n    const sharedData = {};\n    const $editorContainer = $cell.find(\".dx-editor-container\");\n    const filterRangeOverlayClass = that.addWidgetPrefix(\"filter-range-overlay\");\n    const $overlay = $(\"<div>\").addClass(filterRangeOverlayClass).appendTo($cell);\n    return that._createComponent($overlay, Overlay, {\n      height: \"auto\",\n      shading: false,\n      showTitle: false,\n      focusStateEnabled: false,\n      hideOnOutsideClick: true,\n      wrapperAttr: {\n        class: filterRangeOverlayClass\n      },\n      animation: false,\n      position: {\n        my: \"top\",\n        at: \"top\",\n        of: $editorContainer.length && $editorContainer || $cell,\n        offset: \"0 -1\"\n      },\n      contentTemplate(contentElement) {\n        let editorOptions;\n        let $editor = $(\"<div>\").addClass(`dx-editor-container ${that.addWidgetPrefix(\"filter-range-start\")}`).appendTo(contentElement);\n        column = that._columnsController.columnOption(column.index);\n        editorOptions = that._getEditorOptions($editor, column);\n        editorOptions.sharedData = sharedData;\n        that._renderEditor($editor, editorOptions);\n        eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", e => {\n          let $prevElement = $cell.find(\"[tabindex]\").not(e.target).first();\n          if (\"tab\" === normalizeKeyName(e) && e.shiftKey) {\n            e.preventDefault();\n            that._hideFilterRange();\n            if (!$prevElement.length) {\n              $prevElement = $cell.prev().find(\"[tabindex]\").last();\n            }\n            eventsEngine.trigger($prevElement, \"focus\");\n          }\n        });\n        $editor = $(\"<div>\").addClass(`dx-editor-container ${that.addWidgetPrefix(\"filter-range-end\")}`).appendTo(contentElement);\n        editorOptions = that._getEditorOptions($editor, column);\n        editorOptions.sharedData = sharedData;\n        that._renderEditor($editor, editorOptions);\n        eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", e => {\n          if (\"tab\" === normalizeKeyName(e) && !e.shiftKey) {\n            e.preventDefault();\n            that._hideFilterRange();\n            eventsEngine.trigger($cell.next().find(\"[tabindex]\").first(), \"focus\");\n          }\n        });\n        return $(contentElement).addClass(that.getWidgetContainerClass());\n      },\n      onShown(e) {\n        const $editor = e.component.$content().find(\".dx-editor-container\").first();\n        eventsEngine.trigger($editor.find(EDITORS_INPUT_SELECTOR), \"focus\");\n      },\n      onHidden() {\n        column = that._columnsController.columnOption(column.index);\n        $cell.find(\".dx-menu\").parent().addClass(\"dx-editor-with-menu\");\n        if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n          that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n          that.component.updateDimensions();\n        }\n      }\n    });\n  }\n  _updateFilterRangeOverlay(options) {\n    const overlayInstance = this._filterRangeOverlayInstance;\n    overlayInstance && overlayInstance.option(options);\n  }\n  _showFilterRange($cell, column) {\n    const that = this;\n    const $overlay = $cell.children(`.${that.addWidgetPrefix(\"filter-range-overlay\")}`);\n    let overlayInstance = $overlay.length && $overlay.data(\"dxOverlay\");\n    if (!overlayInstance && column) {\n      overlayInstance = that._initFilterRangeOverlay($cell, column);\n    }\n    if (!overlayInstance.option(\"visible\")) {\n      that._filterRangeOverlayInstance && that._filterRangeOverlayInstance.hide();\n      that._filterRangeOverlayInstance = overlayInstance;\n      that._updateFilterRangeOverlay({\n        width: getOuterWidth($cell, true) + 1\n      });\n      that._filterRangeOverlayInstance && that._filterRangeOverlayInstance.show();\n    }\n  }\n  _hideFilterRange() {\n    const overlayInstance = this._filterRangeOverlayInstance;\n    overlayInstance && overlayInstance.hide();\n  }\n  getFilterRangeOverlayInstance() {\n    return this._filterRangeOverlayInstance;\n  }\n  _createRow(row) {\n    const $row = super._createRow(row);\n    if (\"filter\" === row.rowType) {\n      $row.addClass(this.addWidgetPrefix(\"filter-row\"));\n      if (!this.option(\"useLegacyKeyboardNavigation\")) {\n        eventsEngine.on($row, \"keydown\", event => selectView(\"filterRow\", this, event));\n      }\n    }\n    return $row;\n  }\n  _getRows() {\n    const result = super._getRows();\n    if (this.isFilterRowVisible()) {\n      result.push({\n        rowType: \"filter\"\n      });\n    }\n    return result;\n  }\n  _renderFilterCell(cell, options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    const $cell = $(cell);\n    if (that.component.option(\"showColumnHeaders\")) {\n      that.setAria(\"describedby\", column.headerId, $cell);\n    }\n    that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaFilterCell\"), $cell);\n    $cell.addClass(\"dx-editor-cell\");\n    const $container = $(\"<div>\").appendTo($cell);\n    const $editorContainer = $(\"<div>\").addClass(\"dx-editor-container\").appendTo($container);\n    if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n      that._renderFilterRangeContent($cell, column);\n    } else {\n      const editorOptions = that._getEditorOptions($editorContainer, column);\n      that._renderEditor($editorContainer, editorOptions);\n    }\n    const {\n      alignment: alignment\n    } = column;\n    if (alignment && \"center\" !== alignment) {\n      $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", column.alignment);\n    }\n    if (column.filterOperations && column.filterOperations.length) {\n      that._renderFilterOperationChooser($container, column, $editorContainer);\n    }\n  }\n  _renderCellContent($cell, options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    if (\"filter\" === options.rowType) {\n      if (column.command) {\n        $cell.html(\"&nbsp;\");\n      } else if (column.allowFiltering) {\n        that.renderTemplate($cell, that._renderFilterCell.bind(that), options).done(() => {\n          that._updateCell($cell, options);\n        });\n        return;\n      }\n    }\n    super._renderCellContent.apply(this, arguments);\n  }\n  _getEditorOptions($editorContainer, column) {\n    const that = this;\n    const accessibilityOptions = {\n      editorOptions: {\n        inputAttr: that._getFilterInputAccessibilityAttributes(column)\n      }\n    };\n    const result = extend(accessibilityOptions, column, {\n      value: getFilterValue(that, column.index, $editorContainer),\n      parentType: \"filterRow\",\n      showAllText: that.option(\"filterRow.showAllText\"),\n      updateValueTimeout: \"onClick\" === that.option(\"filterRow.applyFilter\") ? 0 : 700,\n      width: null,\n      setValue(value, notFireEvent) {\n        updateFilterValue(that, {\n          column: column,\n          value: value,\n          container: $editorContainer,\n          notFireEvent: notFireEvent\n        });\n      }\n    });\n    if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n      if ($editorContainer.hasClass(that.addWidgetPrefix(\"filter-range-start\"))) {\n        result.placeholder = that.option(\"filterRow.betweenStartText\");\n      } else {\n        result.placeholder = that.option(\"filterRow.betweenEndText\");\n      }\n    }\n    return result;\n  }\n  _getFilterInputAccessibilityAttributes(column) {\n    const columnAriaLabel = messageLocalization.format(\"dxDataGrid-ariaFilterCell\");\n    if (this.component.option(\"showColumnHeaders\")) {\n      return {\n        \"aria-label\": columnAriaLabel,\n        \"aria-describedby\": column.headerId\n      };\n    }\n    return {\n      \"aria-label\": columnAriaLabel\n    };\n  }\n  _renderEditor($editorContainer, options) {\n    $editorContainer.empty();\n    const $element = $(\"<div>\").appendTo($editorContainer);\n    const dataSource = this._dataController.dataSource();\n    if (options.lookup && this.option(\"syncLookupFilterValues\")) {\n      this._applyFilterViewController.setCurrentColumnForFiltering(options);\n      const filter = this._dataController.getCombinedFilter();\n      this._applyFilterViewController.setCurrentColumnForFiltering(null);\n      const lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(options, dataSource, filter);\n      const lookupOptions = _extends({}, options, {\n        lookup: _extends({}, options.lookup, {\n          dataSource: lookupDataSource\n        })\n      });\n      return this._editorFactoryController.createEditor($element, lookupOptions);\n    }\n    return this._editorFactoryController.createEditor($element, options);\n  }\n  _renderFilterRangeContent($cell, column) {\n    const that = this;\n    const $editorContainer = $cell.find(\".dx-editor-container\").first();\n    $editorContainer.empty();\n    const $filterRangeContent = $(\"<div>\").addClass(\"dx-filter-range-content\").attr(\"tabindex\", this.option(\"tabIndex\"));\n    eventsEngine.on($filterRangeContent, \"focusin\", () => {\n      that._showFilterRange($cell, column);\n    });\n    $filterRangeContent.appendTo($editorContainer);\n    that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n  }\n  _updateFilterRangeContent($cell, value) {\n    const $filterRangeContent = $cell.find(\".dx-filter-range-content\");\n    if ($filterRangeContent.length) {\n      if (\"\" === value) {\n        $filterRangeContent.html(\"&nbsp;\");\n      } else {\n        $filterRangeContent.text(value);\n      }\n    }\n  }\n  _updateFilterOperationChooser($menu, column, $editorContainer) {\n    const that = this;\n    let isCellWasFocused;\n    const restoreFocus = function () {\n      const menu = Menu.getInstance($menu);\n      menu && menu.option(\"focusedElement\", null);\n      isCellWasFocused && that._focusEditor($editorContainer);\n    };\n    const editorFactoryController = this._editorFactoryController;\n    that._createComponent($menu, Menu, {\n      integrationOptions: {},\n      activeStateEnabled: false,\n      selectionMode: \"single\",\n      cssClass: `${that.getWidgetContainerClass()} dx-cell-focus-disabled ${FILTER_MENU}`,\n      showFirstSubmenuMode: \"onHover\",\n      hideSubmenuOnMouseLeave: true,\n      items: [{\n        disabled: !(column.filterOperations && column.filterOperations.length),\n        icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || \"default\"],\n        selectable: false,\n        items: that._getFilterOperationMenuItems(column)\n      }],\n      onItemRendered: _ref => {\n        let {\n          itemElement: itemElement\n        } = _ref;\n        this.setAria(\"label\", ARIA_SEARCH_BOX, $(itemElement));\n      },\n      onItemClick(properties) {\n        var _properties$itemData;\n        const selectedFilterOperation = properties.itemData.name;\n        const columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);\n        let notFocusEditor = false;\n        const isOnClickMode = isOnClickApplyFilterMode(that);\n        const options = {};\n        if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {\n          return;\n        }\n        if (selectedFilterOperation) {\n          options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = selectedFilterOperation;\n          if (\"between\" === selectedFilterOperation || \"between\" === columnSelectedFilterOperation) {\n            notFocusEditor = \"between\" === selectedFilterOperation;\n            options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n          }\n        } else {\n          options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n          options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = column.defaultSelectedFilterOperation || null;\n        }\n        const isResetFilterOperation = !(null !== (_properties$itemData = properties.itemData) && void 0 !== _properties$itemData && _properties$itemData.name);\n        const isNotFireEvent = isResetFilterOperation ? false : void 0;\n        that._columnsController.columnOption(column.index, options, void 0, isNotFireEvent);\n        that._applyFilterViewController.setHighLight($editorContainer, true);\n        if (!selectedFilterOperation) {\n          const editor = getEditorInstance($editorContainer);\n          if (editor && \"dxDateBox\" === editor.NAME && !editor.option(\"isValid\")) {\n            editor.clear();\n            editor.option(\"isValid\", true);\n          }\n        }\n        if (!notFocusEditor) {\n          that._focusEditor($editorContainer);\n        } else {\n          that._showFilterRange($editorContainer.closest(\".dx-editor-cell\"), column);\n        }\n      },\n      onSubmenuShowing() {\n        isCellWasFocused = that._isEditorFocused($editorContainer);\n        editorFactoryController.loseFocus();\n      },\n      onSubmenuHiding() {\n        eventsEngine.trigger($menu, \"blur\");\n        restoreFocus();\n      },\n      onContentReady(e) {\n        eventsEngine.on($menu, \"blur\", () => {\n          const menu = e.component;\n          menu._hideSubmenuAfterTimeout();\n          restoreFocus();\n        });\n      },\n      rtlEnabled: that.option(\"rtlEnabled\")\n    });\n  }\n  _isEditorFocused($container) {\n    return $container.hasClass(\"dx-focused\") || $container.parents(\".dx-focused\").length;\n  }\n  _focusEditor($container) {\n    this._editorFactoryController.focus($container);\n    eventsEngine.trigger($container.find(EDITORS_INPUT_SELECTOR), \"focus\");\n  }\n  _renderFilterOperationChooser($container, column, $editorContainer) {\n    const that = this;\n    let $menu;\n    if (that.option(\"filterRow.showOperationChooser\")) {\n      $container.addClass(\"dx-editor-with-menu\");\n      $menu = $(\"<div>\").prependTo($container);\n      that._updateFilterOperationChooser($menu, column, $editorContainer);\n    }\n  }\n  _getFilterOperationMenuItems(column) {\n    const that = this;\n    let result = [{}];\n    const filterRowOptions = that.option(\"filterRow\");\n    const operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};\n    if (column.filterOperations && column.filterOperations.length) {\n      const availableFilterOperations = column.filterOperations.filter(value => isDefined(OPERATION_DESCRIPTORS[value]));\n      result = map(availableFilterOperations, value => {\n        const descriptionName = OPERATION_DESCRIPTORS[value];\n        return {\n          name: value,\n          selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,\n          text: operationDescriptions[descriptionName],\n          icon: OPERATION_ICONS[value]\n        };\n      });\n      result.push({\n        name: null,\n        text: filterRowOptions && filterRowOptions.resetOperationText,\n        icon: OPERATION_ICONS.default\n      });\n    }\n    return result;\n  }\n  _handleDataChanged(e) {\n    var _this$_dataController, _this$_dataController2, _dataSource$lastLoadO, _e$operationTypes, _e$operationTypes2;\n    const dataSource = null === (_this$_dataController = this._dataController) || void 0 === _this$_dataController || null === (_this$_dataController2 = _this$_dataController.dataSource) || void 0 === _this$_dataController2 ? void 0 : _this$_dataController2.call(_this$_dataController);\n    const lastLoadOptions = null === dataSource || void 0 === dataSource || null === (_dataSource$lastLoadO = dataSource.lastLoadOptions) || void 0 === _dataSource$lastLoadO ? void 0 : _dataSource$lastLoadO.call(dataSource);\n    super._handleDataChanged.apply(this, arguments);\n    if (null !== (_e$operationTypes = e.operationTypes) && void 0 !== _e$operationTypes && _e$operationTypes.filtering || null !== (_e$operationTypes2 = e.operationTypes) && void 0 !== _e$operationTypes2 && _e$operationTypes2.fullReload) {\n      var _e$operationTypes3;\n      this.updateLookupDataSource((null === (_e$operationTypes3 = e.operationTypes) || void 0 === _e$operationTypes3 ? void 0 : _e$operationTypes3.filtering) || (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.filter));\n    }\n  }\n  updateLookupDataSource(filterChanged) {\n    if (!this.option(\"syncLookupFilterValues\")) {\n      return;\n    }\n    if (!this.element()) {\n      return;\n    }\n    const columns = this._columnsController.getVisibleColumns();\n    const dataSource = this._dataController.dataSource();\n    const applyFilterViewController = this._applyFilterViewController;\n    const rowIndex = this.element().find(`.${this.addWidgetPrefix(\"filter-row\")}`).index();\n    if (-1 === rowIndex) {\n      return;\n    }\n    columns.forEach((column, index) => {\n      if (!column.lookup || column.calculateCellValue !== column.defaultCalculateCellValue) {\n        return;\n      }\n      const $cell = this._getCellElement(rowIndex, index);\n      const editor = getEditorInstance(null === $cell || void 0 === $cell ? void 0 : $cell.find(\".dx-editor-container\"));\n      if (editor) {\n        applyFilterViewController.setCurrentColumnForFiltering(column);\n        const filter = this._dataController.getCombinedFilter() || null;\n        applyFilterViewController.setCurrentColumnForFiltering(null);\n        const editorDataSource = editor.option(\"dataSource\");\n        const shouldUpdateFilter = !filterChanged || !equalByValue(editorDataSource.__dataGridSourceFilter || null, filter);\n        if (shouldUpdateFilter) {\n          const lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\n          editor.option(\"dataSource\", lookupDataSource);\n        }\n      }\n    });\n  }\n  getColumnElements(index, bandColumnIndex) {\n    var _rows$index;\n    const rows = this._getRows();\n    if (\"filter\" === (null === rows || void 0 === rows || null === (_rows$index = rows[index]) || void 0 === _rows$index ? void 0 : _rows$index.rowType) && arguments.length < 2) {\n      return this.getCellElements(index);\n    }\n    return super.getColumnElements(index, bandColumnIndex);\n  }\n};\nconst data = Base => class extends Base {\n  skipCalculateColumnFilters() {\n    return false;\n  }\n  _calculateAdditionalFilter() {\n    if (this.skipCalculateColumnFilters()) {\n      return super._calculateAdditionalFilter();\n    }\n    const filters = [super._calculateAdditionalFilter()];\n    const columns = this._columnsController.getVisibleColumns(null, true);\n    const applyFilterController = this._applyFilterController;\n    each(columns, function () {\n      var _applyFilterControlle;\n      const shouldSkip = (null === (_applyFilterControlle = applyFilterController.getCurrentColumnForFiltering()) || void 0 === _applyFilterControlle ? void 0 : _applyFilterControlle.index) === this.index;\n      if (this.allowFiltering && this.calculateFilterExpression && isDefined(this.filterValue) && !shouldSkip) {\n        const filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, \"filterRow\");\n        filters.push(filter);\n      }\n    });\n    return gridCoreUtils.combineFilters(filters);\n  }\n};\nexport class ApplyFilterViewController extends modules.ViewController {\n  init() {\n    this._columnsController = this.getController(\"columns\");\n  }\n  _getHeaderPanel() {\n    if (!this._headerPanel) {\n      this._headerPanel = this.getView(\"headerPanel\");\n    }\n    return this._headerPanel;\n  }\n  setHighLight($element, value) {\n    if (isOnClickApplyFilterMode(this)) {\n      $element && $element.toggleClass(\"dx-highlight-outline\", value) && $element.closest(\".dx-editor-cell\").toggleClass(\"dx-filter-modified\", value);\n      this._getHeaderPanel().enableApplyButton(value);\n    }\n  }\n  applyFilter() {\n    const columns = this._columnsController.getColumns();\n    this._columnsController.beginUpdate();\n    for (let i = 0; i < columns.length; i++) {\n      const column = columns[i];\n      if (void 0 !== column.bufferedFilterValue) {\n        this._columnsController.columnOption(i, \"filterValue\", column.bufferedFilterValue);\n        column.bufferedFilterValue = void 0;\n      }\n      if (void 0 !== column.bufferedSelectedFilterOperation) {\n        this._columnsController.columnOption(i, \"selectedFilterOperation\", column.bufferedSelectedFilterOperation);\n        column.bufferedSelectedFilterOperation = void 0;\n      }\n    }\n    this._columnsController.endUpdate();\n    this.removeHighLights();\n  }\n  removeHighLights() {\n    if (isOnClickApplyFilterMode(this)) {\n      const columnHeadersViewElement = this.getView(\"columnHeadersView\").element();\n      columnHeadersViewElement.find(`.${this.addWidgetPrefix(\"filter-row\")} .dx-highlight-outline`).removeClass(\"dx-highlight-outline\");\n      columnHeadersViewElement.find(`.${this.addWidgetPrefix(\"filter-row\")} .dx-filter-modified`).removeClass(\"dx-filter-modified\");\n      this._getHeaderPanel().enableApplyButton(false);\n    }\n  }\n  setCurrentColumnForFiltering(column) {\n    this._currentColumn = column;\n  }\n  getCurrentColumnForFiltering() {\n    return this._currentColumn;\n  }\n}\nconst columnsResizer = Base => class extends Base {\n  _startResizing() {\n    const that = this;\n    super._startResizing.apply(that, arguments);\n    if (that.isResizing()) {\n      const overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n      if (overlayInstance) {\n        const cellIndex = overlayInstance.$element().closest(\"td\").index();\n        if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {\n          overlayInstance.$content().hide();\n        }\n      }\n    }\n  }\n  _endResizing() {\n    const that = this;\n    let $cell;\n    if (that.isResizing()) {\n      const overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n      if (overlayInstance) {\n        $cell = overlayInstance.$element().closest(\"td\");\n        that._columnHeadersView._updateFilterRangeOverlay({\n          width: getOuterWidth($cell, true) + 1\n        });\n        overlayInstance.$content().show();\n      }\n    }\n    super._endResizing.apply(that, arguments);\n  }\n};\nconst editing = Base => class extends Base {\n  updateFieldValue(options) {\n    if (options.column.lookup) {\n      this._needUpdateLookupDataSource = true;\n    }\n    return super.updateFieldValue.apply(this, arguments);\n  }\n  _afterSaveEditData(cancel) {\n    if (this._needUpdateLookupDataSource && !cancel) {\n      var _this$getView;\n      null === (_this$getView = this.getView(\"columnHeadersView\")) || void 0 === _this$getView || _this$getView.updateLookupDataSource();\n    }\n    this._needUpdateLookupDataSource = false;\n    return super._afterSaveEditData.apply(this, arguments);\n  }\n  _afterCancelEditData() {\n    this._needUpdateLookupDataSource = false;\n    return super._afterCancelEditData.apply(this, arguments);\n  }\n};\nconst headerPanel = Base => class extends Base {\n  init() {\n    super.init();\n    this._dataController = this.getController(\"data\");\n    this._applyFilterViewController = this.getController(\"applyFilter\");\n  }\n  optionChanged(args) {\n    if (\"filterRow\" === args.name) {\n      this._invalidate();\n      args.handled = true;\n    } else {\n      super.optionChanged(args);\n    }\n  }\n  _getToolbarItems() {\n    const items = super._getToolbarItems();\n    const filterItem = this._prepareFilterItem();\n    return filterItem.concat(items);\n  }\n  _prepareFilterItem() {\n    const that = this;\n    const filterItem = [];\n    if (that._isShowApplyFilterButton()) {\n      const hintText = that.option(\"filterRow.applyFilterText\");\n      const columns = that._columnsController.getColumns();\n      const disabled = !columns.filter(column => void 0 !== column.bufferedFilterValue).length;\n      const onInitialized = function (e) {\n        $(e.element).addClass(that._getToolbarButtonClass(\"dx-apply-button\"));\n      };\n      const onClickHandler = function () {\n        that._applyFilterViewController.applyFilter();\n      };\n      const toolbarItem = {\n        widget: \"dxButton\",\n        options: {\n          icon: \"apply-filter\",\n          disabled: disabled,\n          onClick: onClickHandler,\n          hint: hintText,\n          text: hintText,\n          onInitialized: onInitialized\n        },\n        showText: \"inMenu\",\n        name: \"applyFilterButton\",\n        location: \"after\",\n        locateInMenu: \"auto\",\n        sortIndex: 10\n      };\n      filterItem.push(toolbarItem);\n    }\n    return filterItem;\n  }\n  _isShowApplyFilterButton() {\n    const filterRowOptions = this.option(\"filterRow\");\n    return !!(null !== filterRowOptions && void 0 !== filterRowOptions && filterRowOptions.visible) && \"onClick\" === filterRowOptions.applyFilter;\n  }\n  enableApplyButton(value) {\n    this.setToolbarItemDisabled(\"applyFilterButton\", !value);\n  }\n};\nexport const filterRowModule = {\n  defaultOptions: () => ({\n    syncLookupFilterValues: true,\n    filterRow: {\n      visible: false,\n      showOperationChooser: true,\n      showAllText: messageLocalization.format(\"dxDataGrid-filterRowShowAllText\"),\n      resetOperationText: messageLocalization.format(\"dxDataGrid-filterRowResetOperationText\"),\n      applyFilter: \"auto\",\n      applyFilterText: messageLocalization.format(\"dxDataGrid-applyFilterText\"),\n      operationDescriptions: {\n        equal: messageLocalization.format(\"dxDataGrid-filterRowOperationEquals\"),\n        notEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationNotEquals\"),\n        lessThan: messageLocalization.format(\"dxDataGrid-filterRowOperationLess\"),\n        lessThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationLessOrEquals\"),\n        greaterThan: messageLocalization.format(\"dxDataGrid-filterRowOperationGreater\"),\n        greaterThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationGreaterOrEquals\"),\n        startsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationStartsWith\"),\n        contains: messageLocalization.format(\"dxDataGrid-filterRowOperationContains\"),\n        notContains: messageLocalization.format(\"dxDataGrid-filterRowOperationNotContains\"),\n        endsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationEndsWith\"),\n        between: messageLocalization.format(\"dxDataGrid-filterRowOperationBetween\"),\n        isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\n        isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\n      },\n      betweenStartText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenStartText\"),\n      betweenEndText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenEndText\")\n    }\n  }),\n  controllers: {\n    applyFilter: ApplyFilterViewController\n  },\n  extenders: {\n    controllers: {\n      data: data,\n      columnsResizer: columnsResizer,\n      editing: editing\n    },\n    views: {\n      columnHeadersView: columnHeadersView,\n      headerPanel: headerPanel\n    }\n  }\n};","map":{"version":3,"names":["_extends","eventsEngine","normalizeKeyName","messageLocalization","$","equalByValue","extend","each","map","getOuterWidth","isDefined","Editor","Menu","Overlay","selectView","modules","gridCoreUtils","OPERATION_ICONS","default","notcontains","contains","startswith","endswith","between","OPERATION_DESCRIPTORS","FILTERING_TIMEOUT","CORRECT_FILTER_RANGE_OVERLAY_WIDTH","FILTER_ROW_CLASS","FILTER_RANGE_OVERLAY_CLASS","FILTER_RANGE_START_CLASS","FILTER_RANGE_END_CLASS","MENU_CLASS","EDITOR_WITH_MENU_CLASS","EDITOR_CONTAINER_CLASS","EDITOR_CELL_CLASS","FILTER_MENU","APPLY_BUTTON_CLASS","HIGHLIGHT_OUTLINE_CLASS","FOCUSED_CLASS","CELL_FOCUS_DISABLED_CLASS","FILTER_RANGE_CONTENT_CLASS","FILTER_MODIFIED_CLASS","EDITORS_INPUT_SELECTOR","BETWEEN_OPERATION_DATA_TYPES","ARIA_SEARCH_BOX","format","isOnClickApplyFilterMode","that","option","getEditorInstance","$editorContainer","$editor","children","componentNames","data","editor","length","getRangeTextByFilterValue","column","result","rangeEnd","filterValue","getColumnFilterValue","formatOptions","getFormatOptionsByColumn","Array","isArray","formatValue","bufferedFilterValue","getColumnSelectedFilterOperation","bufferedSelectedFilterOperation","selectedFilterOperation","isValidFilterValue","includes","dataType","getFilterValue","columnIndex","_columnsController","columnOption","isFilterRange","closest","addWidgetPrefix","isRangeStart","hasClass","normalizeFilterValue","columnFilterValue","updateFilterValue","options","value","container","index","_applyFilterViewController","setHighLight","columnOptionName","normalizedValue","isBetween","notFireEvent","columnHeadersView","Base","init","getController","optionChanged","args","name","_invalidate","handled","updateLookupDataSource","render","_updateEditorValue","_columnOptionChanged","e","optionNames","$cell","$editorRangeElements","$menu","checkChanges","visibleIndex","getVisibleIndex","_getCellElement","element","find","first","overlayInstance","$content","last","_updateFilterRangeContent","_updateFilterOperationChooser","_renderFilterRangeContent","_renderEditor","_getEditorOptions","_hideFilterRange","_renderCore","_filterRangeOverlayInstance","apply","arguments","_resizeCore","_this$_filterRangeOve","repaint","isFilterRowVisible","_isElementVisible","isVisible","_initFilterRangeOverlay","sharedData","filterRangeOverlayClass","$overlay","addClass","appendTo","_createComponent","height","shading","showTitle","focusStateEnabled","hideOnOutsideClick","wrapperAttr","class","animation","position","my","at","of","offset","contentTemplate","contentElement","editorOptions","on","$prevElement","not","target","shiftKey","preventDefault","prev","trigger","next","getWidgetContainerClass","onShown","component","onHidden","parent","updateDimensions","_updateFilterRangeOverlay","_showFilterRange","hide","width","show","getFilterRangeOverlayInstance","_createRow","row","$row","rowType","event","_getRows","push","_renderFilterCell","cell","setAria","headerId","$container","alignment","css","filterOperations","_renderFilterOperationChooser","_renderCellContent","command","html","allowFiltering","renderTemplate","bind","done","_updateCell","accessibilityOptions","inputAttr","_getFilterInputAccessibilityAttributes","parentType","showAllText","updateValueTimeout","setValue","placeholder","columnAriaLabel","empty","$element","dataSource","_dataController","lookup","setCurrentColumnForFiltering","filter","getCombinedFilter","lookupDataSource","getWrappedLookupDataSource","lookupOptions","_editorFactoryController","createEditor","$filterRangeContent","attr","text","isCellWasFocused","restoreFocus","menu","getInstance","_focusEditor","editorFactoryController","integrationOptions","activeStateEnabled","selectionMode","cssClass","showFirstSubmenuMode","hideSubmenuOnMouseLeave","items","disabled","icon","selectable","_getFilterOperationMenuItems","onItemRendered","_ref","itemElement","onItemClick","properties","_properties$itemData","itemData","columnSelectedFilterOperation","notFocusEditor","isOnClickMode","defaultSelectedFilterOperation","isResetFilterOperation","isNotFireEvent","NAME","clear","onSubmenuShowing","_isEditorFocused","loseFocus","onSubmenuHiding","onContentReady","_hideSubmenuAfterTimeout","rtlEnabled","parents","focus","prependTo","filterRowOptions","operationDescriptions","availableFilterOperations","descriptionName","selected","defaultFilterOperation","resetOperationText","_handleDataChanged","_this$_dataController","_this$_dataController2","_dataSource$lastLoadO","_e$operationTypes","_e$operationTypes2","call","lastLoadOptions","operationTypes","filtering","fullReload","_e$operationTypes3","filterChanged","columns","getVisibleColumns","applyFilterViewController","rowIndex","forEach","calculateCellValue","defaultCalculateCellValue","editorDataSource","shouldUpdateFilter","__dataGridSourceFilter","getColumnElements","bandColumnIndex","_rows$index","rows","getCellElements","skipCalculateColumnFilters","_calculateAdditionalFilter","filters","applyFilterController","_applyFilterController","_applyFilterControlle","shouldSkip","getCurrentColumnForFiltering","calculateFilterExpression","createFilterExpression","combineFilters","ApplyFilterViewController","ViewController","_getHeaderPanel","_headerPanel","getView","toggleClass","enableApplyButton","applyFilter","getColumns","beginUpdate","i","endUpdate","removeHighLights","columnHeadersViewElement","removeClass","_currentColumn","columnsResizer","_startResizing","isResizing","_columnHeadersView","cellIndex","_targetPoint","_endResizing","editing","updateFieldValue","_needUpdateLookupDataSource","_afterSaveEditData","cancel","_this$getView","_afterCancelEditData","headerPanel","_getToolbarItems","filterItem","_prepareFilterItem","concat","_isShowApplyFilterButton","hintText","onInitialized","_getToolbarButtonClass","onClickHandler","toolbarItem","widget","onClick","hint","showText","location","locateInMenu","sortIndex","visible","setToolbarItemDisabled","filterRowModule","defaultOptions","syncLookupFilterValues","filterRow","showOperationChooser","applyFilterText","equal","notEqual","lessThan","lessThanOrEqual","greaterThan","greaterThanOrEqual","startsWith","notContains","endsWith","isBlank","isNotBlank","betweenStartText","betweenEndText","controllers","extenders","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/filter/m_filter_row.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/filter/m_filter_row.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport {\r\n    normalizeKeyName\r\n} from \"../../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getOuterWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport Editor from \"../../../../ui/editor/editor\";\r\nimport Menu from \"../../../../ui/menu\";\r\nimport Overlay from \"../../../../ui/overlay/ui.overlay\";\r\nimport {\r\n    selectView\r\n} from \"../../../../ui/shared/accessibility\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nconst OPERATION_ICONS = {\r\n    \"=\": \"filter-operation-equals\",\r\n    \"<>\": \"filter-operation-not-equals\",\r\n    \"<\": \"filter-operation-less\",\r\n    \"<=\": \"filter-operation-less-equal\",\r\n    \">\": \"filter-operation-greater\",\r\n    \">=\": \"filter-operation-greater-equal\",\r\n    default: \"filter-operation-default\",\r\n    notcontains: \"filter-operation-not-contains\",\r\n    contains: \"filter-operation-contains\",\r\n    startswith: \"filter-operation-starts-with\",\r\n    endswith: \"filter-operation-ends-with\",\r\n    between: \"filter-operation-between\"\r\n};\r\nconst OPERATION_DESCRIPTORS = {\r\n    \"=\": \"equal\",\r\n    \"<>\": \"notEqual\",\r\n    \"<\": \"lessThan\",\r\n    \"<=\": \"lessThanOrEqual\",\r\n    \">\": \"greaterThan\",\r\n    \">=\": \"greaterThanOrEqual\",\r\n    startswith: \"startsWith\",\r\n    contains: \"contains\",\r\n    notcontains: \"notContains\",\r\n    endswith: \"endsWith\",\r\n    between: \"between\"\r\n};\r\nconst FILTERING_TIMEOUT = 700;\r\nconst CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;\r\nconst FILTER_ROW_CLASS = \"filter-row\";\r\nconst FILTER_RANGE_OVERLAY_CLASS = \"filter-range-overlay\";\r\nconst FILTER_RANGE_START_CLASS = \"filter-range-start\";\r\nconst FILTER_RANGE_END_CLASS = \"filter-range-end\";\r\nconst MENU_CLASS = \"dx-menu\";\r\nconst EDITOR_WITH_MENU_CLASS = \"dx-editor-with-menu\";\r\nconst EDITOR_CONTAINER_CLASS = \"dx-editor-container\";\r\nconst EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nconst FILTER_MENU = \"dx-filter-menu\";\r\nconst APPLY_BUTTON_CLASS = \"dx-apply-button\";\r\nconst HIGHLIGHT_OUTLINE_CLASS = \"dx-highlight-outline\";\r\nconst FOCUSED_CLASS = \"dx-focused\";\r\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nconst FILTER_RANGE_CONTENT_CLASS = \"dx-filter-range-content\";\r\nconst FILTER_MODIFIED_CLASS = \"dx-filter-modified\";\r\nconst EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\r\nconst BETWEEN_OPERATION_DATA_TYPES = [\"date\", \"datetime\", \"number\"];\r\nconst ARIA_SEARCH_BOX = messageLocalization.format(\"dxDataGrid-ariaSearchBox\");\r\n\r\nfunction isOnClickApplyFilterMode(that) {\r\n    return \"onClick\" === that.option(\"filterRow.applyFilter\")\r\n}\r\nconst getEditorInstance = function($editorContainer) {\r\n    const $editor = $editorContainer && $editorContainer.children();\r\n    const componentNames = $editor && $editor.data(\"dxComponents\");\r\n    const editor = componentNames && componentNames.length && $editor.data(componentNames[0]);\r\n    if (editor instanceof Editor) {\r\n        return editor\r\n    }\r\n    return null\r\n};\r\nconst getRangeTextByFilterValue = function(that, column) {\r\n    let result = \"\";\r\n    let rangeEnd = \"\";\r\n    const filterValue = getColumnFilterValue(that, column);\r\n    const formatOptions = gridCoreUtils.getFormatOptionsByColumn(column, \"filterRow\");\r\n    if (Array.isArray(filterValue)) {\r\n        result = gridCoreUtils.formatValue(filterValue[0], formatOptions);\r\n        rangeEnd = gridCoreUtils.formatValue(filterValue[1], formatOptions);\r\n        if (\"\" !== rangeEnd) {\r\n            result += ` - ${rangeEnd}`\r\n        }\r\n    } else if (isDefined(filterValue)) {\r\n        result = gridCoreUtils.formatValue(filterValue, formatOptions)\r\n    }\r\n    return result\r\n};\r\n\r\nfunction getColumnFilterValue(that, column) {\r\n    if (column) {\r\n        return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue\r\n    }\r\n}\r\nconst getColumnSelectedFilterOperation = function(that, column) {\r\n    if (column) {\r\n        return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation\r\n    }\r\n};\r\nconst isValidFilterValue = function(filterValue, column) {\r\n    if (column && BETWEEN_OPERATION_DATA_TYPES.includes(column.dataType) && Array.isArray(filterValue)) {\r\n        return false\r\n    }\r\n    return void 0 !== filterValue\r\n};\r\nconst getFilterValue = function(that, columnIndex, $editorContainer) {\r\n    const column = that._columnsController.columnOption(columnIndex);\r\n    const filterValue = getColumnFilterValue(that, column);\r\n    const isFilterRange = $editorContainer.closest(`.${that.addWidgetPrefix(\"filter-range-overlay\")}`).length;\r\n    const isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(\"filter-range-start\"));\r\n    if (filterValue && Array.isArray(filterValue) && \"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n        if (isRangeStart) {\r\n            return filterValue[0]\r\n        }\r\n        return filterValue[1]\r\n    }\r\n    return !isFilterRange && isValidFilterValue(filterValue, column) ? filterValue : null\r\n};\r\nconst normalizeFilterValue = function(that, filterValue, column, $editorContainer) {\r\n    if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n        const columnFilterValue = getColumnFilterValue(that, column);\r\n        if ($editorContainer.hasClass(that.addWidgetPrefix(\"filter-range-start\"))) {\r\n            return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0]\r\n        }\r\n        return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue]\r\n    }\r\n    return filterValue\r\n};\r\nconst updateFilterValue = function(that, options) {\r\n    const value = \"\" === options.value ? null : options.value;\r\n    const $editorContainer = options.container;\r\n    const column = that._columnsController.columnOption(options.column.index);\r\n    const filterValue = getFilterValue(that, column.index, $editorContainer);\r\n    if (!isDefined(filterValue) && !isDefined(value)) {\r\n        return\r\n    }\r\n    that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);\r\n    const columnOptionName = isOnClickApplyFilterMode(that) ? \"bufferedFilterValue\" : \"filterValue\";\r\n    const normalizedValue = normalizeFilterValue(that, value, column, $editorContainer);\r\n    const isBetween = \"between\" === getColumnSelectedFilterOperation(that, column);\r\n    const notFireEvent = options.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.includes(void 0);\r\n    that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent)\r\n};\r\nconst columnHeadersView = Base => class extends Base {\r\n    init() {\r\n        super.init();\r\n        this._applyFilterViewController = this.getController(\"applyFilter\")\r\n    }\r\n    optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"filterRow\":\r\n            case \"showColumnLines\":\r\n                this._invalidate(true, true);\r\n                args.handled = true;\r\n                break;\r\n            case \"syncLookupFilterValues\":\r\n                if (args.value) {\r\n                    this.updateLookupDataSource()\r\n                } else {\r\n                    this.render()\r\n                }\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                super.optionChanged(args)\r\n        }\r\n    }\r\n    _updateEditorValue(column, $editorContainer) {\r\n        const editor = getEditorInstance($editorContainer);\r\n        editor && editor.option(\"value\", getFilterValue(this, column.index, $editorContainer))\r\n    }\r\n    _columnOptionChanged(e) {\r\n        const that = this;\r\n        const {\r\n            optionNames: optionNames\r\n        } = e;\r\n        let $cell;\r\n        let $editorContainer;\r\n        let $editorRangeElements;\r\n        let $menu;\r\n        if (gridCoreUtils.checkChanges(optionNames, [\"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"filterValues\", \"filterType\"]) && void 0 !== e.columnIndex) {\r\n            const visibleIndex = that._columnsController.getVisibleIndex(e.columnIndex);\r\n            const column = that._columnsController.columnOption(e.columnIndex);\r\n            $cell = that._getCellElement(that.element().find(`.${that.addWidgetPrefix(\"filter-row\")}`).index(), visibleIndex) ?? $();\r\n            $editorContainer = $cell.find(\".dx-editor-container\").first();\r\n            if (optionNames.filterValue || optionNames.bufferedFilterValue) {\r\n                that._updateEditorValue(column, $editorContainer);\r\n                const overlayInstance = $cell.find(`.${that.addWidgetPrefix(\"filter-range-overlay\")}`).data(\"dxOverlay\");\r\n                if (overlayInstance) {\r\n                    $editorRangeElements = overlayInstance.$content().find(\".dx-editor-container\");\r\n                    that._updateEditorValue(column, $editorRangeElements.first());\r\n                    that._updateEditorValue(column, $editorRangeElements.last())\r\n                }\r\n                if (!overlayInstance || !overlayInstance.option(\"visible\")) {\r\n                    that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column))\r\n                }\r\n            }\r\n            if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {\r\n                if (visibleIndex >= 0 && column) {\r\n                    $menu = $cell.find(\".dx-menu\");\r\n                    if ($menu.length) {\r\n                        that._updateFilterOperationChooser($menu, column, $editorContainer);\r\n                        if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n                            that._renderFilterRangeContent($cell, column)\r\n                        } else if ($editorContainer.find(\".dx-filter-range-content\").length) {\r\n                            that._renderEditor($editorContainer, that._getEditorOptions($editorContainer, column));\r\n                            that._hideFilterRange()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return\r\n        }\r\n        super._columnOptionChanged(e)\r\n    }\r\n    _renderCore() {\r\n        this._filterRangeOverlayInstance = null;\r\n        return super._renderCore.apply(this, arguments)\r\n    }\r\n    _resizeCore() {\r\n        var _this$_filterRangeOve;\r\n        super._resizeCore.apply(this, arguments);\r\n        null === (_this$_filterRangeOve = this._filterRangeOverlayInstance) || void 0 === _this$_filterRangeOve || _this$_filterRangeOve.repaint()\r\n    }\r\n    isFilterRowVisible() {\r\n        return this._isElementVisible(this.option(\"filterRow\"))\r\n    }\r\n    isVisible() {\r\n        return super.isVisible() || this.isFilterRowVisible()\r\n    }\r\n    _initFilterRangeOverlay($cell, column) {\r\n        const that = this;\r\n        const sharedData = {};\r\n        const $editorContainer = $cell.find(\".dx-editor-container\");\r\n        const filterRangeOverlayClass = that.addWidgetPrefix(\"filter-range-overlay\");\r\n        const $overlay = $(\"<div>\").addClass(filterRangeOverlayClass).appendTo($cell);\r\n        return that._createComponent($overlay, Overlay, {\r\n            height: \"auto\",\r\n            shading: false,\r\n            showTitle: false,\r\n            focusStateEnabled: false,\r\n            hideOnOutsideClick: true,\r\n            wrapperAttr: {\r\n                class: filterRangeOverlayClass\r\n            },\r\n            animation: false,\r\n            position: {\r\n                my: \"top\",\r\n                at: \"top\",\r\n                of: $editorContainer.length && $editorContainer || $cell,\r\n                offset: \"0 -1\"\r\n            },\r\n            contentTemplate(contentElement) {\r\n                let editorOptions;\r\n                let $editor = $(\"<div>\").addClass(`dx-editor-container ${that.addWidgetPrefix(\"filter-range-start\")}`).appendTo(contentElement);\r\n                column = that._columnsController.columnOption(column.index);\r\n                editorOptions = that._getEditorOptions($editor, column);\r\n                editorOptions.sharedData = sharedData;\r\n                that._renderEditor($editor, editorOptions);\r\n                eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", (e => {\r\n                    let $prevElement = $cell.find(\"[tabindex]\").not(e.target).first();\r\n                    if (\"tab\" === normalizeKeyName(e) && e.shiftKey) {\r\n                        e.preventDefault();\r\n                        that._hideFilterRange();\r\n                        if (!$prevElement.length) {\r\n                            $prevElement = $cell.prev().find(\"[tabindex]\").last()\r\n                        }\r\n                        eventsEngine.trigger($prevElement, \"focus\")\r\n                    }\r\n                }));\r\n                $editor = $(\"<div>\").addClass(`dx-editor-container ${that.addWidgetPrefix(\"filter-range-end\")}`).appendTo(contentElement);\r\n                editorOptions = that._getEditorOptions($editor, column);\r\n                editorOptions.sharedData = sharedData;\r\n                that._renderEditor($editor, editorOptions);\r\n                eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", (e => {\r\n                    if (\"tab\" === normalizeKeyName(e) && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        that._hideFilterRange();\r\n                        eventsEngine.trigger($cell.next().find(\"[tabindex]\").first(), \"focus\")\r\n                    }\r\n                }));\r\n                return $(contentElement).addClass(that.getWidgetContainerClass())\r\n            },\r\n            onShown(e) {\r\n                const $editor = e.component.$content().find(\".dx-editor-container\").first();\r\n                eventsEngine.trigger($editor.find(EDITORS_INPUT_SELECTOR), \"focus\")\r\n            },\r\n            onHidden() {\r\n                column = that._columnsController.columnOption(column.index);\r\n                $cell.find(\".dx-menu\").parent().addClass(\"dx-editor-with-menu\");\r\n                if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n                    that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\r\n                    that.component.updateDimensions()\r\n                }\r\n            }\r\n        })\r\n    }\r\n    _updateFilterRangeOverlay(options) {\r\n        const overlayInstance = this._filterRangeOverlayInstance;\r\n        overlayInstance && overlayInstance.option(options)\r\n    }\r\n    _showFilterRange($cell, column) {\r\n        const that = this;\r\n        const $overlay = $cell.children(`.${that.addWidgetPrefix(\"filter-range-overlay\")}`);\r\n        let overlayInstance = $overlay.length && $overlay.data(\"dxOverlay\");\r\n        if (!overlayInstance && column) {\r\n            overlayInstance = that._initFilterRangeOverlay($cell, column)\r\n        }\r\n        if (!overlayInstance.option(\"visible\")) {\r\n            that._filterRangeOverlayInstance && that._filterRangeOverlayInstance.hide();\r\n            that._filterRangeOverlayInstance = overlayInstance;\r\n            that._updateFilterRangeOverlay({\r\n                width: getOuterWidth($cell, true) + 1\r\n            });\r\n            that._filterRangeOverlayInstance && that._filterRangeOverlayInstance.show()\r\n        }\r\n    }\r\n    _hideFilterRange() {\r\n        const overlayInstance = this._filterRangeOverlayInstance;\r\n        overlayInstance && overlayInstance.hide()\r\n    }\r\n    getFilterRangeOverlayInstance() {\r\n        return this._filterRangeOverlayInstance\r\n    }\r\n    _createRow(row) {\r\n        const $row = super._createRow(row);\r\n        if (\"filter\" === row.rowType) {\r\n            $row.addClass(this.addWidgetPrefix(\"filter-row\"));\r\n            if (!this.option(\"useLegacyKeyboardNavigation\")) {\r\n                eventsEngine.on($row, \"keydown\", (event => selectView(\"filterRow\", this, event)))\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n    _getRows() {\r\n        const result = super._getRows();\r\n        if (this.isFilterRowVisible()) {\r\n            result.push({\r\n                rowType: \"filter\"\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _renderFilterCell(cell, options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const $cell = $(cell);\r\n        if (that.component.option(\"showColumnHeaders\")) {\r\n            that.setAria(\"describedby\", column.headerId, $cell)\r\n        }\r\n        that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaFilterCell\"), $cell);\r\n        $cell.addClass(\"dx-editor-cell\");\r\n        const $container = $(\"<div>\").appendTo($cell);\r\n        const $editorContainer = $(\"<div>\").addClass(\"dx-editor-container\").appendTo($container);\r\n        if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n            that._renderFilterRangeContent($cell, column)\r\n        } else {\r\n            const editorOptions = that._getEditorOptions($editorContainer, column);\r\n            that._renderEditor($editorContainer, editorOptions)\r\n        }\r\n        const {\r\n            alignment: alignment\r\n        } = column;\r\n        if (alignment && \"center\" !== alignment) {\r\n            $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", column.alignment)\r\n        }\r\n        if (column.filterOperations && column.filterOperations.length) {\r\n            that._renderFilterOperationChooser($container, column, $editorContainer)\r\n        }\r\n    }\r\n    _renderCellContent($cell, options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        if (\"filter\" === options.rowType) {\r\n            if (column.command) {\r\n                $cell.html(\"&nbsp;\")\r\n            } else if (column.allowFiltering) {\r\n                that.renderTemplate($cell, that._renderFilterCell.bind(that), options).done((() => {\r\n                    that._updateCell($cell, options)\r\n                }));\r\n                return\r\n            }\r\n        }\r\n        super._renderCellContent.apply(this, arguments)\r\n    }\r\n    _getEditorOptions($editorContainer, column) {\r\n        const that = this;\r\n        const accessibilityOptions = {\r\n            editorOptions: {\r\n                inputAttr: that._getFilterInputAccessibilityAttributes(column)\r\n            }\r\n        };\r\n        const result = extend(accessibilityOptions, column, {\r\n            value: getFilterValue(that, column.index, $editorContainer),\r\n            parentType: \"filterRow\",\r\n            showAllText: that.option(\"filterRow.showAllText\"),\r\n            updateValueTimeout: \"onClick\" === that.option(\"filterRow.applyFilter\") ? 0 : 700,\r\n            width: null,\r\n            setValue(value, notFireEvent) {\r\n                updateFilterValue(that, {\r\n                    column: column,\r\n                    value: value,\r\n                    container: $editorContainer,\r\n                    notFireEvent: notFireEvent\r\n                })\r\n            }\r\n        });\r\n        if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n            if ($editorContainer.hasClass(that.addWidgetPrefix(\"filter-range-start\"))) {\r\n                result.placeholder = that.option(\"filterRow.betweenStartText\")\r\n            } else {\r\n                result.placeholder = that.option(\"filterRow.betweenEndText\")\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getFilterInputAccessibilityAttributes(column) {\r\n        const columnAriaLabel = messageLocalization.format(\"dxDataGrid-ariaFilterCell\");\r\n        if (this.component.option(\"showColumnHeaders\")) {\r\n            return {\r\n                \"aria-label\": columnAriaLabel,\r\n                \"aria-describedby\": column.headerId\r\n            }\r\n        }\r\n        return {\r\n            \"aria-label\": columnAriaLabel\r\n        }\r\n    }\r\n    _renderEditor($editorContainer, options) {\r\n        $editorContainer.empty();\r\n        const $element = $(\"<div>\").appendTo($editorContainer);\r\n        const dataSource = this._dataController.dataSource();\r\n        if (options.lookup && this.option(\"syncLookupFilterValues\")) {\r\n            this._applyFilterViewController.setCurrentColumnForFiltering(options);\r\n            const filter = this._dataController.getCombinedFilter();\r\n            this._applyFilterViewController.setCurrentColumnForFiltering(null);\r\n            const lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(options, dataSource, filter);\r\n            const lookupOptions = _extends({}, options, {\r\n                lookup: _extends({}, options.lookup, {\r\n                    dataSource: lookupDataSource\r\n                })\r\n            });\r\n            return this._editorFactoryController.createEditor($element, lookupOptions)\r\n        }\r\n        return this._editorFactoryController.createEditor($element, options)\r\n    }\r\n    _renderFilterRangeContent($cell, column) {\r\n        const that = this;\r\n        const $editorContainer = $cell.find(\".dx-editor-container\").first();\r\n        $editorContainer.empty();\r\n        const $filterRangeContent = $(\"<div>\").addClass(\"dx-filter-range-content\").attr(\"tabindex\", this.option(\"tabIndex\"));\r\n        eventsEngine.on($filterRangeContent, \"focusin\", (() => {\r\n            that._showFilterRange($cell, column)\r\n        }));\r\n        $filterRangeContent.appendTo($editorContainer);\r\n        that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column))\r\n    }\r\n    _updateFilterRangeContent($cell, value) {\r\n        const $filterRangeContent = $cell.find(\".dx-filter-range-content\");\r\n        if ($filterRangeContent.length) {\r\n            if (\"\" === value) {\r\n                $filterRangeContent.html(\"&nbsp;\")\r\n            } else {\r\n                $filterRangeContent.text(value)\r\n            }\r\n        }\r\n    }\r\n    _updateFilterOperationChooser($menu, column, $editorContainer) {\r\n        const that = this;\r\n        let isCellWasFocused;\r\n        const restoreFocus = function() {\r\n            const menu = Menu.getInstance($menu);\r\n            menu && menu.option(\"focusedElement\", null);\r\n            isCellWasFocused && that._focusEditor($editorContainer)\r\n        };\r\n        const editorFactoryController = this._editorFactoryController;\r\n        that._createComponent($menu, Menu, {\r\n            integrationOptions: {},\r\n            activeStateEnabled: false,\r\n            selectionMode: \"single\",\r\n            cssClass: `${that.getWidgetContainerClass()} dx-cell-focus-disabled ${FILTER_MENU}`,\r\n            showFirstSubmenuMode: \"onHover\",\r\n            hideSubmenuOnMouseLeave: true,\r\n            items: [{\r\n                disabled: !(column.filterOperations && column.filterOperations.length),\r\n                icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || \"default\"],\r\n                selectable: false,\r\n                items: that._getFilterOperationMenuItems(column)\r\n            }],\r\n            onItemRendered: _ref => {\r\n                let {\r\n                    itemElement: itemElement\r\n                } = _ref;\r\n                this.setAria(\"label\", ARIA_SEARCH_BOX, $(itemElement))\r\n            },\r\n            onItemClick(properties) {\r\n                var _properties$itemData;\r\n                const selectedFilterOperation = properties.itemData.name;\r\n                const columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);\r\n                let notFocusEditor = false;\r\n                const isOnClickMode = isOnClickApplyFilterMode(that);\r\n                const options = {};\r\n                if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {\r\n                    return\r\n                }\r\n                if (selectedFilterOperation) {\r\n                    options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = selectedFilterOperation;\r\n                    if (\"between\" === selectedFilterOperation || \"between\" === columnSelectedFilterOperation) {\r\n                        notFocusEditor = \"between\" === selectedFilterOperation;\r\n                        options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null\r\n                    }\r\n                } else {\r\n                    options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\r\n                    options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = column.defaultSelectedFilterOperation || null\r\n                }\r\n                const isResetFilterOperation = !(null !== (_properties$itemData = properties.itemData) && void 0 !== _properties$itemData && _properties$itemData.name);\r\n                const isNotFireEvent = isResetFilterOperation ? false : void 0;\r\n                that._columnsController.columnOption(column.index, options, void 0, isNotFireEvent);\r\n                that._applyFilterViewController.setHighLight($editorContainer, true);\r\n                if (!selectedFilterOperation) {\r\n                    const editor = getEditorInstance($editorContainer);\r\n                    if (editor && \"dxDateBox\" === editor.NAME && !editor.option(\"isValid\")) {\r\n                        editor.clear();\r\n                        editor.option(\"isValid\", true)\r\n                    }\r\n                }\r\n                if (!notFocusEditor) {\r\n                    that._focusEditor($editorContainer)\r\n                } else {\r\n                    that._showFilterRange($editorContainer.closest(\".dx-editor-cell\"), column)\r\n                }\r\n            },\r\n            onSubmenuShowing() {\r\n                isCellWasFocused = that._isEditorFocused($editorContainer);\r\n                editorFactoryController.loseFocus()\r\n            },\r\n            onSubmenuHiding() {\r\n                eventsEngine.trigger($menu, \"blur\");\r\n                restoreFocus()\r\n            },\r\n            onContentReady(e) {\r\n                eventsEngine.on($menu, \"blur\", (() => {\r\n                    const menu = e.component;\r\n                    menu._hideSubmenuAfterTimeout();\r\n                    restoreFocus()\r\n                }))\r\n            },\r\n            rtlEnabled: that.option(\"rtlEnabled\")\r\n        })\r\n    }\r\n    _isEditorFocused($container) {\r\n        return $container.hasClass(\"dx-focused\") || $container.parents(\".dx-focused\").length\r\n    }\r\n    _focusEditor($container) {\r\n        this._editorFactoryController.focus($container);\r\n        eventsEngine.trigger($container.find(EDITORS_INPUT_SELECTOR), \"focus\")\r\n    }\r\n    _renderFilterOperationChooser($container, column, $editorContainer) {\r\n        const that = this;\r\n        let $menu;\r\n        if (that.option(\"filterRow.showOperationChooser\")) {\r\n            $container.addClass(\"dx-editor-with-menu\");\r\n            $menu = $(\"<div>\").prependTo($container);\r\n            that._updateFilterOperationChooser($menu, column, $editorContainer)\r\n        }\r\n    }\r\n    _getFilterOperationMenuItems(column) {\r\n        const that = this;\r\n        let result = [{}];\r\n        const filterRowOptions = that.option(\"filterRow\");\r\n        const operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};\r\n        if (column.filterOperations && column.filterOperations.length) {\r\n            const availableFilterOperations = column.filterOperations.filter((value => isDefined(OPERATION_DESCRIPTORS[value])));\r\n            result = map(availableFilterOperations, (value => {\r\n                const descriptionName = OPERATION_DESCRIPTORS[value];\r\n                return {\r\n                    name: value,\r\n                    selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,\r\n                    text: operationDescriptions[descriptionName],\r\n                    icon: OPERATION_ICONS[value]\r\n                }\r\n            }));\r\n            result.push({\r\n                name: null,\r\n                text: filterRowOptions && filterRowOptions.resetOperationText,\r\n                icon: OPERATION_ICONS.default\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _handleDataChanged(e) {\r\n        var _this$_dataController, _this$_dataController2, _dataSource$lastLoadO, _e$operationTypes, _e$operationTypes2;\r\n        const dataSource = null === (_this$_dataController = this._dataController) || void 0 === _this$_dataController || null === (_this$_dataController2 = _this$_dataController.dataSource) || void 0 === _this$_dataController2 ? void 0 : _this$_dataController2.call(_this$_dataController);\r\n        const lastLoadOptions = null === dataSource || void 0 === dataSource || null === (_dataSource$lastLoadO = dataSource.lastLoadOptions) || void 0 === _dataSource$lastLoadO ? void 0 : _dataSource$lastLoadO.call(dataSource);\r\n        super._handleDataChanged.apply(this, arguments);\r\n        if (null !== (_e$operationTypes = e.operationTypes) && void 0 !== _e$operationTypes && _e$operationTypes.filtering || null !== (_e$operationTypes2 = e.operationTypes) && void 0 !== _e$operationTypes2 && _e$operationTypes2.fullReload) {\r\n            var _e$operationTypes3;\r\n            this.updateLookupDataSource((null === (_e$operationTypes3 = e.operationTypes) || void 0 === _e$operationTypes3 ? void 0 : _e$operationTypes3.filtering) || (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.filter))\r\n        }\r\n    }\r\n    updateLookupDataSource(filterChanged) {\r\n        if (!this.option(\"syncLookupFilterValues\")) {\r\n            return\r\n        }\r\n        if (!this.element()) {\r\n            return\r\n        }\r\n        const columns = this._columnsController.getVisibleColumns();\r\n        const dataSource = this._dataController.dataSource();\r\n        const applyFilterViewController = this._applyFilterViewController;\r\n        const rowIndex = this.element().find(`.${this.addWidgetPrefix(\"filter-row\")}`).index();\r\n        if (-1 === rowIndex) {\r\n            return\r\n        }\r\n        columns.forEach(((column, index) => {\r\n            if (!column.lookup || column.calculateCellValue !== column.defaultCalculateCellValue) {\r\n                return\r\n            }\r\n            const $cell = this._getCellElement(rowIndex, index);\r\n            const editor = getEditorInstance(null === $cell || void 0 === $cell ? void 0 : $cell.find(\".dx-editor-container\"));\r\n            if (editor) {\r\n                applyFilterViewController.setCurrentColumnForFiltering(column);\r\n                const filter = this._dataController.getCombinedFilter() || null;\r\n                applyFilterViewController.setCurrentColumnForFiltering(null);\r\n                const editorDataSource = editor.option(\"dataSource\");\r\n                const shouldUpdateFilter = !filterChanged || !equalByValue(editorDataSource.__dataGridSourceFilter || null, filter);\r\n                if (shouldUpdateFilter) {\r\n                    const lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\r\n                    editor.option(\"dataSource\", lookupDataSource)\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    getColumnElements(index, bandColumnIndex) {\r\n        var _rows$index;\r\n        const rows = this._getRows();\r\n        if (\"filter\" === (null === rows || void 0 === rows || null === (_rows$index = rows[index]) || void 0 === _rows$index ? void 0 : _rows$index.rowType) && arguments.length < 2) {\r\n            return this.getCellElements(index)\r\n        }\r\n        return super.getColumnElements(index, bandColumnIndex)\r\n    }\r\n};\r\nconst data = Base => class extends Base {\r\n    skipCalculateColumnFilters() {\r\n        return false\r\n    }\r\n    _calculateAdditionalFilter() {\r\n        if (this.skipCalculateColumnFilters()) {\r\n            return super._calculateAdditionalFilter()\r\n        }\r\n        const filters = [super._calculateAdditionalFilter()];\r\n        const columns = this._columnsController.getVisibleColumns(null, true);\r\n        const applyFilterController = this._applyFilterController;\r\n        each(columns, (function() {\r\n            var _applyFilterControlle;\r\n            const shouldSkip = (null === (_applyFilterControlle = applyFilterController.getCurrentColumnForFiltering()) || void 0 === _applyFilterControlle ? void 0 : _applyFilterControlle.index) === this.index;\r\n            if (this.allowFiltering && this.calculateFilterExpression && isDefined(this.filterValue) && !shouldSkip) {\r\n                const filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, \"filterRow\");\r\n                filters.push(filter)\r\n            }\r\n        }));\r\n        return gridCoreUtils.combineFilters(filters)\r\n    }\r\n};\r\nexport class ApplyFilterViewController extends modules.ViewController {\r\n    init() {\r\n        this._columnsController = this.getController(\"columns\")\r\n    }\r\n    _getHeaderPanel() {\r\n        if (!this._headerPanel) {\r\n            this._headerPanel = this.getView(\"headerPanel\")\r\n        }\r\n        return this._headerPanel\r\n    }\r\n    setHighLight($element, value) {\r\n        if (isOnClickApplyFilterMode(this)) {\r\n            $element && $element.toggleClass(\"dx-highlight-outline\", value) && $element.closest(\".dx-editor-cell\").toggleClass(\"dx-filter-modified\", value);\r\n            this._getHeaderPanel().enableApplyButton(value)\r\n        }\r\n    }\r\n    applyFilter() {\r\n        const columns = this._columnsController.getColumns();\r\n        this._columnsController.beginUpdate();\r\n        for (let i = 0; i < columns.length; i++) {\r\n            const column = columns[i];\r\n            if (void 0 !== column.bufferedFilterValue) {\r\n                this._columnsController.columnOption(i, \"filterValue\", column.bufferedFilterValue);\r\n                column.bufferedFilterValue = void 0\r\n            }\r\n            if (void 0 !== column.bufferedSelectedFilterOperation) {\r\n                this._columnsController.columnOption(i, \"selectedFilterOperation\", column.bufferedSelectedFilterOperation);\r\n                column.bufferedSelectedFilterOperation = void 0\r\n            }\r\n        }\r\n        this._columnsController.endUpdate();\r\n        this.removeHighLights()\r\n    }\r\n    removeHighLights() {\r\n        if (isOnClickApplyFilterMode(this)) {\r\n            const columnHeadersViewElement = this.getView(\"columnHeadersView\").element();\r\n            columnHeadersViewElement.find(`.${this.addWidgetPrefix(\"filter-row\")} .dx-highlight-outline`).removeClass(\"dx-highlight-outline\");\r\n            columnHeadersViewElement.find(`.${this.addWidgetPrefix(\"filter-row\")} .dx-filter-modified`).removeClass(\"dx-filter-modified\");\r\n            this._getHeaderPanel().enableApplyButton(false)\r\n        }\r\n    }\r\n    setCurrentColumnForFiltering(column) {\r\n        this._currentColumn = column\r\n    }\r\n    getCurrentColumnForFiltering() {\r\n        return this._currentColumn\r\n    }\r\n}\r\nconst columnsResizer = Base => class extends Base {\r\n    _startResizing() {\r\n        const that = this;\r\n        super._startResizing.apply(that, arguments);\r\n        if (that.isResizing()) {\r\n            const overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\r\n            if (overlayInstance) {\r\n                const cellIndex = overlayInstance.$element().closest(\"td\").index();\r\n                if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {\r\n                    overlayInstance.$content().hide()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _endResizing() {\r\n        const that = this;\r\n        let $cell;\r\n        if (that.isResizing()) {\r\n            const overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\r\n            if (overlayInstance) {\r\n                $cell = overlayInstance.$element().closest(\"td\");\r\n                that._columnHeadersView._updateFilterRangeOverlay({\r\n                    width: getOuterWidth($cell, true) + 1\r\n                });\r\n                overlayInstance.$content().show()\r\n            }\r\n        }\r\n        super._endResizing.apply(that, arguments)\r\n    }\r\n};\r\nconst editing = Base => class extends Base {\r\n    updateFieldValue(options) {\r\n        if (options.column.lookup) {\r\n            this._needUpdateLookupDataSource = true\r\n        }\r\n        return super.updateFieldValue.apply(this, arguments)\r\n    }\r\n    _afterSaveEditData(cancel) {\r\n        if (this._needUpdateLookupDataSource && !cancel) {\r\n            var _this$getView;\r\n            null === (_this$getView = this.getView(\"columnHeadersView\")) || void 0 === _this$getView || _this$getView.updateLookupDataSource()\r\n        }\r\n        this._needUpdateLookupDataSource = false;\r\n        return super._afterSaveEditData.apply(this, arguments)\r\n    }\r\n    _afterCancelEditData() {\r\n        this._needUpdateLookupDataSource = false;\r\n        return super._afterCancelEditData.apply(this, arguments)\r\n    }\r\n};\r\nconst headerPanel = Base => class extends Base {\r\n    init() {\r\n        super.init();\r\n        this._dataController = this.getController(\"data\");\r\n        this._applyFilterViewController = this.getController(\"applyFilter\")\r\n    }\r\n    optionChanged(args) {\r\n        if (\"filterRow\" === args.name) {\r\n            this._invalidate();\r\n            args.handled = true\r\n        } else {\r\n            super.optionChanged(args)\r\n        }\r\n    }\r\n    _getToolbarItems() {\r\n        const items = super._getToolbarItems();\r\n        const filterItem = this._prepareFilterItem();\r\n        return filterItem.concat(items)\r\n    }\r\n    _prepareFilterItem() {\r\n        const that = this;\r\n        const filterItem = [];\r\n        if (that._isShowApplyFilterButton()) {\r\n            const hintText = that.option(\"filterRow.applyFilterText\");\r\n            const columns = that._columnsController.getColumns();\r\n            const disabled = !columns.filter((column => void 0 !== column.bufferedFilterValue)).length;\r\n            const onInitialized = function(e) {\r\n                $(e.element).addClass(that._getToolbarButtonClass(\"dx-apply-button\"))\r\n            };\r\n            const onClickHandler = function() {\r\n                that._applyFilterViewController.applyFilter()\r\n            };\r\n            const toolbarItem = {\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    icon: \"apply-filter\",\r\n                    disabled: disabled,\r\n                    onClick: onClickHandler,\r\n                    hint: hintText,\r\n                    text: hintText,\r\n                    onInitialized: onInitialized\r\n                },\r\n                showText: \"inMenu\",\r\n                name: \"applyFilterButton\",\r\n                location: \"after\",\r\n                locateInMenu: \"auto\",\r\n                sortIndex: 10\r\n            };\r\n            filterItem.push(toolbarItem)\r\n        }\r\n        return filterItem\r\n    }\r\n    _isShowApplyFilterButton() {\r\n        const filterRowOptions = this.option(\"filterRow\");\r\n        return !!(null !== filterRowOptions && void 0 !== filterRowOptions && filterRowOptions.visible) && \"onClick\" === filterRowOptions.applyFilter\r\n    }\r\n    enableApplyButton(value) {\r\n        this.setToolbarItemDisabled(\"applyFilterButton\", !value)\r\n    }\r\n};\r\nexport const filterRowModule = {\r\n    defaultOptions: () => ({\r\n        syncLookupFilterValues: true,\r\n        filterRow: {\r\n            visible: false,\r\n            showOperationChooser: true,\r\n            showAllText: messageLocalization.format(\"dxDataGrid-filterRowShowAllText\"),\r\n            resetOperationText: messageLocalization.format(\"dxDataGrid-filterRowResetOperationText\"),\r\n            applyFilter: \"auto\",\r\n            applyFilterText: messageLocalization.format(\"dxDataGrid-applyFilterText\"),\r\n            operationDescriptions: {\r\n                equal: messageLocalization.format(\"dxDataGrid-filterRowOperationEquals\"),\r\n                notEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationNotEquals\"),\r\n                lessThan: messageLocalization.format(\"dxDataGrid-filterRowOperationLess\"),\r\n                lessThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationLessOrEquals\"),\r\n                greaterThan: messageLocalization.format(\"dxDataGrid-filterRowOperationGreater\"),\r\n                greaterThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationGreaterOrEquals\"),\r\n                startsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationStartsWith\"),\r\n                contains: messageLocalization.format(\"dxDataGrid-filterRowOperationContains\"),\r\n                notContains: messageLocalization.format(\"dxDataGrid-filterRowOperationNotContains\"),\r\n                endsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationEndsWith\"),\r\n                between: messageLocalization.format(\"dxDataGrid-filterRowOperationBetween\"),\r\n                isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\r\n                isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\r\n            },\r\n            betweenStartText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenStartText\"),\r\n            betweenEndText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenEndText\")\r\n        }\r\n    }),\r\n    controllers: {\r\n        applyFilter: ApplyFilterViewController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: data,\r\n            columnsResizer: columnsResizer,\r\n            editing: editing\r\n        },\r\n        views: {\r\n            columnHeadersView: columnHeadersView,\r\n            headerPanel: headerPanel\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}