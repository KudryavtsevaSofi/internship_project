{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/header_filter/m_header_filter.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { name as clickEventName } from \"../../../../common/core/events/click\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport dateLocalization from \"../../../../common/core/localization/date\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport { normalizeDataSourceOptions } from \"../../../../common/data/data_source/utils\";\nimport dataQuery from \"../../../../common/data/query\";\nimport storeHelper from \"../../../../common/data/store_helper\";\nimport { compileGetter } from \"../../../../core/utils/data\";\nimport { Deferred } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getDefaultAlignment } from \"../../../../core/utils/position\";\nimport { isDefined, isFunction, isObject } from \"../../../../core/utils/type\";\nimport { restoreFocus, saveFocusedElementInfo } from \"../../../../ui/shared/accessibility\";\nimport filterUtils from \"../../../../ui/shared/filtering\";\nimport Modules from \"../../../grids/grid_core/m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nimport { allowHeaderFiltering, headerFilterMixin, HeaderFilterView, updateHeaderFilterItemSelectionState } from \"./m_header_filter_core\";\nconst DATE_INTERVAL_FORMATS = {\n  month: value => dateLocalization.getMonthNames()[value - 1],\n  quarter: value => dateLocalization.format(new Date(2e3, 3 * value - 1), \"quarter\")\n};\nfunction ungroupUTCDates(items, dateParts, dates) {\n  dateParts = dateParts || [];\n  dates = dates || [];\n  items.forEach(item => {\n    if (isDefined(item.key)) {\n      const isMonthPart = 1 === dateParts.length;\n      dateParts.push(isMonthPart ? item.key - 1 : item.key);\n      if (item.items) {\n        ungroupUTCDates(item.items, dateParts, dates);\n      } else {\n        const date = new Date(Date.UTC.apply(Date, dateParts));\n        dates.push(date);\n      }\n      dateParts.pop();\n    } else {\n      dates.push(null);\n    }\n  });\n  return dates;\n}\nfunction convertDataFromUTCToLocal(data, column) {\n  const dates = ungroupUTCDates(data);\n  const query = dataQuery(dates);\n  const group = gridCoreUtils.getHeaderFilterGroupParameters(_extends({}, column, {\n    calculateCellValue: date => date\n  }));\n  return storeHelper.queryByOptions(query, {\n    group: group\n  }).toArray();\n}\nfunction isUTCFormat(format) {\n  return \"Z\" === (null === format || void 0 === format ? void 0 : format.slice(-1)) || \"'Z'\" === (null === format || void 0 === format ? void 0 : format.slice(-3));\n}\nconst getFormatOptions = function (value, column, currentLevel) {\n  const groupInterval = filterUtils.getGroupInterval(column);\n  const result = gridCoreUtils.getFormatOptionsByColumn(column, \"headerFilter\");\n  if (groupInterval) {\n    result.groupInterval = groupInterval[currentLevel];\n    if (gridCoreUtils.isDateType(column.dataType)) {\n      result.format = DATE_INTERVAL_FORMATS[groupInterval[currentLevel]];\n    } else if (\"number\" === column.dataType) {\n      result.getDisplayFormat = function () {\n        const formatOptions = {\n          format: column.format,\n          target: \"headerFilter\"\n        };\n        const firstValueText = gridCoreUtils.formatValue(value, formatOptions);\n        const secondValue = value + groupInterval[currentLevel];\n        const secondValueText = gridCoreUtils.formatValue(secondValue, formatOptions);\n        return firstValueText && secondValueText ? `${firstValueText} - ${secondValueText}` : \"\";\n      };\n    }\n  }\n  return result;\n};\nexport class HeaderFilterController extends Modules.ViewController {\n  init() {\n    this._columnsController = this.getController(\"columns\");\n    this._dataController = this.getController(\"data\");\n    this._headerFilterView = this.getView(\"headerFilterView\");\n  }\n  _updateSelectedState(items, column) {\n    let i = items.length;\n    const isExclude = \"exclude\" === column.filterType;\n    while (i--) {\n      const item = items[i];\n      if (\"items\" in items[i]) {\n        this._updateSelectedState(items[i].items, column);\n      }\n      updateHeaderFilterItemSelectionState(item, gridCoreUtils.getIndexByKey(items[i].value, column.filterValues, null) > -1, isExclude);\n    }\n  }\n  _normalizeGroupItem(item, currentLevel, options) {\n    let value;\n    let displayValue;\n    const {\n      path: path\n    } = options;\n    const {\n      valueSelector: valueSelector\n    } = options;\n    const {\n      displaySelector: displaySelector\n    } = options;\n    const {\n      column: column\n    } = options;\n    if (valueSelector && displaySelector) {\n      value = valueSelector(item);\n      displayValue = displaySelector(item);\n    } else {\n      value = item.key;\n      displayValue = value;\n    }\n    if (!isObject(item)) {\n      item = {};\n    } else {\n      item = extend({}, item);\n    }\n    path.push(value);\n    if (1 === path.length) {\n      item.value = path[0];\n    } else {\n      item.value = path.join(\"/\");\n    }\n    item.text = this.getHeaderItemText(displayValue, column, currentLevel, options.headerFilterOptions);\n    return item;\n  }\n  getHeaderItemText(displayValue, column, currentLevel, headerFilterOptions) {\n    let text = gridCoreUtils.formatValue(displayValue, getFormatOptions(displayValue, column, currentLevel));\n    if (!text) {\n      text = headerFilterOptions.texts.emptyValue;\n    }\n    return text;\n  }\n  _processGroupItems(groupItems, currentLevel, path, options) {\n    const that = this;\n    let displaySelector;\n    let valueSelector;\n    const {\n      column: column\n    } = options;\n    const {\n      lookup: lookup\n    } = column;\n    const {\n      level: level\n    } = options;\n    path = path || [];\n    currentLevel = currentLevel || 0;\n    if (lookup) {\n      displaySelector = compileGetter(lookup.displayExpr);\n      valueSelector = compileGetter(lookup.valueExpr);\n    }\n    for (let i = 0; i < groupItems.length; i++) {\n      groupItems[i] = that._normalizeGroupItem(groupItems[i], currentLevel, {\n        column: options.column,\n        headerFilterOptions: options.headerFilterOptions,\n        displaySelector: displaySelector,\n        valueSelector: valueSelector,\n        path: path\n      });\n      if (\"items\" in groupItems[i]) {\n        if (currentLevel === level || !isDefined(groupItems[i].value)) {\n          delete groupItems[i].items;\n        } else {\n          that._processGroupItems(groupItems[i].items, currentLevel + 1, path, options);\n        }\n      }\n      path.pop();\n    }\n  }\n  getDataSource(column) {\n    var _column$headerFilter;\n    const dataSource = this._dataController.dataSource();\n    const remoteGrouping = null === dataSource || void 0 === dataSource ? void 0 : dataSource.remoteOperations().grouping;\n    const group = gridCoreUtils.getHeaderFilterGroupParameters(column, remoteGrouping);\n    const headerFilterDataSource = null === (_column$headerFilter = column.headerFilter) || void 0 === _column$headerFilter ? void 0 : _column$headerFilter.dataSource;\n    const headerFilterOptions = this.option(\"headerFilter\");\n    let isLookup = false;\n    const options = {\n      component: this.component\n    };\n    if (!dataSource) {\n      return;\n    }\n    if (isDefined(headerFilterDataSource) && !isFunction(headerFilterDataSource)) {\n      options.dataSource = normalizeDataSourceOptions(headerFilterDataSource);\n    } else if (column.lookup) {\n      isLookup = true;\n      if (this.option(\"syncLookupFilterValues\")) {\n        this._currentColumn = column;\n        const filter = this._dataController.getCombinedFilter();\n        this._currentColumn = null;\n        options.dataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\n      } else {\n        options.dataSource = gridCoreUtils.normalizeLookupDataSource(column.lookup);\n      }\n    } else {\n      const cutoffLevel = Array.isArray(group) ? group.length - 1 : 0;\n      this._currentColumn = column;\n      const filter = this._dataController.getCombinedFilter();\n      this._currentColumn = null;\n      options.dataSource = {\n        filter: filter,\n        group: group,\n        useDefaultSearch: true,\n        load: options => {\n          const d = new Deferred();\n          options.dataField = column.dataField || column.name;\n          dataSource.load(options).done(data => {\n            const convertUTCDates = remoteGrouping && isUTCFormat(column.serializationFormat) && cutoffLevel > 3;\n            if (convertUTCDates) {\n              data = convertDataFromUTCToLocal(data, column);\n            }\n            that._processGroupItems(data, null, null, {\n              level: cutoffLevel,\n              column: column,\n              headerFilterOptions: headerFilterOptions\n            });\n            d.resolve(data);\n          }).fail(d.reject);\n          return d;\n        }\n      };\n    }\n    if (isFunction(headerFilterDataSource)) {\n      headerFilterDataSource.call(column, options);\n    }\n    const origPostProcess = options.dataSource.postProcess;\n    const that = this;\n    options.dataSource.postProcess = function (data) {\n      let items = data;\n      if (isLookup) {\n        items = items.filter(item => null !== item[column.lookup.valueExpr]);\n        if (0 === this.pageIndex() && !this.searchValue()) {\n          items = items.slice(0);\n          items.unshift(null);\n        }\n        that._processGroupItems(items, null, null, {\n          level: 0,\n          column: column,\n          headerFilterOptions: headerFilterOptions\n        });\n      }\n      items = origPostProcess && origPostProcess.call(this, items) || items;\n      that._updateSelectedState(items, column);\n      return items;\n    };\n    return options.dataSource;\n  }\n  getCurrentColumn() {\n    return this._currentColumn;\n  }\n  showHeaderFilterMenu(columnIndex, isGroupPanel) {\n    const columnsController = this._columnsController;\n    const column = extend(true, {}, this._columnsController.getColumns()[columnIndex]);\n    if (column) {\n      const visibleIndex = columnsController.getVisibleIndex(columnIndex);\n      const view = isGroupPanel ? this.getView(\"headerPanel\") : this.getView(\"columnHeadersView\");\n      const $columnElement = view.getColumnElements().eq(isGroupPanel ? column.groupIndex : visibleIndex);\n      this.showHeaderFilterMenuBase({\n        columnElement: $columnElement,\n        column: column,\n        applyFilter: true,\n        apply() {\n          columnsController.columnOption(columnIndex, {\n            filterValues: this.filterValues,\n            filterType: this.filterType\n          });\n        }\n      });\n    }\n  }\n  showHeaderFilterMenuBase(options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    if (column) {\n      const groupInterval = filterUtils.getGroupInterval(column);\n      const dataSource = that._dataController.dataSource();\n      const remoteFiltering = dataSource && dataSource.remoteOperations().filtering;\n      const previousOnHidden = options.onHidden;\n      extend(options, column, {\n        type: groupInterval && groupInterval.length > 1 ? \"tree\" : \"list\",\n        remoteFiltering: remoteFiltering,\n        onShowing: e => {\n          const dxResizableInstance = e.component.$overlayContent().dxResizable(\"instance\");\n          dxResizableInstance && dxResizableInstance.option(\"onResizeEnd\", e => {\n            let headerFilterByColumn = this._columnsController.columnOption(options.dataField, \"headerFilter\");\n            headerFilterByColumn = headerFilterByColumn || {};\n            headerFilterByColumn.width = e.width;\n            headerFilterByColumn.height = e.height;\n            this._columnsController.columnOption(options.dataField, \"headerFilter\", headerFilterByColumn, true);\n          });\n        },\n        onHidden: () => {\n          null === previousOnHidden || void 0 === previousOnHidden || previousOnHidden();\n          restoreFocus(this);\n        }\n      });\n      options.dataSource = that.getDataSource(options);\n      if (options.isFilterBuilder) {\n        options.dataSource.filter = null;\n        options.alignment = \"right\";\n      }\n      that._headerFilterView.showHeaderFilterMenu(options.columnElement, options);\n    }\n  }\n  hideHeaderFilterMenu() {\n    this._headerFilterView.hideHeaderFilterMenu();\n  }\n}\nconst columnHeadersView = Base => class extends headerFilterMixin(Base) {\n  _renderCellContent($cell, options) {\n    const that = this;\n    let $headerFilterIndicator;\n    const {\n      column: column\n    } = options;\n    if (!column.command && allowHeaderFiltering(column) && that.option(\"headerFilter.visible\") && \"header\" === options.rowType) {\n      $headerFilterIndicator = that._applyColumnState({\n        name: \"headerFilter\",\n        rootElement: $cell,\n        column: column,\n        showColumnLines: that.option(\"showColumnLines\")\n      });\n      $headerFilterIndicator && that._subscribeToIndicatorEvent($headerFilterIndicator, column, \"headerFilter\");\n    }\n    super._renderCellContent.apply(this, arguments);\n  }\n  _subscribeToIndicatorEvent($indicator, column, indicatorName) {\n    if (\"headerFilter\" === indicatorName) {\n      eventsEngine.on($indicator, clickEventName, this.createAction(e => {\n        e.event.stopPropagation();\n        saveFocusedElementInfo($indicator, this);\n        this._headerFilterController.showHeaderFilterMenu(column.index, false);\n      }));\n    }\n  }\n  _updateIndicator($cell, column, indicatorName) {\n    const $indicator = super._updateIndicator($cell, column, indicatorName);\n    $indicator && this._subscribeToIndicatorEvent($indicator, column, indicatorName);\n  }\n  _updateHeaderFilterIndicators() {\n    if (this.option(\"headerFilter.visible\")) {\n      this._updateIndicators(\"headerFilter\");\n    }\n  }\n  _needUpdateFilterIndicators() {\n    return true;\n  }\n  _columnOptionChanged(e) {\n    const {\n      optionNames: optionNames\n    } = e;\n    const isFilterRowAndHeaderFilterValuesChanged = gridCoreUtils.checkChanges(optionNames, [\"filterValues\", \"filterValue\"]);\n    const isHeaderFilterValuesAndTypeChanged = gridCoreUtils.checkChanges(optionNames, [\"filterValues\", \"filterType\"]);\n    const shouldUpdateFilterIndicators = (isFilterRowAndHeaderFilterValuesChanged || isHeaderFilterValuesAndTypeChanged) && this._needUpdateFilterIndicators();\n    if (shouldUpdateFilterIndicators) {\n      this._updateHeaderFilterIndicators();\n    }\n    if (!isHeaderFilterValuesAndTypeChanged) {\n      super._columnOptionChanged(e);\n    }\n  }\n};\nconst headerPanel = Base => class extends headerFilterMixin(Base) {\n  _createGroupPanelItem($rootElement, groupColumn) {\n    const that = this;\n    const $item = super._createGroupPanelItem.apply(that, arguments);\n    let $headerFilterIndicator;\n    if (!groupColumn.command && allowHeaderFiltering(groupColumn) && that.option(\"headerFilter.visible\")) {\n      $headerFilterIndicator = that._applyColumnState({\n        name: \"headerFilter\",\n        rootElement: $item,\n        column: {\n          alignment: getDefaultAlignment(that.option(\"rtlEnabled\")),\n          filterValues: groupColumn.filterValues,\n          allowHeaderFiltering: true,\n          caption: groupColumn.caption\n        },\n        showColumnLines: true\n      });\n      $headerFilterIndicator && eventsEngine.on($headerFilterIndicator, clickEventName, that.createAction(e => {\n        const {\n          event: event\n        } = e;\n        event.stopPropagation();\n        this._headerFilterController.showHeaderFilterMenu(groupColumn.index, true);\n      }));\n    }\n    return $item;\n  }\n};\nexport function invertFilterExpression(filter) {\n  return [\"!\", filter];\n}\nconst data = Base => class extends Base {\n  skipCalculateColumnFilters() {\n    return false;\n  }\n  _calculateAdditionalFilter() {\n    if (this.skipCalculateColumnFilters()) {\n      return super._calculateAdditionalFilter();\n    }\n    const filters = [super._calculateAdditionalFilter()];\n    const columns = this._columnsController.getVisibleColumns(null, true);\n    const headerFilterController = this._headerFilterController;\n    const currentColumn = headerFilterController.getCurrentColumn();\n    each(columns, (_, column) => {\n      let filter;\n      if (currentColumn && currentColumn.index === column.index) {\n        return;\n      }\n      if (allowHeaderFiltering(column) && column.calculateFilterExpression && Array.isArray(column.filterValues) && column.filterValues.length) {\n        let filterValues = [];\n        each(column.filterValues, (_, filterValue) => {\n          if (Array.isArray(filterValue)) {\n            filter = filterValue;\n          } else {\n            if (column.deserializeValue && !gridCoreUtils.isDateType(column.dataType) && \"number\" !== column.dataType) {\n              filterValue = column.deserializeValue(filterValue);\n            }\n            filter = column.createFilterExpression(filterValue, \"=\", \"headerFilter\");\n          }\n          if (filter) {\n            filter.columnIndex = column.index;\n          }\n          filterValues.push(filter);\n        });\n        filterValues = gridCoreUtils.combineFilters(filterValues, \"or\");\n        filters.push(\"exclude\" === column.filterType ? [\"!\", filterValues] : filterValues);\n      }\n    });\n    return gridCoreUtils.combineFilters(filters);\n  }\n};\nexport const headerFilterModule = {\n  defaultOptions: () => ({\n    syncLookupFilterValues: true,\n    headerFilter: {\n      visible: false,\n      width: 252,\n      height: 325,\n      allowSelectAll: true,\n      search: {\n        enabled: false,\n        timeout: 500,\n        mode: \"contains\",\n        editorOptions: {}\n      },\n      texts: {\n        emptyValue: messageLocalization.format(\"dxDataGrid-headerFilterEmptyValue\"),\n        ok: messageLocalization.format(\"dxDataGrid-headerFilterOK\"),\n        cancel: messageLocalization.format(\"dxDataGrid-headerFilterCancel\")\n      }\n    }\n  }),\n  controllers: {\n    headerFilter: HeaderFilterController\n  },\n  views: {\n    headerFilterView: HeaderFilterView\n  },\n  extenders: {\n    controllers: {\n      data: data\n    },\n    views: {\n      columnHeadersView: columnHeadersView,\n      headerPanel: headerPanel\n    }\n  }\n};","map":{"version":3,"names":["_extends","name","clickEventName","eventsEngine","dateLocalization","messageLocalization","normalizeDataSourceOptions","dataQuery","storeHelper","compileGetter","Deferred","extend","each","getDefaultAlignment","isDefined","isFunction","isObject","restoreFocus","saveFocusedElementInfo","filterUtils","Modules","gridCoreUtils","allowHeaderFiltering","headerFilterMixin","HeaderFilterView","updateHeaderFilterItemSelectionState","DATE_INTERVAL_FORMATS","month","value","getMonthNames","quarter","format","Date","ungroupUTCDates","items","dateParts","dates","forEach","item","key","isMonthPart","length","push","date","UTC","apply","pop","convertDataFromUTCToLocal","data","column","query","group","getHeaderFilterGroupParameters","calculateCellValue","queryByOptions","toArray","isUTCFormat","slice","getFormatOptions","currentLevel","groupInterval","getGroupInterval","result","getFormatOptionsByColumn","isDateType","dataType","getDisplayFormat","formatOptions","target","firstValueText","formatValue","secondValue","secondValueText","HeaderFilterController","ViewController","init","_columnsController","getController","_dataController","_headerFilterView","getView","_updateSelectedState","i","isExclude","filterType","getIndexByKey","filterValues","_normalizeGroupItem","options","displayValue","path","valueSelector","displaySelector","join","text","getHeaderItemText","headerFilterOptions","texts","emptyValue","_processGroupItems","groupItems","that","lookup","level","displayExpr","valueExpr","getDataSource","_column$headerFilter","dataSource","remoteGrouping","remoteOperations","grouping","headerFilterDataSource","headerFilter","option","isLookup","component","_currentColumn","filter","getCombinedFilter","getWrappedLookupDataSource","normalizeLookupDataSource","cutoffLevel","Array","isArray","useDefaultSearch","load","d","dataField","done","convertUTCDates","serializationFormat","resolve","fail","reject","call","origPostProcess","postProcess","pageIndex","searchValue","unshift","getCurrentColumn","showHeaderFilterMenu","columnIndex","isGroupPanel","columnsController","getColumns","visibleIndex","getVisibleIndex","view","$columnElement","getColumnElements","eq","groupIndex","showHeaderFilterMenuBase","columnElement","applyFilter","columnOption","remoteFiltering","filtering","previousOnHidden","onHidden","type","onShowing","e","dxResizableInstance","$overlayContent","dxResizable","headerFilterByColumn","width","height","isFilterBuilder","alignment","hideHeaderFilterMenu","columnHeadersView","Base","_renderCellContent","$cell","$headerFilterIndicator","command","rowType","_applyColumnState","rootElement","showColumnLines","_subscribeToIndicatorEvent","arguments","$indicator","indicatorName","on","createAction","event","stopPropagation","_headerFilterController","index","_updateIndicator","_updateHeaderFilterIndicators","_updateIndicators","_needUpdateFilterIndicators","_columnOptionChanged","optionNames","isFilterRowAndHeaderFilterValuesChanged","checkChanges","isHeaderFilterValuesAndTypeChanged","shouldUpdateFilterIndicators","headerPanel","_createGroupPanelItem","$rootElement","groupColumn","$item","caption","invertFilterExpression","skipCalculateColumnFilters","_calculateAdditionalFilter","filters","columns","getVisibleColumns","headerFilterController","currentColumn","_","calculateFilterExpression","filterValue","deserializeValue","createFilterExpression","combineFilters","headerFilterModule","defaultOptions","syncLookupFilterValues","visible","allowSelectAll","search","enabled","timeout","mode","editorOptions","ok","cancel","controllers","views","headerFilterView","extenders"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/header_filter/m_header_filter.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/header_filter/m_header_filter.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport dateLocalization from \"../../../../common/core/localization/date\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport {\r\n    normalizeDataSourceOptions\r\n} from \"../../../../common/data/data_source/utils\";\r\nimport dataQuery from \"../../../../common/data/query\";\r\nimport storeHelper from \"../../../../common/data/store_helper\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../../core/utils/data\";\r\nimport {\r\n    Deferred\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getDefaultAlignment\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    isDefined,\r\n    isFunction,\r\n    isObject\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    restoreFocus,\r\n    saveFocusedElementInfo\r\n} from \"../../../../ui/shared/accessibility\";\r\nimport filterUtils from \"../../../../ui/shared/filtering\";\r\nimport Modules from \"../../../grids/grid_core/m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    allowHeaderFiltering,\r\n    headerFilterMixin,\r\n    HeaderFilterView,\r\n    updateHeaderFilterItemSelectionState\r\n} from \"./m_header_filter_core\";\r\nconst DATE_INTERVAL_FORMATS = {\r\n    month: value => dateLocalization.getMonthNames()[value - 1],\r\n    quarter: value => dateLocalization.format(new Date(2e3, 3 * value - 1), \"quarter\")\r\n};\r\n\r\nfunction ungroupUTCDates(items, dateParts, dates) {\r\n    dateParts = dateParts || [];\r\n    dates = dates || [];\r\n    items.forEach((item => {\r\n        if (isDefined(item.key)) {\r\n            const isMonthPart = 1 === dateParts.length;\r\n            dateParts.push(isMonthPart ? item.key - 1 : item.key);\r\n            if (item.items) {\r\n                ungroupUTCDates(item.items, dateParts, dates)\r\n            } else {\r\n                const date = new Date(Date.UTC.apply(Date, dateParts));\r\n                dates.push(date)\r\n            }\r\n            dateParts.pop()\r\n        } else {\r\n            dates.push(null)\r\n        }\r\n    }));\r\n    return dates\r\n}\r\n\r\nfunction convertDataFromUTCToLocal(data, column) {\r\n    const dates = ungroupUTCDates(data);\r\n    const query = dataQuery(dates);\r\n    const group = gridCoreUtils.getHeaderFilterGroupParameters(_extends({}, column, {\r\n        calculateCellValue: date => date\r\n    }));\r\n    return storeHelper.queryByOptions(query, {\r\n        group: group\r\n    }).toArray()\r\n}\r\n\r\nfunction isUTCFormat(format) {\r\n    return \"Z\" === (null === format || void 0 === format ? void 0 : format.slice(-1)) || \"'Z'\" === (null === format || void 0 === format ? void 0 : format.slice(-3))\r\n}\r\nconst getFormatOptions = function(value, column, currentLevel) {\r\n    const groupInterval = filterUtils.getGroupInterval(column);\r\n    const result = gridCoreUtils.getFormatOptionsByColumn(column, \"headerFilter\");\r\n    if (groupInterval) {\r\n        result.groupInterval = groupInterval[currentLevel];\r\n        if (gridCoreUtils.isDateType(column.dataType)) {\r\n            result.format = DATE_INTERVAL_FORMATS[groupInterval[currentLevel]]\r\n        } else if (\"number\" === column.dataType) {\r\n            result.getDisplayFormat = function() {\r\n                const formatOptions = {\r\n                    format: column.format,\r\n                    target: \"headerFilter\"\r\n                };\r\n                const firstValueText = gridCoreUtils.formatValue(value, formatOptions);\r\n                const secondValue = value + groupInterval[currentLevel];\r\n                const secondValueText = gridCoreUtils.formatValue(secondValue, formatOptions);\r\n                return firstValueText && secondValueText ? `${firstValueText} - ${secondValueText}` : \"\"\r\n            }\r\n        }\r\n    }\r\n    return result\r\n};\r\nexport class HeaderFilterController extends Modules.ViewController {\r\n    init() {\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._dataController = this.getController(\"data\");\r\n        this._headerFilterView = this.getView(\"headerFilterView\")\r\n    }\r\n    _updateSelectedState(items, column) {\r\n        let i = items.length;\r\n        const isExclude = \"exclude\" === column.filterType;\r\n        while (i--) {\r\n            const item = items[i];\r\n            if (\"items\" in items[i]) {\r\n                this._updateSelectedState(items[i].items, column)\r\n            }\r\n            updateHeaderFilterItemSelectionState(item, gridCoreUtils.getIndexByKey(items[i].value, column.filterValues, null) > -1, isExclude)\r\n        }\r\n    }\r\n    _normalizeGroupItem(item, currentLevel, options) {\r\n        let value;\r\n        let displayValue;\r\n        const {\r\n            path: path\r\n        } = options;\r\n        const {\r\n            valueSelector: valueSelector\r\n        } = options;\r\n        const {\r\n            displaySelector: displaySelector\r\n        } = options;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        if (valueSelector && displaySelector) {\r\n            value = valueSelector(item);\r\n            displayValue = displaySelector(item)\r\n        } else {\r\n            value = item.key;\r\n            displayValue = value\r\n        }\r\n        if (!isObject(item)) {\r\n            item = {}\r\n        } else {\r\n            item = extend({}, item)\r\n        }\r\n        path.push(value);\r\n        if (1 === path.length) {\r\n            item.value = path[0]\r\n        } else {\r\n            item.value = path.join(\"/\")\r\n        }\r\n        item.text = this.getHeaderItemText(displayValue, column, currentLevel, options.headerFilterOptions);\r\n        return item\r\n    }\r\n    getHeaderItemText(displayValue, column, currentLevel, headerFilterOptions) {\r\n        let text = gridCoreUtils.formatValue(displayValue, getFormatOptions(displayValue, column, currentLevel));\r\n        if (!text) {\r\n            text = headerFilterOptions.texts.emptyValue\r\n        }\r\n        return text\r\n    }\r\n    _processGroupItems(groupItems, currentLevel, path, options) {\r\n        const that = this;\r\n        let displaySelector;\r\n        let valueSelector;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const {\r\n            lookup: lookup\r\n        } = column;\r\n        const {\r\n            level: level\r\n        } = options;\r\n        path = path || [];\r\n        currentLevel = currentLevel || 0;\r\n        if (lookup) {\r\n            displaySelector = compileGetter(lookup.displayExpr);\r\n            valueSelector = compileGetter(lookup.valueExpr)\r\n        }\r\n        for (let i = 0; i < groupItems.length; i++) {\r\n            groupItems[i] = that._normalizeGroupItem(groupItems[i], currentLevel, {\r\n                column: options.column,\r\n                headerFilterOptions: options.headerFilterOptions,\r\n                displaySelector: displaySelector,\r\n                valueSelector: valueSelector,\r\n                path: path\r\n            });\r\n            if (\"items\" in groupItems[i]) {\r\n                if (currentLevel === level || !isDefined(groupItems[i].value)) {\r\n                    delete groupItems[i].items\r\n                } else {\r\n                    that._processGroupItems(groupItems[i].items, currentLevel + 1, path, options)\r\n                }\r\n            }\r\n            path.pop()\r\n        }\r\n    }\r\n    getDataSource(column) {\r\n        var _column$headerFilter;\r\n        const dataSource = this._dataController.dataSource();\r\n        const remoteGrouping = null === dataSource || void 0 === dataSource ? void 0 : dataSource.remoteOperations().grouping;\r\n        const group = gridCoreUtils.getHeaderFilterGroupParameters(column, remoteGrouping);\r\n        const headerFilterDataSource = null === (_column$headerFilter = column.headerFilter) || void 0 === _column$headerFilter ? void 0 : _column$headerFilter.dataSource;\r\n        const headerFilterOptions = this.option(\"headerFilter\");\r\n        let isLookup = false;\r\n        const options = {\r\n            component: this.component\r\n        };\r\n        if (!dataSource) {\r\n            return\r\n        }\r\n        if (isDefined(headerFilterDataSource) && !isFunction(headerFilterDataSource)) {\r\n            options.dataSource = normalizeDataSourceOptions(headerFilterDataSource)\r\n        } else if (column.lookup) {\r\n            isLookup = true;\r\n            if (this.option(\"syncLookupFilterValues\")) {\r\n                this._currentColumn = column;\r\n                const filter = this._dataController.getCombinedFilter();\r\n                this._currentColumn = null;\r\n                options.dataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter)\r\n            } else {\r\n                options.dataSource = gridCoreUtils.normalizeLookupDataSource(column.lookup)\r\n            }\r\n        } else {\r\n            const cutoffLevel = Array.isArray(group) ? group.length - 1 : 0;\r\n            this._currentColumn = column;\r\n            const filter = this._dataController.getCombinedFilter();\r\n            this._currentColumn = null;\r\n            options.dataSource = {\r\n                filter: filter,\r\n                group: group,\r\n                useDefaultSearch: true,\r\n                load: options => {\r\n                    const d = new Deferred;\r\n                    options.dataField = column.dataField || column.name;\r\n                    dataSource.load(options).done((data => {\r\n                        const convertUTCDates = remoteGrouping && isUTCFormat(column.serializationFormat) && cutoffLevel > 3;\r\n                        if (convertUTCDates) {\r\n                            data = convertDataFromUTCToLocal(data, column)\r\n                        }\r\n                        that._processGroupItems(data, null, null, {\r\n                            level: cutoffLevel,\r\n                            column: column,\r\n                            headerFilterOptions: headerFilterOptions\r\n                        });\r\n                        d.resolve(data)\r\n                    })).fail(d.reject);\r\n                    return d\r\n                }\r\n            }\r\n        }\r\n        if (isFunction(headerFilterDataSource)) {\r\n            headerFilterDataSource.call(column, options)\r\n        }\r\n        const origPostProcess = options.dataSource.postProcess;\r\n        const that = this;\r\n        options.dataSource.postProcess = function(data) {\r\n            let items = data;\r\n            if (isLookup) {\r\n                items = items.filter((item => null !== item[column.lookup.valueExpr]));\r\n                if (0 === this.pageIndex() && !this.searchValue()) {\r\n                    items = items.slice(0);\r\n                    items.unshift(null)\r\n                }\r\n                that._processGroupItems(items, null, null, {\r\n                    level: 0,\r\n                    column: column,\r\n                    headerFilterOptions: headerFilterOptions\r\n                })\r\n            }\r\n            items = origPostProcess && origPostProcess.call(this, items) || items;\r\n            that._updateSelectedState(items, column);\r\n            return items\r\n        };\r\n        return options.dataSource\r\n    }\r\n    getCurrentColumn() {\r\n        return this._currentColumn\r\n    }\r\n    showHeaderFilterMenu(columnIndex, isGroupPanel) {\r\n        const columnsController = this._columnsController;\r\n        const column = extend(true, {}, this._columnsController.getColumns()[columnIndex]);\r\n        if (column) {\r\n            const visibleIndex = columnsController.getVisibleIndex(columnIndex);\r\n            const view = isGroupPanel ? this.getView(\"headerPanel\") : this.getView(\"columnHeadersView\");\r\n            const $columnElement = view.getColumnElements().eq(isGroupPanel ? column.groupIndex : visibleIndex);\r\n            this.showHeaderFilterMenuBase({\r\n                columnElement: $columnElement,\r\n                column: column,\r\n                applyFilter: true,\r\n                apply() {\r\n                    columnsController.columnOption(columnIndex, {\r\n                        filterValues: this.filterValues,\r\n                        filterType: this.filterType\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    showHeaderFilterMenuBase(options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        if (column) {\r\n            const groupInterval = filterUtils.getGroupInterval(column);\r\n            const dataSource = that._dataController.dataSource();\r\n            const remoteFiltering = dataSource && dataSource.remoteOperations().filtering;\r\n            const previousOnHidden = options.onHidden;\r\n            extend(options, column, {\r\n                type: groupInterval && groupInterval.length > 1 ? \"tree\" : \"list\",\r\n                remoteFiltering: remoteFiltering,\r\n                onShowing: e => {\r\n                    const dxResizableInstance = e.component.$overlayContent().dxResizable(\"instance\");\r\n                    dxResizableInstance && dxResizableInstance.option(\"onResizeEnd\", (e => {\r\n                        let headerFilterByColumn = this._columnsController.columnOption(options.dataField, \"headerFilter\");\r\n                        headerFilterByColumn = headerFilterByColumn || {};\r\n                        headerFilterByColumn.width = e.width;\r\n                        headerFilterByColumn.height = e.height;\r\n                        this._columnsController.columnOption(options.dataField, \"headerFilter\", headerFilterByColumn, true)\r\n                    }))\r\n                },\r\n                onHidden: () => {\r\n                    null === previousOnHidden || void 0 === previousOnHidden || previousOnHidden();\r\n                    restoreFocus(this)\r\n                }\r\n            });\r\n            options.dataSource = that.getDataSource(options);\r\n            if (options.isFilterBuilder) {\r\n                options.dataSource.filter = null;\r\n                options.alignment = \"right\"\r\n            }\r\n            that._headerFilterView.showHeaderFilterMenu(options.columnElement, options)\r\n        }\r\n    }\r\n    hideHeaderFilterMenu() {\r\n        this._headerFilterView.hideHeaderFilterMenu()\r\n    }\r\n}\r\nconst columnHeadersView = Base => class extends(headerFilterMixin(Base)) {\r\n    _renderCellContent($cell, options) {\r\n        const that = this;\r\n        let $headerFilterIndicator;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        if (!column.command && allowHeaderFiltering(column) && that.option(\"headerFilter.visible\") && \"header\" === options.rowType) {\r\n            $headerFilterIndicator = that._applyColumnState({\r\n                name: \"headerFilter\",\r\n                rootElement: $cell,\r\n                column: column,\r\n                showColumnLines: that.option(\"showColumnLines\")\r\n            });\r\n            $headerFilterIndicator && that._subscribeToIndicatorEvent($headerFilterIndicator, column, \"headerFilter\")\r\n        }\r\n        super._renderCellContent.apply(this, arguments)\r\n    }\r\n    _subscribeToIndicatorEvent($indicator, column, indicatorName) {\r\n        if (\"headerFilter\" === indicatorName) {\r\n            eventsEngine.on($indicator, clickEventName, this.createAction((e => {\r\n                e.event.stopPropagation();\r\n                saveFocusedElementInfo($indicator, this);\r\n                this._headerFilterController.showHeaderFilterMenu(column.index, false)\r\n            })))\r\n        }\r\n    }\r\n    _updateIndicator($cell, column, indicatorName) {\r\n        const $indicator = super._updateIndicator($cell, column, indicatorName);\r\n        $indicator && this._subscribeToIndicatorEvent($indicator, column, indicatorName)\r\n    }\r\n    _updateHeaderFilterIndicators() {\r\n        if (this.option(\"headerFilter.visible\")) {\r\n            this._updateIndicators(\"headerFilter\")\r\n        }\r\n    }\r\n    _needUpdateFilterIndicators() {\r\n        return true\r\n    }\r\n    _columnOptionChanged(e) {\r\n        const {\r\n            optionNames: optionNames\r\n        } = e;\r\n        const isFilterRowAndHeaderFilterValuesChanged = gridCoreUtils.checkChanges(optionNames, [\"filterValues\", \"filterValue\"]);\r\n        const isHeaderFilterValuesAndTypeChanged = gridCoreUtils.checkChanges(optionNames, [\"filterValues\", \"filterType\"]);\r\n        const shouldUpdateFilterIndicators = (isFilterRowAndHeaderFilterValuesChanged || isHeaderFilterValuesAndTypeChanged) && this._needUpdateFilterIndicators();\r\n        if (shouldUpdateFilterIndicators) {\r\n            this._updateHeaderFilterIndicators()\r\n        }\r\n        if (!isHeaderFilterValuesAndTypeChanged) {\r\n            super._columnOptionChanged(e)\r\n        }\r\n    }\r\n};\r\nconst headerPanel = Base => class extends(headerFilterMixin(Base)) {\r\n    _createGroupPanelItem($rootElement, groupColumn) {\r\n        const that = this;\r\n        const $item = super._createGroupPanelItem.apply(that, arguments);\r\n        let $headerFilterIndicator;\r\n        if (!groupColumn.command && allowHeaderFiltering(groupColumn) && that.option(\"headerFilter.visible\")) {\r\n            $headerFilterIndicator = that._applyColumnState({\r\n                name: \"headerFilter\",\r\n                rootElement: $item,\r\n                column: {\r\n                    alignment: getDefaultAlignment(that.option(\"rtlEnabled\")),\r\n                    filterValues: groupColumn.filterValues,\r\n                    allowHeaderFiltering: true,\r\n                    caption: groupColumn.caption\r\n                },\r\n                showColumnLines: true\r\n            });\r\n            $headerFilterIndicator && eventsEngine.on($headerFilterIndicator, clickEventName, that.createAction((e => {\r\n                const {\r\n                    event: event\r\n                } = e;\r\n                event.stopPropagation();\r\n                this._headerFilterController.showHeaderFilterMenu(groupColumn.index, true)\r\n            })))\r\n        }\r\n        return $item\r\n    }\r\n};\r\nexport function invertFilterExpression(filter) {\r\n    return [\"!\", filter]\r\n}\r\nconst data = Base => class extends Base {\r\n    skipCalculateColumnFilters() {\r\n        return false\r\n    }\r\n    _calculateAdditionalFilter() {\r\n        if (this.skipCalculateColumnFilters()) {\r\n            return super._calculateAdditionalFilter()\r\n        }\r\n        const filters = [super._calculateAdditionalFilter()];\r\n        const columns = this._columnsController.getVisibleColumns(null, true);\r\n        const headerFilterController = this._headerFilterController;\r\n        const currentColumn = headerFilterController.getCurrentColumn();\r\n        each(columns, ((_, column) => {\r\n            let filter;\r\n            if (currentColumn && currentColumn.index === column.index) {\r\n                return\r\n            }\r\n            if (allowHeaderFiltering(column) && column.calculateFilterExpression && Array.isArray(column.filterValues) && column.filterValues.length) {\r\n                let filterValues = [];\r\n                each(column.filterValues, ((_, filterValue) => {\r\n                    if (Array.isArray(filterValue)) {\r\n                        filter = filterValue\r\n                    } else {\r\n                        if (column.deserializeValue && !gridCoreUtils.isDateType(column.dataType) && \"number\" !== column.dataType) {\r\n                            filterValue = column.deserializeValue(filterValue)\r\n                        }\r\n                        filter = column.createFilterExpression(filterValue, \"=\", \"headerFilter\")\r\n                    }\r\n                    if (filter) {\r\n                        filter.columnIndex = column.index\r\n                    }\r\n                    filterValues.push(filter)\r\n                }));\r\n                filterValues = gridCoreUtils.combineFilters(filterValues, \"or\");\r\n                filters.push(\"exclude\" === column.filterType ? [\"!\", filterValues] : filterValues)\r\n            }\r\n        }));\r\n        return gridCoreUtils.combineFilters(filters)\r\n    }\r\n};\r\nexport const headerFilterModule = {\r\n    defaultOptions: () => ({\r\n        syncLookupFilterValues: true,\r\n        headerFilter: {\r\n            visible: false,\r\n            width: 252,\r\n            height: 325,\r\n            allowSelectAll: true,\r\n            search: {\r\n                enabled: false,\r\n                timeout: 500,\r\n                mode: \"contains\",\r\n                editorOptions: {}\r\n            },\r\n            texts: {\r\n                emptyValue: messageLocalization.format(\"dxDataGrid-headerFilterEmptyValue\"),\r\n                ok: messageLocalization.format(\"dxDataGrid-headerFilterOK\"),\r\n                cancel: messageLocalization.format(\"dxDataGrid-headerFilterCancel\")\r\n            }\r\n        }\r\n    }),\r\n    controllers: {\r\n        headerFilter: HeaderFilterController\r\n    },\r\n    views: {\r\n        headerFilterView: HeaderFilterView\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: data\r\n        },\r\n        views: {\r\n            columnHeadersView: columnHeadersView,\r\n            headerPanel: headerPanel\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}