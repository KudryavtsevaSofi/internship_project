{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/m_sortable.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { fx } from \"../common/core/animation\";\nimport { resetPosition } from \"../common/core/animation/translator\";\nimport eventsEngine from \"../common/core/events/core/events_engine\";\nimport registerComponent from \"../core/component_registrator\";\nimport { getPublicElement } from \"../core/element\";\nimport $ from \"../core/renderer\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport { extend } from \"../core/utils/extend\";\nimport { getBoundingRect } from \"../core/utils/position\";\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth } from \"../core/utils/size\";\nimport { getWindow } from \"../core/utils/window\";\nimport Draggable from \"./m_draggable\";\nimport { isDefined } from \"../core/utils/type\";\nconst window = getWindow();\nconst SORTABLE = \"dxSortable\";\nconst PLACEHOLDER_CLASS = \"placeholder\";\nconst CLONE_CLASS = \"clone\";\nconst isElementVisible = itemElement => $(itemElement).is(\":visible\");\nconst animate = (element, config) => {\n  var _config$to, _config$to2;\n  if (!element) {\n    return;\n  }\n  const left = (null === (_config$to = config.to) || void 0 === _config$to ? void 0 : _config$to.left) || 0;\n  const top = (null === (_config$to2 = config.to) || void 0 === _config$to2 ? void 0 : _config$to2.top) || 0;\n  element.style.transform = `translate(${left}px,${top}px)`;\n  element.style.transition = fx.off ? \"\" : `transform ${config.duration}ms ${config.easing}`;\n};\nconst stopAnimation = element => {\n  if (!element) {\n    return;\n  }\n  element.style.transform = \"\";\n  element.style.transition = \"\";\n};\nfunction getScrollableBoundary($scrollable) {\n  const offset = $scrollable.offset();\n  const {\n    style: style\n  } = $scrollable[0];\n  const paddingLeft = parseFloat(style.paddingLeft) || 0;\n  const paddingRight = parseFloat(style.paddingRight) || 0;\n  const paddingTop = parseFloat(style.paddingTop) || 0;\n  const width = $scrollable[0].clientWidth - (paddingLeft + paddingRight);\n  const height = getHeight($scrollable);\n  const left = offset.left + paddingLeft;\n  const top = offset.top + paddingTop;\n  return {\n    left: left,\n    right: left + width,\n    top: top,\n    bottom: top + height\n  };\n}\nclass Sortable extends Draggable {\n  _init() {\n    super._init();\n    this._sourceScrollHandler = this._handleSourceScroll.bind(this);\n    this._sourceScrollableInfo = null;\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      clone: true,\n      filter: \"> *\",\n      itemOrientation: \"vertical\",\n      dropFeedbackMode: \"push\",\n      allowDropInsideItem: false,\n      allowReordering: true,\n      moveItemOnDrop: false,\n      onDragChange: null,\n      onAdd: null,\n      onRemove: null,\n      onReorder: null,\n      onPlaceholderPrepared: null,\n      animation: {\n        type: \"slide\",\n        duration: 300,\n        easing: \"ease\"\n      },\n      fromIndex: null,\n      toIndex: null,\n      dropInsideItem: false,\n      itemPoints: null,\n      fromIndexOffset: 0,\n      offset: 0,\n      autoUpdate: false,\n      draggableElementSize: 0\n    });\n  }\n  reset() {\n    this.option({\n      dropInsideItem: false,\n      toIndex: null,\n      fromIndex: null,\n      itemPoints: null,\n      fromIndexOffset: 0,\n      draggableElementSize: 0\n    });\n    if (this._$placeholderElement) {\n      this._$placeholderElement.remove();\n    }\n    this._$placeholderElement = null;\n    if (!this._isIndicateMode() && this._$modifiedItem) {\n      this._$modifiedItem.css(\"marginBottom\", this._modifiedItemMargin);\n      this._$modifiedItem = null;\n    }\n  }\n  _getPrevVisibleItem(items, index) {\n    return items.slice(0, index).reverse().filter(isElementVisible)[0];\n  }\n  _dragStartHandler(e) {\n    super._dragStartHandler.apply(this, arguments);\n    if (true === e.cancel) {\n      return;\n    }\n    const $sourceElement = this._getSourceElement();\n    this._updateItemPoints();\n    this._subscribeToSourceScroll(e);\n    this.option(\"fromIndex\", this._getElementIndex($sourceElement));\n    this.option(\"fromIndexOffset\", this.option(\"offset\"));\n  }\n  _subscribeToSourceScroll(e) {\n    const $scrollable = this._getScrollable($(e.target));\n    if ($scrollable) {\n      this._sourceScrollableInfo = {\n        element: $scrollable,\n        scrollLeft: $scrollable.scrollLeft(),\n        scrollTop: $scrollable.scrollTop()\n      };\n      eventsEngine.off($scrollable, \"scroll\", this._sourceScrollHandler);\n      eventsEngine.on($scrollable, \"scroll\", this._sourceScrollHandler);\n    }\n  }\n  _unsubscribeFromSourceScroll() {\n    if (this._sourceScrollableInfo) {\n      eventsEngine.off(this._sourceScrollableInfo.element, \"scroll\", this._sourceScrollHandler);\n      this._sourceScrollableInfo = null;\n    }\n  }\n  _handleSourceScroll(e) {\n    const sourceScrollableInfo = this._sourceScrollableInfo;\n    if (sourceScrollableInfo) {\n      [\"scrollLeft\", \"scrollTop\"].forEach(scrollProp => {\n        if (e.target[scrollProp] !== sourceScrollableInfo[scrollProp]) {\n          const scrollBy = e.target[scrollProp] - sourceScrollableInfo[scrollProp];\n          this._correctItemPoints(scrollBy);\n          this._movePlaceholder();\n          sourceScrollableInfo[scrollProp] = e.target[scrollProp];\n        }\n      });\n    }\n  }\n  _dragEnterHandler(e) {\n    super._dragEnterHandler.apply(this, arguments);\n    if (this === this._getSourceDraggable()) {\n      return;\n    }\n    this._subscribeToSourceScroll(e);\n    this._updateItemPoints();\n    this.option(\"fromIndex\", -1);\n    if (!this._isIndicateMode()) {\n      const itemPoints = this.option(\"itemPoints\");\n      const lastItemPoint = itemPoints[itemPoints.length - 1];\n      if (lastItemPoint) {\n        const $element = this.$element();\n        const $sourceElement = this._getSourceElement();\n        const isVertical = this._isVerticalOrientation();\n        const sourceElementSize = isVertical ? getOuterHeight($sourceElement, true) : getOuterWidth($sourceElement, true);\n        const scrollSize = $element.get(0)[isVertical ? \"scrollHeight\" : \"scrollWidth\"];\n        const scrollPosition = $element.get(0)[isVertical ? \"scrollTop\" : \"scrollLeft\"];\n        const positionProp = isVertical ? \"top\" : \"left\";\n        const lastPointPosition = lastItemPoint[positionProp];\n        const elementPosition = $element.offset()[positionProp];\n        const freeSize = elementPosition + scrollSize - scrollPosition - lastPointPosition;\n        if (freeSize < sourceElementSize) {\n          if (isVertical) {\n            const items = this._getItems();\n            const $lastItem = $(this._getPrevVisibleItem(items));\n            this._$modifiedItem = $lastItem;\n            this._modifiedItemMargin = $lastItem.get(0).style.marginBottom;\n            $lastItem.css(\"marginBottom\", sourceElementSize - freeSize);\n            const $sortable = $lastItem.closest(\".dx-sortable\");\n            const sortable = $sortable.data(\"dxScrollable\") || $sortable.data(\"dxScrollView\");\n            null === sortable || void 0 === sortable || sortable.update();\n          }\n        }\n      }\n    }\n  }\n  _dragLeaveHandler() {\n    super._dragLeaveHandler.apply(this, arguments);\n    if (this !== this._getSourceDraggable()) {\n      this._unsubscribeFromSourceScroll();\n    }\n  }\n  dragEnter() {\n    if (this !== this._getTargetDraggable()) {\n      this.option(\"toIndex\", -1);\n    }\n  }\n  dragLeave() {\n    if (this !== this._getTargetDraggable()) {\n      this.option(\"toIndex\", this.option(\"fromIndex\"));\n    }\n  }\n  _allowDrop(event) {\n    const targetDraggable = this._getTargetDraggable();\n    const $targetDraggable = targetDraggable.$element();\n    const $scrollable = this._getScrollable($targetDraggable);\n    if ($scrollable) {\n      const {\n        left: left,\n        right: right,\n        top: top,\n        bottom: bottom\n      } = getScrollableBoundary($scrollable);\n      const toIndex = this.option(\"toIndex\");\n      const itemPoints = this.option(\"itemPoints\");\n      const itemPoint = null === itemPoints || void 0 === itemPoints ? void 0 : itemPoints.filter(item => item.index === toIndex)[0];\n      if (itemPoint && void 0 !== itemPoint.top) {\n        const isVertical = this._isVerticalOrientation();\n        if (isVertical) {\n          return top <= Math.ceil(itemPoint.top) && Math.floor(itemPoint.top) <= bottom;\n        }\n        return left <= Math.ceil(itemPoint.left) && Math.floor(itemPoint.left) <= right;\n      }\n    }\n    return true;\n  }\n  dragEnd(sourceEvent) {\n    this._unsubscribeFromSourceScroll();\n    const $sourceElement = this._getSourceElement();\n    const sourceDraggable = this._getSourceDraggable();\n    const isSourceDraggable = sourceDraggable.NAME !== this.NAME;\n    const toIndex = this.option(\"toIndex\");\n    const {\n      event: event\n    } = sourceEvent;\n    const allowDrop = this._allowDrop(event);\n    if (null !== toIndex && toIndex >= 0 && allowDrop) {\n      let cancelAdd;\n      let cancelRemove;\n      if (sourceDraggable !== this) {\n        cancelAdd = this._fireAddEvent(event);\n        if (!cancelAdd) {\n          cancelRemove = this._fireRemoveEvent(event);\n        }\n      }\n      if (isSourceDraggable) {\n        resetPosition($sourceElement);\n      }\n      if (this.option(\"moveItemOnDrop\")) {\n        !cancelAdd && this._moveItem($sourceElement, toIndex, cancelRemove);\n      }\n      if (sourceDraggable === this) {\n        return this._fireReorderEvent(event);\n      }\n    }\n    return Deferred().resolve();\n  }\n  dragMove(e) {\n    const itemPoints = this.option(\"itemPoints\");\n    if (!itemPoints) {\n      return;\n    }\n    const isVertical = this._isVerticalOrientation();\n    const axisName = isVertical ? \"top\" : \"left\";\n    const cursorPosition = isVertical ? e.pageY : e.pageX;\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    let itemPoint;\n    for (let i = itemPoints.length - 1; i >= 0; i--) {\n      const centerPosition = itemPoints[i + 1] && (itemPoints[i][axisName] + itemPoints[i + 1][axisName]) / 2;\n      if ((!isVertical && rtlEnabled ? cursorPosition > centerPosition : centerPosition > cursorPosition) || void 0 === centerPosition) {\n        itemPoint = itemPoints[i];\n      } else {\n        break;\n      }\n    }\n    if (itemPoint) {\n      this._updatePlaceholderPosition(e, itemPoint);\n      if (this._verticalScrollHelper.isScrolling() && this._isIndicateMode()) {\n        this._movePlaceholder();\n      }\n    }\n  }\n  _isIndicateMode() {\n    return \"indicate\" === this.option(\"dropFeedbackMode\") || this.option(\"allowDropInsideItem\");\n  }\n  _createPlaceholder() {\n    let $placeholderContainer;\n    if (this._isIndicateMode()) {\n      $placeholderContainer = $(\"<div>\").addClass(this._addWidgetPrefix(\"placeholder\")).insertBefore(this._getSourceDraggable()._$dragElement);\n    }\n    this._$placeholderElement = $placeholderContainer;\n    return $placeholderContainer;\n  }\n  _getItems() {\n    const itemsSelector = this._getItemsSelector();\n    return this._$content().find(itemsSelector).not(`.${this._addWidgetPrefix(\"placeholder\")}`).not(`.${this._addWidgetPrefix(\"clone\")}`).toArray();\n  }\n  _allowReordering() {\n    const sourceDraggable = this._getSourceDraggable();\n    const targetDraggable = this._getTargetDraggable();\n    return sourceDraggable !== targetDraggable || this.option(\"allowReordering\");\n  }\n  _isValidPoint(visibleIndex, draggableVisibleIndex, dropInsideItem) {\n    const allowDropInsideItem = this.option(\"allowDropInsideItem\");\n    const allowReordering = dropInsideItem || this._allowReordering();\n    if (!allowReordering && (0 !== visibleIndex || !allowDropInsideItem)) {\n      return false;\n    }\n    if (!this._isIndicateMode()) {\n      return true;\n    }\n    return -1 === draggableVisibleIndex || visibleIndex !== draggableVisibleIndex && (dropInsideItem || visibleIndex !== draggableVisibleIndex + 1);\n  }\n  _getItemPoints() {\n    const that = this;\n    let result = [];\n    let $item;\n    let offset;\n    let itemWidth;\n    const {\n      rtlEnabled: rtlEnabled\n    } = that.option();\n    const isVertical = that._isVerticalOrientation();\n    const itemElements = that._getItems();\n    const visibleItemElements = itemElements.filter(isElementVisible);\n    const visibleItemCount = visibleItemElements.length;\n    const $draggableItem = this._getDraggableElement();\n    const draggableVisibleIndex = visibleItemElements.indexOf($draggableItem.get(0));\n    if (visibleItemCount) {\n      for (let i = 0; i <= visibleItemCount; i++) {\n        const needCorrectLeftPosition = !isVertical && rtlEnabled ^ i === visibleItemCount;\n        const needCorrectTopPosition = isVertical && i === visibleItemCount;\n        if (i < visibleItemCount) {\n          $item = $(visibleItemElements[i]);\n          offset = $item.offset();\n          itemWidth = getOuterWidth($item);\n        }\n        result.push({\n          dropInsideItem: false,\n          left: offset.left + (needCorrectLeftPosition ? itemWidth : 0),\n          top: offset.top + (needCorrectTopPosition ? result[i - 1].height : 0),\n          index: i === visibleItemCount ? itemElements.length : itemElements.indexOf($item.get(0)),\n          $item: $item,\n          width: getOuterWidth($item),\n          height: getOuterHeight($item),\n          isValid: that._isValidPoint(i, draggableVisibleIndex)\n        });\n      }\n      if (this.option(\"allowDropInsideItem\")) {\n        const points = result;\n        result = [];\n        for (let i = 0; i < points.length; i++) {\n          result.push(points[i]);\n          if (points[i + 1]) {\n            result.push(extend({}, points[i], {\n              dropInsideItem: true,\n              top: Math.floor((points[i].top + points[i + 1].top) / 2),\n              left: Math.floor((points[i].left + points[i + 1].left) / 2),\n              isValid: this._isValidPoint(i, draggableVisibleIndex, true)\n            }));\n          }\n        }\n      }\n    } else {\n      result.push({\n        dropInsideItem: false,\n        index: 0,\n        isValid: true\n      });\n    }\n    return result;\n  }\n  _updateItemPoints(forceUpdate) {\n    if (forceUpdate || this.option(\"autoUpdate\") || !this.option(\"itemPoints\")) {\n      this.option(\"itemPoints\", this._getItemPoints());\n    }\n  }\n  _correctItemPoints(scrollBy) {\n    const itemPoints = this.option(\"itemPoints\");\n    if (scrollBy && itemPoints && !this.option(\"autoUpdate\")) {\n      const isVertical = this._isVerticalOrientation();\n      const positionPropName = isVertical ? \"top\" : \"left\";\n      itemPoints.forEach(itemPoint => {\n        itemPoint[positionPropName] -= scrollBy;\n      });\n    }\n  }\n  _getElementIndex($itemElement) {\n    return this._getItems().indexOf($itemElement.get(0));\n  }\n  _getDragTemplateArgs($element) {\n    const args = super._getDragTemplateArgs.apply(this, arguments);\n    args.model.fromIndex = this._getElementIndex($element);\n    return args;\n  }\n  _togglePlaceholder(value) {\n    var _this$_$placeholderEl;\n    null === (_this$_$placeholderEl = this._$placeholderElement) || void 0 === _this$_$placeholderEl || _this$_$placeholderEl.toggle(value);\n  }\n  _isVerticalOrientation() {\n    const {\n      itemOrientation: itemOrientation\n    } = this.option();\n    return \"vertical\" === itemOrientation;\n  }\n  _normalizeToIndex(toIndex, skipOffsetting) {\n    const isAnotherDraggable = this._getSourceDraggable() !== this._getTargetDraggable();\n    const fromIndex = this._getActualFromIndex();\n    if (null === toIndex) {\n      return fromIndex;\n    }\n    return Math.max(isAnotherDraggable || fromIndex >= toIndex || skipOffsetting ? toIndex : toIndex - 1, 0);\n  }\n  _updatePlaceholderPosition(e, itemPoint) {\n    const sourceDraggable = this._getSourceDraggable();\n    const toIndex = this._normalizeToIndex(itemPoint.index, itemPoint.dropInsideItem);\n    const eventArgs = extend(this._getEventArgs(e), {\n      toIndex: toIndex,\n      dropInsideItem: itemPoint.dropInsideItem\n    });\n    itemPoint.isValid && this._getAction(\"onDragChange\")(eventArgs);\n    if (eventArgs.cancel || !itemPoint.isValid) {\n      if (!itemPoint.isValid) {\n        this.option({\n          dropInsideItem: false,\n          toIndex: null\n        });\n      }\n      return;\n    }\n    this.option({\n      dropInsideItem: itemPoint.dropInsideItem,\n      toIndex: itemPoint.index\n    });\n    this._getAction(\"onPlaceholderPrepared\")(extend(this._getEventArgs(e), {\n      placeholderElement: getPublicElement(this._$placeholderElement),\n      dragElement: getPublicElement(sourceDraggable._$dragElement)\n    }));\n    this._updateItemPoints();\n  }\n  _makeWidthCorrection($item, width) {\n    this._$scrollable = this._getScrollable($item);\n    if (this._$scrollable) {\n      const scrollableWidth = getWidth(this._$scrollable);\n      const overflowLeft = this._$scrollable.offset().left - $item.offset().left;\n      const overflowRight = getOuterWidth($item) - overflowLeft - scrollableWidth;\n      if (overflowLeft > 0) {\n        width -= overflowLeft;\n      }\n      if (overflowRight > 0) {\n        width -= overflowRight;\n      }\n    }\n    return width;\n  }\n  _updatePlaceholderSizes($placeholderElement, itemElement) {\n    const dropInsideItem = this.option(\"dropInsideItem\");\n    const $item = $(itemElement);\n    const isVertical = this._isVerticalOrientation();\n    let width = \"\";\n    let height = \"\";\n    $placeholderElement.toggleClass(this._addWidgetPrefix(\"placeholder-inside\"), dropInsideItem);\n    if (isVertical || dropInsideItem) {\n      width = getOuterWidth($item);\n    }\n    if (!isVertical || dropInsideItem) {\n      height = getOuterHeight($item);\n    }\n    width = this._makeWidthCorrection($item, width);\n    $placeholderElement.css({\n      width: width,\n      height: height\n    });\n  }\n  _moveItem($itemElement, index, cancelRemove) {\n    let $prevTargetItemElement;\n    const $itemElements = this._getItems();\n    const $targetItemElement = $itemElements[index];\n    const sourceDraggable = this._getSourceDraggable();\n    if (cancelRemove) {\n      $itemElement = $itemElement.clone();\n      sourceDraggable._toggleDragSourceClass(false, $itemElement);\n    }\n    if (!$targetItemElement) {\n      $prevTargetItemElement = $itemElements[index - 1];\n    }\n    this._moveItemCore($itemElement, $targetItemElement, $prevTargetItemElement);\n  }\n  _moveItemCore($targetItem, item, prevItem) {\n    if (!item && !prevItem) {\n      $targetItem.appendTo(this.$element());\n    } else if (prevItem) {\n      $targetItem.insertAfter($(prevItem));\n    } else {\n      $targetItem.insertBefore($(item));\n    }\n  }\n  _getDragStartArgs(e, $itemElement) {\n    return extend(super._getDragStartArgs.apply(this, arguments), {\n      fromIndex: this._getElementIndex($itemElement)\n    });\n  }\n  _getEventArgs(e) {\n    const sourceDraggable = this._getSourceDraggable();\n    const targetDraggable = this._getTargetDraggable();\n    const dropInsideItem = targetDraggable.option(\"dropInsideItem\");\n    return extend(super._getEventArgs.apply(this, arguments), {\n      fromIndex: sourceDraggable.option(\"fromIndex\"),\n      toIndex: this._normalizeToIndex(targetDraggable.option(\"toIndex\"), dropInsideItem),\n      dropInsideItem: dropInsideItem\n    });\n  }\n  _optionChanged(args) {\n    const {\n      name: name\n    } = args;\n    switch (name) {\n      case \"onDragChange\":\n      case \"onPlaceholderPrepared\":\n      case \"onAdd\":\n      case \"onRemove\":\n      case \"onReorder\":\n        this[`_${name}Action`] = this._createActionByOption(name);\n        break;\n      case \"itemOrientation\":\n      case \"allowDropInsideItem\":\n      case \"moveItemOnDrop\":\n      case \"dropFeedbackMode\":\n      case \"itemPoints\":\n      case \"animation\":\n      case \"allowReordering\":\n      case \"fromIndexOffset\":\n      case \"offset\":\n      case \"draggableElementSize\":\n      case \"autoUpdate\":\n        break;\n      case \"fromIndex\":\n        [false, true].forEach(isDragSource => {\n          const fromIndex = isDragSource ? args.value : args.previousValue;\n          if (null !== fromIndex) {\n            const $fromElement = $(this._getItems()[fromIndex]);\n            this._toggleDragSourceClass(isDragSource, $fromElement);\n          }\n        });\n        break;\n      case \"dropInsideItem\":\n        this._optionChangedDropInsideItem(args);\n        break;\n      case \"toIndex\":\n        this._optionChangedToIndex(args);\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _optionChangedDropInsideItem() {\n    if (this._isIndicateMode() && this._$placeholderElement) {\n      this._movePlaceholder();\n    }\n  }\n  _isPositionVisible(position) {\n    const $element = this.$element();\n    let scrollContainer;\n    if (\"hidden\" !== $element.css(\"overflow\")) {\n      scrollContainer = $element.get(0);\n    } else {\n      $element.parents().each(function () {\n        if (\"visible\" !== $(this).css(\"overflow\")) {\n          scrollContainer = this;\n          return false;\n        }\n        return;\n      });\n    }\n    if (scrollContainer) {\n      const clientRect = getBoundingRect(scrollContainer);\n      const isVerticalOrientation = this._isVerticalOrientation();\n      const start = isVerticalOrientation ? \"top\" : \"left\";\n      const end = isVerticalOrientation ? \"bottom\" : \"right\";\n      const pageOffset = isVerticalOrientation ? window.pageYOffset : window.pageXOffset;\n      if (position[start] < clientRect[start] + pageOffset || position[start] > clientRect[end] + pageOffset) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _optionChangedToIndex(args) {\n    const toIndex = args.value;\n    if (this._isIndicateMode()) {\n      const showPlaceholder = null !== toIndex && toIndex >= 0;\n      this._togglePlaceholder(showPlaceholder);\n      if (showPlaceholder) {\n        this._movePlaceholder();\n      }\n    } else {\n      this._moveItems(args.previousValue, args.value, args.fullUpdate);\n    }\n  }\n  update() {\n    if (null === this.option(\"fromIndex\") && null === this.option(\"toIndex\")) {\n      return;\n    }\n    this._updateItemPoints(true);\n    this._updateDragSourceClass();\n    const toIndex = this.option(\"toIndex\");\n    this._optionChangedToIndex({\n      value: toIndex,\n      fullUpdate: true\n    });\n  }\n  _updateDragSourceClass() {\n    const fromIndex = this._getActualFromIndex();\n    const $fromElement = $(this._getItems()[fromIndex]);\n    if ($fromElement.length) {\n      this._$sourceElement = $fromElement;\n      this._toggleDragSourceClass(true, $fromElement);\n    }\n  }\n  _makeLeftCorrection(left) {\n    const $scrollable = this._$scrollable;\n    if ($scrollable && this._isVerticalOrientation()) {\n      const overflowLeft = $scrollable.offset().left - left;\n      if (overflowLeft > 0) {\n        left += overflowLeft;\n      }\n    }\n    return left;\n  }\n  _movePlaceholder() {\n    const that = this;\n    const $placeholderElement = that._$placeholderElement || that._createPlaceholder();\n    if (!$placeholderElement) {\n      return;\n    }\n    const items = that._getItems();\n    const toIndex = that.option(\"toIndex\");\n    const isVerticalOrientation = that._isVerticalOrientation();\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    const dropInsideItem = that.option(\"dropInsideItem\");\n    let position = null;\n    let itemElement = items[toIndex];\n    if (itemElement) {\n      const $itemElement = $(itemElement);\n      position = $itemElement.offset();\n      if (!isVerticalOrientation && rtlEnabled && !dropInsideItem) {\n        position.left += getOuterWidth($itemElement, true);\n      }\n    } else {\n      const prevVisibleItemElement = itemElement = this._getPrevVisibleItem(items, toIndex);\n      if (prevVisibleItemElement) {\n        position = $(prevVisibleItemElement).offset();\n        if (isVerticalOrientation) {\n          position.top += getOuterHeight(prevVisibleItemElement, true);\n        } else if (!rtlEnabled) {\n          position.left += getOuterWidth(prevVisibleItemElement, true);\n        }\n      }\n    }\n    that._updatePlaceholderSizes($placeholderElement, itemElement);\n    if (position && !that._isPositionVisible(position)) {\n      position = null;\n    }\n    if (position) {\n      const isLastVerticalPosition = isVerticalOrientation && toIndex === items.length;\n      const outerPlaceholderHeight = getOuterHeight($placeholderElement);\n      position.left = that._makeLeftCorrection(position.left);\n      position.top = isLastVerticalPosition && position.top >= outerPlaceholderHeight ? position.top - outerPlaceholderHeight : position.top;\n      that._move(position, $placeholderElement);\n    }\n    $placeholderElement.toggle(!!position);\n  }\n  _getPositions(items, elementSize, fromIndex, toIndex) {\n    const positions = [];\n    for (let i = 0; i < items.length; i++) {\n      let position = 0;\n      if (null === toIndex || null === fromIndex) {\n        positions.push(position);\n        continue;\n      }\n      if (-1 === fromIndex) {\n        if (i >= toIndex) {\n          position = elementSize;\n        }\n      } else if (-1 === toIndex) {\n        if (i > fromIndex) {\n          position = -elementSize;\n        }\n      } else if (fromIndex < toIndex) {\n        if (i > fromIndex && i < toIndex) {\n          position = -elementSize;\n        }\n      } else if (fromIndex > toIndex) {\n        if (i >= toIndex && i < fromIndex) {\n          position = elementSize;\n        }\n      }\n      positions.push(position);\n    }\n    return positions;\n  }\n  _getDraggableElementSize(isVerticalOrientation) {\n    const $draggableItem = this._getDraggableElement();\n    let size = this.option(\"draggableElementSize\");\n    if (!size) {\n      size = isVerticalOrientation ? (getOuterHeight($draggableItem) + getOuterHeight($draggableItem, true)) / 2 : (getOuterWidth($draggableItem) + getOuterWidth($draggableItem, true)) / 2;\n      if (!this.option(\"autoUpdate\")) {\n        this.option(\"draggableElementSize\", size);\n      }\n    }\n    return size;\n  }\n  _getActualFromIndex() {\n    const {\n      fromIndex: fromIndex,\n      fromIndexOffset: fromIndexOffset,\n      offset: offset\n    } = this.option();\n    return null == fromIndex ? null : fromIndex + fromIndexOffset - offset;\n  }\n  _moveItems(prevToIndex, toIndex, fullUpdate) {\n    const fromIndex = this._getActualFromIndex();\n    const isVerticalOrientation = this._isVerticalOrientation();\n    const positionPropName = isVerticalOrientation ? \"top\" : \"left\";\n    const elementSize = this._getDraggableElementSize(isVerticalOrientation);\n    const items = this._getItems();\n    const prevPositions = this._getPositions(items, elementSize, fromIndex, prevToIndex);\n    const positions = this._getPositions(items, elementSize, fromIndex, toIndex);\n    const animationConfig = this.option(\"animation\");\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    for (let i = 0; i < items.length; i++) {\n      const itemElement = items[i];\n      const prevPosition = prevPositions[i];\n      const position = positions[i];\n      if (null === toIndex || null === fromIndex) {\n        stopAnimation(itemElement);\n      } else if (prevPosition !== position || fullUpdate && isDefined(position)) {\n        animate(itemElement, extend({}, animationConfig, {\n          to: {\n            [positionPropName]: !isVerticalOrientation && rtlEnabled ? -position : position\n          }\n        }));\n      }\n    }\n  }\n  _toggleDragSourceClass(value, $element) {\n    const $sourceElement = $element || this._$sourceElement;\n    super._toggleDragSourceClass.apply(this, arguments);\n    if (!this._isIndicateMode()) {\n      null === $sourceElement || void 0 === $sourceElement || $sourceElement.toggleClass(this._addWidgetPrefix(\"source-hidden\"), value);\n    }\n  }\n  _dispose() {\n    this.reset();\n    super._dispose();\n  }\n  _fireAddEvent(sourceEvent) {\n    const args = this._getEventArgs(sourceEvent);\n    this._getAction(\"onAdd\")(args);\n    return args.cancel;\n  }\n  _fireRemoveEvent(sourceEvent) {\n    const sourceDraggable = this._getSourceDraggable();\n    const args = this._getEventArgs(sourceEvent);\n    sourceDraggable._getAction(\"onRemove\")(args);\n    return args.cancel;\n  }\n  _fireReorderEvent(sourceEvent) {\n    const args = this._getEventArgs(sourceEvent);\n    this._getAction(\"onReorder\")(args);\n    return args.promise || Deferred().resolve();\n  }\n}\nregisterComponent(SORTABLE, Sortable);\nexport default Sortable;","map":{"version":3,"names":["_extends","fx","resetPosition","eventsEngine","registerComponent","getPublicElement","$","Deferred","extend","getBoundingRect","getHeight","getOuterHeight","getOuterWidth","getWidth","getWindow","Draggable","isDefined","window","SORTABLE","PLACEHOLDER_CLASS","CLONE_CLASS","isElementVisible","itemElement","is","animate","element","config","_config$to","_config$to2","left","to","top","style","transform","transition","off","duration","easing","stopAnimation","getScrollableBoundary","$scrollable","offset","paddingLeft","parseFloat","paddingRight","paddingTop","width","clientWidth","height","right","bottom","Sortable","_init","_sourceScrollHandler","_handleSourceScroll","bind","_sourceScrollableInfo","_getDefaultOptions","clone","filter","itemOrientation","dropFeedbackMode","allowDropInsideItem","allowReordering","moveItemOnDrop","onDragChange","onAdd","onRemove","onReorder","onPlaceholderPrepared","animation","type","fromIndex","toIndex","dropInsideItem","itemPoints","fromIndexOffset","autoUpdate","draggableElementSize","reset","option","_$placeholderElement","remove","_isIndicateMode","_$modifiedItem","css","_modifiedItemMargin","_getPrevVisibleItem","items","index","slice","reverse","_dragStartHandler","e","apply","arguments","cancel","$sourceElement","_getSourceElement","_updateItemPoints","_subscribeToSourceScroll","_getElementIndex","_getScrollable","target","scrollLeft","scrollTop","on","_unsubscribeFromSourceScroll","sourceScrollableInfo","forEach","scrollProp","scrollBy","_correctItemPoints","_movePlaceholder","_dragEnterHandler","_getSourceDraggable","lastItemPoint","length","$element","isVertical","_isVerticalOrientation","sourceElementSize","scrollSize","get","scrollPosition","positionProp","lastPointPosition","elementPosition","freeSize","_getItems","$lastItem","marginBottom","$sortable","closest","sortable","data","update","_dragLeaveHandler","dragEnter","_getTargetDraggable","dragLeave","_allowDrop","event","targetDraggable","$targetDraggable","itemPoint","item","Math","ceil","floor","dragEnd","sourceEvent","sourceDraggable","isSourceDraggable","NAME","allowDrop","cancelAdd","cancelRemove","_fireAddEvent","_fireRemoveEvent","_moveItem","_fireReorderEvent","resolve","dragMove","axisName","cursorPosition","pageY","pageX","rtlEnabled","i","centerPosition","_updatePlaceholderPosition","_verticalScrollHelper","isScrolling","_createPlaceholder","$placeholderContainer","addClass","_addWidgetPrefix","insertBefore","_$dragElement","itemsSelector","_getItemsSelector","_$content","find","not","toArray","_allowReordering","_isValidPoint","visibleIndex","draggableVisibleIndex","_getItemPoints","that","result","$item","itemWidth","itemElements","visibleItemElements","visibleItemCount","$draggableItem","_getDraggableElement","indexOf","needCorrectLeftPosition","needCorrectTopPosition","push","isValid","points","forceUpdate","positionPropName","$itemElement","_getDragTemplateArgs","args","model","_togglePlaceholder","value","_this$_$placeholderEl","toggle","_normalizeToIndex","skipOffsetting","isAnotherDraggable","_getActualFromIndex","max","eventArgs","_getEventArgs","_getAction","placeholderElement","dragElement","_makeWidthCorrection","_$scrollable","scrollableWidth","overflowLeft","overflowRight","_updatePlaceholderSizes","$placeholderElement","toggleClass","$prevTargetItemElement","$itemElements","$targetItemElement","_toggleDragSourceClass","_moveItemCore","$targetItem","prevItem","appendTo","insertAfter","_getDragStartArgs","_optionChanged","name","_createActionByOption","isDragSource","previousValue","$fromElement","_optionChangedDropInsideItem","_optionChangedToIndex","_isPositionVisible","position","scrollContainer","parents","each","clientRect","isVerticalOrientation","start","end","pageOffset","pageYOffset","pageXOffset","showPlaceholder","_moveItems","fullUpdate","_updateDragSourceClass","_$sourceElement","_makeLeftCorrection","prevVisibleItemElement","isLastVerticalPosition","outerPlaceholderHeight","_move","_getPositions","elementSize","positions","_getDraggableElementSize","size","prevToIndex","prevPositions","animationConfig","prevPosition","_dispose","promise"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/m_sortable.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/m_sortable.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    fx\r\n} from \"../common/core/animation\";\r\nimport {\r\n    resetPosition\r\n} from \"../common/core/animation/translator\";\r\nimport eventsEngine from \"../common/core/events/core/events_engine\";\r\nimport registerComponent from \"../core/component_registrator\";\r\nimport {\r\n    getPublicElement\r\n} from \"../core/element\";\r\nimport $ from \"../core/renderer\";\r\nimport {\r\n    Deferred\r\n} from \"../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../core/utils/position\";\r\nimport {\r\n    getHeight,\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    getWidth\r\n} from \"../core/utils/size\";\r\nimport {\r\n    getWindow\r\n} from \"../core/utils/window\";\r\nimport Draggable from \"./m_draggable\";\r\nimport {\r\n    isDefined\r\n} from \"../core/utils/type\";\r\nconst window = getWindow();\r\nconst SORTABLE = \"dxSortable\";\r\nconst PLACEHOLDER_CLASS = \"placeholder\";\r\nconst CLONE_CLASS = \"clone\";\r\nconst isElementVisible = itemElement => $(itemElement).is(\":visible\");\r\nconst animate = (element, config) => {\r\n    var _config$to, _config$to2;\r\n    if (!element) {\r\n        return\r\n    }\r\n    const left = (null === (_config$to = config.to) || void 0 === _config$to ? void 0 : _config$to.left) || 0;\r\n    const top = (null === (_config$to2 = config.to) || void 0 === _config$to2 ? void 0 : _config$to2.top) || 0;\r\n    element.style.transform = `translate(${left}px,${top}px)`;\r\n    element.style.transition = fx.off ? \"\" : `transform ${config.duration}ms ${config.easing}`\r\n};\r\nconst stopAnimation = element => {\r\n    if (!element) {\r\n        return\r\n    }\r\n    element.style.transform = \"\";\r\n    element.style.transition = \"\"\r\n};\r\n\r\nfunction getScrollableBoundary($scrollable) {\r\n    const offset = $scrollable.offset();\r\n    const {\r\n        style: style\r\n    } = $scrollable[0];\r\n    const paddingLeft = parseFloat(style.paddingLeft) || 0;\r\n    const paddingRight = parseFloat(style.paddingRight) || 0;\r\n    const paddingTop = parseFloat(style.paddingTop) || 0;\r\n    const width = $scrollable[0].clientWidth - (paddingLeft + paddingRight);\r\n    const height = getHeight($scrollable);\r\n    const left = offset.left + paddingLeft;\r\n    const top = offset.top + paddingTop;\r\n    return {\r\n        left: left,\r\n        right: left + width,\r\n        top: top,\r\n        bottom: top + height\r\n    }\r\n}\r\nclass Sortable extends Draggable {\r\n    _init() {\r\n        super._init();\r\n        this._sourceScrollHandler = this._handleSourceScroll.bind(this);\r\n        this._sourceScrollableInfo = null\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            clone: true,\r\n            filter: \"> *\",\r\n            itemOrientation: \"vertical\",\r\n            dropFeedbackMode: \"push\",\r\n            allowDropInsideItem: false,\r\n            allowReordering: true,\r\n            moveItemOnDrop: false,\r\n            onDragChange: null,\r\n            onAdd: null,\r\n            onRemove: null,\r\n            onReorder: null,\r\n            onPlaceholderPrepared: null,\r\n            animation: {\r\n                type: \"slide\",\r\n                duration: 300,\r\n                easing: \"ease\"\r\n            },\r\n            fromIndex: null,\r\n            toIndex: null,\r\n            dropInsideItem: false,\r\n            itemPoints: null,\r\n            fromIndexOffset: 0,\r\n            offset: 0,\r\n            autoUpdate: false,\r\n            draggableElementSize: 0\r\n        })\r\n    }\r\n    reset() {\r\n        this.option({\r\n            dropInsideItem: false,\r\n            toIndex: null,\r\n            fromIndex: null,\r\n            itemPoints: null,\r\n            fromIndexOffset: 0,\r\n            draggableElementSize: 0\r\n        });\r\n        if (this._$placeholderElement) {\r\n            this._$placeholderElement.remove()\r\n        }\r\n        this._$placeholderElement = null;\r\n        if (!this._isIndicateMode() && this._$modifiedItem) {\r\n            this._$modifiedItem.css(\"marginBottom\", this._modifiedItemMargin);\r\n            this._$modifiedItem = null\r\n        }\r\n    }\r\n    _getPrevVisibleItem(items, index) {\r\n        return items.slice(0, index).reverse().filter(isElementVisible)[0]\r\n    }\r\n    _dragStartHandler(e) {\r\n        super._dragStartHandler.apply(this, arguments);\r\n        if (true === e.cancel) {\r\n            return\r\n        }\r\n        const $sourceElement = this._getSourceElement();\r\n        this._updateItemPoints();\r\n        this._subscribeToSourceScroll(e);\r\n        this.option(\"fromIndex\", this._getElementIndex($sourceElement));\r\n        this.option(\"fromIndexOffset\", this.option(\"offset\"))\r\n    }\r\n    _subscribeToSourceScroll(e) {\r\n        const $scrollable = this._getScrollable($(e.target));\r\n        if ($scrollable) {\r\n            this._sourceScrollableInfo = {\r\n                element: $scrollable,\r\n                scrollLeft: $scrollable.scrollLeft(),\r\n                scrollTop: $scrollable.scrollTop()\r\n            };\r\n            eventsEngine.off($scrollable, \"scroll\", this._sourceScrollHandler);\r\n            eventsEngine.on($scrollable, \"scroll\", this._sourceScrollHandler)\r\n        }\r\n    }\r\n    _unsubscribeFromSourceScroll() {\r\n        if (this._sourceScrollableInfo) {\r\n            eventsEngine.off(this._sourceScrollableInfo.element, \"scroll\", this._sourceScrollHandler);\r\n            this._sourceScrollableInfo = null\r\n        }\r\n    }\r\n    _handleSourceScroll(e) {\r\n        const sourceScrollableInfo = this._sourceScrollableInfo;\r\n        if (sourceScrollableInfo) {\r\n            [\"scrollLeft\", \"scrollTop\"].forEach((scrollProp => {\r\n                if (e.target[scrollProp] !== sourceScrollableInfo[scrollProp]) {\r\n                    const scrollBy = e.target[scrollProp] - sourceScrollableInfo[scrollProp];\r\n                    this._correctItemPoints(scrollBy);\r\n                    this._movePlaceholder();\r\n                    sourceScrollableInfo[scrollProp] = e.target[scrollProp]\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    _dragEnterHandler(e) {\r\n        super._dragEnterHandler.apply(this, arguments);\r\n        if (this === this._getSourceDraggable()) {\r\n            return\r\n        }\r\n        this._subscribeToSourceScroll(e);\r\n        this._updateItemPoints();\r\n        this.option(\"fromIndex\", -1);\r\n        if (!this._isIndicateMode()) {\r\n            const itemPoints = this.option(\"itemPoints\");\r\n            const lastItemPoint = itemPoints[itemPoints.length - 1];\r\n            if (lastItemPoint) {\r\n                const $element = this.$element();\r\n                const $sourceElement = this._getSourceElement();\r\n                const isVertical = this._isVerticalOrientation();\r\n                const sourceElementSize = isVertical ? getOuterHeight($sourceElement, true) : getOuterWidth($sourceElement, true);\r\n                const scrollSize = $element.get(0)[isVertical ? \"scrollHeight\" : \"scrollWidth\"];\r\n                const scrollPosition = $element.get(0)[isVertical ? \"scrollTop\" : \"scrollLeft\"];\r\n                const positionProp = isVertical ? \"top\" : \"left\";\r\n                const lastPointPosition = lastItemPoint[positionProp];\r\n                const elementPosition = $element.offset()[positionProp];\r\n                const freeSize = elementPosition + scrollSize - scrollPosition - lastPointPosition;\r\n                if (freeSize < sourceElementSize) {\r\n                    if (isVertical) {\r\n                        const items = this._getItems();\r\n                        const $lastItem = $(this._getPrevVisibleItem(items));\r\n                        this._$modifiedItem = $lastItem;\r\n                        this._modifiedItemMargin = $lastItem.get(0).style.marginBottom;\r\n                        $lastItem.css(\"marginBottom\", sourceElementSize - freeSize);\r\n                        const $sortable = $lastItem.closest(\".dx-sortable\");\r\n                        const sortable = $sortable.data(\"dxScrollable\") || $sortable.data(\"dxScrollView\");\r\n                        null === sortable || void 0 === sortable || sortable.update()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _dragLeaveHandler() {\r\n        super._dragLeaveHandler.apply(this, arguments);\r\n        if (this !== this._getSourceDraggable()) {\r\n            this._unsubscribeFromSourceScroll()\r\n        }\r\n    }\r\n    dragEnter() {\r\n        if (this !== this._getTargetDraggable()) {\r\n            this.option(\"toIndex\", -1)\r\n        }\r\n    }\r\n    dragLeave() {\r\n        if (this !== this._getTargetDraggable()) {\r\n            this.option(\"toIndex\", this.option(\"fromIndex\"))\r\n        }\r\n    }\r\n    _allowDrop(event) {\r\n        const targetDraggable = this._getTargetDraggable();\r\n        const $targetDraggable = targetDraggable.$element();\r\n        const $scrollable = this._getScrollable($targetDraggable);\r\n        if ($scrollable) {\r\n            const {\r\n                left: left,\r\n                right: right,\r\n                top: top,\r\n                bottom: bottom\r\n            } = getScrollableBoundary($scrollable);\r\n            const toIndex = this.option(\"toIndex\");\r\n            const itemPoints = this.option(\"itemPoints\");\r\n            const itemPoint = null === itemPoints || void 0 === itemPoints ? void 0 : itemPoints.filter((item => item.index === toIndex))[0];\r\n            if (itemPoint && void 0 !== itemPoint.top) {\r\n                const isVertical = this._isVerticalOrientation();\r\n                if (isVertical) {\r\n                    return top <= Math.ceil(itemPoint.top) && Math.floor(itemPoint.top) <= bottom\r\n                }\r\n                return left <= Math.ceil(itemPoint.left) && Math.floor(itemPoint.left) <= right\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    dragEnd(sourceEvent) {\r\n        this._unsubscribeFromSourceScroll();\r\n        const $sourceElement = this._getSourceElement();\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        const isSourceDraggable = sourceDraggable.NAME !== this.NAME;\r\n        const toIndex = this.option(\"toIndex\");\r\n        const {\r\n            event: event\r\n        } = sourceEvent;\r\n        const allowDrop = this._allowDrop(event);\r\n        if (null !== toIndex && toIndex >= 0 && allowDrop) {\r\n            let cancelAdd;\r\n            let cancelRemove;\r\n            if (sourceDraggable !== this) {\r\n                cancelAdd = this._fireAddEvent(event);\r\n                if (!cancelAdd) {\r\n                    cancelRemove = this._fireRemoveEvent(event)\r\n                }\r\n            }\r\n            if (isSourceDraggable) {\r\n                resetPosition($sourceElement)\r\n            }\r\n            if (this.option(\"moveItemOnDrop\")) {\r\n                !cancelAdd && this._moveItem($sourceElement, toIndex, cancelRemove)\r\n            }\r\n            if (sourceDraggable === this) {\r\n                return this._fireReorderEvent(event)\r\n            }\r\n        }\r\n        return Deferred().resolve()\r\n    }\r\n    dragMove(e) {\r\n        const itemPoints = this.option(\"itemPoints\");\r\n        if (!itemPoints) {\r\n            return\r\n        }\r\n        const isVertical = this._isVerticalOrientation();\r\n        const axisName = isVertical ? \"top\" : \"left\";\r\n        const cursorPosition = isVertical ? e.pageY : e.pageX;\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        let itemPoint;\r\n        for (let i = itemPoints.length - 1; i >= 0; i--) {\r\n            const centerPosition = itemPoints[i + 1] && (itemPoints[i][axisName] + itemPoints[i + 1][axisName]) / 2;\r\n            if ((!isVertical && rtlEnabled ? cursorPosition > centerPosition : centerPosition > cursorPosition) || void 0 === centerPosition) {\r\n                itemPoint = itemPoints[i]\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        if (itemPoint) {\r\n            this._updatePlaceholderPosition(e, itemPoint);\r\n            if (this._verticalScrollHelper.isScrolling() && this._isIndicateMode()) {\r\n                this._movePlaceholder()\r\n            }\r\n        }\r\n    }\r\n    _isIndicateMode() {\r\n        return \"indicate\" === this.option(\"dropFeedbackMode\") || this.option(\"allowDropInsideItem\")\r\n    }\r\n    _createPlaceholder() {\r\n        let $placeholderContainer;\r\n        if (this._isIndicateMode()) {\r\n            $placeholderContainer = $(\"<div>\").addClass(this._addWidgetPrefix(\"placeholder\")).insertBefore(this._getSourceDraggable()._$dragElement)\r\n        }\r\n        this._$placeholderElement = $placeholderContainer;\r\n        return $placeholderContainer\r\n    }\r\n    _getItems() {\r\n        const itemsSelector = this._getItemsSelector();\r\n        return this._$content().find(itemsSelector).not(`.${this._addWidgetPrefix(\"placeholder\")}`).not(`.${this._addWidgetPrefix(\"clone\")}`).toArray()\r\n    }\r\n    _allowReordering() {\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        const targetDraggable = this._getTargetDraggable();\r\n        return sourceDraggable !== targetDraggable || this.option(\"allowReordering\")\r\n    }\r\n    _isValidPoint(visibleIndex, draggableVisibleIndex, dropInsideItem) {\r\n        const allowDropInsideItem = this.option(\"allowDropInsideItem\");\r\n        const allowReordering = dropInsideItem || this._allowReordering();\r\n        if (!allowReordering && (0 !== visibleIndex || !allowDropInsideItem)) {\r\n            return false\r\n        }\r\n        if (!this._isIndicateMode()) {\r\n            return true\r\n        }\r\n        return -1 === draggableVisibleIndex || visibleIndex !== draggableVisibleIndex && (dropInsideItem || visibleIndex !== draggableVisibleIndex + 1)\r\n    }\r\n    _getItemPoints() {\r\n        const that = this;\r\n        let result = [];\r\n        let $item;\r\n        let offset;\r\n        let itemWidth;\r\n        const {\r\n            rtlEnabled: rtlEnabled\r\n        } = that.option();\r\n        const isVertical = that._isVerticalOrientation();\r\n        const itemElements = that._getItems();\r\n        const visibleItemElements = itemElements.filter(isElementVisible);\r\n        const visibleItemCount = visibleItemElements.length;\r\n        const $draggableItem = this._getDraggableElement();\r\n        const draggableVisibleIndex = visibleItemElements.indexOf($draggableItem.get(0));\r\n        if (visibleItemCount) {\r\n            for (let i = 0; i <= visibleItemCount; i++) {\r\n                const needCorrectLeftPosition = !isVertical && rtlEnabled ^ i === visibleItemCount;\r\n                const needCorrectTopPosition = isVertical && i === visibleItemCount;\r\n                if (i < visibleItemCount) {\r\n                    $item = $(visibleItemElements[i]);\r\n                    offset = $item.offset();\r\n                    itemWidth = getOuterWidth($item)\r\n                }\r\n                result.push({\r\n                    dropInsideItem: false,\r\n                    left: offset.left + (needCorrectLeftPosition ? itemWidth : 0),\r\n                    top: offset.top + (needCorrectTopPosition ? result[i - 1].height : 0),\r\n                    index: i === visibleItemCount ? itemElements.length : itemElements.indexOf($item.get(0)),\r\n                    $item: $item,\r\n                    width: getOuterWidth($item),\r\n                    height: getOuterHeight($item),\r\n                    isValid: that._isValidPoint(i, draggableVisibleIndex)\r\n                })\r\n            }\r\n            if (this.option(\"allowDropInsideItem\")) {\r\n                const points = result;\r\n                result = [];\r\n                for (let i = 0; i < points.length; i++) {\r\n                    result.push(points[i]);\r\n                    if (points[i + 1]) {\r\n                        result.push(extend({}, points[i], {\r\n                            dropInsideItem: true,\r\n                            top: Math.floor((points[i].top + points[i + 1].top) / 2),\r\n                            left: Math.floor((points[i].left + points[i + 1].left) / 2),\r\n                            isValid: this._isValidPoint(i, draggableVisibleIndex, true)\r\n                        }))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            result.push({\r\n                dropInsideItem: false,\r\n                index: 0,\r\n                isValid: true\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _updateItemPoints(forceUpdate) {\r\n        if (forceUpdate || this.option(\"autoUpdate\") || !this.option(\"itemPoints\")) {\r\n            this.option(\"itemPoints\", this._getItemPoints())\r\n        }\r\n    }\r\n    _correctItemPoints(scrollBy) {\r\n        const itemPoints = this.option(\"itemPoints\");\r\n        if (scrollBy && itemPoints && !this.option(\"autoUpdate\")) {\r\n            const isVertical = this._isVerticalOrientation();\r\n            const positionPropName = isVertical ? \"top\" : \"left\";\r\n            itemPoints.forEach((itemPoint => {\r\n                itemPoint[positionPropName] -= scrollBy\r\n            }))\r\n        }\r\n    }\r\n    _getElementIndex($itemElement) {\r\n        return this._getItems().indexOf($itemElement.get(0))\r\n    }\r\n    _getDragTemplateArgs($element) {\r\n        const args = super._getDragTemplateArgs.apply(this, arguments);\r\n        args.model.fromIndex = this._getElementIndex($element);\r\n        return args\r\n    }\r\n    _togglePlaceholder(value) {\r\n        var _this$_$placeholderEl;\r\n        null === (_this$_$placeholderEl = this._$placeholderElement) || void 0 === _this$_$placeholderEl || _this$_$placeholderEl.toggle(value)\r\n    }\r\n    _isVerticalOrientation() {\r\n        const {\r\n            itemOrientation: itemOrientation\r\n        } = this.option();\r\n        return \"vertical\" === itemOrientation\r\n    }\r\n    _normalizeToIndex(toIndex, skipOffsetting) {\r\n        const isAnotherDraggable = this._getSourceDraggable() !== this._getTargetDraggable();\r\n        const fromIndex = this._getActualFromIndex();\r\n        if (null === toIndex) {\r\n            return fromIndex\r\n        }\r\n        return Math.max(isAnotherDraggable || fromIndex >= toIndex || skipOffsetting ? toIndex : toIndex - 1, 0)\r\n    }\r\n    _updatePlaceholderPosition(e, itemPoint) {\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        const toIndex = this._normalizeToIndex(itemPoint.index, itemPoint.dropInsideItem);\r\n        const eventArgs = extend(this._getEventArgs(e), {\r\n            toIndex: toIndex,\r\n            dropInsideItem: itemPoint.dropInsideItem\r\n        });\r\n        itemPoint.isValid && this._getAction(\"onDragChange\")(eventArgs);\r\n        if (eventArgs.cancel || !itemPoint.isValid) {\r\n            if (!itemPoint.isValid) {\r\n                this.option({\r\n                    dropInsideItem: false,\r\n                    toIndex: null\r\n                })\r\n            }\r\n            return\r\n        }\r\n        this.option({\r\n            dropInsideItem: itemPoint.dropInsideItem,\r\n            toIndex: itemPoint.index\r\n        });\r\n        this._getAction(\"onPlaceholderPrepared\")(extend(this._getEventArgs(e), {\r\n            placeholderElement: getPublicElement(this._$placeholderElement),\r\n            dragElement: getPublicElement(sourceDraggable._$dragElement)\r\n        }));\r\n        this._updateItemPoints()\r\n    }\r\n    _makeWidthCorrection($item, width) {\r\n        this._$scrollable = this._getScrollable($item);\r\n        if (this._$scrollable) {\r\n            const scrollableWidth = getWidth(this._$scrollable);\r\n            const overflowLeft = this._$scrollable.offset().left - $item.offset().left;\r\n            const overflowRight = getOuterWidth($item) - overflowLeft - scrollableWidth;\r\n            if (overflowLeft > 0) {\r\n                width -= overflowLeft\r\n            }\r\n            if (overflowRight > 0) {\r\n                width -= overflowRight\r\n            }\r\n        }\r\n        return width\r\n    }\r\n    _updatePlaceholderSizes($placeholderElement, itemElement) {\r\n        const dropInsideItem = this.option(\"dropInsideItem\");\r\n        const $item = $(itemElement);\r\n        const isVertical = this._isVerticalOrientation();\r\n        let width = \"\";\r\n        let height = \"\";\r\n        $placeholderElement.toggleClass(this._addWidgetPrefix(\"placeholder-inside\"), dropInsideItem);\r\n        if (isVertical || dropInsideItem) {\r\n            width = getOuterWidth($item)\r\n        }\r\n        if (!isVertical || dropInsideItem) {\r\n            height = getOuterHeight($item)\r\n        }\r\n        width = this._makeWidthCorrection($item, width);\r\n        $placeholderElement.css({\r\n            width: width,\r\n            height: height\r\n        })\r\n    }\r\n    _moveItem($itemElement, index, cancelRemove) {\r\n        let $prevTargetItemElement;\r\n        const $itemElements = this._getItems();\r\n        const $targetItemElement = $itemElements[index];\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        if (cancelRemove) {\r\n            $itemElement = $itemElement.clone();\r\n            sourceDraggable._toggleDragSourceClass(false, $itemElement)\r\n        }\r\n        if (!$targetItemElement) {\r\n            $prevTargetItemElement = $itemElements[index - 1]\r\n        }\r\n        this._moveItemCore($itemElement, $targetItemElement, $prevTargetItemElement)\r\n    }\r\n    _moveItemCore($targetItem, item, prevItem) {\r\n        if (!item && !prevItem) {\r\n            $targetItem.appendTo(this.$element())\r\n        } else if (prevItem) {\r\n            $targetItem.insertAfter($(prevItem))\r\n        } else {\r\n            $targetItem.insertBefore($(item))\r\n        }\r\n    }\r\n    _getDragStartArgs(e, $itemElement) {\r\n        return extend(super._getDragStartArgs.apply(this, arguments), {\r\n            fromIndex: this._getElementIndex($itemElement)\r\n        })\r\n    }\r\n    _getEventArgs(e) {\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        const targetDraggable = this._getTargetDraggable();\r\n        const dropInsideItem = targetDraggable.option(\"dropInsideItem\");\r\n        return extend(super._getEventArgs.apply(this, arguments), {\r\n            fromIndex: sourceDraggable.option(\"fromIndex\"),\r\n            toIndex: this._normalizeToIndex(targetDraggable.option(\"toIndex\"), dropInsideItem),\r\n            dropInsideItem: dropInsideItem\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        const {\r\n            name: name\r\n        } = args;\r\n        switch (name) {\r\n            case \"onDragChange\":\r\n            case \"onPlaceholderPrepared\":\r\n            case \"onAdd\":\r\n            case \"onRemove\":\r\n            case \"onReorder\":\r\n                this[`_${name}Action`] = this._createActionByOption(name);\r\n                break;\r\n            case \"itemOrientation\":\r\n            case \"allowDropInsideItem\":\r\n            case \"moveItemOnDrop\":\r\n            case \"dropFeedbackMode\":\r\n            case \"itemPoints\":\r\n            case \"animation\":\r\n            case \"allowReordering\":\r\n            case \"fromIndexOffset\":\r\n            case \"offset\":\r\n            case \"draggableElementSize\":\r\n            case \"autoUpdate\":\r\n                break;\r\n            case \"fromIndex\":\r\n                [false, true].forEach((isDragSource => {\r\n                    const fromIndex = isDragSource ? args.value : args.previousValue;\r\n                    if (null !== fromIndex) {\r\n                        const $fromElement = $(this._getItems()[fromIndex]);\r\n                        this._toggleDragSourceClass(isDragSource, $fromElement)\r\n                    }\r\n                }));\r\n                break;\r\n            case \"dropInsideItem\":\r\n                this._optionChangedDropInsideItem(args);\r\n                break;\r\n            case \"toIndex\":\r\n                this._optionChangedToIndex(args);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _optionChangedDropInsideItem() {\r\n        if (this._isIndicateMode() && this._$placeholderElement) {\r\n            this._movePlaceholder()\r\n        }\r\n    }\r\n    _isPositionVisible(position) {\r\n        const $element = this.$element();\r\n        let scrollContainer;\r\n        if (\"hidden\" !== $element.css(\"overflow\")) {\r\n            scrollContainer = $element.get(0)\r\n        } else {\r\n            $element.parents().each((function() {\r\n                if (\"visible\" !== $(this).css(\"overflow\")) {\r\n                    scrollContainer = this;\r\n                    return false\r\n                }\r\n                return\r\n            }))\r\n        }\r\n        if (scrollContainer) {\r\n            const clientRect = getBoundingRect(scrollContainer);\r\n            const isVerticalOrientation = this._isVerticalOrientation();\r\n            const start = isVerticalOrientation ? \"top\" : \"left\";\r\n            const end = isVerticalOrientation ? \"bottom\" : \"right\";\r\n            const pageOffset = isVerticalOrientation ? window.pageYOffset : window.pageXOffset;\r\n            if (position[start] < clientRect[start] + pageOffset || position[start] > clientRect[end] + pageOffset) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    _optionChangedToIndex(args) {\r\n        const toIndex = args.value;\r\n        if (this._isIndicateMode()) {\r\n            const showPlaceholder = null !== toIndex && toIndex >= 0;\r\n            this._togglePlaceholder(showPlaceholder);\r\n            if (showPlaceholder) {\r\n                this._movePlaceholder()\r\n            }\r\n        } else {\r\n            this._moveItems(args.previousValue, args.value, args.fullUpdate)\r\n        }\r\n    }\r\n    update() {\r\n        if (null === this.option(\"fromIndex\") && null === this.option(\"toIndex\")) {\r\n            return\r\n        }\r\n        this._updateItemPoints(true);\r\n        this._updateDragSourceClass();\r\n        const toIndex = this.option(\"toIndex\");\r\n        this._optionChangedToIndex({\r\n            value: toIndex,\r\n            fullUpdate: true\r\n        })\r\n    }\r\n    _updateDragSourceClass() {\r\n        const fromIndex = this._getActualFromIndex();\r\n        const $fromElement = $(this._getItems()[fromIndex]);\r\n        if ($fromElement.length) {\r\n            this._$sourceElement = $fromElement;\r\n            this._toggleDragSourceClass(true, $fromElement)\r\n        }\r\n    }\r\n    _makeLeftCorrection(left) {\r\n        const $scrollable = this._$scrollable;\r\n        if ($scrollable && this._isVerticalOrientation()) {\r\n            const overflowLeft = $scrollable.offset().left - left;\r\n            if (overflowLeft > 0) {\r\n                left += overflowLeft\r\n            }\r\n        }\r\n        return left\r\n    }\r\n    _movePlaceholder() {\r\n        const that = this;\r\n        const $placeholderElement = that._$placeholderElement || that._createPlaceholder();\r\n        if (!$placeholderElement) {\r\n            return\r\n        }\r\n        const items = that._getItems();\r\n        const toIndex = that.option(\"toIndex\");\r\n        const isVerticalOrientation = that._isVerticalOrientation();\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        const dropInsideItem = that.option(\"dropInsideItem\");\r\n        let position = null;\r\n        let itemElement = items[toIndex];\r\n        if (itemElement) {\r\n            const $itemElement = $(itemElement);\r\n            position = $itemElement.offset();\r\n            if (!isVerticalOrientation && rtlEnabled && !dropInsideItem) {\r\n                position.left += getOuterWidth($itemElement, true)\r\n            }\r\n        } else {\r\n            const prevVisibleItemElement = itemElement = this._getPrevVisibleItem(items, toIndex);\r\n            if (prevVisibleItemElement) {\r\n                position = $(prevVisibleItemElement).offset();\r\n                if (isVerticalOrientation) {\r\n                    position.top += getOuterHeight(prevVisibleItemElement, true)\r\n                } else if (!rtlEnabled) {\r\n                    position.left += getOuterWidth(prevVisibleItemElement, true)\r\n                }\r\n            }\r\n        }\r\n        that._updatePlaceholderSizes($placeholderElement, itemElement);\r\n        if (position && !that._isPositionVisible(position)) {\r\n            position = null\r\n        }\r\n        if (position) {\r\n            const isLastVerticalPosition = isVerticalOrientation && toIndex === items.length;\r\n            const outerPlaceholderHeight = getOuterHeight($placeholderElement);\r\n            position.left = that._makeLeftCorrection(position.left);\r\n            position.top = isLastVerticalPosition && position.top >= outerPlaceholderHeight ? position.top - outerPlaceholderHeight : position.top;\r\n            that._move(position, $placeholderElement)\r\n        }\r\n        $placeholderElement.toggle(!!position)\r\n    }\r\n    _getPositions(items, elementSize, fromIndex, toIndex) {\r\n        const positions = [];\r\n        for (let i = 0; i < items.length; i++) {\r\n            let position = 0;\r\n            if (null === toIndex || null === fromIndex) {\r\n                positions.push(position);\r\n                continue\r\n            }\r\n            if (-1 === fromIndex) {\r\n                if (i >= toIndex) {\r\n                    position = elementSize\r\n                }\r\n            } else if (-1 === toIndex) {\r\n                if (i > fromIndex) {\r\n                    position = -elementSize\r\n                }\r\n            } else if (fromIndex < toIndex) {\r\n                if (i > fromIndex && i < toIndex) {\r\n                    position = -elementSize\r\n                }\r\n            } else if (fromIndex > toIndex) {\r\n                if (i >= toIndex && i < fromIndex) {\r\n                    position = elementSize\r\n                }\r\n            }\r\n            positions.push(position)\r\n        }\r\n        return positions\r\n    }\r\n    _getDraggableElementSize(isVerticalOrientation) {\r\n        const $draggableItem = this._getDraggableElement();\r\n        let size = this.option(\"draggableElementSize\");\r\n        if (!size) {\r\n            size = isVerticalOrientation ? (getOuterHeight($draggableItem) + getOuterHeight($draggableItem, true)) / 2 : (getOuterWidth($draggableItem) + getOuterWidth($draggableItem, true)) / 2;\r\n            if (!this.option(\"autoUpdate\")) {\r\n                this.option(\"draggableElementSize\", size)\r\n            }\r\n        }\r\n        return size\r\n    }\r\n    _getActualFromIndex() {\r\n        const {\r\n            fromIndex: fromIndex,\r\n            fromIndexOffset: fromIndexOffset,\r\n            offset: offset\r\n        } = this.option();\r\n        return null == fromIndex ? null : fromIndex + fromIndexOffset - offset\r\n    }\r\n    _moveItems(prevToIndex, toIndex, fullUpdate) {\r\n        const fromIndex = this._getActualFromIndex();\r\n        const isVerticalOrientation = this._isVerticalOrientation();\r\n        const positionPropName = isVerticalOrientation ? \"top\" : \"left\";\r\n        const elementSize = this._getDraggableElementSize(isVerticalOrientation);\r\n        const items = this._getItems();\r\n        const prevPositions = this._getPositions(items, elementSize, fromIndex, prevToIndex);\r\n        const positions = this._getPositions(items, elementSize, fromIndex, toIndex);\r\n        const animationConfig = this.option(\"animation\");\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        for (let i = 0; i < items.length; i++) {\r\n            const itemElement = items[i];\r\n            const prevPosition = prevPositions[i];\r\n            const position = positions[i];\r\n            if (null === toIndex || null === fromIndex) {\r\n                stopAnimation(itemElement)\r\n            } else if (prevPosition !== position || fullUpdate && isDefined(position)) {\r\n                animate(itemElement, extend({}, animationConfig, {\r\n                    to: {\r\n                        [positionPropName]: !isVerticalOrientation && rtlEnabled ? -position : position\r\n                    }\r\n                }))\r\n            }\r\n        }\r\n    }\r\n    _toggleDragSourceClass(value, $element) {\r\n        const $sourceElement = $element || this._$sourceElement;\r\n        super._toggleDragSourceClass.apply(this, arguments);\r\n        if (!this._isIndicateMode()) {\r\n            null === $sourceElement || void 0 === $sourceElement || $sourceElement.toggleClass(this._addWidgetPrefix(\"source-hidden\"), value)\r\n        }\r\n    }\r\n    _dispose() {\r\n        this.reset();\r\n        super._dispose()\r\n    }\r\n    _fireAddEvent(sourceEvent) {\r\n        const args = this._getEventArgs(sourceEvent);\r\n        this._getAction(\"onAdd\")(args);\r\n        return args.cancel\r\n    }\r\n    _fireRemoveEvent(sourceEvent) {\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        const args = this._getEventArgs(sourceEvent);\r\n        sourceDraggable._getAction(\"onRemove\")(args);\r\n        return args.cancel\r\n    }\r\n    _fireReorderEvent(sourceEvent) {\r\n        const args = this._getEventArgs(sourceEvent);\r\n        this._getAction(\"onReorder\")(args);\r\n        return args.promise || Deferred().resolve()\r\n    }\r\n}\r\nregisterComponent(SORTABLE, Sortable);\r\nexport default Sortable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}