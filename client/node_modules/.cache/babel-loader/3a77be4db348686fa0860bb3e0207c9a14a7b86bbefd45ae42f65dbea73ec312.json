{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/master_detail/m_master_detail.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport $ from \"../../../../core/renderer\";\nimport { grep } from \"../../../../core/utils/common\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getHeight, getWidth } from \"../../../../core/utils/size\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport gridCoreUtils from \"../m_utils\";\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nconst MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nconst ROW_LINES_CLASS = \"dx-row-lines\";\nconst columns = Base => class extends Base {\n  _getExpandColumnsCore() {\n    const expandColumns = super._getExpandColumnsCore();\n    if (this.option(\"masterDetail.enabled\")) {\n      expandColumns.push({\n        type: \"detailExpand\",\n        cellTemplate: gridCoreUtils.getExpandCellTemplate()\n      });\n    }\n    return expandColumns;\n  }\n};\nconst initMasterDetail = function (that) {\n  that._expandedItems = [];\n  that._isExpandAll = that.option(\"masterDetail.autoExpandAll\");\n};\nexport const dataMasterDetailExtenderMixin = Base => class extends Base {\n  init() {\n    initMasterDetail(this);\n    super.init();\n  }\n  expandAll(groupIndex) {\n    const that = this;\n    if (groupIndex < 0) {\n      that._isExpandAll = true;\n      that._expandedItems = [];\n      that.updateItems();\n    } else {\n      super.expandAll.apply(that, arguments);\n    }\n  }\n  collapseAll(groupIndex) {\n    const that = this;\n    if (groupIndex < 0) {\n      that._isExpandAll = false;\n      that._expandedItems = [];\n      that.updateItems();\n    } else {\n      super.collapseAll.apply(that, arguments);\n    }\n  }\n  isRowExpandedHack() {\n    return super.isRowExpanded.apply(this, arguments);\n  }\n  isRowExpanded(key) {\n    const that = this;\n    const expandIndex = gridCoreUtils.getIndexByKey(key, that._expandedItems);\n    if (Array.isArray(key)) {\n      return super.isRowExpanded.apply(that, arguments);\n    }\n    return !!(that._isExpandAll ^ (expandIndex >= 0 && that._expandedItems[expandIndex].visible));\n  }\n  _getRowIndicesForExpand(key) {\n    const rowIndex = this.getRowIndexByKey(key);\n    return [rowIndex, rowIndex + 1];\n  }\n  _changeRowExpandCore(key) {\n    const that = this;\n    let result;\n    if (Array.isArray(key)) {\n      result = super._changeRowExpandCore.apply(that, arguments);\n    } else {\n      const expandIndex = gridCoreUtils.getIndexByKey(key, that._expandedItems);\n      if (expandIndex >= 0) {\n        const {\n          visible: visible\n        } = that._expandedItems[expandIndex];\n        that._expandedItems[expandIndex].visible = !visible;\n      } else {\n        that._expandedItems.push({\n          key: key,\n          visible: true\n        });\n      }\n      that.updateItems({\n        changeType: \"update\",\n        rowIndices: that._getRowIndicesForExpand(key)\n      });\n      result = new Deferred().resolve();\n    }\n    return result;\n  }\n  _processDataItemHack() {\n    return super._processDataItem.apply(this, arguments);\n  }\n  _processDataItem(data, options) {\n    const dataItem = super._processDataItem.apply(this, arguments);\n    dataItem.isExpanded = this.isRowExpanded(dataItem.key);\n    if (void 0 === options.detailColumnIndex) {\n      options.detailColumnIndex = -1;\n      each(options.visibleColumns, (index, column) => {\n        if (\"expand\" === column.command && !isDefined(column.groupIndex)) {\n          options.detailColumnIndex = index;\n          return false;\n        }\n        return;\n      });\n    }\n    if (options.detailColumnIndex >= 0) {\n      dataItem.values[options.detailColumnIndex] = dataItem.isExpanded;\n    }\n    return dataItem;\n  }\n  _processItemsHack() {\n    return super._processItems.apply(this, arguments);\n  }\n  _processItems(items, change) {\n    const that = this;\n    const {\n      changeType: changeType\n    } = change;\n    const result = [];\n    items = super._processItems.apply(that, arguments);\n    if (\"loadingAll\" === changeType) {\n      return items;\n    }\n    if (\"refresh\" === changeType) {\n      that._expandedItems = grep(that._expandedItems, item => item.visible);\n    }\n    each(items, (index, item) => {\n      result.push(item);\n      const expandIndex = gridCoreUtils.getIndexByKey(item.key, that._expandedItems);\n      if (\"data\" === item.rowType && (item.isExpanded || expandIndex >= 0) && !item.isNewRow) {\n        result.push({\n          visible: item.isExpanded,\n          rowType: \"detail\",\n          key: item.key,\n          data: item.data,\n          values: []\n        });\n      }\n    });\n    return result;\n  }\n  optionChanged(args) {\n    const that = this;\n    let isEnabledChanged;\n    let isAutoExpandAllChanged;\n    if (\"masterDetail\" === args.name) {\n      args.name = \"dataSource\";\n      switch (args.fullName) {\n        case \"masterDetail\":\n          {\n            const value = args.value || {};\n            const previousValue = args.previousValue || {};\n            isEnabledChanged = value.enabled !== previousValue.enabled;\n            isAutoExpandAllChanged = value.autoExpandAll !== previousValue.autoExpandAll;\n            break;\n          }\n        case \"masterDetail.template\":\n          initMasterDetail(that);\n          break;\n        case \"masterDetail.enabled\":\n          isEnabledChanged = true;\n          break;\n        case \"masterDetail.autoExpandAll\":\n          isAutoExpandAllChanged = true;\n      }\n      if (isEnabledChanged || isAutoExpandAllChanged) {\n        initMasterDetail(that);\n      }\n    }\n    super.optionChanged(args);\n  }\n};\nconst resizing = Base => class extends Base {\n  fireContentReadyAction() {\n    super.fireContentReadyAction.apply(this, arguments);\n    this._updateParentDataGrids(this.component.$element());\n  }\n  _updateParentDataGrids($element) {\n    const $masterDetailRow = $element.closest(\".dx-master-detail-row\");\n    if ($masterDetailRow.length) {\n      when(this._updateMasterDataGrid($masterDetailRow, $element)).done(() => {\n        this._updateParentDataGrids($masterDetailRow.parent());\n      });\n    }\n  }\n  _updateMasterDataGrid($masterDetailRow, $detailElement) {\n    const masterRowOptions = $($masterDetailRow).data(\"options\");\n    const masterDataGrid = $($masterDetailRow).closest(`.${this.getWidgetContainerClass()}`).parent().data(\"dxDataGrid\");\n    if (masterRowOptions && masterDataGrid) {\n      return this._updateMasterDataGridCore(masterDataGrid, masterRowOptions);\n    }\n    return;\n  }\n  _updateMasterDataGridCore(masterDataGrid, masterRowOptions) {\n    var _masterDataGrid$getVi, _masterDataGrid$getVi2;\n    const d = Deferred();\n    if (null !== (_masterDataGrid$getVi = masterDataGrid.getView(\"rowsView\")) && void 0 !== _masterDataGrid$getVi && null !== (_masterDataGrid$getVi2 = _masterDataGrid$getVi.isFixedColumns) && void 0 !== _masterDataGrid$getVi2 && _masterDataGrid$getVi2.call(_masterDataGrid$getVi)) {\n      this._updateFixedMasterDetailGrids(masterDataGrid, masterRowOptions.rowIndex, $(masterRowOptions.rowElement)).done(d.resolve);\n    } else {\n      if (true === masterDataGrid.option(\"scrolling.useNative\")) {\n        masterDataGrid.updateDimensions().done(() => d.resolve(true));\n        return;\n      }\n      const scrollable = masterDataGrid.getScrollable();\n      if (scrollable) {\n        null === scrollable || void 0 === scrollable || scrollable.update().done(() => d.resolve());\n      } else {\n        d.resolve();\n      }\n    }\n    return d.promise();\n  }\n  _updateFixedMasterDetailGrids(masterDataGrid, masterRowIndex, $detailElement) {\n    const d = Deferred();\n    const $rows = $(masterDataGrid.getRowElement(masterRowIndex));\n    const $tables = $(masterDataGrid.getView(\"rowsView\").getTableElements());\n    const rowsNotEqual = 2 === (null === $rows || void 0 === $rows ? void 0 : $rows.length) && getHeight($rows.eq(0)) !== getHeight($rows.eq(1));\n    const tablesNotEqual = 2 === (null === $tables || void 0 === $tables ? void 0 : $tables.length) && getHeight($tables.eq(0)) !== getHeight($tables.eq(1));\n    if (rowsNotEqual || tablesNotEqual) {\n      const detailElementWidth = getWidth($detailElement);\n      masterDataGrid.updateDimensions().done(() => {\n        const isDetailHorizontalScrollCanBeShown = this.option(\"columnAutoWidth\") && true === masterDataGrid.option(\"scrolling.useNative\");\n        const isDetailGridWidthChanged = isDetailHorizontalScrollCanBeShown && detailElementWidth !== getWidth($detailElement);\n        if (isDetailHorizontalScrollCanBeShown && isDetailGridWidthChanged) {\n          this.updateDimensions().done(() => d.resolve(true));\n        } else {\n          d.resolve(true);\n        }\n      });\n      return d.promise();\n    }\n    return Deferred().resolve();\n  }\n  _toggleBestFitMode(isBestFit) {\n    super._toggleBestFitMode.apply(this, arguments);\n    if (this.option(\"masterDetail.template\")) {\n      const $rowsTable = this._rowsView.getTableElement();\n      if ($rowsTable) {\n        $rowsTable.find(\".dx-master-detail-cell\").css(\"maxWidth\", isBestFit ? 0 : \"\");\n      }\n    }\n  }\n};\nconst rowsView = Base => class extends Base {\n  _getCellTemplate(options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    const editingController = this._editingController;\n    const isEditRow = editingController && editingController.isEditRow(options.rowIndex);\n    let template;\n    if (\"detail\" === column.command && !isEditRow) {\n      template = that.option(\"masterDetail.template\") || {\n        allowRenderToDetachedContainer: false,\n        render: that._getDefaultTemplate(column)\n      };\n    } else {\n      template = super._getCellTemplate.apply(that, arguments);\n    }\n    return template;\n  }\n  _isDetailRow(row) {\n    return row && row.rowType && 0 === row.rowType.indexOf(\"detail\");\n  }\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    if (row && this._isDetailRow(row)) {\n      this.option(\"showRowLines\") && $row.addClass(\"dx-row-lines\");\n      $row.addClass(\"dx-master-detail-row\");\n      if (isDefined(row.visible)) {\n        $row.toggle(row.visible);\n      }\n    }\n    return $row;\n  }\n  _renderCells($row, options) {\n    const {\n      row: row\n    } = options;\n    if (row.rowType && this._isDetailRow(row)) {\n      if (this._needRenderCell(0, options.columnIndices)) {\n        this._renderMasterDetailCell($row, row, options);\n      }\n    } else {\n      super._renderCells.apply(this, arguments);\n    }\n  }\n  _renderMasterDetailCell($row, row, options) {\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    const $detailCell = this._renderCell($row, {\n      value: null,\n      row: row,\n      rowIndex: row.rowIndex,\n      column: {\n        command: \"detail\"\n      },\n      columnIndex: 0,\n      change: options.change\n    });\n    $detailCell.addClass(\"dx-cell-focus-disabled\").addClass(\"dx-master-detail-cell\").attr(\"colSpan\", visibleColumns.length);\n    const isEditForm = row.isEditing;\n    if (!isEditForm) {\n      $detailCell.attr(\"aria-roledescription\", messageLocalization.format(\"dxDataGrid-masterDetail\"));\n    }\n    return $detailCell;\n  }\n};\nexport const masterDetailModule = {\n  defaultOptions: () => ({\n    masterDetail: {\n      enabled: false,\n      autoExpandAll: false,\n      template: null\n    }\n  }),\n  extenders: {\n    controllers: {\n      columns: columns,\n      data: dataMasterDetailExtenderMixin,\n      resizing: resizing\n    },\n    views: {\n      rowsView: rowsView\n    }\n  }\n};","map":{"version":3,"names":["messageLocalization","$","grep","Deferred","when","each","getHeight","getWidth","isDefined","gridCoreUtils","MASTER_DETAIL_CELL_CLASS","MASTER_DETAIL_ROW_CLASS","CELL_FOCUS_DISABLED_CLASS","ROW_LINES_CLASS","columns","Base","_getExpandColumnsCore","expandColumns","option","push","type","cellTemplate","getExpandCellTemplate","initMasterDetail","that","_expandedItems","_isExpandAll","dataMasterDetailExtenderMixin","init","expandAll","groupIndex","updateItems","apply","arguments","collapseAll","isRowExpandedHack","isRowExpanded","key","expandIndex","getIndexByKey","Array","isArray","visible","_getRowIndicesForExpand","rowIndex","getRowIndexByKey","_changeRowExpandCore","result","changeType","rowIndices","resolve","_processDataItemHack","_processDataItem","data","options","dataItem","isExpanded","detailColumnIndex","visibleColumns","index","column","command","values","_processItemsHack","_processItems","items","change","item","rowType","isNewRow","optionChanged","args","isEnabledChanged","isAutoExpandAllChanged","name","fullName","value","previousValue","enabled","autoExpandAll","resizing","fireContentReadyAction","_updateParentDataGrids","component","$element","$masterDetailRow","closest","length","_updateMasterDataGrid","done","parent","$detailElement","masterRowOptions","masterDataGrid","getWidgetContainerClass","_updateMasterDataGridCore","_masterDataGrid$getVi","_masterDataGrid$getVi2","d","getView","isFixedColumns","call","_updateFixedMasterDetailGrids","rowElement","updateDimensions","scrollable","getScrollable","update","promise","masterRowIndex","$rows","getRowElement","$tables","getTableElements","rowsNotEqual","eq","tablesNotEqual","detailElementWidth","isDetailHorizontalScrollCanBeShown","isDetailGridWidthChanged","_toggleBestFitMode","isBestFit","$rowsTable","_rowsView","getTableElement","find","css","rowsView","_getCellTemplate","editingController","_editingController","isEditRow","template","allowRenderToDetachedContainer","render","_getDefaultTemplate","_isDetailRow","row","indexOf","_createRow","$row","addClass","toggle","_renderCells","_needRenderCell","columnIndices","_renderMasterDetailCell","_columnsController","getVisibleColumns","$detailCell","_renderCell","columnIndex","attr","isEditForm","isEditing","format","masterDetailModule","defaultOptions","masterDetail","extenders","controllers","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/master_detail/m_master_detail.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/master_detail/m_master_detail.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    grep\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getHeight,\r\n    getWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nconst MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\r\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nconst ROW_LINES_CLASS = \"dx-row-lines\";\r\nconst columns = Base => class extends Base {\r\n    _getExpandColumnsCore() {\r\n        const expandColumns = super._getExpandColumnsCore();\r\n        if (this.option(\"masterDetail.enabled\")) {\r\n            expandColumns.push({\r\n                type: \"detailExpand\",\r\n                cellTemplate: gridCoreUtils.getExpandCellTemplate()\r\n            })\r\n        }\r\n        return expandColumns\r\n    }\r\n};\r\nconst initMasterDetail = function(that) {\r\n    that._expandedItems = [];\r\n    that._isExpandAll = that.option(\"masterDetail.autoExpandAll\")\r\n};\r\nexport const dataMasterDetailExtenderMixin = Base => class extends Base {\r\n    init() {\r\n        initMasterDetail(this);\r\n        super.init()\r\n    }\r\n    expandAll(groupIndex) {\r\n        const that = this;\r\n        if (groupIndex < 0) {\r\n            that._isExpandAll = true;\r\n            that._expandedItems = [];\r\n            that.updateItems()\r\n        } else {\r\n            super.expandAll.apply(that, arguments)\r\n        }\r\n    }\r\n    collapseAll(groupIndex) {\r\n        const that = this;\r\n        if (groupIndex < 0) {\r\n            that._isExpandAll = false;\r\n            that._expandedItems = [];\r\n            that.updateItems()\r\n        } else {\r\n            super.collapseAll.apply(that, arguments)\r\n        }\r\n    }\r\n    isRowExpandedHack() {\r\n        return super.isRowExpanded.apply(this, arguments)\r\n    }\r\n    isRowExpanded(key) {\r\n        const that = this;\r\n        const expandIndex = gridCoreUtils.getIndexByKey(key, that._expandedItems);\r\n        if (Array.isArray(key)) {\r\n            return super.isRowExpanded.apply(that, arguments)\r\n        }\r\n        return !!(that._isExpandAll ^ (expandIndex >= 0 && that._expandedItems[expandIndex].visible))\r\n    }\r\n    _getRowIndicesForExpand(key) {\r\n        const rowIndex = this.getRowIndexByKey(key);\r\n        return [rowIndex, rowIndex + 1]\r\n    }\r\n    _changeRowExpandCore(key) {\r\n        const that = this;\r\n        let result;\r\n        if (Array.isArray(key)) {\r\n            result = super._changeRowExpandCore.apply(that, arguments)\r\n        } else {\r\n            const expandIndex = gridCoreUtils.getIndexByKey(key, that._expandedItems);\r\n            if (expandIndex >= 0) {\r\n                const {\r\n                    visible: visible\r\n                } = that._expandedItems[expandIndex];\r\n                that._expandedItems[expandIndex].visible = !visible\r\n            } else {\r\n                that._expandedItems.push({\r\n                    key: key,\r\n                    visible: true\r\n                })\r\n            }\r\n            that.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: that._getRowIndicesForExpand(key)\r\n            });\r\n            result = (new Deferred).resolve()\r\n        }\r\n        return result\r\n    }\r\n    _processDataItemHack() {\r\n        return super._processDataItem.apply(this, arguments)\r\n    }\r\n    _processDataItem(data, options) {\r\n        const dataItem = super._processDataItem.apply(this, arguments);\r\n        dataItem.isExpanded = this.isRowExpanded(dataItem.key);\r\n        if (void 0 === options.detailColumnIndex) {\r\n            options.detailColumnIndex = -1;\r\n            each(options.visibleColumns, ((index, column) => {\r\n                if (\"expand\" === column.command && !isDefined(column.groupIndex)) {\r\n                    options.detailColumnIndex = index;\r\n                    return false\r\n                }\r\n                return\r\n            }))\r\n        }\r\n        if (options.detailColumnIndex >= 0) {\r\n            dataItem.values[options.detailColumnIndex] = dataItem.isExpanded\r\n        }\r\n        return dataItem\r\n    }\r\n    _processItemsHack() {\r\n        return super._processItems.apply(this, arguments)\r\n    }\r\n    _processItems(items, change) {\r\n        const that = this;\r\n        const {\r\n            changeType: changeType\r\n        } = change;\r\n        const result = [];\r\n        items = super._processItems.apply(that, arguments);\r\n        if (\"loadingAll\" === changeType) {\r\n            return items\r\n        }\r\n        if (\"refresh\" === changeType) {\r\n            that._expandedItems = grep(that._expandedItems, (item => item.visible))\r\n        }\r\n        each(items, ((index, item) => {\r\n            result.push(item);\r\n            const expandIndex = gridCoreUtils.getIndexByKey(item.key, that._expandedItems);\r\n            if (\"data\" === item.rowType && (item.isExpanded || expandIndex >= 0) && !item.isNewRow) {\r\n                result.push({\r\n                    visible: item.isExpanded,\r\n                    rowType: \"detail\",\r\n                    key: item.key,\r\n                    data: item.data,\r\n                    values: []\r\n                })\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n    optionChanged(args) {\r\n        const that = this;\r\n        let isEnabledChanged;\r\n        let isAutoExpandAllChanged;\r\n        if (\"masterDetail\" === args.name) {\r\n            args.name = \"dataSource\";\r\n            switch (args.fullName) {\r\n                case \"masterDetail\": {\r\n                    const value = args.value || {};\r\n                    const previousValue = args.previousValue || {};\r\n                    isEnabledChanged = value.enabled !== previousValue.enabled;\r\n                    isAutoExpandAllChanged = value.autoExpandAll !== previousValue.autoExpandAll;\r\n                    break\r\n                }\r\n                case \"masterDetail.template\":\r\n                    initMasterDetail(that);\r\n                    break;\r\n                case \"masterDetail.enabled\":\r\n                    isEnabledChanged = true;\r\n                    break;\r\n                case \"masterDetail.autoExpandAll\":\r\n                    isAutoExpandAllChanged = true\r\n            }\r\n            if (isEnabledChanged || isAutoExpandAllChanged) {\r\n                initMasterDetail(that)\r\n            }\r\n        }\r\n        super.optionChanged(args)\r\n    }\r\n};\r\nconst resizing = Base => class extends Base {\r\n    fireContentReadyAction() {\r\n        super.fireContentReadyAction.apply(this, arguments);\r\n        this._updateParentDataGrids(this.component.$element())\r\n    }\r\n    _updateParentDataGrids($element) {\r\n        const $masterDetailRow = $element.closest(\".dx-master-detail-row\");\r\n        if ($masterDetailRow.length) {\r\n            when(this._updateMasterDataGrid($masterDetailRow, $element)).done((() => {\r\n                this._updateParentDataGrids($masterDetailRow.parent())\r\n            }))\r\n        }\r\n    }\r\n    _updateMasterDataGrid($masterDetailRow, $detailElement) {\r\n        const masterRowOptions = $($masterDetailRow).data(\"options\");\r\n        const masterDataGrid = $($masterDetailRow).closest(`.${this.getWidgetContainerClass()}`).parent().data(\"dxDataGrid\");\r\n        if (masterRowOptions && masterDataGrid) {\r\n            return this._updateMasterDataGridCore(masterDataGrid, masterRowOptions)\r\n        }\r\n        return\r\n    }\r\n    _updateMasterDataGridCore(masterDataGrid, masterRowOptions) {\r\n        var _masterDataGrid$getVi, _masterDataGrid$getVi2;\r\n        const d = Deferred();\r\n        if (null !== (_masterDataGrid$getVi = masterDataGrid.getView(\"rowsView\")) && void 0 !== _masterDataGrid$getVi && null !== (_masterDataGrid$getVi2 = _masterDataGrid$getVi.isFixedColumns) && void 0 !== _masterDataGrid$getVi2 && _masterDataGrid$getVi2.call(_masterDataGrid$getVi)) {\r\n            this._updateFixedMasterDetailGrids(masterDataGrid, masterRowOptions.rowIndex, $(masterRowOptions.rowElement)).done(d.resolve)\r\n        } else {\r\n            if (true === masterDataGrid.option(\"scrolling.useNative\")) {\r\n                masterDataGrid.updateDimensions().done((() => d.resolve(true)));\r\n                return\r\n            }\r\n            const scrollable = masterDataGrid.getScrollable();\r\n            if (scrollable) {\r\n                null === scrollable || void 0 === scrollable || scrollable.update().done((() => d.resolve()))\r\n            } else {\r\n                d.resolve()\r\n            }\r\n        }\r\n        return d.promise()\r\n    }\r\n    _updateFixedMasterDetailGrids(masterDataGrid, masterRowIndex, $detailElement) {\r\n        const d = Deferred();\r\n        const $rows = $(masterDataGrid.getRowElement(masterRowIndex));\r\n        const $tables = $(masterDataGrid.getView(\"rowsView\").getTableElements());\r\n        const rowsNotEqual = 2 === (null === $rows || void 0 === $rows ? void 0 : $rows.length) && getHeight($rows.eq(0)) !== getHeight($rows.eq(1));\r\n        const tablesNotEqual = 2 === (null === $tables || void 0 === $tables ? void 0 : $tables.length) && getHeight($tables.eq(0)) !== getHeight($tables.eq(1));\r\n        if (rowsNotEqual || tablesNotEqual) {\r\n            const detailElementWidth = getWidth($detailElement);\r\n            masterDataGrid.updateDimensions().done((() => {\r\n                const isDetailHorizontalScrollCanBeShown = this.option(\"columnAutoWidth\") && true === masterDataGrid.option(\"scrolling.useNative\");\r\n                const isDetailGridWidthChanged = isDetailHorizontalScrollCanBeShown && detailElementWidth !== getWidth($detailElement);\r\n                if (isDetailHorizontalScrollCanBeShown && isDetailGridWidthChanged) {\r\n                    this.updateDimensions().done((() => d.resolve(true)))\r\n                } else {\r\n                    d.resolve(true)\r\n                }\r\n            }));\r\n            return d.promise()\r\n        }\r\n        return Deferred().resolve()\r\n    }\r\n    _toggleBestFitMode(isBestFit) {\r\n        super._toggleBestFitMode.apply(this, arguments);\r\n        if (this.option(\"masterDetail.template\")) {\r\n            const $rowsTable = this._rowsView.getTableElement();\r\n            if ($rowsTable) {\r\n                $rowsTable.find(\".dx-master-detail-cell\").css(\"maxWidth\", isBestFit ? 0 : \"\")\r\n            }\r\n        }\r\n    }\r\n};\r\nconst rowsView = Base => class extends Base {\r\n    _getCellTemplate(options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const editingController = this._editingController;\r\n        const isEditRow = editingController && editingController.isEditRow(options.rowIndex);\r\n        let template;\r\n        if (\"detail\" === column.command && !isEditRow) {\r\n            template = that.option(\"masterDetail.template\") || {\r\n                allowRenderToDetachedContainer: false,\r\n                render: that._getDefaultTemplate(column)\r\n            }\r\n        } else {\r\n            template = super._getCellTemplate.apply(that, arguments)\r\n        }\r\n        return template\r\n    }\r\n    _isDetailRow(row) {\r\n        return row && row.rowType && 0 === row.rowType.indexOf(\"detail\")\r\n    }\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (row && this._isDetailRow(row)) {\r\n            this.option(\"showRowLines\") && $row.addClass(\"dx-row-lines\");\r\n            $row.addClass(\"dx-master-detail-row\");\r\n            if (isDefined(row.visible)) {\r\n                $row.toggle(row.visible)\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n    _renderCells($row, options) {\r\n        const {\r\n            row: row\r\n        } = options;\r\n        if (row.rowType && this._isDetailRow(row)) {\r\n            if (this._needRenderCell(0, options.columnIndices)) {\r\n                this._renderMasterDetailCell($row, row, options)\r\n            }\r\n        } else {\r\n            super._renderCells.apply(this, arguments)\r\n        }\r\n    }\r\n    _renderMasterDetailCell($row, row, options) {\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        const $detailCell = this._renderCell($row, {\r\n            value: null,\r\n            row: row,\r\n            rowIndex: row.rowIndex,\r\n            column: {\r\n                command: \"detail\"\r\n            },\r\n            columnIndex: 0,\r\n            change: options.change\r\n        });\r\n        $detailCell.addClass(\"dx-cell-focus-disabled\").addClass(\"dx-master-detail-cell\").attr(\"colSpan\", visibleColumns.length);\r\n        const isEditForm = row.isEditing;\r\n        if (!isEditForm) {\r\n            $detailCell.attr(\"aria-roledescription\", messageLocalization.format(\"dxDataGrid-masterDetail\"))\r\n        }\r\n        return $detailCell\r\n    }\r\n};\r\nexport const masterDetailModule = {\r\n    defaultOptions: () => ({\r\n        masterDetail: {\r\n            enabled: false,\r\n            autoExpandAll: false,\r\n            template: null\r\n        }\r\n    }),\r\n    extenders: {\r\n        controllers: {\r\n            columns: columns,\r\n            data: dataMasterDetailExtenderMixin,\r\n            resizing: resizing\r\n        },\r\n        views: {\r\n            rowsView: rowsView\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}