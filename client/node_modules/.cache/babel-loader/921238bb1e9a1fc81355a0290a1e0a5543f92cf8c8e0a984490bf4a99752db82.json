{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editor_factory/m_editor_factory.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport positionUtils from \"../../../../common/core/animation/position\";\nimport { name as clickEventName } from \"../../../../common/core/events/click\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport pointerEvents from \"../../../../common/core/events/pointer\";\nimport { addNamespace, normalizeKeyName } from \"../../../../common/core/events/utils/index\";\nimport domAdapter from \"../../../../core/dom_adapter\";\nimport $ from \"../../../../core/renderer\";\nimport browser from \"../../../../core/utils/browser\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../../core/utils/position\";\nimport { getOuterHeight, getOuterWidth, setOuterHeight, setOuterWidth } from \"../../../../core/utils/size\";\nimport EditorFactoryMixin from \"../../../../ui/shared/ui.editor_factory_mixin\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nconst EDITOR_INLINE_BLOCK = \"dx-editor-inline-block\";\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nconst CELL_MODIFIED_CLASS = \"dx-cell-modified\";\nconst CELL_INVALID_CLASS = \"invalid\";\nconst FOCUSED_CELL_MODIFIED_CLASS = \"dx-focused-cell-modified\";\nconst FOCUSED_CELL_INVALID_CLASS = \"dx-focused-cell-invalid\";\nconst FOCUS_OVERLAY_CLASS = \"focus-overlay\";\nconst CONTENT_CLASS = \"content\";\nconst FOCUSED_ELEMENT_CLASS = \"dx-focused\";\nconst ROW_CLASS = \"dx-row\";\nconst MODULE_NAMESPACE = \"dxDataGridEditorFactory\";\nconst UPDATE_FOCUS_EVENTS = addNamespace([pointerEvents.down, \"focusin\", clickEventName].join(\" \"), MODULE_NAMESPACE);\nconst DX_HIDDEN = \"dx-hidden\";\nconst ViewControllerWithMixin = EditorFactoryMixin(modules.ViewController);\nexport class EditorFactory extends ViewControllerWithMixin {\n  init() {\n    this.createAction(\"onEditorPreparing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    this.createAction(\"onEditorPrepared\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    this._columnsResizerController = this.getController(\"columnsResizer\");\n    this._editingController = this.getController(\"editing\");\n    this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n    this._columnsController = this.getController(\"columns\");\n    this._validatingController = this.getController(\"validating\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._updateFocusHandler = this._updateFocusHandler || this.createAction(this._updateFocus.bind(this));\n    this._subscribedContainerRoot = this._getContainerRoot();\n    eventsEngine.on(this._subscribedContainerRoot, UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\n    this._attachContainerEventHandlers();\n  }\n  dispose() {\n    clearTimeout(this._focusTimeoutID);\n    clearTimeout(this._updateFocusTimeoutID);\n    eventsEngine.off(this._subscribedContainerRoot, UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\n  }\n  _getFocusedElement($dataGridElement) {\n    const rowSelector = this.option(\"focusedRowEnabled\") ? \"tr[tabindex]:focus\" : \"tr[tabindex]:not(.dx-data-row):focus\";\n    const focusedElementSelector = [\"td[tabindex]:focus\", `${rowSelector}`, \"input:focus\", \"button:focus\", \"textarea:focus\", \"div[tabindex]:focus\", \".dx-lookup-field:focus\", \".dx-checkbox:focus\", \".dx-switch:focus\", \".dx-dropdownbutton .dx-buttongroup:focus\", \".dx-adaptive-item-text:focus\"].join(\",\");\n    const $focusedElement = $dataGridElement.find(focusedElementSelector);\n    return this.elementIsInsideGrid($focusedElement) && $focusedElement;\n  }\n  _getFocusCellSelector() {\n    return \".dx-row > td\";\n  }\n  _updateFocusCore() {\n    const $dataGridElement = this.component && this.component.$element();\n    if ($dataGridElement) {\n      let $focus = this._getFocusedElement($dataGridElement);\n      if ($focus && $focus.length) {\n        let isHideBorder;\n        if (!$focus.hasClass(\"dx-cell-focus-disabled\") && !$focus.hasClass(\"dx-row\")) {\n          const $focusCell = $focus.closest(`${this._getFocusCellSelector()}, .dx-cell-focus-disabled`);\n          if ($focusCell.get(0) !== $focus.get(0)) {\n            isHideBorder = this._needHideBorder($focusCell);\n            $focus = $focusCell;\n          }\n        }\n        if ($focus.length && !$focus.hasClass(\"dx-cell-focus-disabled\")) {\n          this.focus($focus, isHideBorder);\n          return;\n        }\n      }\n    }\n    this.loseFocus();\n  }\n  _needHideBorder($element) {\n    const rowsViewElement = this._rowsView.element();\n    const isRowsView = $element.closest(rowsViewElement).length > 0;\n    const isEditing = this._editingController.isEditing();\n    return $element.hasClass(EDITOR_INLINE_BLOCK) || isRowsView && !isEditing;\n  }\n  _updateFocus(e) {\n    const that = this;\n    const isFocusOverlay = e && e.event && $(e.event.target).hasClass(that.addWidgetPrefix(\"focus-overlay\"));\n    that._isFocusOverlay = that._isFocusOverlay || isFocusOverlay;\n    clearTimeout(that._updateFocusTimeoutID);\n    that._updateFocusTimeoutID = setTimeout(() => {\n      delete that._updateFocusTimeoutID;\n      if (!that._isFocusOverlay) {\n        that._updateFocusCore();\n      }\n      that._isFocusOverlay = false;\n    });\n  }\n  updateFocusOverlaySize($element, position) {\n    $element.hide();\n    const location = positionUtils.calculate($element, extend({\n      collision: \"fit\"\n    }, position));\n    if (location.h.oversize > 0) {\n      setOuterWidth($element, getOuterWidth($element) - location.h.oversize);\n    }\n    if (location.v.oversize > 0) {\n      setOuterHeight($element, getOuterHeight($element) - location.v.oversize);\n    }\n    $element.show();\n  }\n  callbackNames() {\n    return [\"focused\"];\n  }\n  getFocusOverlayContainer($focusedElement) {\n    return $focusedElement.closest(`.${this.addWidgetPrefix(\"content\")}`);\n  }\n  getFocusOverlaySize($element) {\n    const elementRect = getBoundingRect($element.get(0));\n    return {\n      width: elementRect.right - elementRect.left + 1,\n      height: elementRect.bottom - elementRect.top + 1\n    };\n  }\n  updateFocusOverlay($element) {\n    let isHideBorder = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    if (isHideBorder) {\n      this._$focusOverlay.addClass(DX_HIDDEN);\n    } else if ($element.length) {\n      const align = browser.mozilla ? \"right bottom\" : \"left top\";\n      const isFocusedCellInvalid = $element.hasClass(this.addWidgetPrefix(\"invalid\"));\n      const isFocusedCellModified = $element.hasClass(\"dx-cell-modified\") && !isFocusedCellInvalid;\n      const $content = this.getFocusOverlayContainer($element);\n      const focusOverlaySize = this.getFocusOverlaySize($element);\n      this._$focusOverlay.removeClass(DX_HIDDEN).toggleClass(\"dx-focused-cell-invalid\", isFocusedCellInvalid).toggleClass(\"dx-focused-cell-modified\", isFocusedCellModified).appendTo($content);\n      setOuterHeight(this._$focusOverlay, focusOverlaySize.height);\n      setOuterWidth(this._$focusOverlay, focusOverlaySize.width);\n      const focusOverlayPosition = {\n        precise: true,\n        my: align,\n        at: align,\n        of: $element,\n        boundary: $content.length && $content\n      };\n      this.updateFocusOverlaySize(this._$focusOverlay, focusOverlayPosition);\n      positionUtils.setup(this._$focusOverlay, focusOverlayPosition);\n      this._$focusOverlay.css(\"visibility\", \"visible\");\n    }\n  }\n  renderFocusOverlay($element, isHideBorder) {\n    if (!gridCoreUtils.isElementInCurrentGrid(this, $element)) {\n      return;\n    }\n    if (!this._$focusOverlay) {\n      this._$focusOverlay = $(\"<div>\").addClass(this.addWidgetPrefix(\"focus-overlay\"));\n    }\n    this.updateFocusOverlay($element, isHideBorder);\n  }\n  focus($element, isHideBorder) {\n    const that = this;\n    if (void 0 === $element) {\n      return that._$focusedElement;\n    }\n    if ($element) {\n      if (!$element.is(that._$focusedElement)) {\n        that._$focusedElement && that._$focusedElement.removeClass(\"dx-focused\");\n      }\n      that._$focusedElement = $element;\n      clearTimeout(that._focusTimeoutID);\n      that._focusTimeoutID = setTimeout(() => {\n        delete that._focusTimeoutID;\n        that.renderFocusOverlay($element, isHideBorder);\n        $element.addClass(\"dx-focused\");\n        that.focused.fire($element);\n      });\n    }\n  }\n  refocus() {\n    const $focus = this.focus();\n    this.focus($focus);\n  }\n  resize() {\n    const $focusedElement = this._$focusedElement;\n    if ($focusedElement) {\n      this.focus($focusedElement);\n    }\n  }\n  loseFocus(skipValidator) {\n    this._$focusedElement && this._$focusedElement.removeClass(\"dx-focused\");\n    this._$focusedElement = null;\n    this._$focusOverlay && this._$focusOverlay.addClass(DX_HIDDEN);\n  }\n  _getContainerRoot() {\n    var _this$component;\n    const $container = null === (_this$component = this.component) || void 0 === _this$component ? void 0 : _this$component.$element();\n    const root = domAdapter.getRootNode(null === $container || void 0 === $container ? void 0 : $container.get(0));\n    if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && !root.host) {\n      return domAdapter.getDocument();\n    }\n    return root;\n  }\n  _attachContainerEventHandlers() {\n    const that = this;\n    const $container = that.component && that.component.$element();\n    if ($container) {\n      eventsEngine.on($container, addNamespace(\"keydown\", MODULE_NAMESPACE), e => {\n        if (\"tab\" === normalizeKeyName(e)) {\n          that._updateFocusHandler(e);\n        }\n      });\n    }\n  }\n  getFocusOverlay() {\n    return this._$focusOverlay;\n  }\n  hasOverlayElements() {\n    var _this$_$focusOverlay;\n    return !!(null !== (_this$_$focusOverlay = this._$focusOverlay) && void 0 !== _this$_$focusOverlay && _this$_$focusOverlay.length) && !this._$focusOverlay.hasClass(DX_HIDDEN);\n  }\n}\nexport const editorFactoryModule = {\n  defaultOptions: () => ({}),\n  controllers: {\n    editorFactory: EditorFactory\n  }\n};","map":{"version":3,"names":["positionUtils","name","clickEventName","eventsEngine","pointerEvents","addNamespace","normalizeKeyName","domAdapter","$","browser","extend","getBoundingRect","getOuterHeight","getOuterWidth","setOuterHeight","setOuterWidth","EditorFactoryMixin","modules","gridCoreUtils","EDITOR_INLINE_BLOCK","CELL_FOCUS_DISABLED_CLASS","CELL_MODIFIED_CLASS","CELL_INVALID_CLASS","FOCUSED_CELL_MODIFIED_CLASS","FOCUSED_CELL_INVALID_CLASS","FOCUS_OVERLAY_CLASS","CONTENT_CLASS","FOCUSED_ELEMENT_CLASS","ROW_CLASS","MODULE_NAMESPACE","UPDATE_FOCUS_EVENTS","down","join","DX_HIDDEN","ViewControllerWithMixin","ViewController","EditorFactory","init","createAction","excludeValidators","category","_columnsResizerController","getController","_editingController","_keyboardNavigationController","_columnsController","_validatingController","_rowsView","getView","_updateFocusHandler","_updateFocus","bind","_subscribedContainerRoot","_getContainerRoot","on","_attachContainerEventHandlers","dispose","clearTimeout","_focusTimeoutID","_updateFocusTimeoutID","off","_getFocusedElement","$dataGridElement","rowSelector","option","focusedElementSelector","$focusedElement","find","elementIsInsideGrid","_getFocusCellSelector","_updateFocusCore","component","$element","$focus","length","isHideBorder","hasClass","$focusCell","closest","get","_needHideBorder","focus","loseFocus","rowsViewElement","element","isRowsView","isEditing","e","that","isFocusOverlay","event","target","addWidgetPrefix","_isFocusOverlay","setTimeout","updateFocusOverlaySize","position","hide","location","calculate","collision","h","oversize","v","show","callbackNames","getFocusOverlayContainer","getFocusOverlaySize","elementRect","width","right","left","height","bottom","top","updateFocusOverlay","arguments","_$focusOverlay","addClass","align","mozilla","isFocusedCellInvalid","isFocusedCellModified","$content","focusOverlaySize","removeClass","toggleClass","appendTo","focusOverlayPosition","precise","my","at","of","boundary","setup","css","renderFocusOverlay","isElementInCurrentGrid","_$focusedElement","is","focused","fire","refocus","resize","skipValidator","_this$component","$container","root","getRootNode","nodeType","Node","DOCUMENT_FRAGMENT_NODE","host","getDocument","getFocusOverlay","hasOverlayElements","_this$_$focusOverlay","editorFactoryModule","defaultOptions","controllers","editorFactory"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/editor_factory/m_editor_factory.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editor_factory/m_editor_factory.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport positionUtils from \"../../../../common/core/animation/position\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport pointerEvents from \"../../../../common/core/events/pointer\";\r\nimport {\r\n    addNamespace,\r\n    normalizeKeyName\r\n} from \"../../../../common/core/events/utils/index\";\r\nimport domAdapter from \"../../../../core/dom_adapter\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    setOuterHeight,\r\n    setOuterWidth\r\n} from \"../../../../core/utils/size\";\r\nimport EditorFactoryMixin from \"../../../../ui/shared/ui.editor_factory_mixin\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nconst EDITOR_INLINE_BLOCK = \"dx-editor-inline-block\";\r\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nconst CELL_MODIFIED_CLASS = \"dx-cell-modified\";\r\nconst CELL_INVALID_CLASS = \"invalid\";\r\nconst FOCUSED_CELL_MODIFIED_CLASS = \"dx-focused-cell-modified\";\r\nconst FOCUSED_CELL_INVALID_CLASS = \"dx-focused-cell-invalid\";\r\nconst FOCUS_OVERLAY_CLASS = \"focus-overlay\";\r\nconst CONTENT_CLASS = \"content\";\r\nconst FOCUSED_ELEMENT_CLASS = \"dx-focused\";\r\nconst ROW_CLASS = \"dx-row\";\r\nconst MODULE_NAMESPACE = \"dxDataGridEditorFactory\";\r\nconst UPDATE_FOCUS_EVENTS = addNamespace([pointerEvents.down, \"focusin\", clickEventName].join(\" \"), MODULE_NAMESPACE);\r\nconst DX_HIDDEN = \"dx-hidden\";\r\nconst ViewControllerWithMixin = EditorFactoryMixin(modules.ViewController);\r\nexport class EditorFactory extends ViewControllerWithMixin {\r\n    init() {\r\n        this.createAction(\"onEditorPreparing\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"],\r\n            category: \"rendering\"\r\n        });\r\n        this.createAction(\"onEditorPrepared\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"],\r\n            category: \"rendering\"\r\n        });\r\n        this._columnsResizerController = this.getController(\"columnsResizer\");\r\n        this._editingController = this.getController(\"editing\");\r\n        this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._validatingController = this.getController(\"validating\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._updateFocusHandler = this._updateFocusHandler || this.createAction(this._updateFocus.bind(this));\r\n        this._subscribedContainerRoot = this._getContainerRoot();\r\n        eventsEngine.on(this._subscribedContainerRoot, UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\r\n        this._attachContainerEventHandlers()\r\n    }\r\n    dispose() {\r\n        clearTimeout(this._focusTimeoutID);\r\n        clearTimeout(this._updateFocusTimeoutID);\r\n        eventsEngine.off(this._subscribedContainerRoot, UPDATE_FOCUS_EVENTS, this._updateFocusHandler)\r\n    }\r\n    _getFocusedElement($dataGridElement) {\r\n        const rowSelector = this.option(\"focusedRowEnabled\") ? \"tr[tabindex]:focus\" : \"tr[tabindex]:not(.dx-data-row):focus\";\r\n        const focusedElementSelector = [\"td[tabindex]:focus\", `${rowSelector}`, \"input:focus\", \"button:focus\", \"textarea:focus\", \"div[tabindex]:focus\", \".dx-lookup-field:focus\", \".dx-checkbox:focus\", \".dx-switch:focus\", \".dx-dropdownbutton .dx-buttongroup:focus\", \".dx-adaptive-item-text:focus\"].join(\",\");\r\n        const $focusedElement = $dataGridElement.find(focusedElementSelector);\r\n        return this.elementIsInsideGrid($focusedElement) && $focusedElement\r\n    }\r\n    _getFocusCellSelector() {\r\n        return \".dx-row > td\"\r\n    }\r\n    _updateFocusCore() {\r\n        const $dataGridElement = this.component && this.component.$element();\r\n        if ($dataGridElement) {\r\n            let $focus = this._getFocusedElement($dataGridElement);\r\n            if ($focus && $focus.length) {\r\n                let isHideBorder;\r\n                if (!$focus.hasClass(\"dx-cell-focus-disabled\") && !$focus.hasClass(\"dx-row\")) {\r\n                    const $focusCell = $focus.closest(`${this._getFocusCellSelector()}, .dx-cell-focus-disabled`);\r\n                    if ($focusCell.get(0) !== $focus.get(0)) {\r\n                        isHideBorder = this._needHideBorder($focusCell);\r\n                        $focus = $focusCell\r\n                    }\r\n                }\r\n                if ($focus.length && !$focus.hasClass(\"dx-cell-focus-disabled\")) {\r\n                    this.focus($focus, isHideBorder);\r\n                    return\r\n                }\r\n            }\r\n        }\r\n        this.loseFocus()\r\n    }\r\n    _needHideBorder($element) {\r\n        const rowsViewElement = this._rowsView.element();\r\n        const isRowsView = $element.closest(rowsViewElement).length > 0;\r\n        const isEditing = this._editingController.isEditing();\r\n        return $element.hasClass(EDITOR_INLINE_BLOCK) || isRowsView && !isEditing\r\n    }\r\n    _updateFocus(e) {\r\n        const that = this;\r\n        const isFocusOverlay = e && e.event && $(e.event.target).hasClass(that.addWidgetPrefix(\"focus-overlay\"));\r\n        that._isFocusOverlay = that._isFocusOverlay || isFocusOverlay;\r\n        clearTimeout(that._updateFocusTimeoutID);\r\n        that._updateFocusTimeoutID = setTimeout((() => {\r\n            delete that._updateFocusTimeoutID;\r\n            if (!that._isFocusOverlay) {\r\n                that._updateFocusCore()\r\n            }\r\n            that._isFocusOverlay = false\r\n        }))\r\n    }\r\n    updateFocusOverlaySize($element, position) {\r\n        $element.hide();\r\n        const location = positionUtils.calculate($element, extend({\r\n            collision: \"fit\"\r\n        }, position));\r\n        if (location.h.oversize > 0) {\r\n            setOuterWidth($element, getOuterWidth($element) - location.h.oversize)\r\n        }\r\n        if (location.v.oversize > 0) {\r\n            setOuterHeight($element, getOuterHeight($element) - location.v.oversize)\r\n        }\r\n        $element.show()\r\n    }\r\n    callbackNames() {\r\n        return [\"focused\"]\r\n    }\r\n    getFocusOverlayContainer($focusedElement) {\r\n        return $focusedElement.closest(`.${this.addWidgetPrefix(\"content\")}`)\r\n    }\r\n    getFocusOverlaySize($element) {\r\n        const elementRect = getBoundingRect($element.get(0));\r\n        return {\r\n            width: elementRect.right - elementRect.left + 1,\r\n            height: elementRect.bottom - elementRect.top + 1\r\n        }\r\n    }\r\n    updateFocusOverlay($element) {\r\n        let isHideBorder = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        if (isHideBorder) {\r\n            this._$focusOverlay.addClass(DX_HIDDEN)\r\n        } else if ($element.length) {\r\n            const align = browser.mozilla ? \"right bottom\" : \"left top\";\r\n            const isFocusedCellInvalid = $element.hasClass(this.addWidgetPrefix(\"invalid\"));\r\n            const isFocusedCellModified = $element.hasClass(\"dx-cell-modified\") && !isFocusedCellInvalid;\r\n            const $content = this.getFocusOverlayContainer($element);\r\n            const focusOverlaySize = this.getFocusOverlaySize($element);\r\n            this._$focusOverlay.removeClass(DX_HIDDEN).toggleClass(\"dx-focused-cell-invalid\", isFocusedCellInvalid).toggleClass(\"dx-focused-cell-modified\", isFocusedCellModified).appendTo($content);\r\n            setOuterHeight(this._$focusOverlay, focusOverlaySize.height);\r\n            setOuterWidth(this._$focusOverlay, focusOverlaySize.width);\r\n            const focusOverlayPosition = {\r\n                precise: true,\r\n                my: align,\r\n                at: align,\r\n                of: $element,\r\n                boundary: $content.length && $content\r\n            };\r\n            this.updateFocusOverlaySize(this._$focusOverlay, focusOverlayPosition);\r\n            positionUtils.setup(this._$focusOverlay, focusOverlayPosition);\r\n            this._$focusOverlay.css(\"visibility\", \"visible\")\r\n        }\r\n    }\r\n    renderFocusOverlay($element, isHideBorder) {\r\n        if (!gridCoreUtils.isElementInCurrentGrid(this, $element)) {\r\n            return\r\n        }\r\n        if (!this._$focusOverlay) {\r\n            this._$focusOverlay = $(\"<div>\").addClass(this.addWidgetPrefix(\"focus-overlay\"))\r\n        }\r\n        this.updateFocusOverlay($element, isHideBorder)\r\n    }\r\n    focus($element, isHideBorder) {\r\n        const that = this;\r\n        if (void 0 === $element) {\r\n            return that._$focusedElement\r\n        }\r\n        if ($element) {\r\n            if (!$element.is(that._$focusedElement)) {\r\n                that._$focusedElement && that._$focusedElement.removeClass(\"dx-focused\")\r\n            }\r\n            that._$focusedElement = $element;\r\n            clearTimeout(that._focusTimeoutID);\r\n            that._focusTimeoutID = setTimeout((() => {\r\n                delete that._focusTimeoutID;\r\n                that.renderFocusOverlay($element, isHideBorder);\r\n                $element.addClass(\"dx-focused\");\r\n                that.focused.fire($element)\r\n            }))\r\n        }\r\n    }\r\n    refocus() {\r\n        const $focus = this.focus();\r\n        this.focus($focus)\r\n    }\r\n    resize() {\r\n        const $focusedElement = this._$focusedElement;\r\n        if ($focusedElement) {\r\n            this.focus($focusedElement)\r\n        }\r\n    }\r\n    loseFocus(skipValidator) {\r\n        this._$focusedElement && this._$focusedElement.removeClass(\"dx-focused\");\r\n        this._$focusedElement = null;\r\n        this._$focusOverlay && this._$focusOverlay.addClass(DX_HIDDEN)\r\n    }\r\n    _getContainerRoot() {\r\n        var _this$component;\r\n        const $container = null === (_this$component = this.component) || void 0 === _this$component ? void 0 : _this$component.$element();\r\n        const root = domAdapter.getRootNode(null === $container || void 0 === $container ? void 0 : $container.get(0));\r\n        if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && !root.host) {\r\n            return domAdapter.getDocument()\r\n        }\r\n        return root\r\n    }\r\n    _attachContainerEventHandlers() {\r\n        const that = this;\r\n        const $container = that.component && that.component.$element();\r\n        if ($container) {\r\n            eventsEngine.on($container, addNamespace(\"keydown\", MODULE_NAMESPACE), (e => {\r\n                if (\"tab\" === normalizeKeyName(e)) {\r\n                    that._updateFocusHandler(e)\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    getFocusOverlay() {\r\n        return this._$focusOverlay\r\n    }\r\n    hasOverlayElements() {\r\n        var _this$_$focusOverlay;\r\n        return !!(null !== (_this$_$focusOverlay = this._$focusOverlay) && void 0 !== _this$_$focusOverlay && _this$_$focusOverlay.length) && !this._$focusOverlay.hasClass(DX_HIDDEN)\r\n    }\r\n}\r\nexport const editorFactoryModule = {\r\n    defaultOptions: () => ({}),\r\n    controllers: {\r\n        editorFactory: EditorFactory\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}