{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/focus/m_focus.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../../core/renderer\";\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { isBoolean, isDefined } from \"../../../../core/utils/type\";\nimport { isNewRowTempKey } from \"../editing/m_editing_utils\";\nimport core from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nimport { UiGridCoreFocusUtils } from \"./m_focus_utils\";\nconst ROW_FOCUSED_CLASS = \"dx-row-focused\";\nconst FOCUSED_ROW_SELECTOR = \".dx-row.dx-row-focused\";\nconst TABLE_POSTFIX_CLASS = \"table\";\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nexport class FocusController extends core.ViewController {\n  getKeyboardController() {\n    return this.getController(\"keyboardNavigation\");\n  }\n  getDataController() {\n    return this.getController(\"data\");\n  }\n  init() {\n    this.component._optionsByReference.focusedRowKey = true;\n  }\n  optionChanged(args) {\n    const {\n      name: name,\n      value: value,\n      previousValue: previousValue\n    } = args;\n    switch (name) {\n      case \"focusedRowIndex\":\n        this._focusRowByIndex(value);\n        this.getKeyboardController()._fireFocusedRowChanged();\n        args.handled = true;\n        break;\n      case \"focusedRowKey\":\n        if (Array.isArray(value) && JSON.stringify(value) === JSON.stringify(previousValue)) {\n          return;\n        }\n        this._focusRowByKey(value);\n        this.getKeyboardController()._fireFocusedRowChanged();\n        args.handled = true;\n        break;\n      case \"focusedColumnIndex\":\n      case \"focusedRowEnabled\":\n      case \"autoNavigateToFocusedRow\":\n        args.handled = true;\n        break;\n      default:\n        super.optionChanged(args);\n    }\n  }\n  publicMethods() {\n    return [\"navigateToRow\", \"isRowFocused\"];\n  }\n  isAutoNavigateToFocusedRow() {\n    return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\");\n  }\n  _focusRowByIndex(index, operationTypes) {\n    if (!this.option(\"focusedRowEnabled\")) {\n      return;\n    }\n    const isEmptyData = this.getDataController().isEmpty();\n    const currentIndex = this._getCurrentFocusRowIndex(isEmptyData, index);\n    if (currentIndex < 0) {\n      if (isEmptyData || this.isAutoNavigateToFocusedRow()) {\n        this._resetFocusedRow();\n      }\n    } else {\n      this._focusRowByIndexCore(currentIndex, operationTypes);\n    }\n  }\n  _getCurrentFocusRowIndex(isEmptyData, index) {\n    let currentIndex = index;\n    if (void 0 === currentIndex) {\n      if (isEmptyData) {\n        currentIndex = -1;\n      } else {\n        currentIndex = this.option(\"focusedRowIndex\");\n      }\n    }\n    return currentIndex;\n  }\n  _focusRowByIndexCore(index, operationTypes) {\n    const pageSize = this.getDataController().pageSize();\n    const setKeyByIndex = () => {\n      if (this._isValidFocusedRowIndex(index)) {\n        let rowIndex = index - this.getDataController().getRowIndexOffset(true);\n        if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {\n          const lastItemIndex = this.getDataController()._getLastItemIndex();\n          rowIndex = Math.min(rowIndex, lastItemIndex);\n        }\n        const focusedRowKey = this.getDataController().getKeyByRowIndex(rowIndex, true);\n        if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\n          this.option(\"focusedRowKey\", focusedRowKey);\n        }\n      }\n    };\n    if (pageSize >= 0) {\n      if (!this._isLocalRowIndex(index)) {\n        const pageIndex = Math.floor(index / this.getDataController().pageSize());\n        when(this.getDataController().pageIndex(pageIndex), this.getDataController().waitReady()).done(() => {\n          setKeyByIndex();\n        });\n      } else {\n        setKeyByIndex();\n      }\n    }\n  }\n  _isLocalRowIndex(index) {\n    const isVirtualScrolling = this.getKeyboardController()._isVirtualScrolling();\n    if (isVirtualScrolling) {\n      const pageIndex = Math.floor(index / this.getDataController().pageSize());\n      const virtualItems = this.getDataController().virtualItemsCount();\n      const virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\n      const visibleRowsCount = this.getDataController().getVisibleRows().length + this.getDataController().getRowIndexOffset();\n      const visiblePagesCount = Math.ceil(visibleRowsCount / this.getDataController().pageSize());\n      return virtualItemsBegin <= index && visiblePagesCount > pageIndex;\n    }\n    return true;\n  }\n  _setFocusedRowKeyByIndex(index) {\n    if (this._isValidFocusedRowIndex(index)) {\n      const rowIndex = Math.min(index - this.getDataController().getRowIndexOffset(), this.getDataController().items().length - 1);\n      const focusedRowKey = this.getDataController().getKeyByRowIndex(rowIndex);\n      if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\n        this.option(\"focusedRowKey\", focusedRowKey);\n      }\n    }\n  }\n  _focusRowByKey(key) {\n    if (!isDefined(key)) {\n      this._resetFocusedRow();\n    } else {\n      this._navigateToRow(key, true);\n    }\n  }\n  _resetFocusedRow() {\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    const isFocusedRowKeyDefined = isDefined(focusedRowKey);\n    if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\n      return;\n    }\n    if (isFocusedRowKeyDefined) {\n      this.option(\"focusedRowKey\", null);\n    }\n    this.getKeyboardController().setFocusedRowIndex(-1);\n    this.option(\"focusedRowIndex\", -1);\n    this.getDataController().updateItems({\n      changeType: \"updateFocusedRow\",\n      focusedRowKey: null\n    });\n    this.getKeyboardController()._fireFocusedRowChanged();\n  }\n  _isValidFocusedRowIndex(rowIndex) {\n    const row = this.getDataController().getVisibleRows()[rowIndex];\n    return !row || \"data\" === row.rowType || \"group\" === row.rowType;\n  }\n  navigateToRow(key) {\n    if (!this.isAutoNavigateToFocusedRow()) {\n      this.option(\"focusedRowIndex\", -1);\n    }\n    return this._navigateToRow(key);\n  }\n  _navigateToRow(key, needFocusRow) {\n    const that = this;\n    const isAutoNavigate = that.isAutoNavigateToFocusedRow();\n    const d = new Deferred();\n    const rowsView = this.getView(\"rowsView\");\n    if (void 0 === key || !this.getDataController().dataSource()) {\n      return d.reject().promise();\n    }\n    const rowIndexByKey = that.getFocusedRowIndexByKey(key);\n    if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {\n      that._navigateTo(key, d, needFocusRow);\n    } else {\n      this.getDataController().getPageIndexByKey(key).done(pageIndex => {\n        if (pageIndex < 0) {\n          d.resolve(-1);\n          return;\n        }\n        if (pageIndex === this.getDataController().pageIndex()) {\n          this.getDataController().reload().done(() => {\n            if (that.isRowFocused(key) && this.getDataController().getRowIndexByKey(key) >= 0) {\n              d.resolve(that.getFocusedRowIndexByKey(key));\n            } else {\n              that._navigateTo(key, d, needFocusRow);\n            }\n          }).fail(d.reject);\n        } else {\n          this.getDataController().pageIndex(pageIndex).done(() => {\n            rowsView.waitAsyncTemplates(true).done(() => {\n              that._navigateTo(key, d, needFocusRow);\n            });\n          }).fail(d.reject);\n        }\n      }).fail(d.reject);\n    }\n    return d.promise();\n  }\n  _navigateTo(key, deferred, needFocusRow) {\n    const visibleRowIndex = this.getDataController().getRowIndexByKey(key);\n    const isVirtualRowRenderingMode = gridCoreUtils.isVirtualRowRendering(this);\n    const isAutoNavigate = this.isAutoNavigateToFocusedRow();\n    if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\n      this._navigateToVirtualRow(key, deferred, needFocusRow);\n    } else {\n      this._navigateToVisibleRow(key, deferred, needFocusRow);\n    }\n  }\n  _navigateToVisibleRow(key, deferred, needFocusRow) {\n    if (needFocusRow) {\n      this._triggerUpdateFocusedRow(key, deferred);\n    } else {\n      const focusedRowIndex = this.getFocusedRowIndexByKey(key);\n      this.getView(\"rowsView\").scrollToRowElement(key, deferred).done(() => {\n        deferred.resolve(focusedRowIndex);\n      });\n    }\n  }\n  _navigateToVirtualRow(key, deferred, needFocusRow) {\n    const rowsScrollController = this.getDataController()._rowsScrollController;\n    const rowIndex = gridCoreUtils.getIndexByKey(key, this.getDataController().items(true));\n    const scrollable = this.getView(\"rowsView\").getScrollable();\n    if (rowsScrollController && scrollable && rowIndex >= 0) {\n      const focusedRowIndex = rowIndex + this.getDataController().getRowIndexOffset(true);\n      const offset = rowsScrollController.getItemOffset(focusedRowIndex);\n      const triggerUpdateFocusedRow = () => {\n        if (this.getDataController().totalCount() && !this.getDataController().items().length) {\n          return;\n        }\n        this.component.off(\"contentReady\", triggerUpdateFocusedRow);\n        if (needFocusRow) {\n          this._triggerUpdateFocusedRow(key, deferred);\n        } else {\n          deferred.resolve(focusedRowIndex);\n        }\n      };\n      this.component.on(\"contentReady\", triggerUpdateFocusedRow);\n      this.getView(\"rowsView\").scrollTopPosition(offset);\n    } else {\n      deferred.resolve(-1);\n    }\n  }\n  _triggerUpdateFocusedRow(key, deferred) {\n    const focusedRowIndex = this.getFocusedRowIndexByKey(key);\n    if (this._isValidFocusedRowIndex(focusedRowIndex)) {\n      let d;\n      if (this.option(\"focusedRowEnabled\")) {\n        this.getDataController().updateItems({\n          changeType: \"updateFocusedRow\",\n          focusedRowKey: key\n        });\n      } else {\n        d = this.getView(\"rowsView\").scrollToRowElement(key);\n      }\n      when(d).done(() => {\n        this.getKeyboardController().setFocusedRowIndex(focusedRowIndex);\n        deferred && deferred.resolve(focusedRowIndex);\n      });\n    } else {\n      deferred && deferred.resolve(-1);\n    }\n  }\n  getFocusedRowIndexByKey(key) {\n    const loadedRowIndex = this.getDataController().getRowIndexByKey(key, true);\n    return loadedRowIndex >= 0 ? loadedRowIndex + this.getDataController().getRowIndexOffset(true) : -1;\n  }\n  _focusRowByKeyOrIndex() {\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    let currentFocusedRowIndex = this.option(\"focusedRowIndex\");\n    if (isDefined(focusedRowKey)) {\n      const visibleRowIndex = this.getDataController().getRowIndexByKey(focusedRowKey);\n      if (visibleRowIndex >= 0) {\n        if (this.getKeyboardController()._isVirtualScrolling()) {\n          currentFocusedRowIndex = visibleRowIndex + this.getDataController().getRowIndexOffset();\n        }\n        this.getKeyboardController().setFocusedRowIndex(currentFocusedRowIndex);\n        this._triggerUpdateFocusedRow(focusedRowKey);\n      } else {\n        this._navigateToRow(focusedRowKey, true).done(focusedRowIndex => {\n          if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\n            this._focusRowByIndex();\n          } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {\n            this.getKeyboardController().setFocusedRowIndex(focusedRowIndex);\n          }\n        });\n      }\n    } else if (currentFocusedRowIndex >= 0) {\n      this._focusRowByIndex(currentFocusedRowIndex);\n    }\n  }\n  isRowFocused(key) {\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    if (isDefined(focusedRowKey)) {\n      return equalByValue(key, this.option(\"focusedRowKey\"));\n    }\n    return;\n  }\n  updateFocusedRow(e) {\n    const that = this;\n    const focusedRowIndex = that.getDataController().getRowIndexByKey(e.focusedRowKey);\n    const rowsView = that.getView(\"rowsView\");\n    let $tableElement;\n    let $mainRow;\n    each(rowsView.getTableElements(), (index, element) => {\n      const isMainTable = 0 === index;\n      $tableElement = $(element);\n      that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\n      const $row = that._prepareFocusedRow({\n        changedItem: that.getDataController().getVisibleRows()[focusedRowIndex],\n        $tableElement: $tableElement,\n        focusedRowIndex: focusedRowIndex\n      });\n      if (isMainTable) {\n        $mainRow = $row;\n      }\n    });\n    if (!e.preventScroll && $mainRow) {\n      rowsView.scrollToElementVertically($mainRow);\n    }\n  }\n  _clearPreviousFocusedRow($tableElement, focusedRowIndex) {\n    const $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter((_, focusedRow) => {\n      const $focusedRowTable = $(focusedRow).closest(`.${this.addWidgetPrefix(\"table\")}`);\n      return $tableElement.is($focusedRowTable);\n    });\n    $prevRowFocusedElement.removeClass(\"dx-row-focused\").removeClass(\"dx-cell-focus-disabled\").removeAttr(\"tabindex\");\n    $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\n    if (0 !== focusedRowIndex) {\n      const $firstRow = $(this.getView(\"rowsView\").getRowElement(0));\n      $firstRow.removeClass(\"dx-cell-focus-disabled\").removeAttr(\"tabIndex\");\n    }\n  }\n  _prepareFocusedRow(options) {\n    let $row;\n    const {\n      changedItem: changedItem\n    } = options;\n    if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\n      const {\n        focusedRowIndex: focusedRowIndex\n      } = options;\n      const {\n        $tableElement: $tableElement\n      } = options;\n      const tabIndex = this.option(\"tabindex\") || 0;\n      const rowsView = this.getView(\"rowsView\");\n      $row = $(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\n      $row.addClass(\"dx-row-focused\").attr(\"tabindex\", tabIndex);\n    }\n    return $row;\n  }\n}\nconst keyboardNavigation = Base => class extends Base {\n  init() {\n    const rowIndex = this.option(\"focusedRowIndex\");\n    const columnIndex = this.option(\"focusedColumnIndex\");\n    this.createAction(\"onFocusedRowChanging\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onFocusedRowChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onFocusedCellChanging\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onFocusedCellChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    super.init();\n    this.setRowFocusType();\n    this._focusedCellPosition = {};\n    if (isDefined(rowIndex) && rowIndex >= 0) {\n      this._focusedCellPosition.rowIndex = rowIndex;\n    }\n    if (isDefined(columnIndex) && columnIndex >= 0) {\n      this._focusedCellPosition.columnIndex = columnIndex;\n    }\n  }\n  setFocusedRowIndex(rowIndex) {\n    super.setFocusedRowIndex(rowIndex);\n    this.option(\"focusedRowIndex\", rowIndex);\n  }\n  setFocusedColumnIndex(columnIndex) {\n    super.setFocusedColumnIndex(columnIndex);\n    this.option(\"focusedColumnIndex\", columnIndex);\n  }\n  _escapeKeyHandler(eventArgs, isEditing) {\n    if (isEditing || !this.option(\"focusedRowEnabled\")) {\n      return super._escapeKeyHandler(eventArgs, isEditing);\n    }\n    if (this.isCellFocusType()) {\n      this.setRowFocusType();\n      this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);\n      return true;\n    }\n    return false;\n  }\n  _updateFocusedCellPosition($cell, direction) {\n    const position = super._updateFocusedCellPosition($cell, direction);\n    if (position && position.columnIndex >= 0) {\n      this._fireFocusedCellChanged($cell);\n    }\n    return position;\n  }\n};\nconst editorFactory = Base => class extends Base {\n  renderFocusOverlay($element, isHideBorder) {\n    var _this$_keyboardNaviga;\n    const focusedRowEnabled = this.option(\"focusedRowEnabled\");\n    let $cell;\n    if (!focusedRowEnabled || !(null !== (_this$_keyboardNaviga = this._keyboardNavigationController) && void 0 !== _this$_keyboardNaviga && _this$_keyboardNaviga.isRowFocusType()) || this._editingController.isEditing()) {\n      super.renderFocusOverlay($element, isHideBorder);\n    } else if (focusedRowEnabled) {\n      const isRowElement = \"row\" === this._keyboardNavigationController._getElementType($element);\n      if (isRowElement && !$element.hasClass(\"dx-row-focused\")) {\n        $cell = this._keyboardNavigationController.getFirstValidCellInRow($element);\n        this._keyboardNavigationController.focus($cell);\n      }\n    }\n  }\n};\nconst columns = Base => class extends Base {\n  getSortDataSourceParameters(_, sortByKey) {\n    let result = super.getSortDataSourceParameters.apply(this, arguments);\n    const dataSource = this._dataController._dataSource;\n    const store = this._dataController.store();\n    let key = store && store.key();\n    const remoteOperations = dataSource && dataSource.remoteOperations() || {};\n    const isLocalOperations = Object.keys(remoteOperations).every(operationName => !remoteOperations[operationName]);\n    if (key && (this.option(\"focusedRowEnabled\") && false !== this._focusController.isAutoNavigateToFocusedRow() || sortByKey)) {\n      key = Array.isArray(key) ? key : [key];\n      const notSortedKeys = key.filter(key => !this.columnOption(key, \"sortOrder\"));\n      if (notSortedKeys.length) {\n        result = result || [];\n        if (isLocalOperations) {\n          result.push({\n            selector: dataSource.getDataIndexGetter(),\n            desc: false\n          });\n        } else {\n          notSortedKeys.forEach(notSortedKey => result.push({\n            selector: notSortedKey,\n            desc: false\n          }));\n        }\n      }\n    }\n    return result;\n  }\n};\nconst data = Base => class extends Base {\n  constructor() {\n    super(...arguments);\n    this._needToUpdateFocusedRowByIndex = false;\n  }\n  _applyChange(change) {\n    if (change && \"updateFocusedRow\" === change.changeType) {\n      return;\n    }\n    return super._applyChange.apply(this, arguments);\n  }\n  _fireChanged(e) {\n    super._fireChanged(e);\n    if (this.option(\"focusedRowEnabled\") && this._dataSource) {\n      const isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\n      const isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\n      if (this._needToUpdateFocusedRowByIndex) {\n        this._needToUpdateFocusedRowByIndex = false;\n        this._focusController._focusRowByIndex();\n      } else if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\n        this._updatePageIndexes();\n        this._updateFocusedRow(e);\n      } else if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\n        this._updatePageIndexes();\n      } else if (\"update\" === e.changeType && e.repaintChangesOnly) {\n        this._updateFocusedRow(e);\n      }\n    }\n  }\n  _handleDataPushed(changes) {\n    super._handleDataPushed(changes);\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    this._needToUpdateFocusedRowByIndex = null === changes || void 0 === changes ? void 0 : changes.some(change => \"remove\" === change.type && equalByValue(change.key, focusedRowKey));\n  }\n  _updatePageIndexes() {\n    const prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\n    const renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\n    this._lastRenderingPageIndex = renderingPageIndex;\n    this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex;\n  }\n  isPagingByRendering() {\n    return this._isPagingByRendering;\n  }\n  _updateFocusedRow(e) {\n    const operationTypes = e.operationTypes || {};\n    const {\n      reload: reload,\n      fullReload: fullReload,\n      pageIndex: pageIndex,\n      paging: paging\n    } = operationTypes;\n    const isVirtualScrolling = this._keyboardNavigationController._isVirtualScrolling();\n    const pagingWithoutVirtualScrolling = paging && !isVirtualScrolling;\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    const isAutoNavigate = this._focusController.isAutoNavigateToFocusedRow();\n    const isReload = reload && false === pageIndex;\n    if (isReload && !fullReload && isDefined(focusedRowKey)) {\n      this._focusController._navigateToRow(focusedRowKey, true).done(focusedRowIndex => {\n        if (focusedRowIndex < 0) {\n          this._focusController._focusRowByIndex(void 0, operationTypes);\n        }\n      });\n    } else if (pagingWithoutVirtualScrolling && isAutoNavigate) {\n      const rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\n      const focusedRowIndex = this.option(\"focusedRowIndex\");\n      const isValidRowIndexByKey = rowIndexByKey >= 0;\n      const isValidFocusedRowIndex = focusedRowIndex >= 0;\n      const isSameRowIndex = focusedRowIndex === rowIndexByKey;\n      if (isValidFocusedRowIndex && (isSameRowIndex || !isValidRowIndexByKey)) {\n        this._focusController._focusRowByIndex(focusedRowIndex, operationTypes);\n      }\n    } else if (pagingWithoutVirtualScrolling && !isAutoNavigate && this.getRowIndexByKey(focusedRowKey) < 0) {\n      this.option(\"focusedRowIndex\", -1);\n    } else if (operationTypes.fullReload) {\n      this._focusController._focusRowByKeyOrIndex();\n    }\n  }\n  getPageIndexByKey(key) {\n    const that = this;\n    const d = new Deferred();\n    that.getGlobalRowIndexByKey(key).done(globalIndex => {\n      d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1);\n    }).fail(d.reject);\n    return d.promise();\n  }\n  getGlobalRowIndexByKey(key) {\n    if (this._dataSource.group()) {\n      return this._calculateGlobalRowIndexByGroupedData(key);\n    }\n    return this._calculateGlobalRowIndexByFlatData(key);\n  }\n  _calculateGlobalRowIndexByFlatData(key, groupFilter, useGroup) {\n    const that = this;\n    const deferred = new Deferred();\n    const dataSource = that._dataSource;\n    if (Array.isArray(key) || isNewRowTempKey(key)) {\n      return deferred.resolve(-1).promise();\n    }\n    let filter = that._generateFilterByKey(key);\n    dataSource.load({\n      filter: that._concatWithCombinedFilter(filter),\n      skip: 0,\n      take: 1\n    }).done(data => {\n      if (data.length > 0) {\n        filter = that._generateOperationFilterByKey(key, data[0], useGroup);\n        dataSource.load({\n          filter: that._concatWithCombinedFilter(filter, groupFilter),\n          skip: 0,\n          take: 1,\n          requireTotalCount: true\n        }).done((_, extra) => {\n          deferred.resolve(extra.totalCount);\n        });\n      } else {\n        deferred.resolve(-1);\n      }\n    });\n    return deferred.promise();\n  }\n  _concatWithCombinedFilter(filter, groupFilter) {\n    const combinedFilter = this.getCombinedFilter();\n    return gridCoreUtils.combineFilters([filter, combinedFilter, groupFilter]);\n  }\n  _generateBooleanFilter(selector, value, sortInfo) {\n    const {\n      desc: desc\n    } = sortInfo;\n    switch (true) {\n      case false === value && desc:\n        return [selector, \"=\", true];\n      case false === value && !desc:\n        return [selector, \"=\", null];\n      case true === value && !desc:\n      case !isBoolean(value) && desc:\n        return [selector, \"<>\", value];\n      default:\n        return;\n    }\n  }\n  _generateOperationFilterByKey(key, rowData, useGroup) {\n    const that = this;\n    const dateSerializationFormat = that.option(\"dateSerializationFormat\");\n    const isRemoteFiltering = that._dataSource.remoteOperations().filtering;\n    const isRemoteSorting = that._dataSource.remoteOperations().sorting;\n    let filter = that._generateFilterByKey(key, \"<\");\n    let sort = that._columnsController.getSortDataSourceParameters(!isRemoteFiltering, true);\n    if (useGroup) {\n      const group = that._columnsController.getGroupDataSourceParameters(!isRemoteFiltering);\n      if (group) {\n        sort = sort ? group.concat(sort) : group;\n      }\n    }\n    if (sort) {\n      sort.slice().reverse().forEach(sortInfo => {\n        const {\n          selector: selector,\n          desc: desc,\n          compare: compare\n        } = sortInfo;\n        const {\n          getter: getter,\n          rawValue: rawValue,\n          safeValue: safeValue\n        } = UiGridCoreFocusUtils.getSortFilterValue(sortInfo, rowData, {\n          isRemoteFiltering: isRemoteFiltering,\n          dateSerializationFormat: dateSerializationFormat,\n          getSelector: selector => that._columnsController.columnOption(selector, \"selector\")\n        });\n        filter = [[selector, \"=\", safeValue], \"and\", filter];\n        if (null === rawValue || isBoolean(rawValue)) {\n          const booleanFilter = that._generateBooleanFilter(selector, safeValue, desc);\n          if (booleanFilter) {\n            filter = [booleanFilter, \"or\", filter];\n          }\n        } else {\n          const filterOperation = desc ? \">\" : \"<\";\n          let sortFilter;\n          if (compare && !isRemoteSorting) {\n            sortFilter = data => {\n              if (\"<\" === filterOperation) {\n                return compare(rawValue, getter(data)) >= 1;\n              }\n              return compare(rawValue, getter(data)) <= -1;\n            };\n          } else {\n            sortFilter = [selector, filterOperation, safeValue];\n            if (!desc) {\n              sortFilter = [sortFilter, \"or\", [selector, \"=\", null]];\n            }\n          }\n          filter = [sortFilter, \"or\", filter];\n        }\n      });\n    }\n    return filter;\n  }\n  _generateFilterByKey(key, operation) {\n    const dataSourceKey = this._dataSource.key();\n    let filter = [];\n    if (!operation) {\n      operation = \"=\";\n    }\n    if (Array.isArray(dataSourceKey)) {\n      for (let i = 0; i < dataSourceKey.length; ++i) {\n        const keyPart = key[dataSourceKey[i]];\n        if (keyPart) {\n          if (filter.length > 0) {\n            filter.push(\"and\");\n          }\n          filter.push([dataSourceKey[i], operation, keyPart]);\n        }\n      }\n    } else {\n      filter = [dataSourceKey, operation, key];\n    }\n    return filter;\n  }\n  _getLastItemIndex() {\n    return this.items(true).length - 1;\n  }\n};\nconst editing = Base => class extends Base {\n  _deleteRowCore(rowIndex) {\n    const deferred = super._deleteRowCore.apply(this, arguments);\n    const rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n    deferred.done(() => {\n      const rowIndex = this._dataController.getRowIndexByKey(rowKey);\n      const visibleRows = this._dataController.getVisibleRows();\n      if (-1 === rowIndex && !visibleRows.length) {\n        this._focusController._resetFocusedRow();\n      }\n    });\n  }\n};\nconst rowsView = Base => class extends Base {\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    if (this.option(\"focusedRowEnabled\") && row) {\n      if (this._focusController.isRowFocused(row.key)) {\n        $row.addClass(\"dx-row-focused\");\n      }\n    }\n    return $row;\n  }\n  _checkRowKeys(options) {\n    super._checkRowKeys.apply(this, arguments);\n    if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\n      const store = this._dataController.store();\n      if (store && !store.key()) {\n        this._dataController.fireError(\"E1042\", \"Row focusing\");\n      }\n    }\n  }\n  _update(change) {\n    if (\"updateFocusedRow\" === change.changeType) {\n      if (this.option(\"focusedRowEnabled\")) {\n        this._focusController.updateFocusedRow(change);\n      }\n    } else {\n      super._update(change);\n    }\n  }\n  updateFocusElementTabIndex($cellElements, preventScroll) {\n    if (this.option(\"focusedRowEnabled\")) {\n      this._setFocusedRowElementTabIndex(preventScroll);\n    } else {\n      super.updateFocusElementTabIndex($cellElements);\n    }\n  }\n  _setFocusedRowElementTabIndex(preventScroll) {\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    const tabIndex = this.option(\"tabIndex\") ?? 0;\n    const columnsController = this._columnsController;\n    let rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n    let columnIndex = this.option(\"focusedColumnIndex\");\n    const $row = this._findRowElementForTabIndex();\n    const dataSource = this._dataController.dataSource();\n    const operationTypes = null === dataSource || void 0 === dataSource ? void 0 : dataSource.operationTypes();\n    const isPaging = !operationTypes || operationTypes.paging;\n    if (!isDefined(this._scrollToFocusOnResize)) {\n      this._scrollToFocusOnResize = () => {\n        this.scrollToElementVertically(this._findRowElementForTabIndex());\n        this.resizeCompleted.remove(this._scrollToFocusOnResize);\n      };\n    }\n    $row.attr(\"tabIndex\", tabIndex);\n    const rowIndexFromOption = this.option(\"focusedRowIndex\") - this._dataController.getRowIndexOffset(true);\n    if (!isPaging && rowIndex < 0 && rowIndexFromOption >= 0) {\n      this._focusController.updateFocusedRow({\n        focusedRowKey: focusedRowKey,\n        preventScroll: preventScroll\n      });\n    }\n    if (rowIndex >= 0 && !preventScroll) {\n      if (columnIndex < 0) {\n        columnIndex = 0;\n      }\n      rowIndex += this._dataController.getRowIndexOffset();\n      columnIndex += columnsController.getColumnIndexOffset();\n      this._keyboardNavigationController.setFocusedCellPosition(rowIndex, columnIndex);\n      if (this._focusController.isAutoNavigateToFocusedRow()) {\n        if (!isPaging && !this._dataController.isPagingByRendering()) {\n          this.resizeCompleted.remove(this._scrollToFocusOnResize);\n          this.resizeCompleted.add(this._scrollToFocusOnResize);\n        }\n      }\n    }\n  }\n  _findRowElementForTabIndex() {\n    const focusedRowKey = this.option(\"focusedRowKey\");\n    const rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n    return $(this.getRowElement(rowIndex >= 0 ? rowIndex : 0));\n  }\n  scrollToRowElement(key) {\n    const rowIndex = this._dataController.getRowIndexByKey(key);\n    const $row = $(this.getRow(rowIndex));\n    return this.scrollToElementVertically($row);\n  }\n  scrollToElementVertically($row) {\n    const scrollable = this.getScrollable();\n    if (scrollable && $row.length) {\n      const position = scrollable.getScrollElementPosition($row, \"vertical\");\n      return this.scrollTopPosition(position);\n    }\n    return new Deferred().resolve();\n  }\n  scrollTopPosition(scrollTop) {\n    const d = new Deferred();\n    const scrollable = this.getScrollable();\n    if (scrollable) {\n      const currentScrollTop = scrollable.scrollTop();\n      const scrollHandler = () => {\n        scrollable.off(\"scroll\", scrollHandler);\n        d.resolve();\n      };\n      if (scrollTop !== currentScrollTop) {\n        scrollable.on(\"scroll\", scrollHandler);\n        this._dataController.resetFilterApplying();\n        scrollable.scrollTo({\n          top: scrollTop\n        });\n        return d.promise();\n      }\n    }\n    return d.resolve();\n  }\n};\nexport const focusModule = {\n  defaultOptions: () => ({\n    focusedRowEnabled: false,\n    autoNavigateToFocusedRow: true,\n    focusedRowKey: null,\n    focusedRowIndex: -1,\n    focusedColumnIndex: -1\n  }),\n  controllers: {\n    focus: FocusController\n  },\n  extenders: {\n    controllers: {\n      keyboardNavigation: keyboardNavigation,\n      editorFactory: editorFactory,\n      columns: columns,\n      data: data,\n      editing: editing\n    },\n    views: {\n      rowsView: rowsView\n    }\n  }\n};","map":{"version":3,"names":["$","equalByValue","Deferred","when","each","isBoolean","isDefined","isNewRowTempKey","core","gridCoreUtils","UiGridCoreFocusUtils","ROW_FOCUSED_CLASS","FOCUSED_ROW_SELECTOR","TABLE_POSTFIX_CLASS","CELL_FOCUS_DISABLED_CLASS","FocusController","ViewController","getKeyboardController","getController","getDataController","init","component","_optionsByReference","focusedRowKey","optionChanged","args","name","value","previousValue","_focusRowByIndex","_fireFocusedRowChanged","handled","Array","isArray","JSON","stringify","_focusRowByKey","publicMethods","isAutoNavigateToFocusedRow","option","index","operationTypes","isEmptyData","isEmpty","currentIndex","_getCurrentFocusRowIndex","_resetFocusedRow","_focusRowByIndexCore","pageSize","setKeyByIndex","_isValidFocusedRowIndex","rowIndex","getRowIndexOffset","paging","filtering","lastItemIndex","_getLastItemIndex","Math","min","getKeyByRowIndex","isRowFocused","_isLocalRowIndex","pageIndex","floor","waitReady","done","isVirtualScrolling","_isVirtualScrolling","virtualItems","virtualItemsCount","virtualItemsBegin","begin","visibleRowsCount","getVisibleRows","length","visiblePagesCount","ceil","_setFocusedRowKeyByIndex","items","key","_navigateToRow","isFocusedRowKeyDefined","setFocusedRowIndex","updateItems","changeType","row","rowType","navigateToRow","needFocusRow","that","isAutoNavigate","d","rowsView","getView","dataSource","reject","promise","rowIndexByKey","getFocusedRowIndexByKey","_navigateTo","getPageIndexByKey","resolve","reload","getRowIndexByKey","fail","waitAsyncTemplates","deferred","visibleRowIndex","isVirtualRowRenderingMode","isVirtualRowRendering","_navigateToVirtualRow","_navigateToVisibleRow","_triggerUpdateFocusedRow","focusedRowIndex","scrollToRowElement","rowsScrollController","_rowsScrollController","getIndexByKey","scrollable","getScrollable","offset","getItemOffset","triggerUpdateFocusedRow","totalCount","off","on","scrollTopPosition","loadedRowIndex","_focusRowByKeyOrIndex","currentFocusedRowIndex","updateFocusedRow","e","$tableElement","$mainRow","getTableElements","element","isMainTable","_clearPreviousFocusedRow","$row","_prepareFocusedRow","changedItem","preventScroll","scrollToElementVertically","$prevRowFocusedElement","find","filter","_","focusedRow","$focusedRowTable","closest","addWidgetPrefix","is","removeClass","removeAttr","children","$firstRow","getRowElement","options","tabIndex","_getRowElements","eq","addClass","attr","keyboardNavigation","Base","columnIndex","createAction","excludeValidators","setRowFocusType","_focusedCellPosition","setFocusedColumnIndex","_escapeKeyHandler","eventArgs","isEditing","isCellFocusType","_focus","_getCellElementFromTarget","originalEvent","target","_updateFocusedCellPosition","$cell","direction","position","_fireFocusedCellChanged","editorFactory","renderFocusOverlay","$element","isHideBorder","_this$_keyboardNaviga","focusedRowEnabled","_keyboardNavigationController","isRowFocusType","_editingController","isRowElement","_getElementType","hasClass","getFirstValidCellInRow","focus","columns","getSortDataSourceParameters","sortByKey","result","apply","arguments","_dataController","_dataSource","store","remoteOperations","isLocalOperations","Object","keys","every","operationName","_focusController","notSortedKeys","columnOption","push","selector","getDataIndexGetter","desc","forEach","notSortedKey","data","constructor","_needToUpdateFocusedRowByIndex","_applyChange","change","_fireChanged","isPartialUpdate","repaintChangesOnly","isPartialUpdateWithDeleting","changeTypes","indexOf","_updatePageIndexes","_updateFocusedRow","_handleDataPushed","changes","some","type","prevRenderingPageIndex","_lastRenderingPageIndex","renderingPageIndex","_isPagingByRendering","isPagingByRendering","fullReload","pagingWithoutVirtualScrolling","isReload","isValidRowIndexByKey","isValidFocusedRowIndex","isSameRowIndex","getGlobalRowIndexByKey","globalIndex","group","_calculateGlobalRowIndexByGroupedData","_calculateGlobalRowIndexByFlatData","groupFilter","useGroup","_generateFilterByKey","load","_concatWithCombinedFilter","skip","take","_generateOperationFilterByKey","requireTotalCount","extra","combinedFilter","getCombinedFilter","combineFilters","_generateBooleanFilter","sortInfo","rowData","dateSerializationFormat","isRemoteFiltering","isRemoteSorting","sorting","sort","_columnsController","getGroupDataSourceParameters","concat","slice","reverse","compare","getter","rawValue","safeValue","getSortFilterValue","getSelector","booleanFilter","filterOperation","sortFilter","operation","dataSourceKey","i","keyPart","editing","_deleteRowCore","rowKey","visibleRows","_createRow","_checkRowKeys","fireError","_update","updateFocusElementTabIndex","$cellElements","_setFocusedRowElementTabIndex","columnsController","_findRowElementForTabIndex","isPaging","_scrollToFocusOnResize","resizeCompleted","remove","rowIndexFromOption","getColumnIndexOffset","setFocusedCellPosition","add","getRow","getScrollElementPosition","scrollTop","currentScrollTop","scrollHandler","resetFilterApplying","scrollTo","top","focusModule","defaultOptions","autoNavigateToFocusedRow","focusedColumnIndex","controllers","extenders","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/focus/m_focus.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/focus/m_focus.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isBoolean,\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    isNewRowTempKey\r\n} from \"../editing/m_editing_utils\";\r\nimport core from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    UiGridCoreFocusUtils\r\n} from \"./m_focus_utils\";\r\nconst ROW_FOCUSED_CLASS = \"dx-row-focused\";\r\nconst FOCUSED_ROW_SELECTOR = \".dx-row.dx-row-focused\";\r\nconst TABLE_POSTFIX_CLASS = \"table\";\r\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nexport class FocusController extends core.ViewController {\r\n    getKeyboardController() {\r\n        return this.getController(\"keyboardNavigation\")\r\n    }\r\n    getDataController() {\r\n        return this.getController(\"data\")\r\n    }\r\n    init() {\r\n        this.component._optionsByReference.focusedRowKey = true\r\n    }\r\n    optionChanged(args) {\r\n        const {\r\n            name: name,\r\n            value: value,\r\n            previousValue: previousValue\r\n        } = args;\r\n        switch (name) {\r\n            case \"focusedRowIndex\":\r\n                this._focusRowByIndex(value);\r\n                this.getKeyboardController()._fireFocusedRowChanged();\r\n                args.handled = true;\r\n                break;\r\n            case \"focusedRowKey\":\r\n                if (Array.isArray(value) && JSON.stringify(value) === JSON.stringify(previousValue)) {\r\n                    return\r\n                }\r\n                this._focusRowByKey(value);\r\n                this.getKeyboardController()._fireFocusedRowChanged();\r\n                args.handled = true;\r\n                break;\r\n            case \"focusedColumnIndex\":\r\n            case \"focusedRowEnabled\":\r\n            case \"autoNavigateToFocusedRow\":\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                super.optionChanged(args)\r\n        }\r\n    }\r\n    publicMethods() {\r\n        return [\"navigateToRow\", \"isRowFocused\"]\r\n    }\r\n    isAutoNavigateToFocusedRow() {\r\n        return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\")\r\n    }\r\n    _focusRowByIndex(index, operationTypes) {\r\n        if (!this.option(\"focusedRowEnabled\")) {\r\n            return\r\n        }\r\n        const isEmptyData = this.getDataController().isEmpty();\r\n        const currentIndex = this._getCurrentFocusRowIndex(isEmptyData, index);\r\n        if (currentIndex < 0) {\r\n            if (isEmptyData || this.isAutoNavigateToFocusedRow()) {\r\n                this._resetFocusedRow()\r\n            }\r\n        } else {\r\n            this._focusRowByIndexCore(currentIndex, operationTypes)\r\n        }\r\n    }\r\n    _getCurrentFocusRowIndex(isEmptyData, index) {\r\n        let currentIndex = index;\r\n        if (void 0 === currentIndex) {\r\n            if (isEmptyData) {\r\n                currentIndex = -1\r\n            } else {\r\n                currentIndex = this.option(\"focusedRowIndex\")\r\n            }\r\n        }\r\n        return currentIndex\r\n    }\r\n    _focusRowByIndexCore(index, operationTypes) {\r\n        const pageSize = this.getDataController().pageSize();\r\n        const setKeyByIndex = () => {\r\n            if (this._isValidFocusedRowIndex(index)) {\r\n                let rowIndex = index - this.getDataController().getRowIndexOffset(true);\r\n                if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {\r\n                    const lastItemIndex = this.getDataController()._getLastItemIndex();\r\n                    rowIndex = Math.min(rowIndex, lastItemIndex)\r\n                }\r\n                const focusedRowKey = this.getDataController().getKeyByRowIndex(rowIndex, true);\r\n                if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\r\n                    this.option(\"focusedRowKey\", focusedRowKey)\r\n                }\r\n            }\r\n        };\r\n        if (pageSize >= 0) {\r\n            if (!this._isLocalRowIndex(index)) {\r\n                const pageIndex = Math.floor(index / this.getDataController().pageSize());\r\n                when(this.getDataController().pageIndex(pageIndex), this.getDataController().waitReady()).done((() => {\r\n                    setKeyByIndex()\r\n                }))\r\n            } else {\r\n                setKeyByIndex()\r\n            }\r\n        }\r\n    }\r\n    _isLocalRowIndex(index) {\r\n        const isVirtualScrolling = this.getKeyboardController()._isVirtualScrolling();\r\n        if (isVirtualScrolling) {\r\n            const pageIndex = Math.floor(index / this.getDataController().pageSize());\r\n            const virtualItems = this.getDataController().virtualItemsCount();\r\n            const virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\r\n            const visibleRowsCount = this.getDataController().getVisibleRows().length + this.getDataController().getRowIndexOffset();\r\n            const visiblePagesCount = Math.ceil(visibleRowsCount / this.getDataController().pageSize());\r\n            return virtualItemsBegin <= index && visiblePagesCount > pageIndex\r\n        }\r\n        return true\r\n    }\r\n    _setFocusedRowKeyByIndex(index) {\r\n        if (this._isValidFocusedRowIndex(index)) {\r\n            const rowIndex = Math.min(index - this.getDataController().getRowIndexOffset(), this.getDataController().items().length - 1);\r\n            const focusedRowKey = this.getDataController().getKeyByRowIndex(rowIndex);\r\n            if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\r\n                this.option(\"focusedRowKey\", focusedRowKey)\r\n            }\r\n        }\r\n    }\r\n    _focusRowByKey(key) {\r\n        if (!isDefined(key)) {\r\n            this._resetFocusedRow()\r\n        } else {\r\n            this._navigateToRow(key, true)\r\n        }\r\n    }\r\n    _resetFocusedRow() {\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        const isFocusedRowKeyDefined = isDefined(focusedRowKey);\r\n        if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\r\n            return\r\n        }\r\n        if (isFocusedRowKeyDefined) {\r\n            this.option(\"focusedRowKey\", null)\r\n        }\r\n        this.getKeyboardController().setFocusedRowIndex(-1);\r\n        this.option(\"focusedRowIndex\", -1);\r\n        this.getDataController().updateItems({\r\n            changeType: \"updateFocusedRow\",\r\n            focusedRowKey: null\r\n        });\r\n        this.getKeyboardController()._fireFocusedRowChanged()\r\n    }\r\n    _isValidFocusedRowIndex(rowIndex) {\r\n        const row = this.getDataController().getVisibleRows()[rowIndex];\r\n        return !row || \"data\" === row.rowType || \"group\" === row.rowType\r\n    }\r\n    navigateToRow(key) {\r\n        if (!this.isAutoNavigateToFocusedRow()) {\r\n            this.option(\"focusedRowIndex\", -1)\r\n        }\r\n        return this._navigateToRow(key)\r\n    }\r\n    _navigateToRow(key, needFocusRow) {\r\n        const that = this;\r\n        const isAutoNavigate = that.isAutoNavigateToFocusedRow();\r\n        const d = new Deferred;\r\n        const rowsView = this.getView(\"rowsView\");\r\n        if (void 0 === key || !this.getDataController().dataSource()) {\r\n            return d.reject().promise()\r\n        }\r\n        const rowIndexByKey = that.getFocusedRowIndexByKey(key);\r\n        if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {\r\n            that._navigateTo(key, d, needFocusRow)\r\n        } else {\r\n            this.getDataController().getPageIndexByKey(key).done((pageIndex => {\r\n                if (pageIndex < 0) {\r\n                    d.resolve(-1);\r\n                    return\r\n                }\r\n                if (pageIndex === this.getDataController().pageIndex()) {\r\n                    this.getDataController().reload().done((() => {\r\n                        if (that.isRowFocused(key) && this.getDataController().getRowIndexByKey(key) >= 0) {\r\n                            d.resolve(that.getFocusedRowIndexByKey(key))\r\n                        } else {\r\n                            that._navigateTo(key, d, needFocusRow)\r\n                        }\r\n                    })).fail(d.reject)\r\n                } else {\r\n                    this.getDataController().pageIndex(pageIndex).done((() => {\r\n                        rowsView.waitAsyncTemplates(true).done((() => {\r\n                            that._navigateTo(key, d, needFocusRow)\r\n                        }))\r\n                    })).fail(d.reject)\r\n                }\r\n            })).fail(d.reject)\r\n        }\r\n        return d.promise()\r\n    }\r\n    _navigateTo(key, deferred, needFocusRow) {\r\n        const visibleRowIndex = this.getDataController().getRowIndexByKey(key);\r\n        const isVirtualRowRenderingMode = gridCoreUtils.isVirtualRowRendering(this);\r\n        const isAutoNavigate = this.isAutoNavigateToFocusedRow();\r\n        if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\r\n            this._navigateToVirtualRow(key, deferred, needFocusRow)\r\n        } else {\r\n            this._navigateToVisibleRow(key, deferred, needFocusRow)\r\n        }\r\n    }\r\n    _navigateToVisibleRow(key, deferred, needFocusRow) {\r\n        if (needFocusRow) {\r\n            this._triggerUpdateFocusedRow(key, deferred)\r\n        } else {\r\n            const focusedRowIndex = this.getFocusedRowIndexByKey(key);\r\n            this.getView(\"rowsView\").scrollToRowElement(key, deferred).done((() => {\r\n                deferred.resolve(focusedRowIndex)\r\n            }))\r\n        }\r\n    }\r\n    _navigateToVirtualRow(key, deferred, needFocusRow) {\r\n        const rowsScrollController = this.getDataController()._rowsScrollController;\r\n        const rowIndex = gridCoreUtils.getIndexByKey(key, this.getDataController().items(true));\r\n        const scrollable = this.getView(\"rowsView\").getScrollable();\r\n        if (rowsScrollController && scrollable && rowIndex >= 0) {\r\n            const focusedRowIndex = rowIndex + this.getDataController().getRowIndexOffset(true);\r\n            const offset = rowsScrollController.getItemOffset(focusedRowIndex);\r\n            const triggerUpdateFocusedRow = () => {\r\n                if (this.getDataController().totalCount() && !this.getDataController().items().length) {\r\n                    return\r\n                }\r\n                this.component.off(\"contentReady\", triggerUpdateFocusedRow);\r\n                if (needFocusRow) {\r\n                    this._triggerUpdateFocusedRow(key, deferred)\r\n                } else {\r\n                    deferred.resolve(focusedRowIndex)\r\n                }\r\n            };\r\n            this.component.on(\"contentReady\", triggerUpdateFocusedRow);\r\n            this.getView(\"rowsView\").scrollTopPosition(offset)\r\n        } else {\r\n            deferred.resolve(-1)\r\n        }\r\n    }\r\n    _triggerUpdateFocusedRow(key, deferred) {\r\n        const focusedRowIndex = this.getFocusedRowIndexByKey(key);\r\n        if (this._isValidFocusedRowIndex(focusedRowIndex)) {\r\n            let d;\r\n            if (this.option(\"focusedRowEnabled\")) {\r\n                this.getDataController().updateItems({\r\n                    changeType: \"updateFocusedRow\",\r\n                    focusedRowKey: key\r\n                })\r\n            } else {\r\n                d = this.getView(\"rowsView\").scrollToRowElement(key)\r\n            }\r\n            when(d).done((() => {\r\n                this.getKeyboardController().setFocusedRowIndex(focusedRowIndex);\r\n                deferred && deferred.resolve(focusedRowIndex)\r\n            }))\r\n        } else {\r\n            deferred && deferred.resolve(-1)\r\n        }\r\n    }\r\n    getFocusedRowIndexByKey(key) {\r\n        const loadedRowIndex = this.getDataController().getRowIndexByKey(key, true);\r\n        return loadedRowIndex >= 0 ? loadedRowIndex + this.getDataController().getRowIndexOffset(true) : -1\r\n    }\r\n    _focusRowByKeyOrIndex() {\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        let currentFocusedRowIndex = this.option(\"focusedRowIndex\");\r\n        if (isDefined(focusedRowKey)) {\r\n            const visibleRowIndex = this.getDataController().getRowIndexByKey(focusedRowKey);\r\n            if (visibleRowIndex >= 0) {\r\n                if (this.getKeyboardController()._isVirtualScrolling()) {\r\n                    currentFocusedRowIndex = visibleRowIndex + this.getDataController().getRowIndexOffset()\r\n                }\r\n                this.getKeyboardController().setFocusedRowIndex(currentFocusedRowIndex);\r\n                this._triggerUpdateFocusedRow(focusedRowKey)\r\n            } else {\r\n                this._navigateToRow(focusedRowKey, true).done((focusedRowIndex => {\r\n                    if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\r\n                        this._focusRowByIndex()\r\n                    } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {\r\n                        this.getKeyboardController().setFocusedRowIndex(focusedRowIndex)\r\n                    }\r\n                }))\r\n            }\r\n        } else if (currentFocusedRowIndex >= 0) {\r\n            this._focusRowByIndex(currentFocusedRowIndex)\r\n        }\r\n    }\r\n    isRowFocused(key) {\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        if (isDefined(focusedRowKey)) {\r\n            return equalByValue(key, this.option(\"focusedRowKey\"))\r\n        }\r\n        return\r\n    }\r\n    updateFocusedRow(e) {\r\n        const that = this;\r\n        const focusedRowIndex = that.getDataController().getRowIndexByKey(e.focusedRowKey);\r\n        const rowsView = that.getView(\"rowsView\");\r\n        let $tableElement;\r\n        let $mainRow;\r\n        each(rowsView.getTableElements(), ((index, element) => {\r\n            const isMainTable = 0 === index;\r\n            $tableElement = $(element);\r\n            that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\r\n            const $row = that._prepareFocusedRow({\r\n                changedItem: that.getDataController().getVisibleRows()[focusedRowIndex],\r\n                $tableElement: $tableElement,\r\n                focusedRowIndex: focusedRowIndex\r\n            });\r\n            if (isMainTable) {\r\n                $mainRow = $row\r\n            }\r\n        }));\r\n        if (!e.preventScroll && $mainRow) {\r\n            rowsView.scrollToElementVertically($mainRow)\r\n        }\r\n    }\r\n    _clearPreviousFocusedRow($tableElement, focusedRowIndex) {\r\n        const $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter(((_, focusedRow) => {\r\n            const $focusedRowTable = $(focusedRow).closest(`.${this.addWidgetPrefix(\"table\")}`);\r\n            return $tableElement.is($focusedRowTable)\r\n        }));\r\n        $prevRowFocusedElement.removeClass(\"dx-row-focused\").removeClass(\"dx-cell-focus-disabled\").removeAttr(\"tabindex\");\r\n        $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\r\n        if (0 !== focusedRowIndex) {\r\n            const $firstRow = $(this.getView(\"rowsView\").getRowElement(0));\r\n            $firstRow.removeClass(\"dx-cell-focus-disabled\").removeAttr(\"tabIndex\")\r\n        }\r\n    }\r\n    _prepareFocusedRow(options) {\r\n        let $row;\r\n        const {\r\n            changedItem: changedItem\r\n        } = options;\r\n        if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\r\n            const {\r\n                focusedRowIndex: focusedRowIndex\r\n            } = options;\r\n            const {\r\n                $tableElement: $tableElement\r\n            } = options;\r\n            const tabIndex = this.option(\"tabindex\") || 0;\r\n            const rowsView = this.getView(\"rowsView\");\r\n            $row = $(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\r\n            $row.addClass(\"dx-row-focused\").attr(\"tabindex\", tabIndex)\r\n        }\r\n        return $row\r\n    }\r\n}\r\nconst keyboardNavigation = Base => class extends Base {\r\n    init() {\r\n        const rowIndex = this.option(\"focusedRowIndex\");\r\n        const columnIndex = this.option(\"focusedColumnIndex\");\r\n        this.createAction(\"onFocusedRowChanging\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onFocusedRowChanged\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onFocusedCellChanging\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onFocusedCellChanged\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        super.init();\r\n        this.setRowFocusType();\r\n        this._focusedCellPosition = {};\r\n        if (isDefined(rowIndex) && rowIndex >= 0) {\r\n            this._focusedCellPosition.rowIndex = rowIndex\r\n        }\r\n        if (isDefined(columnIndex) && columnIndex >= 0) {\r\n            this._focusedCellPosition.columnIndex = columnIndex\r\n        }\r\n    }\r\n    setFocusedRowIndex(rowIndex) {\r\n        super.setFocusedRowIndex(rowIndex);\r\n        this.option(\"focusedRowIndex\", rowIndex)\r\n    }\r\n    setFocusedColumnIndex(columnIndex) {\r\n        super.setFocusedColumnIndex(columnIndex);\r\n        this.option(\"focusedColumnIndex\", columnIndex)\r\n    }\r\n    _escapeKeyHandler(eventArgs, isEditing) {\r\n        if (isEditing || !this.option(\"focusedRowEnabled\")) {\r\n            return super._escapeKeyHandler(eventArgs, isEditing)\r\n        }\r\n        if (this.isCellFocusType()) {\r\n            this.setRowFocusType();\r\n            this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    _updateFocusedCellPosition($cell, direction) {\r\n        const position = super._updateFocusedCellPosition($cell, direction);\r\n        if (position && position.columnIndex >= 0) {\r\n            this._fireFocusedCellChanged($cell)\r\n        }\r\n        return position\r\n    }\r\n};\r\nconst editorFactory = Base => class extends Base {\r\n    renderFocusOverlay($element, isHideBorder) {\r\n        var _this$_keyboardNaviga;\r\n        const focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        let $cell;\r\n        if (!focusedRowEnabled || !(null !== (_this$_keyboardNaviga = this._keyboardNavigationController) && void 0 !== _this$_keyboardNaviga && _this$_keyboardNaviga.isRowFocusType()) || this._editingController.isEditing()) {\r\n            super.renderFocusOverlay($element, isHideBorder)\r\n        } else if (focusedRowEnabled) {\r\n            const isRowElement = \"row\" === this._keyboardNavigationController._getElementType($element);\r\n            if (isRowElement && !$element.hasClass(\"dx-row-focused\")) {\r\n                $cell = this._keyboardNavigationController.getFirstValidCellInRow($element);\r\n                this._keyboardNavigationController.focus($cell)\r\n            }\r\n        }\r\n    }\r\n};\r\nconst columns = Base => class extends Base {\r\n    getSortDataSourceParameters(_, sortByKey) {\r\n        let result = super.getSortDataSourceParameters.apply(this, arguments);\r\n        const dataSource = this._dataController._dataSource;\r\n        const store = this._dataController.store();\r\n        let key = store && store.key();\r\n        const remoteOperations = dataSource && dataSource.remoteOperations() || {};\r\n        const isLocalOperations = Object.keys(remoteOperations).every((operationName => !remoteOperations[operationName]));\r\n        if (key && (this.option(\"focusedRowEnabled\") && false !== this._focusController.isAutoNavigateToFocusedRow() || sortByKey)) {\r\n            key = Array.isArray(key) ? key : [key];\r\n            const notSortedKeys = key.filter((key => !this.columnOption(key, \"sortOrder\")));\r\n            if (notSortedKeys.length) {\r\n                result = result || [];\r\n                if (isLocalOperations) {\r\n                    result.push({\r\n                        selector: dataSource.getDataIndexGetter(),\r\n                        desc: false\r\n                    })\r\n                } else {\r\n                    notSortedKeys.forEach((notSortedKey => result.push({\r\n                        selector: notSortedKey,\r\n                        desc: false\r\n                    })))\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n};\r\nconst data = Base => class extends Base {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._needToUpdateFocusedRowByIndex = false\r\n    }\r\n    _applyChange(change) {\r\n        if (change && \"updateFocusedRow\" === change.changeType) {\r\n            return\r\n        }\r\n        return super._applyChange.apply(this, arguments)\r\n    }\r\n    _fireChanged(e) {\r\n        super._fireChanged(e);\r\n        if (this.option(\"focusedRowEnabled\") && this._dataSource) {\r\n            const isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\r\n            const isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\r\n            if (this._needToUpdateFocusedRowByIndex) {\r\n                this._needToUpdateFocusedRowByIndex = false;\r\n                this._focusController._focusRowByIndex()\r\n            } else if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\r\n                this._updatePageIndexes();\r\n                this._updateFocusedRow(e)\r\n            } else if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\r\n                this._updatePageIndexes()\r\n            } else if (\"update\" === e.changeType && e.repaintChangesOnly) {\r\n                this._updateFocusedRow(e)\r\n            }\r\n        }\r\n    }\r\n    _handleDataPushed(changes) {\r\n        super._handleDataPushed(changes);\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        this._needToUpdateFocusedRowByIndex = null === changes || void 0 === changes ? void 0 : changes.some((change => \"remove\" === change.type && equalByValue(change.key, focusedRowKey)))\r\n    }\r\n    _updatePageIndexes() {\r\n        const prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\r\n        const renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\r\n        this._lastRenderingPageIndex = renderingPageIndex;\r\n        this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex\r\n    }\r\n    isPagingByRendering() {\r\n        return this._isPagingByRendering\r\n    }\r\n    _updateFocusedRow(e) {\r\n        const operationTypes = e.operationTypes || {};\r\n        const {\r\n            reload: reload,\r\n            fullReload: fullReload,\r\n            pageIndex: pageIndex,\r\n            paging: paging\r\n        } = operationTypes;\r\n        const isVirtualScrolling = this._keyboardNavigationController._isVirtualScrolling();\r\n        const pagingWithoutVirtualScrolling = paging && !isVirtualScrolling;\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        const isAutoNavigate = this._focusController.isAutoNavigateToFocusedRow();\r\n        const isReload = reload && false === pageIndex;\r\n        if (isReload && !fullReload && isDefined(focusedRowKey)) {\r\n            this._focusController._navigateToRow(focusedRowKey, true).done((focusedRowIndex => {\r\n                if (focusedRowIndex < 0) {\r\n                    this._focusController._focusRowByIndex(void 0, operationTypes)\r\n                }\r\n            }))\r\n        } else if (pagingWithoutVirtualScrolling && isAutoNavigate) {\r\n            const rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\r\n            const focusedRowIndex = this.option(\"focusedRowIndex\");\r\n            const isValidRowIndexByKey = rowIndexByKey >= 0;\r\n            const isValidFocusedRowIndex = focusedRowIndex >= 0;\r\n            const isSameRowIndex = focusedRowIndex === rowIndexByKey;\r\n            if (isValidFocusedRowIndex && (isSameRowIndex || !isValidRowIndexByKey)) {\r\n                this._focusController._focusRowByIndex(focusedRowIndex, operationTypes)\r\n            }\r\n        } else if (pagingWithoutVirtualScrolling && !isAutoNavigate && this.getRowIndexByKey(focusedRowKey) < 0) {\r\n            this.option(\"focusedRowIndex\", -1)\r\n        } else if (operationTypes.fullReload) {\r\n            this._focusController._focusRowByKeyOrIndex()\r\n        }\r\n    }\r\n    getPageIndexByKey(key) {\r\n        const that = this;\r\n        const d = new Deferred;\r\n        that.getGlobalRowIndexByKey(key).done((globalIndex => {\r\n            d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1)\r\n        })).fail(d.reject);\r\n        return d.promise()\r\n    }\r\n    getGlobalRowIndexByKey(key) {\r\n        if (this._dataSource.group()) {\r\n            return this._calculateGlobalRowIndexByGroupedData(key)\r\n        }\r\n        return this._calculateGlobalRowIndexByFlatData(key)\r\n    }\r\n    _calculateGlobalRowIndexByFlatData(key, groupFilter, useGroup) {\r\n        const that = this;\r\n        const deferred = new Deferred;\r\n        const dataSource = that._dataSource;\r\n        if (Array.isArray(key) || isNewRowTempKey(key)) {\r\n            return deferred.resolve(-1).promise()\r\n        }\r\n        let filter = that._generateFilterByKey(key);\r\n        dataSource.load({\r\n            filter: that._concatWithCombinedFilter(filter),\r\n            skip: 0,\r\n            take: 1\r\n        }).done((data => {\r\n            if (data.length > 0) {\r\n                filter = that._generateOperationFilterByKey(key, data[0], useGroup);\r\n                dataSource.load({\r\n                    filter: that._concatWithCombinedFilter(filter, groupFilter),\r\n                    skip: 0,\r\n                    take: 1,\r\n                    requireTotalCount: true\r\n                }).done(((_, extra) => {\r\n                    deferred.resolve(extra.totalCount)\r\n                }))\r\n            } else {\r\n                deferred.resolve(-1)\r\n            }\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n    _concatWithCombinedFilter(filter, groupFilter) {\r\n        const combinedFilter = this.getCombinedFilter();\r\n        return gridCoreUtils.combineFilters([filter, combinedFilter, groupFilter])\r\n    }\r\n    _generateBooleanFilter(selector, value, sortInfo) {\r\n        const {\r\n            desc: desc\r\n        } = sortInfo;\r\n        switch (true) {\r\n            case false === value && desc:\r\n                return [selector, \"=\", true];\r\n            case false === value && !desc:\r\n                return [selector, \"=\", null];\r\n            case true === value && !desc:\r\n            case !isBoolean(value) && desc:\r\n                return [selector, \"<>\", value];\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    _generateOperationFilterByKey(key, rowData, useGroup) {\r\n        const that = this;\r\n        const dateSerializationFormat = that.option(\"dateSerializationFormat\");\r\n        const isRemoteFiltering = that._dataSource.remoteOperations().filtering;\r\n        const isRemoteSorting = that._dataSource.remoteOperations().sorting;\r\n        let filter = that._generateFilterByKey(key, \"<\");\r\n        let sort = that._columnsController.getSortDataSourceParameters(!isRemoteFiltering, true);\r\n        if (useGroup) {\r\n            const group = that._columnsController.getGroupDataSourceParameters(!isRemoteFiltering);\r\n            if (group) {\r\n                sort = sort ? group.concat(sort) : group\r\n            }\r\n        }\r\n        if (sort) {\r\n            sort.slice().reverse().forEach((sortInfo => {\r\n                const {\r\n                    selector: selector,\r\n                    desc: desc,\r\n                    compare: compare\r\n                } = sortInfo;\r\n                const {\r\n                    getter: getter,\r\n                    rawValue: rawValue,\r\n                    safeValue: safeValue\r\n                } = UiGridCoreFocusUtils.getSortFilterValue(sortInfo, rowData, {\r\n                    isRemoteFiltering: isRemoteFiltering,\r\n                    dateSerializationFormat: dateSerializationFormat,\r\n                    getSelector: selector => that._columnsController.columnOption(selector, \"selector\")\r\n                });\r\n                filter = [\r\n                    [selector, \"=\", safeValue], \"and\", filter\r\n                ];\r\n                if (null === rawValue || isBoolean(rawValue)) {\r\n                    const booleanFilter = that._generateBooleanFilter(selector, safeValue, desc);\r\n                    if (booleanFilter) {\r\n                        filter = [booleanFilter, \"or\", filter]\r\n                    }\r\n                } else {\r\n                    const filterOperation = desc ? \">\" : \"<\";\r\n                    let sortFilter;\r\n                    if (compare && !isRemoteSorting) {\r\n                        sortFilter = data => {\r\n                            if (\"<\" === filterOperation) {\r\n                                return compare(rawValue, getter(data)) >= 1\r\n                            }\r\n                            return compare(rawValue, getter(data)) <= -1\r\n                        }\r\n                    } else {\r\n                        sortFilter = [selector, filterOperation, safeValue];\r\n                        if (!desc) {\r\n                            sortFilter = [sortFilter, \"or\", [selector, \"=\", null]]\r\n                        }\r\n                    }\r\n                    filter = [sortFilter, \"or\", filter]\r\n                }\r\n            }))\r\n        }\r\n        return filter\r\n    }\r\n    _generateFilterByKey(key, operation) {\r\n        const dataSourceKey = this._dataSource.key();\r\n        let filter = [];\r\n        if (!operation) {\r\n            operation = \"=\"\r\n        }\r\n        if (Array.isArray(dataSourceKey)) {\r\n            for (let i = 0; i < dataSourceKey.length; ++i) {\r\n                const keyPart = key[dataSourceKey[i]];\r\n                if (keyPart) {\r\n                    if (filter.length > 0) {\r\n                        filter.push(\"and\")\r\n                    }\r\n                    filter.push([dataSourceKey[i], operation, keyPart])\r\n                }\r\n            }\r\n        } else {\r\n            filter = [dataSourceKey, operation, key]\r\n        }\r\n        return filter\r\n    }\r\n    _getLastItemIndex() {\r\n        return this.items(true).length - 1\r\n    }\r\n};\r\nconst editing = Base => class extends Base {\r\n    _deleteRowCore(rowIndex) {\r\n        const deferred = super._deleteRowCore.apply(this, arguments);\r\n        const rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n        deferred.done((() => {\r\n            const rowIndex = this._dataController.getRowIndexByKey(rowKey);\r\n            const visibleRows = this._dataController.getVisibleRows();\r\n            if (-1 === rowIndex && !visibleRows.length) {\r\n                this._focusController._resetFocusedRow()\r\n            }\r\n        }))\r\n    }\r\n};\r\nconst rowsView = Base => class extends Base {\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (this.option(\"focusedRowEnabled\") && row) {\r\n            if (this._focusController.isRowFocused(row.key)) {\r\n                $row.addClass(\"dx-row-focused\")\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n    _checkRowKeys(options) {\r\n        super._checkRowKeys.apply(this, arguments);\r\n        if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\r\n            const store = this._dataController.store();\r\n            if (store && !store.key()) {\r\n                this._dataController.fireError(\"E1042\", \"Row focusing\")\r\n            }\r\n        }\r\n    }\r\n    _update(change) {\r\n        if (\"updateFocusedRow\" === change.changeType) {\r\n            if (this.option(\"focusedRowEnabled\")) {\r\n                this._focusController.updateFocusedRow(change)\r\n            }\r\n        } else {\r\n            super._update(change)\r\n        }\r\n    }\r\n    updateFocusElementTabIndex($cellElements, preventScroll) {\r\n        if (this.option(\"focusedRowEnabled\")) {\r\n            this._setFocusedRowElementTabIndex(preventScroll)\r\n        } else {\r\n            super.updateFocusElementTabIndex($cellElements)\r\n        }\r\n    }\r\n    _setFocusedRowElementTabIndex(preventScroll) {\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        const tabIndex = this.option(\"tabIndex\") ?? 0;\r\n        const columnsController = this._columnsController;\r\n        let rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\r\n        let columnIndex = this.option(\"focusedColumnIndex\");\r\n        const $row = this._findRowElementForTabIndex();\r\n        const dataSource = this._dataController.dataSource();\r\n        const operationTypes = null === dataSource || void 0 === dataSource ? void 0 : dataSource.operationTypes();\r\n        const isPaging = !operationTypes || operationTypes.paging;\r\n        if (!isDefined(this._scrollToFocusOnResize)) {\r\n            this._scrollToFocusOnResize = () => {\r\n                this.scrollToElementVertically(this._findRowElementForTabIndex());\r\n                this.resizeCompleted.remove(this._scrollToFocusOnResize)\r\n            }\r\n        }\r\n        $row.attr(\"tabIndex\", tabIndex);\r\n        const rowIndexFromOption = this.option(\"focusedRowIndex\") - this._dataController.getRowIndexOffset(true);\r\n        if (!isPaging && rowIndex < 0 && rowIndexFromOption >= 0) {\r\n            this._focusController.updateFocusedRow({\r\n                focusedRowKey: focusedRowKey,\r\n                preventScroll: preventScroll\r\n            })\r\n        }\r\n        if (rowIndex >= 0 && !preventScroll) {\r\n            if (columnIndex < 0) {\r\n                columnIndex = 0\r\n            }\r\n            rowIndex += this._dataController.getRowIndexOffset();\r\n            columnIndex += columnsController.getColumnIndexOffset();\r\n            this._keyboardNavigationController.setFocusedCellPosition(rowIndex, columnIndex);\r\n            if (this._focusController.isAutoNavigateToFocusedRow()) {\r\n                if (!isPaging && !this._dataController.isPagingByRendering()) {\r\n                    this.resizeCompleted.remove(this._scrollToFocusOnResize);\r\n                    this.resizeCompleted.add(this._scrollToFocusOnResize)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _findRowElementForTabIndex() {\r\n        const focusedRowKey = this.option(\"focusedRowKey\");\r\n        const rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\r\n        return $(this.getRowElement(rowIndex >= 0 ? rowIndex : 0))\r\n    }\r\n    scrollToRowElement(key) {\r\n        const rowIndex = this._dataController.getRowIndexByKey(key);\r\n        const $row = $(this.getRow(rowIndex));\r\n        return this.scrollToElementVertically($row)\r\n    }\r\n    scrollToElementVertically($row) {\r\n        const scrollable = this.getScrollable();\r\n        if (scrollable && $row.length) {\r\n            const position = scrollable.getScrollElementPosition($row, \"vertical\");\r\n            return this.scrollTopPosition(position)\r\n        }\r\n        return (new Deferred).resolve()\r\n    }\r\n    scrollTopPosition(scrollTop) {\r\n        const d = new Deferred;\r\n        const scrollable = this.getScrollable();\r\n        if (scrollable) {\r\n            const currentScrollTop = scrollable.scrollTop();\r\n            const scrollHandler = () => {\r\n                scrollable.off(\"scroll\", scrollHandler);\r\n                d.resolve()\r\n            };\r\n            if (scrollTop !== currentScrollTop) {\r\n                scrollable.on(\"scroll\", scrollHandler);\r\n                this._dataController.resetFilterApplying();\r\n                scrollable.scrollTo({\r\n                    top: scrollTop\r\n                });\r\n                return d.promise()\r\n            }\r\n        }\r\n        return d.resolve()\r\n    }\r\n};\r\nexport const focusModule = {\r\n    defaultOptions: () => ({\r\n        focusedRowEnabled: false,\r\n        autoNavigateToFocusedRow: true,\r\n        focusedRowKey: null,\r\n        focusedRowIndex: -1,\r\n        focusedColumnIndex: -1\r\n    }),\r\n    controllers: {\r\n        focus: FocusController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            keyboardNavigation: keyboardNavigation,\r\n            editorFactory: editorFactory,\r\n            columns: columns,\r\n            data: data,\r\n            editing: editing\r\n        },\r\n        views: {\r\n            rowsView: rowsView\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}