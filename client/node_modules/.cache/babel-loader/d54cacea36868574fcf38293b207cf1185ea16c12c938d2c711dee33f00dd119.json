{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/views/m_rows_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport { removeEvent } from \"../../../../common/core/events/remove\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport $ from \"../../../../core/renderer\";\nimport browser from \"../../../../core/utils/browser\";\nimport { deferRender, deferUpdate } from \"../../../../core/utils/common\";\nimport { compileGetter } from \"../../../../core/utils/data\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getBoundingRect, getDefaultAlignment } from \"../../../../core/utils/position\";\nimport { getHeight, getOuterHeight, getWidth } from \"../../../../core/utils/size\";\nimport { isEmpty } from \"../../../../core/utils/string\";\nimport { setHeight } from \"../../../../core/utils/style\";\nimport { isDefined, isNumeric, isString } from \"../../../../core/utils/type\";\nimport { getWindow, hasWindow } from \"../../../../core/utils/window\";\nimport Scrollable from \"../../../../ui/scroll_view/ui.scrollable\";\nimport { CLASSES as REORDERING_CLASSES } from \"../columns_resizing_reordering/const\";\nimport gridCoreUtils from \"../m_utils\";\nimport { CLASSES } from \"../sticky_columns/const\";\nimport { ColumnsView } from \"./m_columns_view\";\nconst ROWS_VIEW_CLASS = \"rowsview\";\nconst CONTENT_CLASS = \"content\";\nconst NOWRAP_CLASS = \"nowrap\";\nconst GROUP_ROW_CLASS = \"dx-group-row\";\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\nconst DATA_ROW_CLASS = \"dx-data-row\";\nconst FREE_SPACE_CLASS = \"dx-freespace-row\";\nconst COLUMN_LINES_CLASS = \"dx-column-lines\";\nconst ROW_ALTERNATION_CLASS = \"dx-row-alt\";\nconst LAST_ROW_BORDER = \"dx-last-row-border\";\nconst EMPTY_CLASS = \"dx-empty\";\nconst ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\nconst CONTENT_FIXED_CLASS = \"content-fixed\";\nexport const ROW_LINES_CLASS = \"dx-row-lines\";\nconst LOADPANEL_HIDE_TIMEOUT = 200;\nfunction getMaxHorizontalScrollOffset(scrollable) {\n  return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0;\n}\nexport function isGroupRow(_ref) {\n  let {\n    rowType: rowType,\n    column: column\n  } = _ref;\n  return \"group\" === rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command;\n}\nfunction setWatcher(_ref2) {\n  let {\n    element: element,\n    watch: watch,\n    getter: getter,\n    callBack: callBack\n  } = _ref2;\n  if (watch) {\n    const dispose = watch(getter, callBack);\n    eventsEngine.on(element, removeEvent, dispose);\n  }\n}\nconst defaultCellTemplate = function ($container, options) {\n  const isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\n  const {\n    text: text\n  } = options;\n  const container = $container.get(0);\n  if (isDataTextEmpty) {\n    gridCoreUtils.setEmptyText($container);\n  } else if (options.column.encodeHtml) {\n    container.textContent = text;\n  } else {\n    container.innerHTML = text;\n  }\n};\nconst getScrollableBottomPadding = function (that) {\n  const scrollable = that.getScrollable();\n  return scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0;\n};\nexport class RowsView extends ColumnsView {\n  init() {\n    super.init();\n    this._editingController = this.getController(\"editing\");\n    this._resizingController = this.getController(\"resizing\");\n    this._columnsResizerController = this.getController(\"columnsResizer\");\n    this._focusController = this.getController(\"focus\");\n    this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n    this._validatingController = this.getController(\"validating\");\n    this._errorHandlingController = this.getController(\"errorHandling\");\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._rowHeight = 0;\n    this._scrollTop = 0;\n    this._scrollLeft = -1;\n    this._scrollRight = 0;\n    this._hasHeight = void 0;\n    this._contentChanges = [];\n    this._dataController.loadingChanged.add((isLoading, messageText) => {\n      this.setLoading(isLoading, messageText);\n    });\n    this._dataController.dataSourceChanged.add(() => {\n      if (this._scrollLeft >= 0 && !this._dataController.isLoading()) {\n        this._handleScroll({\n          component: this.getScrollable(),\n          forceUpdateScrollPosition: true,\n          scrollOffset: {\n            top: this._scrollTop,\n            left: this._scrollLeft\n          }\n        });\n      }\n    });\n  }\n  _getDefaultTemplate(column) {\n    if (\"empty\" === column.command) {\n      return function (container) {\n        container.html(\"&nbsp;\");\n      };\n    } else {\n      return defaultCellTemplate;\n    }\n  }\n  renderFocusState(params) {}\n  _getDefaultGroupTemplate(column) {\n    const summaryTexts = this.option(\"summary.texts\");\n    return function ($container, options) {\n      const {\n        data: data\n      } = options;\n      let text = `${options.column.caption}: ${options.text}`;\n      const container = $container.get(0);\n      if (options.summaryItems && options.summaryItems.length) {\n        text += ` ${gridCoreUtils.getGroupRowSummaryText(options.summaryItems, summaryTexts)}`;\n      }\n      if (data) {\n        if (options.groupContinuedMessage && options.groupContinuesMessage) {\n          text += ` (${options.groupContinuedMessage}. ${options.groupContinuesMessage})`;\n        } else if (options.groupContinuesMessage) {\n          text += ` (${options.groupContinuesMessage})`;\n        } else if (options.groupContinuedMessage) {\n          text += ` (${options.groupContinuedMessage})`;\n        }\n      }\n      if (column.encodeHtml) {\n        container.textContent = text;\n      } else {\n        container.innerHTML = text;\n      }\n    };\n  }\n  _update(change) {}\n  _updateCell($cell, options) {\n    if (isGroupRow(options)) {\n      const isGroupContainer = $cell.is(`.${this.addWidgetPrefix(CLASSES.groupRowContainer)}`);\n      const $groupCell = isGroupContainer ? $cell.parent() : $cell;\n      $groupCell.addClass(\"dx-group-cell\");\n    }\n    super._updateCell.apply(this, arguments);\n  }\n  _getCellTemplate(options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    let template;\n    if (isGroupRow(options)) {\n      template = column.groupCellTemplate || {\n        allowRenderToDetachedContainer: true,\n        render: that._getDefaultGroupTemplate(column)\n      };\n    } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\n      template = column.cellTemplate;\n    } else {\n      template = {\n        allowRenderToDetachedContainer: true,\n        render: that._getDefaultTemplate(column)\n      };\n    }\n    return template;\n  }\n  _createRow(row, tag) {\n    const $row = super._createRow.apply(this, arguments);\n    if (row) {\n      const isGroup = \"group\" === row.rowType;\n      const isDataRow = \"data\" === row.rowType;\n      isDataRow && $row.addClass(\"dx-data-row\");\n      isDataRow && this.option(\"showRowLines\") && $row.addClass(\"dx-row-lines\");\n      this.option(\"showColumnLines\") && $row.addClass(\"dx-column-lines\");\n      if (false === row.visible) {\n        $row.hide();\n      }\n      if (isGroup) {\n        $row.addClass(\"dx-group-row\");\n        this.setAriaExpandedAttribute($row, row);\n      }\n    }\n    return $row;\n  }\n  _rowPrepared($row, rowOptions, row) {\n    if (\"data\" === rowOptions.rowType) {\n      if (this.option(\"rowAlternationEnabled\")) {\n        this._isAltRow(row) && $row.addClass(\"dx-row-alt\");\n        setWatcher({\n          element: $row.get(0),\n          watch: rowOptions.watch,\n          getter: () => this._isAltRow(row),\n          callBack: value => {\n            $row.toggleClass(\"dx-row-alt\", value);\n          }\n        });\n      }\n      this._setAriaRowIndex(rowOptions, $row);\n      setWatcher({\n        element: $row.get(0),\n        watch: rowOptions.watch,\n        getter: () => rowOptions.rowIndex,\n        callBack: () => this._setAriaRowIndex(rowOptions, $row)\n      });\n    }\n    super._rowPrepared.apply(this, arguments);\n  }\n  _setAriaRowIndex(row, $row) {\n    if (!$row.is(\"tr\")) {\n      return;\n    }\n    const {\n      component: component\n    } = this;\n    const isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && !gridCoreUtils.isVirtualRowRendering(component);\n    let rowIndex = row.rowIndex + 1;\n    if (isPagerMode) {\n      rowIndex = component.pageIndex() * component.pageSize() + rowIndex;\n    } else {\n      rowIndex += this._dataController.getRowIndexOffset();\n    }\n    this.setAria(\"rowindex\", rowIndex, $row);\n  }\n  setAriaExpandedAttribute($row, row) {\n    const description = row.isExpanded ? this.localize(\"dxDataGrid-ariaExpandedRow\") : this.localize(\"dxDataGrid-ariaCollapsedRow\");\n    this.setAria(\"roledescription\", description, $row);\n  }\n  _afterRowPrepared(e) {\n    const arg = e.args[0];\n    const dataController = this._dataController;\n    const row = dataController.getVisibleRows()[arg.rowIndex];\n    const watch = this.option(\"integrationOptions.watchMethod\");\n    if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\n      return;\n    }\n    const dispose = watch(() => dataController.generateDataValues(arg.data, arg.columns), () => {\n      dataController.repaintRows([row.rowIndex], this.option(\"repaintChangesOnly\"));\n    }, {\n      deep: true,\n      skipImmediate: true\n    });\n    eventsEngine.on(arg.rowElement, removeEvent, dispose);\n  }\n  _renderScrollable(force) {\n    const that = this;\n    const $element = that.element();\n    if (!$element.children().length) {\n      $element.append(\"<div>\");\n    }\n    if (force || !that._loadPanel) {\n      that._renderLoadPanel($element, $element.parent(), that._dataController.isLocalStore());\n    }\n    if ((force || !that.getScrollable()) && that._dataController.isLoaded()) {\n      const columns = that.getColumns();\n      let allColumnsHasWidth = true;\n      for (let i = 0; i < columns.length; i++) {\n        if (!columns[i].width && !columns[i].minWidth) {\n          allColumnsHasWidth = false;\n          break;\n        }\n      }\n      if (that.option(\"columnAutoWidth\") || that._hasHeight || allColumnsHasWidth || that._columnsController._isColumnFixing()) {\n        that._renderScrollableCore($element);\n      }\n    }\n  }\n  _handleScroll(e) {\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    const isNativeScrolling = e.component.option(\"useNative\");\n    this._scrollTop = e.scrollOffset.top;\n    this._scrollLeft = e.scrollOffset.left;\n    let scrollLeft = e.scrollOffset.left;\n    if (rtlEnabled) {\n      this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\n      if (isNativeScrolling) {\n        scrollLeft = -this._scrollRight;\n      }\n      if (!this.isScrollbarVisible(true)) {\n        this._scrollLeft = -1;\n      }\n    }\n    this.scrollChanged.fire(_extends({}, e.scrollOffset, {\n      left: scrollLeft\n    }), this.name);\n  }\n  _renderScrollableCore($element) {\n    const dxScrollableOptions = this._createScrollableOptions();\n    const scrollHandler = this._handleScroll.bind(this);\n    dxScrollableOptions.onScroll = scrollHandler;\n    this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\n    this._scrollableContainer = this._scrollable && $(this._scrollable.container());\n  }\n  _renderLoadPanel() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return gridCoreUtils.renderLoadPanel.apply(this, arguments);\n  }\n  _renderContent(contentElement, tableElement, isFixedTableRendering) {\n    contentElement.empty().append(tableElement);\n    return this._findContentElement();\n  }\n  _updateContent(newTableElement, change, isFixedTableRendering) {\n    this._contentChanges.push({\n      newTableElement: newTableElement,\n      change: change,\n      isFixedTableRendering: isFixedTableRendering\n    });\n    return this.waitAsyncTemplates().done(() => {\n      const contentChanges = this._contentChanges;\n      this._contentChanges = [];\n      contentChanges.forEach(_ref3 => {\n        let {\n          newTableElement: newTableElement,\n          change: change,\n          isFixedTableRendering: isFixedTableRendering\n        } = _ref3;\n        const tableElement = this.getTableElement(isFixedTableRendering);\n        const contentElement = this._findContentElement(isFixedTableRendering);\n        const changeType = null === change || void 0 === change ? void 0 : change.changeType;\n        const executors = [];\n        const highlightChanges = this.option(\"highlightChanges\");\n        const rowInsertedClass = this.addWidgetPrefix(\"row-inserted-animation\");\n        if (\"update\" === changeType) {\n          each(change.rowIndices, (index, rowIndex) => {\n            var _change$changeTypes;\n            const $newRowElement = this._getRowElements(newTableElement).eq(index);\n            const dataChangeType = null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes[index];\n            const item = change.items && change.items[index];\n            executors.push(() => {\n              const $rowElements = this._getRowElements(tableElement);\n              const $rowElement = $rowElements.eq(rowIndex);\n              switch (dataChangeType) {\n                case \"update\":\n                  if (item) {\n                    var _change$columnIndices;\n                    const columnIndices = null === (_change$columnIndices = change.columnIndices) || void 0 === _change$columnIndices ? void 0 : _change$columnIndices[index];\n                    if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\n                      $rowElement.toggle(item.visible);\n                    } else if (columnIndices) {\n                      this._updateCells($rowElement, $newRowElement, columnIndices, item);\n                    } else {\n                      $rowElement.replaceWith($newRowElement);\n                    }\n                  }\n                  break;\n                case \"insert\":\n                  if (!$rowElements.length) {\n                    if (tableElement) {\n                      const target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\n                      $newRowElement.prependTo(target);\n                    }\n                  } else if ($rowElement.length) {\n                    $newRowElement.insertBefore($rowElement);\n                  } else {\n                    $newRowElement.insertAfter($rowElements.last());\n                  }\n                  if (highlightChanges && change.isLiveUpdate) {\n                    $newRowElement.addClass(rowInsertedClass);\n                  }\n                  break;\n                case \"remove\":\n                  $rowElement.remove();\n              }\n            });\n          });\n          each(executors, function () {\n            this();\n          });\n          newTableElement.remove();\n        } else {\n          this.setTableElement(newTableElement, isFixedTableRendering);\n          contentElement.addClass(this.addWidgetPrefix(\"content\"));\n          this._setGridRole(contentElement);\n          this._renderContent(contentElement, newTableElement, isFixedTableRendering);\n        }\n      });\n    }).fail(() => {\n      this._contentChanges = [];\n    });\n  }\n  _getGridRoleName() {\n    return \"grid\";\n  }\n  _setGridRole($element) {\n    var _this$_dataController;\n    const hasData = !(null !== (_this$_dataController = this._dataController) && void 0 !== _this$_dataController && _this$_dataController.isEmpty());\n    const gridRoleName = this._getGridRoleName();\n    if (null !== $element && void 0 !== $element && $element.length && hasData) {\n      this.setAria(\"role\", gridRoleName, $element);\n    }\n  }\n  _createEmptyRow(className, isFixed, height) {\n    const that = this;\n    let $cell;\n    const $row = that._createRow();\n    const columns = isFixed ? this.getFixedColumns() : this.getColumns();\n    $row.addClass(className).toggleClass(\"dx-column-lines\", that.option(\"showColumnLines\"));\n    for (let i = 0; i < columns.length; i++) {\n      $cell = that._createCell({\n        column: columns[i],\n        rowType: \"freeSpace\",\n        columnIndex: i,\n        columns: columns\n      });\n      isNumeric(height) && $cell.css(\"height\", height);\n      $row.append($cell);\n    }\n    that.setAria(\"role\", \"presentation\", $row);\n    return $row;\n  }\n  getFixedColumns() {\n    throw new Error(\"Method not implemented.\");\n  }\n  _appendEmptyRow($table, $emptyRow, location) {\n    const $tBodies = this._getBodies($table);\n    const isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\n    const $container = isTableContainer ? $table : $tBodies;\n    if (\"top\" === location) {\n      $container.first().prepend($emptyRow);\n      if (isTableContainer) {\n        const $colgroup = $container.children(\"colgroup\");\n        $container.prepend($colgroup);\n      }\n    } else {\n      $container.last().append($emptyRow);\n    }\n  }\n  _renderFreeSpaceRow($tableElement, change) {\n    let $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\n    $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement, \"refresh\" === (null === change || void 0 === change ? void 0 : change.changeType));\n    this._appendEmptyRow($tableElement, $freeSpaceRowElement);\n  }\n  _checkRowKeys(options) {\n    const that = this;\n    const rows = that._getRows(options);\n    const keyExpr = that._dataController.store() && that._dataController.store().key();\n    keyExpr && rows.some(row => {\n      if (\"data\" === row.rowType && void 0 === row.key) {\n        that._dataController.fireError(\"E1046\", keyExpr);\n        return true;\n      }\n      return;\n    });\n  }\n  _needUpdateRowHeight(itemsCount) {\n    return itemsCount > 0 && !this._rowHeight;\n  }\n  _getRowsHeight($tableElement) {\n    $tableElement = $tableElement || this._tableElement;\n    const $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(`.${FREE_SPACE_CLASS}`);\n    return $rowElements.toArray().reduce((sum, row) => sum + getBoundingRect(row).height, 0);\n  }\n  _updateRowHeight() {\n    const that = this;\n    const $tableElement = that.getTableElement();\n    const itemsCount = that._dataController.items().length;\n    if ($tableElement && that._needUpdateRowHeight(itemsCount)) {\n      const rowsHeight = that._getRowsHeight($tableElement);\n      that._rowHeight = rowsHeight / itemsCount;\n    }\n  }\n  _findContentElement(isFixedTableRendering) {\n    let $content = this.element();\n    const scrollable = this.getScrollable();\n    if ($content) {\n      if (scrollable) {\n        $content = $(scrollable.content());\n      }\n      return $content.children().first();\n    }\n  }\n  _getRowElements(tableElement) {\n    const $rows = super._getRowElements(tableElement);\n    return $rows && $rows.not(`.${FREE_SPACE_CLASS}`);\n  }\n  _getFreeSpaceRowElements($table) {\n    const tableElements = $table || this.getTableElements();\n    return tableElements && tableElements.children(\"tbody\").children(`.${FREE_SPACE_CLASS}`);\n  }\n  _getNoDataText() {\n    return this.option(\"noDataText\");\n  }\n  _rowClick(e) {\n    const item = this._dataController.items()[e.rowIndex] || {};\n    this.executeAction(\"onRowClick\", extend({\n      evaluate(expr) {\n        const getter = compileGetter(expr);\n        return getter(item.data);\n      }\n    }, e, item));\n  }\n  _rowDblClick(e) {\n    const item = this._dataController.items()[e.rowIndex] || {};\n    this.executeAction(\"onRowDblClick\", extend({}, e, item));\n  }\n  _getColumnsCountBeforeGroups(columns) {\n    for (let i = 0; i < columns.length; i++) {\n      if (\"groupExpand\" === columns[i].type) {\n        return i;\n      }\n    }\n    return 0;\n  }\n  _getGroupCellOptions(options) {\n    const columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\n    const columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\n    return {\n      columnIndex: columnIndex,\n      colspan: options.columns.length - columnIndex - 1\n    };\n  }\n  _needWrapRow() {\n    return super._needWrapRow.apply(this, arguments) || !!this.option(\"dataRowTemplate\");\n  }\n  _renderCells($row, options) {\n    if (\"group\" === options.row.rowType) {\n      this._renderGroupedCells($row, options);\n    } else if (options.row.values) {\n      super._renderCells($row, options);\n    }\n  }\n  _renderGroupedCells($row, options) {\n    const {\n      row: row\n    } = options;\n    let expandColumn;\n    const {\n      columns: columns\n    } = options;\n    const {\n      rowIndex: rowIndex\n    } = row;\n    let isExpanded;\n    const groupCellOptions = this._getGroupCellOptions(options);\n    for (let i = 0; i <= groupCellOptions.columnIndex; i++) {\n      if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\n        isExpanded = !!row.isExpanded;\n        expandColumn = columns[i];\n      } else {\n        isExpanded = null;\n        expandColumn = {\n          command: \"expand\",\n          cssClass: columns[i].cssClass,\n          fixed: columns[i].fixed\n        };\n      }\n      if (this._needRenderCell(i, options.columnIndices)) {\n        this._renderCell($row, {\n          value: isExpanded,\n          row: row,\n          rowIndex: rowIndex,\n          column: expandColumn,\n          columnIndex: i,\n          columnIndices: options.columnIndices,\n          change: options.change\n        });\n      }\n    }\n    const groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\n    const groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\n      command: null,\n      type: null,\n      cssClass: null,\n      width: null,\n      showWhenGrouped: false,\n      alignment: groupColumnAlignment\n    });\n    if (groupCellOptions.colspan > 1) {\n      groupColumn.colspan = groupCellOptions.colspan;\n    }\n    if (this._needRenderCell(groupCellOptions.columnIndex + 1, options.columnIndices)) {\n      this._renderCell($row, {\n        value: row.values[row.groupIndex],\n        row: row,\n        rowIndex: rowIndex,\n        column: groupColumn,\n        columnIndex: groupCellOptions.columnIndex + 1,\n        columnIndices: options.columnIndices,\n        change: options.change\n      });\n    }\n  }\n  _renderRows($table, options) {\n    const that = this;\n    const scrollingMode = that.option(\"scrolling.mode\");\n    super._renderRows($table, extend({\n      scrollingMode: scrollingMode\n    }, options));\n    that._checkRowKeys(options.change);\n    that._renderFreeSpaceRow($table, options.change);\n    if (!that._hasHeight) {\n      that.updateFreeSpaceRowHeight($table);\n    }\n  }\n  _renderDataRowByTemplate($table, options, dataRowTemplate) {\n    const {\n      row: row\n    } = options;\n    const rowOptions = extend({\n      columns: options.columns\n    }, row);\n    const $tbody = this._createRow(row, \"tbody\");\n    $tbody.appendTo($table);\n    this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options.change);\n    this._rowPrepared($tbody, rowOptions, options.row);\n  }\n  _renderRow($table, options) {\n    const {\n      row: row\n    } = options;\n    const {\n      rowTemplate: rowTemplate\n    } = this.option();\n    const dataRowTemplate = this.option(\"dataRowTemplate\");\n    if (\"data\" === row.rowType && dataRowTemplate) {\n      this._renderDataRowByTemplate($table, options, dataRowTemplate);\n    } else if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\n      this.renderTemplate($table, rowTemplate, extend({\n        columns: options.columns\n      }, row), true);\n    } else {\n      super._renderRow($table, options);\n    }\n  }\n  _renderTable(options) {\n    const that = this;\n    const $table = super._renderTable(options);\n    const resizeCompletedHandler = function () {\n      const scrollableInstance = that.getScrollable();\n      if (scrollableInstance && that.element().closest(getWindow().document).length) {\n        that.resizeCompleted.remove(resizeCompletedHandler);\n        scrollableInstance._visibilityChanged(true);\n      }\n    };\n    if (!isDefined(that.getTableElement())) {\n      that.setTableElement($table);\n      that._renderScrollable(true);\n      that.resizeCompleted.add(resizeCompletedHandler);\n    } else {\n      that._renderScrollable();\n    }\n    return $table;\n  }\n  _createTable() {\n    const $table = super._createTable.apply(this, arguments);\n    if (this.option().rowTemplate || this.option().dataRowTemplate) {\n      $table.appendTo(this.component.$element());\n    }\n    return $table;\n  }\n  _renderCore(change) {\n    const $element = this.element();\n    $element.addClass(this.addWidgetPrefix(\"rowsview\")).toggleClass(this.addWidgetPrefix(\"nowrap\"), !this.option(\"wordWrapEnabled\"));\n    $element.toggleClass(\"dx-empty\", this._dataController.isEmpty());\n    this.setAria(\"role\", \"presentation\", $element);\n    const $table = this._renderTable({\n      change: change\n    });\n    const deferred = this._updateContent($table, change);\n    super._renderCore(change);\n    this._lastColumnWidths = null;\n    return deferred;\n  }\n  _getRows(change) {\n    return change && change.items || this._dataController.items();\n  }\n  _getCellOptions(options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    const {\n      row: row\n    } = options;\n    const {\n      data: data\n    } = row;\n    const summaryCells = row && row.summaryCells;\n    const {\n      value: value\n    } = options;\n    const displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\n    const parameters = super._getCellOptions(options);\n    parameters.value = value;\n    parameters.oldValue = options.oldValue;\n    parameters.displayValue = displayValue;\n    parameters.row = row;\n    parameters.key = row.key;\n    parameters.data = data;\n    parameters.rowType = row.rowType;\n    parameters.values = row.values;\n    parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\n    parameters.rowIndex = row.rowIndex;\n    parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\n    parameters.resized = column.resizedCallbacks;\n    if (isDefined(column.groupIndex) && !column.command) {\n      const groupingTextsOptions = that.option(\"grouping.texts\");\n      const scrollingMode = that.option(\"scrolling.mode\");\n      if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n        parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\n        parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage;\n      }\n    }\n    return parameters;\n  }\n  _toggleDraggableSourceColumnClass($rows, visibleColumns, columnIndex, value) {\n    const columnsController = this._columnsController;\n    const columns = columnsController.getColumns();\n    const column = columns && columns[columnIndex];\n    const columnID = column && column.isBand && column.index;\n    each($rows, (rowIndex, row) => {\n      if (!$(row).hasClass(\"dx-group-row\")) {\n        for (let i = 0; i < visibleColumns.length; i++) {\n          if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\n            $rows.eq(rowIndex).children().eq(i).toggleClass(this.addWidgetPrefix(REORDERING_CLASSES.draggableColumn), value);\n            if (!isNumeric(columnID)) {\n              break;\n            }\n          }\n        }\n      }\n    });\n  }\n  _getDevicePixelRatio() {\n    return getWindow().devicePixelRatio;\n  }\n  renderNoDataText() {\n    return gridCoreUtils.renderNoDataText.apply(this, arguments);\n  }\n  getCellOptions(rowIndex, columnIdentifier) {\n    const rowOptions = this._dataController.items()[rowIndex];\n    let cellOptions;\n    let column;\n    if (rowOptions) {\n      if (isString(columnIdentifier)) {\n        column = this._columnsController.columnOption(columnIdentifier);\n      } else {\n        column = this._columnsController.getVisibleColumns()[columnIdentifier];\n      }\n      if (column) {\n        cellOptions = this._getCellOptions({\n          value: column.calculateCellValue(rowOptions.data),\n          rowIndex: rowOptions.rowIndex,\n          row: rowOptions,\n          column: column\n        });\n      }\n    }\n    return cellOptions;\n  }\n  getRow(index) {\n    if (index >= 0) {\n      const rows = this._getRowElements();\n      if (rows.length > index) {\n        return $(rows[index]);\n      }\n    }\n    return;\n  }\n  updateFreeSpaceRowHeight($table) {\n    const dataController = this._dataController;\n    const itemCount = dataController.items(true).length;\n    const contentElement = this._findContentElement();\n    const freeSpaceRowElements = this._getFreeSpaceRowElements($table);\n    if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\n      let isFreeSpaceRowVisible = false;\n      if (itemCount > 0) {\n        if (!this._hasHeight) {\n          const freeSpaceRowCount = dataController.pageSize() - itemCount;\n          const scrollingMode = this.option(\"scrolling.mode\");\n          if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n            setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\n            isFreeSpaceRowVisible = true;\n          }\n          if (!isFreeSpaceRowVisible && $table) {\n            setHeight(freeSpaceRowElements, 0);\n          } else {\n            freeSpaceRowElements.toggle(isFreeSpaceRowVisible);\n          }\n          this._updateLastRowBorder(isFreeSpaceRowVisible);\n        } else {\n          freeSpaceRowElements.hide();\n          deferUpdate(() => {\n            const scrollbarWidth = this.getScrollbarWidth(true);\n            const elementHeightWithoutScrollbar = getHeight(this.element()) - scrollbarWidth;\n            const contentHeight = getOuterHeight(contentElement);\n            const showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\n            const rowsHeight = this._getRowsHeight(contentElement.children().first());\n            const $tableElement = $table || this.getTableElements();\n            const borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\n            const heightCorrection = this._getHeightCorrection();\n            const resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\n            if (showFreeSpaceRow) {\n              deferRender(() => {\n                freeSpaceRowElements.css(\"height\", resultHeight);\n                isFreeSpaceRowVisible = true;\n                freeSpaceRowElements.show();\n              });\n            }\n            deferRender(() => this._updateLastRowBorder(isFreeSpaceRowVisible));\n          });\n        }\n      } else {\n        freeSpaceRowElements.css(\"height\", 0);\n        freeSpaceRowElements.show();\n        this._updateLastRowBorder(true);\n      }\n    }\n  }\n  _getHeightCorrection() {\n    const isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\n    const isChromeLatest = browser.chrome && browser.version >= 91;\n    const hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\n    return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0;\n  }\n  _columnOptionChanged(e) {\n    const {\n      optionNames: optionNames\n    } = e;\n    if (e.changeTypes.grouping) {\n      return;\n    }\n    if (optionNames.width || optionNames.visibleWidth) {\n      super._columnOptionChanged(e);\n      this._fireColumnResizedCallbacks();\n    }\n  }\n  getScrollable() {\n    return this._scrollable;\n  }\n  _handleDataChanged(change) {\n    const that = this;\n    switch (change.changeType) {\n      case \"refresh\":\n      case \"prepend\":\n      case \"append\":\n      case \"update\":\n        that.render(null, change);\n        break;\n      default:\n        that._update(change);\n    }\n  }\n  publicMethods() {\n    return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"];\n  }\n  contentWidth() {\n    return getWidth(this.element()) - this.getScrollbarWidth();\n  }\n  getScrollbarWidth(isHorizontal) {\n    const scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\n    let scrollbarWidth = 0;\n    if (scrollableContainer) {\n      if (!isHorizontal) {\n        scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0;\n      } else {\n        scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\n        scrollbarWidth += getScrollableBottomPadding(this);\n      }\n    }\n    return scrollbarWidth > 0 ? scrollbarWidth : 0;\n  }\n  _fireColumnResizedCallbacks() {\n    const lastColumnWidths = this._lastColumnWidths || [];\n    const columnWidths = [];\n    const columns = this.getColumns();\n    for (let i = 0; i < columns.length; i++) {\n      columnWidths[i] = columns[i].visibleWidth;\n      if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\n        columns[i].resizedCallbacks.fire(columnWidths[i]);\n      }\n    }\n    this._lastColumnWidths = columnWidths;\n  }\n  _updateLastRowBorder(isFreeSpaceRowVisible) {\n    if (this.option(\"showBorders\") && !isFreeSpaceRowVisible) {\n      this.element().addClass(LAST_ROW_BORDER);\n    } else {\n      this.element().removeClass(LAST_ROW_BORDER);\n    }\n  }\n  _updateScrollable() {\n    const scrollable = Scrollable.getInstance(this.element());\n    if (scrollable) {\n      scrollable.update();\n      if (scrollable.option(\"useNative\") || !(null !== scrollable && void 0 !== scrollable && scrollable.isRenovated())) {\n        this._updateHorizontalScrollPosition();\n      }\n    }\n  }\n  _updateHorizontalScrollPosition() {\n    const scrollable = this.getScrollable();\n    const scrollLeft = scrollable && scrollable.scrollOffset().left;\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    if (rtlEnabled) {\n      const maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\n      const scrollRight = maxHorizontalScrollOffset - scrollLeft;\n      if (scrollRight !== this._scrollRight) {\n        this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight;\n      }\n    }\n    if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\n      scrollable.scrollTo({\n        x: this._scrollLeft\n      });\n    }\n  }\n  _resizeCore() {\n    const that = this;\n    that._fireColumnResizedCallbacks();\n    that._updateRowHeight();\n    deferRender(() => {\n      that._renderScrollable();\n      that.renderNoDataText();\n      that.updateFreeSpaceRowHeight();\n      deferUpdate(() => {\n        that._updateScrollable();\n      });\n    });\n  }\n  scrollTo(location) {\n    const $element = this.element();\n    const dxScrollable = $element && Scrollable.getInstance($element);\n    if (dxScrollable) {\n      dxScrollable.scrollTo(location);\n    }\n  }\n  height(height) {\n    const that = this;\n    const $element = this.element();\n    if (0 === arguments.length) {\n      return $element ? getOuterHeight($element, true) : 0;\n    }\n    if (isDefined(height) && $element) {\n      that.hasHeight(\"auto\" !== height);\n      setHeight($element, height);\n    }\n  }\n  hasHeight(hasHeight) {\n    if (0 === arguments.length) {\n      return !!this._hasHeight;\n    }\n    this._hasHeight = hasHeight;\n    return;\n  }\n  setLoading(isLoading, messageText) {\n    const that = this;\n    let loadPanel = that._loadPanel;\n    const dataController = that._dataController;\n    const loadPanelOptions = that.option(\"loadPanel\") || {};\n    const animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\n    const $element = that.element();\n    if (!hasWindow()) {\n      return;\n    }\n    if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\n      that._renderLoadPanel($element, $element.parent());\n      loadPanel = that._loadPanel;\n    }\n    if (loadPanel) {\n      const visibilityOptions = {\n        message: messageText || loadPanelOptions.text,\n        animation: animation,\n        visible: isLoading\n      };\n      if (isLoading) {\n        visibilityOptions.position = gridCoreUtils.calculateLoadPanelPosition($element);\n      }\n      clearTimeout(that._hideLoadingTimeoutID);\n      if (loadPanel.option(\"visible\") && !isLoading) {\n        that._hideLoadingTimeoutID = setTimeout(() => {\n          loadPanel.option(visibilityOptions);\n        }, 200);\n      } else {\n        loadPanel.option(visibilityOptions);\n      }\n    }\n  }\n  toggleDraggableColumnClass(columnIndex, value) {\n    const $rows = this._getRowElements().not(\".dx-group-row\") || [];\n    this._toggleDraggableSourceColumnClass($rows, this.getColumns(), columnIndex, value);\n  }\n  _getCellElementsCore(rowIndex) {\n    const $cells = super._getCellElementsCore.apply(this, arguments);\n    if ($cells) {\n      const groupCellIndex = $cells.filter(\".dx-group-cell\").index();\n      if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\n        return $cells.slice(0, groupCellIndex + 1);\n      }\n    }\n    return $cells;\n  }\n  _getBoundaryVisibleItemIndex(isTop, isFloor) {\n    const that = this;\n    let itemIndex = 0;\n    let prevOffset = 0;\n    let offset = 0;\n    let viewportBoundary = that._scrollTop;\n    const $contentElement = that._findContentElement();\n    const contentElementOffsetTop = $contentElement && $contentElement.offset().top;\n    const items = this._dataController.items();\n    const tableElement = that.getTableElement();\n    if (items.length && tableElement) {\n      const rowElements = that._getRowElements(tableElement).filter(\":visible\");\n      if (!isTop) {\n        const height = getOuterHeight(this._hasHeight ? this.element() : getWindow());\n        viewportBoundary += height;\n      }\n      for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\n        prevOffset = offset;\n        const $rowElement = $(rowElements).eq(itemIndex);\n        if ($rowElement.length) {\n          offset = $rowElement.offset();\n          offset = (isTop ? offset.top : offset.top + getOuterHeight($rowElement)) - contentElementOffsetTop;\n          if (offset > viewportBoundary) {\n            if (itemIndex) {\n              if (isFloor || 2 * viewportBoundary < Math.round(offset + prevOffset)) {\n                itemIndex--;\n              }\n            }\n            break;\n          }\n        }\n      }\n      if (itemIndex && itemIndex === items.length) {\n        itemIndex--;\n      }\n    }\n    return itemIndex;\n  }\n  getTopVisibleItemIndex(isFloor) {\n    return this._getBoundaryVisibleItemIndex(true, isFloor);\n  }\n  getBottomVisibleItemIndex(isFloor) {\n    return this._getBoundaryVisibleItemIndex(false, isFloor);\n  }\n  getTopVisibleRowData() {\n    const itemIndex = this.getTopVisibleItemIndex();\n    const items = this._dataController.items();\n    if (items[itemIndex]) {\n      return items[itemIndex].data;\n    }\n    return;\n  }\n  _scrollToElement($element, offset) {\n    const scrollable = this.getScrollable();\n    scrollable && scrollable.scrollToElement($element, offset);\n  }\n  optionChanged(args) {\n    const that = this;\n    super.optionChanged(args);\n    switch (args.name) {\n      case \"wordWrapEnabled\":\n      case \"showColumnLines\":\n      case \"showRowLines\":\n      case \"rowAlternationEnabled\":\n      case \"rowTemplate\":\n      case \"dataRowTemplate\":\n      case \"twoWayBindingEnabled\":\n        that._invalidate(true, true);\n        args.handled = true;\n        break;\n      case \"scrolling\":\n        that._rowHeight = null;\n        that._tableElement = null;\n        args.handled = true;\n        break;\n      case \"rtlEnabled\":\n        that._rowHeight = null;\n        that._tableElement = null;\n        break;\n      case \"loadPanel\":\n        that._tableElement = null;\n        that._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\n        args.handled = true;\n        break;\n      case \"noDataText\":\n        that.renderNoDataText();\n        args.handled = true;\n    }\n  }\n  setAriaOwns(headerTableId, footerTableId, isFixed) {\n    const $contentElement = this._findContentElement();\n    const $tableElement = this.getTableElement();\n    if (null !== $tableElement && void 0 !== $tableElement && $tableElement.length) {\n      this.setAria(\"owns\", `${headerTableId ?? \"\"} ${$tableElement.attr(\"id\") ?? \"\"} ${footerTableId ?? \"\"}`.trim(), $contentElement);\n    }\n  }\n  dispose() {\n    super.dispose();\n    clearTimeout(this._hideLoadingTimeoutID);\n    this._scrollable && this._scrollable.dispose();\n  }\n  setScrollerSpacing(vScrollbarWidth, hScrollbarWidth) {}\n  getFixedContentElement() {\n    var _this$element;\n    const fixedContentClass = this.addWidgetPrefix(\"content-fixed\");\n    return null === (_this$element = this.element()) || void 0 === _this$element ? void 0 : _this$element.children(`.${fixedContentClass}`);\n  }\n  _restoreErrorRow(contentTable) {}\n  isElementInside($element) {\n    const $rowsViewElement = $element.closest(`.${this.addWidgetPrefix(\"rowsview\")}`);\n    return $rowsViewElement.is(this.element());\n  }\n}\nexport const rowsModule = {\n  defaultOptions: () => ({\n    hoverStateEnabled: false,\n    scrolling: {\n      useNative: \"auto\"\n    },\n    loadPanel: {\n      enabled: \"auto\",\n      text: messageLocalization.format(\"Loading\"),\n      width: 200,\n      height: 90,\n      showIndicator: true,\n      indicatorSrc: \"\",\n      showPane: true\n    },\n    dataRowTemplate: null,\n    columnAutoWidth: false,\n    noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\n    wordWrapEnabled: false,\n    showColumnLines: true,\n    showRowLines: false,\n    rowAlternationEnabled: false,\n    activeStateEnabled: false,\n    twoWayBindingEnabled: true\n  }),\n  views: {\n    rowsView: RowsView\n  }\n};","map":{"version":3,"names":["_extends","eventsEngine","removeEvent","messageLocalization","$","browser","deferRender","deferUpdate","compileGetter","extend","each","getBoundingRect","getDefaultAlignment","getHeight","getOuterHeight","getWidth","isEmpty","setHeight","isDefined","isNumeric","isString","getWindow","hasWindow","Scrollable","CLASSES","REORDERING_CLASSES","gridCoreUtils","ColumnsView","ROWS_VIEW_CLASS","CONTENT_CLASS","NOWRAP_CLASS","GROUP_ROW_CLASS","GROUP_CELL_CLASS","DATA_ROW_CLASS","FREE_SPACE_CLASS","COLUMN_LINES_CLASS","ROW_ALTERNATION_CLASS","LAST_ROW_BORDER","EMPTY_CLASS","ROW_INSERTED_ANIMATION_CLASS","CONTENT_FIXED_CLASS","ROW_LINES_CLASS","LOADPANEL_HIDE_TIMEOUT","getMaxHorizontalScrollOffset","scrollable","Math","round","scrollWidth","clientWidth","isGroupRow","_ref","rowType","column","groupIndex","showWhenGrouped","command","setWatcher","_ref2","element","watch","getter","callBack","dispose","on","defaultCellTemplate","$container","options","isDataTextEmpty","text","container","get","setEmptyText","encodeHtml","textContent","innerHTML","getScrollableBottomPadding","that","getScrollable","ceil","parseFloat","content","css","RowsView","init","_editingController","getController","_resizingController","_columnsResizerController","_focusController","_keyboardNavigationController","_validatingController","_errorHandlingController","_columnHeadersView","getView","_rowHeight","_scrollTop","_scrollLeft","_scrollRight","_hasHeight","_contentChanges","_dataController","loadingChanged","add","isLoading","messageText","setLoading","dataSourceChanged","_handleScroll","component","forceUpdateScrollPosition","scrollOffset","top","left","_getDefaultTemplate","html","renderFocusState","params","_getDefaultGroupTemplate","summaryTexts","option","data","caption","summaryItems","length","getGroupRowSummaryText","groupContinuedMessage","groupContinuesMessage","_update","change","_updateCell","$cell","isGroupContainer","is","addWidgetPrefix","groupRowContainer","$groupCell","parent","addClass","apply","arguments","_getCellTemplate","template","groupCellTemplate","allowRenderToDetachedContainer","render","cellTemplate","_createRow","row","tag","$row","isGroup","isDataRow","visible","hide","setAriaExpandedAttribute","_rowPrepared","rowOptions","_isAltRow","value","toggleClass","_setAriaRowIndex","rowIndex","isPagerMode","isVirtualRowRendering","pageIndex","pageSize","getRowIndexOffset","setAria","description","isExpanded","localize","_afterRowPrepared","e","arg","args","dataController","getVisibleRows","isNewRow","generateDataValues","columns","repaintRows","deep","skipImmediate","rowElement","_renderScrollable","force","$element","children","append","_loadPanel","_renderLoadPanel","isLocalStore","isLoaded","getColumns","allColumnsHasWidth","i","width","minWidth","_columnsController","_isColumnFixing","_renderScrollableCore","rtlEnabled","isNativeScrolling","scrollLeft","isScrollbarVisible","scrollChanged","fire","name","dxScrollableOptions","_createScrollableOptions","scrollHandler","bind","onScroll","_scrollable","_createComponent","_scrollableContainer","_len","Array","_key","renderLoadPanel","_renderContent","contentElement","tableElement","isFixedTableRendering","empty","_findContentElement","_updateContent","newTableElement","push","waitAsyncTemplates","done","contentChanges","forEach","_ref3","getTableElement","changeType","executors","highlightChanges","rowInsertedClass","rowIndices","index","_change$changeTypes","$newRowElement","_getRowElements","eq","dataChangeType","changeTypes","item","items","$rowElements","$rowElement","_change$columnIndices","columnIndices","toggle","_updateCells","replaceWith","target","prependTo","insertBefore","insertAfter","last","isLiveUpdate","remove","setTableElement","_setGridRole","fail","_getGridRoleName","_this$_dataController","hasData","gridRoleName","_createEmptyRow","className","isFixed","height","getFixedColumns","_createCell","columnIndex","Error","_appendEmptyRow","$table","$emptyRow","location","$tBodies","_getBodies","isTableContainer","first","prepend","$colgroup","_renderFreeSpaceRow","$tableElement","$freeSpaceRowElement","_wrapRowIfNeed","_checkRowKeys","rows","_getRows","keyExpr","store","key","some","fireError","_needUpdateRowHeight","itemsCount","_getRowsHeight","_tableElement","not","toArray","reduce","sum","_updateRowHeight","rowsHeight","$content","$rows","_getFreeSpaceRowElements","tableElements","getTableElements","_getNoDataText","_rowClick","executeAction","evaluate","expr","_rowDblClick","_getColumnsCountBeforeGroups","type","_getGroupCellOptions","columnsCountBeforeGroups","colspan","_needWrapRow","_renderCells","_renderGroupedCells","values","expandColumn","groupCellOptions","allowCollapsing","scrollingMode","cssClass","fixed","_needRenderCell","_renderCell","groupColumnAlignment","groupColumn","alignment","_renderRows","updateFreeSpaceRowHeight","_renderDataRowByTemplate","dataRowTemplate","$tbody","appendTo","renderTemplate","_renderRow","rowTemplate","_renderTable","resizeCompletedHandler","scrollableInstance","closest","document","resizeCompleted","_visibilityChanged","_createTable","_renderCore","deferred","_lastColumnWidths","_getCellOptions","summaryCells","displayValue","getDisplayValue","parameters","oldValue","formatValue","resized","resizedCallbacks","groupingTextsOptions","isContinuationOnNextPage","isContinuation","_toggleDraggableSourceColumnClass","visibleColumns","columnsController","columnID","isBand","hasClass","isParentBandColumn","draggableColumn","_getDevicePixelRatio","devicePixelRatio","renderNoDataText","getCellOptions","columnIdentifier","cellOptions","columnOption","getVisibleColumns","calculateCellValue","getRow","itemCount","freeSpaceRowElements","totalCount","isFreeSpaceRowVisible","freeSpaceRowCount","pageCount","_updateLastRowBorder","scrollbarWidth","getScrollbarWidth","elementHeightWithoutScrollbar","contentHeight","showFreeSpaceRow","borderTopWidth","heightCorrection","_getHeightCorrection","resultHeight","show","isZoomedWebkit","webkit","isChromeLatest","chrome","version","hasExtraBorderTop","mozilla","_columnOptionChanged","optionNames","grouping","visibleWidth","_fireColumnResizedCallbacks","_handleDataChanged","publicMethods","contentWidth","isHorizontal","scrollableContainer","offsetWidth","clientHeight","offsetHeight","lastColumnWidths","columnWidths","removeClass","_updateScrollable","getInstance","update","isRenovated","_updateHorizontalScrollPosition","maxHorizontalScrollOffset","scrollRight","scrollTo","x","_resizeCore","dxScrollable","hasHeight","loadPanel","loadPanelOptions","animation","enabled","visibilityOptions","message","position","calculateLoadPanelPosition","clearTimeout","_hideLoadingTimeoutID","setTimeout","toggleDraggableColumnClass","_getCellElementsCore","$cells","groupCellIndex","filter","slice","_getBoundaryVisibleItemIndex","isTop","isFloor","itemIndex","prevOffset","offset","viewportBoundary","$contentElement","contentElementOffsetTop","rowElements","getTopVisibleItemIndex","getBottomVisibleItemIndex","getTopVisibleRowData","_scrollToElement","scrollToElement","optionChanged","_invalidate","handled","fullName","setAriaOwns","headerTableId","footerTableId","attr","trim","setScrollerSpacing","vScrollbarWidth","hScrollbarWidth","getFixedContentElement","_this$element","fixedContentClass","_restoreErrorRow","contentTable","isElementInside","$rowsViewElement","rowsModule","defaultOptions","hoverStateEnabled","scrolling","useNative","format","showIndicator","indicatorSrc","showPane","columnAutoWidth","noDataText","wordWrapEnabled","showColumnLines","showRowLines","rowAlternationEnabled","activeStateEnabled","twoWayBindingEnabled","views","rowsView"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/views/m_rows_view.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/views/m_rows_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport {\r\n    removeEvent\r\n} from \"../../../../common/core/events/remove\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    deferRender,\r\n    deferUpdate\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../../core/utils/data\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getBoundingRect,\r\n    getDefaultAlignment\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    getHeight,\r\n    getOuterHeight,\r\n    getWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isEmpty\r\n} from \"../../../../core/utils/string\";\r\nimport {\r\n    setHeight\r\n} from \"../../../../core/utils/style\";\r\nimport {\r\n    isDefined,\r\n    isNumeric,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../../core/utils/window\";\r\nimport Scrollable from \"../../../../ui/scroll_view/ui.scrollable\";\r\nimport {\r\n    CLASSES as REORDERING_CLASSES\r\n} from \"../columns_resizing_reordering/const\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    CLASSES\r\n} from \"../sticky_columns/const\";\r\nimport {\r\n    ColumnsView\r\n} from \"./m_columns_view\";\r\nconst ROWS_VIEW_CLASS = \"rowsview\";\r\nconst CONTENT_CLASS = \"content\";\r\nconst NOWRAP_CLASS = \"nowrap\";\r\nconst GROUP_ROW_CLASS = \"dx-group-row\";\r\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\r\nconst DATA_ROW_CLASS = \"dx-data-row\";\r\nconst FREE_SPACE_CLASS = \"dx-freespace-row\";\r\nconst COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nconst ROW_ALTERNATION_CLASS = \"dx-row-alt\";\r\nconst LAST_ROW_BORDER = \"dx-last-row-border\";\r\nconst EMPTY_CLASS = \"dx-empty\";\r\nconst ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\r\nconst CONTENT_FIXED_CLASS = \"content-fixed\";\r\nexport const ROW_LINES_CLASS = \"dx-row-lines\";\r\nconst LOADPANEL_HIDE_TIMEOUT = 200;\r\n\r\nfunction getMaxHorizontalScrollOffset(scrollable) {\r\n    return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0\r\n}\r\nexport function isGroupRow(_ref) {\r\n    let {\r\n        rowType: rowType,\r\n        column: column\r\n    } = _ref;\r\n    return \"group\" === rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command\r\n}\r\n\r\nfunction setWatcher(_ref2) {\r\n    let {\r\n        element: element,\r\n        watch: watch,\r\n        getter: getter,\r\n        callBack: callBack\r\n    } = _ref2;\r\n    if (watch) {\r\n        const dispose = watch(getter, callBack);\r\n        eventsEngine.on(element, removeEvent, dispose)\r\n    }\r\n}\r\nconst defaultCellTemplate = function($container, options) {\r\n    const isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\r\n    const {\r\n        text: text\r\n    } = options;\r\n    const container = $container.get(0);\r\n    if (isDataTextEmpty) {\r\n        gridCoreUtils.setEmptyText($container)\r\n    } else if (options.column.encodeHtml) {\r\n        container.textContent = text\r\n    } else {\r\n        container.innerHTML = text\r\n    }\r\n};\r\nconst getScrollableBottomPadding = function(that) {\r\n    const scrollable = that.getScrollable();\r\n    return scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0\r\n};\r\nexport class RowsView extends ColumnsView {\r\n    init() {\r\n        super.init();\r\n        this._editingController = this.getController(\"editing\");\r\n        this._resizingController = this.getController(\"resizing\");\r\n        this._columnsResizerController = this.getController(\"columnsResizer\");\r\n        this._focusController = this.getController(\"focus\");\r\n        this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n        this._validatingController = this.getController(\"validating\");\r\n        this._errorHandlingController = this.getController(\"errorHandling\");\r\n        this._columnHeadersView = this.getView(\"columnHeadersView\");\r\n        this._rowHeight = 0;\r\n        this._scrollTop = 0;\r\n        this._scrollLeft = -1;\r\n        this._scrollRight = 0;\r\n        this._hasHeight = void 0;\r\n        this._contentChanges = [];\r\n        this._dataController.loadingChanged.add(((isLoading, messageText) => {\r\n            this.setLoading(isLoading, messageText)\r\n        }));\r\n        this._dataController.dataSourceChanged.add((() => {\r\n            if (this._scrollLeft >= 0 && !this._dataController.isLoading()) {\r\n                this._handleScroll({\r\n                    component: this.getScrollable(),\r\n                    forceUpdateScrollPosition: true,\r\n                    scrollOffset: {\r\n                        top: this._scrollTop,\r\n                        left: this._scrollLeft\r\n                    }\r\n                })\r\n            }\r\n        }))\r\n    }\r\n    _getDefaultTemplate(column) {\r\n        if (\"empty\" === column.command) {\r\n            return function(container) {\r\n                container.html(\"&nbsp;\")\r\n            }\r\n        } else {\r\n            return defaultCellTemplate\r\n        }\r\n    }\r\n    renderFocusState(params) {}\r\n    _getDefaultGroupTemplate(column) {\r\n        const summaryTexts = this.option(\"summary.texts\");\r\n        return function($container, options) {\r\n            const {\r\n                data: data\r\n            } = options;\r\n            let text = `${options.column.caption}: ${options.text}`;\r\n            const container = $container.get(0);\r\n            if (options.summaryItems && options.summaryItems.length) {\r\n                text += ` ${gridCoreUtils.getGroupRowSummaryText(options.summaryItems,summaryTexts)}`\r\n            }\r\n            if (data) {\r\n                if (options.groupContinuedMessage && options.groupContinuesMessage) {\r\n                    text += ` (${options.groupContinuedMessage}. ${options.groupContinuesMessage})`\r\n                } else if (options.groupContinuesMessage) {\r\n                    text += ` (${options.groupContinuesMessage})`\r\n                } else if (options.groupContinuedMessage) {\r\n                    text += ` (${options.groupContinuedMessage})`\r\n                }\r\n            }\r\n            if (column.encodeHtml) {\r\n                container.textContent = text\r\n            } else {\r\n                container.innerHTML = text\r\n            }\r\n        }\r\n    }\r\n    _update(change) {}\r\n    _updateCell($cell, options) {\r\n        if (isGroupRow(options)) {\r\n            const isGroupContainer = $cell.is(`.${this.addWidgetPrefix(CLASSES.groupRowContainer)}`);\r\n            const $groupCell = isGroupContainer ? $cell.parent() : $cell;\r\n            $groupCell.addClass(\"dx-group-cell\")\r\n        }\r\n        super._updateCell.apply(this, arguments)\r\n    }\r\n    _getCellTemplate(options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        let template;\r\n        if (isGroupRow(options)) {\r\n            template = column.groupCellTemplate || {\r\n                allowRenderToDetachedContainer: true,\r\n                render: that._getDefaultGroupTemplate(column)\r\n            }\r\n        } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\r\n            template = column.cellTemplate\r\n        } else {\r\n            template = {\r\n                allowRenderToDetachedContainer: true,\r\n                render: that._getDefaultTemplate(column)\r\n            }\r\n        }\r\n        return template\r\n    }\r\n    _createRow(row, tag) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (row) {\r\n            const isGroup = \"group\" === row.rowType;\r\n            const isDataRow = \"data\" === row.rowType;\r\n            isDataRow && $row.addClass(\"dx-data-row\");\r\n            isDataRow && this.option(\"showRowLines\") && $row.addClass(\"dx-row-lines\");\r\n            this.option(\"showColumnLines\") && $row.addClass(\"dx-column-lines\");\r\n            if (false === row.visible) {\r\n                $row.hide()\r\n            }\r\n            if (isGroup) {\r\n                $row.addClass(\"dx-group-row\");\r\n                this.setAriaExpandedAttribute($row, row)\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n    _rowPrepared($row, rowOptions, row) {\r\n        if (\"data\" === rowOptions.rowType) {\r\n            if (this.option(\"rowAlternationEnabled\")) {\r\n                this._isAltRow(row) && $row.addClass(\"dx-row-alt\");\r\n                setWatcher({\r\n                    element: $row.get(0),\r\n                    watch: rowOptions.watch,\r\n                    getter: () => this._isAltRow(row),\r\n                    callBack: value => {\r\n                        $row.toggleClass(\"dx-row-alt\", value)\r\n                    }\r\n                })\r\n            }\r\n            this._setAriaRowIndex(rowOptions, $row);\r\n            setWatcher({\r\n                element: $row.get(0),\r\n                watch: rowOptions.watch,\r\n                getter: () => rowOptions.rowIndex,\r\n                callBack: () => this._setAriaRowIndex(rowOptions, $row)\r\n            })\r\n        }\r\n        super._rowPrepared.apply(this, arguments)\r\n    }\r\n    _setAriaRowIndex(row, $row) {\r\n        if (!$row.is(\"tr\")) {\r\n            return\r\n        }\r\n        const {\r\n            component: component\r\n        } = this;\r\n        const isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && !gridCoreUtils.isVirtualRowRendering(component);\r\n        let rowIndex = row.rowIndex + 1;\r\n        if (isPagerMode) {\r\n            rowIndex = component.pageIndex() * component.pageSize() + rowIndex\r\n        } else {\r\n            rowIndex += this._dataController.getRowIndexOffset()\r\n        }\r\n        this.setAria(\"rowindex\", rowIndex, $row)\r\n    }\r\n    setAriaExpandedAttribute($row, row) {\r\n        const description = row.isExpanded ? this.localize(\"dxDataGrid-ariaExpandedRow\") : this.localize(\"dxDataGrid-ariaCollapsedRow\");\r\n        this.setAria(\"roledescription\", description, $row)\r\n    }\r\n    _afterRowPrepared(e) {\r\n        const arg = e.args[0];\r\n        const dataController = this._dataController;\r\n        const row = dataController.getVisibleRows()[arg.rowIndex];\r\n        const watch = this.option(\"integrationOptions.watchMethod\");\r\n        if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\r\n            return\r\n        }\r\n        const dispose = watch((() => dataController.generateDataValues(arg.data, arg.columns)), (() => {\r\n            dataController.repaintRows([row.rowIndex], this.option(\"repaintChangesOnly\"))\r\n        }), {\r\n            deep: true,\r\n            skipImmediate: true\r\n        });\r\n        eventsEngine.on(arg.rowElement, removeEvent, dispose)\r\n    }\r\n    _renderScrollable(force) {\r\n        const that = this;\r\n        const $element = that.element();\r\n        if (!$element.children().length) {\r\n            $element.append(\"<div>\")\r\n        }\r\n        if (force || !that._loadPanel) {\r\n            that._renderLoadPanel($element, $element.parent(), that._dataController.isLocalStore())\r\n        }\r\n        if ((force || !that.getScrollable()) && that._dataController.isLoaded()) {\r\n            const columns = that.getColumns();\r\n            let allColumnsHasWidth = true;\r\n            for (let i = 0; i < columns.length; i++) {\r\n                if (!columns[i].width && !columns[i].minWidth) {\r\n                    allColumnsHasWidth = false;\r\n                    break\r\n                }\r\n            }\r\n            if (that.option(\"columnAutoWidth\") || that._hasHeight || allColumnsHasWidth || that._columnsController._isColumnFixing()) {\r\n                that._renderScrollableCore($element)\r\n            }\r\n        }\r\n    }\r\n    _handleScroll(e) {\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        const isNativeScrolling = e.component.option(\"useNative\");\r\n        this._scrollTop = e.scrollOffset.top;\r\n        this._scrollLeft = e.scrollOffset.left;\r\n        let scrollLeft = e.scrollOffset.left;\r\n        if (rtlEnabled) {\r\n            this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\r\n            if (isNativeScrolling) {\r\n                scrollLeft = -this._scrollRight\r\n            }\r\n            if (!this.isScrollbarVisible(true)) {\r\n                this._scrollLeft = -1\r\n            }\r\n        }\r\n        this.scrollChanged.fire(_extends({}, e.scrollOffset, {\r\n            left: scrollLeft\r\n        }), this.name)\r\n    }\r\n    _renderScrollableCore($element) {\r\n        const dxScrollableOptions = this._createScrollableOptions();\r\n        const scrollHandler = this._handleScroll.bind(this);\r\n        dxScrollableOptions.onScroll = scrollHandler;\r\n        this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\r\n        this._scrollableContainer = this._scrollable && $(this._scrollable.container())\r\n    }\r\n    _renderLoadPanel() {\r\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n            args[_key] = arguments[_key]\r\n        }\r\n        return gridCoreUtils.renderLoadPanel.apply(this, arguments)\r\n    }\r\n    _renderContent(contentElement, tableElement, isFixedTableRendering) {\r\n        contentElement.empty().append(tableElement);\r\n        return this._findContentElement()\r\n    }\r\n    _updateContent(newTableElement, change, isFixedTableRendering) {\r\n        this._contentChanges.push({\r\n            newTableElement: newTableElement,\r\n            change: change,\r\n            isFixedTableRendering: isFixedTableRendering\r\n        });\r\n        return this.waitAsyncTemplates().done((() => {\r\n            const contentChanges = this._contentChanges;\r\n            this._contentChanges = [];\r\n            contentChanges.forEach((_ref3 => {\r\n                let {\r\n                    newTableElement: newTableElement,\r\n                    change: change,\r\n                    isFixedTableRendering: isFixedTableRendering\r\n                } = _ref3;\r\n                const tableElement = this.getTableElement(isFixedTableRendering);\r\n                const contentElement = this._findContentElement(isFixedTableRendering);\r\n                const changeType = null === change || void 0 === change ? void 0 : change.changeType;\r\n                const executors = [];\r\n                const highlightChanges = this.option(\"highlightChanges\");\r\n                const rowInsertedClass = this.addWidgetPrefix(\"row-inserted-animation\");\r\n                if (\"update\" === changeType) {\r\n                    each(change.rowIndices, ((index, rowIndex) => {\r\n                        var _change$changeTypes;\r\n                        const $newRowElement = this._getRowElements(newTableElement).eq(index);\r\n                        const dataChangeType = null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes[index];\r\n                        const item = change.items && change.items[index];\r\n                        executors.push((() => {\r\n                            const $rowElements = this._getRowElements(tableElement);\r\n                            const $rowElement = $rowElements.eq(rowIndex);\r\n                            switch (dataChangeType) {\r\n                                case \"update\":\r\n                                    if (item) {\r\n                                        var _change$columnIndices;\r\n                                        const columnIndices = null === (_change$columnIndices = change.columnIndices) || void 0 === _change$columnIndices ? void 0 : _change$columnIndices[index];\r\n                                        if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\r\n                                            $rowElement.toggle(item.visible)\r\n                                        } else if (columnIndices) {\r\n                                            this._updateCells($rowElement, $newRowElement, columnIndices, item)\r\n                                        } else {\r\n                                            $rowElement.replaceWith($newRowElement)\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case \"insert\":\r\n                                    if (!$rowElements.length) {\r\n                                        if (tableElement) {\r\n                                            const target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\r\n                                            $newRowElement.prependTo(target)\r\n                                        }\r\n                                    } else if ($rowElement.length) {\r\n                                        $newRowElement.insertBefore($rowElement)\r\n                                    } else {\r\n                                        $newRowElement.insertAfter($rowElements.last())\r\n                                    }\r\n                                    if (highlightChanges && change.isLiveUpdate) {\r\n                                        $newRowElement.addClass(rowInsertedClass)\r\n                                    }\r\n                                    break;\r\n                                case \"remove\":\r\n                                    $rowElement.remove()\r\n                            }\r\n                        }))\r\n                    }));\r\n                    each(executors, (function() {\r\n                        this()\r\n                    }));\r\n                    newTableElement.remove()\r\n                } else {\r\n                    this.setTableElement(newTableElement, isFixedTableRendering);\r\n                    contentElement.addClass(this.addWidgetPrefix(\"content\"));\r\n                    this._setGridRole(contentElement);\r\n                    this._renderContent(contentElement, newTableElement, isFixedTableRendering)\r\n                }\r\n            }))\r\n        })).fail((() => {\r\n            this._contentChanges = []\r\n        }))\r\n    }\r\n    _getGridRoleName() {\r\n        return \"grid\"\r\n    }\r\n    _setGridRole($element) {\r\n        var _this$_dataController;\r\n        const hasData = !(null !== (_this$_dataController = this._dataController) && void 0 !== _this$_dataController && _this$_dataController.isEmpty());\r\n        const gridRoleName = this._getGridRoleName();\r\n        if (null !== $element && void 0 !== $element && $element.length && hasData) {\r\n            this.setAria(\"role\", gridRoleName, $element)\r\n        }\r\n    }\r\n    _createEmptyRow(className, isFixed, height) {\r\n        const that = this;\r\n        let $cell;\r\n        const $row = that._createRow();\r\n        const columns = isFixed ? this.getFixedColumns() : this.getColumns();\r\n        $row.addClass(className).toggleClass(\"dx-column-lines\", that.option(\"showColumnLines\"));\r\n        for (let i = 0; i < columns.length; i++) {\r\n            $cell = that._createCell({\r\n                column: columns[i],\r\n                rowType: \"freeSpace\",\r\n                columnIndex: i,\r\n                columns: columns\r\n            });\r\n            isNumeric(height) && $cell.css(\"height\", height);\r\n            $row.append($cell)\r\n        }\r\n        that.setAria(\"role\", \"presentation\", $row);\r\n        return $row\r\n    }\r\n    getFixedColumns() {\r\n        throw new Error(\"Method not implemented.\")\r\n    }\r\n    _appendEmptyRow($table, $emptyRow, location) {\r\n        const $tBodies = this._getBodies($table);\r\n        const isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\r\n        const $container = isTableContainer ? $table : $tBodies;\r\n        if (\"top\" === location) {\r\n            $container.first().prepend($emptyRow);\r\n            if (isTableContainer) {\r\n                const $colgroup = $container.children(\"colgroup\");\r\n                $container.prepend($colgroup)\r\n            }\r\n        } else {\r\n            $container.last().append($emptyRow)\r\n        }\r\n    }\r\n    _renderFreeSpaceRow($tableElement, change) {\r\n        let $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\r\n        $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement, \"refresh\" === (null === change || void 0 === change ? void 0 : change.changeType));\r\n        this._appendEmptyRow($tableElement, $freeSpaceRowElement)\r\n    }\r\n    _checkRowKeys(options) {\r\n        const that = this;\r\n        const rows = that._getRows(options);\r\n        const keyExpr = that._dataController.store() && that._dataController.store().key();\r\n        keyExpr && rows.some((row => {\r\n            if (\"data\" === row.rowType && void 0 === row.key) {\r\n                that._dataController.fireError(\"E1046\", keyExpr);\r\n                return true\r\n            }\r\n            return\r\n        }))\r\n    }\r\n    _needUpdateRowHeight(itemsCount) {\r\n        return itemsCount > 0 && !this._rowHeight\r\n    }\r\n    _getRowsHeight($tableElement) {\r\n        $tableElement = $tableElement || this._tableElement;\r\n        const $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(`.${FREE_SPACE_CLASS}`);\r\n        return $rowElements.toArray().reduce(((sum, row) => sum + getBoundingRect(row).height), 0)\r\n    }\r\n    _updateRowHeight() {\r\n        const that = this;\r\n        const $tableElement = that.getTableElement();\r\n        const itemsCount = that._dataController.items().length;\r\n        if ($tableElement && that._needUpdateRowHeight(itemsCount)) {\r\n            const rowsHeight = that._getRowsHeight($tableElement);\r\n            that._rowHeight = rowsHeight / itemsCount\r\n        }\r\n    }\r\n    _findContentElement(isFixedTableRendering) {\r\n        let $content = this.element();\r\n        const scrollable = this.getScrollable();\r\n        if ($content) {\r\n            if (scrollable) {\r\n                $content = $(scrollable.content())\r\n            }\r\n            return $content.children().first()\r\n        }\r\n    }\r\n    _getRowElements(tableElement) {\r\n        const $rows = super._getRowElements(tableElement);\r\n        return $rows && $rows.not(`.${FREE_SPACE_CLASS}`)\r\n    }\r\n    _getFreeSpaceRowElements($table) {\r\n        const tableElements = $table || this.getTableElements();\r\n        return tableElements && tableElements.children(\"tbody\").children(`.${FREE_SPACE_CLASS}`)\r\n    }\r\n    _getNoDataText() {\r\n        return this.option(\"noDataText\")\r\n    }\r\n    _rowClick(e) {\r\n        const item = this._dataController.items()[e.rowIndex] || {};\r\n        this.executeAction(\"onRowClick\", extend({\r\n            evaluate(expr) {\r\n                const getter = compileGetter(expr);\r\n                return getter(item.data)\r\n            }\r\n        }, e, item))\r\n    }\r\n    _rowDblClick(e) {\r\n        const item = this._dataController.items()[e.rowIndex] || {};\r\n        this.executeAction(\"onRowDblClick\", extend({}, e, item))\r\n    }\r\n    _getColumnsCountBeforeGroups(columns) {\r\n        for (let i = 0; i < columns.length; i++) {\r\n            if (\"groupExpand\" === columns[i].type) {\r\n                return i\r\n            }\r\n        }\r\n        return 0\r\n    }\r\n    _getGroupCellOptions(options) {\r\n        const columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\r\n        const columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\r\n        return {\r\n            columnIndex: columnIndex,\r\n            colspan: options.columns.length - columnIndex - 1\r\n        }\r\n    }\r\n    _needWrapRow() {\r\n        return super._needWrapRow.apply(this, arguments) || !!this.option(\"dataRowTemplate\")\r\n    }\r\n    _renderCells($row, options) {\r\n        if (\"group\" === options.row.rowType) {\r\n            this._renderGroupedCells($row, options)\r\n        } else if (options.row.values) {\r\n            super._renderCells($row, options)\r\n        }\r\n    }\r\n    _renderGroupedCells($row, options) {\r\n        const {\r\n            row: row\r\n        } = options;\r\n        let expandColumn;\r\n        const {\r\n            columns: columns\r\n        } = options;\r\n        const {\r\n            rowIndex: rowIndex\r\n        } = row;\r\n        let isExpanded;\r\n        const groupCellOptions = this._getGroupCellOptions(options);\r\n        for (let i = 0; i <= groupCellOptions.columnIndex; i++) {\r\n            if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\r\n                isExpanded = !!row.isExpanded;\r\n                expandColumn = columns[i]\r\n            } else {\r\n                isExpanded = null;\r\n                expandColumn = {\r\n                    command: \"expand\",\r\n                    cssClass: columns[i].cssClass,\r\n                    fixed: columns[i].fixed\r\n                }\r\n            }\r\n            if (this._needRenderCell(i, options.columnIndices)) {\r\n                this._renderCell($row, {\r\n                    value: isExpanded,\r\n                    row: row,\r\n                    rowIndex: rowIndex,\r\n                    column: expandColumn,\r\n                    columnIndex: i,\r\n                    columnIndices: options.columnIndices,\r\n                    change: options.change\r\n                })\r\n            }\r\n        }\r\n        const groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\r\n        const groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\r\n            command: null,\r\n            type: null,\r\n            cssClass: null,\r\n            width: null,\r\n            showWhenGrouped: false,\r\n            alignment: groupColumnAlignment\r\n        });\r\n        if (groupCellOptions.colspan > 1) {\r\n            groupColumn.colspan = groupCellOptions.colspan\r\n        }\r\n        if (this._needRenderCell(groupCellOptions.columnIndex + 1, options.columnIndices)) {\r\n            this._renderCell($row, {\r\n                value: row.values[row.groupIndex],\r\n                row: row,\r\n                rowIndex: rowIndex,\r\n                column: groupColumn,\r\n                columnIndex: groupCellOptions.columnIndex + 1,\r\n                columnIndices: options.columnIndices,\r\n                change: options.change\r\n            })\r\n        }\r\n    }\r\n    _renderRows($table, options) {\r\n        const that = this;\r\n        const scrollingMode = that.option(\"scrolling.mode\");\r\n        super._renderRows($table, extend({\r\n            scrollingMode: scrollingMode\r\n        }, options));\r\n        that._checkRowKeys(options.change);\r\n        that._renderFreeSpaceRow($table, options.change);\r\n        if (!that._hasHeight) {\r\n            that.updateFreeSpaceRowHeight($table)\r\n        }\r\n    }\r\n    _renderDataRowByTemplate($table, options, dataRowTemplate) {\r\n        const {\r\n            row: row\r\n        } = options;\r\n        const rowOptions = extend({\r\n            columns: options.columns\r\n        }, row);\r\n        const $tbody = this._createRow(row, \"tbody\");\r\n        $tbody.appendTo($table);\r\n        this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options.change);\r\n        this._rowPrepared($tbody, rowOptions, options.row)\r\n    }\r\n    _renderRow($table, options) {\r\n        const {\r\n            row: row\r\n        } = options;\r\n        const {\r\n            rowTemplate: rowTemplate\r\n        } = this.option();\r\n        const dataRowTemplate = this.option(\"dataRowTemplate\");\r\n        if (\"data\" === row.rowType && dataRowTemplate) {\r\n            this._renderDataRowByTemplate($table, options, dataRowTemplate)\r\n        } else if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\r\n            this.renderTemplate($table, rowTemplate, extend({\r\n                columns: options.columns\r\n            }, row), true)\r\n        } else {\r\n            super._renderRow($table, options)\r\n        }\r\n    }\r\n    _renderTable(options) {\r\n        const that = this;\r\n        const $table = super._renderTable(options);\r\n        const resizeCompletedHandler = function() {\r\n            const scrollableInstance = that.getScrollable();\r\n            if (scrollableInstance && that.element().closest(getWindow().document).length) {\r\n                that.resizeCompleted.remove(resizeCompletedHandler);\r\n                scrollableInstance._visibilityChanged(true)\r\n            }\r\n        };\r\n        if (!isDefined(that.getTableElement())) {\r\n            that.setTableElement($table);\r\n            that._renderScrollable(true);\r\n            that.resizeCompleted.add(resizeCompletedHandler)\r\n        } else {\r\n            that._renderScrollable()\r\n        }\r\n        return $table\r\n    }\r\n    _createTable() {\r\n        const $table = super._createTable.apply(this, arguments);\r\n        if (this.option().rowTemplate || this.option().dataRowTemplate) {\r\n            $table.appendTo(this.component.$element())\r\n        }\r\n        return $table\r\n    }\r\n    _renderCore(change) {\r\n        const $element = this.element();\r\n        $element.addClass(this.addWidgetPrefix(\"rowsview\")).toggleClass(this.addWidgetPrefix(\"nowrap\"), !this.option(\"wordWrapEnabled\"));\r\n        $element.toggleClass(\"dx-empty\", this._dataController.isEmpty());\r\n        this.setAria(\"role\", \"presentation\", $element);\r\n        const $table = this._renderTable({\r\n            change: change\r\n        });\r\n        const deferred = this._updateContent($table, change);\r\n        super._renderCore(change);\r\n        this._lastColumnWidths = null;\r\n        return deferred\r\n    }\r\n    _getRows(change) {\r\n        return change && change.items || this._dataController.items()\r\n    }\r\n    _getCellOptions(options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const {\r\n            row: row\r\n        } = options;\r\n        const {\r\n            data: data\r\n        } = row;\r\n        const summaryCells = row && row.summaryCells;\r\n        const {\r\n            value: value\r\n        } = options;\r\n        const displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\r\n        const parameters = super._getCellOptions(options);\r\n        parameters.value = value;\r\n        parameters.oldValue = options.oldValue;\r\n        parameters.displayValue = displayValue;\r\n        parameters.row = row;\r\n        parameters.key = row.key;\r\n        parameters.data = data;\r\n        parameters.rowType = row.rowType;\r\n        parameters.values = row.values;\r\n        parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\r\n        parameters.rowIndex = row.rowIndex;\r\n        parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\r\n        parameters.resized = column.resizedCallbacks;\r\n        if (isDefined(column.groupIndex) && !column.command) {\r\n            const groupingTextsOptions = that.option(\"grouping.texts\");\r\n            const scrollingMode = that.option(\"scrolling.mode\");\r\n            if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\r\n                parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage\r\n            }\r\n        }\r\n        return parameters\r\n    }\r\n    _toggleDraggableSourceColumnClass($rows, visibleColumns, columnIndex, value) {\r\n        const columnsController = this._columnsController;\r\n        const columns = columnsController.getColumns();\r\n        const column = columns && columns[columnIndex];\r\n        const columnID = column && column.isBand && column.index;\r\n        each($rows, ((rowIndex, row) => {\r\n            if (!$(row).hasClass(\"dx-group-row\")) {\r\n                for (let i = 0; i < visibleColumns.length; i++) {\r\n                    if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\r\n                        $rows.eq(rowIndex).children().eq(i).toggleClass(this.addWidgetPrefix(REORDERING_CLASSES.draggableColumn), value);\r\n                        if (!isNumeric(columnID)) {\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    _getDevicePixelRatio() {\r\n        return getWindow().devicePixelRatio\r\n    }\r\n    renderNoDataText() {\r\n        return gridCoreUtils.renderNoDataText.apply(this, arguments)\r\n    }\r\n    getCellOptions(rowIndex, columnIdentifier) {\r\n        const rowOptions = this._dataController.items()[rowIndex];\r\n        let cellOptions;\r\n        let column;\r\n        if (rowOptions) {\r\n            if (isString(columnIdentifier)) {\r\n                column = this._columnsController.columnOption(columnIdentifier)\r\n            } else {\r\n                column = this._columnsController.getVisibleColumns()[columnIdentifier]\r\n            }\r\n            if (column) {\r\n                cellOptions = this._getCellOptions({\r\n                    value: column.calculateCellValue(rowOptions.data),\r\n                    rowIndex: rowOptions.rowIndex,\r\n                    row: rowOptions,\r\n                    column: column\r\n                })\r\n            }\r\n        }\r\n        return cellOptions\r\n    }\r\n    getRow(index) {\r\n        if (index >= 0) {\r\n            const rows = this._getRowElements();\r\n            if (rows.length > index) {\r\n                return $(rows[index])\r\n            }\r\n        }\r\n        return\r\n    }\r\n    updateFreeSpaceRowHeight($table) {\r\n        const dataController = this._dataController;\r\n        const itemCount = dataController.items(true).length;\r\n        const contentElement = this._findContentElement();\r\n        const freeSpaceRowElements = this._getFreeSpaceRowElements($table);\r\n        if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\r\n            let isFreeSpaceRowVisible = false;\r\n            if (itemCount > 0) {\r\n                if (!this._hasHeight) {\r\n                    const freeSpaceRowCount = dataController.pageSize() - itemCount;\r\n                    const scrollingMode = this.option(\"scrolling.mode\");\r\n                    if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                        setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\r\n                        isFreeSpaceRowVisible = true\r\n                    }\r\n                    if (!isFreeSpaceRowVisible && $table) {\r\n                        setHeight(freeSpaceRowElements, 0)\r\n                    } else {\r\n                        freeSpaceRowElements.toggle(isFreeSpaceRowVisible)\r\n                    }\r\n                    this._updateLastRowBorder(isFreeSpaceRowVisible)\r\n                } else {\r\n                    freeSpaceRowElements.hide();\r\n                    deferUpdate((() => {\r\n                        const scrollbarWidth = this.getScrollbarWidth(true);\r\n                        const elementHeightWithoutScrollbar = getHeight(this.element()) - scrollbarWidth;\r\n                        const contentHeight = getOuterHeight(contentElement);\r\n                        const showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\r\n                        const rowsHeight = this._getRowsHeight(contentElement.children().first());\r\n                        const $tableElement = $table || this.getTableElements();\r\n                        const borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\r\n                        const heightCorrection = this._getHeightCorrection();\r\n                        const resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\r\n                        if (showFreeSpaceRow) {\r\n                            deferRender((() => {\r\n                                freeSpaceRowElements.css(\"height\", resultHeight);\r\n                                isFreeSpaceRowVisible = true;\r\n                                freeSpaceRowElements.show()\r\n                            }))\r\n                        }\r\n                        deferRender((() => this._updateLastRowBorder(isFreeSpaceRowVisible)))\r\n                    }))\r\n                }\r\n            } else {\r\n                freeSpaceRowElements.css(\"height\", 0);\r\n                freeSpaceRowElements.show();\r\n                this._updateLastRowBorder(true)\r\n            }\r\n        }\r\n    }\r\n    _getHeightCorrection() {\r\n        const isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\r\n        const isChromeLatest = browser.chrome && browser.version >= 91;\r\n        const hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\r\n        return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0\r\n    }\r\n    _columnOptionChanged(e) {\r\n        const {\r\n            optionNames: optionNames\r\n        } = e;\r\n        if (e.changeTypes.grouping) {\r\n            return\r\n        }\r\n        if (optionNames.width || optionNames.visibleWidth) {\r\n            super._columnOptionChanged(e);\r\n            this._fireColumnResizedCallbacks()\r\n        }\r\n    }\r\n    getScrollable() {\r\n        return this._scrollable\r\n    }\r\n    _handleDataChanged(change) {\r\n        const that = this;\r\n        switch (change.changeType) {\r\n            case \"refresh\":\r\n            case \"prepend\":\r\n            case \"append\":\r\n            case \"update\":\r\n                that.render(null, change);\r\n                break;\r\n            default:\r\n                that._update(change)\r\n        }\r\n    }\r\n    publicMethods() {\r\n        return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"]\r\n    }\r\n    contentWidth() {\r\n        return getWidth(this.element()) - this.getScrollbarWidth()\r\n    }\r\n    getScrollbarWidth(isHorizontal) {\r\n        const scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\r\n        let scrollbarWidth = 0;\r\n        if (scrollableContainer) {\r\n            if (!isHorizontal) {\r\n                scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0\r\n            } else {\r\n                scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\r\n                scrollbarWidth += getScrollableBottomPadding(this)\r\n            }\r\n        }\r\n        return scrollbarWidth > 0 ? scrollbarWidth : 0\r\n    }\r\n    _fireColumnResizedCallbacks() {\r\n        const lastColumnWidths = this._lastColumnWidths || [];\r\n        const columnWidths = [];\r\n        const columns = this.getColumns();\r\n        for (let i = 0; i < columns.length; i++) {\r\n            columnWidths[i] = columns[i].visibleWidth;\r\n            if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\r\n                columns[i].resizedCallbacks.fire(columnWidths[i])\r\n            }\r\n        }\r\n        this._lastColumnWidths = columnWidths\r\n    }\r\n    _updateLastRowBorder(isFreeSpaceRowVisible) {\r\n        if (this.option(\"showBorders\") && !isFreeSpaceRowVisible) {\r\n            this.element().addClass(LAST_ROW_BORDER)\r\n        } else {\r\n            this.element().removeClass(LAST_ROW_BORDER)\r\n        }\r\n    }\r\n    _updateScrollable() {\r\n        const scrollable = Scrollable.getInstance(this.element());\r\n        if (scrollable) {\r\n            scrollable.update();\r\n            if (scrollable.option(\"useNative\") || !(null !== scrollable && void 0 !== scrollable && scrollable.isRenovated())) {\r\n                this._updateHorizontalScrollPosition()\r\n            }\r\n        }\r\n    }\r\n    _updateHorizontalScrollPosition() {\r\n        const scrollable = this.getScrollable();\r\n        const scrollLeft = scrollable && scrollable.scrollOffset().left;\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        if (rtlEnabled) {\r\n            const maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\r\n            const scrollRight = maxHorizontalScrollOffset - scrollLeft;\r\n            if (scrollRight !== this._scrollRight) {\r\n                this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight\r\n            }\r\n        }\r\n        if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\r\n            scrollable.scrollTo({\r\n                x: this._scrollLeft\r\n            })\r\n        }\r\n    }\r\n    _resizeCore() {\r\n        const that = this;\r\n        that._fireColumnResizedCallbacks();\r\n        that._updateRowHeight();\r\n        deferRender((() => {\r\n            that._renderScrollable();\r\n            that.renderNoDataText();\r\n            that.updateFreeSpaceRowHeight();\r\n            deferUpdate((() => {\r\n                that._updateScrollable()\r\n            }))\r\n        }))\r\n    }\r\n    scrollTo(location) {\r\n        const $element = this.element();\r\n        const dxScrollable = $element && Scrollable.getInstance($element);\r\n        if (dxScrollable) {\r\n            dxScrollable.scrollTo(location)\r\n        }\r\n    }\r\n    height(height) {\r\n        const that = this;\r\n        const $element = this.element();\r\n        if (0 === arguments.length) {\r\n            return $element ? getOuterHeight($element, true) : 0\r\n        }\r\n        if (isDefined(height) && $element) {\r\n            that.hasHeight(\"auto\" !== height);\r\n            setHeight($element, height)\r\n        }\r\n    }\r\n    hasHeight(hasHeight) {\r\n        if (0 === arguments.length) {\r\n            return !!this._hasHeight\r\n        }\r\n        this._hasHeight = hasHeight;\r\n        return\r\n    }\r\n    setLoading(isLoading, messageText) {\r\n        const that = this;\r\n        let loadPanel = that._loadPanel;\r\n        const dataController = that._dataController;\r\n        const loadPanelOptions = that.option(\"loadPanel\") || {};\r\n        const animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\r\n        const $element = that.element();\r\n        if (!hasWindow()) {\r\n            return\r\n        }\r\n        if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\r\n            that._renderLoadPanel($element, $element.parent());\r\n            loadPanel = that._loadPanel\r\n        }\r\n        if (loadPanel) {\r\n            const visibilityOptions = {\r\n                message: messageText || loadPanelOptions.text,\r\n                animation: animation,\r\n                visible: isLoading\r\n            };\r\n            if (isLoading) {\r\n                visibilityOptions.position = gridCoreUtils.calculateLoadPanelPosition($element)\r\n            }\r\n            clearTimeout(that._hideLoadingTimeoutID);\r\n            if (loadPanel.option(\"visible\") && !isLoading) {\r\n                that._hideLoadingTimeoutID = setTimeout((() => {\r\n                    loadPanel.option(visibilityOptions)\r\n                }), 200)\r\n            } else {\r\n                loadPanel.option(visibilityOptions)\r\n            }\r\n        }\r\n    }\r\n    toggleDraggableColumnClass(columnIndex, value) {\r\n        const $rows = this._getRowElements().not(\".dx-group-row\") || [];\r\n        this._toggleDraggableSourceColumnClass($rows, this.getColumns(), columnIndex, value)\r\n    }\r\n    _getCellElementsCore(rowIndex) {\r\n        const $cells = super._getCellElementsCore.apply(this, arguments);\r\n        if ($cells) {\r\n            const groupCellIndex = $cells.filter(\".dx-group-cell\").index();\r\n            if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\r\n                return $cells.slice(0, groupCellIndex + 1)\r\n            }\r\n        }\r\n        return $cells\r\n    }\r\n    _getBoundaryVisibleItemIndex(isTop, isFloor) {\r\n        const that = this;\r\n        let itemIndex = 0;\r\n        let prevOffset = 0;\r\n        let offset = 0;\r\n        let viewportBoundary = that._scrollTop;\r\n        const $contentElement = that._findContentElement();\r\n        const contentElementOffsetTop = $contentElement && $contentElement.offset().top;\r\n        const items = this._dataController.items();\r\n        const tableElement = that.getTableElement();\r\n        if (items.length && tableElement) {\r\n            const rowElements = that._getRowElements(tableElement).filter(\":visible\");\r\n            if (!isTop) {\r\n                const height = getOuterHeight(this._hasHeight ? this.element() : getWindow());\r\n                viewportBoundary += height\r\n            }\r\n            for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\r\n                prevOffset = offset;\r\n                const $rowElement = $(rowElements).eq(itemIndex);\r\n                if ($rowElement.length) {\r\n                    offset = $rowElement.offset();\r\n                    offset = (isTop ? offset.top : offset.top + getOuterHeight($rowElement)) - contentElementOffsetTop;\r\n                    if (offset > viewportBoundary) {\r\n                        if (itemIndex) {\r\n                            if (isFloor || 2 * viewportBoundary < Math.round(offset + prevOffset)) {\r\n                                itemIndex--\r\n                            }\r\n                        }\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n            if (itemIndex && itemIndex === items.length) {\r\n                itemIndex--\r\n            }\r\n        }\r\n        return itemIndex\r\n    }\r\n    getTopVisibleItemIndex(isFloor) {\r\n        return this._getBoundaryVisibleItemIndex(true, isFloor)\r\n    }\r\n    getBottomVisibleItemIndex(isFloor) {\r\n        return this._getBoundaryVisibleItemIndex(false, isFloor)\r\n    }\r\n    getTopVisibleRowData() {\r\n        const itemIndex = this.getTopVisibleItemIndex();\r\n        const items = this._dataController.items();\r\n        if (items[itemIndex]) {\r\n            return items[itemIndex].data\r\n        }\r\n        return\r\n    }\r\n    _scrollToElement($element, offset) {\r\n        const scrollable = this.getScrollable();\r\n        scrollable && scrollable.scrollToElement($element, offset)\r\n    }\r\n    optionChanged(args) {\r\n        const that = this;\r\n        super.optionChanged(args);\r\n        switch (args.name) {\r\n            case \"wordWrapEnabled\":\r\n            case \"showColumnLines\":\r\n            case \"showRowLines\":\r\n            case \"rowAlternationEnabled\":\r\n            case \"rowTemplate\":\r\n            case \"dataRowTemplate\":\r\n            case \"twoWayBindingEnabled\":\r\n                that._invalidate(true, true);\r\n                args.handled = true;\r\n                break;\r\n            case \"scrolling\":\r\n                that._rowHeight = null;\r\n                that._tableElement = null;\r\n                args.handled = true;\r\n                break;\r\n            case \"rtlEnabled\":\r\n                that._rowHeight = null;\r\n                that._tableElement = null;\r\n                break;\r\n            case \"loadPanel\":\r\n                that._tableElement = null;\r\n                that._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\r\n                args.handled = true;\r\n                break;\r\n            case \"noDataText\":\r\n                that.renderNoDataText();\r\n                args.handled = true\r\n        }\r\n    }\r\n    setAriaOwns(headerTableId, footerTableId, isFixed) {\r\n        const $contentElement = this._findContentElement();\r\n        const $tableElement = this.getTableElement();\r\n        if (null !== $tableElement && void 0 !== $tableElement && $tableElement.length) {\r\n            this.setAria(\"owns\", `${headerTableId??\"\"} ${$tableElement.attr(\"id\")??\"\"} ${footerTableId??\"\"}`.trim(), $contentElement)\r\n        }\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        clearTimeout(this._hideLoadingTimeoutID);\r\n        this._scrollable && this._scrollable.dispose()\r\n    }\r\n    setScrollerSpacing(vScrollbarWidth, hScrollbarWidth) {}\r\n    getFixedContentElement() {\r\n        var _this$element;\r\n        const fixedContentClass = this.addWidgetPrefix(\"content-fixed\");\r\n        return null === (_this$element = this.element()) || void 0 === _this$element ? void 0 : _this$element.children(`.${fixedContentClass}`)\r\n    }\r\n    _restoreErrorRow(contentTable) {}\r\n    isElementInside($element) {\r\n        const $rowsViewElement = $element.closest(`.${this.addWidgetPrefix(\"rowsview\")}`);\r\n        return $rowsViewElement.is(this.element())\r\n    }\r\n}\r\nexport const rowsModule = {\r\n    defaultOptions: () => ({\r\n        hoverStateEnabled: false,\r\n        scrolling: {\r\n            useNative: \"auto\"\r\n        },\r\n        loadPanel: {\r\n            enabled: \"auto\",\r\n            text: messageLocalization.format(\"Loading\"),\r\n            width: 200,\r\n            height: 90,\r\n            showIndicator: true,\r\n            indicatorSrc: \"\",\r\n            showPane: true\r\n        },\r\n        dataRowTemplate: null,\r\n        columnAutoWidth: false,\r\n        noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\r\n        wordWrapEnabled: false,\r\n        showColumnLines: true,\r\n        showRowLines: false,\r\n        rowAlternationEnabled: false,\r\n        activeStateEnabled: false,\r\n        twoWayBindingEnabled: true\r\n    }),\r\n    views: {\r\n        rowsView: RowsView\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}