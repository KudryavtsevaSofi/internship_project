{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/views/m_grid_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport domAdapter from \"../../../../core/dom_adapter\";\nimport $ from \"../../../../core/renderer\";\nimport browser from \"../../../../core/utils/browser\";\nimport { deferRender, deferUpdate } from \"../../../../core/utils/common\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getBoundingRect } from \"../../../../core/utils/position\";\nimport { getHeight, getWidth } from \"../../../../core/utils/size\";\nimport { isDefined, isNumeric, isString } from \"../../../../core/utils/type\";\nimport { getWindow, hasWindow } from \"../../../../core/utils/window\";\nimport * as accessibility from \"../../../../ui/shared/accessibility\";\nimport { A11yStatusContainerComponent } from \"../../../grids/grid_core/views/a11y_status_container_component\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nconst BORDERS_CLASS = \"borders\";\nconst TABLE_FIXED_CLASS = \"table-fixed\";\nconst IMPORTANT_MARGIN_CLASS = \"important-margin\";\nconst GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\";\nconst GROUP_ROW_SELECTOR = \"tr.dx-group-row\";\nconst HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nconst VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\nconst E2E_ATTRIBUTES = {\n  a11yStatusContainer: \"e2e-a11y-general-status-container\"\n};\nconst isPercentWidth = function (width) {\n  return isString(width) && width.endsWith(\"%\");\n};\nconst isPixelWidth = function (width) {\n  return isString(width) && width.endsWith(\"px\");\n};\nconst calculateFreeWidth = function (that, widths) {\n  const contentWidth = that._rowsView.contentWidth();\n  const totalWidth = that._getTotalWidth(widths, contentWidth);\n  return contentWidth - totalWidth;\n};\nconst calculateFreeWidthWithCurrentMinWidth = function (that, columnIndex, currentMinWidth, widths) {\n  return calculateFreeWidth(that, widths.map((width, index) => index === columnIndex ? currentMinWidth : width));\n};\nconst restoreFocus = function (focusedElement, selectionRange) {\n  accessibility.hiddenFocus(focusedElement, true);\n  gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n};\nexport class ResizingController extends modules.ViewController {\n  init() {\n    this._prevContentMinHeight = null;\n    this._dataController = this.getController(\"data\");\n    this._columnsController = this.getController(\"columns\");\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n    this._editorFactoryController = this.getController(\"editorFactory\");\n    this._footerView = this.getView(\"footerView\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._gridView = this.getView(\"gridView\");\n  }\n  _initPostRenderHandlers() {\n    if (!this._refreshSizesHandler) {\n      this._refreshSizesHandler = e => {\n        let resizeDeferred = new Deferred().resolve(null);\n        const changeType = null === e || void 0 === e ? void 0 : e.changeType;\n        const isDelayed = null === e || void 0 === e ? void 0 : e.isDelayed;\n        const needFireContentReady = changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && \"pageIndex\" !== changeType && !isDelayed;\n        this._dataController.changed.remove(this._refreshSizesHandler);\n        if (this._checkSize()) {\n          resizeDeferred = this._refreshSizes(e);\n        }\n        if (needFireContentReady) {\n          when(resizeDeferred).done(() => {\n            this._setAriaLabel();\n            this.fireContentReadyAction();\n          });\n        }\n      };\n      this._dataController.changed.add(() => {\n        this._dataController.changed.add(this._refreshSizesHandler);\n      });\n    }\n  }\n  _refreshSizes(e) {\n    let resizeDeferred = new Deferred().resolve(null);\n    const changeType = null === e || void 0 === e ? void 0 : e.changeType;\n    const isDelayed = null === e || void 0 === e ? void 0 : e.isDelayed;\n    const items = this._dataController.items();\n    if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\n      if (!isDelayed) {\n        resizeDeferred = this.resize();\n      }\n    } else if (\"update\" === changeType) {\n      var _e$changeTypes;\n      if (0 === (null === (_e$changeTypes = e.changeTypes) || void 0 === _e$changeTypes ? void 0 : _e$changeTypes.length)) {\n        return resizeDeferred;\n      }\n      if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\n        resizeDeferred = new Deferred();\n        this._waitAsyncTemplates().done(() => {\n          deferUpdate(() => deferRender(() => deferUpdate(() => {\n            this._setScrollerSpacing();\n            this._rowsView.resize();\n            resizeDeferred.resolve();\n          })));\n        }).fail(resizeDeferred.reject);\n      } else {\n        resizeDeferred = this.resize();\n      }\n    }\n    return resizeDeferred;\n  }\n  fireContentReadyAction() {\n    this.component._fireContentReadyAction();\n  }\n  _getWidgetAriaLabel() {\n    return \"dxDataGrid-ariaDataGrid\";\n  }\n  _setAriaLabel() {\n    var _this$_columnsControl;\n    const columnCount = (null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl || null === (_this$_columnsControl = _this$_columnsControl._columns) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.filter(_ref => {\n      let {\n        visible: visible\n      } = _ref;\n      return !!visible;\n    }).length) ?? 0;\n    const totalItemsCount = Math.max(0, this._dataController.totalItemsCount());\n    const widgetAriaLabel = this._getWidgetAriaLabel();\n    const widgetStatusText = messageLocalization.format(widgetAriaLabel, totalItemsCount, columnCount);\n    const $ariaLabelElement = this.component.$element().children(\".dx-gridbase-container\");\n    const expandableWidgetAriaLabel = messageLocalization.format(this._expandableWidgetAriaId);\n    const labelParts = [widgetStatusText];\n    if (expandableWidgetAriaLabel) {\n      labelParts.push(expandableWidgetAriaLabel);\n    }\n    this.component.setAria(\"label\", labelParts.join(\". \"), $ariaLabelElement);\n    this._gridView.setWidgetA11yStatusText(widgetStatusText);\n  }\n  _getBestFitWidths() {\n    var _widths;\n    const rowsView = this._rowsView;\n    const columnHeadersView = this._columnHeadersView;\n    let widths = rowsView.getColumnWidths();\n    if (!(null !== (_widths = widths) && void 0 !== _widths && _widths.length)) {\n      var _rowsView$getTableEle;\n      const headersTableElement = columnHeadersView.getTableElement();\n      columnHeadersView.setTableElement(null === (_rowsView$getTableEle = rowsView.getTableElement()) || void 0 === _rowsView$getTableEle ? void 0 : _rowsView$getTableEle.children(\".dx-header\"));\n      widths = columnHeadersView.getColumnWidths();\n      columnHeadersView.setTableElement(headersTableElement);\n    }\n    return widths;\n  }\n  _setVisibleWidths(visibleColumns, widths) {\n    const columnsController = this._columnsController;\n    columnsController.beginUpdate();\n    each(visibleColumns, (index, column) => {\n      const columnId = columnsController.getColumnId(column);\n      columnsController.columnOption(columnId, \"visibleWidth\", widths[index]);\n    });\n    columnsController.endUpdate();\n  }\n  _toggleBestFitModeForView(view, className, isBestFit) {\n    if (!view || !view.isVisible()) {\n      return;\n    }\n    const $rowsTables = this._rowsView.getTableElements();\n    const $viewTables = view.getTableElements();\n    each($rowsTables, (index, tableElement) => {\n      let $tableBody;\n      const $rowsTable = $(tableElement);\n      const $viewTable = $viewTables.eq(index);\n      if ($viewTable && $viewTable.length) {\n        if (isBestFit) {\n          $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable);\n        } else {\n          $tableBody = $rowsTable.children(`.${className}`).appendTo($viewTable);\n        }\n        $tableBody.toggleClass(className, isBestFit);\n        $tableBody.toggleClass(this.addWidgetPrefix(\"best-fit\"), isBestFit);\n      }\n    });\n  }\n  _toggleBestFitMode(isBestFit) {\n    const $rowsTable = this._rowsView.getTableElement();\n    const $rowsFixedTable = this._rowsView.getTableElements().eq(1);\n    if (!$rowsTable) {\n      return;\n    }\n    $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\n    $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\n    each($rowsFixedTable.find(\"tr.dx-group-row\"), (idx, item) => {\n      $(item).css(\"display\", isBestFit ? \"none\" : \"\");\n    });\n    $rowsFixedTable.toggleClass(this.addWidgetPrefix(\"table-fixed\"), !isBestFit);\n    this._toggleBestFitModeForView(this._columnHeadersView, \"dx-header\", isBestFit);\n    this._toggleBestFitModeForView(this._footerView, \"dx-footer\", isBestFit);\n    if (this._needStretch()) {\n      $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\";\n    }\n  }\n  _toggleContentMinHeight(value) {\n    const scrollable = this._rowsView.getScrollable();\n    const $contentElement = this._rowsView._findContentElement();\n    if (false === (null === scrollable || void 0 === scrollable ? void 0 : scrollable.option(\"useNative\"))) {\n      if (true === value) {\n        this._prevContentMinHeight = $contentElement.get(0).style.minHeight;\n      }\n      if (isDefined(this._prevContentMinHeight)) {\n        $contentElement.css({\n          minHeight: value ? gridCoreUtils.getContentHeightLimit(browser) : this._prevContentMinHeight\n        });\n      }\n    }\n  }\n  _synchronizeColumns() {\n    const columnsController = this._columnsController;\n    const visibleColumns = columnsController.getVisibleColumns();\n    const columnAutoWidth = this.option(\"columnAutoWidth\");\n    const wordWrapEnabled = this.option(\"wordWrapEnabled\");\n    const hasUndefinedColumnWidth = visibleColumns.some(column => !isDefined(column.width));\n    let needBestFit = this._needBestFit();\n    let hasMinWidth = false;\n    let resetBestFitMode;\n    let isColumnWidthsCorrected = false;\n    let resultWidths = [];\n    let focusedElement;\n    let selectionRange;\n    !needBestFit && each(visibleColumns, (index, column) => {\n      if (\"auto\" === column.width) {\n        needBestFit = true;\n        return false;\n      }\n      return;\n    });\n    each(visibleColumns, (index, column) => {\n      if (column.minWidth) {\n        hasMinWidth = true;\n        return false;\n      }\n      return;\n    });\n    this._setVisibleWidths(visibleColumns, []);\n    const $element = this.component.$element();\n    if (needBestFit) {\n      focusedElement = domAdapter.getActiveElement($element.get(0));\n      selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n      this._toggleBestFitMode(true);\n      resetBestFitMode = true;\n    }\n    this._toggleContentMinHeight(wordWrapEnabled);\n    if ($element && $element.get(0) && this._maxWidth) {\n      delete this._maxWidth;\n      $element[0].style.maxWidth = \"\";\n    }\n    deferUpdate(() => {\n      if (needBestFit) {\n        resultWidths = this._getBestFitWidths();\n        each(visibleColumns, (index, column) => {\n          const columnId = columnsController.getColumnId(column);\n          columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true);\n        });\n      } else if (hasMinWidth) {\n        resultWidths = this._getBestFitWidths();\n      }\n      each(visibleColumns, function (index) {\n        const {\n          width: width\n        } = this;\n        if (\"auto\" !== width) {\n          if (isDefined(width)) {\n            resultWidths[index] = isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width;\n          } else if (!columnAutoWidth) {\n            resultWidths[index] = void 0;\n          }\n        }\n      });\n      if (resetBestFitMode) {\n        this._toggleBestFitMode(false);\n        resetBestFitMode = false;\n        if (focusedElement && focusedElement !== domAdapter.getActiveElement()) {\n          const isFocusOutsideWindow = getBoundingRect(focusedElement).bottom < 0;\n          if (!isFocusOutsideWindow) {\n            restoreFocus(focusedElement, selectionRange);\n          }\n        }\n      }\n      isColumnWidthsCorrected = this._correctColumnWidths(resultWidths, visibleColumns);\n      if (columnAutoWidth) {\n        !function () {\n          let expandColumnWidth;\n          each(visibleColumns, (index, column) => {\n            if (\"groupExpand\" === column.type) {\n              expandColumnWidth = resultWidths[index];\n            }\n          });\n          each(visibleColumns, (index, column) => {\n            if (\"groupExpand\" === column.type && expandColumnWidth) {\n              resultWidths[index] = expandColumnWidth;\n            }\n          });\n        }();\n        if (this._needStretch()) {\n          this._processStretch(resultWidths, visibleColumns);\n        }\n      }\n      deferRender(() => {\n        if (needBestFit || isColumnWidthsCorrected || hasUndefinedColumnWidth) {\n          this._setVisibleWidths(visibleColumns, resultWidths);\n        }\n        if (wordWrapEnabled) {\n          this._toggleContentMinHeight(false);\n        }\n      });\n    });\n  }\n  _needBestFit() {\n    return this.option(\"columnAutoWidth\");\n  }\n  _needStretch() {\n    return this._columnsController.getVisibleColumns().some(c => \"auto\" === c.width && !c.command);\n  }\n  _getAverageColumnsWidth(resultWidths) {\n    const freeWidth = calculateFreeWidth(this, resultWidths);\n    const columnCountWithoutWidth = resultWidths.filter(width => void 0 === width).length;\n    return freeWidth / columnCountWithoutWidth;\n  }\n  _correctColumnWidths(resultWidths, visibleColumns) {\n    const that = this;\n    let i;\n    let hasPercentWidth = false;\n    let hasAutoWidth = false;\n    let isColumnWidthsCorrected = false;\n    const $element = that.component.$element();\n    const hasWidth = that._hasWidth;\n    for (i = 0; i < visibleColumns.length; i++) {\n      const index = i;\n      const column = visibleColumns[index];\n      const isHiddenColumn = \"adaptiveHidden\" === resultWidths[index];\n      let width = resultWidths[index];\n      const {\n        minWidth: minWidth\n      } = column;\n      if (minWidth) {\n        if (void 0 === width) {\n          const averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\n          width = averageColumnsWidth;\n        } else if (isPercentWidth(width)) {\n          const freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\n          if (freeWidth < 0) {\n            width = -1;\n          }\n        }\n      }\n      const realColumnWidth = that._getRealColumnWidth(index, resultWidths.map((columnWidth, columnIndex) => index === columnIndex ? width : columnWidth));\n      if (minWidth && !isHiddenColumn && realColumnWidth < minWidth) {\n        resultWidths[index] = minWidth;\n        isColumnWidthsCorrected = true;\n        i = -1;\n      }\n      if (!isDefined(column.width)) {\n        hasAutoWidth = true;\n      }\n      if (isPercentWidth(column.width)) {\n        hasPercentWidth = true;\n      }\n    }\n    if (!hasAutoWidth && resultWidths.length) {\n      const $rowsViewElement = that._rowsView.element();\n      const contentWidth = that._rowsView.contentWidth();\n      const scrollbarWidth = that._rowsView.getScrollbarWidth();\n      const totalWidth = that._getTotalWidth(resultWidths, contentWidth);\n      if (totalWidth < contentWidth) {\n        const lastColumnIndex = gridCoreUtils.getLastResizableColumnIndex(visibleColumns, resultWidths);\n        if (lastColumnIndex >= 0) {\n          resultWidths[lastColumnIndex] = \"auto\";\n          isColumnWidthsCorrected = true;\n          if (false === hasWidth && !hasPercentWidth) {\n            const borderWidth = gridCoreUtils.getComponentBorderWidth(this, $rowsViewElement);\n            that._maxWidth = totalWidth + scrollbarWidth + borderWidth;\n            $element.css(\"maxWidth\", that._maxWidth);\n          }\n        }\n      }\n    }\n    return isColumnWidthsCorrected;\n  }\n  _processStretch(resultSizes, visibleColumns) {\n    const groupSize = this._rowsView.contentWidth();\n    const tableSize = this._getTotalWidth(resultSizes, groupSize);\n    const unusedIndexes = {\n      length: 0\n    };\n    if (!resultSizes.length) {\n      return;\n    }\n    each(visibleColumns, function (index) {\n      if (this.width || \"adaptiveHidden\" === resultSizes[index]) {\n        unusedIndexes[index] = true;\n        unusedIndexes.length++;\n      }\n    });\n    const diff = groupSize - tableSize;\n    const diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\n    let onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\n    if (diff >= 0) {\n      for (let i = 0; i < resultSizes.length; i++) {\n        if (unusedIndexes[i]) {\n          continue;\n        }\n        resultSizes[i] += diffElement;\n        if (onePixelElementsCount > 0) {\n          if (onePixelElementsCount < 1) {\n            resultSizes[i] += onePixelElementsCount;\n            onePixelElementsCount = 0;\n          } else {\n            resultSizes[i]++;\n            onePixelElementsCount--;\n          }\n        }\n      }\n    }\n  }\n  _getRealColumnWidth(columnIndex, columnWidths, groupWidth) {\n    let ratio = 1;\n    const width = columnWidths[columnIndex];\n    if (!isPercentWidth(width)) {\n      return parseFloat(width);\n    }\n    const percentTotalWidth = columnWidths.reduce((sum, width, index) => {\n      if (!isPercentWidth(width)) {\n        return sum;\n      }\n      return sum + parseFloat(width);\n    }, 0);\n    const pixelTotalWidth = columnWidths.reduce((sum, width) => {\n      if (!width || \"adaptiveHidden\" === width || isPercentWidth(width)) {\n        return sum;\n      }\n      return sum + parseFloat(width);\n    }, 0);\n    groupWidth = groupWidth || this._rowsView.contentWidth();\n    const freeSpace = groupWidth - pixelTotalWidth;\n    const percentTotalWidthInPixel = percentTotalWidth * groupWidth / 100;\n    if (pixelTotalWidth > 0 && percentTotalWidthInPixel + pixelTotalWidth >= groupWidth) {\n      ratio = percentTotalWidthInPixel > freeSpace ? freeSpace / percentTotalWidthInPixel : 1;\n    }\n    return parseFloat(width) * groupWidth * ratio / 100;\n  }\n  _getTotalWidth(widths, groupWidth) {\n    let result = 0;\n    for (let i = 0; i < widths.length; i++) {\n      const width = widths[i];\n      if (width && \"adaptiveHidden\" !== width) {\n        result += this._getRealColumnWidth(i, widths, groupWidth);\n      }\n    }\n    return Math.ceil(result);\n  }\n  _getGroupElement() {\n    return this.component.$element().children().get(0);\n  }\n  updateSize(rootElement) {\n    const that = this;\n    const $rootElement = $(rootElement);\n    const importantMarginClass = that.addWidgetPrefix(\"important-margin\");\n    if (void 0 === that._hasHeight && $rootElement && $rootElement.is(\":visible\") && getWidth($rootElement)) {\n      const $groupElement = $rootElement.children(`.${that.getWidgetContainerClass()}`);\n      if ($groupElement.length) {\n        $groupElement.detach();\n      }\n      that._hasHeight = !!getHeight($rootElement);\n      const width = getWidth($rootElement);\n      $rootElement.addClass(importantMarginClass);\n      that._hasWidth = getWidth($rootElement) === width;\n      $rootElement.removeClass(importantMarginClass);\n      if ($groupElement.length) {\n        $groupElement.appendTo($rootElement);\n      }\n    }\n  }\n  publicMethods() {\n    return [\"resize\", \"updateDimensions\"];\n  }\n  _waitAsyncTemplates() {\n    var _this$_columnHeadersV, _this$_rowsView, _this$_footerView;\n    return when(null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.waitAsyncTemplates(true), null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.waitAsyncTemplates(true), null === (_this$_footerView = this._footerView) || void 0 === _this$_footerView ? void 0 : _this$_footerView.waitAsyncTemplates(true));\n  }\n  resize() {\n    if (this.component._requireResize) {\n      return new Deferred().resolve();\n    }\n    const d = new Deferred();\n    this._waitAsyncTemplates().done(() => {\n      when(this.updateDimensions()).done(d.resolve).fail(d.reject);\n    }).fail(d.reject);\n    return d.promise();\n  }\n  updateDimensions(checkSize) {\n    const that = this;\n    that._initPostRenderHandlers();\n    if (!that._checkSize(checkSize)) {\n      return;\n    }\n    const prevResult = that._resizeDeferred;\n    const result = that._resizeDeferred = new Deferred();\n    when(prevResult).always(() => {\n      deferRender(() => {\n        if (that._dataController.isLoaded()) {\n          that._synchronizeColumns();\n        }\n        that._resetGroupElementHeight();\n        deferUpdate(() => {\n          deferRender(() => {\n            deferUpdate(() => {\n              that._updateDimensionsCore();\n            });\n          });\n        });\n      }).done(result.resolve).fail(result.reject);\n    });\n    return result.promise();\n  }\n  _resetGroupElementHeight() {\n    const groupElement = this._getGroupElement();\n    const scrollable = this._rowsView.getScrollable();\n    if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\n      groupElement.style.height = \"\";\n    }\n  }\n  _checkSize(checkSize) {\n    const $rootElement = this.component.$element();\n    const isWidgetVisible = $rootElement.is(\":visible\");\n    const isGridSizeChanged = this._lastWidth !== getWidth($rootElement) || this._lastHeight !== getHeight($rootElement) || this._devicePixelRatio !== getWindow().devicePixelRatio;\n    return isWidgetVisible && (!checkSize || isGridSizeChanged);\n  }\n  _setScrollerSpacingCore() {\n    const that = this;\n    const vScrollbarWidth = that._rowsView.getScrollbarWidth();\n    const hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\n    deferRender(() => {\n      that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\n      that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\n      that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth);\n    });\n  }\n  _setScrollerSpacing() {\n    const scrollable = this._rowsView.getScrollable();\n    const isNativeScrolling = true === this.option(\"scrolling.useNative\");\n    if (!scrollable || isNativeScrolling) {\n      deferRender(() => {\n        deferUpdate(() => {\n          this._setScrollerSpacingCore();\n        });\n      });\n    } else {\n      this._setScrollerSpacingCore();\n    }\n  }\n  _setAriaOwns() {\n    var _this$_columnHeadersV2, _this$_footerView2, _this$_rowsView2;\n    const headerTable = null === (_this$_columnHeadersV2 = this._columnHeadersView) || void 0 === _this$_columnHeadersV2 ? void 0 : _this$_columnHeadersV2.getTableElement();\n    const footerTable = null === (_this$_footerView2 = this._footerView) || void 0 === _this$_footerView2 ? void 0 : _this$_footerView2.getTableElement();\n    null === (_this$_rowsView2 = this._rowsView) || void 0 === _this$_rowsView2 || _this$_rowsView2.setAriaOwns(null === headerTable || void 0 === headerTable ? void 0 : headerTable.attr(\"id\"), null === footerTable || void 0 === footerTable ? void 0 : footerTable.attr(\"id\"));\n  }\n  _updateDimensionsCore() {\n    const that = this;\n    const dataController = that._dataController;\n    const rowsView = that._rowsView;\n    const $rootElement = that.component.$element();\n    const groupElement = this._getGroupElement();\n    const rootElementHeight = getHeight($rootElement);\n    const height = that.option(\"height\") ?? $rootElement.get(0).style.height;\n    const isHeightSpecified = !!height && \"auto\" !== height;\n    const maxHeight = parseInt($rootElement.css(\"maxHeight\"));\n    const maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;\n    const isMaxHeightApplied = groupElement && groupElement.scrollHeight === groupElement.offsetHeight;\n    that.updateSize($rootElement);\n    deferRender(() => {\n      const hasHeight = that._hasHeight || !!maxHeight || isHeightSpecified;\n      rowsView.hasHeight(hasHeight);\n      this._setAriaOwns();\n      if (maxHeightHappened && !isMaxHeightApplied) {\n        $(groupElement).css(\"height\", maxHeight);\n      }\n      if (!dataController.isLoaded()) {\n        rowsView.setLoading(dataController.isLoading());\n        return;\n      }\n      deferUpdate(() => {\n        that._updateLastSizes($rootElement);\n        that._setScrollerSpacing();\n        each(VIEW_NAMES, (index, viewName) => {\n          const view = that.getView(viewName);\n          if (view) {\n            view.resize();\n          }\n        });\n        this._editorFactoryController && this._editorFactoryController.resize();\n      });\n    });\n  }\n  _updateLastSizes($rootElement) {\n    this._lastWidth = getWidth($rootElement);\n    this._lastHeight = getHeight($rootElement);\n    this._devicePixelRatio = getWindow().devicePixelRatio;\n  }\n  optionChanged(args) {\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this.component._renderDimensions();\n        this.resize();\n      case \"renderAsync\":\n        args.handled = true;\n        return;\n      default:\n        super.optionChanged(args);\n    }\n  }\n}\nexport class SynchronizeScrollingController extends modules.ViewController {\n  _scrollChangedHandler(views, pos, viewName) {\n    for (let j = 0; j < views.length; j++) {\n      if (views[j] && views[j].name !== viewName) {\n        views[j].scrollTo({\n          left: pos.left,\n          top: pos.top\n        });\n      }\n    }\n  }\n  init() {\n    const views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\n    for (let i = 0; i < views.length; i++) {\n      const view = views[i];\n      if (view) {\n        view.scrollChanged.add(this._scrollChangedHandler.bind(this, views));\n      }\n    }\n  }\n}\nexport class GridView extends modules.View {\n  init() {\n    this._resizingController = this.getController(\"resizing\");\n    this._dataController = this.getController(\"data\");\n  }\n  _endUpdateCore() {\n    if (this.component._requireResize) {\n      this.component._requireResize = false;\n      this._resizingController.resize();\n    }\n  }\n  getView(name) {\n    return this.component._views[name];\n  }\n  element() {\n    return this._groupElement;\n  }\n  optionChanged(args) {\n    const that = this;\n    if (isDefined(that._groupElement) && \"showBorders\" === args.name) {\n      that._groupElement.toggleClass(that.addWidgetPrefix(\"borders\"), !!args.value);\n      args.handled = true;\n    } else {\n      super.optionChanged(args);\n    }\n  }\n  _renderViews($groupElement) {\n    const that = this;\n    each(VIEW_NAMES, (index, viewName) => {\n      const view = that.getView(viewName);\n      if (view) {\n        view.render($groupElement);\n      }\n    });\n  }\n  _getTableRoleName() {\n    return \"group\";\n  }\n  render($rootElement) {\n    const isFirstRender = !this._groupElement;\n    const $groupElement = this._groupElement || $(\"<div>\").addClass(this.getWidgetContainerClass());\n    $groupElement.addClass(\"dx-gridbase-container\");\n    $groupElement.toggleClass(this.addWidgetPrefix(\"borders\"), !!this.option(\"showBorders\"));\n    this.setAria(\"role\", \"presentation\", $rootElement);\n    this.component.setAria(\"role\", this._getTableRoleName(), $groupElement);\n    this._rootElement = $rootElement || this._rootElement;\n    if (isFirstRender) {\n      this._groupElement = $groupElement;\n      hasWindow() && this._resizingController.updateSize($rootElement);\n      $groupElement.appendTo($rootElement);\n    }\n    if (!this._a11yGeneralStatusElement) {\n      this._a11yGeneralStatusElement = A11yStatusContainerComponent({});\n      this._a11yGeneralStatusElement.attr(E2E_ATTRIBUTES.a11yStatusContainer, \"true\");\n      $groupElement.append(this._a11yGeneralStatusElement);\n    }\n    this._renderViews($groupElement);\n  }\n  update() {\n    const that = this;\n    const $rootElement = that._rootElement;\n    const $groupElement = that._groupElement;\n    if ($rootElement && $groupElement) {\n      this._resizingController.resize();\n      if (that._dataController.isLoaded()) {\n        that._resizingController.fireContentReadyAction();\n      }\n    }\n  }\n  setWidgetA11yStatusText(statusText) {\n    var _this$_a11yGeneralSta;\n    null === (_this$_a11yGeneralSta = this._a11yGeneralStatusElement) || void 0 === _this$_a11yGeneralSta || _this$_a11yGeneralSta.text(statusText);\n  }\n}\nexport const gridViewModule = {\n  defaultOptions: () => ({\n    showBorders: false,\n    renderAsync: false\n  }),\n  controllers: {\n    resizing: ResizingController,\n    synchronizeScrolling: SynchronizeScrollingController\n  },\n  views: {\n    gridView: GridView\n  },\n  VIEW_NAMES: VIEW_NAMES\n};","map":{"version":3,"names":["messageLocalization","domAdapter","$","browser","deferRender","deferUpdate","Deferred","when","each","getBoundingRect","getHeight","getWidth","isDefined","isNumeric","isString","getWindow","hasWindow","accessibility","A11yStatusContainerComponent","modules","gridCoreUtils","BORDERS_CLASS","TABLE_FIXED_CLASS","IMPORTANT_MARGIN_CLASS","GRIDBASE_CONTAINER_CLASS","GROUP_ROW_SELECTOR","HIDDEN_COLUMNS_WIDTH","VIEW_NAMES","E2E_ATTRIBUTES","a11yStatusContainer","isPercentWidth","width","endsWith","isPixelWidth","calculateFreeWidth","that","widths","contentWidth","_rowsView","totalWidth","_getTotalWidth","calculateFreeWidthWithCurrentMinWidth","columnIndex","currentMinWidth","map","index","restoreFocus","focusedElement","selectionRange","hiddenFocus","setSelectionRange","ResizingController","ViewController","init","_prevContentMinHeight","_dataController","getController","_columnsController","_columnHeadersView","getView","_adaptiveColumnsController","_editorFactoryController","_footerView","_gridView","_initPostRenderHandlers","_refreshSizesHandler","e","resizeDeferred","resolve","changeType","isDelayed","needFireContentReady","changed","remove","_checkSize","_refreshSizes","done","_setAriaLabel","fireContentReadyAction","add","items","resize","_e$changeTypes","changeTypes","length","needUpdateDimensions","_waitAsyncTemplates","_setScrollerSpacing","fail","reject","component","_fireContentReadyAction","_getWidgetAriaLabel","_this$_columnsControl","columnCount","_columns","filter","_ref","visible","totalItemsCount","Math","max","widgetAriaLabel","widgetStatusText","format","$ariaLabelElement","$element","children","expandableWidgetAriaLabel","_expandableWidgetAriaId","labelParts","push","setAria","join","setWidgetA11yStatusText","_getBestFitWidths","_widths","rowsView","columnHeadersView","getColumnWidths","_rowsView$getTableEle","headersTableElement","getTableElement","setTableElement","_setVisibleWidths","visibleColumns","columnsController","beginUpdate","column","columnId","getColumnId","columnOption","endUpdate","_toggleBestFitModeForView","view","className","isBestFit","isVisible","$rowsTables","getTableElements","$viewTables","tableElement","$tableBody","$rowsTable","$viewTable","eq","appendTo","toggleClass","addWidgetPrefix","_toggleBestFitMode","$rowsFixedTable","css","find","idx","item","_needStretch","get","style","_toggleContentMinHeight","value","scrollable","getScrollable","$contentElement","_findContentElement","option","minHeight","getContentHeightLimit","_synchronizeColumns","getVisibleColumns","columnAutoWidth","wordWrapEnabled","hasUndefinedColumnWidth","some","needBestFit","_needBestFit","hasMinWidth","resetBestFitMode","isColumnWidthsCorrected","resultWidths","minWidth","getActiveElement","getSelectionRange","_maxWidth","maxWidth","parseFloat","isFocusOutsideWindow","bottom","_correctColumnWidths","expandColumnWidth","type","_processStretch","c","command","_getAverageColumnsWidth","freeWidth","columnCountWithoutWidth","i","hasPercentWidth","hasAutoWidth","hasWidth","_hasWidth","isHiddenColumn","averageColumnsWidth","realColumnWidth","_getRealColumnWidth","columnWidth","$rowsViewElement","element","scrollbarWidth","getScrollbarWidth","lastColumnIndex","getLastResizableColumnIndex","borderWidth","getComponentBorderWidth","resultSizes","groupSize","tableSize","unusedIndexes","diff","diffElement","floor","onePixelElementsCount","columnWidths","groupWidth","ratio","percentTotalWidth","reduce","sum","pixelTotalWidth","freeSpace","percentTotalWidthInPixel","result","ceil","_getGroupElement","updateSize","rootElement","$rootElement","importantMarginClass","_hasHeight","is","$groupElement","getWidgetContainerClass","detach","addClass","removeClass","publicMethods","_this$_columnHeadersV","_this$_rowsView","_this$_footerView","waitAsyncTemplates","_requireResize","d","updateDimensions","promise","checkSize","prevResult","_resizeDeferred","always","isLoaded","_resetGroupElementHeight","_updateDimensionsCore","groupElement","height","scrollTop","isWidgetVisible","isGridSizeChanged","_lastWidth","_lastHeight","_devicePixelRatio","devicePixelRatio","_setScrollerSpacingCore","vScrollbarWidth","hScrollbarWidth","setScrollerSpacing","isNativeScrolling","_setAriaOwns","_this$_columnHeadersV2","_this$_footerView2","_this$_rowsView2","headerTable","footerTable","setAriaOwns","attr","dataController","rootElementHeight","isHeightSpecified","maxHeight","parseInt","maxHeightHappened","isMaxHeightApplied","scrollHeight","offsetHeight","hasHeight","setLoading","isLoading","_updateLastSizes","viewName","optionChanged","args","name","_renderDimensions","handled","SynchronizeScrollingController","_scrollChangedHandler","views","pos","j","scrollTo","left","top","scrollChanged","bind","GridView","View","_resizingController","_endUpdateCore","_views","_groupElement","_renderViews","render","_getTableRoleName","isFirstRender","_rootElement","_a11yGeneralStatusElement","append","update","statusText","_this$_a11yGeneralSta","text","gridViewModule","defaultOptions","showBorders","renderAsync","controllers","resizing","synchronizeScrolling","gridView"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/views/m_grid_view.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/views/m_grid_view.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport domAdapter from \"../../../../core/dom_adapter\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    deferRender,\r\n    deferUpdate\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    getHeight,\r\n    getWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isNumeric,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../../core/utils/window\";\r\nimport * as accessibility from \"../../../../ui/shared/accessibility\";\r\nimport {\r\n    A11yStatusContainerComponent\r\n} from \"../../../grids/grid_core/views/a11y_status_container_component\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nconst BORDERS_CLASS = \"borders\";\r\nconst TABLE_FIXED_CLASS = \"table-fixed\";\r\nconst IMPORTANT_MARGIN_CLASS = \"important-margin\";\r\nconst GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\";\r\nconst GROUP_ROW_SELECTOR = \"tr.dx-group-row\";\r\nconst HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nconst VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\r\nconst E2E_ATTRIBUTES = {\r\n    a11yStatusContainer: \"e2e-a11y-general-status-container\"\r\n};\r\nconst isPercentWidth = function(width) {\r\n    return isString(width) && width.endsWith(\"%\")\r\n};\r\nconst isPixelWidth = function(width) {\r\n    return isString(width) && width.endsWith(\"px\")\r\n};\r\nconst calculateFreeWidth = function(that, widths) {\r\n    const contentWidth = that._rowsView.contentWidth();\r\n    const totalWidth = that._getTotalWidth(widths, contentWidth);\r\n    return contentWidth - totalWidth\r\n};\r\nconst calculateFreeWidthWithCurrentMinWidth = function(that, columnIndex, currentMinWidth, widths) {\r\n    return calculateFreeWidth(that, widths.map(((width, index) => index === columnIndex ? currentMinWidth : width)))\r\n};\r\nconst restoreFocus = function(focusedElement, selectionRange) {\r\n    accessibility.hiddenFocus(focusedElement, true);\r\n    gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n};\r\nexport class ResizingController extends modules.ViewController {\r\n    init() {\r\n        this._prevContentMinHeight = null;\r\n        this._dataController = this.getController(\"data\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._columnHeadersView = this.getView(\"columnHeadersView\");\r\n        this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n        this._editorFactoryController = this.getController(\"editorFactory\");\r\n        this._footerView = this.getView(\"footerView\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._gridView = this.getView(\"gridView\")\r\n    }\r\n    _initPostRenderHandlers() {\r\n        if (!this._refreshSizesHandler) {\r\n            this._refreshSizesHandler = e => {\r\n                let resizeDeferred = (new Deferred).resolve(null);\r\n                const changeType = null === e || void 0 === e ? void 0 : e.changeType;\r\n                const isDelayed = null === e || void 0 === e ? void 0 : e.isDelayed;\r\n                const needFireContentReady = changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && \"pageIndex\" !== changeType && !isDelayed;\r\n                this._dataController.changed.remove(this._refreshSizesHandler);\r\n                if (this._checkSize()) {\r\n                    resizeDeferred = this._refreshSizes(e)\r\n                }\r\n                if (needFireContentReady) {\r\n                    when(resizeDeferred).done((() => {\r\n                        this._setAriaLabel();\r\n                        this.fireContentReadyAction()\r\n                    }))\r\n                }\r\n            };\r\n            this._dataController.changed.add((() => {\r\n                this._dataController.changed.add(this._refreshSizesHandler)\r\n            }))\r\n        }\r\n    }\r\n    _refreshSizes(e) {\r\n        let resizeDeferred = (new Deferred).resolve(null);\r\n        const changeType = null === e || void 0 === e ? void 0 : e.changeType;\r\n        const isDelayed = null === e || void 0 === e ? void 0 : e.isDelayed;\r\n        const items = this._dataController.items();\r\n        if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\r\n            if (!isDelayed) {\r\n                resizeDeferred = this.resize()\r\n            }\r\n        } else if (\"update\" === changeType) {\r\n            var _e$changeTypes;\r\n            if (0 === (null === (_e$changeTypes = e.changeTypes) || void 0 === _e$changeTypes ? void 0 : _e$changeTypes.length)) {\r\n                return resizeDeferred\r\n            }\r\n            if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\r\n                resizeDeferred = new Deferred;\r\n                this._waitAsyncTemplates().done((() => {\r\n                    deferUpdate((() => deferRender((() => deferUpdate((() => {\r\n                        this._setScrollerSpacing();\r\n                        this._rowsView.resize();\r\n                        resizeDeferred.resolve()\r\n                    }))))))\r\n                })).fail(resizeDeferred.reject)\r\n            } else {\r\n                resizeDeferred = this.resize()\r\n            }\r\n        }\r\n        return resizeDeferred\r\n    }\r\n    fireContentReadyAction() {\r\n        this.component._fireContentReadyAction()\r\n    }\r\n    _getWidgetAriaLabel() {\r\n        return \"dxDataGrid-ariaDataGrid\"\r\n    }\r\n    _setAriaLabel() {\r\n        var _this$_columnsControl;\r\n        const columnCount = (null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl || null === (_this$_columnsControl = _this$_columnsControl._columns) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.filter((_ref => {\r\n            let {\r\n                visible: visible\r\n            } = _ref;\r\n            return !!visible\r\n        })).length) ?? 0;\r\n        const totalItemsCount = Math.max(0, this._dataController.totalItemsCount());\r\n        const widgetAriaLabel = this._getWidgetAriaLabel();\r\n        const widgetStatusText = messageLocalization.format(widgetAriaLabel, totalItemsCount, columnCount);\r\n        const $ariaLabelElement = this.component.$element().children(\".dx-gridbase-container\");\r\n        const expandableWidgetAriaLabel = messageLocalization.format(this._expandableWidgetAriaId);\r\n        const labelParts = [widgetStatusText];\r\n        if (expandableWidgetAriaLabel) {\r\n            labelParts.push(expandableWidgetAriaLabel)\r\n        }\r\n        this.component.setAria(\"label\", labelParts.join(\". \"), $ariaLabelElement);\r\n        this._gridView.setWidgetA11yStatusText(widgetStatusText)\r\n    }\r\n    _getBestFitWidths() {\r\n        var _widths;\r\n        const rowsView = this._rowsView;\r\n        const columnHeadersView = this._columnHeadersView;\r\n        let widths = rowsView.getColumnWidths();\r\n        if (!(null !== (_widths = widths) && void 0 !== _widths && _widths.length)) {\r\n            var _rowsView$getTableEle;\r\n            const headersTableElement = columnHeadersView.getTableElement();\r\n            columnHeadersView.setTableElement(null === (_rowsView$getTableEle = rowsView.getTableElement()) || void 0 === _rowsView$getTableEle ? void 0 : _rowsView$getTableEle.children(\".dx-header\"));\r\n            widths = columnHeadersView.getColumnWidths();\r\n            columnHeadersView.setTableElement(headersTableElement)\r\n        }\r\n        return widths\r\n    }\r\n    _setVisibleWidths(visibleColumns, widths) {\r\n        const columnsController = this._columnsController;\r\n        columnsController.beginUpdate();\r\n        each(visibleColumns, ((index, column) => {\r\n            const columnId = columnsController.getColumnId(column);\r\n            columnsController.columnOption(columnId, \"visibleWidth\", widths[index])\r\n        }));\r\n        columnsController.endUpdate()\r\n    }\r\n    _toggleBestFitModeForView(view, className, isBestFit) {\r\n        if (!view || !view.isVisible()) {\r\n            return\r\n        }\r\n        const $rowsTables = this._rowsView.getTableElements();\r\n        const $viewTables = view.getTableElements();\r\n        each($rowsTables, ((index, tableElement) => {\r\n            let $tableBody;\r\n            const $rowsTable = $(tableElement);\r\n            const $viewTable = $viewTables.eq(index);\r\n            if ($viewTable && $viewTable.length) {\r\n                if (isBestFit) {\r\n                    $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable)\r\n                } else {\r\n                    $tableBody = $rowsTable.children(`.${className}`).appendTo($viewTable)\r\n                }\r\n                $tableBody.toggleClass(className, isBestFit);\r\n                $tableBody.toggleClass(this.addWidgetPrefix(\"best-fit\"), isBestFit)\r\n            }\r\n        }))\r\n    }\r\n    _toggleBestFitMode(isBestFit) {\r\n        const $rowsTable = this._rowsView.getTableElement();\r\n        const $rowsFixedTable = this._rowsView.getTableElements().eq(1);\r\n        if (!$rowsTable) {\r\n            return\r\n        }\r\n        $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\r\n        $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\r\n        each($rowsFixedTable.find(\"tr.dx-group-row\"), ((idx, item) => {\r\n            $(item).css(\"display\", isBestFit ? \"none\" : \"\")\r\n        }));\r\n        $rowsFixedTable.toggleClass(this.addWidgetPrefix(\"table-fixed\"), !isBestFit);\r\n        this._toggleBestFitModeForView(this._columnHeadersView, \"dx-header\", isBestFit);\r\n        this._toggleBestFitModeForView(this._footerView, \"dx-footer\", isBestFit);\r\n        if (this._needStretch()) {\r\n            $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\"\r\n        }\r\n    }\r\n    _toggleContentMinHeight(value) {\r\n        const scrollable = this._rowsView.getScrollable();\r\n        const $contentElement = this._rowsView._findContentElement();\r\n        if (false === (null === scrollable || void 0 === scrollable ? void 0 : scrollable.option(\"useNative\"))) {\r\n            if (true === value) {\r\n                this._prevContentMinHeight = $contentElement.get(0).style.minHeight\r\n            }\r\n            if (isDefined(this._prevContentMinHeight)) {\r\n                $contentElement.css({\r\n                    minHeight: value ? gridCoreUtils.getContentHeightLimit(browser) : this._prevContentMinHeight\r\n                })\r\n            }\r\n        }\r\n    }\r\n    _synchronizeColumns() {\r\n        const columnsController = this._columnsController;\r\n        const visibleColumns = columnsController.getVisibleColumns();\r\n        const columnAutoWidth = this.option(\"columnAutoWidth\");\r\n        const wordWrapEnabled = this.option(\"wordWrapEnabled\");\r\n        const hasUndefinedColumnWidth = visibleColumns.some((column => !isDefined(column.width)));\r\n        let needBestFit = this._needBestFit();\r\n        let hasMinWidth = false;\r\n        let resetBestFitMode;\r\n        let isColumnWidthsCorrected = false;\r\n        let resultWidths = [];\r\n        let focusedElement;\r\n        let selectionRange;\r\n        !needBestFit && each(visibleColumns, ((index, column) => {\r\n            if (\"auto\" === column.width) {\r\n                needBestFit = true;\r\n                return false\r\n            }\r\n            return\r\n        }));\r\n        each(visibleColumns, ((index, column) => {\r\n            if (column.minWidth) {\r\n                hasMinWidth = true;\r\n                return false\r\n            }\r\n            return\r\n        }));\r\n        this._setVisibleWidths(visibleColumns, []);\r\n        const $element = this.component.$element();\r\n        if (needBestFit) {\r\n            focusedElement = domAdapter.getActiveElement($element.get(0));\r\n            selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n            this._toggleBestFitMode(true);\r\n            resetBestFitMode = true\r\n        }\r\n        this._toggleContentMinHeight(wordWrapEnabled);\r\n        if ($element && $element.get(0) && this._maxWidth) {\r\n            delete this._maxWidth;\r\n            $element[0].style.maxWidth = \"\"\r\n        }\r\n        deferUpdate((() => {\r\n            if (needBestFit) {\r\n                resultWidths = this._getBestFitWidths();\r\n                each(visibleColumns, ((index, column) => {\r\n                    const columnId = columnsController.getColumnId(column);\r\n                    columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true)\r\n                }))\r\n            } else if (hasMinWidth) {\r\n                resultWidths = this._getBestFitWidths()\r\n            }\r\n            each(visibleColumns, (function(index) {\r\n                const {\r\n                    width: width\r\n                } = this;\r\n                if (\"auto\" !== width) {\r\n                    if (isDefined(width)) {\r\n                        resultWidths[index] = isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width\r\n                    } else if (!columnAutoWidth) {\r\n                        resultWidths[index] = void 0\r\n                    }\r\n                }\r\n            }));\r\n            if (resetBestFitMode) {\r\n                this._toggleBestFitMode(false);\r\n                resetBestFitMode = false;\r\n                if (focusedElement && focusedElement !== domAdapter.getActiveElement()) {\r\n                    const isFocusOutsideWindow = getBoundingRect(focusedElement).bottom < 0;\r\n                    if (!isFocusOutsideWindow) {\r\n                        restoreFocus(focusedElement, selectionRange)\r\n                    }\r\n                }\r\n            }\r\n            isColumnWidthsCorrected = this._correctColumnWidths(resultWidths, visibleColumns);\r\n            if (columnAutoWidth) {\r\n                ! function() {\r\n                    let expandColumnWidth;\r\n                    each(visibleColumns, ((index, column) => {\r\n                        if (\"groupExpand\" === column.type) {\r\n                            expandColumnWidth = resultWidths[index]\r\n                        }\r\n                    }));\r\n                    each(visibleColumns, ((index, column) => {\r\n                        if (\"groupExpand\" === column.type && expandColumnWidth) {\r\n                            resultWidths[index] = expandColumnWidth\r\n                        }\r\n                    }))\r\n                }();\r\n                if (this._needStretch()) {\r\n                    this._processStretch(resultWidths, visibleColumns)\r\n                }\r\n            }\r\n            deferRender((() => {\r\n                if (needBestFit || isColumnWidthsCorrected || hasUndefinedColumnWidth) {\r\n                    this._setVisibleWidths(visibleColumns, resultWidths)\r\n                }\r\n                if (wordWrapEnabled) {\r\n                    this._toggleContentMinHeight(false)\r\n                }\r\n            }))\r\n        }))\r\n    }\r\n    _needBestFit() {\r\n        return this.option(\"columnAutoWidth\")\r\n    }\r\n    _needStretch() {\r\n        return this._columnsController.getVisibleColumns().some((c => \"auto\" === c.width && !c.command))\r\n    }\r\n    _getAverageColumnsWidth(resultWidths) {\r\n        const freeWidth = calculateFreeWidth(this, resultWidths);\r\n        const columnCountWithoutWidth = resultWidths.filter((width => void 0 === width)).length;\r\n        return freeWidth / columnCountWithoutWidth\r\n    }\r\n    _correctColumnWidths(resultWidths, visibleColumns) {\r\n        const that = this;\r\n        let i;\r\n        let hasPercentWidth = false;\r\n        let hasAutoWidth = false;\r\n        let isColumnWidthsCorrected = false;\r\n        const $element = that.component.$element();\r\n        const hasWidth = that._hasWidth;\r\n        for (i = 0; i < visibleColumns.length; i++) {\r\n            const index = i;\r\n            const column = visibleColumns[index];\r\n            const isHiddenColumn = \"adaptiveHidden\" === resultWidths[index];\r\n            let width = resultWidths[index];\r\n            const {\r\n                minWidth: minWidth\r\n            } = column;\r\n            if (minWidth) {\r\n                if (void 0 === width) {\r\n                    const averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\r\n                    width = averageColumnsWidth\r\n                } else if (isPercentWidth(width)) {\r\n                    const freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\r\n                    if (freeWidth < 0) {\r\n                        width = -1\r\n                    }\r\n                }\r\n            }\r\n            const realColumnWidth = that._getRealColumnWidth(index, resultWidths.map(((columnWidth, columnIndex) => index === columnIndex ? width : columnWidth)));\r\n            if (minWidth && !isHiddenColumn && realColumnWidth < minWidth) {\r\n                resultWidths[index] = minWidth;\r\n                isColumnWidthsCorrected = true;\r\n                i = -1\r\n            }\r\n            if (!isDefined(column.width)) {\r\n                hasAutoWidth = true\r\n            }\r\n            if (isPercentWidth(column.width)) {\r\n                hasPercentWidth = true\r\n            }\r\n        }\r\n        if (!hasAutoWidth && resultWidths.length) {\r\n            const $rowsViewElement = that._rowsView.element();\r\n            const contentWidth = that._rowsView.contentWidth();\r\n            const scrollbarWidth = that._rowsView.getScrollbarWidth();\r\n            const totalWidth = that._getTotalWidth(resultWidths, contentWidth);\r\n            if (totalWidth < contentWidth) {\r\n                const lastColumnIndex = gridCoreUtils.getLastResizableColumnIndex(visibleColumns, resultWidths);\r\n                if (lastColumnIndex >= 0) {\r\n                    resultWidths[lastColumnIndex] = \"auto\";\r\n                    isColumnWidthsCorrected = true;\r\n                    if (false === hasWidth && !hasPercentWidth) {\r\n                        const borderWidth = gridCoreUtils.getComponentBorderWidth(this, $rowsViewElement);\r\n                        that._maxWidth = totalWidth + scrollbarWidth + borderWidth;\r\n                        $element.css(\"maxWidth\", that._maxWidth)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return isColumnWidthsCorrected\r\n    }\r\n    _processStretch(resultSizes, visibleColumns) {\r\n        const groupSize = this._rowsView.contentWidth();\r\n        const tableSize = this._getTotalWidth(resultSizes, groupSize);\r\n        const unusedIndexes = {\r\n            length: 0\r\n        };\r\n        if (!resultSizes.length) {\r\n            return\r\n        }\r\n        each(visibleColumns, (function(index) {\r\n            if (this.width || \"adaptiveHidden\" === resultSizes[index]) {\r\n                unusedIndexes[index] = true;\r\n                unusedIndexes.length++\r\n            }\r\n        }));\r\n        const diff = groupSize - tableSize;\r\n        const diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\r\n        let onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\r\n        if (diff >= 0) {\r\n            for (let i = 0; i < resultSizes.length; i++) {\r\n                if (unusedIndexes[i]) {\r\n                    continue\r\n                }\r\n                resultSizes[i] += diffElement;\r\n                if (onePixelElementsCount > 0) {\r\n                    if (onePixelElementsCount < 1) {\r\n                        resultSizes[i] += onePixelElementsCount;\r\n                        onePixelElementsCount = 0\r\n                    } else {\r\n                        resultSizes[i]++;\r\n                        onePixelElementsCount--\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _getRealColumnWidth(columnIndex, columnWidths, groupWidth) {\r\n        let ratio = 1;\r\n        const width = columnWidths[columnIndex];\r\n        if (!isPercentWidth(width)) {\r\n            return parseFloat(width)\r\n        }\r\n        const percentTotalWidth = columnWidths.reduce(((sum, width, index) => {\r\n            if (!isPercentWidth(width)) {\r\n                return sum\r\n            }\r\n            return sum + parseFloat(width)\r\n        }), 0);\r\n        const pixelTotalWidth = columnWidths.reduce(((sum, width) => {\r\n            if (!width || \"adaptiveHidden\" === width || isPercentWidth(width)) {\r\n                return sum\r\n            }\r\n            return sum + parseFloat(width)\r\n        }), 0);\r\n        groupWidth = groupWidth || this._rowsView.contentWidth();\r\n        const freeSpace = groupWidth - pixelTotalWidth;\r\n        const percentTotalWidthInPixel = percentTotalWidth * groupWidth / 100;\r\n        if (pixelTotalWidth > 0 && percentTotalWidthInPixel + pixelTotalWidth >= groupWidth) {\r\n            ratio = percentTotalWidthInPixel > freeSpace ? freeSpace / percentTotalWidthInPixel : 1\r\n        }\r\n        return parseFloat(width) * groupWidth * ratio / 100\r\n    }\r\n    _getTotalWidth(widths, groupWidth) {\r\n        let result = 0;\r\n        for (let i = 0; i < widths.length; i++) {\r\n            const width = widths[i];\r\n            if (width && \"adaptiveHidden\" !== width) {\r\n                result += this._getRealColumnWidth(i, widths, groupWidth)\r\n            }\r\n        }\r\n        return Math.ceil(result)\r\n    }\r\n    _getGroupElement() {\r\n        return this.component.$element().children().get(0)\r\n    }\r\n    updateSize(rootElement) {\r\n        const that = this;\r\n        const $rootElement = $(rootElement);\r\n        const importantMarginClass = that.addWidgetPrefix(\"important-margin\");\r\n        if (void 0 === that._hasHeight && $rootElement && $rootElement.is(\":visible\") && getWidth($rootElement)) {\r\n            const $groupElement = $rootElement.children(`.${that.getWidgetContainerClass()}`);\r\n            if ($groupElement.length) {\r\n                $groupElement.detach()\r\n            }\r\n            that._hasHeight = !!getHeight($rootElement);\r\n            const width = getWidth($rootElement);\r\n            $rootElement.addClass(importantMarginClass);\r\n            that._hasWidth = getWidth($rootElement) === width;\r\n            $rootElement.removeClass(importantMarginClass);\r\n            if ($groupElement.length) {\r\n                $groupElement.appendTo($rootElement)\r\n            }\r\n        }\r\n    }\r\n    publicMethods() {\r\n        return [\"resize\", \"updateDimensions\"]\r\n    }\r\n    _waitAsyncTemplates() {\r\n        var _this$_columnHeadersV, _this$_rowsView, _this$_footerView;\r\n        return when(null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.waitAsyncTemplates(true), null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView.waitAsyncTemplates(true), null === (_this$_footerView = this._footerView) || void 0 === _this$_footerView ? void 0 : _this$_footerView.waitAsyncTemplates(true))\r\n    }\r\n    resize() {\r\n        if (this.component._requireResize) {\r\n            return (new Deferred).resolve()\r\n        }\r\n        const d = new Deferred;\r\n        this._waitAsyncTemplates().done((() => {\r\n            when(this.updateDimensions()).done(d.resolve).fail(d.reject)\r\n        })).fail(d.reject);\r\n        return d.promise()\r\n    }\r\n    updateDimensions(checkSize) {\r\n        const that = this;\r\n        that._initPostRenderHandlers();\r\n        if (!that._checkSize(checkSize)) {\r\n            return\r\n        }\r\n        const prevResult = that._resizeDeferred;\r\n        const result = that._resizeDeferred = new Deferred;\r\n        when(prevResult).always((() => {\r\n            deferRender((() => {\r\n                if (that._dataController.isLoaded()) {\r\n                    that._synchronizeColumns()\r\n                }\r\n                that._resetGroupElementHeight();\r\n                deferUpdate((() => {\r\n                    deferRender((() => {\r\n                        deferUpdate((() => {\r\n                            that._updateDimensionsCore()\r\n                        }))\r\n                    }))\r\n                }))\r\n            })).done(result.resolve).fail(result.reject)\r\n        }));\r\n        return result.promise()\r\n    }\r\n    _resetGroupElementHeight() {\r\n        const groupElement = this._getGroupElement();\r\n        const scrollable = this._rowsView.getScrollable();\r\n        if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\r\n            groupElement.style.height = \"\"\r\n        }\r\n    }\r\n    _checkSize(checkSize) {\r\n        const $rootElement = this.component.$element();\r\n        const isWidgetVisible = $rootElement.is(\":visible\");\r\n        const isGridSizeChanged = this._lastWidth !== getWidth($rootElement) || this._lastHeight !== getHeight($rootElement) || this._devicePixelRatio !== getWindow().devicePixelRatio;\r\n        return isWidgetVisible && (!checkSize || isGridSizeChanged)\r\n    }\r\n    _setScrollerSpacingCore() {\r\n        const that = this;\r\n        const vScrollbarWidth = that._rowsView.getScrollbarWidth();\r\n        const hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\r\n        deferRender((() => {\r\n            that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\r\n            that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\r\n            that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth)\r\n        }))\r\n    }\r\n    _setScrollerSpacing() {\r\n        const scrollable = this._rowsView.getScrollable();\r\n        const isNativeScrolling = true === this.option(\"scrolling.useNative\");\r\n        if (!scrollable || isNativeScrolling) {\r\n            deferRender((() => {\r\n                deferUpdate((() => {\r\n                    this._setScrollerSpacingCore()\r\n                }))\r\n            }))\r\n        } else {\r\n            this._setScrollerSpacingCore()\r\n        }\r\n    }\r\n    _setAriaOwns() {\r\n        var _this$_columnHeadersV2, _this$_footerView2, _this$_rowsView2;\r\n        const headerTable = null === (_this$_columnHeadersV2 = this._columnHeadersView) || void 0 === _this$_columnHeadersV2 ? void 0 : _this$_columnHeadersV2.getTableElement();\r\n        const footerTable = null === (_this$_footerView2 = this._footerView) || void 0 === _this$_footerView2 ? void 0 : _this$_footerView2.getTableElement();\r\n        null === (_this$_rowsView2 = this._rowsView) || void 0 === _this$_rowsView2 || _this$_rowsView2.setAriaOwns(null === headerTable || void 0 === headerTable ? void 0 : headerTable.attr(\"id\"), null === footerTable || void 0 === footerTable ? void 0 : footerTable.attr(\"id\"))\r\n    }\r\n    _updateDimensionsCore() {\r\n        const that = this;\r\n        const dataController = that._dataController;\r\n        const rowsView = that._rowsView;\r\n        const $rootElement = that.component.$element();\r\n        const groupElement = this._getGroupElement();\r\n        const rootElementHeight = getHeight($rootElement);\r\n        const height = that.option(\"height\") ?? $rootElement.get(0).style.height;\r\n        const isHeightSpecified = !!height && \"auto\" !== height;\r\n        const maxHeight = parseInt($rootElement.css(\"maxHeight\"));\r\n        const maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;\r\n        const isMaxHeightApplied = groupElement && groupElement.scrollHeight === groupElement.offsetHeight;\r\n        that.updateSize($rootElement);\r\n        deferRender((() => {\r\n            const hasHeight = that._hasHeight || !!maxHeight || isHeightSpecified;\r\n            rowsView.hasHeight(hasHeight);\r\n            this._setAriaOwns();\r\n            if (maxHeightHappened && !isMaxHeightApplied) {\r\n                $(groupElement).css(\"height\", maxHeight)\r\n            }\r\n            if (!dataController.isLoaded()) {\r\n                rowsView.setLoading(dataController.isLoading());\r\n                return\r\n            }\r\n            deferUpdate((() => {\r\n                that._updateLastSizes($rootElement);\r\n                that._setScrollerSpacing();\r\n                each(VIEW_NAMES, ((index, viewName) => {\r\n                    const view = that.getView(viewName);\r\n                    if (view) {\r\n                        view.resize()\r\n                    }\r\n                }));\r\n                this._editorFactoryController && this._editorFactoryController.resize()\r\n            }))\r\n        }))\r\n    }\r\n    _updateLastSizes($rootElement) {\r\n        this._lastWidth = getWidth($rootElement);\r\n        this._lastHeight = getHeight($rootElement);\r\n        this._devicePixelRatio = getWindow().devicePixelRatio\r\n    }\r\n    optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"width\":\r\n            case \"height\":\r\n                this.component._renderDimensions();\r\n                this.resize();\r\n            case \"renderAsync\":\r\n                args.handled = true;\r\n                return;\r\n            default:\r\n                super.optionChanged(args)\r\n        }\r\n    }\r\n}\r\nexport class SynchronizeScrollingController extends modules.ViewController {\r\n    _scrollChangedHandler(views, pos, viewName) {\r\n        for (let j = 0; j < views.length; j++) {\r\n            if (views[j] && views[j].name !== viewName) {\r\n                views[j].scrollTo({\r\n                    left: pos.left,\r\n                    top: pos.top\r\n                })\r\n            }\r\n        }\r\n    }\r\n    init() {\r\n        const views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\r\n        for (let i = 0; i < views.length; i++) {\r\n            const view = views[i];\r\n            if (view) {\r\n                view.scrollChanged.add(this._scrollChangedHandler.bind(this, views))\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class GridView extends modules.View {\r\n    init() {\r\n        this._resizingController = this.getController(\"resizing\");\r\n        this._dataController = this.getController(\"data\")\r\n    }\r\n    _endUpdateCore() {\r\n        if (this.component._requireResize) {\r\n            this.component._requireResize = false;\r\n            this._resizingController.resize()\r\n        }\r\n    }\r\n    getView(name) {\r\n        return this.component._views[name]\r\n    }\r\n    element() {\r\n        return this._groupElement\r\n    }\r\n    optionChanged(args) {\r\n        const that = this;\r\n        if (isDefined(that._groupElement) && \"showBorders\" === args.name) {\r\n            that._groupElement.toggleClass(that.addWidgetPrefix(\"borders\"), !!args.value);\r\n            args.handled = true\r\n        } else {\r\n            super.optionChanged(args)\r\n        }\r\n    }\r\n    _renderViews($groupElement) {\r\n        const that = this;\r\n        each(VIEW_NAMES, ((index, viewName) => {\r\n            const view = that.getView(viewName);\r\n            if (view) {\r\n                view.render($groupElement)\r\n            }\r\n        }))\r\n    }\r\n    _getTableRoleName() {\r\n        return \"group\"\r\n    }\r\n    render($rootElement) {\r\n        const isFirstRender = !this._groupElement;\r\n        const $groupElement = this._groupElement || $(\"<div>\").addClass(this.getWidgetContainerClass());\r\n        $groupElement.addClass(\"dx-gridbase-container\");\r\n        $groupElement.toggleClass(this.addWidgetPrefix(\"borders\"), !!this.option(\"showBorders\"));\r\n        this.setAria(\"role\", \"presentation\", $rootElement);\r\n        this.component.setAria(\"role\", this._getTableRoleName(), $groupElement);\r\n        this._rootElement = $rootElement || this._rootElement;\r\n        if (isFirstRender) {\r\n            this._groupElement = $groupElement;\r\n            hasWindow() && this._resizingController.updateSize($rootElement);\r\n            $groupElement.appendTo($rootElement)\r\n        }\r\n        if (!this._a11yGeneralStatusElement) {\r\n            this._a11yGeneralStatusElement = A11yStatusContainerComponent({});\r\n            this._a11yGeneralStatusElement.attr(E2E_ATTRIBUTES.a11yStatusContainer, \"true\");\r\n            $groupElement.append(this._a11yGeneralStatusElement)\r\n        }\r\n        this._renderViews($groupElement)\r\n    }\r\n    update() {\r\n        const that = this;\r\n        const $rootElement = that._rootElement;\r\n        const $groupElement = that._groupElement;\r\n        if ($rootElement && $groupElement) {\r\n            this._resizingController.resize();\r\n            if (that._dataController.isLoaded()) {\r\n                that._resizingController.fireContentReadyAction()\r\n            }\r\n        }\r\n    }\r\n    setWidgetA11yStatusText(statusText) {\r\n        var _this$_a11yGeneralSta;\r\n        null === (_this$_a11yGeneralSta = this._a11yGeneralStatusElement) || void 0 === _this$_a11yGeneralSta || _this$_a11yGeneralSta.text(statusText)\r\n    }\r\n}\r\nexport const gridViewModule = {\r\n    defaultOptions: () => ({\r\n        showBorders: false,\r\n        renderAsync: false\r\n    }),\r\n    controllers: {\r\n        resizing: ResizingController,\r\n        synchronizeScrolling: SynchronizeScrollingController\r\n    },\r\n    views: {\r\n        gridView: GridView\r\n    },\r\n    VIEW_NAMES: VIEW_NAMES\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}