{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/data_source_adapter/m_data_source_adapter.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport ArrayStore from \"../../../../common/data/array_store\";\nimport { applyBatch } from \"../../../../common/data/array_utils\";\nimport Callbacks from \"../../../../core/utils/callbacks\";\nimport { getKeyHash } from \"../../../../core/utils/common\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { isDefined, isFunction, isPlainObject } from \"../../../../core/utils/type\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nimport { calculateOperationTypes, cloneItems, createEmptyCachedData, executeTask, getPageDataFromCache, setPageDataToCache } from \"./m_data_source_adapter_utils\";\nexport default class DataSourceAdapter extends modules.Controller {\n  init(dataSource, remoteOperations) {\n    const that = this;\n    that._dataSource = dataSource;\n    that._remoteOperations = remoteOperations || {};\n    that._isLastPage = !dataSource.isLastPage();\n    that._hasLastPage = false;\n    that._currentTotalCount = 0;\n    that._cachedData = createEmptyCachedData();\n    that._lastOperationTypes = {};\n    that._eventsStrategy = dataSource._eventsStrategy;\n    that._totalCountCorrection = 0;\n    that._isLoadingAll = false;\n    that.changed = Callbacks();\n    that.loadingChanged = Callbacks();\n    that.loadError = Callbacks();\n    that.customizeStoreLoadOptions = Callbacks();\n    that.changing = Callbacks();\n    that.pushed = Callbacks();\n    that._dataChangedHandler = that._handleDataChanged.bind(that);\n    that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\n    that._dataLoadedHandler = that._handleDataLoaded.bind(that);\n    that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n    that._loadErrorHandler = that._handleLoadError.bind(that);\n    that._pushHandler = that._handlePush.bind(that);\n    that._changingHandler = that._handleChanging.bind(that);\n    dataSource.on(\"changed\", that._dataChangedHandler);\n    dataSource.on(\"customizeStoreLoadOptions\", that._customizeStoreLoadOptionsHandler);\n    dataSource.on(\"customizeLoadResult\", that._dataLoadedHandler);\n    dataSource.on(\"loadingChanged\", that._loadingChangedHandler);\n    dataSource.on(\"loadError\", that._loadErrorHandler);\n    dataSource.on(\"changing\", that._changingHandler);\n    dataSource.store().on(\"beforePush\", that._pushHandler);\n    each(dataSource, (memberName, member) => {\n      if (!that[memberName] && isFunction(member)) {\n        that[memberName] = function () {\n          return this._dataSource[memberName].apply(this._dataSource, arguments);\n        };\n      }\n    });\n  }\n  dispose(isSharedDataSource) {\n    const dataSource = this._dataSource;\n    const store = dataSource.store();\n    dataSource.off(\"changed\", this._dataChangedHandler);\n    dataSource.off(\"customizeStoreLoadOptions\", this._customizeStoreLoadOptionsHandler);\n    dataSource.off(\"customizeLoadResult\", this._dataLoadedHandler);\n    dataSource.off(\"loadingChanged\", this._loadingChangedHandler);\n    dataSource.off(\"loadError\", this._loadErrorHandler);\n    dataSource.off(\"changing\", this._changingHandler);\n    store && store.off(\"beforePush\", this._pushHandler);\n    if (!isSharedDataSource) {\n      dataSource.dispose();\n    }\n  }\n  remoteOperations() {\n    return this._remoteOperations;\n  }\n  refresh(options, operationTypes) {\n    const that = this;\n    const dataSource = that._dataSource;\n    if (operationTypes.reload) {\n      that.resetCurrentTotalCount();\n      that._isLastPage = !dataSource.paginate();\n      that._hasLastPage = that._isLastPage;\n    }\n  }\n  resetCurrentTotalCount() {\n    this._currentTotalCount = 0;\n    this._totalCountCorrection = 0;\n  }\n  resetCache() {\n    this._cachedStoreData = void 0;\n    this._cachedPagingData = void 0;\n  }\n  resetPagesCache(isLiveUpdate) {\n    this._cachedData = createEmptyCachedData();\n  }\n  _needClearStoreDataCache() {\n    const remoteOperations = this.remoteOperations();\n    const operationTypes = calculateOperationTypes(this._lastLoadOptions || {}, {});\n    const isLocalOperations = Object.keys(remoteOperations).every(operationName => !operationTypes[operationName] || !remoteOperations[operationName]);\n    return !isLocalOperations;\n  }\n  push(changes, fromStore) {\n    const store = this.store();\n    if (this._needClearStoreDataCache()) {\n      this._cachedStoreData = void 0;\n    }\n    this._cachedPagingData = void 0;\n    this.resetPagesCache(true);\n    if (this._cachedStoreData) {\n      applyBatch({\n        keyInfo: store,\n        data: this._cachedStoreData,\n        changes: changes\n      });\n    }\n    if (!fromStore) {\n      this._applyBatch(changes);\n    }\n    this.pushed.fire(changes);\n  }\n  getDataIndexGetter() {\n    if (!this._dataIndexGetter) {\n      let indexByKey;\n      let storeData;\n      const store = this.store();\n      this._dataIndexGetter = data => {\n        const isCacheUpdated = storeData && storeData !== this._cachedStoreData;\n        if (!indexByKey || isCacheUpdated) {\n          storeData = this._cachedStoreData || [];\n          indexByKey = {};\n          for (let i = 0; i < storeData.length; i++) {\n            indexByKey[getKeyHash(store.keyOf(storeData[i]))] = i;\n          }\n        }\n        return indexByKey[getKeyHash(store.keyOf(data))];\n      };\n    }\n    return this._dataIndexGetter;\n  }\n  _getKeyInfo() {\n    return this.store();\n  }\n  _needToCopyDataObject() {\n    return true;\n  }\n  _applyBatch(changes, fromStore) {\n    const keyInfo = this._getKeyInfo();\n    const dataSource = this._dataSource;\n    const groupCount = gridCoreUtils.normalizeSortingInfo(this.group()).length;\n    const isReshapeMode = \"reshape\" === this.option(\"editing.refreshMode\");\n    const isVirtualMode = \"virtual\" === this.option(\"scrolling.mode\");\n    changes = changes.filter(change => !dataSource.paginate() || \"insert\" !== change.type || void 0 !== change.index);\n    const getItemCount = () => groupCount ? this.itemsCount() : this.items().length;\n    const oldItemCount = getItemCount();\n    applyBatch({\n      keyInfo: keyInfo,\n      data: this._items,\n      changes: changes,\n      groupCount: groupCount,\n      useInsertIndex: true,\n      skipCopying: !this._needToCopyDataObject()\n    });\n    applyBatch({\n      keyInfo: keyInfo,\n      data: dataSource.items(),\n      changes: changes,\n      groupCount: groupCount,\n      useInsertIndex: true,\n      skipCopying: !this._needToCopyDataObject()\n    });\n    const needUpdateTotalCountCorrection = this._currentTotalCount > 0 || (fromStore || !isReshapeMode) && isVirtualMode;\n    if (needUpdateTotalCountCorrection) {\n      this._totalCountCorrection += getItemCount() - oldItemCount;\n    }\n    changes.splice(0, changes.length);\n  }\n  _handlePush(_ref) {\n    let {\n      changes: changes\n    } = _ref;\n    this.push(changes, true);\n  }\n  _handleChanging(e) {\n    this.changing.fire(e);\n    this._applyBatch(e.changes, true);\n  }\n  _needCleanCacheByOperation(operationType, remoteOperations) {\n    const operationTypesByOrder = [\"filtering\", \"sorting\", \"paging\"];\n    const operationTypeIndex = operationTypesByOrder.indexOf(operationType);\n    const currentOperationTypes = operationTypeIndex >= 0 ? operationTypesByOrder.slice(operationTypeIndex) : [operationType];\n    return currentOperationTypes.some(operationType => remoteOperations[operationType]);\n  }\n  _customizeRemoteOperations(options, operationTypes) {\n    let cachedStoreData = this._cachedStoreData;\n    let cachedPagingData = this._cachedPagingData;\n    let cachedData = this._cachedData;\n    if (options.storeLoadOptions.filter && !options.remoteOperations.filtering || options.storeLoadOptions.sort && !options.remoteOperations.sorting) {\n      options.remoteOperations = {\n        filtering: options.remoteOperations.filtering,\n        summary: options.remoteOperations.summary\n      };\n    }\n    if (operationTypes.fullReload) {\n      cachedStoreData = void 0;\n      cachedPagingData = void 0;\n      cachedData = createEmptyCachedData();\n    } else {\n      if (operationTypes.reload) {\n        cachedPagingData = void 0;\n        cachedData = createEmptyCachedData();\n      } else if (operationTypes.groupExpanding) {\n        cachedData = createEmptyCachedData();\n      }\n      each(operationTypes, (operationType, value) => {\n        if (value && this._needCleanCacheByOperation(operationType, options.remoteOperations)) {\n          cachedStoreData = void 0;\n          cachedPagingData = void 0;\n        }\n      });\n    }\n    if (cachedPagingData) {\n      options.remoteOperations.paging = false;\n    }\n    options.cachedStoreData = cachedStoreData;\n    options.cachedPagingData = cachedPagingData;\n    options.cachedData = cachedData;\n    if (!options.isCustomLoading) {\n      this._cachedStoreData = cachedStoreData;\n      this._cachedPagingData = cachedPagingData;\n      this._cachedData = cachedData;\n    }\n  }\n  _handleCustomizeStoreLoadOptions(options) {\n    var _options$data;\n    this._handleDataLoading(options);\n    if (!(0 === (null === (_options$data = options.data) || void 0 === _options$data ? void 0 : _options$data.length))) {\n      options.data = getPageDataFromCache(options, true) || options.cachedStoreData;\n    }\n  }\n  _handleDataLoading(options) {\n    const dataSource = this._dataSource;\n    const lastLoadOptions = this._lastLoadOptions;\n    this.customizeStoreLoadOptions.fire(options);\n    options.delay = this.option(\"loadingTimeout\");\n    options.originalStoreLoadOptions = options.storeLoadOptions;\n    options.remoteOperations = extend({}, this.remoteOperations());\n    const isFullReload = !this.isLoaded() && !this._isRefreshing;\n    if (this.option(\"integrationOptions.renderedOnServer\") && !this.isLoaded()) {\n      options.delay = void 0;\n    }\n    const loadOptions = extend({\n      pageIndex: this.pageIndex(),\n      pageSize: this.pageSize()\n    }, options.storeLoadOptions);\n    const operationTypes = calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload);\n    this._customizeRemoteOperations(options, operationTypes);\n    if (!options.isCustomLoading) {\n      const isRefreshing = this._isRefreshing;\n      options.pageIndex = dataSource.pageIndex();\n      options.lastLoadOptions = loadOptions;\n      options.operationTypes = operationTypes;\n      this._loadingOperationTypes = operationTypes;\n      this._isRefreshing = true;\n      when(isRefreshing || this._isRefreshed || this.refresh(options, operationTypes)).done(() => {\n        if (this._lastOperationId === options.operationId) {\n          this._isRefreshed = true;\n          this.load().always(() => {\n            this._isRefreshed = false;\n          });\n        }\n      }).fail(() => {\n        dataSource.cancel(options.operationId);\n      }).always(() => {\n        this._isRefreshing = false;\n      });\n      dataSource.cancel(this._lastOperationId);\n      this._lastOperationId = options.operationId;\n      if (this._isRefreshing) {\n        dataSource.cancel(this._lastOperationId);\n      }\n    }\n    this._handleDataLoadingCore(options);\n  }\n  _handleDataLoadingCore(options) {\n    const {\n      remoteOperations: remoteOperations\n    } = options;\n    options.loadOptions = {};\n    const cachedExtra = options.cachedData.extra;\n    const localLoadOptionNames = {\n      filter: !remoteOperations.filtering,\n      sort: !remoteOperations.sorting,\n      group: !remoteOperations.grouping,\n      summary: !remoteOperations.summary,\n      skip: !remoteOperations.paging,\n      take: !remoteOperations.paging,\n      requireTotalCount: cachedExtra && \"totalCount\" in cachedExtra || !remoteOperations.paging,\n      langParams: !remoteOperations.filtering || !remoteOperations.sorting\n    };\n    each(options.storeLoadOptions, (optionName, optionValue) => {\n      if (localLoadOptionNames[optionName]) {\n        options.loadOptions[optionName] = optionValue;\n        delete options.storeLoadOptions[optionName];\n      }\n    });\n    if (cachedExtra) {\n      options.extra = cachedExtra;\n    }\n  }\n  _handleDataLoaded(options) {\n    const {\n      loadOptions: loadOptions\n    } = options;\n    const localPaging = options.remoteOperations && !options.remoteOperations.paging;\n    const {\n      cachedData: cachedData\n    } = options;\n    const {\n      storeLoadOptions: storeLoadOptions\n    } = options;\n    const needCache = false !== this.option(\"cacheEnabled\") && storeLoadOptions;\n    const needPageCache = needCache && !options.isCustomLoading && cachedData && (!localPaging || storeLoadOptions.group);\n    const needPagingCache = needCache && localPaging;\n    const needStoreCache = needPagingCache && !options.isCustomLoading;\n    if (!loadOptions) {\n      this._dataSource.cancel(options.operationId);\n      return;\n    }\n    if (localPaging) {\n      options.skip = loadOptions.skip;\n      options.take = loadOptions.take;\n      delete loadOptions.skip;\n      delete loadOptions.take;\n    }\n    if (loadOptions.group) {\n      loadOptions.group = options.group || loadOptions.group;\n    }\n    const groupCount = gridCoreUtils.normalizeSortingInfo(options.group || storeLoadOptions.group || loadOptions.group).length;\n    if (options.cachedDataPartBegin) {\n      options.data = options.cachedDataPartBegin.concat(options.data);\n    }\n    if (options.cachedDataPartEnd) {\n      options.data = options.data.concat(options.cachedDataPartEnd);\n    }\n    if (!needPageCache || !getPageDataFromCache(options)) {\n      var _options$extra;\n      if (needPagingCache && options.cachedPagingData) {\n        options.data = cloneItems(options.cachedPagingData, groupCount);\n      } else {\n        if (needStoreCache) {\n          if (!this._cachedStoreData) {\n            this._cachedStoreData = cloneItems(options.data, gridCoreUtils.normalizeSortingInfo(storeLoadOptions.group).length);\n          } else if (options.mergeStoreLoadData) {\n            options.data = this._cachedStoreData = this._cachedStoreData.concat(options.data);\n          }\n        }\n        new ArrayStore(options.data).load(loadOptions).done(data => {\n          options.data = data;\n          if (needStoreCache) {\n            this._cachedPagingData = cloneItems(options.data, groupCount);\n          }\n        }).fail(error => {\n          options.data = new Deferred().reject(error);\n        });\n      }\n      if (loadOptions.requireTotalCount && localPaging) {\n        options.extra = isPlainObject(options.extra) ? options.extra : {};\n        options.extra.totalCount = options.data.length;\n      }\n      if (options.extra && options.extra.totalCount >= 0 && (false === storeLoadOptions.requireTotalCount || false === loadOptions.requireTotalCount)) {\n        options.extra.totalCount = -1;\n      }\n      if (!loadOptions.data && (storeLoadOptions.requireTotalCount || ((null === (_options$extra = options.extra) || void 0 === _options$extra ? void 0 : _options$extra.totalCount) ?? -1) >= 0)) {\n        this._totalCountCorrection = 0;\n      }\n      this._handleDataLoadedCore(options);\n      if (needPageCache) {\n        cachedData.extra = cachedData.extra || extend({}, options.extra);\n        when(options.data).done(data => {\n          setPageDataToCache(options, data, groupCount);\n        });\n      }\n    }\n    when(options.data).done(() => {\n      if (options.lastLoadOptions) {\n        this._lastLoadOptions = options.lastLoadOptions;\n        Object.keys(options.operationTypes).forEach(operationType => {\n          this._lastOperationTypes[operationType] = this._lastOperationTypes[operationType] || options.operationTypes[operationType];\n        });\n      }\n    });\n    options.storeLoadOptions = options.originalStoreLoadOptions;\n  }\n  _handleDataLoadedCore(options) {\n    if (options.remoteOperations && !options.remoteOperations.paging && Array.isArray(options.data)) {\n      if (void 0 !== options.skip) {\n        options.data = options.data.slice(options.skip);\n      }\n      if (void 0 !== options.take) {\n        options.data = options.data.slice(0, options.take);\n      }\n    }\n  }\n  _handleLoadingChanged(isLoading) {\n    this.loadingChanged.fire(isLoading);\n  }\n  _handleLoadError(error) {\n    this.loadError.fire(error);\n    this.changed.fire({\n      changeType: \"loadError\",\n      error: error\n    });\n  }\n  _loadPageSize() {\n    return this.pageSize();\n  }\n  _handleDataChanged(args) {\n    let currentTotalCount;\n    const dataSource = this._dataSource;\n    let isLoading = false;\n    const isDataLoading = !args || isDefined(args.changeType);\n    const itemsCount = this.itemsCount();\n    if (isDataLoading) {\n      this._isLastPage = !itemsCount || !this._loadPageSize() || itemsCount < this._loadPageSize();\n      if (this._isLastPage) {\n        this._hasLastPage = true;\n      }\n    }\n    if (dataSource.totalCount() >= 0) {\n      if (dataSource.pageIndex() >= this.pageCount()) {\n        dataSource.pageIndex(this.pageCount() - 1);\n        this.pageIndex(dataSource.pageIndex());\n        this.resetPagesCache();\n        dataSource.load();\n        isLoading = true;\n      }\n    } else if (isDataLoading) {\n      currentTotalCount = dataSource.pageIndex() * this.pageSize() + itemsCount;\n      if (currentTotalCount > this._currentTotalCount) {\n        this._currentTotalCount = currentTotalCount;\n        if (0 === dataSource.pageIndex() || !this.option(\"scrolling.legacyMode\")) {\n          this._totalCountCorrection = 0;\n        }\n      }\n      if (0 === itemsCount && dataSource.pageIndex() >= this.pageCount()) {\n        dataSource.pageIndex(this.pageCount() - 1);\n        if (\"infinite\" !== this.option(\"scrolling.mode\")) {\n          dataSource.load();\n          isLoading = true;\n        }\n      }\n    }\n    if (!isLoading) {\n      this._operationTypes = this._lastOperationTypes;\n      this._lastOperationTypes = {};\n      this.component._optionCache = {};\n      this.changed.fire(args);\n      this.component._optionCache = void 0;\n    }\n  }\n  _scheduleCustomLoadCallbacks(deferred) {\n    const that = this;\n    that._isCustomLoading = true;\n    deferred.always(() => {\n      that._isCustomLoading = false;\n    });\n  }\n  loadingOperationTypes() {\n    return this._loadingOperationTypes;\n  }\n  operationTypes() {\n    return this._operationTypes;\n  }\n  lastLoadOptions() {\n    return this._lastLoadOptions || {};\n  }\n  isLastPage() {\n    return this._isLastPage;\n  }\n  _dataSourceTotalCount() {\n    return this._dataSource.totalCount();\n  }\n  _changeRowExpandCore(path) {}\n  changeRowExpand(path) {}\n  totalCount() {\n    return parseInt((this._currentTotalCount || this._dataSourceTotalCount()) + this._totalCountCorrection);\n  }\n  totalCountCorrection() {\n    return this._totalCountCorrection;\n  }\n  items() {}\n  itemsCount() {\n    return this._dataSource.items().length;\n  }\n  totalItemsCount() {\n    return this.totalCount();\n  }\n  pageSize() {\n    const dataSource = this._dataSource;\n    if (!arguments.length && !dataSource.paginate()) {\n      return 0;\n    }\n    return dataSource.pageSize.apply(dataSource, arguments);\n  }\n  pageCount() {\n    const count = this.totalItemsCount() - this._totalCountCorrection;\n    const pageSize = this.pageSize();\n    if (pageSize && count > 0) {\n      return Math.max(1, Math.ceil(count / pageSize));\n    }\n    return 1;\n  }\n  hasKnownLastPage() {\n    return this._hasLastPage || this._dataSource.totalCount() >= 0;\n  }\n  loadFromStore(loadOptions, store) {\n    const dataSource = this._dataSource;\n    const d = new Deferred();\n    if (!dataSource) {\n      return;\n    }\n    store = store || dataSource.store();\n    store.load(loadOptions).done((data, extra) => {\n      if (data && !Array.isArray(data) && Array.isArray(data.data)) {\n        extra = data;\n        data = data.data;\n      }\n      d.resolve(data, extra);\n    }).fail(d.reject);\n    return d;\n  }\n  isCustomLoading() {\n    return !!this._isCustomLoading;\n  }\n  load(options) {\n    const that = this;\n    const dataSource = that._dataSource;\n    const d = new Deferred();\n    if (options) {\n      const store = dataSource.store();\n      const dataSourceLoadOptions = dataSource.loadOptions();\n      const loadResult = {\n        storeLoadOptions: extend({}, options, {\n          langParams: null === dataSourceLoadOptions || void 0 === dataSourceLoadOptions ? void 0 : dataSourceLoadOptions.langParams\n        }),\n        isCustomLoading: true\n      };\n      each(store._customLoadOptions() || [], (_, optionName) => {\n        if (!(optionName in loadResult.storeLoadOptions)) {\n          loadResult.storeLoadOptions[optionName] = dataSourceLoadOptions[optionName];\n        }\n      });\n      this._isLoadingAll = options.isLoadingAll;\n      that._scheduleCustomLoadCallbacks(d);\n      dataSource._scheduleLoadCallbacks(d);\n      that._handleCustomizeStoreLoadOptions(loadResult);\n      executeTask(() => {\n        if (!dataSource.store()) {\n          return d.reject(\"canceled\");\n        }\n        when(loadResult.data || that.loadFromStore(loadResult.storeLoadOptions)).done((data, extra) => {\n          loadResult.data = data;\n          loadResult.extra = extra || {};\n          that._handleDataLoaded(loadResult);\n          if (options.requireTotalCount && void 0 === loadResult.extra.totalCount) {\n            loadResult.extra.totalCount = store.totalCount(loadResult.storeLoadOptions);\n          }\n          when(loadResult.data, loadResult.extra.totalCount).done((data, totalCount) => {\n            loadResult.extra.totalCount = totalCount;\n            d.resolve(data, loadResult.extra);\n          }).fail(d.reject);\n        }).fail(d.reject);\n      }, that.option(\"loadingTimeout\"));\n      return d.fail(function () {\n        that._eventsStrategy.fireEvent(\"loadError\", arguments);\n      }).always(() => {\n        this._isLoadingAll = false;\n      }).promise();\n    }\n    return dataSource.load();\n  }\n  reload(full) {\n    return full ? this._dataSource.reload() : this._dataSource.load();\n  }\n  getCachedStoreData() {\n    return this._cachedStoreData;\n  }\n  isLoaded() {}\n  pageIndex(pageIndex) {}\n}","map":{"version":3,"names":["ArrayStore","applyBatch","Callbacks","getKeyHash","Deferred","when","extend","each","isDefined","isFunction","isPlainObject","modules","gridCoreUtils","calculateOperationTypes","cloneItems","createEmptyCachedData","executeTask","getPageDataFromCache","setPageDataToCache","DataSourceAdapter","Controller","init","dataSource","remoteOperations","that","_dataSource","_remoteOperations","_isLastPage","isLastPage","_hasLastPage","_currentTotalCount","_cachedData","_lastOperationTypes","_eventsStrategy","_totalCountCorrection","_isLoadingAll","changed","loadingChanged","loadError","customizeStoreLoadOptions","changing","pushed","_dataChangedHandler","_handleDataChanged","bind","_customizeStoreLoadOptionsHandler","_handleCustomizeStoreLoadOptions","_dataLoadedHandler","_handleDataLoaded","_loadingChangedHandler","_handleLoadingChanged","_loadErrorHandler","_handleLoadError","_pushHandler","_handlePush","_changingHandler","_handleChanging","on","store","memberName","member","apply","arguments","dispose","isSharedDataSource","off","refresh","options","operationTypes","reload","resetCurrentTotalCount","paginate","resetCache","_cachedStoreData","_cachedPagingData","resetPagesCache","isLiveUpdate","_needClearStoreDataCache","_lastLoadOptions","isLocalOperations","Object","keys","every","operationName","push","changes","fromStore","keyInfo","data","_applyBatch","fire","getDataIndexGetter","_dataIndexGetter","indexByKey","storeData","isCacheUpdated","i","length","keyOf","_getKeyInfo","_needToCopyDataObject","groupCount","normalizeSortingInfo","group","isReshapeMode","option","isVirtualMode","filter","change","type","index","getItemCount","itemsCount","items","oldItemCount","_items","useInsertIndex","skipCopying","needUpdateTotalCountCorrection","splice","_ref","e","_needCleanCacheByOperation","operationType","operationTypesByOrder","operationTypeIndex","indexOf","currentOperationTypes","slice","some","_customizeRemoteOperations","cachedStoreData","cachedPagingData","cachedData","storeLoadOptions","filtering","sort","sorting","summary","fullReload","groupExpanding","value","paging","isCustomLoading","_options$data","_handleDataLoading","lastLoadOptions","delay","originalStoreLoadOptions","isFullReload","isLoaded","_isRefreshing","loadOptions","pageIndex","pageSize","isRefreshing","_loadingOperationTypes","_isRefreshed","done","_lastOperationId","operationId","load","always","fail","cancel","_handleDataLoadingCore","cachedExtra","extra","localLoadOptionNames","grouping","skip","take","requireTotalCount","langParams","optionName","optionValue","localPaging","needCache","needPageCache","needPagingCache","needStoreCache","cachedDataPartBegin","concat","cachedDataPartEnd","_options$extra","mergeStoreLoadData","error","reject","totalCount","_handleDataLoadedCore","forEach","Array","isArray","isLoading","changeType","_loadPageSize","args","currentTotalCount","isDataLoading","pageCount","_operationTypes","component","_optionCache","_scheduleCustomLoadCallbacks","deferred","_isCustomLoading","loadingOperationTypes","_dataSourceTotalCount","_changeRowExpandCore","path","changeRowExpand","parseInt","totalCountCorrection","totalItemsCount","count","Math","max","ceil","hasKnownLastPage","loadFromStore","d","resolve","dataSourceLoadOptions","loadResult","_customLoadOptions","_","isLoadingAll","_scheduleLoadCallbacks","fireEvent","promise","full","getCachedStoreData"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/data_source_adapter/m_data_source_adapter.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/data_source_adapter/m_data_source_adapter.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport ArrayStore from \"../../../../common/data/array_store\";\r\nimport {\r\n    applyBatch\r\n} from \"../../../../common/data/array_utils\";\r\nimport Callbacks from \"../../../../core/utils/callbacks\";\r\nimport {\r\n    getKeyHash\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isFunction,\r\n    isPlainObject\r\n} from \"../../../../core/utils/type\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    calculateOperationTypes,\r\n    cloneItems,\r\n    createEmptyCachedData,\r\n    executeTask,\r\n    getPageDataFromCache,\r\n    setPageDataToCache\r\n} from \"./m_data_source_adapter_utils\";\r\nexport default class DataSourceAdapter extends modules.Controller {\r\n    init(dataSource, remoteOperations) {\r\n        const that = this;\r\n        that._dataSource = dataSource;\r\n        that._remoteOperations = remoteOperations || {};\r\n        that._isLastPage = !dataSource.isLastPage();\r\n        that._hasLastPage = false;\r\n        that._currentTotalCount = 0;\r\n        that._cachedData = createEmptyCachedData();\r\n        that._lastOperationTypes = {};\r\n        that._eventsStrategy = dataSource._eventsStrategy;\r\n        that._totalCountCorrection = 0;\r\n        that._isLoadingAll = false;\r\n        that.changed = Callbacks();\r\n        that.loadingChanged = Callbacks();\r\n        that.loadError = Callbacks();\r\n        that.customizeStoreLoadOptions = Callbacks();\r\n        that.changing = Callbacks();\r\n        that.pushed = Callbacks();\r\n        that._dataChangedHandler = that._handleDataChanged.bind(that);\r\n        that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\r\n        that._dataLoadedHandler = that._handleDataLoaded.bind(that);\r\n        that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\r\n        that._loadErrorHandler = that._handleLoadError.bind(that);\r\n        that._pushHandler = that._handlePush.bind(that);\r\n        that._changingHandler = that._handleChanging.bind(that);\r\n        dataSource.on(\"changed\", that._dataChangedHandler);\r\n        dataSource.on(\"customizeStoreLoadOptions\", that._customizeStoreLoadOptionsHandler);\r\n        dataSource.on(\"customizeLoadResult\", that._dataLoadedHandler);\r\n        dataSource.on(\"loadingChanged\", that._loadingChangedHandler);\r\n        dataSource.on(\"loadError\", that._loadErrorHandler);\r\n        dataSource.on(\"changing\", that._changingHandler);\r\n        dataSource.store().on(\"beforePush\", that._pushHandler);\r\n        each(dataSource, ((memberName, member) => {\r\n            if (!that[memberName] && isFunction(member)) {\r\n                that[memberName] = function() {\r\n                    return this._dataSource[memberName].apply(this._dataSource, arguments)\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    dispose(isSharedDataSource) {\r\n        const dataSource = this._dataSource;\r\n        const store = dataSource.store();\r\n        dataSource.off(\"changed\", this._dataChangedHandler);\r\n        dataSource.off(\"customizeStoreLoadOptions\", this._customizeStoreLoadOptionsHandler);\r\n        dataSource.off(\"customizeLoadResult\", this._dataLoadedHandler);\r\n        dataSource.off(\"loadingChanged\", this._loadingChangedHandler);\r\n        dataSource.off(\"loadError\", this._loadErrorHandler);\r\n        dataSource.off(\"changing\", this._changingHandler);\r\n        store && store.off(\"beforePush\", this._pushHandler);\r\n        if (!isSharedDataSource) {\r\n            dataSource.dispose()\r\n        }\r\n    }\r\n    remoteOperations() {\r\n        return this._remoteOperations\r\n    }\r\n    refresh(options, operationTypes) {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        if (operationTypes.reload) {\r\n            that.resetCurrentTotalCount();\r\n            that._isLastPage = !dataSource.paginate();\r\n            that._hasLastPage = that._isLastPage\r\n        }\r\n    }\r\n    resetCurrentTotalCount() {\r\n        this._currentTotalCount = 0;\r\n        this._totalCountCorrection = 0\r\n    }\r\n    resetCache() {\r\n        this._cachedStoreData = void 0;\r\n        this._cachedPagingData = void 0\r\n    }\r\n    resetPagesCache(isLiveUpdate) {\r\n        this._cachedData = createEmptyCachedData()\r\n    }\r\n    _needClearStoreDataCache() {\r\n        const remoteOperations = this.remoteOperations();\r\n        const operationTypes = calculateOperationTypes(this._lastLoadOptions || {}, {});\r\n        const isLocalOperations = Object.keys(remoteOperations).every((operationName => !operationTypes[operationName] || !remoteOperations[operationName]));\r\n        return !isLocalOperations\r\n    }\r\n    push(changes, fromStore) {\r\n        const store = this.store();\r\n        if (this._needClearStoreDataCache()) {\r\n            this._cachedStoreData = void 0\r\n        }\r\n        this._cachedPagingData = void 0;\r\n        this.resetPagesCache(true);\r\n        if (this._cachedStoreData) {\r\n            applyBatch({\r\n                keyInfo: store,\r\n                data: this._cachedStoreData,\r\n                changes: changes\r\n            })\r\n        }\r\n        if (!fromStore) {\r\n            this._applyBatch(changes)\r\n        }\r\n        this.pushed.fire(changes)\r\n    }\r\n    getDataIndexGetter() {\r\n        if (!this._dataIndexGetter) {\r\n            let indexByKey;\r\n            let storeData;\r\n            const store = this.store();\r\n            this._dataIndexGetter = data => {\r\n                const isCacheUpdated = storeData && storeData !== this._cachedStoreData;\r\n                if (!indexByKey || isCacheUpdated) {\r\n                    storeData = this._cachedStoreData || [];\r\n                    indexByKey = {};\r\n                    for (let i = 0; i < storeData.length; i++) {\r\n                        indexByKey[getKeyHash(store.keyOf(storeData[i]))] = i\r\n                    }\r\n                }\r\n                return indexByKey[getKeyHash(store.keyOf(data))]\r\n            }\r\n        }\r\n        return this._dataIndexGetter\r\n    }\r\n    _getKeyInfo() {\r\n        return this.store()\r\n    }\r\n    _needToCopyDataObject() {\r\n        return true\r\n    }\r\n    _applyBatch(changes, fromStore) {\r\n        const keyInfo = this._getKeyInfo();\r\n        const dataSource = this._dataSource;\r\n        const groupCount = gridCoreUtils.normalizeSortingInfo(this.group()).length;\r\n        const isReshapeMode = \"reshape\" === this.option(\"editing.refreshMode\");\r\n        const isVirtualMode = \"virtual\" === this.option(\"scrolling.mode\");\r\n        changes = changes.filter((change => !dataSource.paginate() || \"insert\" !== change.type || void 0 !== change.index));\r\n        const getItemCount = () => groupCount ? this.itemsCount() : this.items().length;\r\n        const oldItemCount = getItemCount();\r\n        applyBatch({\r\n            keyInfo: keyInfo,\r\n            data: this._items,\r\n            changes: changes,\r\n            groupCount: groupCount,\r\n            useInsertIndex: true,\r\n            skipCopying: !this._needToCopyDataObject()\r\n        });\r\n        applyBatch({\r\n            keyInfo: keyInfo,\r\n            data: dataSource.items(),\r\n            changes: changes,\r\n            groupCount: groupCount,\r\n            useInsertIndex: true,\r\n            skipCopying: !this._needToCopyDataObject()\r\n        });\r\n        const needUpdateTotalCountCorrection = this._currentTotalCount > 0 || (fromStore || !isReshapeMode) && isVirtualMode;\r\n        if (needUpdateTotalCountCorrection) {\r\n            this._totalCountCorrection += getItemCount() - oldItemCount\r\n        }\r\n        changes.splice(0, changes.length)\r\n    }\r\n    _handlePush(_ref) {\r\n        let {\r\n            changes: changes\r\n        } = _ref;\r\n        this.push(changes, true)\r\n    }\r\n    _handleChanging(e) {\r\n        this.changing.fire(e);\r\n        this._applyBatch(e.changes, true)\r\n    }\r\n    _needCleanCacheByOperation(operationType, remoteOperations) {\r\n        const operationTypesByOrder = [\"filtering\", \"sorting\", \"paging\"];\r\n        const operationTypeIndex = operationTypesByOrder.indexOf(operationType);\r\n        const currentOperationTypes = operationTypeIndex >= 0 ? operationTypesByOrder.slice(operationTypeIndex) : [operationType];\r\n        return currentOperationTypes.some((operationType => remoteOperations[operationType]))\r\n    }\r\n    _customizeRemoteOperations(options, operationTypes) {\r\n        let cachedStoreData = this._cachedStoreData;\r\n        let cachedPagingData = this._cachedPagingData;\r\n        let cachedData = this._cachedData;\r\n        if (options.storeLoadOptions.filter && !options.remoteOperations.filtering || options.storeLoadOptions.sort && !options.remoteOperations.sorting) {\r\n            options.remoteOperations = {\r\n                filtering: options.remoteOperations.filtering,\r\n                summary: options.remoteOperations.summary\r\n            }\r\n        }\r\n        if (operationTypes.fullReload) {\r\n            cachedStoreData = void 0;\r\n            cachedPagingData = void 0;\r\n            cachedData = createEmptyCachedData()\r\n        } else {\r\n            if (operationTypes.reload) {\r\n                cachedPagingData = void 0;\r\n                cachedData = createEmptyCachedData()\r\n            } else if (operationTypes.groupExpanding) {\r\n                cachedData = createEmptyCachedData()\r\n            }\r\n            each(operationTypes, ((operationType, value) => {\r\n                if (value && this._needCleanCacheByOperation(operationType, options.remoteOperations)) {\r\n                    cachedStoreData = void 0;\r\n                    cachedPagingData = void 0\r\n                }\r\n            }))\r\n        }\r\n        if (cachedPagingData) {\r\n            options.remoteOperations.paging = false\r\n        }\r\n        options.cachedStoreData = cachedStoreData;\r\n        options.cachedPagingData = cachedPagingData;\r\n        options.cachedData = cachedData;\r\n        if (!options.isCustomLoading) {\r\n            this._cachedStoreData = cachedStoreData;\r\n            this._cachedPagingData = cachedPagingData;\r\n            this._cachedData = cachedData\r\n        }\r\n    }\r\n    _handleCustomizeStoreLoadOptions(options) {\r\n        var _options$data;\r\n        this._handleDataLoading(options);\r\n        if (!(0 === (null === (_options$data = options.data) || void 0 === _options$data ? void 0 : _options$data.length))) {\r\n            options.data = getPageDataFromCache(options, true) || options.cachedStoreData\r\n        }\r\n    }\r\n    _handleDataLoading(options) {\r\n        const dataSource = this._dataSource;\r\n        const lastLoadOptions = this._lastLoadOptions;\r\n        this.customizeStoreLoadOptions.fire(options);\r\n        options.delay = this.option(\"loadingTimeout\");\r\n        options.originalStoreLoadOptions = options.storeLoadOptions;\r\n        options.remoteOperations = extend({}, this.remoteOperations());\r\n        const isFullReload = !this.isLoaded() && !this._isRefreshing;\r\n        if (this.option(\"integrationOptions.renderedOnServer\") && !this.isLoaded()) {\r\n            options.delay = void 0\r\n        }\r\n        const loadOptions = extend({\r\n            pageIndex: this.pageIndex(),\r\n            pageSize: this.pageSize()\r\n        }, options.storeLoadOptions);\r\n        const operationTypes = calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload);\r\n        this._customizeRemoteOperations(options, operationTypes);\r\n        if (!options.isCustomLoading) {\r\n            const isRefreshing = this._isRefreshing;\r\n            options.pageIndex = dataSource.pageIndex();\r\n            options.lastLoadOptions = loadOptions;\r\n            options.operationTypes = operationTypes;\r\n            this._loadingOperationTypes = operationTypes;\r\n            this._isRefreshing = true;\r\n            when(isRefreshing || this._isRefreshed || this.refresh(options, operationTypes)).done((() => {\r\n                if (this._lastOperationId === options.operationId) {\r\n                    this._isRefreshed = true;\r\n                    this.load().always((() => {\r\n                        this._isRefreshed = false\r\n                    }))\r\n                }\r\n            })).fail((() => {\r\n                dataSource.cancel(options.operationId)\r\n            })).always((() => {\r\n                this._isRefreshing = false\r\n            }));\r\n            dataSource.cancel(this._lastOperationId);\r\n            this._lastOperationId = options.operationId;\r\n            if (this._isRefreshing) {\r\n                dataSource.cancel(this._lastOperationId)\r\n            }\r\n        }\r\n        this._handleDataLoadingCore(options)\r\n    }\r\n    _handleDataLoadingCore(options) {\r\n        const {\r\n            remoteOperations: remoteOperations\r\n        } = options;\r\n        options.loadOptions = {};\r\n        const cachedExtra = options.cachedData.extra;\r\n        const localLoadOptionNames = {\r\n            filter: !remoteOperations.filtering,\r\n            sort: !remoteOperations.sorting,\r\n            group: !remoteOperations.grouping,\r\n            summary: !remoteOperations.summary,\r\n            skip: !remoteOperations.paging,\r\n            take: !remoteOperations.paging,\r\n            requireTotalCount: cachedExtra && \"totalCount\" in cachedExtra || !remoteOperations.paging,\r\n            langParams: !remoteOperations.filtering || !remoteOperations.sorting\r\n        };\r\n        each(options.storeLoadOptions, ((optionName, optionValue) => {\r\n            if (localLoadOptionNames[optionName]) {\r\n                options.loadOptions[optionName] = optionValue;\r\n                delete options.storeLoadOptions[optionName]\r\n            }\r\n        }));\r\n        if (cachedExtra) {\r\n            options.extra = cachedExtra\r\n        }\r\n    }\r\n    _handleDataLoaded(options) {\r\n        const {\r\n            loadOptions: loadOptions\r\n        } = options;\r\n        const localPaging = options.remoteOperations && !options.remoteOperations.paging;\r\n        const {\r\n            cachedData: cachedData\r\n        } = options;\r\n        const {\r\n            storeLoadOptions: storeLoadOptions\r\n        } = options;\r\n        const needCache = false !== this.option(\"cacheEnabled\") && storeLoadOptions;\r\n        const needPageCache = needCache && !options.isCustomLoading && cachedData && (!localPaging || storeLoadOptions.group);\r\n        const needPagingCache = needCache && localPaging;\r\n        const needStoreCache = needPagingCache && !options.isCustomLoading;\r\n        if (!loadOptions) {\r\n            this._dataSource.cancel(options.operationId);\r\n            return\r\n        }\r\n        if (localPaging) {\r\n            options.skip = loadOptions.skip;\r\n            options.take = loadOptions.take;\r\n            delete loadOptions.skip;\r\n            delete loadOptions.take\r\n        }\r\n        if (loadOptions.group) {\r\n            loadOptions.group = options.group || loadOptions.group\r\n        }\r\n        const groupCount = gridCoreUtils.normalizeSortingInfo(options.group || storeLoadOptions.group || loadOptions.group).length;\r\n        if (options.cachedDataPartBegin) {\r\n            options.data = options.cachedDataPartBegin.concat(options.data)\r\n        }\r\n        if (options.cachedDataPartEnd) {\r\n            options.data = options.data.concat(options.cachedDataPartEnd)\r\n        }\r\n        if (!needPageCache || !getPageDataFromCache(options)) {\r\n            var _options$extra;\r\n            if (needPagingCache && options.cachedPagingData) {\r\n                options.data = cloneItems(options.cachedPagingData, groupCount)\r\n            } else {\r\n                if (needStoreCache) {\r\n                    if (!this._cachedStoreData) {\r\n                        this._cachedStoreData = cloneItems(options.data, gridCoreUtils.normalizeSortingInfo(storeLoadOptions.group).length)\r\n                    } else if (options.mergeStoreLoadData) {\r\n                        options.data = this._cachedStoreData = this._cachedStoreData.concat(options.data)\r\n                    }\r\n                }\r\n                new ArrayStore(options.data).load(loadOptions).done((data => {\r\n                    options.data = data;\r\n                    if (needStoreCache) {\r\n                        this._cachedPagingData = cloneItems(options.data, groupCount)\r\n                    }\r\n                })).fail((error => {\r\n                    options.data = (new Deferred).reject(error)\r\n                }))\r\n            }\r\n            if (loadOptions.requireTotalCount && localPaging) {\r\n                options.extra = isPlainObject(options.extra) ? options.extra : {};\r\n                options.extra.totalCount = options.data.length\r\n            }\r\n            if (options.extra && options.extra.totalCount >= 0 && (false === storeLoadOptions.requireTotalCount || false === loadOptions.requireTotalCount)) {\r\n                options.extra.totalCount = -1\r\n            }\r\n            if (!loadOptions.data && (storeLoadOptions.requireTotalCount || ((null === (_options$extra = options.extra) || void 0 === _options$extra ? void 0 : _options$extra.totalCount) ?? -1) >= 0)) {\r\n                this._totalCountCorrection = 0\r\n            }\r\n            this._handleDataLoadedCore(options);\r\n            if (needPageCache) {\r\n                cachedData.extra = cachedData.extra || extend({}, options.extra);\r\n                when(options.data).done((data => {\r\n                    setPageDataToCache(options, data, groupCount)\r\n                }))\r\n            }\r\n        }\r\n        when(options.data).done((() => {\r\n            if (options.lastLoadOptions) {\r\n                this._lastLoadOptions = options.lastLoadOptions;\r\n                Object.keys(options.operationTypes).forEach((operationType => {\r\n                    this._lastOperationTypes[operationType] = this._lastOperationTypes[operationType] || options.operationTypes[operationType]\r\n                }))\r\n            }\r\n        }));\r\n        options.storeLoadOptions = options.originalStoreLoadOptions\r\n    }\r\n    _handleDataLoadedCore(options) {\r\n        if (options.remoteOperations && !options.remoteOperations.paging && Array.isArray(options.data)) {\r\n            if (void 0 !== options.skip) {\r\n                options.data = options.data.slice(options.skip)\r\n            }\r\n            if (void 0 !== options.take) {\r\n                options.data = options.data.slice(0, options.take)\r\n            }\r\n        }\r\n    }\r\n    _handleLoadingChanged(isLoading) {\r\n        this.loadingChanged.fire(isLoading)\r\n    }\r\n    _handleLoadError(error) {\r\n        this.loadError.fire(error);\r\n        this.changed.fire({\r\n            changeType: \"loadError\",\r\n            error: error\r\n        })\r\n    }\r\n    _loadPageSize() {\r\n        return this.pageSize()\r\n    }\r\n    _handleDataChanged(args) {\r\n        let currentTotalCount;\r\n        const dataSource = this._dataSource;\r\n        let isLoading = false;\r\n        const isDataLoading = !args || isDefined(args.changeType);\r\n        const itemsCount = this.itemsCount();\r\n        if (isDataLoading) {\r\n            this._isLastPage = !itemsCount || !this._loadPageSize() || itemsCount < this._loadPageSize();\r\n            if (this._isLastPage) {\r\n                this._hasLastPage = true\r\n            }\r\n        }\r\n        if (dataSource.totalCount() >= 0) {\r\n            if (dataSource.pageIndex() >= this.pageCount()) {\r\n                dataSource.pageIndex(this.pageCount() - 1);\r\n                this.pageIndex(dataSource.pageIndex());\r\n                this.resetPagesCache();\r\n                dataSource.load();\r\n                isLoading = true\r\n            }\r\n        } else if (isDataLoading) {\r\n            currentTotalCount = dataSource.pageIndex() * this.pageSize() + itemsCount;\r\n            if (currentTotalCount > this._currentTotalCount) {\r\n                this._currentTotalCount = currentTotalCount;\r\n                if (0 === dataSource.pageIndex() || !this.option(\"scrolling.legacyMode\")) {\r\n                    this._totalCountCorrection = 0\r\n                }\r\n            }\r\n            if (0 === itemsCount && dataSource.pageIndex() >= this.pageCount()) {\r\n                dataSource.pageIndex(this.pageCount() - 1);\r\n                if (\"infinite\" !== this.option(\"scrolling.mode\")) {\r\n                    dataSource.load();\r\n                    isLoading = true\r\n                }\r\n            }\r\n        }\r\n        if (!isLoading) {\r\n            this._operationTypes = this._lastOperationTypes;\r\n            this._lastOperationTypes = {};\r\n            this.component._optionCache = {};\r\n            this.changed.fire(args);\r\n            this.component._optionCache = void 0\r\n        }\r\n    }\r\n    _scheduleCustomLoadCallbacks(deferred) {\r\n        const that = this;\r\n        that._isCustomLoading = true;\r\n        deferred.always((() => {\r\n            that._isCustomLoading = false\r\n        }))\r\n    }\r\n    loadingOperationTypes() {\r\n        return this._loadingOperationTypes\r\n    }\r\n    operationTypes() {\r\n        return this._operationTypes\r\n    }\r\n    lastLoadOptions() {\r\n        return this._lastLoadOptions || {}\r\n    }\r\n    isLastPage() {\r\n        return this._isLastPage\r\n    }\r\n    _dataSourceTotalCount() {\r\n        return this._dataSource.totalCount()\r\n    }\r\n    _changeRowExpandCore(path) {}\r\n    changeRowExpand(path) {}\r\n    totalCount() {\r\n        return parseInt((this._currentTotalCount || this._dataSourceTotalCount()) + this._totalCountCorrection)\r\n    }\r\n    totalCountCorrection() {\r\n        return this._totalCountCorrection\r\n    }\r\n    items() {}\r\n    itemsCount() {\r\n        return this._dataSource.items().length\r\n    }\r\n    totalItemsCount() {\r\n        return this.totalCount()\r\n    }\r\n    pageSize() {\r\n        const dataSource = this._dataSource;\r\n        if (!arguments.length && !dataSource.paginate()) {\r\n            return 0\r\n        }\r\n        return dataSource.pageSize.apply(dataSource, arguments)\r\n    }\r\n    pageCount() {\r\n        const count = this.totalItemsCount() - this._totalCountCorrection;\r\n        const pageSize = this.pageSize();\r\n        if (pageSize && count > 0) {\r\n            return Math.max(1, Math.ceil(count / pageSize))\r\n        }\r\n        return 1\r\n    }\r\n    hasKnownLastPage() {\r\n        return this._hasLastPage || this._dataSource.totalCount() >= 0\r\n    }\r\n    loadFromStore(loadOptions, store) {\r\n        const dataSource = this._dataSource;\r\n        const d = new Deferred;\r\n        if (!dataSource) {\r\n            return\r\n        }\r\n        store = store || dataSource.store();\r\n        store.load(loadOptions).done(((data, extra) => {\r\n            if (data && !Array.isArray(data) && Array.isArray(data.data)) {\r\n                extra = data;\r\n                data = data.data\r\n            }\r\n            d.resolve(data, extra)\r\n        })).fail(d.reject);\r\n        return d\r\n    }\r\n    isCustomLoading() {\r\n        return !!this._isCustomLoading\r\n    }\r\n    load(options) {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        const d = new Deferred;\r\n        if (options) {\r\n            const store = dataSource.store();\r\n            const dataSourceLoadOptions = dataSource.loadOptions();\r\n            const loadResult = {\r\n                storeLoadOptions: extend({}, options, {\r\n                    langParams: null === dataSourceLoadOptions || void 0 === dataSourceLoadOptions ? void 0 : dataSourceLoadOptions.langParams\r\n                }),\r\n                isCustomLoading: true\r\n            };\r\n            each(store._customLoadOptions() || [], ((_, optionName) => {\r\n                if (!(optionName in loadResult.storeLoadOptions)) {\r\n                    loadResult.storeLoadOptions[optionName] = dataSourceLoadOptions[optionName]\r\n                }\r\n            }));\r\n            this._isLoadingAll = options.isLoadingAll;\r\n            that._scheduleCustomLoadCallbacks(d);\r\n            dataSource._scheduleLoadCallbacks(d);\r\n            that._handleCustomizeStoreLoadOptions(loadResult);\r\n            executeTask((() => {\r\n                if (!dataSource.store()) {\r\n                    return d.reject(\"canceled\")\r\n                }\r\n                when(loadResult.data || that.loadFromStore(loadResult.storeLoadOptions)).done(((data, extra) => {\r\n                    loadResult.data = data;\r\n                    loadResult.extra = extra || {};\r\n                    that._handleDataLoaded(loadResult);\r\n                    if (options.requireTotalCount && void 0 === loadResult.extra.totalCount) {\r\n                        loadResult.extra.totalCount = store.totalCount(loadResult.storeLoadOptions)\r\n                    }\r\n                    when(loadResult.data, loadResult.extra.totalCount).done(((data, totalCount) => {\r\n                        loadResult.extra.totalCount = totalCount;\r\n                        d.resolve(data, loadResult.extra)\r\n                    })).fail(d.reject)\r\n                })).fail(d.reject)\r\n            }), that.option(\"loadingTimeout\"));\r\n            return d.fail((function() {\r\n                that._eventsStrategy.fireEvent(\"loadError\", arguments)\r\n            })).always((() => {\r\n                this._isLoadingAll = false\r\n            })).promise()\r\n        }\r\n        return dataSource.load()\r\n    }\r\n    reload(full) {\r\n        return full ? this._dataSource.reload() : this._dataSource.load()\r\n    }\r\n    getCachedStoreData() {\r\n        return this._cachedStoreData\r\n    }\r\n    isLoaded() {}\r\n    pageIndex(pageIndex) {}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}