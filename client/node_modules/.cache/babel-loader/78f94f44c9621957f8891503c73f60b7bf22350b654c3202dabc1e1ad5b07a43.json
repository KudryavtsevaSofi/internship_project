{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/m_responsive_box.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport registerComponent from \"../../core/component_registrator\";\nimport $ from \"../../core/renderer\";\nimport { grep } from \"../../core/utils/common\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport { getWidth } from \"../../core/utils/size\";\nimport { isDefined, isEmptyObject, isPlainObject } from \"../../core/utils/type\";\nimport { defaultScreenFactorFunc, getWindow, hasWindow } from \"../../core/utils/window\";\nimport Box from \"../../ui/box\";\nimport CollectionWidget from \"../../ui/collection/ui.collection_widget.edit\";\nimport errors from \"../../ui/widget/ui.errors\";\nconst RESPONSIVE_BOX_CLASS = \"dx-responsivebox\";\nconst SCREEN_SIZE_CLASS_PREFIX = \"dx-responsivebox-screen-\";\nconst BOX_ITEM_CLASS = \"dx-box-item\";\nconst BOX_ITEM_DATA_KEY = \"dxBoxItemData\";\nconst HD_SCREEN_WIDTH = 1920;\nclass ResponsiveBox extends CollectionWidget {\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      rows: [],\n      cols: [],\n      screenByWidth: null,\n      singleColumnScreen: \"\",\n      height: \"100%\",\n      width: \"100%\",\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      onLayoutChanged: null\n    });\n  }\n  _init() {\n    if (!this.option(\"screenByWidth\")) {\n      this._options.silent(\"screenByWidth\", defaultScreenFactorFunc);\n    }\n    super._init();\n    this._initLayoutChangedAction();\n  }\n  _initLayoutChangedAction() {\n    this._layoutChangedAction = this._createActionByOption(\"onLayoutChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  }\n  _itemClass() {\n    return \"dx-box-item\";\n  }\n  _itemDataKey() {\n    return \"dxBoxItemData\";\n  }\n  _initMarkup() {\n    super._initMarkup();\n    this.$element().addClass(\"dx-responsivebox\");\n  }\n  _renderItems() {\n    this._setScreenSize();\n    this._screenItems = this._itemsByScreen();\n    this._prepareGrid();\n    this._spreadItems();\n    this._layoutItems();\n    this._linkNodeToItem();\n  }\n  _itemOptionChanged(item) {\n    const $item = this._findItemElementByItem(item);\n    if (!$item.length) {\n      return;\n    }\n    this._refreshItem($item, item);\n    this._clearItemNodeTemplates();\n    this._update(true);\n  }\n  _setScreenSize() {\n    const currentScreen = this._getCurrentScreen();\n    this._removeScreenSizeClass();\n    this.$element().addClass(SCREEN_SIZE_CLASS_PREFIX + currentScreen);\n    this.option(\"currentScreenFactor\", currentScreen);\n  }\n  _removeScreenSizeClass() {\n    const {\n      currentScreenFactor: currentScreenFactor\n    } = this.option();\n    if (currentScreenFactor) {\n      this.$element().removeClass(SCREEN_SIZE_CLASS_PREFIX + currentScreenFactor);\n    }\n  }\n  _prepareGrid() {\n    const grid = this._grid = [];\n    this._prepareRowsAndCols();\n    each(this._rows, () => {\n      const row = [];\n      grid.push(row);\n      each(this._cols, () => {\n        row.push(this._createEmptyCell());\n      });\n    });\n  }\n  getSingleColumnRows() {\n    const {\n      rows: rows\n    } = this.option();\n    const screenItemsLength = this._screenItems.length;\n    if (null !== rows && void 0 !== rows && rows.length) {\n      const filteredRows = this._filterByScreen(rows);\n      const result = [];\n      for (let i = 0; i < screenItemsLength; i++) {\n        const sizeConfig = this._defaultSizeConfig();\n        if (i < filteredRows.length && isDefined(filteredRows[i].shrink)) {\n          sizeConfig.shrink = filteredRows[i].shrink;\n        }\n        result.push(sizeConfig);\n      }\n      return result;\n    }\n    return this._defaultSizeConfig(screenItemsLength);\n  }\n  _prepareRowsAndCols() {\n    if (this._isSingleColumnScreen()) {\n      this._prepareSingleColumnScreenItems();\n      this._rows = this.getSingleColumnRows();\n      this._cols = this._defaultSizeConfig(1);\n    } else {\n      this._rows = this._sizesByScreen(this.option(\"rows\"));\n      this._cols = this._sizesByScreen(this.option(\"cols\"));\n    }\n  }\n  _isSingleColumnScreen() {\n    const {\n      singleColumnScreen: singleColumnScreen,\n      rows: rows,\n      cols: cols\n    } = this.option();\n    return this._screenRegExp().test(singleColumnScreen) || !(null !== rows && void 0 !== rows && rows.length) || !(null !== cols && void 0 !== cols && cols.length);\n  }\n  _prepareSingleColumnScreenItems() {\n    this._screenItems.sort((item1, item2) => item1.location.row - item2.location.row || item1.location.col - item2.location.col);\n    each(this._screenItems, (index, item) => {\n      extend(item.location, {\n        row: index,\n        col: 0,\n        rowspan: 1,\n        colspan: 1\n      });\n    });\n  }\n  _sizesByScreen(sizeConfigs) {\n    return map(this._filterByScreen(sizeConfigs), sizeConfig => extend(this._defaultSizeConfig(), sizeConfig));\n  }\n  _createDefaultSizeConfig() {\n    return {\n      ratio: 1,\n      baseSize: 0,\n      minSize: 0,\n      maxSize: 0\n    };\n  }\n  _defaultSizeConfig(size) {\n    const defaultSizeConfig = this._createDefaultSizeConfig();\n    if (!arguments.length) {\n      return defaultSizeConfig;\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n      result.push(defaultSizeConfig);\n    }\n    return result;\n  }\n  _filterByScreen(items) {\n    const screenRegExp = this._screenRegExp();\n    return grep(items, item => !item.screen || screenRegExp.test(item.screen));\n  }\n  _screenRegExp() {\n    const screen = this._getCurrentScreen();\n    return new RegExp(`(^|\\\\s)${screen}($|\\\\s)`, \"i\");\n  }\n  _getCurrentScreen() {\n    const width = this._screenWidth();\n    const {\n      screenByWidth: screenByWidth\n    } = this.option();\n    return null === screenByWidth || void 0 === screenByWidth ? void 0 : screenByWidth(width);\n  }\n  _screenWidth() {\n    return hasWindow() ? getWidth(getWindow()) : 1920;\n  }\n  _createEmptyCell() {\n    return {\n      item: {},\n      location: {\n        colspan: 1,\n        rowspan: 1\n      }\n    };\n  }\n  _spreadItems() {\n    each(this._screenItems, (_, itemInfo) => {\n      const location = itemInfo.location || {};\n      const itemCol = location.col;\n      const itemRow = location.row;\n      const row = this._grid[itemRow];\n      const itemCell = null === row || void 0 === row ? void 0 : row[itemCol];\n      this._occupyCells(itemCell, itemInfo);\n    });\n  }\n  _itemsByScreen() {\n    const {\n      items: items\n    } = this.option();\n    return null === items || void 0 === items ? void 0 : items.reduce((result, item) => {\n      let locations = item.location || {};\n      locations = isPlainObject(locations) ? [locations] : locations;\n      this._filterByScreen(locations).forEach(location => {\n        result.push({\n          item: item,\n          location: extend({\n            rowspan: 1,\n            colspan: 1\n          }, location)\n        });\n      });\n      return result;\n    }, []);\n  }\n  _occupyCells(itemCell, itemInfo) {\n    if (!itemCell || this._isItemCellOccupied(itemCell, itemInfo)) {\n      return;\n    }\n    extend(itemCell, itemInfo);\n    this._markSpanningCell(itemCell);\n  }\n  _isItemCellOccupied(itemCell, itemInfo) {\n    if (!isEmptyObject(itemCell.item)) {\n      return true;\n    }\n    let result = false;\n    this._loopOverSpanning(itemInfo.location, cell => {\n      result = result || !isEmptyObject(cell.item);\n    });\n    return result;\n  }\n  _loopOverSpanning(location, callback) {\n    const rowEnd = location.row + location.rowspan - 1;\n    const colEnd = location.col + location.colspan - 1;\n    const boundRowEnd = Math.min(rowEnd, this._rows.length - 1);\n    const boundColEnd = Math.min(colEnd, this._cols.length - 1);\n    location.rowspan -= rowEnd - boundRowEnd;\n    location.colspan -= colEnd - boundColEnd;\n    for (let rowIndex = location.row; rowIndex <= boundRowEnd; rowIndex++) {\n      for (let colIndex = location.col; colIndex <= boundColEnd; colIndex++) {\n        if (rowIndex !== location.row || colIndex !== location.col) {\n          callback(this._grid[rowIndex][colIndex]);\n        }\n      }\n    }\n  }\n  _markSpanningCell(itemCell) {\n    this._loopOverSpanning(itemCell.location, cell => {\n      extend(cell, {\n        item: itemCell.item,\n        spanningCell: itemCell\n      });\n    });\n  }\n  _linkNodeToItem() {\n    each(this._itemElements(), (_, itemNode) => {\n      const $item = $(itemNode);\n      const item = $item.data(\"dxBoxItemData\");\n      if (!item.box) {\n        item.node = $item.children();\n      }\n    });\n  }\n  _layoutItems() {\n    const rowsCount = this._grid.length;\n    const colsCount = rowsCount && this._grid[0].length;\n    if (!rowsCount && !colsCount) {\n      return;\n    }\n    const result = this._layoutBlock({\n      direction: \"col\",\n      row: {\n        start: 0,\n        end: rowsCount - 1\n      },\n      col: {\n        start: 0,\n        end: colsCount - 1\n      }\n    });\n    const rootBox = this._prepareBoxConfig(result.box || {\n      direction: \"row\",\n      items: [extend(result, {\n        ratio: 1\n      })]\n    });\n    extend(rootBox, this._rootBoxConfig(rootBox.items));\n    this._$root = $(\"<div>\").appendTo(this._itemContainer());\n    this._createComponent(this._$root, Box, rootBox);\n  }\n  _rootBoxConfig(items) {\n    const rootItems = each(items, (index, item) => {\n      this._needApplyAutoBaseSize(item) && extend(item, {\n        baseSize: \"auto\"\n      });\n    });\n    const {\n      itemHoldTimeout: itemHoldTimeout\n    } = this.option();\n    return {\n      width: \"100%\",\n      height: \"100%\",\n      items: rootItems,\n      itemTemplate: this._getTemplateByOption(\"itemTemplate\"),\n      itemHoldTimeout: itemHoldTimeout,\n      onItemHold: this._createActionByOption(\"onItemHold\"),\n      onItemClick: this._createActionByOption(\"onItemClick\"),\n      onItemContextMenu: this._createActionByOption(\"onItemContextMenu\"),\n      onItemRendered: this._createActionByOption(\"onItemRendered\")\n    };\n  }\n  _needApplyAutoBaseSize(item) {\n    return !item.baseSize && (!item.minSize || \"auto\" === item.minSize) && (!item.maxSize || \"auto\" === item.maxSize);\n  }\n  _prepareBoxConfig(config) {\n    return extend(config || {}, {\n      crossAlign: \"stretch\",\n      onItemStateChanged: this.option(\"onItemStateChanged\")\n    });\n  }\n  _layoutBlock(options) {\n    if (this._isSingleItem(options)) {\n      return this._itemByCell(options.row.start, options.col.start);\n    }\n    return this._layoutDirection(options);\n  }\n  _isSingleItem(options) {\n    const firstCellLocation = this._grid[options.row.start][options.col.start].location;\n    const isItemRowSpanned = options.row.end - options.row.start === firstCellLocation.rowspan - 1;\n    const isItemColSpanned = options.col.end - options.col.start === firstCellLocation.colspan - 1;\n    return isItemRowSpanned && isItemColSpanned;\n  }\n  _itemByCell(rowIndex, colIndex) {\n    const itemCell = this._grid[rowIndex][colIndex];\n    return itemCell.spanningCell ? null : itemCell.item;\n  }\n  _layoutDirection(options) {\n    const items = [];\n    const {\n      direction: direction\n    } = options;\n    const crossDirection = this._crossDirection(direction);\n    let block;\n    while (block = this._nextBlock(options)) {\n      if (this._isBlockIndivisible(options.prevBlockOptions, block)) {\n        throw errors.Error(\"E1025\");\n      }\n      const item = this._layoutBlock({\n        direction: crossDirection,\n        row: block.row,\n        col: block.col,\n        prevBlockOptions: options\n      });\n      if (item) {\n        extend(item, this._blockSize(block, crossDirection));\n        items.push(item);\n      }\n      options[crossDirection].start = block[crossDirection].end + 1;\n    }\n    return {\n      box: this._prepareBoxConfig({\n        direction: direction,\n        items: items\n      })\n    };\n  }\n  _isBlockIndivisible(options, block) {\n    return options && options.col.start === block.col.start && options.col.end === block.col.end && options.row.start === block.row.start && options.row.end === block.row.end;\n  }\n  _crossDirection(direction) {\n    return \"col\" === direction ? \"row\" : \"col\";\n  }\n  _nextBlock(options) {\n    const {\n      direction: direction\n    } = options;\n    const crossDirection = this._crossDirection(direction);\n    const startIndex = options[direction].start;\n    const endIndex = options[direction].end;\n    const crossStartIndex = options[crossDirection].start;\n    if (crossStartIndex > options[crossDirection].end) {\n      return null;\n    }\n    let crossSpan = 1;\n    for (let crossIndex = crossStartIndex; crossIndex < crossStartIndex + crossSpan; crossIndex++) {\n      let lineCrossSpan = 1;\n      for (let index = startIndex; index <= endIndex; index++) {\n        const cell = this._cellByDirection(direction, index, crossIndex);\n        lineCrossSpan = Math.max(lineCrossSpan, cell.location[`${crossDirection}span`]);\n      }\n      const lineCrossEndIndex = crossIndex + lineCrossSpan;\n      const crossEndIndex = crossStartIndex + crossSpan;\n      if (lineCrossEndIndex > crossEndIndex) {\n        crossSpan += lineCrossEndIndex - crossEndIndex;\n      }\n    }\n    const result = {};\n    result[direction] = {\n      start: startIndex,\n      end: endIndex\n    };\n    result[crossDirection] = {\n      start: crossStartIndex,\n      end: crossStartIndex + crossSpan - 1\n    };\n    return result;\n  }\n  _cellByDirection(direction, index, crossIndex) {\n    return \"col\" === direction ? this._grid[crossIndex][index] : this._grid[index][crossIndex];\n  }\n  _blockSize(block, direction) {\n    const defaultMinSize = \"row\" === direction ? \"auto\" : 0;\n    const sizeConfigs = \"row\" === direction ? this._rows : this._cols;\n    const result = extend(this._createDefaultSizeConfig(), {\n      ratio: 0\n    });\n    for (let index = block[direction].start; index <= block[direction].end; index++) {\n      const sizeConfig = sizeConfigs[index];\n      result.ratio += sizeConfig.ratio;\n      result.baseSize += sizeConfig.baseSize;\n      result.minSize += sizeConfig.minSize;\n      result.maxSize += sizeConfig.maxSize;\n      if (isDefined(sizeConfig.shrink)) {\n        result.shrink = sizeConfig.shrink;\n      }\n    }\n    result.minSize = result.minSize ? result.minSize : defaultMinSize;\n    result.maxSize = result.maxSize ? result.maxSize : \"auto\";\n    this._isSingleColumnScreen() && (result.baseSize = \"auto\");\n    return result;\n  }\n  _update(forceRemoveRoot) {\n    var _this$_layoutChangedA;\n    const $existingRoot = this._$root;\n    this._renderItems();\n    if ($existingRoot) {\n      if (forceRemoveRoot) {\n        $existingRoot.remove();\n      } else {\n        $existingRoot.detach();\n        this._saveAssistantRoot($existingRoot);\n      }\n    }\n    null === (_this$_layoutChangedA = this._layoutChangedAction) || void 0 === _this$_layoutChangedA || _this$_layoutChangedA.call(this);\n  }\n  _saveAssistantRoot($root) {\n    this._assistantRoots = this._assistantRoots || [];\n    this._assistantRoots.push($root);\n  }\n  _dispose() {\n    this._clearItemNodeTemplates();\n    this._cleanUnusedRoots();\n    super._dispose.apply(this, arguments);\n  }\n  _cleanUnusedRoots() {\n    if (!this._assistantRoots) {\n      return;\n    }\n    each(this._assistantRoots, (_, item) => {\n      $(item).remove();\n    });\n  }\n  _clearItemNodeTemplates() {\n    each(this.option(\"items\"), function () {\n      delete this.node;\n    });\n  }\n  _attachClickEvent() {}\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"rows\":\n      case \"cols\":\n      case \"screenByWidth\":\n      case \"singleColumnScreen\":\n        this._clearItemNodeTemplates();\n        this._invalidate();\n        break;\n      case \"width\":\n      case \"height\":\n        super._optionChanged(args);\n        this._update();\n        break;\n      case \"onLayoutChanged\":\n        this._initLayoutChangedAction();\n        break;\n      case \"itemTemplate\":\n        this._clearItemNodeTemplates();\n        super._optionChanged(args);\n        break;\n      case \"currentScreenFactor\":\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _dimensionChanged() {\n    if (this._getCurrentScreen() !== this.option(\"currentScreenFactor\")) {\n      this._update();\n    }\n  }\n  repaint() {\n    this._update();\n  }\n}\nregisterComponent(\"dxResponsiveBox\", ResponsiveBox);\nexport default ResponsiveBox;","map":{"version":3,"names":["_extends","registerComponent","$","grep","extend","each","map","getWidth","isDefined","isEmptyObject","isPlainObject","defaultScreenFactorFunc","getWindow","hasWindow","Box","CollectionWidget","errors","RESPONSIVE_BOX_CLASS","SCREEN_SIZE_CLASS_PREFIX","BOX_ITEM_CLASS","BOX_ITEM_DATA_KEY","HD_SCREEN_WIDTH","ResponsiveBox","_getDefaultOptions","rows","cols","screenByWidth","singleColumnScreen","height","width","activeStateEnabled","focusStateEnabled","onLayoutChanged","_init","option","_options","silent","_initLayoutChangedAction","_layoutChangedAction","_createActionByOption","excludeValidators","_itemClass","_itemDataKey","_initMarkup","$element","addClass","_renderItems","_setScreenSize","_screenItems","_itemsByScreen","_prepareGrid","_spreadItems","_layoutItems","_linkNodeToItem","_itemOptionChanged","item","$item","_findItemElementByItem","length","_refreshItem","_clearItemNodeTemplates","_update","currentScreen","_getCurrentScreen","_removeScreenSizeClass","currentScreenFactor","removeClass","grid","_grid","_prepareRowsAndCols","_rows","row","push","_cols","_createEmptyCell","getSingleColumnRows","screenItemsLength","filteredRows","_filterByScreen","result","i","sizeConfig","_defaultSizeConfig","shrink","_isSingleColumnScreen","_prepareSingleColumnScreenItems","_sizesByScreen","_screenRegExp","test","sort","item1","item2","location","col","index","rowspan","colspan","sizeConfigs","_createDefaultSizeConfig","ratio","baseSize","minSize","maxSize","size","defaultSizeConfig","arguments","items","screenRegExp","screen","RegExp","_screenWidth","_","itemInfo","itemCol","itemRow","itemCell","_occupyCells","reduce","locations","forEach","_isItemCellOccupied","_markSpanningCell","_loopOverSpanning","cell","callback","rowEnd","colEnd","boundRowEnd","Math","min","boundColEnd","rowIndex","colIndex","spanningCell","_itemElements","itemNode","data","box","node","children","rowsCount","colsCount","_layoutBlock","direction","start","end","rootBox","_prepareBoxConfig","_rootBoxConfig","_$root","appendTo","_itemContainer","_createComponent","rootItems","_needApplyAutoBaseSize","itemHoldTimeout","itemTemplate","_getTemplateByOption","onItemHold","onItemClick","onItemContextMenu","onItemRendered","config","crossAlign","onItemStateChanged","options","_isSingleItem","_itemByCell","_layoutDirection","firstCellLocation","isItemRowSpanned","isItemColSpanned","crossDirection","_crossDirection","block","_nextBlock","_isBlockIndivisible","prevBlockOptions","Error","_blockSize","startIndex","endIndex","crossStartIndex","crossSpan","crossIndex","lineCrossSpan","_cellByDirection","max","lineCrossEndIndex","crossEndIndex","defaultMinSize","forceRemoveRoot","_this$_layoutChangedA","$existingRoot","remove","detach","_saveAssistantRoot","call","$root","_assistantRoots","_dispose","_cleanUnusedRoots","apply","_attachClickEvent","_optionChanged","args","name","_invalidate","_dimensionChanged","repaint"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/m_responsive_box.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/m_responsive_box.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    grep\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isPlainObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    defaultScreenFactorFunc,\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport Box from \"../../ui/box\";\r\nimport CollectionWidget from \"../../ui/collection/ui.collection_widget.edit\";\r\nimport errors from \"../../ui/widget/ui.errors\";\r\nconst RESPONSIVE_BOX_CLASS = \"dx-responsivebox\";\r\nconst SCREEN_SIZE_CLASS_PREFIX = \"dx-responsivebox-screen-\";\r\nconst BOX_ITEM_CLASS = \"dx-box-item\";\r\nconst BOX_ITEM_DATA_KEY = \"dxBoxItemData\";\r\nconst HD_SCREEN_WIDTH = 1920;\r\nclass ResponsiveBox extends CollectionWidget {\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            rows: [],\r\n            cols: [],\r\n            screenByWidth: null,\r\n            singleColumnScreen: \"\",\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            activeStateEnabled: false,\r\n            focusStateEnabled: false,\r\n            onLayoutChanged: null\r\n        })\r\n    }\r\n    _init() {\r\n        if (!this.option(\"screenByWidth\")) {\r\n            this._options.silent(\"screenByWidth\", defaultScreenFactorFunc)\r\n        }\r\n        super._init();\r\n        this._initLayoutChangedAction()\r\n    }\r\n    _initLayoutChangedAction() {\r\n        this._layoutChangedAction = this._createActionByOption(\"onLayoutChanged\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        })\r\n    }\r\n    _itemClass() {\r\n        return \"dx-box-item\"\r\n    }\r\n    _itemDataKey() {\r\n        return \"dxBoxItemData\"\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this.$element().addClass(\"dx-responsivebox\")\r\n    }\r\n    _renderItems() {\r\n        this._setScreenSize();\r\n        this._screenItems = this._itemsByScreen();\r\n        this._prepareGrid();\r\n        this._spreadItems();\r\n        this._layoutItems();\r\n        this._linkNodeToItem()\r\n    }\r\n    _itemOptionChanged(item) {\r\n        const $item = this._findItemElementByItem(item);\r\n        if (!$item.length) {\r\n            return\r\n        }\r\n        this._refreshItem($item, item);\r\n        this._clearItemNodeTemplates();\r\n        this._update(true)\r\n    }\r\n    _setScreenSize() {\r\n        const currentScreen = this._getCurrentScreen();\r\n        this._removeScreenSizeClass();\r\n        this.$element().addClass(SCREEN_SIZE_CLASS_PREFIX + currentScreen);\r\n        this.option(\"currentScreenFactor\", currentScreen)\r\n    }\r\n    _removeScreenSizeClass() {\r\n        const {\r\n            currentScreenFactor: currentScreenFactor\r\n        } = this.option();\r\n        if (currentScreenFactor) {\r\n            this.$element().removeClass(SCREEN_SIZE_CLASS_PREFIX + currentScreenFactor)\r\n        }\r\n    }\r\n    _prepareGrid() {\r\n        const grid = this._grid = [];\r\n        this._prepareRowsAndCols();\r\n        each(this._rows, (() => {\r\n            const row = [];\r\n            grid.push(row);\r\n            each(this._cols, (() => {\r\n                row.push(this._createEmptyCell())\r\n            }))\r\n        }))\r\n    }\r\n    getSingleColumnRows() {\r\n        const {\r\n            rows: rows\r\n        } = this.option();\r\n        const screenItemsLength = this._screenItems.length;\r\n        if (null !== rows && void 0 !== rows && rows.length) {\r\n            const filteredRows = this._filterByScreen(rows);\r\n            const result = [];\r\n            for (let i = 0; i < screenItemsLength; i++) {\r\n                const sizeConfig = this._defaultSizeConfig();\r\n                if (i < filteredRows.length && isDefined(filteredRows[i].shrink)) {\r\n                    sizeConfig.shrink = filteredRows[i].shrink\r\n                }\r\n                result.push(sizeConfig)\r\n            }\r\n            return result\r\n        }\r\n        return this._defaultSizeConfig(screenItemsLength)\r\n    }\r\n    _prepareRowsAndCols() {\r\n        if (this._isSingleColumnScreen()) {\r\n            this._prepareSingleColumnScreenItems();\r\n            this._rows = this.getSingleColumnRows();\r\n            this._cols = this._defaultSizeConfig(1)\r\n        } else {\r\n            this._rows = this._sizesByScreen(this.option(\"rows\"));\r\n            this._cols = this._sizesByScreen(this.option(\"cols\"))\r\n        }\r\n    }\r\n    _isSingleColumnScreen() {\r\n        const {\r\n            singleColumnScreen: singleColumnScreen,\r\n            rows: rows,\r\n            cols: cols\r\n        } = this.option();\r\n        return this._screenRegExp().test(singleColumnScreen) || !(null !== rows && void 0 !== rows && rows.length) || !(null !== cols && void 0 !== cols && cols.length)\r\n    }\r\n    _prepareSingleColumnScreenItems() {\r\n        this._screenItems.sort(((item1, item2) => item1.location.row - item2.location.row || item1.location.col - item2.location.col));\r\n        each(this._screenItems, ((index, item) => {\r\n            extend(item.location, {\r\n                row: index,\r\n                col: 0,\r\n                rowspan: 1,\r\n                colspan: 1\r\n            })\r\n        }))\r\n    }\r\n    _sizesByScreen(sizeConfigs) {\r\n        return map(this._filterByScreen(sizeConfigs), (sizeConfig => extend(this._defaultSizeConfig(), sizeConfig)))\r\n    }\r\n    _createDefaultSizeConfig() {\r\n        return {\r\n            ratio: 1,\r\n            baseSize: 0,\r\n            minSize: 0,\r\n            maxSize: 0\r\n        }\r\n    }\r\n    _defaultSizeConfig(size) {\r\n        const defaultSizeConfig = this._createDefaultSizeConfig();\r\n        if (!arguments.length) {\r\n            return defaultSizeConfig\r\n        }\r\n        const result = [];\r\n        for (let i = 0; i < size; i++) {\r\n            result.push(defaultSizeConfig)\r\n        }\r\n        return result\r\n    }\r\n    _filterByScreen(items) {\r\n        const screenRegExp = this._screenRegExp();\r\n        return grep(items, (item => !item.screen || screenRegExp.test(item.screen)))\r\n    }\r\n    _screenRegExp() {\r\n        const screen = this._getCurrentScreen();\r\n        return new RegExp(`(^|\\\\s)${screen}($|\\\\s)`, \"i\")\r\n    }\r\n    _getCurrentScreen() {\r\n        const width = this._screenWidth();\r\n        const {\r\n            screenByWidth: screenByWidth\r\n        } = this.option();\r\n        return null === screenByWidth || void 0 === screenByWidth ? void 0 : screenByWidth(width)\r\n    }\r\n    _screenWidth() {\r\n        return hasWindow() ? getWidth(getWindow()) : 1920\r\n    }\r\n    _createEmptyCell() {\r\n        return {\r\n            item: {},\r\n            location: {\r\n                colspan: 1,\r\n                rowspan: 1\r\n            }\r\n        }\r\n    }\r\n    _spreadItems() {\r\n        each(this._screenItems, ((_, itemInfo) => {\r\n            const location = itemInfo.location || {};\r\n            const itemCol = location.col;\r\n            const itemRow = location.row;\r\n            const row = this._grid[itemRow];\r\n            const itemCell = null === row || void 0 === row ? void 0 : row[itemCol];\r\n            this._occupyCells(itemCell, itemInfo)\r\n        }))\r\n    }\r\n    _itemsByScreen() {\r\n        const {\r\n            items: items\r\n        } = this.option();\r\n        return null === items || void 0 === items ? void 0 : items.reduce(((result, item) => {\r\n            let locations = item.location || {};\r\n            locations = isPlainObject(locations) ? [locations] : locations;\r\n            this._filterByScreen(locations).forEach((location => {\r\n                result.push({\r\n                    item: item,\r\n                    location: extend({\r\n                        rowspan: 1,\r\n                        colspan: 1\r\n                    }, location)\r\n                })\r\n            }));\r\n            return result\r\n        }), [])\r\n    }\r\n    _occupyCells(itemCell, itemInfo) {\r\n        if (!itemCell || this._isItemCellOccupied(itemCell, itemInfo)) {\r\n            return\r\n        }\r\n        extend(itemCell, itemInfo);\r\n        this._markSpanningCell(itemCell)\r\n    }\r\n    _isItemCellOccupied(itemCell, itemInfo) {\r\n        if (!isEmptyObject(itemCell.item)) {\r\n            return true\r\n        }\r\n        let result = false;\r\n        this._loopOverSpanning(itemInfo.location, (cell => {\r\n            result = result || !isEmptyObject(cell.item)\r\n        }));\r\n        return result\r\n    }\r\n    _loopOverSpanning(location, callback) {\r\n        const rowEnd = location.row + location.rowspan - 1;\r\n        const colEnd = location.col + location.colspan - 1;\r\n        const boundRowEnd = Math.min(rowEnd, this._rows.length - 1);\r\n        const boundColEnd = Math.min(colEnd, this._cols.length - 1);\r\n        location.rowspan -= rowEnd - boundRowEnd;\r\n        location.colspan -= colEnd - boundColEnd;\r\n        for (let rowIndex = location.row; rowIndex <= boundRowEnd; rowIndex++) {\r\n            for (let colIndex = location.col; colIndex <= boundColEnd; colIndex++) {\r\n                if (rowIndex !== location.row || colIndex !== location.col) {\r\n                    callback(this._grid[rowIndex][colIndex])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _markSpanningCell(itemCell) {\r\n        this._loopOverSpanning(itemCell.location, (cell => {\r\n            extend(cell, {\r\n                item: itemCell.item,\r\n                spanningCell: itemCell\r\n            })\r\n        }))\r\n    }\r\n    _linkNodeToItem() {\r\n        each(this._itemElements(), ((_, itemNode) => {\r\n            const $item = $(itemNode);\r\n            const item = $item.data(\"dxBoxItemData\");\r\n            if (!item.box) {\r\n                item.node = $item.children()\r\n            }\r\n        }))\r\n    }\r\n    _layoutItems() {\r\n        const rowsCount = this._grid.length;\r\n        const colsCount = rowsCount && this._grid[0].length;\r\n        if (!rowsCount && !colsCount) {\r\n            return\r\n        }\r\n        const result = this._layoutBlock({\r\n            direction: \"col\",\r\n            row: {\r\n                start: 0,\r\n                end: rowsCount - 1\r\n            },\r\n            col: {\r\n                start: 0,\r\n                end: colsCount - 1\r\n            }\r\n        });\r\n        const rootBox = this._prepareBoxConfig(result.box || {\r\n            direction: \"row\",\r\n            items: [extend(result, {\r\n                ratio: 1\r\n            })]\r\n        });\r\n        extend(rootBox, this._rootBoxConfig(rootBox.items));\r\n        this._$root = $(\"<div>\").appendTo(this._itemContainer());\r\n        this._createComponent(this._$root, Box, rootBox)\r\n    }\r\n    _rootBoxConfig(items) {\r\n        const rootItems = each(items, ((index, item) => {\r\n            this._needApplyAutoBaseSize(item) && extend(item, {\r\n                baseSize: \"auto\"\r\n            })\r\n        }));\r\n        const {\r\n            itemHoldTimeout: itemHoldTimeout\r\n        } = this.option();\r\n        return {\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            items: rootItems,\r\n            itemTemplate: this._getTemplateByOption(\"itemTemplate\"),\r\n            itemHoldTimeout: itemHoldTimeout,\r\n            onItemHold: this._createActionByOption(\"onItemHold\"),\r\n            onItemClick: this._createActionByOption(\"onItemClick\"),\r\n            onItemContextMenu: this._createActionByOption(\"onItemContextMenu\"),\r\n            onItemRendered: this._createActionByOption(\"onItemRendered\")\r\n        }\r\n    }\r\n    _needApplyAutoBaseSize(item) {\r\n        return !item.baseSize && (!item.minSize || \"auto\" === item.minSize) && (!item.maxSize || \"auto\" === item.maxSize)\r\n    }\r\n    _prepareBoxConfig(config) {\r\n        return extend(config || {}, {\r\n            crossAlign: \"stretch\",\r\n            onItemStateChanged: this.option(\"onItemStateChanged\")\r\n        })\r\n    }\r\n    _layoutBlock(options) {\r\n        if (this._isSingleItem(options)) {\r\n            return this._itemByCell(options.row.start, options.col.start)\r\n        }\r\n        return this._layoutDirection(options)\r\n    }\r\n    _isSingleItem(options) {\r\n        const firstCellLocation = this._grid[options.row.start][options.col.start].location;\r\n        const isItemRowSpanned = options.row.end - options.row.start === firstCellLocation.rowspan - 1;\r\n        const isItemColSpanned = options.col.end - options.col.start === firstCellLocation.colspan - 1;\r\n        return isItemRowSpanned && isItemColSpanned\r\n    }\r\n    _itemByCell(rowIndex, colIndex) {\r\n        const itemCell = this._grid[rowIndex][colIndex];\r\n        return itemCell.spanningCell ? null : itemCell.item\r\n    }\r\n    _layoutDirection(options) {\r\n        const items = [];\r\n        const {\r\n            direction: direction\r\n        } = options;\r\n        const crossDirection = this._crossDirection(direction);\r\n        let block;\r\n        while (block = this._nextBlock(options)) {\r\n            if (this._isBlockIndivisible(options.prevBlockOptions, block)) {\r\n                throw errors.Error(\"E1025\")\r\n            }\r\n            const item = this._layoutBlock({\r\n                direction: crossDirection,\r\n                row: block.row,\r\n                col: block.col,\r\n                prevBlockOptions: options\r\n            });\r\n            if (item) {\r\n                extend(item, this._blockSize(block, crossDirection));\r\n                items.push(item)\r\n            }\r\n            options[crossDirection].start = block[crossDirection].end + 1\r\n        }\r\n        return {\r\n            box: this._prepareBoxConfig({\r\n                direction: direction,\r\n                items: items\r\n            })\r\n        }\r\n    }\r\n    _isBlockIndivisible(options, block) {\r\n        return options && options.col.start === block.col.start && options.col.end === block.col.end && options.row.start === block.row.start && options.row.end === block.row.end\r\n    }\r\n    _crossDirection(direction) {\r\n        return \"col\" === direction ? \"row\" : \"col\"\r\n    }\r\n    _nextBlock(options) {\r\n        const {\r\n            direction: direction\r\n        } = options;\r\n        const crossDirection = this._crossDirection(direction);\r\n        const startIndex = options[direction].start;\r\n        const endIndex = options[direction].end;\r\n        const crossStartIndex = options[crossDirection].start;\r\n        if (crossStartIndex > options[crossDirection].end) {\r\n            return null\r\n        }\r\n        let crossSpan = 1;\r\n        for (let crossIndex = crossStartIndex; crossIndex < crossStartIndex + crossSpan; crossIndex++) {\r\n            let lineCrossSpan = 1;\r\n            for (let index = startIndex; index <= endIndex; index++) {\r\n                const cell = this._cellByDirection(direction, index, crossIndex);\r\n                lineCrossSpan = Math.max(lineCrossSpan, cell.location[`${crossDirection}span`])\r\n            }\r\n            const lineCrossEndIndex = crossIndex + lineCrossSpan;\r\n            const crossEndIndex = crossStartIndex + crossSpan;\r\n            if (lineCrossEndIndex > crossEndIndex) {\r\n                crossSpan += lineCrossEndIndex - crossEndIndex\r\n            }\r\n        }\r\n        const result = {};\r\n        result[direction] = {\r\n            start: startIndex,\r\n            end: endIndex\r\n        };\r\n        result[crossDirection] = {\r\n            start: crossStartIndex,\r\n            end: crossStartIndex + crossSpan - 1\r\n        };\r\n        return result\r\n    }\r\n    _cellByDirection(direction, index, crossIndex) {\r\n        return \"col\" === direction ? this._grid[crossIndex][index] : this._grid[index][crossIndex]\r\n    }\r\n    _blockSize(block, direction) {\r\n        const defaultMinSize = \"row\" === direction ? \"auto\" : 0;\r\n        const sizeConfigs = \"row\" === direction ? this._rows : this._cols;\r\n        const result = extend(this._createDefaultSizeConfig(), {\r\n            ratio: 0\r\n        });\r\n        for (let index = block[direction].start; index <= block[direction].end; index++) {\r\n            const sizeConfig = sizeConfigs[index];\r\n            result.ratio += sizeConfig.ratio;\r\n            result.baseSize += sizeConfig.baseSize;\r\n            result.minSize += sizeConfig.minSize;\r\n            result.maxSize += sizeConfig.maxSize;\r\n            if (isDefined(sizeConfig.shrink)) {\r\n                result.shrink = sizeConfig.shrink\r\n            }\r\n        }\r\n        result.minSize = result.minSize ? result.minSize : defaultMinSize;\r\n        result.maxSize = result.maxSize ? result.maxSize : \"auto\";\r\n        this._isSingleColumnScreen() && (result.baseSize = \"auto\");\r\n        return result\r\n    }\r\n    _update(forceRemoveRoot) {\r\n        var _this$_layoutChangedA;\r\n        const $existingRoot = this._$root;\r\n        this._renderItems();\r\n        if ($existingRoot) {\r\n            if (forceRemoveRoot) {\r\n                $existingRoot.remove()\r\n            } else {\r\n                $existingRoot.detach();\r\n                this._saveAssistantRoot($existingRoot)\r\n            }\r\n        }\r\n        null === (_this$_layoutChangedA = this._layoutChangedAction) || void 0 === _this$_layoutChangedA || _this$_layoutChangedA.call(this)\r\n    }\r\n    _saveAssistantRoot($root) {\r\n        this._assistantRoots = this._assistantRoots || [];\r\n        this._assistantRoots.push($root)\r\n    }\r\n    _dispose() {\r\n        this._clearItemNodeTemplates();\r\n        this._cleanUnusedRoots();\r\n        super._dispose.apply(this, arguments)\r\n    }\r\n    _cleanUnusedRoots() {\r\n        if (!this._assistantRoots) {\r\n            return\r\n        }\r\n        each(this._assistantRoots, ((_, item) => {\r\n            $(item).remove()\r\n        }))\r\n    }\r\n    _clearItemNodeTemplates() {\r\n        each(this.option(\"items\"), (function() {\r\n            delete this.node\r\n        }))\r\n    }\r\n    _attachClickEvent() {}\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"rows\":\r\n            case \"cols\":\r\n            case \"screenByWidth\":\r\n            case \"singleColumnScreen\":\r\n                this._clearItemNodeTemplates();\r\n                this._invalidate();\r\n                break;\r\n            case \"width\":\r\n            case \"height\":\r\n                super._optionChanged(args);\r\n                this._update();\r\n                break;\r\n            case \"onLayoutChanged\":\r\n                this._initLayoutChangedAction();\r\n                break;\r\n            case \"itemTemplate\":\r\n                this._clearItemNodeTemplates();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"currentScreenFactor\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _dimensionChanged() {\r\n        if (this._getCurrentScreen() !== this.option(\"currentScreenFactor\")) {\r\n            this._update()\r\n        }\r\n    }\r\n    repaint() {\r\n        this._update()\r\n    }\r\n}\r\nregisterComponent(\"dxResponsiveBox\", ResponsiveBox);\r\nexport default ResponsiveBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}