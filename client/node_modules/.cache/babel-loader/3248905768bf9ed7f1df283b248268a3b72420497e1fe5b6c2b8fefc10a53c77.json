{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/hierarchical_collection/m_data_converter.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../../../core/class\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isDefined, isPrimitive } from \"../../../core/utils/type\";\nimport errors from \"../../../ui/widget/ui.errors\";\nconst DataConverter = Class.inherit({\n  ctor() {\n    this._dataStructure = [];\n    this._itemsCount = 0;\n    this._visibleItemsCount = 0;\n  },\n  _indexByKey: {},\n  _convertItemsToNodes(items, parentKey) {\n    const that = this;\n    each(items, (_, item) => {\n      const parentId = isDefined(parentKey) ? parentKey : that._getParentId(item);\n      const node = that._convertItemToNode(item, parentId);\n      that._dataStructure.push(node);\n      that._checkForDuplicateId(node.internalFields.key);\n      that._indexByKey[node.internalFields.key] = that._dataStructure.length - 1;\n      if (that._itemHasChildren(item)) {\n        that._convertItemsToNodes(that._dataAccessors.getters.items(item), node.internalFields.key);\n      }\n    });\n  },\n  _checkForDuplicateId(key) {\n    if (isDefined(this._indexByKey[key])) {\n      throw errors.Error(\"E1040\", key);\n    }\n  },\n  _getParentId(item) {\n    return \"plain\" === this._dataType ? this._dataAccessors.getters.parentKey(item) : void 0;\n  },\n  _itemHasChildren(item) {\n    if (\"plain\" === this._dataType) {\n      return;\n    }\n    const items = this._dataAccessors.getters.items(item);\n    return items && items.length;\n  },\n  _getUniqueKey(item) {\n    const keyGetter = this._dataAccessors.getters.key;\n    const itemKey = keyGetter(item);\n    const isCorrectKey = keyGetter && (itemKey || 0 === itemKey) && isPrimitive(itemKey);\n    return isCorrectKey ? itemKey : this.getItemsCount();\n  },\n  _convertItemToNode(item, parentKey) {\n    this._itemsCount++;\n    false !== item.visible && this._visibleItemsCount++;\n    const node = {\n      internalFields: {\n        disabled: this._dataAccessors.getters.disabled(item, {\n          defaultValue: false\n        }),\n        expanded: this._dataAccessors.getters.expanded(item, {\n          defaultValue: false\n        }),\n        selected: this._dataAccessors.getters.selected(item, {\n          defaultValue: false\n        }),\n        key: this._getUniqueKey(item),\n        parentKey: isDefined(parentKey) ? parentKey : this._rootValue,\n        item: this._makeObjectFromPrimitive(item),\n        childrenKeys: []\n      }\n    };\n    extend(node, item);\n    delete node.items;\n    return node;\n  },\n  setChildrenKeys() {\n    const that = this;\n    each(this._dataStructure, (_, node) => {\n      if (node.internalFields.parentKey === that._rootValue) {\n        return;\n      }\n      const parent = that.getParentNode(node);\n      parent && parent.internalFields.childrenKeys.push(node.internalFields.key);\n    });\n  },\n  _makeObjectFromPrimitive(item) {\n    if (isPrimitive(item)) {\n      const key = item;\n      item = {};\n      this._dataAccessors.setters.key(item, key);\n    }\n    return item;\n  },\n  _convertToPublicNode(node, parent) {\n    if (!node) {\n      return null;\n    }\n    const publicNode = {\n      text: this._dataAccessors.getters.display(node),\n      key: node.internalFields.key,\n      selected: node.internalFields.selected,\n      expanded: node.internalFields.expanded,\n      disabled: node.internalFields.disabled,\n      parent: parent || null,\n      itemData: node.internalFields.item,\n      children: [],\n      items: []\n    };\n    if (publicNode.parent) {\n      publicNode.parent.children.push(publicNode);\n      publicNode.parent.items.push(publicNode);\n    }\n    return publicNode;\n  },\n  convertToPublicNodes(data, parent) {\n    if (!data.length) {\n      return [];\n    }\n    const that = this;\n    const publicNodes = [];\n    each(data, (_, node) => {\n      node = isPrimitive(node) ? that._getByKey(node) : node;\n      const publicNode = that._convertToPublicNode(node, parent);\n      publicNode.children = that.convertToPublicNodes(node.internalFields.childrenKeys, publicNode);\n      publicNodes.push(publicNode);\n      node.internalFields.publicNode = publicNode;\n    });\n    return publicNodes;\n  },\n  setDataAccessors(accessors) {\n    this._dataAccessors = accessors;\n  },\n  _getByKey(key) {\n    return this._dataStructure[this.getIndexByKey(key)] || null;\n  },\n  getParentNode(node) {\n    return this._getByKey(node.internalFields.parentKey);\n  },\n  getByKey(data, key) {\n    if (null === key || void 0 === key) {\n      return null;\n    }\n    let result = null;\n    const that = this;\n    return function (data, key) {\n      each(data, (_, element) => {\n        const currentElementKey = element.internalFields && element.internalFields.key || that._dataAccessors.getters.key(element);\n        if (currentElementKey.toString() === key.toString()) {\n          result = element;\n          return false;\n        }\n      });\n      return result;\n    }(data, key);\n  },\n  getItemsCount() {\n    return this._itemsCount;\n  },\n  getVisibleItemsCount() {\n    return this._visibleItemsCount;\n  },\n  updateIndexByKey() {\n    const that = this;\n    this._indexByKey = {};\n    each(this._dataStructure, (index, node) => {\n      that._checkForDuplicateId(node.internalFields.key);\n      that._indexByKey[node.internalFields.key] = index;\n    });\n  },\n  updateChildrenKeys() {\n    this._indexByKey = {};\n    this.removeChildrenKeys();\n    this.updateIndexByKey();\n    this.setChildrenKeys();\n  },\n  removeChildrenKeys() {\n    this._indexByKey = {};\n    each(this._dataStructure, (index, node) => {\n      node.internalFields.childrenKeys = [];\n    });\n  },\n  getIndexByKey(key) {\n    return this._indexByKey[key];\n  },\n  createPlainStructure(items, rootValue, dataType) {\n    this._itemsCount = 0;\n    this._visibleItemsCount = 0;\n    this._rootValue = rootValue;\n    this._dataType = dataType;\n    this._indexByKey = {};\n    this._convertItemsToNodes(items);\n    this.setChildrenKeys();\n    return this._dataStructure;\n  }\n});\nexport default DataConverter;","map":{"version":3,"names":["Class","extend","each","isDefined","isPrimitive","errors","DataConverter","inherit","ctor","_dataStructure","_itemsCount","_visibleItemsCount","_indexByKey","_convertItemsToNodes","items","parentKey","that","_","item","parentId","_getParentId","node","_convertItemToNode","push","_checkForDuplicateId","internalFields","key","length","_itemHasChildren","_dataAccessors","getters","Error","_dataType","_getUniqueKey","keyGetter","itemKey","isCorrectKey","getItemsCount","visible","disabled","defaultValue","expanded","selected","_rootValue","_makeObjectFromPrimitive","childrenKeys","setChildrenKeys","parent","getParentNode","setters","_convertToPublicNode","publicNode","text","display","itemData","children","convertToPublicNodes","data","publicNodes","_getByKey","setDataAccessors","accessors","getIndexByKey","getByKey","result","element","currentElementKey","toString","getVisibleItemsCount","updateIndexByKey","index","updateChildrenKeys","removeChildrenKeys","createPlainStructure","rootValue","dataType"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/hierarchical_collection/m_data_converter.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/hierarchical_collection/m_data_converter.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Class from \"../../../core/class\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isPrimitive\r\n} from \"../../../core/utils/type\";\r\nimport errors from \"../../../ui/widget/ui.errors\";\r\nconst DataConverter = Class.inherit({\r\n    ctor() {\r\n        this._dataStructure = [];\r\n        this._itemsCount = 0;\r\n        this._visibleItemsCount = 0\r\n    },\r\n    _indexByKey: {},\r\n    _convertItemsToNodes(items, parentKey) {\r\n        const that = this;\r\n        each(items, ((_, item) => {\r\n            const parentId = isDefined(parentKey) ? parentKey : that._getParentId(item);\r\n            const node = that._convertItemToNode(item, parentId);\r\n            that._dataStructure.push(node);\r\n            that._checkForDuplicateId(node.internalFields.key);\r\n            that._indexByKey[node.internalFields.key] = that._dataStructure.length - 1;\r\n            if (that._itemHasChildren(item)) {\r\n                that._convertItemsToNodes(that._dataAccessors.getters.items(item), node.internalFields.key)\r\n            }\r\n        }))\r\n    },\r\n    _checkForDuplicateId(key) {\r\n        if (isDefined(this._indexByKey[key])) {\r\n            throw errors.Error(\"E1040\", key)\r\n        }\r\n    },\r\n    _getParentId(item) {\r\n        return \"plain\" === this._dataType ? this._dataAccessors.getters.parentKey(item) : void 0\r\n    },\r\n    _itemHasChildren(item) {\r\n        if (\"plain\" === this._dataType) {\r\n            return\r\n        }\r\n        const items = this._dataAccessors.getters.items(item);\r\n        return items && items.length\r\n    },\r\n    _getUniqueKey(item) {\r\n        const keyGetter = this._dataAccessors.getters.key;\r\n        const itemKey = keyGetter(item);\r\n        const isCorrectKey = keyGetter && (itemKey || 0 === itemKey) && isPrimitive(itemKey);\r\n        return isCorrectKey ? itemKey : this.getItemsCount()\r\n    },\r\n    _convertItemToNode(item, parentKey) {\r\n        this._itemsCount++;\r\n        false !== item.visible && this._visibleItemsCount++;\r\n        const node = {\r\n            internalFields: {\r\n                disabled: this._dataAccessors.getters.disabled(item, {\r\n                    defaultValue: false\r\n                }),\r\n                expanded: this._dataAccessors.getters.expanded(item, {\r\n                    defaultValue: false\r\n                }),\r\n                selected: this._dataAccessors.getters.selected(item, {\r\n                    defaultValue: false\r\n                }),\r\n                key: this._getUniqueKey(item),\r\n                parentKey: isDefined(parentKey) ? parentKey : this._rootValue,\r\n                item: this._makeObjectFromPrimitive(item),\r\n                childrenKeys: []\r\n            }\r\n        };\r\n        extend(node, item);\r\n        delete node.items;\r\n        return node\r\n    },\r\n    setChildrenKeys() {\r\n        const that = this;\r\n        each(this._dataStructure, ((_, node) => {\r\n            if (node.internalFields.parentKey === that._rootValue) {\r\n                return\r\n            }\r\n            const parent = that.getParentNode(node);\r\n            parent && parent.internalFields.childrenKeys.push(node.internalFields.key)\r\n        }))\r\n    },\r\n    _makeObjectFromPrimitive(item) {\r\n        if (isPrimitive(item)) {\r\n            const key = item;\r\n            item = {};\r\n            this._dataAccessors.setters.key(item, key)\r\n        }\r\n        return item\r\n    },\r\n    _convertToPublicNode(node, parent) {\r\n        if (!node) {\r\n            return null\r\n        }\r\n        const publicNode = {\r\n            text: this._dataAccessors.getters.display(node),\r\n            key: node.internalFields.key,\r\n            selected: node.internalFields.selected,\r\n            expanded: node.internalFields.expanded,\r\n            disabled: node.internalFields.disabled,\r\n            parent: parent || null,\r\n            itemData: node.internalFields.item,\r\n            children: [],\r\n            items: []\r\n        };\r\n        if (publicNode.parent) {\r\n            publicNode.parent.children.push(publicNode);\r\n            publicNode.parent.items.push(publicNode)\r\n        }\r\n        return publicNode\r\n    },\r\n    convertToPublicNodes(data, parent) {\r\n        if (!data.length) {\r\n            return []\r\n        }\r\n        const that = this;\r\n        const publicNodes = [];\r\n        each(data, ((_, node) => {\r\n            node = isPrimitive(node) ? that._getByKey(node) : node;\r\n            const publicNode = that._convertToPublicNode(node, parent);\r\n            publicNode.children = that.convertToPublicNodes(node.internalFields.childrenKeys, publicNode);\r\n            publicNodes.push(publicNode);\r\n            node.internalFields.publicNode = publicNode\r\n        }));\r\n        return publicNodes\r\n    },\r\n    setDataAccessors(accessors) {\r\n        this._dataAccessors = accessors\r\n    },\r\n    _getByKey(key) {\r\n        return this._dataStructure[this.getIndexByKey(key)] || null\r\n    },\r\n    getParentNode(node) {\r\n        return this._getByKey(node.internalFields.parentKey)\r\n    },\r\n    getByKey(data, key) {\r\n        if (null === key || void 0 === key) {\r\n            return null\r\n        }\r\n        let result = null;\r\n        const that = this;\r\n        return function(data, key) {\r\n            each(data, ((_, element) => {\r\n                const currentElementKey = element.internalFields && element.internalFields.key || that._dataAccessors.getters.key(element);\r\n                if (currentElementKey.toString() === key.toString()) {\r\n                    result = element;\r\n                    return false\r\n                }\r\n            }));\r\n            return result\r\n        }(data, key)\r\n    },\r\n    getItemsCount() {\r\n        return this._itemsCount\r\n    },\r\n    getVisibleItemsCount() {\r\n        return this._visibleItemsCount\r\n    },\r\n    updateIndexByKey() {\r\n        const that = this;\r\n        this._indexByKey = {};\r\n        each(this._dataStructure, ((index, node) => {\r\n            that._checkForDuplicateId(node.internalFields.key);\r\n            that._indexByKey[node.internalFields.key] = index\r\n        }))\r\n    },\r\n    updateChildrenKeys() {\r\n        this._indexByKey = {};\r\n        this.removeChildrenKeys();\r\n        this.updateIndexByKey();\r\n        this.setChildrenKeys()\r\n    },\r\n    removeChildrenKeys() {\r\n        this._indexByKey = {};\r\n        each(this._dataStructure, ((index, node) => {\r\n            node.internalFields.childrenKeys = []\r\n        }))\r\n    },\r\n    getIndexByKey(key) {\r\n        return this._indexByKey[key]\r\n    },\r\n    createPlainStructure(items, rootValue, dataType) {\r\n        this._itemsCount = 0;\r\n        this._visibleItemsCount = 0;\r\n        this._rootValue = rootValue;\r\n        this._dataType = dataType;\r\n        this._indexByKey = {};\r\n        this._convertItemsToNodes(items);\r\n        this.setChildrenKeys();\r\n        return this._dataStructure\r\n    }\r\n});\r\nexport default DataConverter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}