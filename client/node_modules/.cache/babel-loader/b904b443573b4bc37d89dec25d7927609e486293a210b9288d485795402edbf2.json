{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/form/m_form.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport \"../../../ui/validation_summary\";\nimport \"../../../ui/validation_group\";\nimport \"../../ui/form/m_form.layout_manager\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { triggerResizeEvent, triggerShownEvent } from \"../../../common/core/events/visibility_change\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport config from \"../../../core/config\";\nimport { getPublicElement } from \"../../../core/element\";\nimport Guid from \"../../../core/guid\";\nimport $ from \"../../../core/renderer\";\nimport resizeObserverSingleton from \"../../../core/resize_observer\";\nimport { ensureDefined } from \"../../../core/utils/common\";\nimport { Deferred } from \"../../../core/utils/deferred\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isDefined, isEmptyObject, isObject, isString } from \"../../../core/utils/type\";\nimport { defaultScreenFactorFunc, getCurrentScreenFactor, hasWindow } from \"../../../core/utils/window\";\nimport Editor from \"../../../ui/editor/editor\";\nimport TabPanel from \"../../../ui/tab_panel\";\nimport { isMaterial, isMaterialBased } from \"../../../ui/themes\";\nimport ValidationEngine from \"../../../ui/validation_engine\";\nimport Widget, { FOCUSED_STATE_CLASS } from \"../../core/widget/widget\";\nimport { DROP_DOWN_EDITOR_CLASS } from \"../../ui/drop_down_editor/m_drop_down_editor\";\nimport { setLabelWidthByMaxLabelWidth } from \"../../ui/form/components/m_label\";\nimport { FIELD_ITEM_CLASS, FIELD_ITEM_CONTENT_CLASS, FIELD_ITEM_CONTENT_HAS_GROUP_CLASS, FIELD_ITEM_CONTENT_HAS_TABS_CLASS, FIELD_ITEM_TAB_CLASS, FORM_CLASS, FORM_FIELD_ITEM_COL_CLASS, FORM_GROUP_CAPTION_CLASS, FORM_GROUP_CLASS, FORM_GROUP_CONTENT_CLASS, FORM_GROUP_CUSTOM_CAPTION_CLASS, FORM_GROUP_WITH_CAPTION_CLASS, FORM_UNDERLINED_CLASS, FORM_VALIDATION_SUMMARY, GROUP_COL_COUNT_ATTR, GROUP_COL_COUNT_CLASS, ROOT_SIMPLE_ITEM_CLASS } from \"../../ui/form/constants\";\nimport tryCreateItemOptionAction from \"../../ui/form/m_form.item_options_actions\";\nimport { default as FormItemsRunTimeInfo } from \"../../ui/form/m_form.items_runtime_info\";\nimport { convertToLabelMarkOptions } from \"../../ui/form/m_form.layout_manager.utils\";\nimport { concatPaths, convertToLayoutManagerOptions, createItemPathByIndex, getFullOptionName, getItemPath, getOptionNameFromFullName, getTextWithoutSpaces, isEqualToDataFieldOrNameOrTitleOrCaption, isFullPathContainsTabs, tryGetTabPath } from \"../../ui/form/m_form.utils\";\nimport Scrollable from \"../../ui/scroll_view/m_scrollable\";\nimport { TEXTEDITOR_CLASS, TEXTEDITOR_INPUT_CLASS } from \"../../ui/text_box/m_text_editor.base\";\nimport { TOOLBAR_CLASS } from \"../../ui/toolbar/m_constants\";\nconst ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\nclass Form extends Widget {\n  _init() {\n    super._init();\n    this._dirtyFields = new Set();\n    this._cachedColCountOptions = [];\n    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();\n    this._groupsColCount = [];\n    this._attachSyncSubscriptions();\n  }\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      formID: `dx-${new Guid()}`,\n      formData: {},\n      colCount: 1,\n      screenByWidth: defaultScreenFactorFunc,\n      labelLocation: \"left\",\n      readOnly: false,\n      onFieldDataChanged: null,\n      customizeItem: null,\n      onEditorEnterKey: null,\n      minColWidth: 200,\n      alignItemLabels: true,\n      alignItemLabelsInAllGroups: true,\n      alignRootItemLabels: true,\n      showColonAfterLabel: true,\n      showRequiredMark: true,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\n      requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\n      showValidationSummary: false,\n      scrollingEnabled: false,\n      stylingMode: config().editorStylingMode,\n      labelMode: \"outside\",\n      isDirty: false\n    });\n  }\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: () => isMaterialBased(),\n      options: {\n        labelLocation: \"top\"\n      }\n    }, {\n      device: () => isMaterial(),\n      options: {\n        showColonAfterLabel: false\n      }\n    }]);\n  }\n  _setOptionsByReference() {\n    super._setOptionsByReference();\n    extend(this._optionsByReference, {\n      formData: true,\n      validationGroup: true\n    });\n  }\n  _getGroupColCount($element) {\n    return parseInt($element.attr(GROUP_COL_COUNT_ATTR));\n  }\n  _applyLabelsWidthByCol($container, index) {\n    let options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    let labelMarkOptions = arguments.length > 3 ? arguments[3] : void 0;\n    const fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\n    const cssExcludeTabbedSelector = options.excludeTabbed ? `:not(.${FIELD_ITEM_TAB_CLASS})` : \"\";\n    setLabelWidthByMaxLabelWidth($container, `.${fieldItemClass}${cssExcludeTabbedSelector}`, labelMarkOptions);\n  }\n  _applyLabelsWidth($container, excludeTabbed, inOneColumn, colCount, labelMarkOptions) {\n    colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\n    const applyLabelsOptions = {\n      excludeTabbed: excludeTabbed,\n      inOneColumn: inOneColumn\n    };\n    let i;\n    for (i = 0; i < colCount; i++) {\n      this._applyLabelsWidthByCol($container, i, applyLabelsOptions, labelMarkOptions);\n    }\n  }\n  _getGroupElementsInColumn($container, columnIndex, colCount) {\n    const cssColCountSelector = isDefined(colCount) ? `.${GROUP_COL_COUNT_CLASS}${colCount}` : \"\";\n    const groupSelector = `.${FORM_FIELD_ITEM_COL_CLASS}${columnIndex} > .${FIELD_ITEM_CONTENT_CLASS} > .${FORM_GROUP_CLASS}${cssColCountSelector}`;\n    return $container.find(groupSelector);\n  }\n  _applyLabelsWidthWithGroups($container, colCount, excludeTabbed, labelMarkOptions) {\n    const {\n      alignRootItemLabels: alignRootItemLabels\n    } = this.option();\n    if (true === alignRootItemLabels) {\n      const $rootSimpleItems = $container.find(`.${ROOT_SIMPLE_ITEM_CLASS}`);\n      for (let colIndex = 0; colIndex < colCount; colIndex++) {\n        this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed, labelMarkOptions);\n      }\n    }\n    const alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\n    if (alignItemLabelsInAllGroups) {\n      this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions);\n    } else {\n      const $groups = this.$element().find(`.${FORM_GROUP_CLASS}`);\n      let i;\n      for (i = 0; i < $groups.length; i++) {\n        this._applyLabelsWidth($groups.eq(i), excludeTabbed, void 0, void 0, labelMarkOptions);\n      }\n    }\n  }\n  _applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions) {\n    const applyLabelsOptions = {\n      excludeTabbed: excludeTabbed\n    };\n    let colIndex;\n    let groupsColIndex;\n    let groupColIndex;\n    let $groupsByCol;\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\n      $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\n      this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions, labelMarkOptions);\n      for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\n        $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\n        const groupColCount = this._getGroupColCount($groupsByCol);\n        for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\n          this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions, labelMarkOptions);\n        }\n      }\n    }\n  }\n  _labelLocation() {\n    const {\n      labelLocation: labelLocation\n    } = this.option();\n    return labelLocation;\n  }\n  _alignLabelsInColumn(_ref) {\n    let {\n      layoutManager: layoutManager,\n      inOneColumn: inOneColumn,\n      $container: $container,\n      excludeTabbed: excludeTabbed,\n      items: items\n    } = _ref;\n    if (!hasWindow() || \"top\" === this._labelLocation()) {\n      return;\n    }\n    const labelMarkOptions = convertToLabelMarkOptions(layoutManager._getMarkOptions());\n    if (inOneColumn) {\n      this._applyLabelsWidth($container, excludeTabbed, true, void 0, labelMarkOptions);\n    } else if (this._checkGrouping(items)) {\n      this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed, labelMarkOptions);\n    } else {\n      this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount(), labelMarkOptions);\n    }\n  }\n  _prepareFormData() {\n    if (!isDefined(this.option(\"formData\"))) {\n      this.option(\"formData\", {});\n    }\n  }\n  _setStylingModeClass() {\n    const {\n      stylingMode: stylingMode\n    } = this.option();\n    if (\"underlined\" === stylingMode) {\n      this.$element().addClass(FORM_UNDERLINED_CLASS);\n    }\n  }\n  _initMarkup() {\n    ValidationEngine.addGroup(this._getValidationGroup(), false);\n    this._clearCachedInstances();\n    this._prepareFormData();\n    this.$element().addClass(FORM_CLASS);\n    this._setStylingModeClass();\n    super._initMarkup();\n    this.setAria(\"role\", \"form\", this.$element());\n    if (this.option(\"scrollingEnabled\")) {\n      this._renderScrollable();\n    }\n    this._renderLayout();\n    this._renderValidationSummary();\n    this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor();\n    this._attachResizeObserverSubscription();\n  }\n  _attachResizeObserverSubscription() {\n    if (hasWindow()) {\n      const formRootElement = this.$element().get(0);\n      resizeObserverSingleton.unobserve(formRootElement);\n      resizeObserverSingleton.observe(formRootElement, () => {\n        this._resizeHandler();\n      });\n    }\n  }\n  _resizeHandler() {\n    if (this._cachedLayoutManagers.length) {\n      each(this._cachedLayoutManagers, (_, layoutManager) => {\n        var _layoutManager$option;\n        null === (_layoutManager$option = layoutManager.option(\"onLayoutChanged\")) || void 0 === _layoutManager$option || _layoutManager$option(layoutManager.isSingleColumnMode());\n      });\n    }\n  }\n  _getCurrentScreenFactor() {\n    return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\";\n  }\n  _clearCachedInstances() {\n    this._itemsRunTimeInfo.clear();\n    this._cachedLayoutManagers = [];\n  }\n  _alignLabels(layoutManager, inOneColumn) {\n    this._alignLabelsInColumn({\n      $container: this.$element(),\n      layoutManager: layoutManager,\n      excludeTabbed: true,\n      items: this.option(\"items\"),\n      inOneColumn: inOneColumn\n    });\n    triggerResizeEvent(this.$element().find(`.${TOOLBAR_CLASS}`));\n  }\n  _clean() {\n    this._clearValidationSummary();\n    super._clean();\n    this._groupsColCount = [];\n    this._cachedColCountOptions = [];\n    this._lastMarkupScreenFactor = void 0;\n    resizeObserverSingleton.unobserve(this.$element().get(0));\n  }\n  _renderScrollable() {\n    const useNativeScrolling = this.option(\"useNativeScrolling\");\n    this._scrollable = new Scrollable(this.$element(), {\n      useNative: !!useNativeScrolling,\n      useSimulatedScrollbar: !useNativeScrolling,\n      useKeyboard: false,\n      direction: \"both\",\n      bounceEnabled: false\n    });\n  }\n  _getContent() {\n    var _this$_scrollable;\n    return this.option(\"scrollingEnabled\") ? $(null === (_this$_scrollable = this._scrollable) || void 0 === _this$_scrollable ? void 0 : _this$_scrollable.content()) : this.$element();\n  }\n  _clearValidationSummary() {\n    var _this$_$validationSum;\n    null === (_this$_$validationSum = this._$validationSummary) || void 0 === _this$_$validationSum || _this$_$validationSum.remove();\n    this._$validationSummary = void 0;\n    this._validationSummary = void 0;\n  }\n  _renderValidationSummary() {\n    this._clearValidationSummary();\n    if (this.option(\"showValidationSummary\")) {\n      this._$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\n      this._validationSummary = this._$validationSummary.dxValidationSummary({\n        validationGroup: this._getValidationGroup()\n      }).dxValidationSummary(\"instance\");\n    }\n  }\n  _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\n    if (items) {\n      const result = [];\n      for (let i = 0; i < items.length; i++) {\n        let item = items[i];\n        const path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\n        const itemRunTimeInfo = {\n          item: item,\n          itemIndex: i,\n          path: path\n        };\n        const guid = this._itemsRunTimeInfo.add(itemRunTimeInfo);\n        if (isString(item)) {\n          item = {\n            dataField: item\n          };\n        }\n        if (isObject(item)) {\n          const preparedItem = _extends({}, item);\n          itemRunTimeInfo.preparedItem = preparedItem;\n          preparedItem.guid = guid;\n          this._tryPrepareGroupItemCaption(preparedItem);\n          this._tryPrepareGroupItem(preparedItem);\n          this._tryPrepareTabbedItem(preparedItem, path);\n          this._tryPrepareItemTemplate(preparedItem);\n          if (parentIsTabbedItem) {\n            preparedItem.cssItemClass = FIELD_ITEM_TAB_CLASS;\n          }\n          if (preparedItem.items) {\n            preparedItem.items = this._prepareItems(preparedItem.items, parentIsTabbedItem, path);\n          }\n          result.push(preparedItem);\n        } else {\n          result.push(item);\n        }\n      }\n      return result;\n    }\n  }\n  _tryPrepareGroupItemCaption(item) {\n    if (\"group\" === item.itemType) {\n      item._prepareGroupCaptionTemplate = captionTemplate => {\n        if (item.captionTemplate) {\n          item.groupCaptionTemplate = this._getTemplate(captionTemplate);\n        }\n        item.captionTemplate = this._itemGroupTemplate.bind(this, item);\n      };\n      item._prepareGroupCaptionTemplate(item.captionTemplate);\n    }\n  }\n  _tryPrepareGroupItem(item) {\n    if (\"group\" === item.itemType) {\n      item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\n      item._prepareGroupItemTemplate = itemTemplate => {\n        if (item.template) {\n          item.groupContentTemplate = this._getTemplate(itemTemplate);\n        }\n        item.template = this._itemGroupTemplate.bind(this, item);\n      };\n      item._prepareGroupItemTemplate(item.template);\n    }\n  }\n  _tryPrepareTabbedItem(item, path) {\n    if (\"tabbed\" === item.itemType) {\n      item.template = this._itemTabbedTemplate.bind(this, item);\n      item.tabs = this._prepareItems(item.tabs, true, path, true);\n    }\n  }\n  _tryPrepareItemTemplate(item) {\n    if (item.template) {\n      item.template = this._getTemplate(item.template);\n    }\n  }\n  _checkGrouping(items) {\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (\"group\" === item.itemType) {\n          return true;\n        }\n      }\n    }\n  }\n  _renderLayout() {\n    const that = this;\n    let items = that.option(\"items\");\n    const $content = that._getContent();\n    items = that._prepareItems(items);\n    that._rootLayoutManager = that._renderLayoutManager($content, this._createLayoutManagerOptions(items, {\n      isRoot: true,\n      colCount: that.option(\"colCount\"),\n      alignItemLabels: that.option(\"alignItemLabels\"),\n      screenByWidth: this.option(\"screenByWidth\"),\n      colCountByScreen: this.option(\"colCountByScreen\"),\n      onLayoutChanged(inOneColumn) {\n        that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn);\n      },\n      onContentReady(e) {\n        that._alignLabels(e.component, e.component.isSingleColumnMode());\n      }\n    }));\n  }\n  _tryGetItemsForTemplate(item) {\n    return item.items || [];\n  }\n  _itemTabbedTemplate(item, e, $container) {\n    const $tabPanel = $(\"<div>\").appendTo($container);\n    const tabPanelOptions = extend({}, item.tabPanelOptions, {\n      dataSource: item.tabs,\n      onItemRendered: args => {\n        var _item$tabPanelOptions, _item$tabPanelOptions2;\n        null === (_item$tabPanelOptions = item.tabPanelOptions) || void 0 === _item$tabPanelOptions || null === (_item$tabPanelOptions2 = _item$tabPanelOptions.onItemRendered) || void 0 === _item$tabPanelOptions2 || _item$tabPanelOptions2.call(_item$tabPanelOptions, args);\n        triggerShownEvent(args.itemElement);\n      },\n      itemTemplate: (itemData, e, container) => {\n        const $container = $(container);\n        const alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\n        const layoutManager = this._renderLayoutManager($container, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(itemData), {\n          colCount: itemData.colCount,\n          alignItemLabels: alignItemLabels,\n          screenByWidth: this.option(\"screenByWidth\"),\n          colCountByScreen: itemData.colCountByScreen,\n          cssItemClass: itemData.cssItemClass,\n          onLayoutChanged: inOneColumn => {\n            this._alignLabelsInColumn({\n              $container: $container,\n              layoutManager: layoutManager,\n              items: itemData.items,\n              inOneColumn: inOneColumn\n            });\n          }\n        }));\n        if (this._itemsRunTimeInfo) {\n          this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\n            layoutManager: layoutManager\n          });\n        }\n        if (alignItemLabels) {\n          this._alignLabelsInColumn({\n            $container: $container,\n            layoutManager: layoutManager,\n            items: itemData.items,\n            inOneColumn: layoutManager.isSingleColumnMode()\n          });\n        }\n      }\n    });\n    const tryUpdateTabPanelInstance = (items, instance) => {\n      if (Array.isArray(items)) {\n        items.forEach(item => this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n          widgetInstance: instance\n        }));\n      }\n    };\n    const tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\n    tabPanel.on(\"optionChanged\", e => {\n      if (\"dataSource\" === e.fullName) {\n        tryUpdateTabPanelInstance(e.value, e.component);\n      }\n    });\n    tryUpdateTabPanelInstance([{\n      guid: item.guid\n    }, ...(item.tabs ?? [])], tabPanel);\n  }\n  _itemGroupCaptionTemplate(item, $group, id) {\n    if (item.groupCaptionTemplate) {\n      const $captionTemplate = $(\"<div>\").addClass(FORM_GROUP_CUSTOM_CAPTION_CLASS).attr(\"id\", id).appendTo($group);\n      item._renderGroupCaptionTemplate = () => {\n        const data = {\n          component: this,\n          caption: item.caption,\n          name: item.name\n        };\n        item.groupCaptionTemplate.render({\n          model: data,\n          container: getPublicElement($captionTemplate)\n        });\n      };\n      item._renderGroupCaptionTemplate();\n      return;\n    }\n    if (item.caption) {\n      $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).attr(\"id\", id).appendTo($group);\n    }\n  }\n  _itemGroupContentTemplate(item, $group) {\n    const $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\n    if (item.groupContentTemplate) {\n      item._renderGroupContentTemplate = () => {\n        $groupContent.empty();\n        const data = {\n          formData: this.option(\"formData\"),\n          component: this\n        };\n        item.groupContentTemplate.render({\n          model: data,\n          container: getPublicElement($groupContent)\n        });\n      };\n      item._renderGroupContentTemplate();\n    } else {\n      var _this$_itemsRunTimeIn;\n      const layoutManager = this._renderLayoutManager($groupContent, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(item), {\n        colCount: item.colCount,\n        colCountByScreen: item.colCountByScreen,\n        alignItemLabels: item.alignItemLabels,\n        cssItemClass: item.cssItemClass\n      }));\n      null === (_this$_itemsRunTimeIn = this._itemsRunTimeInfo) || void 0 === _this$_itemsRunTimeIn || _this$_itemsRunTimeIn.extendRunTimeItemInfoByKey(item.guid, {\n        layoutManager: layoutManager\n      });\n      const colCount = layoutManager._getColCount();\n      if (!this._groupsColCount.includes(colCount)) {\n        this._groupsColCount.push(colCount);\n      }\n      $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\n      $group.attr(GROUP_COL_COUNT_ATTR, colCount);\n    }\n  }\n  _itemGroupTemplate(item, options, $container) {\n    const {\n      id: id\n    } = options.editorOptions.inputAttr;\n    const $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\n    const groupAria = {\n      role: \"group\",\n      labelledby: id\n    };\n    this.setAria(groupAria, $group);\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\n    this._itemGroupCaptionTemplate(item, $group, id);\n    this._itemGroupContentTemplate(item, $group);\n  }\n  _createLayoutManagerOptions(items, extendedLayoutManagerOptions) {\n    return convertToLayoutManagerOptions({\n      form: this,\n      formOptions: this.option(),\n      $formElement: this.$element(),\n      items: items,\n      validationGroup: this._getValidationGroup(),\n      extendedLayoutManagerOptions: extendedLayoutManagerOptions,\n      onFieldDataChanged: args => {\n        if (!this._isDataUpdating) {\n          this._triggerOnFieldDataChanged(args);\n        }\n      },\n      onContentReady: args => {\n        var _extendedLayoutManage;\n        this._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\n        null === (_extendedLayoutManage = extendedLayoutManagerOptions.onContentReady) || void 0 === _extendedLayoutManage || _extendedLayoutManage.call(extendedLayoutManagerOptions, args);\n      },\n      onDisposing: _ref2 => {\n        let {\n          component: component\n        } = _ref2;\n        const nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\n        this._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo);\n      },\n      onFieldItemRendered: () => {\n        var _this$_validationSumm;\n        null === (_this$_validationSumm = this._validationSummary) || void 0 === _this$_validationSumm || _this$_validationSumm.refreshValidationGroup();\n      }\n    });\n  }\n  _renderLayoutManager($parent, layoutManagerOptions) {\n    const baseColCountByScreen = {\n      lg: layoutManagerOptions.colCount,\n      md: layoutManagerOptions.colCount,\n      sm: layoutManagerOptions.colCount,\n      xs: 1\n    };\n    this._cachedColCountOptions.push({\n      colCountByScreen: extend(baseColCountByScreen, layoutManagerOptions.colCountByScreen)\n    });\n    const $element = $(\"<div>\");\n    $element.appendTo($parent);\n    const instance = this._createComponent($element, \"dxLayoutManager\", layoutManagerOptions);\n    instance.on(\"autoColCountChanged\", () => {\n      this._clearAutoColCountChangedTimeout();\n      this.autoColCountChangedTimeoutId = setTimeout(() => !this._disposed && this._refresh(), 0);\n    });\n    this._cachedLayoutManagers.push(instance);\n    return instance;\n  }\n  _getValidationGroup() {\n    return this.option(\"validationGroup\") || this;\n  }\n  _createComponent($element, type, config) {\n    config = config || {};\n    this._extendConfig(config, {\n      readOnly: this.option(\"readOnly\")\n    });\n    return super._createComponent($element, type, config);\n  }\n  _attachSyncSubscriptions() {\n    const that = this;\n    that.on(\"optionChanged\", args => {\n      const optionFullName = args.fullName;\n      if (\"formData\" === optionFullName) {\n        if (!isDefined(args.value)) {\n          that._options.silent(\"formData\", args.value = {});\n        }\n        that._triggerOnFieldDataChangedByDataSet(args.value);\n      }\n      if (that._cachedLayoutManagers.length) {\n        each(that._cachedLayoutManagers, (index, layoutManager) => {\n          if (\"formData\" === optionFullName) {\n            that._isDataUpdating = true;\n            layoutManager.option(\"layoutData\", args.value);\n            that._isDataUpdating = false;\n          }\n          if (\"readOnly\" === args.name || \"disabled\" === args.name) {\n            layoutManager.option(optionFullName, args.value);\n          }\n        });\n      }\n    });\n  }\n  _optionChanged(args) {\n    const splitFullName = args.fullName.split(\".\");\n    if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"items\") && this._itemsOptionChangedHandler(args)) {\n      return;\n    }\n    if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"formData\") && this._formDataOptionChangedHandler(args)) {\n      return;\n    }\n    this._defaultOptionChangedHandler(args);\n  }\n  _defaultOptionChangedHandler(args) {\n    switch (args.name) {\n      case \"formData\":\n        if (!this.option(\"items\")) {\n          this._invalidate();\n        } else if (isEmptyObject(args.value)) {\n          this._clear();\n        }\n        break;\n      case \"onFieldDataChanged\":\n      case \"alignRootItemLabels\":\n      case \"readOnly\":\n      case \"isDirty\":\n        break;\n      case \"items\":\n      case \"colCount\":\n      case \"onEditorEnterKey\":\n      case \"labelLocation\":\n      case \"labelMode\":\n      case \"alignItemLabels\":\n      case \"showColonAfterLabel\":\n      case \"customizeItem\":\n      case \"alignItemLabelsInAllGroups\":\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n      case \"requiredMessage\":\n      case \"scrollingEnabled\":\n      case \"formID\":\n      case \"colCountByScreen\":\n      case \"screenByWidth\":\n      case \"stylingMode\":\n        this._invalidate();\n        break;\n      case \"showValidationSummary\":\n        this._renderValidationSummary();\n        break;\n      case \"minColWidth\":\n        {\n          const {\n            colCount: colCount\n          } = this.option();\n          if (\"auto\" === colCount) {\n            this._invalidate();\n          }\n          break;\n        }\n      case \"width\":\n        super._optionChanged(args);\n        this._rootLayoutManager.option(args.name, args.value);\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n        break;\n      case \"validationGroup\":\n        ValidationEngine.removeGroup(args.previousValue || this);\n        this._invalidate();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _itemsOptionChangedHandler(args) {\n    const nameParts = args.fullName.split(\".\");\n    const {\n      value: value\n    } = args;\n    const itemPath = this._getItemPath(nameParts);\n    const item = this.option(itemPath);\n    const optionNameWithoutPath = args.fullName.replace(`${itemPath}.`, \"\");\n    const simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\n    const itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\n    let result = this._tryExecuteItemOptionAction(itemAction) || this._tryChangeLayoutManagerItemOption(args.fullName, value);\n    if (!result && item) {\n      this._changeItemOption(item, optionNameWithoutPath, value);\n      const items = this._generateItemsFromData(this.option(\"items\"));\n      this.option(\"items\", items);\n      result = true;\n    }\n    return result;\n  }\n  _formDataOptionChangedHandler(args) {\n    const nameParts = args.fullName.split(\".\");\n    const {\n      value: value\n    } = args;\n    const dataField = nameParts.slice(1).join(\".\");\n    const editor = this.getEditor(dataField);\n    if (editor) {\n      editor.option(\"value\", value);\n    } else {\n      this._triggerOnFieldDataChanged({\n        dataField: dataField,\n        value: value\n      });\n    }\n    return true;\n  }\n  _tryCreateItemOptionAction(optionName, item, value, previousValue, itemPath) {\n    if (\"tabs\" === optionName) {\n      this._itemsRunTimeInfo.removeItemsByPathStartWith(`${itemPath}.tabs`);\n      value = this._prepareItems(value, true, itemPath, true);\n    }\n    return tryCreateItemOptionAction(optionName, {\n      item: item,\n      value: value,\n      previousValue: previousValue,\n      itemsRunTimeInfo: this._itemsRunTimeInfo\n    });\n  }\n  _tryExecuteItemOptionAction(action) {\n    return null === action || void 0 === action ? void 0 : action.tryExecute();\n  }\n  _updateValidationGroupAndSummaryIfNeeded(fullName) {\n    const optionName = getOptionNameFromFullName(fullName);\n    if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.includes(optionName)) {\n      ValidationEngine.addGroup(this._getValidationGroup(), false);\n      if (this.option(\"showValidationSummary\")) {\n        var _this$_validationSumm2;\n        null === (_this$_validationSumm2 = this._validationSummary) || void 0 === _this$_validationSumm2 || _this$_validationSumm2.refreshValidationGroup();\n      }\n    }\n  }\n  _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\n    if (this._updateLockCount > 0) {\n      !layoutManager._updateLockCount && layoutManager.beginUpdate();\n      const key = this._itemsRunTimeInfo.findKeyByPath(path);\n      this.postponedOperations.add(key, () => {\n        !layoutManager._disposed && layoutManager.endUpdate();\n        return Deferred().resolve();\n      });\n    }\n    const contentReadyHandler = e => {\n      e.component.off(\"contentReady\", contentReadyHandler);\n      if (isFullPathContainsTabs(path)) {\n        const tabPath = tryGetTabPath(path);\n        const tabLayoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(tabPath);\n        if (tabLayoutManager) {\n          this._alignLabelsInColumn({\n            items: tabLayoutManager.option(\"items\"),\n            layoutManager: tabLayoutManager,\n            $container: tabLayoutManager.$element(),\n            inOneColumn: tabLayoutManager.isSingleColumnMode()\n          });\n        }\n      } else {\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n      }\n    };\n    layoutManager.on(\"contentReady\", contentReadyHandler);\n    layoutManager.option(optionName, value);\n    this._updateValidationGroupAndSummaryIfNeeded(optionName);\n  }\n  _tryChangeLayoutManagerItemOption(fullName, value) {\n    const nameParts = fullName.split(\".\");\n    const optionName = getOptionNameFromFullName(fullName);\n    if (\"items\" === optionName && nameParts.length > 1) {\n      const itemPath = this._getItemPath(nameParts);\n      const layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(itemPath);\n      if (layoutManager) {\n        this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\n        const items = this._prepareItems(value, false, itemPath);\n        this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\n        return true;\n      }\n    } else if (nameParts.length > 2) {\n      const endPartIndex = nameParts.length - 2;\n      const itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\n      const layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(itemPath);\n      if (layoutManager) {\n        const fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\n        if (\"editorType\" === optionName) {\n          if (layoutManager.option(fullOptionName) !== value) {\n            return false;\n          }\n        }\n        if (\"visible\" === optionName) {\n          const formItems = this.option(getFullOptionName(itemPath, \"items\"));\n          if (null !== formItems && void 0 !== formItems && formItems.length) {\n            const layoutManagerItems = layoutManager.option(\"items\");\n            formItems.forEach((item, index) => {\n              const layoutItem = layoutManagerItems[index];\n              layoutItem.visibleIndex = item.visibleIndex;\n            });\n          }\n        }\n        this._setLayoutManagerItemOption(layoutManager, fullOptionName, value, itemPath);\n        return true;\n      }\n    }\n    return false;\n  }\n  _tryChangeLayoutManagerItemOptions(itemPath, options) {\n    let result;\n    this.beginUpdate();\n    each(options, (optionName, optionValue) => {\n      result = this._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\n      if (!result) {\n        return false;\n      }\n    });\n    this.endUpdate();\n    return result;\n  }\n  _getItemPath(nameParts) {\n    let itemPath = nameParts[0];\n    let i;\n    for (i = 1; i < nameParts.length; i++) {\n      if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\n        itemPath += `.${nameParts[i]}`;\n      } else {\n        break;\n      }\n    }\n    return itemPath;\n  }\n  _triggerOnFieldDataChanged(args) {\n    this._updateIsDirty(args.dataField);\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  }\n  _triggerOnFieldDataChangedByDataSet(data) {\n    if (data && isObject(data)) {\n      Object.keys(data).forEach(key => {\n        this._triggerOnFieldDataChanged({\n          dataField: key,\n          value: data[key]\n        });\n      });\n    }\n  }\n  _updateFieldValue(dataField, value) {\n    if (isDefined(this.option(\"formData\"))) {\n      const editor = this.getEditor(dataField);\n      this.option(`formData.${dataField}`, value);\n      if (editor) {\n        const editorValue = editor.option(\"value\");\n        if (editorValue !== value) {\n          editor.option(\"value\", value);\n        }\n      }\n    }\n  }\n  _generateItemsFromData(items) {\n    const formData = this.option(\"formData\");\n    const result = [];\n    if (!items && isDefined(formData)) {\n      each(formData, dataField => {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n    if (items) {\n      each(items, (index, item) => {\n        if (isObject(item)) {\n          result.push(item);\n        } else {\n          result.push({\n            dataField: item\n          });\n        }\n      });\n    }\n    return result;\n  }\n  _getItemByField(field, items) {\n    const that = this;\n    const fieldParts = isObject(field) ? field : that._getFieldParts(field);\n    const {\n      fieldName: fieldName\n    } = fieldParts;\n    const {\n      fieldPath: fieldPath\n    } = fieldParts;\n    let resultItem;\n    if (items.length) {\n      each(items, (index, item) => {\n        const {\n          itemType: itemType\n        } = item;\n        if (fieldPath.length) {\n          const path = fieldPath.slice();\n          item = that._getItemByFieldPath(path, fieldName, item);\n        } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\n          const subItemsField = that._getSubItemField(itemType);\n          item.items = that._generateItemsFromData(item.items);\n          item = that._getItemByField({\n            fieldName: fieldName,\n            fieldPath: fieldPath\n          }, item[subItemsField]);\n        }\n        if (isEqualToDataFieldOrNameOrTitleOrCaption(item, fieldName)) {\n          resultItem = item;\n          return false;\n        }\n      });\n    }\n    return resultItem;\n  }\n  _getFieldParts(field) {\n    let fieldName = field;\n    let separatorIndex = fieldName.indexOf(\".\");\n    const resultPath = [];\n    while (-1 !== separatorIndex) {\n      resultPath.push(fieldName.substr(0, separatorIndex));\n      fieldName = fieldName.substr(separatorIndex + 1);\n      separatorIndex = fieldName.indexOf(\".\");\n    }\n    return {\n      fieldName: fieldName,\n      fieldPath: resultPath.reverse()\n    };\n  }\n  _getItemByFieldPath(path, fieldName, item) {\n    const that = this;\n    const {\n      itemType: itemType\n    } = item;\n    const subItemsField = that._getSubItemField(itemType);\n    const isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\n    let result;\n    do {\n      if (isItemWithSubItems) {\n        const name = item.name || item.caption || item.title;\n        const isGroupWithName = isDefined(name);\n        const nameWithoutSpaces = getTextWithoutSpaces(name);\n        let pathNode;\n        item[subItemsField] = that._generateItemsFromData(item[subItemsField]);\n        if (isGroupWithName) {\n          pathNode = path.pop();\n        }\n        if (!path.length) {\n          result = that._getItemByField(fieldName, item[subItemsField]);\n          if (result) {\n            break;\n          }\n        }\n        if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\n          if (path.length) {\n            result = that._searchItemInEverySubItem(path, fieldName, item[subItemsField]);\n          }\n        }\n      } else {\n        break;\n      }\n    } while (path.length && !isDefined(result));\n    return result;\n  }\n  _getSubItemField(itemType) {\n    return \"tabbed\" === itemType ? \"tabs\" : \"items\";\n  }\n  _searchItemInEverySubItem(path, fieldName, items) {\n    const that = this;\n    let result;\n    each(items, (index, groupItem) => {\n      result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\n      if (result) {\n        return false;\n      }\n    });\n    if (!result) {\n      result = false;\n    }\n    return result;\n  }\n  _changeItemOption(item, option, value) {\n    if (isObject(item)) {\n      item[option] = value;\n    }\n  }\n  _dimensionChanged() {\n    const currentScreenFactor = this._getCurrentScreenFactor();\n    if (this._lastMarkupScreenFactor !== currentScreenFactor) {\n      if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\n        this._targetScreenFactor = currentScreenFactor;\n        this._refresh();\n        this._targetScreenFactor = void 0;\n      }\n      this._lastMarkupScreenFactor = currentScreenFactor;\n    }\n  }\n  _isColCountChanged(oldScreenSize, newScreenSize) {\n    let isChanged = false;\n    each(this._cachedColCountOptions, (index, item) => {\n      if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\n        isChanged = true;\n        return false;\n      }\n    });\n    return isChanged;\n  }\n  _refresh() {\n    const editorSelector = `.${TEXTEDITOR_CLASS}.${FOCUSED_STATE_CLASS}:not(.${DROP_DOWN_EDITOR_CLASS}) .${TEXTEDITOR_INPUT_CLASS}`;\n    eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\n    super._refresh();\n  }\n  _updateIsDirty(dataField) {\n    const editor = this.getEditor(dataField);\n    if (!editor) {\n      return;\n    }\n    if (editor.option(\"isDirty\")) {\n      this._dirtyFields.add(dataField);\n    } else {\n      this._dirtyFields.delete(dataField);\n    }\n    this.option(\"isDirty\", !!this._dirtyFields.size);\n  }\n  updateRunTimeInfoForEachEditor(editorAction) {\n    this._itemsRunTimeInfo.each((_, itemRunTimeInfo) => {\n      const {\n        widgetInstance: widgetInstance\n      } = itemRunTimeInfo;\n      if (isDefined(widgetInstance) && Editor.isEditor(widgetInstance)) {\n        editorAction(widgetInstance);\n      }\n    });\n  }\n  _clear() {\n    this.updateRunTimeInfoForEachEditor(editor => {\n      editor.clear();\n      editor.option(\"isValid\", true);\n    });\n    ValidationEngine.resetGroup(this._getValidationGroup());\n  }\n  _updateData(data, value, isComplexData) {\n    const that = this;\n    const _data = isComplexData ? value : data;\n    if (isObject(_data)) {\n      each(_data, (dataField, fieldValue) => {\n        that._updateData(isComplexData ? `${data}.${dataField}` : dataField, fieldValue, isObject(fieldValue));\n      });\n    } else if (isString(data)) {\n      that._updateFieldValue(data, value);\n    }\n  }\n  registerKeyHandler(key, handler) {\n    super.registerKeyHandler(key, handler);\n    this._itemsRunTimeInfo.each((_, itemRunTimeInfo) => {\n      if (isDefined(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler);\n      }\n    });\n  }\n  _focusTarget() {\n    return this.$element().find(`.${FIELD_ITEM_CONTENT_CLASS} [tabindex]`).first();\n  }\n  _visibilityChanged() {\n    this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n  }\n  _clearAutoColCountChangedTimeout() {\n    if (this.autoColCountChangedTimeoutId) {\n      clearTimeout(this.autoColCountChangedTimeoutId);\n      this.autoColCountChangedTimeoutId = void 0;\n    }\n  }\n  _dispose() {\n    this._clearAutoColCountChangedTimeout();\n    ValidationEngine.removeGroup(this._getValidationGroup());\n    super._dispose();\n  }\n  clear() {\n    this._clear();\n  }\n  resetValues() {\n    this._clear();\n  }\n  reset(editorsData) {\n    this.updateRunTimeInfoForEachEditor(editor => {\n      const editorName = editor.option(\"name\");\n      if (editorsData && editorName in editorsData) {\n        editor.reset(editorsData[editorName]);\n        this._updateIsDirty(editorName);\n      } else {\n        editor.reset();\n      }\n    });\n    this._renderValidationSummary();\n  }\n  updateData(data, value) {\n    this._updateData(data, value);\n  }\n  getEditor(dataField) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField);\n  }\n  getButton(name) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByName(name);\n  }\n  updateDimensions() {\n    const that = this;\n    const deferred = Deferred();\n    if (that._scrollable) {\n      that._scrollable.update().done(() => {\n        deferred.resolveWith(that);\n      });\n    } else {\n      deferred.resolveWith(that);\n    }\n    return deferred.promise();\n  }\n  itemOption(id, option, value) {\n    const items = this._generateItemsFromData(this.option(\"items\"));\n    const item = this._getItemByField(id, items);\n    const path = getItemPath(items, item);\n    if (!item) {\n      return;\n    }\n    switch (arguments.length) {\n      case 1:\n        return item;\n      case 3:\n        {\n          const itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\n          this._changeItemOption(item, option, value);\n          const fullName = getFullOptionName(path, option);\n          if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\n            this.option(\"items\", items);\n          }\n          break;\n        }\n      default:\n        if (isObject(option)) {\n          if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\n            let allowUpdateItems;\n            each(option, (optionName, optionValue) => {\n              const itemAction = this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\n              this._changeItemOption(item, optionName, optionValue);\n              if (!allowUpdateItems && !this._tryExecuteItemOptionAction(itemAction)) {\n                allowUpdateItems = true;\n              }\n            });\n            allowUpdateItems && this.option(\"items\", items);\n          }\n        }\n    }\n  }\n  validate() {\n    return ValidationEngine.validateGroup(this._getValidationGroup());\n  }\n  getItemID(name) {\n    const {\n      formID: formID\n    } = this.option();\n    return `dx_${formID}_${name || new Guid()}`;\n  }\n  getTargetScreenFactor() {\n    return this._targetScreenFactor;\n  }\n}\nregisterComponent(\"dxForm\", Form);\nexport default Form;","map":{"version":3,"names":["_extends","eventsEngine","triggerResizeEvent","triggerShownEvent","messageLocalization","registerComponent","config","getPublicElement","Guid","$","resizeObserverSingleton","ensureDefined","Deferred","extend","each","isDefined","isEmptyObject","isObject","isString","defaultScreenFactorFunc","getCurrentScreenFactor","hasWindow","Editor","TabPanel","isMaterial","isMaterialBased","ValidationEngine","Widget","FOCUSED_STATE_CLASS","DROP_DOWN_EDITOR_CLASS","setLabelWidthByMaxLabelWidth","FIELD_ITEM_CLASS","FIELD_ITEM_CONTENT_CLASS","FIELD_ITEM_CONTENT_HAS_GROUP_CLASS","FIELD_ITEM_CONTENT_HAS_TABS_CLASS","FIELD_ITEM_TAB_CLASS","FORM_CLASS","FORM_FIELD_ITEM_COL_CLASS","FORM_GROUP_CAPTION_CLASS","FORM_GROUP_CLASS","FORM_GROUP_CONTENT_CLASS","FORM_GROUP_CUSTOM_CAPTION_CLASS","FORM_GROUP_WITH_CAPTION_CLASS","FORM_UNDERLINED_CLASS","FORM_VALIDATION_SUMMARY","GROUP_COL_COUNT_ATTR","GROUP_COL_COUNT_CLASS","ROOT_SIMPLE_ITEM_CLASS","tryCreateItemOptionAction","default","FormItemsRunTimeInfo","convertToLabelMarkOptions","concatPaths","convertToLayoutManagerOptions","createItemPathByIndex","getFullOptionName","getItemPath","getOptionNameFromFullName","getTextWithoutSpaces","isEqualToDataFieldOrNameOrTitleOrCaption","isFullPathContainsTabs","tryGetTabPath","Scrollable","TEXTEDITOR_CLASS","TEXTEDITOR_INPUT_CLASS","TOOLBAR_CLASS","ITEM_OPTIONS_FOR_VALIDATION_UPDATING","Form","_init","_dirtyFields","Set","_cachedColCountOptions","_itemsRunTimeInfo","_groupsColCount","_attachSyncSubscriptions","_getDefaultOptions","formID","formData","colCount","screenByWidth","labelLocation","readOnly","onFieldDataChanged","customizeItem","onEditorEnterKey","minColWidth","alignItemLabels","alignItemLabelsInAllGroups","alignRootItemLabels","showColonAfterLabel","showRequiredMark","showOptionalMark","requiredMark","optionalMark","format","requiredMessage","getFormatter","showValidationSummary","scrollingEnabled","stylingMode","editorStylingMode","labelMode","isDirty","_defaultOptionsRules","concat","device","options","_setOptionsByReference","_optionsByReference","validationGroup","_getGroupColCount","$element","parseInt","attr","_applyLabelsWidthByCol","$container","index","arguments","length","labelMarkOptions","fieldItemClass","inOneColumn","cssExcludeTabbedSelector","excludeTabbed","_applyLabelsWidth","applyLabelsOptions","i","_getGroupElementsInColumn","columnIndex","cssColCountSelector","groupSelector","find","_applyLabelsWidthWithGroups","option","$rootSimpleItems","colIndex","_applyLabelsWidthWithNestedGroups","$groups","eq","groupsColIndex","groupColIndex","$groupsByCol","groupColCount","_labelLocation","_alignLabelsInColumn","_ref","layoutManager","items","_getMarkOptions","_checkGrouping","_getColCount","_prepareFormData","_setStylingModeClass","addClass","_initMarkup","addGroup","_getValidationGroup","_clearCachedInstances","setAria","_renderScrollable","_renderLayout","_renderValidationSummary","_lastMarkupScreenFactor","_targetScreenFactor","_getCurrentScreenFactor","_attachResizeObserverSubscription","formRootElement","get","unobserve","observe","_resizeHandler","_cachedLayoutManagers","_","_layoutManager$option","isSingleColumnMode","clear","_alignLabels","_clean","_clearValidationSummary","useNativeScrolling","_scrollable","useNative","useSimulatedScrollbar","useKeyboard","direction","bounceEnabled","_getContent","_this$_scrollable","content","_this$_$validationSum","_$validationSummary","remove","_validationSummary","appendTo","dxValidationSummary","_prepareItems","parentIsTabbedItem","currentPath","isTabs","result","item","path","itemRunTimeInfo","itemIndex","guid","add","dataField","preparedItem","_tryPrepareGroupItemCaption","_tryPrepareGroupItem","_tryPrepareTabbedItem","_tryPrepareItemTemplate","cssItemClass","push","itemType","_prepareGroupCaptionTemplate","captionTemplate","groupCaptionTemplate","_getTemplate","_itemGroupTemplate","bind","_prepareGroupItemTemplate","itemTemplate","template","groupContentTemplate","_itemTabbedTemplate","tabs","that","$content","_rootLayoutManager","_renderLayoutManager","_createLayoutManagerOptions","isRoot","colCountByScreen","onLayoutChanged","onContentReady","e","component","_tryGetItemsForTemplate","$tabPanel","tabPanelOptions","dataSource","onItemRendered","args","_item$tabPanelOptions","_item$tabPanelOptions2","call","itemElement","itemData","container","extendRunTimeItemInfoByKey","tryUpdateTabPanelInstance","instance","Array","isArray","forEach","widgetInstance","tabPanel","_createComponent","parent","on","fullName","value","_itemGroupCaptionTemplate","$group","id","$captionTemplate","_renderGroupCaptionTemplate","data","caption","name","render","model","text","_itemGroupContentTemplate","$groupContent","_renderGroupContentTemplate","empty","_this$_itemsRunTimeIn","includes","editorOptions","inputAttr","toggleClass","groupAria","role","labelledby","extendedLayoutManagerOptions","form","formOptions","$formElement","_isDataUpdating","_triggerOnFieldDataChanged","_extendedLayoutManage","addItemsOrExtendFrom","onDisposing","_ref2","nestedItemsRunTimeInfo","getItemsRunTimeInfo","removeItemsByItems","onFieldItemRendered","_this$_validationSumm","refreshValidationGroup","$parent","layoutManagerOptions","baseColCountByScreen","lg","md","sm","xs","_clearAutoColCountChangedTimeout","autoColCountChangedTimeoutId","setTimeout","_disposed","_refresh","type","_extendConfig","optionFullName","_options","silent","_triggerOnFieldDataChangedByDataSet","_optionChanged","splitFullName","split","search","_itemsOptionChangedHandler","_formDataOptionChangedHandler","_defaultOptionChangedHandler","_invalidate","_clear","removeGroup","previousValue","nameParts","itemPath","_getItemPath","optionNameWithoutPath","replace","simpleOptionName","itemAction","_tryCreateItemOptionAction","_tryExecuteItemOptionAction","_tryChangeLayoutManagerItemOption","_changeItemOption","_generateItemsFromData","slice","join","editor","getEditor","optionName","removeItemsByPathStartWith","itemsRunTimeInfo","action","tryExecute","_updateValidationGroupAndSummaryIfNeeded","_this$_validationSumm2","_setLayoutManagerItemOption","_updateLockCount","beginUpdate","key","findKeyByPath","postponedOperations","endUpdate","resolve","contentReadyHandler","off","tabPath","tabLayoutManager","findGroupOrTabLayoutManagerByPath","endPartIndex","fullOptionName","formItems","layoutManagerItems","layoutItem","visibleIndex","_tryChangeLayoutManagerItemOptions","optionValue","_updateIsDirty","_createActionByOption","Object","keys","_updateFieldValue","editorValue","_getItemByField","field","fieldParts","_getFieldParts","fieldName","fieldPath","resultItem","_getItemByFieldPath","subItemsField","_getSubItemField","separatorIndex","indexOf","resultPath","substr","reverse","isItemWithSubItems","title","isGroupWithName","nameWithoutSpaces","pathNode","pop","_searchItemInEverySubItem","groupItem","_dimensionChanged","currentScreenFactor","_isColCountChanged","oldScreenSize","newScreenSize","isChanged","editorSelector","trigger","delete","size","updateRunTimeInfoForEachEditor","editorAction","isEditor","resetGroup","_updateData","isComplexData","_data","fieldValue","registerKeyHandler","handler","_focusTarget","first","_visibilityChanged","clearTimeout","_dispose","resetValues","reset","editorsData","editorName","updateData","findWidgetInstanceByDataField","findWidgetInstanceByName","getButton","updateDimensions","deferred","update","done","resolveWith","promise","itemOption","allowUpdateItems","validate","validateGroup","getItemID","getTargetScreenFactor"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/form/m_form.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/form/m_form.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport \"../../../ui/validation_summary\";\r\nimport \"../../../ui/validation_group\";\r\nimport \"../../ui/form/m_form.layout_manager\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    triggerResizeEvent,\r\n    triggerShownEvent\r\n} from \"../../../common/core/events/visibility_change\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport config from \"../../../core/config\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport Guid from \"../../../core/guid\";\r\nimport $ from \"../../../core/renderer\";\r\nimport resizeObserverSingleton from \"../../../core/resize_observer\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    Deferred\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isObject,\r\n    isString\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    defaultScreenFactorFunc,\r\n    getCurrentScreenFactor,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport Editor from \"../../../ui/editor/editor\";\r\nimport TabPanel from \"../../../ui/tab_panel\";\r\nimport {\r\n    isMaterial,\r\n    isMaterialBased\r\n} from \"../../../ui/themes\";\r\nimport ValidationEngine from \"../../../ui/validation_engine\";\r\nimport Widget, {\r\n    FOCUSED_STATE_CLASS\r\n} from \"../../core/widget/widget\";\r\nimport {\r\n    DROP_DOWN_EDITOR_CLASS\r\n} from \"../../ui/drop_down_editor/m_drop_down_editor\";\r\nimport {\r\n    setLabelWidthByMaxLabelWidth\r\n} from \"../../ui/form/components/m_label\";\r\nimport {\r\n    FIELD_ITEM_CLASS,\r\n    FIELD_ITEM_CONTENT_CLASS,\r\n    FIELD_ITEM_CONTENT_HAS_GROUP_CLASS,\r\n    FIELD_ITEM_CONTENT_HAS_TABS_CLASS,\r\n    FIELD_ITEM_TAB_CLASS,\r\n    FORM_CLASS,\r\n    FORM_FIELD_ITEM_COL_CLASS,\r\n    FORM_GROUP_CAPTION_CLASS,\r\n    FORM_GROUP_CLASS,\r\n    FORM_GROUP_CONTENT_CLASS,\r\n    FORM_GROUP_CUSTOM_CAPTION_CLASS,\r\n    FORM_GROUP_WITH_CAPTION_CLASS,\r\n    FORM_UNDERLINED_CLASS,\r\n    FORM_VALIDATION_SUMMARY,\r\n    GROUP_COL_COUNT_ATTR,\r\n    GROUP_COL_COUNT_CLASS,\r\n    ROOT_SIMPLE_ITEM_CLASS\r\n} from \"../../ui/form/constants\";\r\nimport tryCreateItemOptionAction from \"../../ui/form/m_form.item_options_actions\";\r\nimport {\r\n    default as FormItemsRunTimeInfo\r\n} from \"../../ui/form/m_form.items_runtime_info\";\r\nimport {\r\n    convertToLabelMarkOptions\r\n} from \"../../ui/form/m_form.layout_manager.utils\";\r\nimport {\r\n    concatPaths,\r\n    convertToLayoutManagerOptions,\r\n    createItemPathByIndex,\r\n    getFullOptionName,\r\n    getItemPath,\r\n    getOptionNameFromFullName,\r\n    getTextWithoutSpaces,\r\n    isEqualToDataFieldOrNameOrTitleOrCaption,\r\n    isFullPathContainsTabs,\r\n    tryGetTabPath\r\n} from \"../../ui/form/m_form.utils\";\r\nimport Scrollable from \"../../ui/scroll_view/m_scrollable\";\r\nimport {\r\n    TEXTEDITOR_CLASS,\r\n    TEXTEDITOR_INPUT_CLASS\r\n} from \"../../ui/text_box/m_text_editor.base\";\r\nimport {\r\n    TOOLBAR_CLASS\r\n} from \"../../ui/toolbar/m_constants\";\r\nconst ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\r\nclass Form extends Widget {\r\n    _init() {\r\n        super._init();\r\n        this._dirtyFields = new Set;\r\n        this._cachedColCountOptions = [];\r\n        this._itemsRunTimeInfo = new FormItemsRunTimeInfo;\r\n        this._groupsColCount = [];\r\n        this._attachSyncSubscriptions()\r\n    }\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            formID: `dx-${new Guid}`,\r\n            formData: {},\r\n            colCount: 1,\r\n            screenByWidth: defaultScreenFactorFunc,\r\n            labelLocation: \"left\",\r\n            readOnly: false,\r\n            onFieldDataChanged: null,\r\n            customizeItem: null,\r\n            onEditorEnterKey: null,\r\n            minColWidth: 200,\r\n            alignItemLabels: true,\r\n            alignItemLabelsInAllGroups: true,\r\n            alignRootItemLabels: true,\r\n            showColonAfterLabel: true,\r\n            showRequiredMark: true,\r\n            showOptionalMark: false,\r\n            requiredMark: \"*\",\r\n            optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\r\n            requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\r\n            showValidationSummary: false,\r\n            scrollingEnabled: false,\r\n            stylingMode: config().editorStylingMode,\r\n            labelMode: \"outside\",\r\n            isDirty: false\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device: () => isMaterialBased(),\r\n            options: {\r\n                labelLocation: \"top\"\r\n            }\r\n        }, {\r\n            device: () => isMaterial(),\r\n            options: {\r\n                showColonAfterLabel: false\r\n            }\r\n        }])\r\n    }\r\n    _setOptionsByReference() {\r\n        super._setOptionsByReference();\r\n        extend(this._optionsByReference, {\r\n            formData: true,\r\n            validationGroup: true\r\n        })\r\n    }\r\n    _getGroupColCount($element) {\r\n        return parseInt($element.attr(GROUP_COL_COUNT_ATTR))\r\n    }\r\n    _applyLabelsWidthByCol($container, index) {\r\n        let options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\r\n        let labelMarkOptions = arguments.length > 3 ? arguments[3] : void 0;\r\n        const fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\r\n        const cssExcludeTabbedSelector = options.excludeTabbed ? `:not(.${FIELD_ITEM_TAB_CLASS})` : \"\";\r\n        setLabelWidthByMaxLabelWidth($container, `.${fieldItemClass}${cssExcludeTabbedSelector}`, labelMarkOptions)\r\n    }\r\n    _applyLabelsWidth($container, excludeTabbed, inOneColumn, colCount, labelMarkOptions) {\r\n        colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\r\n        const applyLabelsOptions = {\r\n            excludeTabbed: excludeTabbed,\r\n            inOneColumn: inOneColumn\r\n        };\r\n        let i;\r\n        for (i = 0; i < colCount; i++) {\r\n            this._applyLabelsWidthByCol($container, i, applyLabelsOptions, labelMarkOptions)\r\n        }\r\n    }\r\n    _getGroupElementsInColumn($container, columnIndex, colCount) {\r\n        const cssColCountSelector = isDefined(colCount) ? `.${GROUP_COL_COUNT_CLASS}${colCount}` : \"\";\r\n        const groupSelector = `.${FORM_FIELD_ITEM_COL_CLASS}${columnIndex} > .${FIELD_ITEM_CONTENT_CLASS} > .${FORM_GROUP_CLASS}${cssColCountSelector}`;\r\n        return $container.find(groupSelector)\r\n    }\r\n    _applyLabelsWidthWithGroups($container, colCount, excludeTabbed, labelMarkOptions) {\r\n        const {\r\n            alignRootItemLabels: alignRootItemLabels\r\n        } = this.option();\r\n        if (true === alignRootItemLabels) {\r\n            const $rootSimpleItems = $container.find(`.${ROOT_SIMPLE_ITEM_CLASS}`);\r\n            for (let colIndex = 0; colIndex < colCount; colIndex++) {\r\n                this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed, labelMarkOptions)\r\n            }\r\n        }\r\n        const alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\r\n        if (alignItemLabelsInAllGroups) {\r\n            this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions)\r\n        } else {\r\n            const $groups = this.$element().find(`.${FORM_GROUP_CLASS}`);\r\n            let i;\r\n            for (i = 0; i < $groups.length; i++) {\r\n                this._applyLabelsWidth($groups.eq(i), excludeTabbed, void 0, void 0, labelMarkOptions)\r\n            }\r\n        }\r\n    }\r\n    _applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions) {\r\n        const applyLabelsOptions = {\r\n            excludeTabbed: excludeTabbed\r\n        };\r\n        let colIndex;\r\n        let groupsColIndex;\r\n        let groupColIndex;\r\n        let $groupsByCol;\r\n        for (colIndex = 0; colIndex < colCount; colIndex++) {\r\n            $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\r\n            this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions, labelMarkOptions);\r\n            for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\r\n                $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\r\n                const groupColCount = this._getGroupColCount($groupsByCol);\r\n                for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\r\n                    this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions, labelMarkOptions)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _labelLocation() {\r\n        const {\r\n            labelLocation: labelLocation\r\n        } = this.option();\r\n        return labelLocation\r\n    }\r\n    _alignLabelsInColumn(_ref) {\r\n        let {\r\n            layoutManager: layoutManager,\r\n            inOneColumn: inOneColumn,\r\n            $container: $container,\r\n            excludeTabbed: excludeTabbed,\r\n            items: items\r\n        } = _ref;\r\n        if (!hasWindow() || \"top\" === this._labelLocation()) {\r\n            return\r\n        }\r\n        const labelMarkOptions = convertToLabelMarkOptions(layoutManager._getMarkOptions());\r\n        if (inOneColumn) {\r\n            this._applyLabelsWidth($container, excludeTabbed, true, void 0, labelMarkOptions)\r\n        } else if (this._checkGrouping(items)) {\r\n            this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed, labelMarkOptions)\r\n        } else {\r\n            this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount(), labelMarkOptions)\r\n        }\r\n    }\r\n    _prepareFormData() {\r\n        if (!isDefined(this.option(\"formData\"))) {\r\n            this.option(\"formData\", {})\r\n        }\r\n    }\r\n    _setStylingModeClass() {\r\n        const {\r\n            stylingMode: stylingMode\r\n        } = this.option();\r\n        if (\"underlined\" === stylingMode) {\r\n            this.$element().addClass(FORM_UNDERLINED_CLASS)\r\n        }\r\n    }\r\n    _initMarkup() {\r\n        ValidationEngine.addGroup(this._getValidationGroup(), false);\r\n        this._clearCachedInstances();\r\n        this._prepareFormData();\r\n        this.$element().addClass(FORM_CLASS);\r\n        this._setStylingModeClass();\r\n        super._initMarkup();\r\n        this.setAria(\"role\", \"form\", this.$element());\r\n        if (this.option(\"scrollingEnabled\")) {\r\n            this._renderScrollable()\r\n        }\r\n        this._renderLayout();\r\n        this._renderValidationSummary();\r\n        this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor();\r\n        this._attachResizeObserverSubscription()\r\n    }\r\n    _attachResizeObserverSubscription() {\r\n        if (hasWindow()) {\r\n            const formRootElement = this.$element().get(0);\r\n            resizeObserverSingleton.unobserve(formRootElement);\r\n            resizeObserverSingleton.observe(formRootElement, (() => {\r\n                this._resizeHandler()\r\n            }))\r\n        }\r\n    }\r\n    _resizeHandler() {\r\n        if (this._cachedLayoutManagers.length) {\r\n            each(this._cachedLayoutManagers, ((_, layoutManager) => {\r\n                var _layoutManager$option;\r\n                null === (_layoutManager$option = layoutManager.option(\"onLayoutChanged\")) || void 0 === _layoutManager$option || _layoutManager$option(layoutManager.isSingleColumnMode())\r\n            }))\r\n        }\r\n    }\r\n    _getCurrentScreenFactor() {\r\n        return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\"\r\n    }\r\n    _clearCachedInstances() {\r\n        this._itemsRunTimeInfo.clear();\r\n        this._cachedLayoutManagers = []\r\n    }\r\n    _alignLabels(layoutManager, inOneColumn) {\r\n        this._alignLabelsInColumn({\r\n            $container: this.$element(),\r\n            layoutManager: layoutManager,\r\n            excludeTabbed: true,\r\n            items: this.option(\"items\"),\r\n            inOneColumn: inOneColumn\r\n        });\r\n        triggerResizeEvent(this.$element().find(`.${TOOLBAR_CLASS}`))\r\n    }\r\n    _clean() {\r\n        this._clearValidationSummary();\r\n        super._clean();\r\n        this._groupsColCount = [];\r\n        this._cachedColCountOptions = [];\r\n        this._lastMarkupScreenFactor = void 0;\r\n        resizeObserverSingleton.unobserve(this.$element().get(0))\r\n    }\r\n    _renderScrollable() {\r\n        const useNativeScrolling = this.option(\"useNativeScrolling\");\r\n        this._scrollable = new Scrollable(this.$element(), {\r\n            useNative: !!useNativeScrolling,\r\n            useSimulatedScrollbar: !useNativeScrolling,\r\n            useKeyboard: false,\r\n            direction: \"both\",\r\n            bounceEnabled: false\r\n        })\r\n    }\r\n    _getContent() {\r\n        var _this$_scrollable;\r\n        return this.option(\"scrollingEnabled\") ? $(null === (_this$_scrollable = this._scrollable) || void 0 === _this$_scrollable ? void 0 : _this$_scrollable.content()) : this.$element()\r\n    }\r\n    _clearValidationSummary() {\r\n        var _this$_$validationSum;\r\n        null === (_this$_$validationSum = this._$validationSummary) || void 0 === _this$_$validationSum || _this$_$validationSum.remove();\r\n        this._$validationSummary = void 0;\r\n        this._validationSummary = void 0\r\n    }\r\n    _renderValidationSummary() {\r\n        this._clearValidationSummary();\r\n        if (this.option(\"showValidationSummary\")) {\r\n            this._$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\r\n            this._validationSummary = this._$validationSummary.dxValidationSummary({\r\n                validationGroup: this._getValidationGroup()\r\n            }).dxValidationSummary(\"instance\")\r\n        }\r\n    }\r\n    _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\r\n        if (items) {\r\n            const result = [];\r\n            for (let i = 0; i < items.length; i++) {\r\n                let item = items[i];\r\n                const path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\r\n                const itemRunTimeInfo = {\r\n                    item: item,\r\n                    itemIndex: i,\r\n                    path: path\r\n                };\r\n                const guid = this._itemsRunTimeInfo.add(itemRunTimeInfo);\r\n                if (isString(item)) {\r\n                    item = {\r\n                        dataField: item\r\n                    }\r\n                }\r\n                if (isObject(item)) {\r\n                    const preparedItem = _extends({}, item);\r\n                    itemRunTimeInfo.preparedItem = preparedItem;\r\n                    preparedItem.guid = guid;\r\n                    this._tryPrepareGroupItemCaption(preparedItem);\r\n                    this._tryPrepareGroupItem(preparedItem);\r\n                    this._tryPrepareTabbedItem(preparedItem, path);\r\n                    this._tryPrepareItemTemplate(preparedItem);\r\n                    if (parentIsTabbedItem) {\r\n                        preparedItem.cssItemClass = FIELD_ITEM_TAB_CLASS\r\n                    }\r\n                    if (preparedItem.items) {\r\n                        preparedItem.items = this._prepareItems(preparedItem.items, parentIsTabbedItem, path)\r\n                    }\r\n                    result.push(preparedItem)\r\n                } else {\r\n                    result.push(item)\r\n                }\r\n            }\r\n            return result\r\n        }\r\n    }\r\n    _tryPrepareGroupItemCaption(item) {\r\n        if (\"group\" === item.itemType) {\r\n            item._prepareGroupCaptionTemplate = captionTemplate => {\r\n                if (item.captionTemplate) {\r\n                    item.groupCaptionTemplate = this._getTemplate(captionTemplate)\r\n                }\r\n                item.captionTemplate = this._itemGroupTemplate.bind(this, item)\r\n            };\r\n            item._prepareGroupCaptionTemplate(item.captionTemplate)\r\n        }\r\n    }\r\n    _tryPrepareGroupItem(item) {\r\n        if (\"group\" === item.itemType) {\r\n            item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\r\n            item._prepareGroupItemTemplate = itemTemplate => {\r\n                if (item.template) {\r\n                    item.groupContentTemplate = this._getTemplate(itemTemplate)\r\n                }\r\n                item.template = this._itemGroupTemplate.bind(this, item)\r\n            };\r\n            item._prepareGroupItemTemplate(item.template)\r\n        }\r\n    }\r\n    _tryPrepareTabbedItem(item, path) {\r\n        if (\"tabbed\" === item.itemType) {\r\n            item.template = this._itemTabbedTemplate.bind(this, item);\r\n            item.tabs = this._prepareItems(item.tabs, true, path, true)\r\n        }\r\n    }\r\n    _tryPrepareItemTemplate(item) {\r\n        if (item.template) {\r\n            item.template = this._getTemplate(item.template)\r\n        }\r\n    }\r\n    _checkGrouping(items) {\r\n        if (items) {\r\n            for (let i = 0; i < items.length; i++) {\r\n                const item = items[i];\r\n                if (\"group\" === item.itemType) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _renderLayout() {\r\n        const that = this;\r\n        let items = that.option(\"items\");\r\n        const $content = that._getContent();\r\n        items = that._prepareItems(items);\r\n        that._rootLayoutManager = that._renderLayoutManager($content, this._createLayoutManagerOptions(items, {\r\n            isRoot: true,\r\n            colCount: that.option(\"colCount\"),\r\n            alignItemLabels: that.option(\"alignItemLabels\"),\r\n            screenByWidth: this.option(\"screenByWidth\"),\r\n            colCountByScreen: this.option(\"colCountByScreen\"),\r\n            onLayoutChanged(inOneColumn) {\r\n                that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn)\r\n            },\r\n            onContentReady(e) {\r\n                that._alignLabels(e.component, e.component.isSingleColumnMode())\r\n            }\r\n        }))\r\n    }\r\n    _tryGetItemsForTemplate(item) {\r\n        return item.items || []\r\n    }\r\n    _itemTabbedTemplate(item, e, $container) {\r\n        const $tabPanel = $(\"<div>\").appendTo($container);\r\n        const tabPanelOptions = extend({}, item.tabPanelOptions, {\r\n            dataSource: item.tabs,\r\n            onItemRendered: args => {\r\n                var _item$tabPanelOptions, _item$tabPanelOptions2;\r\n                null === (_item$tabPanelOptions = item.tabPanelOptions) || void 0 === _item$tabPanelOptions || null === (_item$tabPanelOptions2 = _item$tabPanelOptions.onItemRendered) || void 0 === _item$tabPanelOptions2 || _item$tabPanelOptions2.call(_item$tabPanelOptions, args);\r\n                triggerShownEvent(args.itemElement)\r\n            },\r\n            itemTemplate: (itemData, e, container) => {\r\n                const $container = $(container);\r\n                const alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\r\n                const layoutManager = this._renderLayoutManager($container, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(itemData), {\r\n                    colCount: itemData.colCount,\r\n                    alignItemLabels: alignItemLabels,\r\n                    screenByWidth: this.option(\"screenByWidth\"),\r\n                    colCountByScreen: itemData.colCountByScreen,\r\n                    cssItemClass: itemData.cssItemClass,\r\n                    onLayoutChanged: inOneColumn => {\r\n                        this._alignLabelsInColumn({\r\n                            $container: $container,\r\n                            layoutManager: layoutManager,\r\n                            items: itemData.items,\r\n                            inOneColumn: inOneColumn\r\n                        })\r\n                    }\r\n                }));\r\n                if (this._itemsRunTimeInfo) {\r\n                    this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\r\n                        layoutManager: layoutManager\r\n                    })\r\n                }\r\n                if (alignItemLabels) {\r\n                    this._alignLabelsInColumn({\r\n                        $container: $container,\r\n                        layoutManager: layoutManager,\r\n                        items: itemData.items,\r\n                        inOneColumn: layoutManager.isSingleColumnMode()\r\n                    })\r\n                }\r\n            }\r\n        });\r\n        const tryUpdateTabPanelInstance = (items, instance) => {\r\n            if (Array.isArray(items)) {\r\n                items.forEach((item => this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\r\n                    widgetInstance: instance\r\n                })))\r\n            }\r\n        };\r\n        const tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\r\n        $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\r\n        tabPanel.on(\"optionChanged\", (e => {\r\n            if (\"dataSource\" === e.fullName) {\r\n                tryUpdateTabPanelInstance(e.value, e.component)\r\n            }\r\n        }));\r\n        tryUpdateTabPanelInstance([{\r\n            guid: item.guid\r\n        }, ...item.tabs ?? []], tabPanel)\r\n    }\r\n    _itemGroupCaptionTemplate(item, $group, id) {\r\n        if (item.groupCaptionTemplate) {\r\n            const $captionTemplate = $(\"<div>\").addClass(FORM_GROUP_CUSTOM_CAPTION_CLASS).attr(\"id\", id).appendTo($group);\r\n            item._renderGroupCaptionTemplate = () => {\r\n                const data = {\r\n                    component: this,\r\n                    caption: item.caption,\r\n                    name: item.name\r\n                };\r\n                item.groupCaptionTemplate.render({\r\n                    model: data,\r\n                    container: getPublicElement($captionTemplate)\r\n                })\r\n            };\r\n            item._renderGroupCaptionTemplate();\r\n            return\r\n        }\r\n        if (item.caption) {\r\n            $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).attr(\"id\", id).appendTo($group)\r\n        }\r\n    }\r\n    _itemGroupContentTemplate(item, $group) {\r\n        const $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\r\n        if (item.groupContentTemplate) {\r\n            item._renderGroupContentTemplate = () => {\r\n                $groupContent.empty();\r\n                const data = {\r\n                    formData: this.option(\"formData\"),\r\n                    component: this\r\n                };\r\n                item.groupContentTemplate.render({\r\n                    model: data,\r\n                    container: getPublicElement($groupContent)\r\n                })\r\n            };\r\n            item._renderGroupContentTemplate()\r\n        } else {\r\n            var _this$_itemsRunTimeIn;\r\n            const layoutManager = this._renderLayoutManager($groupContent, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(item), {\r\n                colCount: item.colCount,\r\n                colCountByScreen: item.colCountByScreen,\r\n                alignItemLabels: item.alignItemLabels,\r\n                cssItemClass: item.cssItemClass\r\n            }));\r\n            null === (_this$_itemsRunTimeIn = this._itemsRunTimeInfo) || void 0 === _this$_itemsRunTimeIn || _this$_itemsRunTimeIn.extendRunTimeItemInfoByKey(item.guid, {\r\n                layoutManager: layoutManager\r\n            });\r\n            const colCount = layoutManager._getColCount();\r\n            if (!this._groupsColCount.includes(colCount)) {\r\n                this._groupsColCount.push(colCount)\r\n            }\r\n            $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\r\n            $group.attr(GROUP_COL_COUNT_ATTR, colCount)\r\n        }\r\n    }\r\n    _itemGroupTemplate(item, options, $container) {\r\n        const {\r\n            id: id\r\n        } = options.editorOptions.inputAttr;\r\n        const $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\r\n        const groupAria = {\r\n            role: \"group\",\r\n            labelledby: id\r\n        };\r\n        this.setAria(groupAria, $group);\r\n        $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\r\n        this._itemGroupCaptionTemplate(item, $group, id);\r\n        this._itemGroupContentTemplate(item, $group)\r\n    }\r\n    _createLayoutManagerOptions(items, extendedLayoutManagerOptions) {\r\n        return convertToLayoutManagerOptions({\r\n            form: this,\r\n            formOptions: this.option(),\r\n            $formElement: this.$element(),\r\n            items: items,\r\n            validationGroup: this._getValidationGroup(),\r\n            extendedLayoutManagerOptions: extendedLayoutManagerOptions,\r\n            onFieldDataChanged: args => {\r\n                if (!this._isDataUpdating) {\r\n                    this._triggerOnFieldDataChanged(args)\r\n                }\r\n            },\r\n            onContentReady: args => {\r\n                var _extendedLayoutManage;\r\n                this._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\r\n                null === (_extendedLayoutManage = extendedLayoutManagerOptions.onContentReady) || void 0 === _extendedLayoutManage || _extendedLayoutManage.call(extendedLayoutManagerOptions, args)\r\n            },\r\n            onDisposing: _ref2 => {\r\n                let {\r\n                    component: component\r\n                } = _ref2;\r\n                const nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\r\n                this._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo)\r\n            },\r\n            onFieldItemRendered: () => {\r\n                var _this$_validationSumm;\r\n                null === (_this$_validationSumm = this._validationSummary) || void 0 === _this$_validationSumm || _this$_validationSumm.refreshValidationGroup()\r\n            }\r\n        })\r\n    }\r\n    _renderLayoutManager($parent, layoutManagerOptions) {\r\n        const baseColCountByScreen = {\r\n            lg: layoutManagerOptions.colCount,\r\n            md: layoutManagerOptions.colCount,\r\n            sm: layoutManagerOptions.colCount,\r\n            xs: 1\r\n        };\r\n        this._cachedColCountOptions.push({\r\n            colCountByScreen: extend(baseColCountByScreen, layoutManagerOptions.colCountByScreen)\r\n        });\r\n        const $element = $(\"<div>\");\r\n        $element.appendTo($parent);\r\n        const instance = this._createComponent($element, \"dxLayoutManager\", layoutManagerOptions);\r\n        instance.on(\"autoColCountChanged\", (() => {\r\n            this._clearAutoColCountChangedTimeout();\r\n            this.autoColCountChangedTimeoutId = setTimeout((() => !this._disposed && this._refresh()), 0)\r\n        }));\r\n        this._cachedLayoutManagers.push(instance);\r\n        return instance\r\n    }\r\n    _getValidationGroup() {\r\n        return this.option(\"validationGroup\") || this\r\n    }\r\n    _createComponent($element, type, config) {\r\n        config = config || {};\r\n        this._extendConfig(config, {\r\n            readOnly: this.option(\"readOnly\")\r\n        });\r\n        return super._createComponent($element, type, config)\r\n    }\r\n    _attachSyncSubscriptions() {\r\n        const that = this;\r\n        that.on(\"optionChanged\", (args => {\r\n            const optionFullName = args.fullName;\r\n            if (\"formData\" === optionFullName) {\r\n                if (!isDefined(args.value)) {\r\n                    that._options.silent(\"formData\", args.value = {})\r\n                }\r\n                that._triggerOnFieldDataChangedByDataSet(args.value)\r\n            }\r\n            if (that._cachedLayoutManagers.length) {\r\n                each(that._cachedLayoutManagers, ((index, layoutManager) => {\r\n                    if (\"formData\" === optionFullName) {\r\n                        that._isDataUpdating = true;\r\n                        layoutManager.option(\"layoutData\", args.value);\r\n                        that._isDataUpdating = false\r\n                    }\r\n                    if (\"readOnly\" === args.name || \"disabled\" === args.name) {\r\n                        layoutManager.option(optionFullName, args.value)\r\n                    }\r\n                }))\r\n            }\r\n        }))\r\n    }\r\n    _optionChanged(args) {\r\n        const splitFullName = args.fullName.split(\".\");\r\n        if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"items\") && this._itemsOptionChangedHandler(args)) {\r\n            return\r\n        }\r\n        if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"formData\") && this._formDataOptionChangedHandler(args)) {\r\n            return\r\n        }\r\n        this._defaultOptionChangedHandler(args)\r\n    }\r\n    _defaultOptionChangedHandler(args) {\r\n        switch (args.name) {\r\n            case \"formData\":\r\n                if (!this.option(\"items\")) {\r\n                    this._invalidate()\r\n                } else if (isEmptyObject(args.value)) {\r\n                    this._clear()\r\n                }\r\n                break;\r\n            case \"onFieldDataChanged\":\r\n            case \"alignRootItemLabels\":\r\n            case \"readOnly\":\r\n            case \"isDirty\":\r\n                break;\r\n            case \"items\":\r\n            case \"colCount\":\r\n            case \"onEditorEnterKey\":\r\n            case \"labelLocation\":\r\n            case \"labelMode\":\r\n            case \"alignItemLabels\":\r\n            case \"showColonAfterLabel\":\r\n            case \"customizeItem\":\r\n            case \"alignItemLabelsInAllGroups\":\r\n            case \"showRequiredMark\":\r\n            case \"showOptionalMark\":\r\n            case \"requiredMark\":\r\n            case \"optionalMark\":\r\n            case \"requiredMessage\":\r\n            case \"scrollingEnabled\":\r\n            case \"formID\":\r\n            case \"colCountByScreen\":\r\n            case \"screenByWidth\":\r\n            case \"stylingMode\":\r\n                this._invalidate();\r\n                break;\r\n            case \"showValidationSummary\":\r\n                this._renderValidationSummary();\r\n                break;\r\n            case \"minColWidth\": {\r\n                const {\r\n                    colCount: colCount\r\n                } = this.option();\r\n                if (\"auto\" === colCount) {\r\n                    this._invalidate()\r\n                }\r\n                break\r\n            }\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._rootLayoutManager.option(args.name, args.value);\r\n                this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\r\n                break;\r\n            case \"validationGroup\":\r\n                ValidationEngine.removeGroup(args.previousValue || this);\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _itemsOptionChangedHandler(args) {\r\n        const nameParts = args.fullName.split(\".\");\r\n        const {\r\n            value: value\r\n        } = args;\r\n        const itemPath = this._getItemPath(nameParts);\r\n        const item = this.option(itemPath);\r\n        const optionNameWithoutPath = args.fullName.replace(`${itemPath}.`, \"\");\r\n        const simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\r\n        const itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\r\n        let result = this._tryExecuteItemOptionAction(itemAction) || this._tryChangeLayoutManagerItemOption(args.fullName, value);\r\n        if (!result && item) {\r\n            this._changeItemOption(item, optionNameWithoutPath, value);\r\n            const items = this._generateItemsFromData(this.option(\"items\"));\r\n            this.option(\"items\", items);\r\n            result = true\r\n        }\r\n        return result\r\n    }\r\n    _formDataOptionChangedHandler(args) {\r\n        const nameParts = args.fullName.split(\".\");\r\n        const {\r\n            value: value\r\n        } = args;\r\n        const dataField = nameParts.slice(1).join(\".\");\r\n        const editor = this.getEditor(dataField);\r\n        if (editor) {\r\n            editor.option(\"value\", value)\r\n        } else {\r\n            this._triggerOnFieldDataChanged({\r\n                dataField: dataField,\r\n                value: value\r\n            })\r\n        }\r\n        return true\r\n    }\r\n    _tryCreateItemOptionAction(optionName, item, value, previousValue, itemPath) {\r\n        if (\"tabs\" === optionName) {\r\n            this._itemsRunTimeInfo.removeItemsByPathStartWith(`${itemPath}.tabs`);\r\n            value = this._prepareItems(value, true, itemPath, true)\r\n        }\r\n        return tryCreateItemOptionAction(optionName, {\r\n            item: item,\r\n            value: value,\r\n            previousValue: previousValue,\r\n            itemsRunTimeInfo: this._itemsRunTimeInfo\r\n        })\r\n    }\r\n    _tryExecuteItemOptionAction(action) {\r\n        return null === action || void 0 === action ? void 0 : action.tryExecute()\r\n    }\r\n    _updateValidationGroupAndSummaryIfNeeded(fullName) {\r\n        const optionName = getOptionNameFromFullName(fullName);\r\n        if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.includes(optionName)) {\r\n            ValidationEngine.addGroup(this._getValidationGroup(), false);\r\n            if (this.option(\"showValidationSummary\")) {\r\n                var _this$_validationSumm2;\r\n                null === (_this$_validationSumm2 = this._validationSummary) || void 0 === _this$_validationSumm2 || _this$_validationSumm2.refreshValidationGroup()\r\n            }\r\n        }\r\n    }\r\n    _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\r\n        if (this._updateLockCount > 0) {\r\n            !layoutManager._updateLockCount && layoutManager.beginUpdate();\r\n            const key = this._itemsRunTimeInfo.findKeyByPath(path);\r\n            this.postponedOperations.add(key, (() => {\r\n                !layoutManager._disposed && layoutManager.endUpdate();\r\n                return Deferred().resolve()\r\n            }))\r\n        }\r\n        const contentReadyHandler = e => {\r\n            e.component.off(\"contentReady\", contentReadyHandler);\r\n            if (isFullPathContainsTabs(path)) {\r\n                const tabPath = tryGetTabPath(path);\r\n                const tabLayoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(tabPath);\r\n                if (tabLayoutManager) {\r\n                    this._alignLabelsInColumn({\r\n                        items: tabLayoutManager.option(\"items\"),\r\n                        layoutManager: tabLayoutManager,\r\n                        $container: tabLayoutManager.$element(),\r\n                        inOneColumn: tabLayoutManager.isSingleColumnMode()\r\n                    })\r\n                }\r\n            } else {\r\n                this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode())\r\n            }\r\n        };\r\n        layoutManager.on(\"contentReady\", contentReadyHandler);\r\n        layoutManager.option(optionName, value);\r\n        this._updateValidationGroupAndSummaryIfNeeded(optionName)\r\n    }\r\n    _tryChangeLayoutManagerItemOption(fullName, value) {\r\n        const nameParts = fullName.split(\".\");\r\n        const optionName = getOptionNameFromFullName(fullName);\r\n        if (\"items\" === optionName && nameParts.length > 1) {\r\n            const itemPath = this._getItemPath(nameParts);\r\n            const layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(itemPath);\r\n            if (layoutManager) {\r\n                this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\r\n                const items = this._prepareItems(value, false, itemPath);\r\n                this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\r\n                return true\r\n            }\r\n        } else if (nameParts.length > 2) {\r\n            const endPartIndex = nameParts.length - 2;\r\n            const itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\r\n            const layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(itemPath);\r\n            if (layoutManager) {\r\n                const fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\r\n                if (\"editorType\" === optionName) {\r\n                    if (layoutManager.option(fullOptionName) !== value) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (\"visible\" === optionName) {\r\n                    const formItems = this.option(getFullOptionName(itemPath, \"items\"));\r\n                    if (null !== formItems && void 0 !== formItems && formItems.length) {\r\n                        const layoutManagerItems = layoutManager.option(\"items\");\r\n                        formItems.forEach(((item, index) => {\r\n                            const layoutItem = layoutManagerItems[index];\r\n                            layoutItem.visibleIndex = item.visibleIndex\r\n                        }))\r\n                    }\r\n                }\r\n                this._setLayoutManagerItemOption(layoutManager, fullOptionName, value, itemPath);\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _tryChangeLayoutManagerItemOptions(itemPath, options) {\r\n        let result;\r\n        this.beginUpdate();\r\n        each(options, ((optionName, optionValue) => {\r\n            result = this._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        }));\r\n        this.endUpdate();\r\n        return result\r\n    }\r\n    _getItemPath(nameParts) {\r\n        let itemPath = nameParts[0];\r\n        let i;\r\n        for (i = 1; i < nameParts.length; i++) {\r\n            if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\r\n                itemPath += `.${nameParts[i]}`\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        return itemPath\r\n    }\r\n    _triggerOnFieldDataChanged(args) {\r\n        this._updateIsDirty(args.dataField);\r\n        this._createActionByOption(\"onFieldDataChanged\")(args)\r\n    }\r\n    _triggerOnFieldDataChangedByDataSet(data) {\r\n        if (data && isObject(data)) {\r\n            Object.keys(data).forEach((key => {\r\n                this._triggerOnFieldDataChanged({\r\n                    dataField: key,\r\n                    value: data[key]\r\n                })\r\n            }))\r\n        }\r\n    }\r\n    _updateFieldValue(dataField, value) {\r\n        if (isDefined(this.option(\"formData\"))) {\r\n            const editor = this.getEditor(dataField);\r\n            this.option(`formData.${dataField}`, value);\r\n            if (editor) {\r\n                const editorValue = editor.option(\"value\");\r\n                if (editorValue !== value) {\r\n                    editor.option(\"value\", value)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _generateItemsFromData(items) {\r\n        const formData = this.option(\"formData\");\r\n        const result = [];\r\n        if (!items && isDefined(formData)) {\r\n            each(formData, (dataField => {\r\n                result.push({\r\n                    dataField: dataField\r\n                })\r\n            }))\r\n        }\r\n        if (items) {\r\n            each(items, ((index, item) => {\r\n                if (isObject(item)) {\r\n                    result.push(item)\r\n                } else {\r\n                    result.push({\r\n                        dataField: item\r\n                    })\r\n                }\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    _getItemByField(field, items) {\r\n        const that = this;\r\n        const fieldParts = isObject(field) ? field : that._getFieldParts(field);\r\n        const {\r\n            fieldName: fieldName\r\n        } = fieldParts;\r\n        const {\r\n            fieldPath: fieldPath\r\n        } = fieldParts;\r\n        let resultItem;\r\n        if (items.length) {\r\n            each(items, ((index, item) => {\r\n                const {\r\n                    itemType: itemType\r\n                } = item;\r\n                if (fieldPath.length) {\r\n                    const path = fieldPath.slice();\r\n                    item = that._getItemByFieldPath(path, fieldName, item)\r\n                } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\r\n                    const subItemsField = that._getSubItemField(itemType);\r\n                    item.items = that._generateItemsFromData(item.items);\r\n                    item = that._getItemByField({\r\n                        fieldName: fieldName,\r\n                        fieldPath: fieldPath\r\n                    }, item[subItemsField])\r\n                }\r\n                if (isEqualToDataFieldOrNameOrTitleOrCaption(item, fieldName)) {\r\n                    resultItem = item;\r\n                    return false\r\n                }\r\n            }))\r\n        }\r\n        return resultItem\r\n    }\r\n    _getFieldParts(field) {\r\n        let fieldName = field;\r\n        let separatorIndex = fieldName.indexOf(\".\");\r\n        const resultPath = [];\r\n        while (-1 !== separatorIndex) {\r\n            resultPath.push(fieldName.substr(0, separatorIndex));\r\n            fieldName = fieldName.substr(separatorIndex + 1);\r\n            separatorIndex = fieldName.indexOf(\".\")\r\n        }\r\n        return {\r\n            fieldName: fieldName,\r\n            fieldPath: resultPath.reverse()\r\n        }\r\n    }\r\n    _getItemByFieldPath(path, fieldName, item) {\r\n        const that = this;\r\n        const {\r\n            itemType: itemType\r\n        } = item;\r\n        const subItemsField = that._getSubItemField(itemType);\r\n        const isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\r\n        let result;\r\n        do {\r\n            if (isItemWithSubItems) {\r\n                const name = item.name || item.caption || item.title;\r\n                const isGroupWithName = isDefined(name);\r\n                const nameWithoutSpaces = getTextWithoutSpaces(name);\r\n                let pathNode;\r\n                item[subItemsField] = that._generateItemsFromData(item[subItemsField]);\r\n                if (isGroupWithName) {\r\n                    pathNode = path.pop()\r\n                }\r\n                if (!path.length) {\r\n                    result = that._getItemByField(fieldName, item[subItemsField]);\r\n                    if (result) {\r\n                        break\r\n                    }\r\n                }\r\n                if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\r\n                    if (path.length) {\r\n                        result = that._searchItemInEverySubItem(path, fieldName, item[subItemsField])\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        } while (path.length && !isDefined(result));\r\n        return result\r\n    }\r\n    _getSubItemField(itemType) {\r\n        return \"tabbed\" === itemType ? \"tabs\" : \"items\"\r\n    }\r\n    _searchItemInEverySubItem(path, fieldName, items) {\r\n        const that = this;\r\n        let result;\r\n        each(items, ((index, groupItem) => {\r\n            result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\r\n            if (result) {\r\n                return false\r\n            }\r\n        }));\r\n        if (!result) {\r\n            result = false\r\n        }\r\n        return result\r\n    }\r\n    _changeItemOption(item, option, value) {\r\n        if (isObject(item)) {\r\n            item[option] = value\r\n        }\r\n    }\r\n    _dimensionChanged() {\r\n        const currentScreenFactor = this._getCurrentScreenFactor();\r\n        if (this._lastMarkupScreenFactor !== currentScreenFactor) {\r\n            if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\r\n                this._targetScreenFactor = currentScreenFactor;\r\n                this._refresh();\r\n                this._targetScreenFactor = void 0\r\n            }\r\n            this._lastMarkupScreenFactor = currentScreenFactor\r\n        }\r\n    }\r\n    _isColCountChanged(oldScreenSize, newScreenSize) {\r\n        let isChanged = false;\r\n        each(this._cachedColCountOptions, ((index, item) => {\r\n            if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\r\n                isChanged = true;\r\n                return false\r\n            }\r\n        }));\r\n        return isChanged\r\n    }\r\n    _refresh() {\r\n        const editorSelector = `.${TEXTEDITOR_CLASS}.${FOCUSED_STATE_CLASS}:not(.${DROP_DOWN_EDITOR_CLASS}) .${TEXTEDITOR_INPUT_CLASS}`;\r\n        eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\r\n        super._refresh()\r\n    }\r\n    _updateIsDirty(dataField) {\r\n        const editor = this.getEditor(dataField);\r\n        if (!editor) {\r\n            return\r\n        }\r\n        if (editor.option(\"isDirty\")) {\r\n            this._dirtyFields.add(dataField)\r\n        } else {\r\n            this._dirtyFields.delete(dataField)\r\n        }\r\n        this.option(\"isDirty\", !!this._dirtyFields.size)\r\n    }\r\n    updateRunTimeInfoForEachEditor(editorAction) {\r\n        this._itemsRunTimeInfo.each(((_, itemRunTimeInfo) => {\r\n            const {\r\n                widgetInstance: widgetInstance\r\n            } = itemRunTimeInfo;\r\n            if (isDefined(widgetInstance) && Editor.isEditor(widgetInstance)) {\r\n                editorAction(widgetInstance)\r\n            }\r\n        }))\r\n    }\r\n    _clear() {\r\n        this.updateRunTimeInfoForEachEditor((editor => {\r\n            editor.clear();\r\n            editor.option(\"isValid\", true)\r\n        }));\r\n        ValidationEngine.resetGroup(this._getValidationGroup())\r\n    }\r\n    _updateData(data, value, isComplexData) {\r\n        const that = this;\r\n        const _data = isComplexData ? value : data;\r\n        if (isObject(_data)) {\r\n            each(_data, ((dataField, fieldValue) => {\r\n                that._updateData(isComplexData ? `${data}.${dataField}` : dataField, fieldValue, isObject(fieldValue))\r\n            }))\r\n        } else if (isString(data)) {\r\n            that._updateFieldValue(data, value)\r\n        }\r\n    }\r\n    registerKeyHandler(key, handler) {\r\n        super.registerKeyHandler(key, handler);\r\n        this._itemsRunTimeInfo.each(((_, itemRunTimeInfo) => {\r\n            if (isDefined(itemRunTimeInfo.widgetInstance)) {\r\n                itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler)\r\n            }\r\n        }))\r\n    }\r\n    _focusTarget() {\r\n        return this.$element().find(`.${FIELD_ITEM_CONTENT_CLASS} [tabindex]`).first()\r\n    }\r\n    _visibilityChanged() {\r\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode())\r\n    }\r\n    _clearAutoColCountChangedTimeout() {\r\n        if (this.autoColCountChangedTimeoutId) {\r\n            clearTimeout(this.autoColCountChangedTimeoutId);\r\n            this.autoColCountChangedTimeoutId = void 0\r\n        }\r\n    }\r\n    _dispose() {\r\n        this._clearAutoColCountChangedTimeout();\r\n        ValidationEngine.removeGroup(this._getValidationGroup());\r\n        super._dispose()\r\n    }\r\n    clear() {\r\n        this._clear()\r\n    }\r\n    resetValues() {\r\n        this._clear()\r\n    }\r\n    reset(editorsData) {\r\n        this.updateRunTimeInfoForEachEditor((editor => {\r\n            const editorName = editor.option(\"name\");\r\n            if (editorsData && editorName in editorsData) {\r\n                editor.reset(editorsData[editorName]);\r\n                this._updateIsDirty(editorName)\r\n            } else {\r\n                editor.reset()\r\n            }\r\n        }));\r\n        this._renderValidationSummary()\r\n    }\r\n    updateData(data, value) {\r\n        this._updateData(data, value)\r\n    }\r\n    getEditor(dataField) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField)\r\n    }\r\n    getButton(name) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByName(name)\r\n    }\r\n    updateDimensions() {\r\n        const that = this;\r\n        const deferred = Deferred();\r\n        if (that._scrollable) {\r\n            that._scrollable.update().done((() => {\r\n                deferred.resolveWith(that)\r\n            }))\r\n        } else {\r\n            deferred.resolveWith(that)\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    itemOption(id, option, value) {\r\n        const items = this._generateItemsFromData(this.option(\"items\"));\r\n        const item = this._getItemByField(id, items);\r\n        const path = getItemPath(items, item);\r\n        if (!item) {\r\n            return\r\n        }\r\n        switch (arguments.length) {\r\n            case 1:\r\n                return item;\r\n            case 3: {\r\n                const itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\r\n                this._changeItemOption(item, option, value);\r\n                const fullName = getFullOptionName(path, option);\r\n                if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\r\n                    this.option(\"items\", items)\r\n                }\r\n                break\r\n            }\r\n            default:\r\n                if (isObject(option)) {\r\n                    if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\r\n                        let allowUpdateItems;\r\n                        each(option, ((optionName, optionValue) => {\r\n                            const itemAction = this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\r\n                            this._changeItemOption(item, optionName, optionValue);\r\n                            if (!allowUpdateItems && !this._tryExecuteItemOptionAction(itemAction)) {\r\n                                allowUpdateItems = true\r\n                            }\r\n                        }));\r\n                        allowUpdateItems && this.option(\"items\", items)\r\n                    }\r\n                }\r\n        }\r\n    }\r\n    validate() {\r\n        return ValidationEngine.validateGroup(this._getValidationGroup())\r\n    }\r\n    getItemID(name) {\r\n        const {\r\n            formID: formID\r\n        } = this.option();\r\n        return `dx_${formID}_${name||new Guid}`\r\n    }\r\n    getTargetScreenFactor() {\r\n        return this._targetScreenFactor\r\n    }\r\n}\r\nregisterComponent(\"dxForm\", Form);\r\nexport default Form;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}