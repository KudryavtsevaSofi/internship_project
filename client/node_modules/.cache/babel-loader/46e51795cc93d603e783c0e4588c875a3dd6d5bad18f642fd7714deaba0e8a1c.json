{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/m_draggable.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport positionUtils from \"../common/core/animation/position\";\nimport { locate, move } from \"../common/core/animation/translator\";\nimport eventsEngine from \"../common/core/events/core/events_engine\";\nimport { end as dragEventEnd, enter as dragEventEnter, leave as dragEventLeave, move as dragEventMove, start as dragEventStart } from \"../common/core/events/drag\";\nimport pointerEvents from \"../common/core/events/pointer\";\nimport { addNamespace, needSkipEvent } from \"../common/core/events/utils/index\";\nimport registerComponent from \"../core/component_registrator\";\nimport domAdapter from \"../core/dom_adapter\";\nimport { getPublicElement } from \"../core/element\";\nimport $ from \"../core/renderer\";\nimport { EmptyTemplate } from \"../core/templates/empty_template\";\nimport { splitPair } from \"../core/utils/common\";\nimport { Deferred, fromPromise, when } from \"../core/utils/deferred\";\nimport { extend } from \"../core/utils/extend\";\nimport { dasherize } from \"../core/utils/inflector\";\nimport { getBoundingRect } from \"../core/utils/position\";\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth } from \"../core/utils/size\";\nimport { quadToObject } from \"../core/utils/string\";\nimport { isFunction, isNumeric, isObject } from \"../core/utils/type\";\nimport { value as viewPort } from \"../core/utils/view_port\";\nimport { getWindow } from \"../core/utils/window\";\nimport DOMComponent from \"./core/widget/dom_component\";\nimport Animator from \"./ui/scroll_view/m_animator\";\nconst window = getWindow();\nconst KEYDOWN_EVENT = \"keydown\";\nconst DRAGGABLE = \"dxDraggable\";\nconst DRAGSTART_EVENT_NAME = addNamespace(dragEventStart, DRAGGABLE);\nconst DRAG_EVENT_NAME = addNamespace(dragEventMove, DRAGGABLE);\nconst DRAGEND_EVENT_NAME = addNamespace(dragEventEnd, DRAGGABLE);\nconst DRAG_ENTER_EVENT_NAME = addNamespace(dragEventEnter, DRAGGABLE);\nconst DRAGEND_LEAVE_EVENT_NAME = addNamespace(dragEventLeave, DRAGGABLE);\nconst POINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, DRAGGABLE);\nconst KEYDOWN_EVENT_NAME = addNamespace(\"keydown\", DRAGGABLE);\nconst CLONE_CLASS = \"clone\";\nlet targetDraggable;\nlet sourceDraggable;\nconst ANONYMOUS_TEMPLATE_NAME = \"content\";\nconst getMousePosition = event => ({\n  x: event.pageX - $(window).scrollLeft(),\n  y: event.pageY - $(window).scrollTop()\n});\nconst GESTURE_COVER_CLASS = \"dx-gesture-cover\";\nconst OVERLAY_WRAPPER_CLASS = \"dx-overlay-wrapper\";\nconst OVERLAY_CONTENT_CLASS = \"dx-overlay-content\";\nclass ScrollHelper {\n  constructor(orientation, component) {\n    this._$scrollableAtPointer = null;\n    this._preventScroll = true;\n    this._component = component;\n    if (\"vertical\" === orientation) {\n      this._scrollValue = \"scrollTop\";\n      this._overFlowAttr = \"overflowY\";\n      this._sizeAttr = \"height\";\n      this._scrollSizeProp = \"scrollHeight\";\n      this._clientSizeProp = \"clientHeight\";\n      this._limitProps = {\n        start: \"top\",\n        end: \"bottom\"\n      };\n    } else {\n      this._scrollValue = \"scrollLeft\";\n      this._overFlowAttr = \"overflowX\";\n      this._sizeAttr = \"width\";\n      this._scrollSizeProp = \"scrollWidth\";\n      this._clientSizeProp = \"clientWidth\";\n      this._limitProps = {\n        start: \"left\",\n        end: \"right\"\n      };\n    }\n  }\n  updateScrollable(elements, mousePosition) {\n    let isScrollableFound = false;\n    elements.some(element => {\n      const $element = $(element);\n      const isTargetOverOverlayWrapper = $element.hasClass(\"dx-overlay-wrapper\");\n      const isTargetOverOverlayContent = $element.hasClass(\"dx-overlay-content\");\n      if (isTargetOverOverlayWrapper || isTargetOverOverlayContent) {\n        return true;\n      }\n      isScrollableFound = this._trySetScrollable(element, mousePosition);\n      return isScrollableFound;\n    });\n    if (!isScrollableFound) {\n      this._$scrollableAtPointer = null;\n      this._scrollSpeed = 0;\n    }\n  }\n  isScrolling() {\n    return !!this._scrollSpeed;\n  }\n  isScrollable($element) {\n    return (\"auto\" === $element.css(this._overFlowAttr) || $element.hasClass(\"dx-scrollable-container\")) && $element.prop(this._scrollSizeProp) > Math.ceil(\"width\" === this._sizeAttr ? getWidth($element) : getHeight($element));\n  }\n  _trySetScrollable(element, mousePosition) {\n    const that = this;\n    const $element = $(element);\n    let distanceToBorders;\n    const sensitivity = that._component.option(\"scrollSensitivity\");\n    let isScrollable = that.isScrollable($element);\n    if (isScrollable) {\n      distanceToBorders = that._calculateDistanceToBorders($element, mousePosition);\n      if (sensitivity > distanceToBorders[that._limitProps.start]) {\n        if (!that._preventScroll) {\n          that._scrollSpeed = -that._calculateScrollSpeed(distanceToBorders[that._limitProps.start]);\n          that._$scrollableAtPointer = $element;\n        }\n      } else if (sensitivity > distanceToBorders[that._limitProps.end]) {\n        if (!that._preventScroll) {\n          that._scrollSpeed = that._calculateScrollSpeed(distanceToBorders[that._limitProps.end]);\n          that._$scrollableAtPointer = $element;\n        }\n      } else {\n        isScrollable = false;\n        that._preventScroll = false;\n      }\n    }\n    return isScrollable;\n  }\n  _calculateDistanceToBorders($area, mousePosition) {\n    const area = $area.get(0);\n    let areaBoundingRect;\n    if (area) {\n      areaBoundingRect = getBoundingRect(area);\n      return {\n        left: mousePosition.x - areaBoundingRect.left,\n        top: mousePosition.y - areaBoundingRect.top,\n        right: areaBoundingRect.right - mousePosition.x,\n        bottom: areaBoundingRect.bottom - mousePosition.y\n      };\n    }\n    return {};\n  }\n  _calculateScrollSpeed(distance) {\n    const component = this._component;\n    const sensitivity = component.option(\"scrollSensitivity\");\n    const maxSpeed = component.option(\"scrollSpeed\");\n    return Math.ceil(((sensitivity - distance) / sensitivity) ** 2 * maxSpeed);\n  }\n  scrollByStep() {\n    const that = this;\n    if (that._$scrollableAtPointer && that._scrollSpeed) {\n      if (that._$scrollableAtPointer.hasClass(\"dx-scrollable-container\")) {\n        const $scrollable = that._$scrollableAtPointer.closest(\".dx-scrollable\");\n        const scrollableInstance = $scrollable.data(\"dxScrollable\") || $scrollable.data(\"dxScrollView\");\n        if (scrollableInstance) {\n          const nextScrollPosition = scrollableInstance.scrollOffset()[that._limitProps.start] + that._scrollSpeed;\n          scrollableInstance.scrollTo({\n            [that._limitProps.start]: nextScrollPosition\n          });\n        }\n      } else {\n        const nextScrollPosition = that._$scrollableAtPointer[that._scrollValue]() + that._scrollSpeed;\n        that._$scrollableAtPointer[that._scrollValue](nextScrollPosition);\n      }\n      const dragMoveArgs = that._component._dragMoveArgs;\n      if (dragMoveArgs) {\n        that._component._dragMoveHandler(dragMoveArgs);\n      }\n    }\n  }\n  reset() {\n    this._$scrollableAtPointer = null;\n    this._scrollSpeed = 0;\n    this._preventScroll = true;\n  }\n  isOutsideScrollable($scrollable, event) {\n    if (!$scrollable) {\n      return false;\n    }\n    const scrollableSize = getBoundingRect($scrollable.get(0));\n    const start = scrollableSize[this._limitProps.start];\n    const size = scrollableSize[this._sizeAttr];\n    const mousePosition = getMousePosition(event);\n    const location = \"width\" === this._sizeAttr ? mousePosition.x : mousePosition.y;\n    return location < start || location > start + size;\n  }\n}\nclass ScrollAnimator extends Animator {\n  ctor(strategy) {\n    super.ctor();\n    this._strategy = strategy;\n  }\n  _step() {\n    const horizontalScrollHelper = this._strategy._horizontalScrollHelper;\n    const verticalScrollHelper = this._strategy._verticalScrollHelper;\n    null === horizontalScrollHelper || void 0 === horizontalScrollHelper || horizontalScrollHelper.scrollByStep();\n    null === verticalScrollHelper || void 0 === verticalScrollHelper || verticalScrollHelper.scrollByStep();\n  }\n}\nclass Draggable extends DOMComponent {\n  reset() {}\n  dragMove(e) {}\n  dragEnter() {}\n  dragLeave() {}\n  dragEnd(sourceEvent) {\n    const sourceDraggable = this._getSourceDraggable();\n    sourceDraggable._fireRemoveEvent(sourceEvent);\n    return Deferred().resolve();\n  }\n  _fireRemoveEvent(sourceEvent) {}\n  _getDefaultOptions() {\n    return _extends({}, super._getDefaultOptions(), {\n      onDragStart: null,\n      onDragMove: null,\n      onDragEnd: null,\n      onDragEnter: null,\n      onDragLeave: null,\n      onDragCancel: null,\n      onCancelByEsc: false,\n      onDrop: null,\n      immediate: true,\n      dragDirection: \"both\",\n      boundOffset: 0,\n      allowMoveByClick: false,\n      itemData: null,\n      contentTemplate: \"content\",\n      handle: \"\",\n      filter: \"\",\n      clone: false,\n      autoScroll: true,\n      scrollSpeed: 30,\n      scrollSensitivity: 60\n    });\n  }\n  _setOptionsByReference() {\n    super._setOptionsByReference.apply(this, arguments);\n    extend(this._optionsByReference, {\n      component: true,\n      group: true,\n      itemData: true,\n      data: true\n    });\n  }\n  _init() {\n    super._init();\n    this._attachEventHandlers();\n    this._scrollAnimator = new ScrollAnimator(this);\n    this._horizontalScrollHelper = new ScrollHelper(\"horizontal\", this);\n    this._verticalScrollHelper = new ScrollHelper(\"vertical\", this);\n    this._initScrollTop = 0;\n    this._initScrollLeft = 0;\n  }\n  _normalizeCursorOffset(offset) {\n    if (isObject(offset)) {\n      offset = {\n        h: offset.x,\n        v: offset.y\n      };\n    }\n    offset = splitPair(offset).map(value => parseFloat(value));\n    return {\n      left: offset[0],\n      top: 1 === offset.length ? offset[0] : offset[1]\n    };\n  }\n  _getNormalizedCursorOffset(offset, options) {\n    if (isFunction(offset)) {\n      offset = offset.call(this, options);\n    }\n    return this._normalizeCursorOffset(offset);\n  }\n  _calculateElementOffset(options) {\n    let elementOffset;\n    let dragElementOffset;\n    const {\n      event: event\n    } = options;\n    const $element = $(options.itemElement);\n    const $dragElement = $(options.dragElement);\n    const isCloned = this._dragElementIsCloned();\n    const cursorOffset = this.option(\"cursorOffset\");\n    let normalizedCursorOffset = {\n      left: 0,\n      top: 0\n    };\n    const currentLocate = this._initialLocate = locate($dragElement);\n    if (isCloned || options.initialOffset || cursorOffset) {\n      elementOffset = options.initialOffset || $element.offset();\n      if (cursorOffset) {\n        normalizedCursorOffset = this._getNormalizedCursorOffset(cursorOffset, options);\n        if (isFinite(normalizedCursorOffset.left)) {\n          elementOffset.left = event.pageX;\n        }\n        if (isFinite(normalizedCursorOffset.top)) {\n          elementOffset.top = event.pageY;\n        }\n      }\n      dragElementOffset = $dragElement.offset();\n      elementOffset.top -= dragElementOffset.top + (normalizedCursorOffset.top || 0) - currentLocate.top;\n      elementOffset.left -= dragElementOffset.left + (normalizedCursorOffset.left || 0) - currentLocate.left;\n    }\n    return elementOffset;\n  }\n  _initPosition(options) {\n    const $dragElement = $(options.dragElement);\n    const elementOffset = this._calculateElementOffset(options);\n    if (elementOffset) {\n      this._move(elementOffset, $dragElement);\n    }\n    this._startPosition = locate($dragElement);\n  }\n  _startAnimator() {\n    if (!this._scrollAnimator.inProgress()) {\n      this._scrollAnimator.start();\n    }\n  }\n  _stopAnimator() {\n    this._scrollAnimator.stop();\n  }\n  _addWidgetPrefix(className) {\n    const componentName = this.NAME;\n    return dasherize(componentName) + (className ? `-${className}` : \"\");\n  }\n  _getItemsSelector() {\n    return this.option(\"filter\") || \"\";\n  }\n  _$content() {\n    const $element = this.$element();\n    const $wrapper = $element.children(\".dx-template-wrapper\");\n    return $wrapper.length ? $wrapper : $element;\n  }\n  _attachEventHandlers() {\n    if (this.option(\"disabled\")) {\n      return;\n    }\n    let $element = this._$content();\n    let itemsSelector = this._getItemsSelector();\n    const allowMoveByClick = this.option(\"allowMoveByClick\");\n    const data = {\n      direction: this.option(\"dragDirection\"),\n      immediate: this.option(\"immediate\"),\n      checkDropTarget: ($target, event) => {\n        const targetGroup = this.option(\"group\");\n        const sourceGroup = this._getSourceDraggable().option(\"group\");\n        const $scrollable = this._getScrollable($target);\n        if (this._verticalScrollHelper.isOutsideScrollable($scrollable, event) || this._horizontalScrollHelper.isOutsideScrollable($scrollable, event)) {\n          return false;\n        }\n        return sourceGroup && sourceGroup === targetGroup;\n      }\n    };\n    if (allowMoveByClick) {\n      $element = this._getArea();\n      eventsEngine.on($element, POINTERDOWN_EVENT_NAME, data, this._pointerDownHandler.bind(this));\n    }\n    if (\">\" === itemsSelector[0]) {\n      itemsSelector = itemsSelector.slice(1);\n    }\n    eventsEngine.on($element, DRAGSTART_EVENT_NAME, itemsSelector, data, this._dragStartHandler.bind(this));\n    eventsEngine.on($element, DRAG_EVENT_NAME, data, this._dragMoveHandler.bind(this));\n    eventsEngine.on($element, DRAGEND_EVENT_NAME, data, this._dragEndHandler.bind(this));\n    eventsEngine.on($element, DRAG_ENTER_EVENT_NAME, data, this._dragEnterHandler.bind(this));\n    eventsEngine.on($element, DRAGEND_LEAVE_EVENT_NAME, data, this._dragLeaveHandler.bind(this));\n    if (this.option(\"onCancelByEsc\")) {\n      eventsEngine.on($element, KEYDOWN_EVENT_NAME, this._keydownHandler.bind(this));\n    }\n  }\n  _dragElementIsCloned() {\n    var _this$_$dragElement;\n    return null === (_this$_$dragElement = this._$dragElement) || void 0 === _this$_$dragElement ? void 0 : _this$_$dragElement.hasClass(this._addWidgetPrefix(\"clone\"));\n  }\n  _getDragTemplateArgs($element, $container) {\n    return {\n      container: getPublicElement($container),\n      model: {\n        itemData: this.option(\"itemData\"),\n        itemElement: getPublicElement($element)\n      }\n    };\n  }\n  _createDragElement($element) {\n    let result = $element;\n    const clone = this.option(\"clone\");\n    const $container = this._getContainer();\n    let template = this.option(\"dragTemplate\");\n    if (template) {\n      template = this._getTemplate(template);\n      result = $(\"<div>\").appendTo($container);\n      template.render(this._getDragTemplateArgs($element, result));\n    } else if (clone) {\n      result = $(\"<div>\").appendTo($container);\n      $element.clone().css({\n        width: $element.css(\"width\"),\n        height: $element.css(\"height\")\n      }).appendTo(result);\n    }\n    return result.toggleClass(this._addWidgetPrefix(\"clone\"), result.get(0) !== $element.get(0)).toggleClass(\"dx-rtl\", this.option(\"rtlEnabled\"));\n  }\n  _resetDragElement() {\n    if (this._dragElementIsCloned()) {\n      var _this$_$dragElement2;\n      null === (_this$_$dragElement2 = this._$dragElement) || void 0 === _this$_$dragElement2 || _this$_$dragElement2.remove();\n    } else {\n      this._toggleDraggingClass(false);\n    }\n    this._$dragElement = null;\n  }\n  _resetSourceElement() {\n    this._toggleDragSourceClass(false);\n    this._$sourceElement = null;\n  }\n  _detachEventHandlers() {\n    eventsEngine.off(this._$content(), `.${DRAGGABLE}`);\n    eventsEngine.off(this._getArea(), `.${DRAGGABLE}`);\n  }\n  _move(position, $element) {\n    move($element || this._$dragElement, position);\n  }\n  _getDraggableElement(e) {\n    const $sourceElement = this._getSourceElement();\n    if ($sourceElement) {\n      return $sourceElement;\n    }\n    const allowMoveByClick = this.option(\"allowMoveByClick\");\n    if (allowMoveByClick) {\n      return this.$element();\n    }\n    let $target = $(null === e || void 0 === e ? void 0 : e.target);\n    const itemsSelector = this._getItemsSelector();\n    if (\">\" === itemsSelector[0]) {\n      const $items = this._$content().find(itemsSelector);\n      if (!$items.is($target)) {\n        $target = $target.closest($items);\n      }\n    }\n    return $target;\n  }\n  _getSourceElement() {\n    const draggable = this._getSourceDraggable();\n    return draggable._$sourceElement;\n  }\n  _pointerDownHandler(e) {\n    if (needSkipEvent(e)) {\n      return;\n    }\n    const position = {};\n    const $element = this.$element();\n    const {\n      dragDirection: dragDirection\n    } = this.option();\n    if (\"horizontal\" === dragDirection || \"both\" === dragDirection) {\n      position.left = e.pageX - $element.offset().left + locate($element).left - getWidth($element) / 2;\n    }\n    if (\"vertical\" === dragDirection || \"both\" === dragDirection) {\n      position.top = e.pageY - $element.offset().top + locate($element).top - getHeight($element) / 2;\n    }\n    this._move(position, $element);\n    this._getAction(\"onDragMove\")(this._getEventArgs(e));\n  }\n  _isValidElement(event, $element) {\n    var _event$originalEvent;\n    const {\n      handle: handle\n    } = this.option();\n    const $target = $(null === (_event$originalEvent = event.originalEvent) || void 0 === _event$originalEvent ? void 0 : _event$originalEvent.target);\n    if (handle && !$target.closest(handle).length) {\n      return false;\n    }\n    if (!$element.length) {\n      return false;\n    }\n    return !$element.is(\".dx-state-disabled, .dx-state-disabled *\");\n  }\n  _dragStartHandler(e) {\n    const $element = this._getDraggableElement(e);\n    this.dragInProgress = true;\n    if (!this._isValidElement(e, $element)) {\n      e.cancel = true;\n      return;\n    }\n    if (this._$sourceElement) {\n      return;\n    }\n    const dragStartArgs = this._getDragStartArgs(e, $element);\n    this._getAction(\"onDragStart\")(dragStartArgs);\n    if (dragStartArgs.cancel) {\n      e.cancel = true;\n      return;\n    }\n    this.option(\"itemData\", dragStartArgs.itemData);\n    this._setSourceDraggable();\n    this._$sourceElement = $element;\n    let initialOffset = $element.offset();\n    if (!this._hasClonedDraggable() && this.option(\"autoScroll\")) {\n      this._initScrollTop = this._getScrollableScrollTop();\n      this._initScrollLeft = this._getScrollableScrollLeft();\n      initialOffset = this._getDraggableElementOffset(initialOffset.left, initialOffset.top);\n    }\n    const $dragElement = this._$dragElement = this._createDragElement($element);\n    this._toggleDraggingClass(true);\n    this._toggleDragSourceClass(true);\n    this._setGestureCoverCursor($dragElement.children());\n    const isFixedPosition = \"fixed\" === $dragElement.css(\"position\");\n    this._initPosition(extend({}, dragStartArgs, {\n      dragElement: $dragElement.get(0),\n      initialOffset: isFixedPosition && initialOffset\n    }));\n    this._getAction(\"onDraggableElementShown\")(_extends({}, dragStartArgs, {\n      dragElement: $dragElement\n    }));\n    const $area = this._getArea();\n    const areaOffset = this._getAreaOffset($area);\n    const boundOffset = this._getBoundOffset();\n    const areaWidth = getOuterWidth($area);\n    const areaHeight = getOuterHeight($area);\n    const elementWidth = getWidth($dragElement);\n    const elementHeight = getHeight($dragElement);\n    const startOffset_left = $dragElement.offset().left - areaOffset.left,\n      startOffset_top = $dragElement.offset().top - areaOffset.top;\n    if ($area.length) {\n      e.maxLeftOffset = startOffset_left - boundOffset.left;\n      e.maxRightOffset = areaWidth - startOffset_left - elementWidth - boundOffset.right;\n      e.maxTopOffset = startOffset_top - boundOffset.top;\n      e.maxBottomOffset = areaHeight - startOffset_top - elementHeight - boundOffset.bottom;\n    }\n    if (this.option(\"autoScroll\")) {\n      this._startAnimator();\n    }\n  }\n  _getAreaOffset($area) {\n    const offset = $area && positionUtils.offset($area);\n    return offset || {\n      left: 0,\n      top: 0\n    };\n  }\n  _toggleDraggingClass(value) {\n    var _this$_$dragElement3;\n    null === (_this$_$dragElement3 = this._$dragElement) || void 0 === _this$_$dragElement3 || _this$_$dragElement3.toggleClass(this._addWidgetPrefix(\"dragging\"), value);\n  }\n  _toggleDragSourceClass(value, $element) {\n    const $sourceElement = $element || this._$sourceElement;\n    null === $sourceElement || void 0 === $sourceElement || $sourceElement.toggleClass(this._addWidgetPrefix(\"source\"), value);\n  }\n  _setGestureCoverCursor($element) {\n    $(\".dx-gesture-cover\").css(\"cursor\", $element.css(\"cursor\"));\n  }\n  _getBoundOffset() {\n    let boundOffset = this.option(\"boundOffset\");\n    if (isFunction(boundOffset)) {\n      boundOffset = boundOffset.call(this);\n    }\n    return quadToObject(boundOffset);\n  }\n  _getArea() {\n    let area = this.option(\"boundary\");\n    if (isFunction(area)) {\n      area = area.call(this);\n    }\n    return $(area);\n  }\n  _getContainer() {\n    let {\n      container: container\n    } = this.option();\n    if (void 0 === container) {\n      container = viewPort();\n    }\n    return $(container);\n  }\n  _getDraggableElementOffset(initialOffsetX, initialOffsetY) {\n    var _this$_startPosition, _this$_startPosition2;\n    const initScrollTop = this._initScrollTop;\n    const initScrollLeft = this._initScrollLeft;\n    const scrollTop = this._getScrollableScrollTop();\n    const scrollLeft = this._getScrollableScrollLeft();\n    const elementPosition = $(this.element()).css(\"position\");\n    const isFixedPosition = \"fixed\" === elementPosition;\n    const result = {\n      left: ((null === (_this$_startPosition = this._startPosition) || void 0 === _this$_startPosition ? void 0 : _this$_startPosition.left) ?? 0) + initialOffsetX,\n      top: ((null === (_this$_startPosition2 = this._startPosition) || void 0 === _this$_startPosition2 ? void 0 : _this$_startPosition2.top) ?? 0) + initialOffsetY\n    };\n    if (isFixedPosition || this._hasClonedDraggable()) {\n      return result;\n    }\n    return {\n      left: isNumeric(scrollLeft) ? result.left + scrollLeft - initScrollLeft : result.left,\n      top: isNumeric(scrollTop) ? result.top + scrollTop - initScrollTop : result.top\n    };\n  }\n  _hasClonedDraggable() {\n    return this.option(\"clone\") || this.option(\"dragTemplate\");\n  }\n  _dragMoveHandler(e) {\n    this._dragMoveArgs = e;\n    if (!this._$dragElement) {\n      e.cancel = true;\n      return;\n    }\n    const offset = this._getDraggableElementOffset(e.offset.x, e.offset.y);\n    this._move(offset);\n    this._updateScrollable(e);\n    const eventArgs = this._getEventArgs(e);\n    this._getAction(\"onDragMove\")(eventArgs);\n    if (true === eventArgs.cancel) {\n      return;\n    }\n    const targetDraggable = this._getTargetDraggable();\n    targetDraggable.dragMove(e, scrollBy);\n  }\n  _updateScrollable(e) {\n    const that = this;\n    if (that.option(\"autoScroll\")) {\n      const mousePosition = getMousePosition(e);\n      const allObjects = domAdapter.elementsFromPoint(mousePosition.x, mousePosition.y, this.$element().get(0));\n      that._verticalScrollHelper.updateScrollable(allObjects, mousePosition);\n      that._horizontalScrollHelper.updateScrollable(allObjects, mousePosition);\n    }\n  }\n  _getScrollable($element) {\n    let $scrollable;\n    $element.parents().toArray().some(parent => {\n      const $parent = $(parent);\n      if (this._horizontalScrollHelper.isScrollable($parent) || this._verticalScrollHelper.isScrollable($parent)) {\n        $scrollable = $parent;\n        return true;\n      }\n      return false;\n    });\n    return $scrollable;\n  }\n  _getScrollableScrollTop() {\n    var _this$_getScrollable;\n    return (null === (_this$_getScrollable = this._getScrollable($(this.element()))) || void 0 === _this$_getScrollable ? void 0 : _this$_getScrollable.scrollTop()) ?? 0;\n  }\n  _getScrollableScrollLeft() {\n    var _this$_getScrollable2;\n    return (null === (_this$_getScrollable2 = this._getScrollable($(this.element()))) || void 0 === _this$_getScrollable2 ? void 0 : _this$_getScrollable2.scrollLeft()) ?? 0;\n  }\n  _defaultActionArgs() {\n    const args = super._defaultActionArgs.apply(this, arguments);\n    const component = this.option(\"component\");\n    if (component) {\n      args.component = component;\n      args.element = component.element();\n    }\n    return args;\n  }\n  _getEventArgs(e) {\n    const sourceDraggable = this._getSourceDraggable();\n    const targetDraggable = this._getTargetDraggable();\n    return {\n      event: e,\n      itemData: sourceDraggable.option(\"itemData\"),\n      itemElement: getPublicElement(sourceDraggable._$sourceElement),\n      fromComponent: sourceDraggable.option(\"component\") || sourceDraggable,\n      toComponent: targetDraggable.option(\"component\") || targetDraggable,\n      fromData: sourceDraggable.option(\"data\"),\n      toData: targetDraggable.option(\"data\")\n    };\n  }\n  _getDragStartArgs(e, $itemElement) {\n    const args = this._getEventArgs(e);\n    return {\n      event: args.event,\n      itemData: args.itemData,\n      itemElement: $itemElement,\n      fromData: args.fromData\n    };\n  }\n  _revertItemToInitialPosition() {\n    !this._dragElementIsCloned() && this._move(this._initialLocate, this._$sourceElement);\n  }\n  _dragEndHandler(e) {\n    const d = Deferred();\n    const dragEndEventArgs = this._getEventArgs(e);\n    const dropEventArgs = this._getEventArgs(e);\n    const targetDraggable = this._getTargetDraggable();\n    let needRevertPosition = true;\n    this.dragInProgress = false;\n    try {\n      this._getAction(\"onDragEnd\")(dragEndEventArgs);\n    } finally {\n      when(fromPromise(dragEndEventArgs.cancel)).done(cancel => {\n        if (!cancel) {\n          if (targetDraggable !== this) {\n            targetDraggable._getAction(\"onDrop\")(dropEventArgs);\n          }\n          if (!dropEventArgs.cancel) {\n            needRevertPosition = false;\n            when(fromPromise(targetDraggable.dragEnd(dragEndEventArgs))).always(d.resolve);\n            return;\n          }\n        }\n        d.resolve();\n      }).fail(d.resolve);\n      d.done(() => {\n        if (needRevertPosition) {\n          this._revertItemToInitialPosition();\n        }\n        this._resetDragOptions(targetDraggable);\n      });\n    }\n  }\n  _isTargetOverAnotherDraggable(e) {\n    const sourceDraggable = this._getSourceDraggable();\n    if (this === sourceDraggable) {\n      return false;\n    }\n    const $dragElement = sourceDraggable._$dragElement;\n    const $sourceDraggableElement = sourceDraggable.$element();\n    const $targetDraggableElement = this.$element();\n    const mousePosition = getMousePosition(e);\n    const elements = domAdapter.elementsFromPoint(mousePosition.x, mousePosition.y, this.element());\n    const firstWidgetElement = elements.filter(element => {\n      const $element = $(element);\n      if ($element.hasClass(this._addWidgetPrefix())) {\n        return !$element.closest($dragElement).length;\n      }\n      return false;\n    })[0];\n    const $sourceElement = this._getSourceElement();\n    const isTargetOverItself = firstWidgetElement === $sourceDraggableElement.get(0);\n    const isTargetOverNestedDraggable = $(firstWidgetElement).closest($sourceElement).length;\n    return !firstWidgetElement || firstWidgetElement === $targetDraggableElement.get(0) && !isTargetOverItself && !isTargetOverNestedDraggable;\n  }\n  _dragEnterHandler(e) {\n    this._fireDragEnterEvent(e);\n    if (this._isTargetOverAnotherDraggable(e)) {\n      this._setTargetDraggable();\n    }\n    const sourceDraggable = this._getSourceDraggable();\n    sourceDraggable.dragEnter(e);\n  }\n  _dragLeaveHandler(e) {\n    this._fireDragLeaveEvent(e);\n    this._resetTargetDraggable();\n    if (this !== this._getSourceDraggable()) {\n      this.reset();\n    }\n    const sourceDraggable = this._getSourceDraggable();\n    sourceDraggable.dragLeave(e);\n  }\n  _keydownHandler(e) {\n    if (this.dragInProgress && \"Escape\" === e.key) {\n      this._keydownEscapeHandler(e);\n    }\n  }\n  _keydownEscapeHandler(e) {\n    var _sourceDraggable;\n    const $sourceElement = this._getSourceElement();\n    if (!$sourceElement) {\n      return;\n    }\n    const dragCancelEventArgs = this._getEventArgs(e);\n    this._getAction(\"onDragCancel\")(dragCancelEventArgs);\n    if (dragCancelEventArgs.cancel) {\n      return;\n    }\n    this.dragInProgress = false;\n    null === (_sourceDraggable = sourceDraggable) || void 0 === _sourceDraggable || _sourceDraggable._toggleDraggingClass(false);\n    this._detachEventHandlers();\n    this._revertItemToInitialPosition();\n    const targetDraggable = this._getTargetDraggable();\n    this._resetDragOptions(targetDraggable);\n    this._attachEventHandlers();\n  }\n  _getAction(name) {\n    return this[`_${name}Action`] || this._createActionByOption(name);\n  }\n  _getAnonymousTemplateName() {\n    return \"content\";\n  }\n  _initTemplates() {\n    if (!this.option(\"contentTemplate\")) {\n      return;\n    }\n    this._templateManager.addDefaultTemplates({\n      content: new EmptyTemplate()\n    });\n    super._initTemplates.apply(this, arguments);\n  }\n  _render() {\n    super._render();\n    this.$element().addClass(this._addWidgetPrefix());\n    const transclude = this._templateManager.anonymousTemplateName === this.option(\"contentTemplate\");\n    const template = this._getTemplateByOption(\"contentTemplate\");\n    if (template) {\n      $(template.render({\n        container: this.element(),\n        transclude: transclude\n      }));\n    }\n  }\n  _optionChanged(args) {\n    const {\n      name: name\n    } = args;\n    switch (name) {\n      case \"onDragStart\":\n      case \"onDragMove\":\n      case \"onDragEnd\":\n      case \"onDrop\":\n      case \"onDragEnter\":\n      case \"onDragLeave\":\n      case \"onDragCancel\":\n      case \"onDraggableElementShown\":\n        this[`_${name}Action`] = this._createActionByOption(name);\n        break;\n      case \"dragTemplate\":\n      case \"contentTemplate\":\n      case \"container\":\n      case \"clone\":\n      case \"scrollSensitivity\":\n      case \"scrollSpeed\":\n      case \"boundOffset\":\n      case \"handle\":\n      case \"group\":\n      case \"data\":\n      case \"itemData\":\n        break;\n      case \"allowMoveByClick\":\n      case \"dragDirection\":\n      case \"disabled\":\n      case \"boundary\":\n      case \"filter\":\n      case \"immediate\":\n        this._resetDragElement();\n        this._detachEventHandlers();\n        this._attachEventHandlers();\n        break;\n      case \"onCancelByEsc\":\n        this._keydownHandler();\n        break;\n      case \"autoScroll\":\n        this._verticalScrollHelper.reset();\n        this._horizontalScrollHelper.reset();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _getTargetDraggable() {\n    return targetDraggable || this;\n  }\n  _getSourceDraggable() {\n    return sourceDraggable || this;\n  }\n  _setTargetDraggable() {\n    const currentGroup = this.option(\"group\");\n    const sourceDraggable = this._getSourceDraggable();\n    if (currentGroup && currentGroup === sourceDraggable.option(\"group\")) {\n      targetDraggable = this;\n    }\n  }\n  _setSourceDraggable() {\n    sourceDraggable = this;\n  }\n  _resetSourceDraggable() {\n    sourceDraggable = null;\n  }\n  _resetTargetDraggable() {\n    targetDraggable = null;\n  }\n  _resetDragOptions(targetDraggable) {\n    this.reset();\n    targetDraggable.reset();\n    this._stopAnimator();\n    this._horizontalScrollHelper.reset();\n    this._verticalScrollHelper.reset();\n    this._resetDragElement();\n    this._resetSourceElement();\n    this._resetTargetDraggable();\n    this._resetSourceDraggable();\n  }\n  _dispose() {\n    super._dispose();\n    this._detachEventHandlers();\n    this._resetDragElement();\n    this._resetTargetDraggable();\n    this._resetSourceDraggable();\n    this._$sourceElement = null;\n    this._stopAnimator();\n  }\n  _fireDragEnterEvent(sourceEvent) {\n    const args = this._getEventArgs(sourceEvent);\n    this._getAction(\"onDragEnter\")(args);\n  }\n  _fireDragLeaveEvent(sourceEvent) {\n    const args = this._getEventArgs(sourceEvent);\n    this._getAction(\"onDragLeave\")(args);\n  }\n}\nregisterComponent(DRAGGABLE, Draggable);\nexport default Draggable;","map":{"version":3,"names":["_extends","positionUtils","locate","move","eventsEngine","end","dragEventEnd","enter","dragEventEnter","leave","dragEventLeave","dragEventMove","start","dragEventStart","pointerEvents","addNamespace","needSkipEvent","registerComponent","domAdapter","getPublicElement","$","EmptyTemplate","splitPair","Deferred","fromPromise","when","extend","dasherize","getBoundingRect","getHeight","getOuterHeight","getOuterWidth","getWidth","quadToObject","isFunction","isNumeric","isObject","value","viewPort","getWindow","DOMComponent","Animator","window","KEYDOWN_EVENT","DRAGGABLE","DRAGSTART_EVENT_NAME","DRAG_EVENT_NAME","DRAGEND_EVENT_NAME","DRAG_ENTER_EVENT_NAME","DRAGEND_LEAVE_EVENT_NAME","POINTERDOWN_EVENT_NAME","down","KEYDOWN_EVENT_NAME","CLONE_CLASS","targetDraggable","sourceDraggable","ANONYMOUS_TEMPLATE_NAME","getMousePosition","event","x","pageX","scrollLeft","y","pageY","scrollTop","GESTURE_COVER_CLASS","OVERLAY_WRAPPER_CLASS","OVERLAY_CONTENT_CLASS","ScrollHelper","constructor","orientation","component","_$scrollableAtPointer","_preventScroll","_component","_scrollValue","_overFlowAttr","_sizeAttr","_scrollSizeProp","_clientSizeProp","_limitProps","updateScrollable","elements","mousePosition","isScrollableFound","some","element","$element","isTargetOverOverlayWrapper","hasClass","isTargetOverOverlayContent","_trySetScrollable","_scrollSpeed","isScrolling","isScrollable","css","prop","Math","ceil","that","distanceToBorders","sensitivity","option","_calculateDistanceToBorders","_calculateScrollSpeed","$area","area","get","areaBoundingRect","left","top","right","bottom","distance","maxSpeed","scrollByStep","$scrollable","closest","scrollableInstance","data","nextScrollPosition","scrollOffset","scrollTo","dragMoveArgs","_dragMoveArgs","_dragMoveHandler","reset","isOutsideScrollable","scrollableSize","size","location","ScrollAnimator","ctor","strategy","_strategy","_step","horizontalScrollHelper","_horizontalScrollHelper","verticalScrollHelper","_verticalScrollHelper","Draggable","dragMove","e","dragEnter","dragLeave","dragEnd","sourceEvent","_getSourceDraggable","_fireRemoveEvent","resolve","_getDefaultOptions","onDragStart","onDragMove","onDragEnd","onDragEnter","onDragLeave","onDragCancel","onCancelByEsc","onDrop","immediate","dragDirection","boundOffset","allowMoveByClick","itemData","contentTemplate","handle","filter","clone","autoScroll","scrollSpeed","scrollSensitivity","_setOptionsByReference","apply","arguments","_optionsByReference","group","_init","_attachEventHandlers","_scrollAnimator","_initScrollTop","_initScrollLeft","_normalizeCursorOffset","offset","h","v","map","parseFloat","length","_getNormalizedCursorOffset","options","call","_calculateElementOffset","elementOffset","dragElementOffset","itemElement","$dragElement","dragElement","isCloned","_dragElementIsCloned","cursorOffset","normalizedCursorOffset","currentLocate","_initialLocate","initialOffset","isFinite","_initPosition","_move","_startPosition","_startAnimator","inProgress","_stopAnimator","stop","_addWidgetPrefix","className","componentName","NAME","_getItemsSelector","_$content","$wrapper","children","itemsSelector","direction","checkDropTarget","$target","targetGroup","sourceGroup","_getScrollable","_getArea","on","_pointerDownHandler","bind","slice","_dragStartHandler","_dragEndHandler","_dragEnterHandler","_dragLeaveHandler","_keydownHandler","_this$_$dragElement","_$dragElement","_getDragTemplateArgs","$container","container","model","_createDragElement","result","_getContainer","template","_getTemplate","appendTo","render","width","height","toggleClass","_resetDragElement","_this$_$dragElement2","remove","_toggleDraggingClass","_resetSourceElement","_toggleDragSourceClass","_$sourceElement","_detachEventHandlers","off","position","_getDraggableElement","$sourceElement","_getSourceElement","target","$items","find","is","draggable","_getAction","_getEventArgs","_isValidElement","_event$originalEvent","originalEvent","dragInProgress","cancel","dragStartArgs","_getDragStartArgs","_setSourceDraggable","_hasClonedDraggable","_getScrollableScrollTop","_getScrollableScrollLeft","_getDraggableElementOffset","_setGestureCoverCursor","isFixedPosition","areaOffset","_getAreaOffset","_getBoundOffset","areaWidth","areaHeight","elementWidth","elementHeight","startOffset_left","startOffset_top","maxLeftOffset","maxRightOffset","maxTopOffset","maxBottomOffset","_this$_$dragElement3","initialOffsetX","initialOffsetY","_this$_startPosition","_this$_startPosition2","initScrollTop","initScrollLeft","elementPosition","_updateScrollable","eventArgs","_getTargetDraggable","scrollBy","allObjects","elementsFromPoint","parents","toArray","parent","$parent","_this$_getScrollable","_this$_getScrollable2","_defaultActionArgs","args","fromComponent","toComponent","fromData","toData","$itemElement","_revertItemToInitialPosition","d","dragEndEventArgs","dropEventArgs","needRevertPosition","done","always","fail","_resetDragOptions","_isTargetOverAnotherDraggable","$sourceDraggableElement","$targetDraggableElement","firstWidgetElement","isTargetOverItself","isTargetOverNestedDraggable","_fireDragEnterEvent","_setTargetDraggable","_fireDragLeaveEvent","_resetTargetDraggable","key","_keydownEscapeHandler","_sourceDraggable","dragCancelEventArgs","name","_createActionByOption","_getAnonymousTemplateName","_initTemplates","_templateManager","addDefaultTemplates","content","_render","addClass","transclude","anonymousTemplateName","_getTemplateByOption","_optionChanged","currentGroup","_resetSourceDraggable","_dispose"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/m_draggable.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/m_draggable.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport positionUtils from \"../common/core/animation/position\";\r\nimport {\r\n    locate,\r\n    move\r\n} from \"../common/core/animation/translator\";\r\nimport eventsEngine from \"../common/core/events/core/events_engine\";\r\nimport {\r\n    end as dragEventEnd,\r\n    enter as dragEventEnter,\r\n    leave as dragEventLeave,\r\n    move as dragEventMove,\r\n    start as dragEventStart\r\n} from \"../common/core/events/drag\";\r\nimport pointerEvents from \"../common/core/events/pointer\";\r\nimport {\r\n    addNamespace,\r\n    needSkipEvent\r\n} from \"../common/core/events/utils/index\";\r\nimport registerComponent from \"../core/component_registrator\";\r\nimport domAdapter from \"../core/dom_adapter\";\r\nimport {\r\n    getPublicElement\r\n} from \"../core/element\";\r\nimport $ from \"../core/renderer\";\r\nimport {\r\n    EmptyTemplate\r\n} from \"../core/templates/empty_template\";\r\nimport {\r\n    splitPair\r\n} from \"../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    fromPromise,\r\n    when\r\n} from \"../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    dasherize\r\n} from \"../core/utils/inflector\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../core/utils/position\";\r\nimport {\r\n    getHeight,\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    getWidth\r\n} from \"../core/utils/size\";\r\nimport {\r\n    quadToObject\r\n} from \"../core/utils/string\";\r\nimport {\r\n    isFunction,\r\n    isNumeric,\r\n    isObject\r\n} from \"../core/utils/type\";\r\nimport {\r\n    value as viewPort\r\n} from \"../core/utils/view_port\";\r\nimport {\r\n    getWindow\r\n} from \"../core/utils/window\";\r\nimport DOMComponent from \"./core/widget/dom_component\";\r\nimport Animator from \"./ui/scroll_view/m_animator\";\r\nconst window = getWindow();\r\nconst KEYDOWN_EVENT = \"keydown\";\r\nconst DRAGGABLE = \"dxDraggable\";\r\nconst DRAGSTART_EVENT_NAME = addNamespace(dragEventStart, DRAGGABLE);\r\nconst DRAG_EVENT_NAME = addNamespace(dragEventMove, DRAGGABLE);\r\nconst DRAGEND_EVENT_NAME = addNamespace(dragEventEnd, DRAGGABLE);\r\nconst DRAG_ENTER_EVENT_NAME = addNamespace(dragEventEnter, DRAGGABLE);\r\nconst DRAGEND_LEAVE_EVENT_NAME = addNamespace(dragEventLeave, DRAGGABLE);\r\nconst POINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, DRAGGABLE);\r\nconst KEYDOWN_EVENT_NAME = addNamespace(\"keydown\", DRAGGABLE);\r\nconst CLONE_CLASS = \"clone\";\r\nlet targetDraggable;\r\nlet sourceDraggable;\r\nconst ANONYMOUS_TEMPLATE_NAME = \"content\";\r\nconst getMousePosition = event => ({\r\n    x: event.pageX - $(window).scrollLeft(),\r\n    y: event.pageY - $(window).scrollTop()\r\n});\r\nconst GESTURE_COVER_CLASS = \"dx-gesture-cover\";\r\nconst OVERLAY_WRAPPER_CLASS = \"dx-overlay-wrapper\";\r\nconst OVERLAY_CONTENT_CLASS = \"dx-overlay-content\";\r\nclass ScrollHelper {\r\n    constructor(orientation, component) {\r\n        this._$scrollableAtPointer = null;\r\n        this._preventScroll = true;\r\n        this._component = component;\r\n        if (\"vertical\" === orientation) {\r\n            this._scrollValue = \"scrollTop\";\r\n            this._overFlowAttr = \"overflowY\";\r\n            this._sizeAttr = \"height\";\r\n            this._scrollSizeProp = \"scrollHeight\";\r\n            this._clientSizeProp = \"clientHeight\";\r\n            this._limitProps = {\r\n                start: \"top\",\r\n                end: \"bottom\"\r\n            }\r\n        } else {\r\n            this._scrollValue = \"scrollLeft\";\r\n            this._overFlowAttr = \"overflowX\";\r\n            this._sizeAttr = \"width\";\r\n            this._scrollSizeProp = \"scrollWidth\";\r\n            this._clientSizeProp = \"clientWidth\";\r\n            this._limitProps = {\r\n                start: \"left\",\r\n                end: \"right\"\r\n            }\r\n        }\r\n    }\r\n    updateScrollable(elements, mousePosition) {\r\n        let isScrollableFound = false;\r\n        elements.some((element => {\r\n            const $element = $(element);\r\n            const isTargetOverOverlayWrapper = $element.hasClass(\"dx-overlay-wrapper\");\r\n            const isTargetOverOverlayContent = $element.hasClass(\"dx-overlay-content\");\r\n            if (isTargetOverOverlayWrapper || isTargetOverOverlayContent) {\r\n                return true\r\n            }\r\n            isScrollableFound = this._trySetScrollable(element, mousePosition);\r\n            return isScrollableFound\r\n        }));\r\n        if (!isScrollableFound) {\r\n            this._$scrollableAtPointer = null;\r\n            this._scrollSpeed = 0\r\n        }\r\n    }\r\n    isScrolling() {\r\n        return !!this._scrollSpeed\r\n    }\r\n    isScrollable($element) {\r\n        return (\"auto\" === $element.css(this._overFlowAttr) || $element.hasClass(\"dx-scrollable-container\")) && $element.prop(this._scrollSizeProp) > Math.ceil(\"width\" === this._sizeAttr ? getWidth($element) : getHeight($element))\r\n    }\r\n    _trySetScrollable(element, mousePosition) {\r\n        const that = this;\r\n        const $element = $(element);\r\n        let distanceToBorders;\r\n        const sensitivity = that._component.option(\"scrollSensitivity\");\r\n        let isScrollable = that.isScrollable($element);\r\n        if (isScrollable) {\r\n            distanceToBorders = that._calculateDistanceToBorders($element, mousePosition);\r\n            if (sensitivity > distanceToBorders[that._limitProps.start]) {\r\n                if (!that._preventScroll) {\r\n                    that._scrollSpeed = -that._calculateScrollSpeed(distanceToBorders[that._limitProps.start]);\r\n                    that._$scrollableAtPointer = $element\r\n                }\r\n            } else if (sensitivity > distanceToBorders[that._limitProps.end]) {\r\n                if (!that._preventScroll) {\r\n                    that._scrollSpeed = that._calculateScrollSpeed(distanceToBorders[that._limitProps.end]);\r\n                    that._$scrollableAtPointer = $element\r\n                }\r\n            } else {\r\n                isScrollable = false;\r\n                that._preventScroll = false\r\n            }\r\n        }\r\n        return isScrollable\r\n    }\r\n    _calculateDistanceToBorders($area, mousePosition) {\r\n        const area = $area.get(0);\r\n        let areaBoundingRect;\r\n        if (area) {\r\n            areaBoundingRect = getBoundingRect(area);\r\n            return {\r\n                left: mousePosition.x - areaBoundingRect.left,\r\n                top: mousePosition.y - areaBoundingRect.top,\r\n                right: areaBoundingRect.right - mousePosition.x,\r\n                bottom: areaBoundingRect.bottom - mousePosition.y\r\n            }\r\n        }\r\n        return {}\r\n    }\r\n    _calculateScrollSpeed(distance) {\r\n        const component = this._component;\r\n        const sensitivity = component.option(\"scrollSensitivity\");\r\n        const maxSpeed = component.option(\"scrollSpeed\");\r\n        return Math.ceil(((sensitivity - distance) / sensitivity) ** 2 * maxSpeed)\r\n    }\r\n    scrollByStep() {\r\n        const that = this;\r\n        if (that._$scrollableAtPointer && that._scrollSpeed) {\r\n            if (that._$scrollableAtPointer.hasClass(\"dx-scrollable-container\")) {\r\n                const $scrollable = that._$scrollableAtPointer.closest(\".dx-scrollable\");\r\n                const scrollableInstance = $scrollable.data(\"dxScrollable\") || $scrollable.data(\"dxScrollView\");\r\n                if (scrollableInstance) {\r\n                    const nextScrollPosition = scrollableInstance.scrollOffset()[that._limitProps.start] + that._scrollSpeed;\r\n                    scrollableInstance.scrollTo({\r\n                        [that._limitProps.start]: nextScrollPosition\r\n                    })\r\n                }\r\n            } else {\r\n                const nextScrollPosition = that._$scrollableAtPointer[that._scrollValue]() + that._scrollSpeed;\r\n                that._$scrollableAtPointer[that._scrollValue](nextScrollPosition)\r\n            }\r\n            const dragMoveArgs = that._component._dragMoveArgs;\r\n            if (dragMoveArgs) {\r\n                that._component._dragMoveHandler(dragMoveArgs)\r\n            }\r\n        }\r\n    }\r\n    reset() {\r\n        this._$scrollableAtPointer = null;\r\n        this._scrollSpeed = 0;\r\n        this._preventScroll = true\r\n    }\r\n    isOutsideScrollable($scrollable, event) {\r\n        if (!$scrollable) {\r\n            return false\r\n        }\r\n        const scrollableSize = getBoundingRect($scrollable.get(0));\r\n        const start = scrollableSize[this._limitProps.start];\r\n        const size = scrollableSize[this._sizeAttr];\r\n        const mousePosition = getMousePosition(event);\r\n        const location = \"width\" === this._sizeAttr ? mousePosition.x : mousePosition.y;\r\n        return location < start || location > start + size\r\n    }\r\n}\r\nclass ScrollAnimator extends Animator {\r\n    ctor(strategy) {\r\n        super.ctor();\r\n        this._strategy = strategy\r\n    }\r\n    _step() {\r\n        const horizontalScrollHelper = this._strategy._horizontalScrollHelper;\r\n        const verticalScrollHelper = this._strategy._verticalScrollHelper;\r\n        null === horizontalScrollHelper || void 0 === horizontalScrollHelper || horizontalScrollHelper.scrollByStep();\r\n        null === verticalScrollHelper || void 0 === verticalScrollHelper || verticalScrollHelper.scrollByStep()\r\n    }\r\n}\r\nclass Draggable extends DOMComponent {\r\n    reset() {}\r\n    dragMove(e) {}\r\n    dragEnter() {}\r\n    dragLeave() {}\r\n    dragEnd(sourceEvent) {\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        sourceDraggable._fireRemoveEvent(sourceEvent);\r\n        return Deferred().resolve()\r\n    }\r\n    _fireRemoveEvent(sourceEvent) {}\r\n    _getDefaultOptions() {\r\n        return _extends({}, super._getDefaultOptions(), {\r\n            onDragStart: null,\r\n            onDragMove: null,\r\n            onDragEnd: null,\r\n            onDragEnter: null,\r\n            onDragLeave: null,\r\n            onDragCancel: null,\r\n            onCancelByEsc: false,\r\n            onDrop: null,\r\n            immediate: true,\r\n            dragDirection: \"both\",\r\n            boundOffset: 0,\r\n            allowMoveByClick: false,\r\n            itemData: null,\r\n            contentTemplate: \"content\",\r\n            handle: \"\",\r\n            filter: \"\",\r\n            clone: false,\r\n            autoScroll: true,\r\n            scrollSpeed: 30,\r\n            scrollSensitivity: 60\r\n        })\r\n    }\r\n    _setOptionsByReference() {\r\n        super._setOptionsByReference.apply(this, arguments);\r\n        extend(this._optionsByReference, {\r\n            component: true,\r\n            group: true,\r\n            itemData: true,\r\n            data: true\r\n        })\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._attachEventHandlers();\r\n        this._scrollAnimator = new ScrollAnimator(this);\r\n        this._horizontalScrollHelper = new ScrollHelper(\"horizontal\", this);\r\n        this._verticalScrollHelper = new ScrollHelper(\"vertical\", this);\r\n        this._initScrollTop = 0;\r\n        this._initScrollLeft = 0\r\n    }\r\n    _normalizeCursorOffset(offset) {\r\n        if (isObject(offset)) {\r\n            offset = {\r\n                h: offset.x,\r\n                v: offset.y\r\n            }\r\n        }\r\n        offset = splitPair(offset).map((value => parseFloat(value)));\r\n        return {\r\n            left: offset[0],\r\n            top: 1 === offset.length ? offset[0] : offset[1]\r\n        }\r\n    }\r\n    _getNormalizedCursorOffset(offset, options) {\r\n        if (isFunction(offset)) {\r\n            offset = offset.call(this, options)\r\n        }\r\n        return this._normalizeCursorOffset(offset)\r\n    }\r\n    _calculateElementOffset(options) {\r\n        let elementOffset;\r\n        let dragElementOffset;\r\n        const {\r\n            event: event\r\n        } = options;\r\n        const $element = $(options.itemElement);\r\n        const $dragElement = $(options.dragElement);\r\n        const isCloned = this._dragElementIsCloned();\r\n        const cursorOffset = this.option(\"cursorOffset\");\r\n        let normalizedCursorOffset = {\r\n            left: 0,\r\n            top: 0\r\n        };\r\n        const currentLocate = this._initialLocate = locate($dragElement);\r\n        if (isCloned || options.initialOffset || cursorOffset) {\r\n            elementOffset = options.initialOffset || $element.offset();\r\n            if (cursorOffset) {\r\n                normalizedCursorOffset = this._getNormalizedCursorOffset(cursorOffset, options);\r\n                if (isFinite(normalizedCursorOffset.left)) {\r\n                    elementOffset.left = event.pageX\r\n                }\r\n                if (isFinite(normalizedCursorOffset.top)) {\r\n                    elementOffset.top = event.pageY\r\n                }\r\n            }\r\n            dragElementOffset = $dragElement.offset();\r\n            elementOffset.top -= dragElementOffset.top + (normalizedCursorOffset.top || 0) - currentLocate.top;\r\n            elementOffset.left -= dragElementOffset.left + (normalizedCursorOffset.left || 0) - currentLocate.left\r\n        }\r\n        return elementOffset\r\n    }\r\n    _initPosition(options) {\r\n        const $dragElement = $(options.dragElement);\r\n        const elementOffset = this._calculateElementOffset(options);\r\n        if (elementOffset) {\r\n            this._move(elementOffset, $dragElement)\r\n        }\r\n        this._startPosition = locate($dragElement)\r\n    }\r\n    _startAnimator() {\r\n        if (!this._scrollAnimator.inProgress()) {\r\n            this._scrollAnimator.start()\r\n        }\r\n    }\r\n    _stopAnimator() {\r\n        this._scrollAnimator.stop()\r\n    }\r\n    _addWidgetPrefix(className) {\r\n        const componentName = this.NAME;\r\n        return dasherize(componentName) + (className ? `-${className}` : \"\")\r\n    }\r\n    _getItemsSelector() {\r\n        return this.option(\"filter\") || \"\"\r\n    }\r\n    _$content() {\r\n        const $element = this.$element();\r\n        const $wrapper = $element.children(\".dx-template-wrapper\");\r\n        return $wrapper.length ? $wrapper : $element\r\n    }\r\n    _attachEventHandlers() {\r\n        if (this.option(\"disabled\")) {\r\n            return\r\n        }\r\n        let $element = this._$content();\r\n        let itemsSelector = this._getItemsSelector();\r\n        const allowMoveByClick = this.option(\"allowMoveByClick\");\r\n        const data = {\r\n            direction: this.option(\"dragDirection\"),\r\n            immediate: this.option(\"immediate\"),\r\n            checkDropTarget: ($target, event) => {\r\n                const targetGroup = this.option(\"group\");\r\n                const sourceGroup = this._getSourceDraggable().option(\"group\");\r\n                const $scrollable = this._getScrollable($target);\r\n                if (this._verticalScrollHelper.isOutsideScrollable($scrollable, event) || this._horizontalScrollHelper.isOutsideScrollable($scrollable, event)) {\r\n                    return false\r\n                }\r\n                return sourceGroup && sourceGroup === targetGroup\r\n            }\r\n        };\r\n        if (allowMoveByClick) {\r\n            $element = this._getArea();\r\n            eventsEngine.on($element, POINTERDOWN_EVENT_NAME, data, this._pointerDownHandler.bind(this))\r\n        }\r\n        if (\">\" === itemsSelector[0]) {\r\n            itemsSelector = itemsSelector.slice(1)\r\n        }\r\n        eventsEngine.on($element, DRAGSTART_EVENT_NAME, itemsSelector, data, this._dragStartHandler.bind(this));\r\n        eventsEngine.on($element, DRAG_EVENT_NAME, data, this._dragMoveHandler.bind(this));\r\n        eventsEngine.on($element, DRAGEND_EVENT_NAME, data, this._dragEndHandler.bind(this));\r\n        eventsEngine.on($element, DRAG_ENTER_EVENT_NAME, data, this._dragEnterHandler.bind(this));\r\n        eventsEngine.on($element, DRAGEND_LEAVE_EVENT_NAME, data, this._dragLeaveHandler.bind(this));\r\n        if (this.option(\"onCancelByEsc\")) {\r\n            eventsEngine.on($element, KEYDOWN_EVENT_NAME, this._keydownHandler.bind(this))\r\n        }\r\n    }\r\n    _dragElementIsCloned() {\r\n        var _this$_$dragElement;\r\n        return null === (_this$_$dragElement = this._$dragElement) || void 0 === _this$_$dragElement ? void 0 : _this$_$dragElement.hasClass(this._addWidgetPrefix(\"clone\"))\r\n    }\r\n    _getDragTemplateArgs($element, $container) {\r\n        return {\r\n            container: getPublicElement($container),\r\n            model: {\r\n                itemData: this.option(\"itemData\"),\r\n                itemElement: getPublicElement($element)\r\n            }\r\n        }\r\n    }\r\n    _createDragElement($element) {\r\n        let result = $element;\r\n        const clone = this.option(\"clone\");\r\n        const $container = this._getContainer();\r\n        let template = this.option(\"dragTemplate\");\r\n        if (template) {\r\n            template = this._getTemplate(template);\r\n            result = $(\"<div>\").appendTo($container);\r\n            template.render(this._getDragTemplateArgs($element, result))\r\n        } else if (clone) {\r\n            result = $(\"<div>\").appendTo($container);\r\n            $element.clone().css({\r\n                width: $element.css(\"width\"),\r\n                height: $element.css(\"height\")\r\n            }).appendTo(result)\r\n        }\r\n        return result.toggleClass(this._addWidgetPrefix(\"clone\"), result.get(0) !== $element.get(0)).toggleClass(\"dx-rtl\", this.option(\"rtlEnabled\"))\r\n    }\r\n    _resetDragElement() {\r\n        if (this._dragElementIsCloned()) {\r\n            var _this$_$dragElement2;\r\n            null === (_this$_$dragElement2 = this._$dragElement) || void 0 === _this$_$dragElement2 || _this$_$dragElement2.remove()\r\n        } else {\r\n            this._toggleDraggingClass(false)\r\n        }\r\n        this._$dragElement = null\r\n    }\r\n    _resetSourceElement() {\r\n        this._toggleDragSourceClass(false);\r\n        this._$sourceElement = null\r\n    }\r\n    _detachEventHandlers() {\r\n        eventsEngine.off(this._$content(), `.${DRAGGABLE}`);\r\n        eventsEngine.off(this._getArea(), `.${DRAGGABLE}`)\r\n    }\r\n    _move(position, $element) {\r\n        move($element || this._$dragElement, position)\r\n    }\r\n    _getDraggableElement(e) {\r\n        const $sourceElement = this._getSourceElement();\r\n        if ($sourceElement) {\r\n            return $sourceElement\r\n        }\r\n        const allowMoveByClick = this.option(\"allowMoveByClick\");\r\n        if (allowMoveByClick) {\r\n            return this.$element()\r\n        }\r\n        let $target = $(null === e || void 0 === e ? void 0 : e.target);\r\n        const itemsSelector = this._getItemsSelector();\r\n        if (\">\" === itemsSelector[0]) {\r\n            const $items = this._$content().find(itemsSelector);\r\n            if (!$items.is($target)) {\r\n                $target = $target.closest($items)\r\n            }\r\n        }\r\n        return $target\r\n    }\r\n    _getSourceElement() {\r\n        const draggable = this._getSourceDraggable();\r\n        return draggable._$sourceElement\r\n    }\r\n    _pointerDownHandler(e) {\r\n        if (needSkipEvent(e)) {\r\n            return\r\n        }\r\n        const position = {};\r\n        const $element = this.$element();\r\n        const {\r\n            dragDirection: dragDirection\r\n        } = this.option();\r\n        if (\"horizontal\" === dragDirection || \"both\" === dragDirection) {\r\n            position.left = e.pageX - $element.offset().left + locate($element).left - getWidth($element) / 2\r\n        }\r\n        if (\"vertical\" === dragDirection || \"both\" === dragDirection) {\r\n            position.top = e.pageY - $element.offset().top + locate($element).top - getHeight($element) / 2\r\n        }\r\n        this._move(position, $element);\r\n        this._getAction(\"onDragMove\")(this._getEventArgs(e))\r\n    }\r\n    _isValidElement(event, $element) {\r\n        var _event$originalEvent;\r\n        const {\r\n            handle: handle\r\n        } = this.option();\r\n        const $target = $(null === (_event$originalEvent = event.originalEvent) || void 0 === _event$originalEvent ? void 0 : _event$originalEvent.target);\r\n        if (handle && !$target.closest(handle).length) {\r\n            return false\r\n        }\r\n        if (!$element.length) {\r\n            return false\r\n        }\r\n        return !$element.is(\".dx-state-disabled, .dx-state-disabled *\")\r\n    }\r\n    _dragStartHandler(e) {\r\n        const $element = this._getDraggableElement(e);\r\n        this.dragInProgress = true;\r\n        if (!this._isValidElement(e, $element)) {\r\n            e.cancel = true;\r\n            return\r\n        }\r\n        if (this._$sourceElement) {\r\n            return\r\n        }\r\n        const dragStartArgs = this._getDragStartArgs(e, $element);\r\n        this._getAction(\"onDragStart\")(dragStartArgs);\r\n        if (dragStartArgs.cancel) {\r\n            e.cancel = true;\r\n            return\r\n        }\r\n        this.option(\"itemData\", dragStartArgs.itemData);\r\n        this._setSourceDraggable();\r\n        this._$sourceElement = $element;\r\n        let initialOffset = $element.offset();\r\n        if (!this._hasClonedDraggable() && this.option(\"autoScroll\")) {\r\n            this._initScrollTop = this._getScrollableScrollTop();\r\n            this._initScrollLeft = this._getScrollableScrollLeft();\r\n            initialOffset = this._getDraggableElementOffset(initialOffset.left, initialOffset.top)\r\n        }\r\n        const $dragElement = this._$dragElement = this._createDragElement($element);\r\n        this._toggleDraggingClass(true);\r\n        this._toggleDragSourceClass(true);\r\n        this._setGestureCoverCursor($dragElement.children());\r\n        const isFixedPosition = \"fixed\" === $dragElement.css(\"position\");\r\n        this._initPosition(extend({}, dragStartArgs, {\r\n            dragElement: $dragElement.get(0),\r\n            initialOffset: isFixedPosition && initialOffset\r\n        }));\r\n        this._getAction(\"onDraggableElementShown\")(_extends({}, dragStartArgs, {\r\n            dragElement: $dragElement\r\n        }));\r\n        const $area = this._getArea();\r\n        const areaOffset = this._getAreaOffset($area);\r\n        const boundOffset = this._getBoundOffset();\r\n        const areaWidth = getOuterWidth($area);\r\n        const areaHeight = getOuterHeight($area);\r\n        const elementWidth = getWidth($dragElement);\r\n        const elementHeight = getHeight($dragElement);\r\n        const startOffset_left = $dragElement.offset().left - areaOffset.left,\r\n            startOffset_top = $dragElement.offset().top - areaOffset.top;\r\n        if ($area.length) {\r\n            e.maxLeftOffset = startOffset_left - boundOffset.left;\r\n            e.maxRightOffset = areaWidth - startOffset_left - elementWidth - boundOffset.right;\r\n            e.maxTopOffset = startOffset_top - boundOffset.top;\r\n            e.maxBottomOffset = areaHeight - startOffset_top - elementHeight - boundOffset.bottom\r\n        }\r\n        if (this.option(\"autoScroll\")) {\r\n            this._startAnimator()\r\n        }\r\n    }\r\n    _getAreaOffset($area) {\r\n        const offset = $area && positionUtils.offset($area);\r\n        return offset || {\r\n            left: 0,\r\n            top: 0\r\n        }\r\n    }\r\n    _toggleDraggingClass(value) {\r\n        var _this$_$dragElement3;\r\n        null === (_this$_$dragElement3 = this._$dragElement) || void 0 === _this$_$dragElement3 || _this$_$dragElement3.toggleClass(this._addWidgetPrefix(\"dragging\"), value)\r\n    }\r\n    _toggleDragSourceClass(value, $element) {\r\n        const $sourceElement = $element || this._$sourceElement;\r\n        null === $sourceElement || void 0 === $sourceElement || $sourceElement.toggleClass(this._addWidgetPrefix(\"source\"), value)\r\n    }\r\n    _setGestureCoverCursor($element) {\r\n        $(\".dx-gesture-cover\").css(\"cursor\", $element.css(\"cursor\"))\r\n    }\r\n    _getBoundOffset() {\r\n        let boundOffset = this.option(\"boundOffset\");\r\n        if (isFunction(boundOffset)) {\r\n            boundOffset = boundOffset.call(this)\r\n        }\r\n        return quadToObject(boundOffset)\r\n    }\r\n    _getArea() {\r\n        let area = this.option(\"boundary\");\r\n        if (isFunction(area)) {\r\n            area = area.call(this)\r\n        }\r\n        return $(area)\r\n    }\r\n    _getContainer() {\r\n        let {\r\n            container: container\r\n        } = this.option();\r\n        if (void 0 === container) {\r\n            container = viewPort()\r\n        }\r\n        return $(container)\r\n    }\r\n    _getDraggableElementOffset(initialOffsetX, initialOffsetY) {\r\n        var _this$_startPosition, _this$_startPosition2;\r\n        const initScrollTop = this._initScrollTop;\r\n        const initScrollLeft = this._initScrollLeft;\r\n        const scrollTop = this._getScrollableScrollTop();\r\n        const scrollLeft = this._getScrollableScrollLeft();\r\n        const elementPosition = $(this.element()).css(\"position\");\r\n        const isFixedPosition = \"fixed\" === elementPosition;\r\n        const result = {\r\n            left: ((null === (_this$_startPosition = this._startPosition) || void 0 === _this$_startPosition ? void 0 : _this$_startPosition.left) ?? 0) + initialOffsetX,\r\n            top: ((null === (_this$_startPosition2 = this._startPosition) || void 0 === _this$_startPosition2 ? void 0 : _this$_startPosition2.top) ?? 0) + initialOffsetY\r\n        };\r\n        if (isFixedPosition || this._hasClonedDraggable()) {\r\n            return result\r\n        }\r\n        return {\r\n            left: isNumeric(scrollLeft) ? result.left + scrollLeft - initScrollLeft : result.left,\r\n            top: isNumeric(scrollTop) ? result.top + scrollTop - initScrollTop : result.top\r\n        }\r\n    }\r\n    _hasClonedDraggable() {\r\n        return this.option(\"clone\") || this.option(\"dragTemplate\")\r\n    }\r\n    _dragMoveHandler(e) {\r\n        this._dragMoveArgs = e;\r\n        if (!this._$dragElement) {\r\n            e.cancel = true;\r\n            return\r\n        }\r\n        const offset = this._getDraggableElementOffset(e.offset.x, e.offset.y);\r\n        this._move(offset);\r\n        this._updateScrollable(e);\r\n        const eventArgs = this._getEventArgs(e);\r\n        this._getAction(\"onDragMove\")(eventArgs);\r\n        if (true === eventArgs.cancel) {\r\n            return\r\n        }\r\n        const targetDraggable = this._getTargetDraggable();\r\n        targetDraggable.dragMove(e, scrollBy)\r\n    }\r\n    _updateScrollable(e) {\r\n        const that = this;\r\n        if (that.option(\"autoScroll\")) {\r\n            const mousePosition = getMousePosition(e);\r\n            const allObjects = domAdapter.elementsFromPoint(mousePosition.x, mousePosition.y, this.$element().get(0));\r\n            that._verticalScrollHelper.updateScrollable(allObjects, mousePosition);\r\n            that._horizontalScrollHelper.updateScrollable(allObjects, mousePosition)\r\n        }\r\n    }\r\n    _getScrollable($element) {\r\n        let $scrollable;\r\n        $element.parents().toArray().some((parent => {\r\n            const $parent = $(parent);\r\n            if (this._horizontalScrollHelper.isScrollable($parent) || this._verticalScrollHelper.isScrollable($parent)) {\r\n                $scrollable = $parent;\r\n                return true\r\n            }\r\n            return false\r\n        }));\r\n        return $scrollable\r\n    }\r\n    _getScrollableScrollTop() {\r\n        var _this$_getScrollable;\r\n        return (null === (_this$_getScrollable = this._getScrollable($(this.element()))) || void 0 === _this$_getScrollable ? void 0 : _this$_getScrollable.scrollTop()) ?? 0\r\n    }\r\n    _getScrollableScrollLeft() {\r\n        var _this$_getScrollable2;\r\n        return (null === (_this$_getScrollable2 = this._getScrollable($(this.element()))) || void 0 === _this$_getScrollable2 ? void 0 : _this$_getScrollable2.scrollLeft()) ?? 0\r\n    }\r\n    _defaultActionArgs() {\r\n        const args = super._defaultActionArgs.apply(this, arguments);\r\n        const component = this.option(\"component\");\r\n        if (component) {\r\n            args.component = component;\r\n            args.element = component.element()\r\n        }\r\n        return args\r\n    }\r\n    _getEventArgs(e) {\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        const targetDraggable = this._getTargetDraggable();\r\n        return {\r\n            event: e,\r\n            itemData: sourceDraggable.option(\"itemData\"),\r\n            itemElement: getPublicElement(sourceDraggable._$sourceElement),\r\n            fromComponent: sourceDraggable.option(\"component\") || sourceDraggable,\r\n            toComponent: targetDraggable.option(\"component\") || targetDraggable,\r\n            fromData: sourceDraggable.option(\"data\"),\r\n            toData: targetDraggable.option(\"data\")\r\n        }\r\n    }\r\n    _getDragStartArgs(e, $itemElement) {\r\n        const args = this._getEventArgs(e);\r\n        return {\r\n            event: args.event,\r\n            itemData: args.itemData,\r\n            itemElement: $itemElement,\r\n            fromData: args.fromData\r\n        }\r\n    }\r\n    _revertItemToInitialPosition() {\r\n        !this._dragElementIsCloned() && this._move(this._initialLocate, this._$sourceElement)\r\n    }\r\n    _dragEndHandler(e) {\r\n        const d = Deferred();\r\n        const dragEndEventArgs = this._getEventArgs(e);\r\n        const dropEventArgs = this._getEventArgs(e);\r\n        const targetDraggable = this._getTargetDraggable();\r\n        let needRevertPosition = true;\r\n        this.dragInProgress = false;\r\n        try {\r\n            this._getAction(\"onDragEnd\")(dragEndEventArgs)\r\n        } finally {\r\n            when(fromPromise(dragEndEventArgs.cancel)).done((cancel => {\r\n                if (!cancel) {\r\n                    if (targetDraggable !== this) {\r\n                        targetDraggable._getAction(\"onDrop\")(dropEventArgs)\r\n                    }\r\n                    if (!dropEventArgs.cancel) {\r\n                        needRevertPosition = false;\r\n                        when(fromPromise(targetDraggable.dragEnd(dragEndEventArgs))).always(d.resolve);\r\n                        return\r\n                    }\r\n                }\r\n                d.resolve()\r\n            })).fail(d.resolve);\r\n            d.done((() => {\r\n                if (needRevertPosition) {\r\n                    this._revertItemToInitialPosition()\r\n                }\r\n                this._resetDragOptions(targetDraggable)\r\n            }))\r\n        }\r\n    }\r\n    _isTargetOverAnotherDraggable(e) {\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        if (this === sourceDraggable) {\r\n            return false\r\n        }\r\n        const $dragElement = sourceDraggable._$dragElement;\r\n        const $sourceDraggableElement = sourceDraggable.$element();\r\n        const $targetDraggableElement = this.$element();\r\n        const mousePosition = getMousePosition(e);\r\n        const elements = domAdapter.elementsFromPoint(mousePosition.x, mousePosition.y, this.element());\r\n        const firstWidgetElement = elements.filter((element => {\r\n            const $element = $(element);\r\n            if ($element.hasClass(this._addWidgetPrefix())) {\r\n                return !$element.closest($dragElement).length\r\n            }\r\n            return false\r\n        }))[0];\r\n        const $sourceElement = this._getSourceElement();\r\n        const isTargetOverItself = firstWidgetElement === $sourceDraggableElement.get(0);\r\n        const isTargetOverNestedDraggable = $(firstWidgetElement).closest($sourceElement).length;\r\n        return !firstWidgetElement || firstWidgetElement === $targetDraggableElement.get(0) && !isTargetOverItself && !isTargetOverNestedDraggable\r\n    }\r\n    _dragEnterHandler(e) {\r\n        this._fireDragEnterEvent(e);\r\n        if (this._isTargetOverAnotherDraggable(e)) {\r\n            this._setTargetDraggable()\r\n        }\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        sourceDraggable.dragEnter(e)\r\n    }\r\n    _dragLeaveHandler(e) {\r\n        this._fireDragLeaveEvent(e);\r\n        this._resetTargetDraggable();\r\n        if (this !== this._getSourceDraggable()) {\r\n            this.reset()\r\n        }\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        sourceDraggable.dragLeave(e)\r\n    }\r\n    _keydownHandler(e) {\r\n        if (this.dragInProgress && \"Escape\" === e.key) {\r\n            this._keydownEscapeHandler(e)\r\n        }\r\n    }\r\n    _keydownEscapeHandler(e) {\r\n        var _sourceDraggable;\r\n        const $sourceElement = this._getSourceElement();\r\n        if (!$sourceElement) {\r\n            return\r\n        }\r\n        const dragCancelEventArgs = this._getEventArgs(e);\r\n        this._getAction(\"onDragCancel\")(dragCancelEventArgs);\r\n        if (dragCancelEventArgs.cancel) {\r\n            return\r\n        }\r\n        this.dragInProgress = false;\r\n        null === (_sourceDraggable = sourceDraggable) || void 0 === _sourceDraggable || _sourceDraggable._toggleDraggingClass(false);\r\n        this._detachEventHandlers();\r\n        this._revertItemToInitialPosition();\r\n        const targetDraggable = this._getTargetDraggable();\r\n        this._resetDragOptions(targetDraggable);\r\n        this._attachEventHandlers()\r\n    }\r\n    _getAction(name) {\r\n        return this[`_${name}Action`] || this._createActionByOption(name)\r\n    }\r\n    _getAnonymousTemplateName() {\r\n        return \"content\"\r\n    }\r\n    _initTemplates() {\r\n        if (!this.option(\"contentTemplate\")) {\r\n            return\r\n        }\r\n        this._templateManager.addDefaultTemplates({\r\n            content: new EmptyTemplate\r\n        });\r\n        super._initTemplates.apply(this, arguments)\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this.$element().addClass(this._addWidgetPrefix());\r\n        const transclude = this._templateManager.anonymousTemplateName === this.option(\"contentTemplate\");\r\n        const template = this._getTemplateByOption(\"contentTemplate\");\r\n        if (template) {\r\n            $(template.render({\r\n                container: this.element(),\r\n                transclude: transclude\r\n            }))\r\n        }\r\n    }\r\n    _optionChanged(args) {\r\n        const {\r\n            name: name\r\n        } = args;\r\n        switch (name) {\r\n            case \"onDragStart\":\r\n            case \"onDragMove\":\r\n            case \"onDragEnd\":\r\n            case \"onDrop\":\r\n            case \"onDragEnter\":\r\n            case \"onDragLeave\":\r\n            case \"onDragCancel\":\r\n            case \"onDraggableElementShown\":\r\n                this[`_${name}Action`] = this._createActionByOption(name);\r\n                break;\r\n            case \"dragTemplate\":\r\n            case \"contentTemplate\":\r\n            case \"container\":\r\n            case \"clone\":\r\n            case \"scrollSensitivity\":\r\n            case \"scrollSpeed\":\r\n            case \"boundOffset\":\r\n            case \"handle\":\r\n            case \"group\":\r\n            case \"data\":\r\n            case \"itemData\":\r\n                break;\r\n            case \"allowMoveByClick\":\r\n            case \"dragDirection\":\r\n            case \"disabled\":\r\n            case \"boundary\":\r\n            case \"filter\":\r\n            case \"immediate\":\r\n                this._resetDragElement();\r\n                this._detachEventHandlers();\r\n                this._attachEventHandlers();\r\n                break;\r\n            case \"onCancelByEsc\":\r\n                this._keydownHandler();\r\n                break;\r\n            case \"autoScroll\":\r\n                this._verticalScrollHelper.reset();\r\n                this._horizontalScrollHelper.reset();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _getTargetDraggable() {\r\n        return targetDraggable || this\r\n    }\r\n    _getSourceDraggable() {\r\n        return sourceDraggable || this\r\n    }\r\n    _setTargetDraggable() {\r\n        const currentGroup = this.option(\"group\");\r\n        const sourceDraggable = this._getSourceDraggable();\r\n        if (currentGroup && currentGroup === sourceDraggable.option(\"group\")) {\r\n            targetDraggable = this\r\n        }\r\n    }\r\n    _setSourceDraggable() {\r\n        sourceDraggable = this\r\n    }\r\n    _resetSourceDraggable() {\r\n        sourceDraggable = null\r\n    }\r\n    _resetTargetDraggable() {\r\n        targetDraggable = null\r\n    }\r\n    _resetDragOptions(targetDraggable) {\r\n        this.reset();\r\n        targetDraggable.reset();\r\n        this._stopAnimator();\r\n        this._horizontalScrollHelper.reset();\r\n        this._verticalScrollHelper.reset();\r\n        this._resetDragElement();\r\n        this._resetSourceElement();\r\n        this._resetTargetDraggable();\r\n        this._resetSourceDraggable()\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        this._detachEventHandlers();\r\n        this._resetDragElement();\r\n        this._resetTargetDraggable();\r\n        this._resetSourceDraggable();\r\n        this._$sourceElement = null;\r\n        this._stopAnimator()\r\n    }\r\n    _fireDragEnterEvent(sourceEvent) {\r\n        const args = this._getEventArgs(sourceEvent);\r\n        this._getAction(\"onDragEnter\")(args)\r\n    }\r\n    _fireDragLeaveEvent(sourceEvent) {\r\n        const args = this._getEventArgs(sourceEvent);\r\n        this._getAction(\"onDragLeave\")(args)\r\n    }\r\n}\r\nregisterComponent(DRAGGABLE, Draggable);\r\nexport default Draggable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}