{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/column_chooser/m_column_chooser.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport devices from \"../../../../core/devices\";\nimport $ from \"../../../../core/renderer\";\nimport { deferUpdate } from \"../../../../core/utils/common\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getOuterHeight, getOuterWidth } from \"../../../../core/utils/size\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport Button from \"../../../../ui/button\";\nimport Popup from \"../../../../ui/popup/ui.popup\";\nimport { current, isGeneric, isMaterial as isMaterialTheme } from \"../../../../ui/themes\";\nimport TreeView from \"../../../../ui/tree_view\";\nimport modules from \"../m_modules\";\nimport { ColumnsView } from \"../views/m_columns_view\";\nconst COLUMN_CHOOSER_CLASS = \"column-chooser\";\nconst COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\nconst NOTOUCH_ACTION_CLASS = \"notouch-action\";\nconst COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\nconst COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\nconst COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\nconst COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\nconst COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\nconst COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\nconst COLUMN_OPTIONS_USED_IN_ITEMS = [\"showInColumnChooser\", \"caption\", \"allowHiding\", \"visible\", \"cssClass\", \"ownerBand\"];\nconst processItems = function (that, chooserColumns) {\n  const items = [];\n  const isSelectMode = that.isSelectMode();\n  const isRecursive = that.option(\"columnChooser.selection.recursive\");\n  if (chooserColumns.length) {\n    each(chooserColumns, (index, column) => {\n      const item = {\n        text: column.caption,\n        cssClass: column.cssClass,\n        allowHiding: column.allowHiding,\n        expanded: true,\n        id: column.index,\n        disabled: false === column.allowHiding,\n        parentId: isDefined(column.ownerBand) ? column.ownerBand : null\n      };\n      const isRecursiveWithColumns = isRecursive && column.hasColumns;\n      if (isSelectMode && !isRecursiveWithColumns) {\n        item.selected = column.visible;\n      }\n      items.push(item);\n    });\n  }\n  return items;\n};\nexport class ColumnChooserController extends modules.ViewController {\n  init() {\n    super.init();\n    this._rowsView = this.getView(\"rowsView\");\n  }\n  renderShowColumnChooserButton($element) {\n    const that = this;\n    const columnChooserButtonClass = that.addWidgetPrefix(\"column-chooser-button\");\n    const columnChooserEnabled = that.option(\"columnChooser.enabled\");\n    const $showColumnChooserButton = $element.find(`.${columnChooserButtonClass}`);\n    let $columnChooserButton;\n    if (columnChooserEnabled) {\n      if (!$showColumnChooserButton.length) {\n        $columnChooserButton = $(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\n        that._createComponent($columnChooserButton, Button, {\n          icon: \"column-chooser\",\n          onClick() {\n            that.getView(\"columnChooserView\").showColumnChooser();\n          },\n          hint: that.option(\"columnChooser.title\"),\n          integrationOptions: {}\n        });\n      } else {\n        $showColumnChooserButton.show();\n      }\n    } else {\n      $showColumnChooserButton.hide();\n    }\n  }\n  getPosition() {\n    const position = this.option(\"columnChooser.position\");\n    return isDefined(position) ? position : {\n      my: \"right bottom\",\n      at: \"right bottom\",\n      of: this._rowsView && this._rowsView.element(),\n      collision: \"fit\",\n      offset: \"-2 -2\",\n      boundaryOffset: \"2 2\"\n    };\n  }\n}\nexport class ColumnChooserView extends ColumnsView {\n  optionChanged(args) {\n    if (\"columnChooser\" === args.name) {\n      this._initializePopupContainer();\n      this.render(null, \"full\");\n    } else {\n      super.optionChanged(args);\n    }\n  }\n  publicMethods() {\n    return [\"showColumnChooser\", \"hideColumnChooser\"];\n  }\n  _resizeCore() {}\n  _isWinDevice() {\n    return !!devices.real().win;\n  }\n  _initializePopupContainer() {\n    const that = this;\n    const columnChooserClass = that.addWidgetPrefix(\"column-chooser\");\n    const $element = that.element().addClass(columnChooserClass);\n    const columnChooserOptions = that.option(\"columnChooser\");\n    const popupPosition = this._columnChooserController.getPosition();\n    const themeName = current();\n    const isGenericTheme = isGeneric(themeName);\n    const isMaterial = isMaterialTheme(themeName);\n    const dxPopupOptions = {\n      visible: false,\n      shading: false,\n      showCloseButton: false,\n      dragEnabled: true,\n      resizeEnabled: true,\n      wrapperAttr: {\n        class: columnChooserClass\n      },\n      toolbarItems: [{\n        text: columnChooserOptions.title,\n        toolbar: \"top\",\n        location: isGenericTheme || isMaterial ? \"before\" : \"center\"\n      }],\n      position: popupPosition,\n      width: columnChooserOptions.width,\n      height: columnChooserOptions.height,\n      rtlEnabled: that.option(\"rtlEnabled\"),\n      onHidden() {\n        if (that._isWinDevice()) {\n          $(\"body\").removeClass(that.addWidgetPrefix(\"notouch-action\"));\n        }\n      },\n      container: columnChooserOptions.container,\n      _loopFocus: true\n    };\n    if (isGenericTheme || isMaterial) {\n      extend(dxPopupOptions, {\n        showCloseButton: true\n      });\n    } else {\n      dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\n        shortcut: \"cancel\"\n      };\n    }\n    if (!isDefined(this._popupContainer)) {\n      that._popupContainer = that._createComponent($element, Popup, dxPopupOptions);\n      that._popupContainer.on(\"optionChanged\", args => {\n        if (\"visible\" === args.name) {\n          that.renderCompleted.fire();\n        }\n      });\n    } else {\n      this._popupContainer.option(dxPopupOptions);\n    }\n    this.setPopupAttributes();\n  }\n  setPopupAttributes() {\n    const isSelectMode = this.isSelectMode();\n    const isBandColumnsUsed = this._columnsController.isBandColumnsUsed();\n    this._popupContainer.setAria({\n      role: \"dialog\",\n      label: messageLocalization.format(\"dxDataGrid-columnChooserTitle\")\n    });\n    this._popupContainer.$wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\n    this._popupContainer.$content().addClass(this.addWidgetPrefix(\"column-chooser-list\"));\n    if (isSelectMode && !isBandColumnsUsed) {\n      this._popupContainer.$content().addClass(this.addWidgetPrefix(\"column-chooser-plain\"));\n    }\n  }\n  _renderCore(change) {\n    if (this._popupContainer) {\n      const isDragMode = !this.isSelectMode();\n      if (!this._columnChooserList || \"full\" === change) {\n        this._renderTreeView();\n      } else if (isDragMode) {\n        this._updateItems();\n      }\n    }\n  }\n  _renderTreeView() {\n    var _columnChooser$search, _columnChooser$search2, _columnChooser$search3;\n    const that = this;\n    const $container = this._popupContainer.$content();\n    const columnChooser = this.option(\"columnChooser\");\n    const isSelectMode = this.isSelectMode();\n    const searchEnabled = isDefined(columnChooser.allowSearch) ? columnChooser.allowSearch : null === (_columnChooser$search = columnChooser.search) || void 0 === _columnChooser$search ? void 0 : _columnChooser$search.enabled;\n    const searchTimeout = isDefined(columnChooser.searchTimeout) ? columnChooser.searchTimeout : null === (_columnChooser$search2 = columnChooser.search) || void 0 === _columnChooser$search2 ? void 0 : _columnChooser$search2.timeout;\n    const treeViewConfig = {\n      dataStructure: \"plain\",\n      activeStateEnabled: true,\n      focusStateEnabled: true,\n      hoverStateEnabled: true,\n      itemTemplate: \"item\",\n      showCheckBoxesMode: \"none\",\n      rootValue: null,\n      searchEnabled: searchEnabled,\n      searchTimeout: searchTimeout,\n      searchEditorOptions: null === (_columnChooser$search3 = columnChooser.search) || void 0 === _columnChooser$search3 ? void 0 : _columnChooser$search3.editorOptions\n    };\n    if (this._isWinDevice()) {\n      treeViewConfig.useNativeScrolling = false;\n    }\n    extend(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\n    if (this._columnChooserList) {\n      if (!treeViewConfig.searchEnabled) {\n        treeViewConfig.searchValue = \"\";\n      }\n      this._columnChooserList.option(treeViewConfig);\n      this._updateItems();\n    } else {\n      this._columnChooserList = this._createComponent($container, TreeView, treeViewConfig);\n      this._updateItems();\n      let scrollTop = 0;\n      this._columnChooserList.on(\"optionChanged\", e => {\n        const scrollable = e.component.getScrollable();\n        scrollTop = scrollable.scrollTop();\n      });\n      this._columnChooserList.on(\"contentReady\", e => {\n        deferUpdate(() => {\n          const scrollable = e.component.getScrollable();\n          scrollable.scrollTo({\n            y: scrollTop\n          });\n          that.renderCompleted.fire();\n        });\n      });\n    }\n  }\n  _prepareDragModeConfig() {\n    const columnChooserOptions = this.option(\"columnChooser\");\n    return {\n      noDataText: columnChooserOptions.emptyPanelText,\n      activeStateEnabled: false,\n      hoverStateEnabled: false,\n      itemTemplate(data, index, item) {\n        $(item).text(data.text).parent().addClass(data.cssClass).addClass(\"dx-column-chooser-item\");\n      }\n    };\n  }\n  _prepareSelectModeConfig() {\n    const that = this;\n    const selectionOptions = this.option(\"columnChooser.selection\") ?? {};\n    let isUpdatingSelection = false;\n    return {\n      selectByClick: selectionOptions.selectByClick,\n      selectNodesRecursive: selectionOptions.recursive,\n      showCheckBoxesMode: selectionOptions.allowSelectAll ? \"selectAll\" : \"normal\",\n      onSelectionChanged: e => {\n        if (isUpdatingSelection) {\n          return;\n        }\n        const nodes = (nodes => {\n          const addNodesToArray = (nodes, flatNodesArray) => nodes.reduce((result, node) => {\n            result.push(node);\n            if (node.children.length) {\n              addNodesToArray(node.children, result);\n            }\n            return result;\n          }, flatNodesArray);\n          return addNodesToArray(nodes, []);\n        })(e.component.getNodes());\n        e.component.beginUpdate();\n        isUpdatingSelection = true;\n        ((e, nodes) => {\n          nodes.filter(node => false === node.itemData.allowHiding).forEach(node => e.component.selectItem(node.key));\n        })(e, nodes);\n        e.component.endUpdate();\n        isUpdatingSelection = false;\n        that.component.beginUpdate();\n        this._isUpdatingColumnVisibility = true;\n        (nodes => {\n          nodes.forEach(node => {\n            const columnIndex = node.itemData.id;\n            const isVisible = false !== node.selected;\n            that._columnsController.columnOption(columnIndex, \"visible\", isVisible);\n          });\n        })(nodes);\n        that.component.endUpdate();\n        this._isUpdatingColumnVisibility = false;\n      }\n    };\n  }\n  _updateItems() {\n    const isSelectMode = this.isSelectMode();\n    const chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n    const items = processItems(this, chooserColumns);\n    this._columnChooserList.option(\"items\", items);\n  }\n  _updateItemsSelection(columnIndices) {\n    const changedColumns = null === columnIndices || void 0 === columnIndices ? void 0 : columnIndices.map(columnIndex => this._columnsController.columnOption(columnIndex));\n    this._columnChooserList.beginUpdate();\n    null === changedColumns || void 0 === changedColumns || changedColumns.forEach(_ref => {\n      let {\n        visible: visible,\n        index: index\n      } = _ref;\n      if (visible) {\n        this._columnChooserList.selectItem(index);\n      } else {\n        this._columnChooserList.unselectItem(index);\n      }\n    });\n    this._columnChooserList.endUpdate();\n  }\n  _columnOptionChanged(e) {\n    super._columnOptionChanged(e);\n    const isSelectMode = this.isSelectMode();\n    if (isSelectMode && this._columnChooserList && !this._isUpdatingColumnVisibility) {\n      const {\n        optionNames: optionNames\n      } = e;\n      const onlyVisibleChanged = optionNames.visible && 1 === optionNames.length;\n      const columnIndices = isDefined(e.columnIndex) ? [e.columnIndex] : e.columnIndices;\n      const needUpdate = COLUMN_OPTIONS_USED_IN_ITEMS.some(optionName => optionNames[optionName]) || e.changeTypes.columns && optionNames.all;\n      if (needUpdate) {\n        this._updateItemsSelection(columnIndices);\n        if (!onlyVisibleChanged) {\n          this._updateItems();\n        }\n      }\n    }\n  }\n  getColumnElements() {\n    const result = [];\n    const isSelectMode = this.isSelectMode();\n    const chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n    const $content = this._popupContainer && this._popupContainer.$content();\n    const $nodes = $content && $content.find(\".dx-treeview-node\");\n    if ($nodes) {\n      chooserColumns.forEach(column => {\n        const $node = $nodes.filter(`[data-item-id = '${column.index}']`);\n        const item = $node.length ? $node.children(\".dx-column-chooser-item\").get(0) : null;\n        result.push(item);\n      });\n    }\n    return $(result);\n  }\n  getName() {\n    return \"columnChooser\";\n  }\n  getColumns() {\n    return this._columnsController.getChooserColumns();\n  }\n  allowDragging(column) {\n    const isParentColumnVisible = this._columnsController.isParentColumnVisible(column.index);\n    const isColumnHidden = !column.visible && column.allowHiding;\n    return this.isColumnChooserVisible() && isParentColumnVisible && isColumnHidden;\n  }\n  allowColumnHeaderDragging(column) {\n    const isDragMode = !this.isSelectMode();\n    return isDragMode && this.isColumnChooserVisible() && column.allowHiding;\n  }\n  getBoundingRect() {\n    const container = this._popupContainer && this._popupContainer.$overlayContent();\n    if (container && container.is(\":visible\")) {\n      const offset = container.offset();\n      return {\n        left: offset.left,\n        top: offset.top,\n        right: offset.left + getOuterWidth(container),\n        bottom: offset.top + getOuterHeight(container)\n      };\n    }\n    return null;\n  }\n  showColumnChooser() {\n    if (!this._popupContainer) {\n      this._initializePopupContainer();\n      this.render();\n    }\n    this._popupContainer.show();\n    if (this._isWinDevice()) {\n      $(\"body\").addClass(this.addWidgetPrefix(\"notouch-action\"));\n    }\n  }\n  hideColumnChooser() {\n    if (this._popupContainer) {\n      this._popupContainer.hide();\n    }\n  }\n  isColumnChooserVisible() {\n    const popupContainer = this._popupContainer;\n    return popupContainer && popupContainer.option(\"visible\");\n  }\n  isSelectMode() {\n    return \"select\" === this.option(\"columnChooser.mode\");\n  }\n  hasHiddenColumns() {\n    const isEnabled = this.option(\"columnChooser.enabled\");\n    const hiddenColumns = this.getColumns().filter(column => !column.visible);\n    return isEnabled && hiddenColumns.length;\n  }\n}\nconst headerPanel = Base => class extends Base {\n  _getToolbarItems() {\n    const items = super._getToolbarItems();\n    return this._appendColumnChooserItem(items);\n  }\n  _appendColumnChooserItem(items) {\n    const that = this;\n    const columnChooserEnabled = that.option(\"columnChooser.enabled\");\n    if (columnChooserEnabled) {\n      const onClickHandler = function () {\n        that.component.getView(\"columnChooserView\").showColumnChooser();\n      };\n      const onInitialized = function (e) {\n        $(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(\"column-chooser-button\")));\n      };\n      const hintText = that.option(\"columnChooser.title\");\n      const toolbarItem = {\n        widget: \"dxButton\",\n        options: {\n          icon: \"column-chooser\",\n          onClick: onClickHandler,\n          hint: hintText,\n          text: hintText,\n          onInitialized: onInitialized,\n          elementAttr: {\n            \"aria-haspopup\": \"dialog\"\n          }\n        },\n        showText: \"inMenu\",\n        location: \"after\",\n        name: \"columnChooserButton\",\n        locateInMenu: \"auto\",\n        sortIndex: 40\n      };\n      items.push(toolbarItem);\n    }\n    return items;\n  }\n  optionChanged(args) {\n    if (\"columnChooser\" === args.name) {\n      this._invalidate();\n      args.handled = true;\n    } else {\n      super.optionChanged(args);\n    }\n  }\n};\nconst columns = Base => class extends Base {\n  allowMoveColumn(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n    const isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    const isMoveColumnDisallowed = isSelectMode && \"columnChooser\" === targetLocation;\n    return isMoveColumnDisallowed ? false : super.allowMoveColumn(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation);\n  }\n};\nconst columnHeadersView = Base => class extends Base {\n  allowDragging(column) {\n    const isDragMode = !this._columnChooserView.isSelectMode();\n    const isColumnChooserVisible = this._columnChooserView.isColumnChooserVisible();\n    return isDragMode && isColumnChooserVisible && column.allowHiding || super.allowDragging(column);\n  }\n};\nexport const columnChooserModule = {\n  defaultOptions: () => ({\n    columnChooser: {\n      enabled: false,\n      search: {\n        enabled: false,\n        timeout: 500,\n        editorOptions: {}\n      },\n      selection: {\n        allowSelectAll: false,\n        selectByClick: false,\n        recursive: false\n      },\n      position: void 0,\n      mode: \"dragAndDrop\",\n      width: 250,\n      height: 260,\n      title: messageLocalization.format(\"dxDataGrid-columnChooserTitle\"),\n      emptyPanelText: messageLocalization.format(\"dxDataGrid-columnChooserEmptyText\"),\n      container: void 0\n    }\n  }),\n  controllers: {\n    columnChooser: ColumnChooserController\n  },\n  views: {\n    columnChooserView: ColumnChooserView\n  },\n  extenders: {\n    views: {\n      headerPanel: headerPanel,\n      columnHeadersView: columnHeadersView\n    },\n    controllers: {\n      columns: columns\n    }\n  }\n};","map":{"version":3,"names":["messageLocalization","devices","$","deferUpdate","extend","each","getOuterHeight","getOuterWidth","isDefined","Button","Popup","current","isGeneric","isMaterial","isMaterialTheme","TreeView","modules","ColumnsView","COLUMN_CHOOSER_CLASS","COLUMN_CHOOSER_BUTTON_CLASS","NOTOUCH_ACTION_CLASS","COLUMN_CHOOSER_LIST_CLASS","COLUMN_CHOOSER_PLAIN_CLASS","COLUMN_CHOOSER_DRAG_CLASS","COLUMN_CHOOSER_SELECT_CLASS","COLUMN_CHOOSER_ICON_NAME","COLUMN_CHOOSER_ITEM_CLASS","COLUMN_OPTIONS_USED_IN_ITEMS","processItems","that","chooserColumns","items","isSelectMode","isRecursive","option","length","index","column","item","text","caption","cssClass","allowHiding","expanded","id","disabled","parentId","ownerBand","isRecursiveWithColumns","hasColumns","selected","visible","push","ColumnChooserController","ViewController","init","_rowsView","getView","renderShowColumnChooserButton","$element","columnChooserButtonClass","addWidgetPrefix","columnChooserEnabled","$showColumnChooserButton","find","$columnChooserButton","addClass","appendTo","_createComponent","icon","onClick","showColumnChooser","hint","integrationOptions","show","hide","getPosition","position","my","at","of","element","collision","offset","boundaryOffset","ColumnChooserView","optionChanged","args","name","_initializePopupContainer","render","publicMethods","_resizeCore","_isWinDevice","real","win","columnChooserClass","columnChooserOptions","popupPosition","_columnChooserController","themeName","isGenericTheme","dxPopupOptions","shading","showCloseButton","dragEnabled","resizeEnabled","wrapperAttr","class","toolbarItems","title","toolbar","location","width","height","rtlEnabled","onHidden","removeClass","container","_loopFocus","shortcut","_popupContainer","on","renderCompleted","fire","setPopupAttributes","isBandColumnsUsed","_columnsController","setAria","role","label","format","$wrapper","toggleClass","$content","_renderCore","change","isDragMode","_columnChooserList","_renderTreeView","_updateItems","_columnChooser$search","_columnChooser$search2","_columnChooser$search3","$container","columnChooser","searchEnabled","allowSearch","search","enabled","searchTimeout","timeout","treeViewConfig","dataStructure","activeStateEnabled","focusStateEnabled","hoverStateEnabled","itemTemplate","showCheckBoxesMode","rootValue","searchEditorOptions","editorOptions","useNativeScrolling","_prepareSelectModeConfig","_prepareDragModeConfig","searchValue","scrollTop","e","scrollable","component","getScrollable","scrollTo","y","noDataText","emptyPanelText","data","parent","selectionOptions","isUpdatingSelection","selectByClick","selectNodesRecursive","recursive","allowSelectAll","onSelectionChanged","nodes","addNodesToArray","flatNodesArray","reduce","result","node","children","getNodes","beginUpdate","filter","itemData","forEach","selectItem","key","endUpdate","_isUpdatingColumnVisibility","columnIndex","isVisible","columnOption","getChooserColumns","_updateItemsSelection","columnIndices","changedColumns","map","_ref","unselectItem","_columnOptionChanged","optionNames","onlyVisibleChanged","needUpdate","some","optionName","changeTypes","columns","all","getColumnElements","$nodes","$node","get","getName","getColumns","allowDragging","isParentColumnVisible","isColumnHidden","isColumnChooserVisible","allowColumnHeaderDragging","getBoundingRect","$overlayContent","is","left","top","right","bottom","hideColumnChooser","popupContainer","hasHiddenColumns","isEnabled","hiddenColumns","headerPanel","Base","_getToolbarItems","_appendColumnChooserItem","onClickHandler","onInitialized","_getToolbarButtonClass","hintText","toolbarItem","widget","options","elementAttr","showText","locateInMenu","sortIndex","_invalidate","handled","allowMoveColumn","fromVisibleIndex","toVisibleIndex","sourceLocation","targetLocation","isMoveColumnDisallowed","columnHeadersView","_columnChooserView","columnChooserModule","defaultOptions","selection","mode","controllers","views","columnChooserView","extenders"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/column_chooser/m_column_chooser.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/column_chooser/m_column_chooser.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport devices from \"../../../../core/devices\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    deferUpdate\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getOuterHeight,\r\n    getOuterWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport Button from \"../../../../ui/button\";\r\nimport Popup from \"../../../../ui/popup/ui.popup\";\r\nimport {\r\n    current,\r\n    isGeneric,\r\n    isMaterial as isMaterialTheme\r\n} from \"../../../../ui/themes\";\r\nimport TreeView from \"../../../../ui/tree_view\";\r\nimport modules from \"../m_modules\";\r\nimport {\r\n    ColumnsView\r\n} from \"../views/m_columns_view\";\r\nconst COLUMN_CHOOSER_CLASS = \"column-chooser\";\r\nconst COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\r\nconst NOTOUCH_ACTION_CLASS = \"notouch-action\";\r\nconst COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\r\nconst COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\r\nconst COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\r\nconst COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\r\nconst COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\r\nconst COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\r\nconst COLUMN_OPTIONS_USED_IN_ITEMS = [\"showInColumnChooser\", \"caption\", \"allowHiding\", \"visible\", \"cssClass\", \"ownerBand\"];\r\nconst processItems = function(that, chooserColumns) {\r\n    const items = [];\r\n    const isSelectMode = that.isSelectMode();\r\n    const isRecursive = that.option(\"columnChooser.selection.recursive\");\r\n    if (chooserColumns.length) {\r\n        each(chooserColumns, ((index, column) => {\r\n            const item = {\r\n                text: column.caption,\r\n                cssClass: column.cssClass,\r\n                allowHiding: column.allowHiding,\r\n                expanded: true,\r\n                id: column.index,\r\n                disabled: false === column.allowHiding,\r\n                parentId: isDefined(column.ownerBand) ? column.ownerBand : null\r\n            };\r\n            const isRecursiveWithColumns = isRecursive && column.hasColumns;\r\n            if (isSelectMode && !isRecursiveWithColumns) {\r\n                item.selected = column.visible\r\n            }\r\n            items.push(item)\r\n        }))\r\n    }\r\n    return items\r\n};\r\nexport class ColumnChooserController extends modules.ViewController {\r\n    init() {\r\n        super.init();\r\n        this._rowsView = this.getView(\"rowsView\")\r\n    }\r\n    renderShowColumnChooserButton($element) {\r\n        const that = this;\r\n        const columnChooserButtonClass = that.addWidgetPrefix(\"column-chooser-button\");\r\n        const columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n        const $showColumnChooserButton = $element.find(`.${columnChooserButtonClass}`);\r\n        let $columnChooserButton;\r\n        if (columnChooserEnabled) {\r\n            if (!$showColumnChooserButton.length) {\r\n                $columnChooserButton = $(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\r\n                that._createComponent($columnChooserButton, Button, {\r\n                    icon: \"column-chooser\",\r\n                    onClick() {\r\n                        that.getView(\"columnChooserView\").showColumnChooser()\r\n                    },\r\n                    hint: that.option(\"columnChooser.title\"),\r\n                    integrationOptions: {}\r\n                })\r\n            } else {\r\n                $showColumnChooserButton.show()\r\n            }\r\n        } else {\r\n            $showColumnChooserButton.hide()\r\n        }\r\n    }\r\n    getPosition() {\r\n        const position = this.option(\"columnChooser.position\");\r\n        return isDefined(position) ? position : {\r\n            my: \"right bottom\",\r\n            at: \"right bottom\",\r\n            of: this._rowsView && this._rowsView.element(),\r\n            collision: \"fit\",\r\n            offset: \"-2 -2\",\r\n            boundaryOffset: \"2 2\"\r\n        }\r\n    }\r\n}\r\nexport class ColumnChooserView extends ColumnsView {\r\n    optionChanged(args) {\r\n        if (\"columnChooser\" === args.name) {\r\n            this._initializePopupContainer();\r\n            this.render(null, \"full\")\r\n        } else {\r\n            super.optionChanged(args)\r\n        }\r\n    }\r\n    publicMethods() {\r\n        return [\"showColumnChooser\", \"hideColumnChooser\"]\r\n    }\r\n    _resizeCore() {}\r\n    _isWinDevice() {\r\n        return !!devices.real().win\r\n    }\r\n    _initializePopupContainer() {\r\n        const that = this;\r\n        const columnChooserClass = that.addWidgetPrefix(\"column-chooser\");\r\n        const $element = that.element().addClass(columnChooserClass);\r\n        const columnChooserOptions = that.option(\"columnChooser\");\r\n        const popupPosition = this._columnChooserController.getPosition();\r\n        const themeName = current();\r\n        const isGenericTheme = isGeneric(themeName);\r\n        const isMaterial = isMaterialTheme(themeName);\r\n        const dxPopupOptions = {\r\n            visible: false,\r\n            shading: false,\r\n            showCloseButton: false,\r\n            dragEnabled: true,\r\n            resizeEnabled: true,\r\n            wrapperAttr: {\r\n                class: columnChooserClass\r\n            },\r\n            toolbarItems: [{\r\n                text: columnChooserOptions.title,\r\n                toolbar: \"top\",\r\n                location: isGenericTheme || isMaterial ? \"before\" : \"center\"\r\n            }],\r\n            position: popupPosition,\r\n            width: columnChooserOptions.width,\r\n            height: columnChooserOptions.height,\r\n            rtlEnabled: that.option(\"rtlEnabled\"),\r\n            onHidden() {\r\n                if (that._isWinDevice()) {\r\n                    $(\"body\").removeClass(that.addWidgetPrefix(\"notouch-action\"))\r\n                }\r\n            },\r\n            container: columnChooserOptions.container,\r\n            _loopFocus: true\r\n        };\r\n        if (isGenericTheme || isMaterial) {\r\n            extend(dxPopupOptions, {\r\n                showCloseButton: true\r\n            })\r\n        } else {\r\n            dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\r\n                shortcut: \"cancel\"\r\n            }\r\n        }\r\n        if (!isDefined(this._popupContainer)) {\r\n            that._popupContainer = that._createComponent($element, Popup, dxPopupOptions);\r\n            that._popupContainer.on(\"optionChanged\", (args => {\r\n                if (\"visible\" === args.name) {\r\n                    that.renderCompleted.fire()\r\n                }\r\n            }))\r\n        } else {\r\n            this._popupContainer.option(dxPopupOptions)\r\n        }\r\n        this.setPopupAttributes()\r\n    }\r\n    setPopupAttributes() {\r\n        const isSelectMode = this.isSelectMode();\r\n        const isBandColumnsUsed = this._columnsController.isBandColumnsUsed();\r\n        this._popupContainer.setAria({\r\n            role: \"dialog\",\r\n            label: messageLocalization.format(\"dxDataGrid-columnChooserTitle\")\r\n        });\r\n        this._popupContainer.$wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\r\n        this._popupContainer.$content().addClass(this.addWidgetPrefix(\"column-chooser-list\"));\r\n        if (isSelectMode && !isBandColumnsUsed) {\r\n            this._popupContainer.$content().addClass(this.addWidgetPrefix(\"column-chooser-plain\"))\r\n        }\r\n    }\r\n    _renderCore(change) {\r\n        if (this._popupContainer) {\r\n            const isDragMode = !this.isSelectMode();\r\n            if (!this._columnChooserList || \"full\" === change) {\r\n                this._renderTreeView()\r\n            } else if (isDragMode) {\r\n                this._updateItems()\r\n            }\r\n        }\r\n    }\r\n    _renderTreeView() {\r\n        var _columnChooser$search, _columnChooser$search2, _columnChooser$search3;\r\n        const that = this;\r\n        const $container = this._popupContainer.$content();\r\n        const columnChooser = this.option(\"columnChooser\");\r\n        const isSelectMode = this.isSelectMode();\r\n        const searchEnabled = isDefined(columnChooser.allowSearch) ? columnChooser.allowSearch : null === (_columnChooser$search = columnChooser.search) || void 0 === _columnChooser$search ? void 0 : _columnChooser$search.enabled;\r\n        const searchTimeout = isDefined(columnChooser.searchTimeout) ? columnChooser.searchTimeout : null === (_columnChooser$search2 = columnChooser.search) || void 0 === _columnChooser$search2 ? void 0 : _columnChooser$search2.timeout;\r\n        const treeViewConfig = {\r\n            dataStructure: \"plain\",\r\n            activeStateEnabled: true,\r\n            focusStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            itemTemplate: \"item\",\r\n            showCheckBoxesMode: \"none\",\r\n            rootValue: null,\r\n            searchEnabled: searchEnabled,\r\n            searchTimeout: searchTimeout,\r\n            searchEditorOptions: null === (_columnChooser$search3 = columnChooser.search) || void 0 === _columnChooser$search3 ? void 0 : _columnChooser$search3.editorOptions\r\n        };\r\n        if (this._isWinDevice()) {\r\n            treeViewConfig.useNativeScrolling = false\r\n        }\r\n        extend(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\r\n        if (this._columnChooserList) {\r\n            if (!treeViewConfig.searchEnabled) {\r\n                treeViewConfig.searchValue = \"\"\r\n            }\r\n            this._columnChooserList.option(treeViewConfig);\r\n            this._updateItems()\r\n        } else {\r\n            this._columnChooserList = this._createComponent($container, TreeView, treeViewConfig);\r\n            this._updateItems();\r\n            let scrollTop = 0;\r\n            this._columnChooserList.on(\"optionChanged\", (e => {\r\n                const scrollable = e.component.getScrollable();\r\n                scrollTop = scrollable.scrollTop()\r\n            }));\r\n            this._columnChooserList.on(\"contentReady\", (e => {\r\n                deferUpdate((() => {\r\n                    const scrollable = e.component.getScrollable();\r\n                    scrollable.scrollTo({\r\n                        y: scrollTop\r\n                    });\r\n                    that.renderCompleted.fire()\r\n                }))\r\n            }))\r\n        }\r\n    }\r\n    _prepareDragModeConfig() {\r\n        const columnChooserOptions = this.option(\"columnChooser\");\r\n        return {\r\n            noDataText: columnChooserOptions.emptyPanelText,\r\n            activeStateEnabled: false,\r\n            hoverStateEnabled: false,\r\n            itemTemplate(data, index, item) {\r\n                $(item).text(data.text).parent().addClass(data.cssClass).addClass(\"dx-column-chooser-item\")\r\n            }\r\n        }\r\n    }\r\n    _prepareSelectModeConfig() {\r\n        const that = this;\r\n        const selectionOptions = this.option(\"columnChooser.selection\") ?? {};\r\n        let isUpdatingSelection = false;\r\n        return {\r\n            selectByClick: selectionOptions.selectByClick,\r\n            selectNodesRecursive: selectionOptions.recursive,\r\n            showCheckBoxesMode: selectionOptions.allowSelectAll ? \"selectAll\" : \"normal\",\r\n            onSelectionChanged: e => {\r\n                if (isUpdatingSelection) {\r\n                    return\r\n                }\r\n                const nodes = (nodes => {\r\n                    const addNodesToArray = (nodes, flatNodesArray) => nodes.reduce(((result, node) => {\r\n                        result.push(node);\r\n                        if (node.children.length) {\r\n                            addNodesToArray(node.children, result)\r\n                        }\r\n                        return result\r\n                    }), flatNodesArray);\r\n                    return addNodesToArray(nodes, [])\r\n                })(e.component.getNodes());\r\n                e.component.beginUpdate();\r\n                isUpdatingSelection = true;\r\n                ((e, nodes) => {\r\n                    nodes.filter((node => false === node.itemData.allowHiding)).forEach((node => e.component.selectItem(node.key)))\r\n                })(e, nodes);\r\n                e.component.endUpdate();\r\n                isUpdatingSelection = false;\r\n                that.component.beginUpdate();\r\n                this._isUpdatingColumnVisibility = true;\r\n                (nodes => {\r\n                    nodes.forEach((node => {\r\n                        const columnIndex = node.itemData.id;\r\n                        const isVisible = false !== node.selected;\r\n                        that._columnsController.columnOption(columnIndex, \"visible\", isVisible)\r\n                    }))\r\n                })(nodes);\r\n                that.component.endUpdate();\r\n                this._isUpdatingColumnVisibility = false\r\n            }\r\n        }\r\n    }\r\n    _updateItems() {\r\n        const isSelectMode = this.isSelectMode();\r\n        const chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\r\n        const items = processItems(this, chooserColumns);\r\n        this._columnChooserList.option(\"items\", items)\r\n    }\r\n    _updateItemsSelection(columnIndices) {\r\n        const changedColumns = null === columnIndices || void 0 === columnIndices ? void 0 : columnIndices.map((columnIndex => this._columnsController.columnOption(columnIndex)));\r\n        this._columnChooserList.beginUpdate();\r\n        null === changedColumns || void 0 === changedColumns || changedColumns.forEach((_ref => {\r\n            let {\r\n                visible: visible,\r\n                index: index\r\n            } = _ref;\r\n            if (visible) {\r\n                this._columnChooserList.selectItem(index)\r\n            } else {\r\n                this._columnChooserList.unselectItem(index)\r\n            }\r\n        }));\r\n        this._columnChooserList.endUpdate()\r\n    }\r\n    _columnOptionChanged(e) {\r\n        super._columnOptionChanged(e);\r\n        const isSelectMode = this.isSelectMode();\r\n        if (isSelectMode && this._columnChooserList && !this._isUpdatingColumnVisibility) {\r\n            const {\r\n                optionNames: optionNames\r\n            } = e;\r\n            const onlyVisibleChanged = optionNames.visible && 1 === optionNames.length;\r\n            const columnIndices = isDefined(e.columnIndex) ? [e.columnIndex] : e.columnIndices;\r\n            const needUpdate = COLUMN_OPTIONS_USED_IN_ITEMS.some((optionName => optionNames[optionName])) || e.changeTypes.columns && optionNames.all;\r\n            if (needUpdate) {\r\n                this._updateItemsSelection(columnIndices);\r\n                if (!onlyVisibleChanged) {\r\n                    this._updateItems()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getColumnElements() {\r\n        const result = [];\r\n        const isSelectMode = this.isSelectMode();\r\n        const chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\r\n        const $content = this._popupContainer && this._popupContainer.$content();\r\n        const $nodes = $content && $content.find(\".dx-treeview-node\");\r\n        if ($nodes) {\r\n            chooserColumns.forEach((column => {\r\n                const $node = $nodes.filter(`[data-item-id = '${column.index}']`);\r\n                const item = $node.length ? $node.children(\".dx-column-chooser-item\").get(0) : null;\r\n                result.push(item)\r\n            }))\r\n        }\r\n        return $(result)\r\n    }\r\n    getName() {\r\n        return \"columnChooser\"\r\n    }\r\n    getColumns() {\r\n        return this._columnsController.getChooserColumns()\r\n    }\r\n    allowDragging(column) {\r\n        const isParentColumnVisible = this._columnsController.isParentColumnVisible(column.index);\r\n        const isColumnHidden = !column.visible && column.allowHiding;\r\n        return this.isColumnChooserVisible() && isParentColumnVisible && isColumnHidden\r\n    }\r\n    allowColumnHeaderDragging(column) {\r\n        const isDragMode = !this.isSelectMode();\r\n        return isDragMode && this.isColumnChooserVisible() && column.allowHiding\r\n    }\r\n    getBoundingRect() {\r\n        const container = this._popupContainer && this._popupContainer.$overlayContent();\r\n        if (container && container.is(\":visible\")) {\r\n            const offset = container.offset();\r\n            return {\r\n                left: offset.left,\r\n                top: offset.top,\r\n                right: offset.left + getOuterWidth(container),\r\n                bottom: offset.top + getOuterHeight(container)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    showColumnChooser() {\r\n        if (!this._popupContainer) {\r\n            this._initializePopupContainer();\r\n            this.render()\r\n        }\r\n        this._popupContainer.show();\r\n        if (this._isWinDevice()) {\r\n            $(\"body\").addClass(this.addWidgetPrefix(\"notouch-action\"))\r\n        }\r\n    }\r\n    hideColumnChooser() {\r\n        if (this._popupContainer) {\r\n            this._popupContainer.hide()\r\n        }\r\n    }\r\n    isColumnChooserVisible() {\r\n        const popupContainer = this._popupContainer;\r\n        return popupContainer && popupContainer.option(\"visible\")\r\n    }\r\n    isSelectMode() {\r\n        return \"select\" === this.option(\"columnChooser.mode\")\r\n    }\r\n    hasHiddenColumns() {\r\n        const isEnabled = this.option(\"columnChooser.enabled\");\r\n        const hiddenColumns = this.getColumns().filter((column => !column.visible));\r\n        return isEnabled && hiddenColumns.length\r\n    }\r\n}\r\nconst headerPanel = Base => class extends Base {\r\n    _getToolbarItems() {\r\n        const items = super._getToolbarItems();\r\n        return this._appendColumnChooserItem(items)\r\n    }\r\n    _appendColumnChooserItem(items) {\r\n        const that = this;\r\n        const columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n        if (columnChooserEnabled) {\r\n            const onClickHandler = function() {\r\n                that.component.getView(\"columnChooserView\").showColumnChooser()\r\n            };\r\n            const onInitialized = function(e) {\r\n                $(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(\"column-chooser-button\")))\r\n            };\r\n            const hintText = that.option(\"columnChooser.title\");\r\n            const toolbarItem = {\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    icon: \"column-chooser\",\r\n                    onClick: onClickHandler,\r\n                    hint: hintText,\r\n                    text: hintText,\r\n                    onInitialized: onInitialized,\r\n                    elementAttr: {\r\n                        \"aria-haspopup\": \"dialog\"\r\n                    }\r\n                },\r\n                showText: \"inMenu\",\r\n                location: \"after\",\r\n                name: \"columnChooserButton\",\r\n                locateInMenu: \"auto\",\r\n                sortIndex: 40\r\n            };\r\n            items.push(toolbarItem)\r\n        }\r\n        return items\r\n    }\r\n    optionChanged(args) {\r\n        if (\"columnChooser\" === args.name) {\r\n            this._invalidate();\r\n            args.handled = true\r\n        } else {\r\n            super.optionChanged(args)\r\n        }\r\n    }\r\n};\r\nconst columns = Base => class extends Base {\r\n    allowMoveColumn(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n        const isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        const isMoveColumnDisallowed = isSelectMode && \"columnChooser\" === targetLocation;\r\n        return isMoveColumnDisallowed ? false : super.allowMoveColumn(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation)\r\n    }\r\n};\r\nconst columnHeadersView = Base => class extends Base {\r\n    allowDragging(column) {\r\n        const isDragMode = !this._columnChooserView.isSelectMode();\r\n        const isColumnChooserVisible = this._columnChooserView.isColumnChooserVisible();\r\n        return isDragMode && isColumnChooserVisible && column.allowHiding || super.allowDragging(column)\r\n    }\r\n};\r\nexport const columnChooserModule = {\r\n    defaultOptions: () => ({\r\n        columnChooser: {\r\n            enabled: false,\r\n            search: {\r\n                enabled: false,\r\n                timeout: 500,\r\n                editorOptions: {}\r\n            },\r\n            selection: {\r\n                allowSelectAll: false,\r\n                selectByClick: false,\r\n                recursive: false\r\n            },\r\n            position: void 0,\r\n            mode: \"dragAndDrop\",\r\n            width: 250,\r\n            height: 260,\r\n            title: messageLocalization.format(\"dxDataGrid-columnChooserTitle\"),\r\n            emptyPanelText: messageLocalization.format(\"dxDataGrid-columnChooserEmptyText\"),\r\n            container: void 0\r\n        }\r\n    }),\r\n    controllers: {\r\n        columnChooser: ColumnChooserController\r\n    },\r\n    views: {\r\n        columnChooserView: ColumnChooserView\r\n    },\r\n    extenders: {\r\n        views: {\r\n            headerPanel: headerPanel,\r\n            columnHeadersView: columnHeadersView\r\n        },\r\n        controllers: {\r\n            columns: columns\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,mBAAmB,MAAM,8CAA8C;AAC9E,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,CAAC,MAAM,2BAA2B;AACzC,SACIC,WAAW,QACR,+BAA+B;AACtC,SACIC,MAAM,QACH,+BAA+B;AACtC,SACIC,IAAI,QACD,iCAAiC;AACxC,SACIC,cAAc,EACdC,aAAa,QACV,6BAA6B;AACpC,SACIC,SAAS,QACN,6BAA6B;AACpC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,KAAK,MAAM,+BAA+B;AACjD,SACIC,OAAO,EACPC,SAAS,EACTC,UAAU,IAAIC,eAAe,QAC1B,uBAAuB;AAC9B,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,OAAO,MAAM,cAAc;AAClC,SACIC,WAAW,QACR,yBAAyB;AAChC,MAAMC,oBAAoB,GAAG,gBAAgB;AAC7C,MAAMC,2BAA2B,GAAG,uBAAuB;AAC3D,MAAMC,oBAAoB,GAAG,gBAAgB;AAC7C,MAAMC,yBAAyB,GAAG,qBAAqB;AACvD,MAAMC,0BAA0B,GAAG,sBAAsB;AACzD,MAAMC,yBAAyB,GAAG,0BAA0B;AAC5D,MAAMC,2BAA2B,GAAG,4BAA4B;AAChE,MAAMC,wBAAwB,GAAG,gBAAgB;AACjD,MAAMC,yBAAyB,GAAG,wBAAwB;AAC1D,MAAMC,4BAA4B,GAAG,CAAC,qBAAqB,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,CAAC;AAC1H,MAAMC,YAAY,GAAG,SAAAA,CAASC,IAAI,EAAEC,cAAc,EAAE;EAChD,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,YAAY,GAAGH,IAAI,CAACG,YAAY,CAAC,CAAC;EACxC,MAAMC,WAAW,GAAGJ,IAAI,CAACK,MAAM,CAAC,mCAAmC,CAAC;EACpE,IAAIJ,cAAc,CAACK,MAAM,EAAE;IACvB9B,IAAI,CAACyB,cAAc,EAAG,CAACM,KAAK,EAAEC,MAAM,KAAK;MACrC,MAAMC,IAAI,GAAG;QACTC,IAAI,EAAEF,MAAM,CAACG,OAAO;QACpBC,QAAQ,EAAEJ,MAAM,CAACI,QAAQ;QACzBC,WAAW,EAAEL,MAAM,CAACK,WAAW;QAC/BC,QAAQ,EAAE,IAAI;QACdC,EAAE,EAAEP,MAAM,CAACD,KAAK;QAChBS,QAAQ,EAAE,KAAK,KAAKR,MAAM,CAACK,WAAW;QACtCI,QAAQ,EAAEtC,SAAS,CAAC6B,MAAM,CAACU,SAAS,CAAC,GAAGV,MAAM,CAACU,SAAS,GAAG;MAC/D,CAAC;MACD,MAAMC,sBAAsB,GAAGf,WAAW,IAAII,MAAM,CAACY,UAAU;MAC/D,IAAIjB,YAAY,IAAI,CAACgB,sBAAsB,EAAE;QACzCV,IAAI,CAACY,QAAQ,GAAGb,MAAM,CAACc,OAAO;MAClC;MACApB,KAAK,CAACqB,IAAI,CAACd,IAAI,CAAC;IACpB,CAAE,CAAC;EACP;EACA,OAAOP,KAAK;AAChB,CAAC;AACD,OAAO,MAAMsB,uBAAuB,SAASrC,OAAO,CAACsC,cAAc,CAAC;EAChEC,IAAIA,CAAA,EAAG;IACH,KAAK,CAACA,IAAI,CAAC,CAAC;IACZ,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,OAAO,CAAC,UAAU,CAAC;EAC7C;EACAC,6BAA6BA,CAACC,QAAQ,EAAE;IACpC,MAAM9B,IAAI,GAAG,IAAI;IACjB,MAAM+B,wBAAwB,GAAG/B,IAAI,CAACgC,eAAe,CAAC,uBAAuB,CAAC;IAC9E,MAAMC,oBAAoB,GAAGjC,IAAI,CAACK,MAAM,CAAC,uBAAuB,CAAC;IACjE,MAAM6B,wBAAwB,GAAGJ,QAAQ,CAACK,IAAI,CAAC,IAAIJ,wBAAwB,EAAE,CAAC;IAC9E,IAAIK,oBAAoB;IACxB,IAAIH,oBAAoB,EAAE;MACtB,IAAI,CAACC,wBAAwB,CAAC5B,MAAM,EAAE;QAClC8B,oBAAoB,GAAG/D,CAAC,CAAC,OAAO,CAAC,CAACgE,QAAQ,CAACN,wBAAwB,CAAC,CAACO,QAAQ,CAACR,QAAQ,CAAC;QACvF9B,IAAI,CAACuC,gBAAgB,CAACH,oBAAoB,EAAExD,MAAM,EAAE;UAChD4D,IAAI,EAAE,gBAAgB;UACtBC,OAAOA,CAAA,EAAG;YACNzC,IAAI,CAAC4B,OAAO,CAAC,mBAAmB,CAAC,CAACc,iBAAiB,CAAC,CAAC;UACzD,CAAC;UACDC,IAAI,EAAE3C,IAAI,CAACK,MAAM,CAAC,qBAAqB,CAAC;UACxCuC,kBAAkB,EAAE,CAAC;QACzB,CAAC,CAAC;MACN,CAAC,MAAM;QACHV,wBAAwB,CAACW,IAAI,CAAC,CAAC;MACnC;IACJ,CAAC,MAAM;MACHX,wBAAwB,CAACY,IAAI,CAAC,CAAC;IACnC;EACJ;EACAC,WAAWA,CAAA,EAAG;IACV,MAAMC,QAAQ,GAAG,IAAI,CAAC3C,MAAM,CAAC,wBAAwB,CAAC;IACtD,OAAO1B,SAAS,CAACqE,QAAQ,CAAC,GAAGA,QAAQ,GAAG;MACpCC,EAAE,EAAE,cAAc;MAClBC,EAAE,EAAE,cAAc;MAClBC,EAAE,EAAE,IAAI,CAACxB,SAAS,IAAI,IAAI,CAACA,SAAS,CAACyB,OAAO,CAAC,CAAC;MAC9CC,SAAS,EAAE,KAAK;MAChBC,MAAM,EAAE,OAAO;MACfC,cAAc,EAAE;IACpB,CAAC;EACL;AACJ;AACA,OAAO,MAAMC,iBAAiB,SAASpE,WAAW,CAAC;EAC/CqE,aAAaA,CAACC,IAAI,EAAE;IAChB,IAAI,eAAe,KAAKA,IAAI,CAACC,IAAI,EAAE;MAC/B,IAAI,CAACC,yBAAyB,CAAC,CAAC;MAChC,IAAI,CAACC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;IAC7B,CAAC,MAAM;MACH,KAAK,CAACJ,aAAa,CAACC,IAAI,CAAC;IAC7B;EACJ;EACAI,aAAaA,CAAA,EAAG;IACZ,OAAO,CAAC,mBAAmB,EAAE,mBAAmB,CAAC;EACrD;EACAC,WAAWA,CAAA,EAAG,CAAC;EACfC,YAAYA,CAAA,EAAG;IACX,OAAO,CAAC,CAAC5F,OAAO,CAAC6F,IAAI,CAAC,CAAC,CAACC,GAAG;EAC/B;EACAN,yBAAyBA,CAAA,EAAG;IACxB,MAAM5D,IAAI,GAAG,IAAI;IACjB,MAAMmE,kBAAkB,GAAGnE,IAAI,CAACgC,eAAe,CAAC,gBAAgB,CAAC;IACjE,MAAMF,QAAQ,GAAG9B,IAAI,CAACoD,OAAO,CAAC,CAAC,CAACf,QAAQ,CAAC8B,kBAAkB,CAAC;IAC5D,MAAMC,oBAAoB,GAAGpE,IAAI,CAACK,MAAM,CAAC,eAAe,CAAC;IACzD,MAAMgE,aAAa,GAAG,IAAI,CAACC,wBAAwB,CAACvB,WAAW,CAAC,CAAC;IACjE,MAAMwB,SAAS,GAAGzF,OAAO,CAAC,CAAC;IAC3B,MAAM0F,cAAc,GAAGzF,SAAS,CAACwF,SAAS,CAAC;IAC3C,MAAMvF,UAAU,GAAGC,eAAe,CAACsF,SAAS,CAAC;IAC7C,MAAME,cAAc,GAAG;MACnBnD,OAAO,EAAE,KAAK;MACdoD,OAAO,EAAE,KAAK;MACdC,eAAe,EAAE,KAAK;MACtBC,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE,IAAI;MACnBC,WAAW,EAAE;QACTC,KAAK,EAAEZ;MACX,CAAC;MACDa,YAAY,EAAE,CAAC;QACXtE,IAAI,EAAE0D,oBAAoB,CAACa,KAAK;QAChCC,OAAO,EAAE,KAAK;QACdC,QAAQ,EAAEX,cAAc,IAAIxF,UAAU,GAAG,QAAQ,GAAG;MACxD,CAAC,CAAC;MACFgE,QAAQ,EAAEqB,aAAa;MACvBe,KAAK,EAAEhB,oBAAoB,CAACgB,KAAK;MACjCC,MAAM,EAAEjB,oBAAoB,CAACiB,MAAM;MACnCC,UAAU,EAAEtF,IAAI,CAACK,MAAM,CAAC,YAAY,CAAC;MACrCkF,QAAQA,CAAA,EAAG;QACP,IAAIvF,IAAI,CAACgE,YAAY,CAAC,CAAC,EAAE;UACrB3F,CAAC,CAAC,MAAM,CAAC,CAACmH,WAAW,CAACxF,IAAI,CAACgC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QACjE;MACJ,CAAC;MACDyD,SAAS,EAAErB,oBAAoB,CAACqB,SAAS;MACzCC,UAAU,EAAE;IAChB,CAAC;IACD,IAAIlB,cAAc,IAAIxF,UAAU,EAAE;MAC9BT,MAAM,CAACkG,cAAc,EAAE;QACnBE,eAAe,EAAE;MACrB,CAAC,CAAC;IACN,CAAC,MAAM;MACHF,cAAc,CAACO,YAAY,CAACP,cAAc,CAACO,YAAY,CAAC1E,MAAM,CAAC,GAAG;QAC9DqF,QAAQ,EAAE;MACd,CAAC;IACL;IACA,IAAI,CAAChH,SAAS,CAAC,IAAI,CAACiH,eAAe,CAAC,EAAE;MAClC5F,IAAI,CAAC4F,eAAe,GAAG5F,IAAI,CAACuC,gBAAgB,CAACT,QAAQ,EAAEjD,KAAK,EAAE4F,cAAc,CAAC;MAC7EzE,IAAI,CAAC4F,eAAe,CAACC,EAAE,CAAC,eAAe,EAAGnC,IAAI,IAAI;QAC9C,IAAI,SAAS,KAAKA,IAAI,CAACC,IAAI,EAAE;UACzB3D,IAAI,CAAC8F,eAAe,CAACC,IAAI,CAAC,CAAC;QAC/B;MACJ,CAAE,CAAC;IACP,CAAC,MAAM;MACH,IAAI,CAACH,eAAe,CAACvF,MAAM,CAACoE,cAAc,CAAC;IAC/C;IACA,IAAI,CAACuB,kBAAkB,CAAC,CAAC;EAC7B;EACAA,kBAAkBA,CAAA,EAAG;IACjB,MAAM7F,YAAY,GAAG,IAAI,CAACA,YAAY,CAAC,CAAC;IACxC,MAAM8F,iBAAiB,GAAG,IAAI,CAACC,kBAAkB,CAACD,iBAAiB,CAAC,CAAC;IACrE,IAAI,CAACL,eAAe,CAACO,OAAO,CAAC;MACzBC,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAElI,mBAAmB,CAACmI,MAAM,CAAC,+BAA+B;IACrE,CAAC,CAAC;IACF,IAAI,CAACV,eAAe,CAACW,QAAQ,CAAC,CAAC,CAACC,WAAW,CAAC,IAAI,CAACxE,eAAe,CAACtC,yBAAyB,CAAC,EAAE,CAACS,YAAY,CAAC,CAACqG,WAAW,CAAC,IAAI,CAACxE,eAAe,CAACrC,2BAA2B,CAAC,EAAEQ,YAAY,CAAC;IACxL,IAAI,CAACyF,eAAe,CAACa,QAAQ,CAAC,CAAC,CAACpE,QAAQ,CAAC,IAAI,CAACL,eAAe,CAAC,qBAAqB,CAAC,CAAC;IACrF,IAAI7B,YAAY,IAAI,CAAC8F,iBAAiB,EAAE;MACpC,IAAI,CAACL,eAAe,CAACa,QAAQ,CAAC,CAAC,CAACpE,QAAQ,CAAC,IAAI,CAACL,eAAe,CAAC,sBAAsB,CAAC,CAAC;IAC1F;EACJ;EACA0E,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAI,IAAI,CAACf,eAAe,EAAE;MACtB,MAAMgB,UAAU,GAAG,CAAC,IAAI,CAACzG,YAAY,CAAC,CAAC;MACvC,IAAI,CAAC,IAAI,CAAC0G,kBAAkB,IAAI,MAAM,KAAKF,MAAM,EAAE;QAC/C,IAAI,CAACG,eAAe,CAAC,CAAC;MAC1B,CAAC,MAAM,IAAIF,UAAU,EAAE;QACnB,IAAI,CAACG,YAAY,CAAC,CAAC;MACvB;IACJ;EACJ;EACAD,eAAeA,CAAA,EAAG;IACd,IAAIE,qBAAqB,EAAEC,sBAAsB,EAAEC,sBAAsB;IACzE,MAAMlH,IAAI,GAAG,IAAI;IACjB,MAAMmH,UAAU,GAAG,IAAI,CAACvB,eAAe,CAACa,QAAQ,CAAC,CAAC;IAClD,MAAMW,aAAa,GAAG,IAAI,CAAC/G,MAAM,CAAC,eAAe,CAAC;IAClD,MAAMF,YAAY,GAAG,IAAI,CAACA,YAAY,CAAC,CAAC;IACxC,MAAMkH,aAAa,GAAG1I,SAAS,CAACyI,aAAa,CAACE,WAAW,CAAC,GAAGF,aAAa,CAACE,WAAW,GAAG,IAAI,MAAMN,qBAAqB,GAAGI,aAAa,CAACG,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKP,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACQ,OAAO;IAC7N,MAAMC,aAAa,GAAG9I,SAAS,CAACyI,aAAa,CAACK,aAAa,CAAC,GAAGL,aAAa,CAACK,aAAa,GAAG,IAAI,MAAMR,sBAAsB,GAAGG,aAAa,CAACG,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKN,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACS,OAAO;IACpO,MAAMC,cAAc,GAAG;MACnBC,aAAa,EAAE,OAAO;MACtBC,kBAAkB,EAAE,IAAI;MACxBC,iBAAiB,EAAE,IAAI;MACvBC,iBAAiB,EAAE,IAAI;MACvBC,YAAY,EAAE,MAAM;MACpBC,kBAAkB,EAAE,MAAM;MAC1BC,SAAS,EAAE,IAAI;MACfb,aAAa,EAAEA,aAAa;MAC5BI,aAAa,EAAEA,aAAa;MAC5BU,mBAAmB,EAAE,IAAI,MAAMjB,sBAAsB,GAAGE,aAAa,CAACG,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKL,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACkB;IACzJ,CAAC;IACD,IAAI,IAAI,CAACpE,YAAY,CAAC,CAAC,EAAE;MACrB2D,cAAc,CAACU,kBAAkB,GAAG,KAAK;IAC7C;IACA9J,MAAM,CAACoJ,cAAc,EAAExH,YAAY,GAAG,IAAI,CAACmI,wBAAwB,CAAC,CAAC,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAAC,CAAC;IACtG,IAAI,IAAI,CAAC1B,kBAAkB,EAAE;MACzB,IAAI,CAACc,cAAc,CAACN,aAAa,EAAE;QAC/BM,cAAc,CAACa,WAAW,GAAG,EAAE;MACnC;MACA,IAAI,CAAC3B,kBAAkB,CAACxG,MAAM,CAACsH,cAAc,CAAC;MAC9C,IAAI,CAACZ,YAAY,CAAC,CAAC;IACvB,CAAC,MAAM;MACH,IAAI,CAACF,kBAAkB,GAAG,IAAI,CAACtE,gBAAgB,CAAC4E,UAAU,EAAEjI,QAAQ,EAAEyI,cAAc,CAAC;MACrF,IAAI,CAACZ,YAAY,CAAC,CAAC;MACnB,IAAI0B,SAAS,GAAG,CAAC;MACjB,IAAI,CAAC5B,kBAAkB,CAAChB,EAAE,CAAC,eAAe,EAAG6C,CAAC,IAAI;QAC9C,MAAMC,UAAU,GAAGD,CAAC,CAACE,SAAS,CAACC,aAAa,CAAC,CAAC;QAC9CJ,SAAS,GAAGE,UAAU,CAACF,SAAS,CAAC,CAAC;MACtC,CAAE,CAAC;MACH,IAAI,CAAC5B,kBAAkB,CAAChB,EAAE,CAAC,cAAc,EAAG6C,CAAC,IAAI;QAC7CpK,WAAW,CAAE,MAAM;UACf,MAAMqK,UAAU,GAAGD,CAAC,CAACE,SAAS,CAACC,aAAa,CAAC,CAAC;UAC9CF,UAAU,CAACG,QAAQ,CAAC;YAChBC,CAAC,EAAEN;UACP,CAAC,CAAC;UACFzI,IAAI,CAAC8F,eAAe,CAACC,IAAI,CAAC,CAAC;QAC/B,CAAE,CAAC;MACP,CAAE,CAAC;IACP;EACJ;EACAwC,sBAAsBA,CAAA,EAAG;IACrB,MAAMnE,oBAAoB,GAAG,IAAI,CAAC/D,MAAM,CAAC,eAAe,CAAC;IACzD,OAAO;MACH2I,UAAU,EAAE5E,oBAAoB,CAAC6E,cAAc;MAC/CpB,kBAAkB,EAAE,KAAK;MACzBE,iBAAiB,EAAE,KAAK;MACxBC,YAAYA,CAACkB,IAAI,EAAE3I,KAAK,EAAEE,IAAI,EAAE;QAC5BpC,CAAC,CAACoC,IAAI,CAAC,CAACC,IAAI,CAACwI,IAAI,CAACxI,IAAI,CAAC,CAACyI,MAAM,CAAC,CAAC,CAAC9G,QAAQ,CAAC6G,IAAI,CAACtI,QAAQ,CAAC,CAACyB,QAAQ,CAAC,wBAAwB,CAAC;MAC/F;IACJ,CAAC;EACL;EACAiG,wBAAwBA,CAAA,EAAG;IACvB,MAAMtI,IAAI,GAAG,IAAI;IACjB,MAAMoJ,gBAAgB,GAAG,IAAI,CAAC/I,MAAM,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IACrE,IAAIgJ,mBAAmB,GAAG,KAAK;IAC/B,OAAO;MACHC,aAAa,EAAEF,gBAAgB,CAACE,aAAa;MAC7CC,oBAAoB,EAAEH,gBAAgB,CAACI,SAAS;MAChDvB,kBAAkB,EAAEmB,gBAAgB,CAACK,cAAc,GAAG,WAAW,GAAG,QAAQ;MAC5EC,kBAAkB,EAAEhB,CAAC,IAAI;QACrB,IAAIW,mBAAmB,EAAE;UACrB;QACJ;QACA,MAAMM,KAAK,GAAG,CAACA,KAAK,IAAI;UACpB,MAAMC,eAAe,GAAGA,CAACD,KAAK,EAAEE,cAAc,KAAKF,KAAK,CAACG,MAAM,CAAE,CAACC,MAAM,EAAEC,IAAI,KAAK;YAC/ED,MAAM,CAACxI,IAAI,CAACyI,IAAI,CAAC;YACjB,IAAIA,IAAI,CAACC,QAAQ,CAAC3J,MAAM,EAAE;cACtBsJ,eAAe,CAACI,IAAI,CAACC,QAAQ,EAAEF,MAAM,CAAC;YAC1C;YACA,OAAOA,MAAM;UACjB,CAAC,EAAGF,cAAc,CAAC;UACnB,OAAOD,eAAe,CAACD,KAAK,EAAE,EAAE,CAAC;QACrC,CAAC,EAAEjB,CAAC,CAACE,SAAS,CAACsB,QAAQ,CAAC,CAAC,CAAC;QAC1BxB,CAAC,CAACE,SAAS,CAACuB,WAAW,CAAC,CAAC;QACzBd,mBAAmB,GAAG,IAAI;QAC1B,CAAC,CAACX,CAAC,EAAEiB,KAAK,KAAK;UACXA,KAAK,CAACS,MAAM,CAAEJ,IAAI,IAAI,KAAK,KAAKA,IAAI,CAACK,QAAQ,CAACxJ,WAAY,CAAC,CAACyJ,OAAO,CAAEN,IAAI,IAAItB,CAAC,CAACE,SAAS,CAAC2B,UAAU,CAACP,IAAI,CAACQ,GAAG,CAAE,CAAC;QACnH,CAAC,EAAE9B,CAAC,EAAEiB,KAAK,CAAC;QACZjB,CAAC,CAACE,SAAS,CAAC6B,SAAS,CAAC,CAAC;QACvBpB,mBAAmB,GAAG,KAAK;QAC3BrJ,IAAI,CAAC4I,SAAS,CAACuB,WAAW,CAAC,CAAC;QAC5B,IAAI,CAACO,2BAA2B,GAAG,IAAI;QACvC,CAACf,KAAK,IAAI;UACNA,KAAK,CAACW,OAAO,CAAEN,IAAI,IAAI;YACnB,MAAMW,WAAW,GAAGX,IAAI,CAACK,QAAQ,CAACtJ,EAAE;YACpC,MAAM6J,SAAS,GAAG,KAAK,KAAKZ,IAAI,CAAC3I,QAAQ;YACzCrB,IAAI,CAACkG,kBAAkB,CAAC2E,YAAY,CAACF,WAAW,EAAE,SAAS,EAAEC,SAAS,CAAC;UAC3E,CAAE,CAAC;QACP,CAAC,EAAEjB,KAAK,CAAC;QACT3J,IAAI,CAAC4I,SAAS,CAAC6B,SAAS,CAAC,CAAC;QAC1B,IAAI,CAACC,2BAA2B,GAAG,KAAK;MAC5C;IACJ,CAAC;EACL;EACA3D,YAAYA,CAAA,EAAG;IACX,MAAM5G,YAAY,GAAG,IAAI,CAACA,YAAY,CAAC,CAAC;IACxC,MAAMF,cAAc,GAAG,IAAI,CAACiG,kBAAkB,CAAC4E,iBAAiB,CAAC3K,YAAY,CAAC;IAC9E,MAAMD,KAAK,GAAGH,YAAY,CAAC,IAAI,EAAEE,cAAc,CAAC;IAChD,IAAI,CAAC4G,kBAAkB,CAACxG,MAAM,CAAC,OAAO,EAAEH,KAAK,CAAC;EAClD;EACA6K,qBAAqBA,CAACC,aAAa,EAAE;IACjC,MAAMC,cAAc,GAAG,IAAI,KAAKD,aAAa,IAAI,KAAK,CAAC,KAAKA,aAAa,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACE,GAAG,CAAEP,WAAW,IAAI,IAAI,CAACzE,kBAAkB,CAAC2E,YAAY,CAACF,WAAW,CAAE,CAAC;IAC1K,IAAI,CAAC9D,kBAAkB,CAACsD,WAAW,CAAC,CAAC;IACrC,IAAI,KAAKc,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,IAAIA,cAAc,CAACX,OAAO,CAAEa,IAAI,IAAI;MACpF,IAAI;QACA7J,OAAO,EAAEA,OAAO;QAChBf,KAAK,EAAEA;MACX,CAAC,GAAG4K,IAAI;MACR,IAAI7J,OAAO,EAAE;QACT,IAAI,CAACuF,kBAAkB,CAAC0D,UAAU,CAAChK,KAAK,CAAC;MAC7C,CAAC,MAAM;QACH,IAAI,CAACsG,kBAAkB,CAACuE,YAAY,CAAC7K,KAAK,CAAC;MAC/C;IACJ,CAAE,CAAC;IACH,IAAI,CAACsG,kBAAkB,CAAC4D,SAAS,CAAC,CAAC;EACvC;EACAY,oBAAoBA,CAAC3C,CAAC,EAAE;IACpB,KAAK,CAAC2C,oBAAoB,CAAC3C,CAAC,CAAC;IAC7B,MAAMvI,YAAY,GAAG,IAAI,CAACA,YAAY,CAAC,CAAC;IACxC,IAAIA,YAAY,IAAI,IAAI,CAAC0G,kBAAkB,IAAI,CAAC,IAAI,CAAC6D,2BAA2B,EAAE;MAC9E,MAAM;QACFY,WAAW,EAAEA;MACjB,CAAC,GAAG5C,CAAC;MACL,MAAM6C,kBAAkB,GAAGD,WAAW,CAAChK,OAAO,IAAI,CAAC,KAAKgK,WAAW,CAAChL,MAAM;MAC1E,MAAM0K,aAAa,GAAGrM,SAAS,CAAC+J,CAAC,CAACiC,WAAW,CAAC,GAAG,CAACjC,CAAC,CAACiC,WAAW,CAAC,GAAGjC,CAAC,CAACsC,aAAa;MAClF,MAAMQ,UAAU,GAAG1L,4BAA4B,CAAC2L,IAAI,CAAEC,UAAU,IAAIJ,WAAW,CAACI,UAAU,CAAE,CAAC,IAAIhD,CAAC,CAACiD,WAAW,CAACC,OAAO,IAAIN,WAAW,CAACO,GAAG;MACzI,IAAIL,UAAU,EAAE;QACZ,IAAI,CAACT,qBAAqB,CAACC,aAAa,CAAC;QACzC,IAAI,CAACO,kBAAkB,EAAE;UACrB,IAAI,CAACxE,YAAY,CAAC,CAAC;QACvB;MACJ;IACJ;EACJ;EACA+E,iBAAiBA,CAAA,EAAG;IAChB,MAAM/B,MAAM,GAAG,EAAE;IACjB,MAAM5J,YAAY,GAAG,IAAI,CAACA,YAAY,CAAC,CAAC;IACxC,MAAMF,cAAc,GAAG,IAAI,CAACiG,kBAAkB,CAAC4E,iBAAiB,CAAC3K,YAAY,CAAC;IAC9E,MAAMsG,QAAQ,GAAG,IAAI,CAACb,eAAe,IAAI,IAAI,CAACA,eAAe,CAACa,QAAQ,CAAC,CAAC;IACxE,MAAMsF,MAAM,GAAGtF,QAAQ,IAAIA,QAAQ,CAACtE,IAAI,CAAC,mBAAmB,CAAC;IAC7D,IAAI4J,MAAM,EAAE;MACR9L,cAAc,CAACqK,OAAO,CAAE9J,MAAM,IAAI;QAC9B,MAAMwL,KAAK,GAAGD,MAAM,CAAC3B,MAAM,CAAC,oBAAoB5J,MAAM,CAACD,KAAK,IAAI,CAAC;QACjE,MAAME,IAAI,GAAGuL,KAAK,CAAC1L,MAAM,GAAG0L,KAAK,CAAC/B,QAAQ,CAAC,yBAAyB,CAAC,CAACgC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;QACnFlC,MAAM,CAACxI,IAAI,CAACd,IAAI,CAAC;MACrB,CAAE,CAAC;IACP;IACA,OAAOpC,CAAC,CAAC0L,MAAM,CAAC;EACpB;EACAmC,OAAOA,CAAA,EAAG;IACN,OAAO,eAAe;EAC1B;EACAC,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACjG,kBAAkB,CAAC4E,iBAAiB,CAAC,CAAC;EACtD;EACAsB,aAAaA,CAAC5L,MAAM,EAAE;IAClB,MAAM6L,qBAAqB,GAAG,IAAI,CAACnG,kBAAkB,CAACmG,qBAAqB,CAAC7L,MAAM,CAACD,KAAK,CAAC;IACzF,MAAM+L,cAAc,GAAG,CAAC9L,MAAM,CAACc,OAAO,IAAId,MAAM,CAACK,WAAW;IAC5D,OAAO,IAAI,CAAC0L,sBAAsB,CAAC,CAAC,IAAIF,qBAAqB,IAAIC,cAAc;EACnF;EACAE,yBAAyBA,CAAChM,MAAM,EAAE;IAC9B,MAAMoG,UAAU,GAAG,CAAC,IAAI,CAACzG,YAAY,CAAC,CAAC;IACvC,OAAOyG,UAAU,IAAI,IAAI,CAAC2F,sBAAsB,CAAC,CAAC,IAAI/L,MAAM,CAACK,WAAW;EAC5E;EACA4L,eAAeA,CAAA,EAAG;IACd,MAAMhH,SAAS,GAAG,IAAI,CAACG,eAAe,IAAI,IAAI,CAACA,eAAe,CAAC8G,eAAe,CAAC,CAAC;IAChF,IAAIjH,SAAS,IAAIA,SAAS,CAACkH,EAAE,CAAC,UAAU,CAAC,EAAE;MACvC,MAAMrJ,MAAM,GAAGmC,SAAS,CAACnC,MAAM,CAAC,CAAC;MACjC,OAAO;QACHsJ,IAAI,EAAEtJ,MAAM,CAACsJ,IAAI;QACjBC,GAAG,EAAEvJ,MAAM,CAACuJ,GAAG;QACfC,KAAK,EAAExJ,MAAM,CAACsJ,IAAI,GAAGlO,aAAa,CAAC+G,SAAS,CAAC;QAC7CsH,MAAM,EAAEzJ,MAAM,CAACuJ,GAAG,GAAGpO,cAAc,CAACgH,SAAS;MACjD,CAAC;IACL;IACA,OAAO,IAAI;EACf;EACA/C,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAAC,IAAI,CAACkD,eAAe,EAAE;MACvB,IAAI,CAAChC,yBAAyB,CAAC,CAAC;MAChC,IAAI,CAACC,MAAM,CAAC,CAAC;IACjB;IACA,IAAI,CAAC+B,eAAe,CAAC/C,IAAI,CAAC,CAAC;IAC3B,IAAI,IAAI,CAACmB,YAAY,CAAC,CAAC,EAAE;MACrB3F,CAAC,CAAC,MAAM,CAAC,CAACgE,QAAQ,CAAC,IAAI,CAACL,eAAe,CAAC,gBAAgB,CAAC,CAAC;IAC9D;EACJ;EACAgL,iBAAiBA,CAAA,EAAG;IAChB,IAAI,IAAI,CAACpH,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAAC9C,IAAI,CAAC,CAAC;IAC/B;EACJ;EACAyJ,sBAAsBA,CAAA,EAAG;IACrB,MAAMU,cAAc,GAAG,IAAI,CAACrH,eAAe;IAC3C,OAAOqH,cAAc,IAAIA,cAAc,CAAC5M,MAAM,CAAC,SAAS,CAAC;EAC7D;EACAF,YAAYA,CAAA,EAAG;IACX,OAAO,QAAQ,KAAK,IAAI,CAACE,MAAM,CAAC,oBAAoB,CAAC;EACzD;EACA6M,gBAAgBA,CAAA,EAAG;IACf,MAAMC,SAAS,GAAG,IAAI,CAAC9M,MAAM,CAAC,uBAAuB,CAAC;IACtD,MAAM+M,aAAa,GAAG,IAAI,CAACjB,UAAU,CAAC,CAAC,CAAC/B,MAAM,CAAE5J,MAAM,IAAI,CAACA,MAAM,CAACc,OAAQ,CAAC;IAC3E,OAAO6L,SAAS,IAAIC,aAAa,CAAC9M,MAAM;EAC5C;AACJ;AACA,MAAM+M,WAAW,GAAGC,IAAI,IAAI,cAAcA,IAAI,CAAC;EAC3CC,gBAAgBA,CAAA,EAAG;IACf,MAAMrN,KAAK,GAAG,KAAK,CAACqN,gBAAgB,CAAC,CAAC;IACtC,OAAO,IAAI,CAACC,wBAAwB,CAACtN,KAAK,CAAC;EAC/C;EACAsN,wBAAwBA,CAACtN,KAAK,EAAE;IAC5B,MAAMF,IAAI,GAAG,IAAI;IACjB,MAAMiC,oBAAoB,GAAGjC,IAAI,CAACK,MAAM,CAAC,uBAAuB,CAAC;IACjE,IAAI4B,oBAAoB,EAAE;MACtB,MAAMwL,cAAc,GAAG,SAAAA,CAAA,EAAW;QAC9BzN,IAAI,CAAC4I,SAAS,CAAChH,OAAO,CAAC,mBAAmB,CAAC,CAACc,iBAAiB,CAAC,CAAC;MACnE,CAAC;MACD,MAAMgL,aAAa,GAAG,SAAAA,CAAShF,CAAC,EAAE;QAC9BrK,CAAC,CAACqK,CAAC,CAACtF,OAAO,CAAC,CAACf,QAAQ,CAACrC,IAAI,CAAC2N,sBAAsB,CAAC3N,IAAI,CAACgC,eAAe,CAAC,uBAAuB,CAAC,CAAC,CAAC;MACrG,CAAC;MACD,MAAM4L,QAAQ,GAAG5N,IAAI,CAACK,MAAM,CAAC,qBAAqB,CAAC;MACnD,MAAMwN,WAAW,GAAG;QAChBC,MAAM,EAAE,UAAU;QAClBC,OAAO,EAAE;UACLvL,IAAI,EAAE,gBAAgB;UACtBC,OAAO,EAAEgL,cAAc;UACvB9K,IAAI,EAAEiL,QAAQ;UACdlN,IAAI,EAAEkN,QAAQ;UACdF,aAAa,EAAEA,aAAa;UAC5BM,WAAW,EAAE;YACT,eAAe,EAAE;UACrB;QACJ,CAAC;QACDC,QAAQ,EAAE,QAAQ;QAClB9I,QAAQ,EAAE,OAAO;QACjBxB,IAAI,EAAE,qBAAqB;QAC3BuK,YAAY,EAAE,MAAM;QACpBC,SAAS,EAAE;MACf,CAAC;MACDjO,KAAK,CAACqB,IAAI,CAACsM,WAAW,CAAC;IAC3B;IACA,OAAO3N,KAAK;EAChB;EACAuD,aAAaA,CAACC,IAAI,EAAE;IAChB,IAAI,eAAe,KAAKA,IAAI,CAACC,IAAI,EAAE;MAC/B,IAAI,CAACyK,WAAW,CAAC,CAAC;MAClB1K,IAAI,CAAC2K,OAAO,GAAG,IAAI;IACvB,CAAC,MAAM;MACH,KAAK,CAAC5K,aAAa,CAACC,IAAI,CAAC;IAC7B;EACJ;AACJ,CAAC;AACD,MAAMkI,OAAO,GAAG0B,IAAI,IAAI,cAAcA,IAAI,CAAC;EACvCgB,eAAeA,CAACC,gBAAgB,EAAEC,cAAc,EAAEC,cAAc,EAAEC,cAAc,EAAE;IAC9E,MAAMvO,YAAY,GAAG,QAAQ,KAAK,IAAI,CAACE,MAAM,CAAC,oBAAoB,CAAC;IACnE,MAAMsO,sBAAsB,GAAGxO,YAAY,IAAI,eAAe,KAAKuO,cAAc;IACjF,OAAOC,sBAAsB,GAAG,KAAK,GAAG,KAAK,CAACL,eAAe,CAACC,gBAAgB,EAAEC,cAAc,EAAEC,cAAc,EAAEC,cAAc,CAAC;EACnI;AACJ,CAAC;AACD,MAAME,iBAAiB,GAAGtB,IAAI,IAAI,cAAcA,IAAI,CAAC;EACjDlB,aAAaA,CAAC5L,MAAM,EAAE;IAClB,MAAMoG,UAAU,GAAG,CAAC,IAAI,CAACiI,kBAAkB,CAAC1O,YAAY,CAAC,CAAC;IAC1D,MAAMoM,sBAAsB,GAAG,IAAI,CAACsC,kBAAkB,CAACtC,sBAAsB,CAAC,CAAC;IAC/E,OAAO3F,UAAU,IAAI2F,sBAAsB,IAAI/L,MAAM,CAACK,WAAW,IAAI,KAAK,CAACuL,aAAa,CAAC5L,MAAM,CAAC;EACpG;AACJ,CAAC;AACD,OAAO,MAAMsO,mBAAmB,GAAG;EAC/BC,cAAc,EAAEA,CAAA,MAAO;IACnB3H,aAAa,EAAE;MACXI,OAAO,EAAE,KAAK;MACdD,MAAM,EAAE;QACJC,OAAO,EAAE,KAAK;QACdE,OAAO,EAAE,GAAG;QACZU,aAAa,EAAE,CAAC;MACpB,CAAC;MACD4G,SAAS,EAAE;QACPvF,cAAc,EAAE,KAAK;QACrBH,aAAa,EAAE,KAAK;QACpBE,SAAS,EAAE;MACf,CAAC;MACDxG,QAAQ,EAAE,KAAK,CAAC;MAChBiM,IAAI,EAAE,aAAa;MACnB7J,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE,GAAG;MACXJ,KAAK,EAAE9G,mBAAmB,CAACmI,MAAM,CAAC,+BAA+B,CAAC;MAClE2C,cAAc,EAAE9K,mBAAmB,CAACmI,MAAM,CAAC,mCAAmC,CAAC;MAC/Eb,SAAS,EAAE,KAAK;IACpB;EACJ,CAAC,CAAC;EACFyJ,WAAW,EAAE;IACT9H,aAAa,EAAE5F;EACnB,CAAC;EACD2N,KAAK,EAAE;IACHC,iBAAiB,EAAE5L;EACvB,CAAC;EACD6L,SAAS,EAAE;IACPF,KAAK,EAAE;MACH9B,WAAW,EAAEA,WAAW;MACxBuB,iBAAiB,EAAEA;IACvB,CAAC;IACDM,WAAW,EAAE;MACTtD,OAAO,EAAEA;IACb;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}