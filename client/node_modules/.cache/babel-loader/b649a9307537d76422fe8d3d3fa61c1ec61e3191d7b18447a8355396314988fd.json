{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editing/m_editing_cell_based.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { name as clickEventName } from \"../../../../common/core/events/click\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport holdEvent from \"../../../../common/core/events/hold\";\nimport pointerEvents from \"../../../../common/core/events/pointer\";\nimport { addNamespace } from \"../../../../common/core/events/utils/index\";\nimport { createObjectWithChanges } from \"../../../../common/data/array_utils\";\nimport domAdapter from \"../../../../core/dom_adapter\";\nimport $ from \"../../../../core/renderer\";\nimport { deferRender } from \"../../../../core/utils/common\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { isElementInDom } from \"../../../../core/utils/dom\";\nimport { isDefined, isString } from \"../../../../core/utils/type\";\nimport { ADD_ROW_BUTTON_CLASS, CELL_MODIFIED_CLASS, DATA_EDIT_DATA_REMOVE_TYPE, DATA_ROW_CLASS, DROPDOWN_EDITOR_OVERLAY_CLASS, EDIT_MODE_BATCH, EDIT_MODE_CELL, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITOR_CELL_CLASS, FOCUS_OVERLAY_CLASS, ROW_CLASS, ROW_REMOVED, TARGET_COMPONENT_NAME } from \"./const\";\nimport { isEditable } from \"./m_editing_utils\";\nconst editingControllerExtender = Base => class extends Base {\n  init() {\n    const needCreateHandlers = !this._saveEditorHandler;\n    super.init();\n    if (needCreateHandlers) {\n      let $pointerDownTarget;\n      let isResizing;\n      this._pointerUpEditorHandler = () => {\n        var _this$_columnsResizer;\n        isResizing = null === (_this$_columnsResizer = this._columnsResizerController) || void 0 === _this$_columnsResizer ? void 0 : _this$_columnsResizer.isResizing();\n      };\n      this._pointerDownEditorHandler = e => $pointerDownTarget = $(e.target);\n      this._saveEditorHandler = this.createAction(function (e) {\n        const {\n          event: event\n        } = e;\n        const $target = $(event.target);\n        const targetComponent = event[TARGET_COMPONENT_NAME];\n        const {\n          component: component\n        } = this;\n        if (isEditable($pointerDownTarget) && !$pointerDownTarget.is($target)) {\n          return;\n        }\n        function checkEditorPopup($element) {\n          if (!$element) {\n            return false;\n          }\n          const $dropDownEditorOverlay = $element.closest(`.${DROPDOWN_EDITOR_OVERLAY_CLASS}`);\n          const $componentElement = component.$element();\n          return $dropDownEditorOverlay.length > 0 && 0 === $componentElement.closest($dropDownEditorOverlay).length;\n        }\n        if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {\n          const isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\n          const isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;\n          const isAddRowButton = !!$target.closest(`.${this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS)}`).length;\n          const isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n          const isCellEditMode = this.isCellEditMode();\n          if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isElementInDom($target) || isAnotherComponent)) {\n            this._closeEditItem.bind(this)($target);\n          }\n        }\n      });\n      eventsEngine.on(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n      eventsEngine.on(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n      eventsEngine.on(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n    }\n  }\n  isCellEditMode() {\n    return this.option(\"editing.mode\") === EDIT_MODE_CELL;\n  }\n  isBatchEditMode() {\n    return this.option(\"editing.mode\") === EDIT_MODE_BATCH;\n  }\n  isCellOrBatchEditMode() {\n    return this.isCellEditMode() || this.isBatchEditMode();\n  }\n  _needToCloseEditableCell($targetElement) {\n    const $element = this.component.$element();\n    let result = this.isEditing();\n    const isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\n    if (isCurrentComponentElement) {\n      const isDataRow = $targetElement.closest(`.${DATA_ROW_CLASS}`).length;\n      if (isDataRow) {\n        const $targetCell = $targetElement.closest(`.${ROW_CLASS}> td`);\n        const rowIndex = this._rowsView.getRowIndex($targetCell.parent());\n        const cellElements = this._rowsView.getCellElements(rowIndex);\n        if (null !== cellElements && void 0 !== cellElements && cellElements.length) {\n          var _visibleColumns$colum;\n          const columnIndex = cellElements.index($targetCell);\n          const visibleColumns = this._columnsController.getVisibleColumns();\n          const allowEditing = null === (_visibleColumns$colum = visibleColumns[columnIndex]) || void 0 === _visibleColumns$colum ? void 0 : _visibleColumns$colum.allowEditing;\n          const isEditingCell = this.isEditCell(rowIndex, columnIndex);\n          result = result && !allowEditing && !isEditingCell;\n        }\n      }\n    }\n    return result || super._needToCloseEditableCell($targetElement);\n  }\n  _closeEditItem($targetElement) {\n    if (this._needToCloseEditableCell($targetElement)) {\n      this.closeEditCell();\n    }\n  }\n  _focusEditorIfNeed() {\n    if (this._needFocusEditor && this.isCellOrBatchEditMode()) {\n      var _this$_rowsView;\n      const editColumnIndex = this._getVisibleEditColumnIndex();\n      const $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n      this._refocusEditCell = false;\n      clearTimeout(this._inputFocusTimeoutID);\n      if ($cell && !$cell.find(\":focus\").length) {\n        this._focusEditingCell(() => {\n          this._editCellInProgress = false;\n        }, $cell, true);\n      } else {\n        this._editCellInProgress = false;\n      }\n      this._needFocusEditor = false;\n    } else {\n      super._focusEditorIfNeed();\n    }\n  }\n  isEditing() {\n    if (this.isCellOrBatchEditMode()) {\n      const isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n      const isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\n      return isEditRowKeyDefined && isEditColumnNameDefined;\n    }\n    return super.isEditing();\n  }\n  _handleEditColumnNameChange(args) {\n    const oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\n    if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {\n      const columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\n      const oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\n      this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex);\n    }\n  }\n  _addRow(parentKey) {\n    if (this.isCellEditMode() && this.hasChanges()) {\n      const deferred = new Deferred();\n      this.saveEditData().done(() => {\n        if (!this.hasChanges()) {\n          this.addRow(parentKey).done(deferred.resolve).fail(deferred.reject);\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      });\n      return deferred.promise();\n    }\n    return super._addRow(parentKey);\n  }\n  editCell(rowIndex, columnIndex) {\n    return this._editCell({\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    });\n  }\n  _editCell(options) {\n    const d = new Deferred();\n    let coreResult;\n    this.executeOperation(d, () => {\n      coreResult = this._editCellCore(options);\n      when(coreResult).done(d.resolve).fail(d.reject);\n    });\n    return void 0 !== coreResult ? coreResult : d.promise();\n  }\n  _editCellCore(options) {\n    const dataController = this._dataController;\n    const isEditByOptionChanged = isDefined(options.oldColumnIndex) || isDefined(options.oldRowIndex);\n    const {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex,\n      column: column,\n      item: item\n    } = this._getNormalizedEditCellOptions(options);\n    const params = {\n      data: null === item || void 0 === item ? void 0 : item.data,\n      cancel: false,\n      column: column\n    };\n    if (void 0 === item.key) {\n      this._dataController.fireError(\"E1043\");\n      return;\n    }\n    if (column && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {\n      if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\n        return true;\n      }\n      const editRowIndex = rowIndex + dataController.getRowIndexOffset();\n      return when(this._beforeEditCell(rowIndex, columnIndex, item)).done(cancel => {\n        if (cancel) {\n          return;\n        }\n        if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {\n          this._processCanceledEditingCell();\n        }\n      });\n    }\n    return false;\n  }\n  _beforeEditCell(rowIndex, columnIndex, item) {\n    if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {\n      const isSaving = new Deferred();\n      this.saveEditData().always(() => {\n        isSaving.resolve(this.hasChanges());\n      });\n      this.addDeferred(isSaving);\n      return isSaving;\n    }\n    return false;\n  }\n  publicMethods() {\n    const publicMethods = super.publicMethods();\n    return publicMethods.concat([\"editCell\", \"closeEditCell\"]);\n  }\n  _getNormalizedEditCellOptions(_ref) {\n    let {\n      oldColumnIndex: oldColumnIndex,\n      oldRowIndex: oldRowIndex,\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    } = _ref;\n    const columnsController = this._columnsController;\n    const visibleColumns = columnsController.getVisibleColumns();\n    const items = this._dataController.items();\n    const item = items[rowIndex];\n    let oldColumn;\n    if (isDefined(oldColumnIndex)) {\n      oldColumn = visibleColumns[oldColumnIndex];\n    } else {\n      oldColumn = this._getEditColumn();\n    }\n    if (!isDefined(oldRowIndex)) {\n      oldRowIndex = this._getVisibleEditRowIndex();\n    }\n    if (isString(columnIndex)) {\n      columnIndex = columnsController.columnOption(columnIndex, \"index\");\n      columnIndex = columnsController.getVisibleIndex(columnIndex);\n    }\n    const column = visibleColumns[columnIndex];\n    return {\n      oldColumn: oldColumn,\n      columnIndex: columnIndex,\n      oldRowIndex: oldRowIndex,\n      rowIndex: rowIndex,\n      column: column,\n      item: item\n    };\n  }\n  _prepareEditCell(params, item, editColumnIndex, editRowIndex) {\n    if (!item.isNewRow) {\n      params.key = item.key;\n    }\n    if (this._isEditingStart(params)) {\n      return false;\n    }\n    this._pageIndex = this._dataController.pageIndex();\n    this._setEditRowKey(item.key);\n    this._setEditColumnNameByIndex(editColumnIndex);\n    if (!params.column.showEditorAlways) {\n      this._addInternalData({\n        key: item.key,\n        oldData: item.oldData ?? item.data\n      });\n    }\n    return true;\n  }\n  closeEditCell(isError, withoutSaveEditData) {\n    let result = when();\n    const oldEditRowIndex = this._getVisibleEditRowIndex();\n    if (this.isCellOrBatchEditMode()) {\n      const deferred = new Deferred();\n      result = new Deferred();\n      this.executeOperation(deferred, () => {\n        this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve);\n      });\n    }\n    return result.promise();\n  }\n  _closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData) {\n    const dataController = this._dataController;\n    const deferred = new Deferred();\n    const promise = deferred.promise();\n    if (this.isCellEditMode() && this.hasChanges()) {\n      if (!withoutSaveEditData) {\n        this.saveEditData().done(error => {\n          if (!this.hasChanges()) {\n            this.closeEditCell(!!error).always(deferred.resolve);\n            return;\n          }\n          deferred.resolve();\n        });\n        return promise;\n      }\n    } else {\n      this._resetEditRowKey();\n      this._resetEditColumnName();\n      if (oldEditRowIndex >= 0) {\n        const rowIndices = [oldEditRowIndex];\n        this._beforeCloseEditCellInBatchMode(rowIndices);\n        if (!isError) {\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: rowIndices\n          });\n        }\n      }\n    }\n    deferred.resolve();\n    return promise;\n  }\n  _resetModifiedClassCells(changes) {\n    if (this.isBatchEditMode()) {\n      const columnsCount = this._columnsController.getVisibleColumns().length;\n      changes.forEach(_ref2 => {\n        let {\n          key: key\n        } = _ref2;\n        const rowIndex = this._dataController.getRowIndexByKey(key);\n        for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n          const cellElement = this._rowsView._getCellElement(rowIndex, columnIndex);\n          null === cellElement || void 0 === cellElement || cellElement.removeClass(CELL_MODIFIED_CLASS);\n        }\n      });\n    }\n  }\n  _prepareChange(options, value, text) {\n    const $cellElement = $(options.cellElement);\n    if (this.isBatchEditMode() && void 0 !== options.key) {\n      this._applyModified($cellElement, options);\n    }\n    return super._prepareChange(options, value, text);\n  }\n  _cancelSaving(result) {\n    const dataController = this._dataController;\n    if (this.isCellOrBatchEditMode()) {\n      if (this.isBatchEditMode()) {\n        this._resetEditIndices();\n      }\n      dataController.updateItems();\n    }\n    super._cancelSaving(result);\n  }\n  optionChanged(args) {\n    const {\n      fullName: fullName\n    } = args;\n    if (\"editing\" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\n      this._handleEditColumnNameChange(args);\n      args.handled = true;\n    } else {\n      super.optionChanged(args);\n    }\n  }\n  _editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex) {\n    const columns = this._columnsController.getVisibleColumns();\n    if (columnIndex > -1) {\n      deferRender(() => {\n        this._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex);\n      });\n    }\n  }\n  _handleEditRowKeyChange(args) {\n    if (this.isCellOrBatchEditMode()) {\n      const columnIndex = this._getVisibleEditColumnIndex();\n      const oldRowIndexCorrection = this._getEditRowIndexCorrection();\n      const oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n      if (isDefined(args.value) && args.value !== args.previousValue) {\n        var _this$_editCellFromOp;\n        null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp || _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex);\n      }\n    } else {\n      super._handleEditRowKeyChange(args);\n    }\n  }\n  deleteRow(rowIndex) {\n    if (this.isCellEditMode() && this.isEditing()) {\n      const {\n        isNewRow: isNewRow\n      } = this._dataController.items()[rowIndex];\n      const rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n      this.closeEditCell(null, isNewRow).always(() => {\n        rowIndex = this._dataController.getRowIndexByKey(rowKey);\n        this._checkAndDeleteRow(rowIndex);\n      });\n    } else {\n      super.deleteRow(rowIndex);\n    }\n  }\n  _checkAndDeleteRow(rowIndex) {\n    if (this.isBatchEditMode()) {\n      this._deleteRowCore(rowIndex);\n    } else {\n      super._checkAndDeleteRow(rowIndex);\n    }\n  }\n  _refreshCore(params) {\n    const {\n      isPageChanged: isPageChanged\n    } = params ?? {};\n    const needResetIndexes = this.isBatchEditMode() || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\n    if (this.isCellOrBatchEditMode()) {\n      if (needResetIndexes) {\n        this._resetEditColumnName();\n        this._resetEditRowKey();\n      }\n    } else {\n      super._refreshCore(params);\n    }\n  }\n  _allowRowAdding(params) {\n    if (this.isBatchEditMode()) {\n      return true;\n    }\n    return super._allowRowAdding(params);\n  }\n  _afterDeleteRow(rowIndex, oldEditRowIndex) {\n    const dataController = this._dataController;\n    if (this.isBatchEditMode()) {\n      dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [oldEditRowIndex, rowIndex]\n      });\n      return new Deferred().resolve();\n    }\n    return super._afterDeleteRow(rowIndex, oldEditRowIndex);\n  }\n  _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {\n    if (this.isCellOrBatchEditMode()) {\n      this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n    } else {\n      super._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n    }\n  }\n  _isDefaultButtonVisible(button, options) {\n    if (this.isCellOrBatchEditMode()) {\n      const isBatchMode = this.isBatchEditMode();\n      switch (button.name) {\n        case \"save\":\n        case \"cancel\":\n        case \"edit\":\n          return false;\n        case \"delete\":\n          return super._isDefaultButtonVisible(button, options) && (!isBatchMode || !options.row.removed);\n        case \"undelete\":\n          return isBatchMode && this.allowDeleting(options) && options.row.removed;\n        default:\n          return super._isDefaultButtonVisible(button, options);\n      }\n    }\n    return super._isDefaultButtonVisible(button, options);\n  }\n  _isRowDeleteAllowed() {\n    const callBaseResult = super._isRowDeleteAllowed();\n    return callBaseResult || this.isBatchEditMode();\n  }\n  _beforeEndSaving(changes) {\n    if (this.isCellEditMode()) {\n      var _changes$;\n      if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\n        super._beforeEndSaving(changes);\n      }\n    } else {\n      if (this.isBatchEditMode()) {\n        this._resetModifiedClassCells(changes);\n      }\n      super._beforeEndSaving(changes);\n    }\n  }\n  prepareEditButtons(headerPanel) {\n    const editingOptions = this.option(\"editing\") ?? {};\n    const buttonItems = super.prepareEditButtons(headerPanel);\n    const needEditingButtons = editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting;\n    if (needEditingButtons && this.isBatchEditMode()) {\n      buttonItems.push(this.prepareButtonItem(headerPanel, \"save\", \"saveEditData\", 21));\n      buttonItems.push(this.prepareButtonItem(headerPanel, \"revert\", \"cancelEditData\", 22));\n    }\n    return buttonItems;\n  }\n  _saveEditDataInner() {\n    var _deferred;\n    const editRow = this._dataController.getVisibleRows()[this.getEditRowIndex()];\n    const editColumn = this._getEditColumn();\n    const showEditorAlways = null === editColumn || void 0 === editColumn ? void 0 : editColumn.showEditorAlways;\n    const isUpdateInCellMode = this.isCellEditMode() && !(null !== editRow && void 0 !== editRow && editRow.isNewRow);\n    let deferred;\n    if (isUpdateInCellMode && showEditorAlways) {\n      deferred = new Deferred();\n      this.addDeferred(deferred);\n    }\n    return super._saveEditDataInner().always(null === (_deferred = deferred) || void 0 === _deferred ? void 0 : _deferred.resolve);\n  }\n  _applyChange(options, params, forceUpdateRow) {\n    const isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\n    const {\n      showEditorAlways: showEditorAlways\n    } = options.column;\n    const isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n    const focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);\n    if (focusPreviousEditingCell) {\n      this._focusEditingCell();\n      this._updateEditRow(options.row, true, isCustomSetCellValue);\n      return;\n    }\n    return super._applyChange(options, params, forceUpdateRow);\n  }\n  _applyChangeCore(options, forceUpdateRow) {\n    const {\n      showEditorAlways: showEditorAlways\n    } = options.column;\n    const isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\n    if (showEditorAlways && !forceUpdateRow) {\n      if (isUpdateInCellMode) {\n        this._setEditRowKey(options.row.key, true);\n        this._setEditColumnNameByIndex(options.columnIndex, true);\n        return this.saveEditData();\n      }\n      if (this.isBatchEditMode()) {\n        forceUpdateRow = this._needUpdateRow(options.column);\n        return super._applyChangeCore(options, forceUpdateRow);\n      }\n    }\n    return super._applyChangeCore(options, forceUpdateRow);\n  }\n  _processDataItemCore(item, change, key, columns, generateDataValues) {\n    const {\n      data: data,\n      type: type\n    } = change;\n    if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {\n      item.data = createObjectWithChanges(item.data, data);\n    }\n    super._processDataItemCore(item, change, key, columns, generateDataValues);\n  }\n  _processRemoveCore(changes, editIndex, processIfBatch) {\n    if (this.isBatchEditMode() && !processIfBatch) {\n      return;\n    }\n    return super._processRemoveCore(changes, editIndex, processIfBatch);\n  }\n  _processRemoveIfError(changes, editIndex) {\n    if (this.isBatchEditMode()) {\n      return;\n    }\n    return super._processRemoveIfError(changes, editIndex);\n  }\n  _beforeFocusElementInRow(rowIndex) {\n    super._beforeFocusElementInRow(rowIndex);\n    const editRowIndex = rowIndex >= 0 ? rowIndex : 0;\n    const columnIndex = this.getFirstEditableColumnIndex();\n    columnIndex >= 0 && this.editCell(editRowIndex, columnIndex);\n  }\n};\nconst rowsView = Base => class extends Base {\n  _createTable() {\n    const $table = super._createTable.apply(this, arguments);\n    const editingController = this._editingController;\n    if (editingController.isCellOrBatchEditMode() && this.option(\"editing.allowUpdating\")) {\n      eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), `td:not(.${EDITOR_CELL_CLASS})`, this.createAction(() => {\n        if (editingController.isEditing()) {\n          editingController.closeEditCell();\n        }\n      }));\n    }\n    return $table;\n  }\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    if (row) {\n      const editingController = this._editingController;\n      const isRowRemoved = !!row.removed;\n      if (editingController.isBatchEditMode()) {\n        isRowRemoved && $row.addClass(ROW_REMOVED);\n      }\n    }\n    return $row;\n  }\n};\nexport const editingCellBasedModule = {\n  extenders: {\n    controllers: {\n      editing: editingControllerExtender\n    },\n    views: {\n      rowsView: rowsView\n    }\n  }\n};","map":{"version":3,"names":["name","clickEventName","eventsEngine","holdEvent","pointerEvents","addNamespace","createObjectWithChanges","domAdapter","$","deferRender","Deferred","when","isElementInDom","isDefined","isString","ADD_ROW_BUTTON_CLASS","CELL_MODIFIED_CLASS","DATA_EDIT_DATA_REMOVE_TYPE","DATA_ROW_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","EDIT_MODE_BATCH","EDIT_MODE_CELL","EDITING_EDITCOLUMNNAME_OPTION_NAME","EDITING_EDITROWKEY_OPTION_NAME","EDITOR_CELL_CLASS","FOCUS_OVERLAY_CLASS","ROW_CLASS","ROW_REMOVED","TARGET_COMPONENT_NAME","isEditable","editingControllerExtender","Base","init","needCreateHandlers","_saveEditorHandler","$pointerDownTarget","isResizing","_pointerUpEditorHandler","_this$_columnsResizer","_columnsResizerController","_pointerDownEditorHandler","e","target","createAction","event","$target","targetComponent","component","is","checkEditorPopup","$element","$dropDownEditorOverlay","closest","$componentElement","length","isCellOrBatchEditMode","_editCellInProgress","isEditorPopup","isAnotherComponent","_disposed","isAddRowButton","addWidgetPrefix","isFocusOverlay","hasClass","isCellEditMode","isEditing","_closeEditItem","bind","on","getDocument","up","down","option","isBatchEditMode","_needToCloseEditableCell","$targetElement","result","isCurrentComponentElement","isDataRow","$targetCell","rowIndex","_rowsView","getRowIndex","parent","cellElements","getCellElements","_visibleColumns$colum","columnIndex","index","visibleColumns","_columnsController","getVisibleColumns","allowEditing","isEditingCell","isEditCell","closeEditCell","_focusEditorIfNeed","_needFocusEditor","_this$_rowsView","editColumnIndex","_getVisibleEditColumnIndex","$cell","_getCellElement","_getVisibleEditRowIndex","_refocusEditCell","clearTimeout","_inputFocusTimeoutID","find","_focusEditingCell","isEditRowKeyDefined","isEditColumnNameDefined","_handleEditColumnNameChange","args","oldRowIndex","previousValue","value","getVisibleColumnIndex","oldColumnIndex","_editCellFromOptionChanged","_addRow","parentKey","hasChanges","deferred","saveEditData","done","addRow","resolve","fail","reject","promise","editCell","_editCell","options","d","coreResult","executeOperation","_editCellCore","dataController","_dataController","isEditByOptionChanged","column","item","_getNormalizedEditCellOptions","params","data","cancel","key","fireError","rowType","removed","editRowIndex","getRowIndexOffset","_beforeEditCell","_prepareEditCell","_processCanceledEditingCell","isNewRow","isSaving","always","addDeferred","publicMethods","concat","_ref","columnsController","items","oldColumn","_getEditColumn","columnOption","getVisibleIndex","_isEditingStart","_pageIndex","pageIndex","_setEditRowKey","_setEditColumnNameByIndex","showEditorAlways","_addInternalData","oldData","isError","withoutSaveEditData","oldEditRowIndex","_closeEditCellCore","error","_resetEditRowKey","_resetEditColumnName","rowIndices","_beforeCloseEditCellInBatchMode","updateItems","changeType","_resetModifiedClassCells","changes","columnsCount","forEach","_ref2","getRowIndexByKey","cellElement","removeClass","_prepareChange","text","$cellElement","_applyModified","_cancelSaving","_resetEditIndices","optionChanged","fullName","handled","columns","_repaintEditCell","_handleEditRowKeyChange","oldRowIndexCorrection","_getEditRowIndexCorrection","_this$_editCellFromOp","call","deleteRow","rowKey","getKeyByRowIndex","_checkAndDeleteRow","_deleteRowCore","_refreshCore","isPageChanged","needResetIndexes","_allowRowAdding","_afterDeleteRow","_updateEditRow","row","forceUpdateRow","isCustomSetCellValue","_updateRowImmediately","_isDefaultButtonVisible","button","isBatchMode","allowDeleting","_isRowDeleteAllowed","callBaseResult","_beforeEndSaving","_changes$","type","prepareEditButtons","headerPanel","editingOptions","buttonItems","needEditingButtons","allowUpdating","allowAdding","push","prepareButtonItem","_saveEditDataInner","_deferred","editRow","getVisibleRows","getEditRowIndex","editColumn","isUpdateInCellMode","_applyChange","setCellValue","defaultSetCellValue","focusPreviousEditingCell","hasEditData","_applyChangeCore","_needUpdateRow","_processDataItemCore","change","generateDataValues","_processRemoveCore","editIndex","processIfBatch","_processRemoveIfError","_beforeFocusElementInRow","getFirstEditableColumnIndex","rowsView","_createTable","$table","apply","arguments","editingController","_editingController","_createRow","$row","isRowRemoved","addClass","editingCellBasedModule","extenders","controllers","editing","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing_cell_based.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editing/m_editing_cell_based.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport holdEvent from \"../../../../common/core/events/hold\";\r\nimport pointerEvents from \"../../../../common/core/events/pointer\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../../common/core/events/utils/index\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../../../common/data/array_utils\";\r\nimport domAdapter from \"../../../../core/dom_adapter\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    deferRender\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../../../core/utils/dom\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    ADD_ROW_BUTTON_CLASS,\r\n    CELL_MODIFIED_CLASS,\r\n    DATA_EDIT_DATA_REMOVE_TYPE,\r\n    DATA_ROW_CLASS,\r\n    DROPDOWN_EDITOR_OVERLAY_CLASS,\r\n    EDIT_MODE_BATCH,\r\n    EDIT_MODE_CELL,\r\n    EDITING_EDITCOLUMNNAME_OPTION_NAME,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITOR_CELL_CLASS,\r\n    FOCUS_OVERLAY_CLASS,\r\n    ROW_CLASS,\r\n    ROW_REMOVED,\r\n    TARGET_COMPONENT_NAME\r\n} from \"./const\";\r\nimport {\r\n    isEditable\r\n} from \"./m_editing_utils\";\r\nconst editingControllerExtender = Base => class extends Base {\r\n    init() {\r\n        const needCreateHandlers = !this._saveEditorHandler;\r\n        super.init();\r\n        if (needCreateHandlers) {\r\n            let $pointerDownTarget;\r\n            let isResizing;\r\n            this._pointerUpEditorHandler = () => {\r\n                var _this$_columnsResizer;\r\n                isResizing = null === (_this$_columnsResizer = this._columnsResizerController) || void 0 === _this$_columnsResizer ? void 0 : _this$_columnsResizer.isResizing()\r\n            };\r\n            this._pointerDownEditorHandler = e => $pointerDownTarget = $(e.target);\r\n            this._saveEditorHandler = this.createAction((function(e) {\r\n                const {\r\n                    event: event\r\n                } = e;\r\n                const $target = $(event.target);\r\n                const targetComponent = event[TARGET_COMPONENT_NAME];\r\n                const {\r\n                    component: component\r\n                } = this;\r\n                if (isEditable($pointerDownTarget) && !$pointerDownTarget.is($target)) {\r\n                    return\r\n                }\r\n\r\n                function checkEditorPopup($element) {\r\n                    if (!$element) {\r\n                        return false\r\n                    }\r\n                    const $dropDownEditorOverlay = $element.closest(`.${DROPDOWN_EDITOR_OVERLAY_CLASS}`);\r\n                    const $componentElement = component.$element();\r\n                    return $dropDownEditorOverlay.length > 0 && 0 === $componentElement.closest($dropDownEditorOverlay).length\r\n                }\r\n                if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {\r\n                    const isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\r\n                    const isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;\r\n                    const isAddRowButton = !!$target.closest(`.${this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS)}`).length;\r\n                    const isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\r\n                    const isCellEditMode = this.isCellEditMode();\r\n                    if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isElementInDom($target) || isAnotherComponent)) {\r\n                        this._closeEditItem.bind(this)($target)\r\n                    }\r\n                }\r\n            }));\r\n            eventsEngine.on(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n            eventsEngine.on(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n            eventsEngine.on(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n        }\r\n    }\r\n    isCellEditMode() {\r\n        return this.option(\"editing.mode\") === EDIT_MODE_CELL\r\n    }\r\n    isBatchEditMode() {\r\n        return this.option(\"editing.mode\") === EDIT_MODE_BATCH\r\n    }\r\n    isCellOrBatchEditMode() {\r\n        return this.isCellEditMode() || this.isBatchEditMode()\r\n    }\r\n    _needToCloseEditableCell($targetElement) {\r\n        const $element = this.component.$element();\r\n        let result = this.isEditing();\r\n        const isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\r\n        if (isCurrentComponentElement) {\r\n            const isDataRow = $targetElement.closest(`.${DATA_ROW_CLASS}`).length;\r\n            if (isDataRow) {\r\n                const $targetCell = $targetElement.closest(`.${ROW_CLASS}> td`);\r\n                const rowIndex = this._rowsView.getRowIndex($targetCell.parent());\r\n                const cellElements = this._rowsView.getCellElements(rowIndex);\r\n                if (null !== cellElements && void 0 !== cellElements && cellElements.length) {\r\n                    var _visibleColumns$colum;\r\n                    const columnIndex = cellElements.index($targetCell);\r\n                    const visibleColumns = this._columnsController.getVisibleColumns();\r\n                    const allowEditing = null === (_visibleColumns$colum = visibleColumns[columnIndex]) || void 0 === _visibleColumns$colum ? void 0 : _visibleColumns$colum.allowEditing;\r\n                    const isEditingCell = this.isEditCell(rowIndex, columnIndex);\r\n                    result = result && !allowEditing && !isEditingCell\r\n                }\r\n            }\r\n        }\r\n        return result || super._needToCloseEditableCell($targetElement)\r\n    }\r\n    _closeEditItem($targetElement) {\r\n        if (this._needToCloseEditableCell($targetElement)) {\r\n            this.closeEditCell()\r\n        }\r\n    }\r\n    _focusEditorIfNeed() {\r\n        if (this._needFocusEditor && this.isCellOrBatchEditMode()) {\r\n            var _this$_rowsView;\r\n            const editColumnIndex = this._getVisibleEditColumnIndex();\r\n            const $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n            this._refocusEditCell = false;\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            if ($cell && !$cell.find(\":focus\").length) {\r\n                this._focusEditingCell((() => {\r\n                    this._editCellInProgress = false\r\n                }), $cell, true)\r\n            } else {\r\n                this._editCellInProgress = false\r\n            }\r\n            this._needFocusEditor = false\r\n        } else {\r\n            super._focusEditorIfNeed()\r\n        }\r\n    }\r\n    isEditing() {\r\n        if (this.isCellOrBatchEditMode()) {\r\n            const isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n            const isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\r\n            return isEditRowKeyDefined && isEditColumnNameDefined\r\n        }\r\n        return super.isEditing()\r\n    }\r\n    _handleEditColumnNameChange(args) {\r\n        const oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\r\n        if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {\r\n            const columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\r\n            const oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\r\n            this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex)\r\n        }\r\n    }\r\n    _addRow(parentKey) {\r\n        if (this.isCellEditMode() && this.hasChanges()) {\r\n            const deferred = new Deferred;\r\n            this.saveEditData().done((() => {\r\n                if (!this.hasChanges()) {\r\n                    this.addRow(parentKey).done(deferred.resolve).fail(deferred.reject)\r\n                } else {\r\n                    deferred.reject(\"cancel\")\r\n                }\r\n            }));\r\n            return deferred.promise()\r\n        }\r\n        return super._addRow(parentKey)\r\n    }\r\n    editCell(rowIndex, columnIndex) {\r\n        return this._editCell({\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        })\r\n    }\r\n    _editCell(options) {\r\n        const d = new Deferred;\r\n        let coreResult;\r\n        this.executeOperation(d, (() => {\r\n            coreResult = this._editCellCore(options);\r\n            when(coreResult).done(d.resolve).fail(d.reject)\r\n        }));\r\n        return void 0 !== coreResult ? coreResult : d.promise()\r\n    }\r\n    _editCellCore(options) {\r\n        const dataController = this._dataController;\r\n        const isEditByOptionChanged = isDefined(options.oldColumnIndex) || isDefined(options.oldRowIndex);\r\n        const {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex,\r\n            column: column,\r\n            item: item\r\n        } = this._getNormalizedEditCellOptions(options);\r\n        const params = {\r\n            data: null === item || void 0 === item ? void 0 : item.data,\r\n            cancel: false,\r\n            column: column\r\n        };\r\n        if (void 0 === item.key) {\r\n            this._dataController.fireError(\"E1043\");\r\n            return\r\n        }\r\n        if (column && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {\r\n            if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\r\n                return true\r\n            }\r\n            const editRowIndex = rowIndex + dataController.getRowIndexOffset();\r\n            return when(this._beforeEditCell(rowIndex, columnIndex, item)).done((cancel => {\r\n                if (cancel) {\r\n                    return\r\n                }\r\n                if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {\r\n                    this._processCanceledEditingCell()\r\n                }\r\n            }))\r\n        }\r\n        return false\r\n    }\r\n    _beforeEditCell(rowIndex, columnIndex, item) {\r\n        if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {\r\n            const isSaving = new Deferred;\r\n            this.saveEditData().always((() => {\r\n                isSaving.resolve(this.hasChanges())\r\n            }));\r\n            this.addDeferred(isSaving);\r\n            return isSaving\r\n        }\r\n        return false\r\n    }\r\n    publicMethods() {\r\n        const publicMethods = super.publicMethods();\r\n        return publicMethods.concat([\"editCell\", \"closeEditCell\"])\r\n    }\r\n    _getNormalizedEditCellOptions(_ref) {\r\n        let {\r\n            oldColumnIndex: oldColumnIndex,\r\n            oldRowIndex: oldRowIndex,\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        } = _ref;\r\n        const columnsController = this._columnsController;\r\n        const visibleColumns = columnsController.getVisibleColumns();\r\n        const items = this._dataController.items();\r\n        const item = items[rowIndex];\r\n        let oldColumn;\r\n        if (isDefined(oldColumnIndex)) {\r\n            oldColumn = visibleColumns[oldColumnIndex]\r\n        } else {\r\n            oldColumn = this._getEditColumn()\r\n        }\r\n        if (!isDefined(oldRowIndex)) {\r\n            oldRowIndex = this._getVisibleEditRowIndex()\r\n        }\r\n        if (isString(columnIndex)) {\r\n            columnIndex = columnsController.columnOption(columnIndex, \"index\");\r\n            columnIndex = columnsController.getVisibleIndex(columnIndex)\r\n        }\r\n        const column = visibleColumns[columnIndex];\r\n        return {\r\n            oldColumn: oldColumn,\r\n            columnIndex: columnIndex,\r\n            oldRowIndex: oldRowIndex,\r\n            rowIndex: rowIndex,\r\n            column: column,\r\n            item: item\r\n        }\r\n    }\r\n    _prepareEditCell(params, item, editColumnIndex, editRowIndex) {\r\n        if (!item.isNewRow) {\r\n            params.key = item.key\r\n        }\r\n        if (this._isEditingStart(params)) {\r\n            return false\r\n        }\r\n        this._pageIndex = this._dataController.pageIndex();\r\n        this._setEditRowKey(item.key);\r\n        this._setEditColumnNameByIndex(editColumnIndex);\r\n        if (!params.column.showEditorAlways) {\r\n            this._addInternalData({\r\n                key: item.key,\r\n                oldData: item.oldData ?? item.data\r\n            })\r\n        }\r\n        return true\r\n    }\r\n    closeEditCell(isError, withoutSaveEditData) {\r\n        let result = when();\r\n        const oldEditRowIndex = this._getVisibleEditRowIndex();\r\n        if (this.isCellOrBatchEditMode()) {\r\n            const deferred = new Deferred;\r\n            result = new Deferred;\r\n            this.executeOperation(deferred, (() => {\r\n                this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve)\r\n            }))\r\n        }\r\n        return result.promise()\r\n    }\r\n    _closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData) {\r\n        const dataController = this._dataController;\r\n        const deferred = new Deferred;\r\n        const promise = deferred.promise();\r\n        if (this.isCellEditMode() && this.hasChanges()) {\r\n            if (!withoutSaveEditData) {\r\n                this.saveEditData().done((error => {\r\n                    if (!this.hasChanges()) {\r\n                        this.closeEditCell(!!error).always(deferred.resolve);\r\n                        return\r\n                    }\r\n                    deferred.resolve()\r\n                }));\r\n                return promise\r\n            }\r\n        } else {\r\n            this._resetEditRowKey();\r\n            this._resetEditColumnName();\r\n            if (oldEditRowIndex >= 0) {\r\n                const rowIndices = [oldEditRowIndex];\r\n                this._beforeCloseEditCellInBatchMode(rowIndices);\r\n                if (!isError) {\r\n                    dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: rowIndices\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        deferred.resolve();\r\n        return promise\r\n    }\r\n    _resetModifiedClassCells(changes) {\r\n        if (this.isBatchEditMode()) {\r\n            const columnsCount = this._columnsController.getVisibleColumns().length;\r\n            changes.forEach((_ref2 => {\r\n                let {\r\n                    key: key\r\n                } = _ref2;\r\n                const rowIndex = this._dataController.getRowIndexByKey(key);\r\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\r\n                    const cellElement = this._rowsView._getCellElement(rowIndex, columnIndex);\r\n                    null === cellElement || void 0 === cellElement || cellElement.removeClass(CELL_MODIFIED_CLASS)\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    _prepareChange(options, value, text) {\r\n        const $cellElement = $(options.cellElement);\r\n        if (this.isBatchEditMode() && void 0 !== options.key) {\r\n            this._applyModified($cellElement, options)\r\n        }\r\n        return super._prepareChange(options, value, text)\r\n    }\r\n    _cancelSaving(result) {\r\n        const dataController = this._dataController;\r\n        if (this.isCellOrBatchEditMode()) {\r\n            if (this.isBatchEditMode()) {\r\n                this._resetEditIndices()\r\n            }\r\n            dataController.updateItems()\r\n        }\r\n        super._cancelSaving(result)\r\n    }\r\n    optionChanged(args) {\r\n        const {\r\n            fullName: fullName\r\n        } = args;\r\n        if (\"editing\" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\r\n            this._handleEditColumnNameChange(args);\r\n            args.handled = true\r\n        } else {\r\n            super.optionChanged(args)\r\n        }\r\n    }\r\n    _editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex) {\r\n        const columns = this._columnsController.getVisibleColumns();\r\n        if (columnIndex > -1) {\r\n            deferRender((() => {\r\n                this._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex)\r\n            }))\r\n        }\r\n    }\r\n    _handleEditRowKeyChange(args) {\r\n        if (this.isCellOrBatchEditMode()) {\r\n            const columnIndex = this._getVisibleEditColumnIndex();\r\n            const oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n            const oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n            if (isDefined(args.value) && args.value !== args.previousValue) {\r\n                var _this$_editCellFromOp;\r\n                null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp || _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex)\r\n            }\r\n        } else {\r\n            super._handleEditRowKeyChange(args)\r\n        }\r\n    }\r\n    deleteRow(rowIndex) {\r\n        if (this.isCellEditMode() && this.isEditing()) {\r\n            const {\r\n                isNewRow: isNewRow\r\n            } = this._dataController.items()[rowIndex];\r\n            const rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n            this.closeEditCell(null, isNewRow).always((() => {\r\n                rowIndex = this._dataController.getRowIndexByKey(rowKey);\r\n                this._checkAndDeleteRow(rowIndex)\r\n            }))\r\n        } else {\r\n            super.deleteRow(rowIndex)\r\n        }\r\n    }\r\n    _checkAndDeleteRow(rowIndex) {\r\n        if (this.isBatchEditMode()) {\r\n            this._deleteRowCore(rowIndex)\r\n        } else {\r\n            super._checkAndDeleteRow(rowIndex)\r\n        }\r\n    }\r\n    _refreshCore(params) {\r\n        const {\r\n            isPageChanged: isPageChanged\r\n        } = params ?? {};\r\n        const needResetIndexes = this.isBatchEditMode() || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\r\n        if (this.isCellOrBatchEditMode()) {\r\n            if (needResetIndexes) {\r\n                this._resetEditColumnName();\r\n                this._resetEditRowKey()\r\n            }\r\n        } else {\r\n            super._refreshCore(params)\r\n        }\r\n    }\r\n    _allowRowAdding(params) {\r\n        if (this.isBatchEditMode()) {\r\n            return true\r\n        }\r\n        return super._allowRowAdding(params)\r\n    }\r\n    _afterDeleteRow(rowIndex, oldEditRowIndex) {\r\n        const dataController = this._dataController;\r\n        if (this.isBatchEditMode()) {\r\n            dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: [oldEditRowIndex, rowIndex]\r\n            });\r\n            return (new Deferred).resolve()\r\n        }\r\n        return super._afterDeleteRow(rowIndex, oldEditRowIndex)\r\n    }\r\n    _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {\r\n        if (this.isCellOrBatchEditMode()) {\r\n            this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n        } else {\r\n            super._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n        }\r\n    }\r\n    _isDefaultButtonVisible(button, options) {\r\n        if (this.isCellOrBatchEditMode()) {\r\n            const isBatchMode = this.isBatchEditMode();\r\n            switch (button.name) {\r\n                case \"save\":\r\n                case \"cancel\":\r\n                case \"edit\":\r\n                    return false;\r\n                case \"delete\":\r\n                    return super._isDefaultButtonVisible(button, options) && (!isBatchMode || !options.row.removed);\r\n                case \"undelete\":\r\n                    return isBatchMode && this.allowDeleting(options) && options.row.removed;\r\n                default:\r\n                    return super._isDefaultButtonVisible(button, options)\r\n            }\r\n        }\r\n        return super._isDefaultButtonVisible(button, options)\r\n    }\r\n    _isRowDeleteAllowed() {\r\n        const callBaseResult = super._isRowDeleteAllowed();\r\n        return callBaseResult || this.isBatchEditMode()\r\n    }\r\n    _beforeEndSaving(changes) {\r\n        if (this.isCellEditMode()) {\r\n            var _changes$;\r\n            if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\r\n                super._beforeEndSaving(changes)\r\n            }\r\n        } else {\r\n            if (this.isBatchEditMode()) {\r\n                this._resetModifiedClassCells(changes)\r\n            }\r\n            super._beforeEndSaving(changes)\r\n        }\r\n    }\r\n    prepareEditButtons(headerPanel) {\r\n        const editingOptions = this.option(\"editing\") ?? {};\r\n        const buttonItems = super.prepareEditButtons(headerPanel);\r\n        const needEditingButtons = editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting;\r\n        if (needEditingButtons && this.isBatchEditMode()) {\r\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"save\", \"saveEditData\", 21));\r\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"revert\", \"cancelEditData\", 22))\r\n        }\r\n        return buttonItems\r\n    }\r\n    _saveEditDataInner() {\r\n        var _deferred;\r\n        const editRow = this._dataController.getVisibleRows()[this.getEditRowIndex()];\r\n        const editColumn = this._getEditColumn();\r\n        const showEditorAlways = null === editColumn || void 0 === editColumn ? void 0 : editColumn.showEditorAlways;\r\n        const isUpdateInCellMode = this.isCellEditMode() && !(null !== editRow && void 0 !== editRow && editRow.isNewRow);\r\n        let deferred;\r\n        if (isUpdateInCellMode && showEditorAlways) {\r\n            deferred = new Deferred;\r\n            this.addDeferred(deferred)\r\n        }\r\n        return super._saveEditDataInner().always(null === (_deferred = deferred) || void 0 === _deferred ? void 0 : _deferred.resolve)\r\n    }\r\n    _applyChange(options, params, forceUpdateRow) {\r\n        const isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\r\n        const {\r\n            showEditorAlways: showEditorAlways\r\n        } = options.column;\r\n        const isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n        const focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);\r\n        if (focusPreviousEditingCell) {\r\n            this._focusEditingCell();\r\n            this._updateEditRow(options.row, true, isCustomSetCellValue);\r\n            return\r\n        }\r\n        return super._applyChange(options, params, forceUpdateRow)\r\n    }\r\n    _applyChangeCore(options, forceUpdateRow) {\r\n        const {\r\n            showEditorAlways: showEditorAlways\r\n        } = options.column;\r\n        const isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\r\n        if (showEditorAlways && !forceUpdateRow) {\r\n            if (isUpdateInCellMode) {\r\n                this._setEditRowKey(options.row.key, true);\r\n                this._setEditColumnNameByIndex(options.columnIndex, true);\r\n                return this.saveEditData()\r\n            }\r\n            if (this.isBatchEditMode()) {\r\n                forceUpdateRow = this._needUpdateRow(options.column);\r\n                return super._applyChangeCore(options, forceUpdateRow)\r\n            }\r\n        }\r\n        return super._applyChangeCore(options, forceUpdateRow)\r\n    }\r\n    _processDataItemCore(item, change, key, columns, generateDataValues) {\r\n        const {\r\n            data: data,\r\n            type: type\r\n        } = change;\r\n        if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n            item.data = createObjectWithChanges(item.data, data)\r\n        }\r\n        super._processDataItemCore(item, change, key, columns, generateDataValues)\r\n    }\r\n    _processRemoveCore(changes, editIndex, processIfBatch) {\r\n        if (this.isBatchEditMode() && !processIfBatch) {\r\n            return\r\n        }\r\n        return super._processRemoveCore(changes, editIndex, processIfBatch)\r\n    }\r\n    _processRemoveIfError(changes, editIndex) {\r\n        if (this.isBatchEditMode()) {\r\n            return\r\n        }\r\n        return super._processRemoveIfError(changes, editIndex)\r\n    }\r\n    _beforeFocusElementInRow(rowIndex) {\r\n        super._beforeFocusElementInRow(rowIndex);\r\n        const editRowIndex = rowIndex >= 0 ? rowIndex : 0;\r\n        const columnIndex = this.getFirstEditableColumnIndex();\r\n        columnIndex >= 0 && this.editCell(editRowIndex, columnIndex)\r\n    }\r\n};\r\nconst rowsView = Base => class extends Base {\r\n    _createTable() {\r\n        const $table = super._createTable.apply(this, arguments);\r\n        const editingController = this._editingController;\r\n        if (editingController.isCellOrBatchEditMode() && this.option(\"editing.allowUpdating\")) {\r\n            eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), `td:not(.${EDITOR_CELL_CLASS})`, this.createAction((() => {\r\n                if (editingController.isEditing()) {\r\n                    editingController.closeEditCell()\r\n                }\r\n            })))\r\n        }\r\n        return $table\r\n    }\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (row) {\r\n            const editingController = this._editingController;\r\n            const isRowRemoved = !!row.removed;\r\n            if (editingController.isBatchEditMode()) {\r\n                isRowRemoved && $row.addClass(ROW_REMOVED)\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n};\r\nexport const editingCellBasedModule = {\r\n    extenders: {\r\n        controllers: {\r\n            editing: editingControllerExtender\r\n        },\r\n        views: {\r\n            rowsView: rowsView\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}