{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/virtual_scrolling/m_virtual_scrolling.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../../core/renderer\";\nimport browser from \"../../../../core/utils/browser\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { isElementInDom } from \"../../../../core/utils/dom\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getBoundingRect } from \"../../../../core/utils/position\";\nimport { getOuterHeight } from \"../../../../core/utils/size\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport { getWindow } from \"../../../../core/utils/window\";\nimport LoadIndicator from \"../../../../ui/load_indicator\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport gridCoreUtils from \"../m_utils\";\nimport { subscribeToExternalScrollers, VirtualScrollController } from \"./m_virtual_scrolling_core\";\nconst BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\nconst GROUP_SPACE_CLASS = \"group-space\";\nconst FREESPACE_CLASS = \"dx-freespace-row\";\nconst COLUMN_LINES_CLASS = \"dx-column-lines\";\nconst VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nconst ROW_INSERTED = \"dx-row-inserted\";\nconst SCROLLING_MODE_INFINITE = \"infinite\";\nconst SCROLLING_MODE_VIRTUAL = \"virtual\";\nconst LOAD_TIMEOUT = 300;\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\nconst VISIBLE_PAGE_INDEX = \"paging.pageIndex\";\nconst PAGING_METHOD_NAMES = [\"beginPageIndex\", \"endPageIndex\", \"pageIndex\"];\nconst isVirtualMode = function (that) {\n  return \"virtual\" === that.option(\"scrolling.mode\");\n};\nconst isAppendMode = function (that) {\n  return \"infinite\" === that.option(\"scrolling.mode\");\n};\nconst isVirtualPaging = function (that) {\n  return isVirtualMode(that) || isAppendMode(that);\n};\nconst correctCount = function (items, count, fromEnd, isItemCountableFunc) {\n  for (let i = 0; i < count + 1; i++) {\n    const item = items[fromEnd ? items.length - 1 - i : i];\n    if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\n      count++;\n    }\n  }\n  return count;\n};\nconst isItemCountableByDataSource = function (item, dataSource) {\n  return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data);\n};\nconst updateItemIndices = function (items) {\n  items.forEach((item, index) => {\n    item.rowIndex = index;\n  });\n  return items;\n};\nconst updateLoading = function (that) {\n  const beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\n  if (isVirtualMode(that)) {\n    if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\n      if (!that._isLoading) {\n        that._isLoading = true;\n        that.loadingChanged.fire(true);\n      }\n    } else if (that._isLoading) {\n      that._isLoading = false;\n      that.loadingChanged.fire(false);\n    }\n  }\n};\nconst proxyDataSourceAdapterMethod = function (that, methodName, args) {\n  if (false === that.option(LEGACY_SCROLLING_MODE) && PAGING_METHOD_NAMES.includes(methodName)) {\n    const dataSource = that._dataSource;\n    return dataSource.pageIndex.apply(dataSource, args);\n  }\n  const virtualScrollController = that._virtualScrollController;\n  return virtualScrollController[methodName].apply(virtualScrollController, args);\n};\nconst removeEmptyRows = function ($emptyRows, className) {\n  const tBodies = $emptyRows.toArray().map(row => $(row).parent(`.${className}`).get(0)).filter(row => row);\n  if (tBodies.length) {\n    $emptyRows = $(tBodies);\n  }\n  const rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\n  for (let i = 0; i < rowCount; i++) {\n    $emptyRows.eq(i).remove();\n  }\n};\nexport const dataSourceAdapterExtender = Base => class extends Base {\n  init() {\n    super.init.apply(this, arguments);\n    this._items = [];\n    this._totalCount = -1;\n    this._isLoaded = true;\n    this._loadPageCount = 1;\n    this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions());\n  }\n  dispose() {\n    this._virtualScrollController.dispose();\n    super.dispose.apply(this, arguments);\n  }\n  _getVirtualScrollDataOptions() {\n    const that = this;\n    return {\n      pageSize: () => that.pageSize(),\n      totalItemsCount: () => that.totalItemsCount(),\n      hasKnownLastPage: () => that.hasKnownLastPage(),\n      pageIndex: index => that._dataSource.pageIndex(index),\n      isLoading: () => that._dataSource.isLoading() && !that.isCustomLoading(),\n      pageCount: () => that.pageCount(),\n      load: () => that._dataSource.load(),\n      updateLoading() {\n        updateLoading(that);\n      },\n      itemsCount: () => that.itemsCount(true),\n      items: () => that._dataSource.items(),\n      viewportItems(items) {\n        if (items) {\n          that._items = items;\n        }\n        return that._items;\n      },\n      onChanged(e) {\n        that.changed.fire(e);\n      },\n      changingDuration() {\n        if (that.isLoading()) {\n          return 300;\n        }\n        return that._renderTime || 0;\n      }\n    };\n  }\n  _handleLoadingChanged(isLoading) {\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      super._handleLoadingChanged.apply(this, arguments);\n      return;\n    }\n    if (!isVirtualMode(this) || this._isLoadingAll) {\n      this._isLoading = isLoading;\n      super._handleLoadingChanged.apply(this, arguments);\n    }\n    if (isLoading) {\n      this._startLoadTime = new Date();\n    } else {\n      this._startLoadTime = void 0;\n    }\n  }\n  _handleLoadError() {\n    if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n      this._isLoading = false;\n      this.loadingChanged.fire(false);\n    }\n    super._handleLoadError.apply(this, arguments);\n  }\n  _handleDataChanged(e) {\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      this._items = this._dataSource.items().slice();\n      this._totalCount = this._dataSourceTotalCount(true);\n      super._handleDataChanged.apply(this, arguments);\n      return;\n    }\n    const callBase = super._handleDataChanged.bind(this);\n    this._virtualScrollController.handleDataChanged(callBase, e);\n  }\n  _customizeRemoteOperations(options, operationTypes) {\n    const newMode = false === this.option(LEGACY_SCROLLING_MODE);\n    let renderAsync = this.option(\"scrolling.renderAsync\");\n    if (!isDefined(renderAsync)) {\n      renderAsync = this._renderTime >= this.option(\"scrolling.renderingThreshold\");\n    }\n    if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {\n      options.delay = void 0;\n    }\n    super._customizeRemoteOperations.apply(this, arguments);\n  }\n  items() {\n    return this._items;\n  }\n  _dataSourceTotalCount(isBase) {\n    return false === this.option(LEGACY_SCROLLING_MODE) && isVirtualMode(this) && !isBase ? this._totalCount : super._dataSourceTotalCount();\n  }\n  itemsCount(isBase) {\n    if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {\n      return super.itemsCount();\n    }\n    return this._virtualScrollController.itemsCount();\n  }\n  load(loadOptions) {\n    if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {\n      return super.load(loadOptions);\n    }\n    return this._virtualScrollController.load();\n  }\n  isLoading() {\n    return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading;\n  }\n  isLoaded() {\n    return this._dataSource.isLoaded() && this._isLoaded;\n  }\n  resetPagesCache(isLiveUpdate) {\n    if (!isLiveUpdate) {\n      this._virtualScrollController.reset(true);\n    }\n    super.resetPagesCache.apply(this, arguments);\n  }\n  _changeRowExpandCore() {\n    const result = super._changeRowExpandCore.apply(this, arguments);\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      return result;\n    }\n    this.resetPagesCache();\n    updateLoading(this);\n    return result;\n  }\n  reload() {\n    this._dataSource.pageIndex(this.pageIndex());\n    const virtualScrollController = this._virtualScrollController;\n    if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {\n      const d = new Deferred();\n      super.reload.apply(this, arguments).done(r => {\n        const delayDeferred = virtualScrollController.getDelayDeferred();\n        if (delayDeferred) {\n          delayDeferred.done(d.resolve).fail(d.reject);\n        } else {\n          d.resolve(r);\n        }\n      }).fail(d.reject);\n      return d;\n    }\n    return super.reload.apply(this, arguments);\n  }\n  refresh(options, operationTypes) {\n    if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n      const {\n        storeLoadOptions: storeLoadOptions\n      } = options;\n      const dataSource = this._dataSource;\n      if (operationTypes.reload) {\n        this._virtualScrollController.reset();\n        dataSource.items().length = 0;\n        this._isLoaded = false;\n        updateLoading(this);\n        this._isLoaded = true;\n        if (isAppendMode(this)) {\n          this.pageIndex(0);\n          dataSource.pageIndex(0);\n          storeLoadOptions.pageIndex = 0;\n          options.pageIndex = 0;\n          storeLoadOptions.skip = 0;\n        } else {\n          dataSource.pageIndex(this.pageIndex());\n          if (dataSource.paginate()) {\n            options.pageIndex = this.pageIndex();\n            storeLoadOptions.skip = this.pageIndex() * this.pageSize();\n          }\n        }\n      } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {\n        storeLoadOptions.skip += this._totalCountCorrection;\n      }\n    }\n    return super.refresh.apply(this, arguments);\n  }\n  loadPageCount(count) {\n    if (!isDefined(count)) {\n      return this._loadPageCount;\n    }\n    this._loadPageCount = count;\n  }\n  _handleDataLoading(options) {\n    const loadPageCount = this.loadPageCount();\n    const pageSize = this.pageSize();\n    const newMode = false === this.option(LEGACY_SCROLLING_MODE);\n    const {\n      storeLoadOptions: storeLoadOptions\n    } = options;\n    const takeIsDefined = isDefined(storeLoadOptions.take);\n    options.loadPageCount = loadPageCount;\n    if (!options.isCustomLoading && newMode && takeIsDefined && loadPageCount > 1 && pageSize > 0) {\n      storeLoadOptions.take = loadPageCount * pageSize;\n    }\n    super._handleDataLoading.apply(this, arguments);\n  }\n  _loadPageSize() {\n    return super._loadPageSize.apply(this, arguments) * this.loadPageCount();\n  }\n  beginPageIndex() {\n    return proxyDataSourceAdapterMethod(this, \"beginPageIndex\", [...arguments]);\n  }\n  endPageIndex() {\n    return proxyDataSourceAdapterMethod(this, \"endPageIndex\", [...arguments]);\n  }\n  pageIndex(pageIndex) {\n    return proxyDataSourceAdapterMethod(this, \"pageIndex\", [...arguments]);\n  }\n  virtualItemsCount() {\n    return proxyDataSourceAdapterMethod(this, \"virtualItemsCount\", [...arguments]);\n  }\n  getContentOffset() {\n    return proxyDataSourceAdapterMethod(this, \"getContentOffset\", [...arguments]);\n  }\n  getVirtualContentSize() {\n    return proxyDataSourceAdapterMethod(this, \"getVirtualContentSize\", [...arguments]);\n  }\n  setContentItemSizes() {\n    return proxyDataSourceAdapterMethod(this, \"setContentItemSizes\", [...arguments]);\n  }\n  setViewportPosition() {\n    return proxyDataSourceAdapterMethod(this, \"setViewportPosition\", [...arguments]);\n  }\n  getViewportItemIndex() {\n    return proxyDataSourceAdapterMethod(this, \"getViewportItemIndex\", [...arguments]);\n  }\n  setViewportItemIndex(viewportItemIndex) {\n    return proxyDataSourceAdapterMethod(this, \"setViewportItemIndex\", [...arguments]);\n  }\n  getItemIndexByPosition() {\n    return proxyDataSourceAdapterMethod(this, \"getItemIndexByPosition\", [...arguments]);\n  }\n  viewportSize() {\n    return proxyDataSourceAdapterMethod(this, \"viewportSize\", [...arguments]);\n  }\n  viewportItemSize() {\n    return proxyDataSourceAdapterMethod(this, \"viewportItemSize\", [...arguments]);\n  }\n  getItemSize() {\n    return proxyDataSourceAdapterMethod(this, \"getItemSize\", [...arguments]);\n  }\n  getItemSizes() {\n    return proxyDataSourceAdapterMethod(this, \"getItemSizes\", [...arguments]);\n  }\n  loadIfNeed() {\n    return proxyDataSourceAdapterMethod(this, \"loadIfNeed\", [...arguments]);\n  }\n};\nexport const data = Base => class extends Base {\n  dispose() {\n    const rowsScrollController = this._rowsScrollController;\n    rowsScrollController && rowsScrollController.dispose();\n    super.dispose.apply(this, arguments);\n  }\n  _refreshDataSource() {\n    const baseResult = super._refreshDataSource.apply(this, arguments) || new Deferred().resolve().promise();\n    baseResult.done(this.initVirtualRows.bind(this));\n    return baseResult;\n  }\n  _loadDataSource() {\n    if (this._rowsScrollController && isVirtualPaging(this)) {\n      var _this$_dataSource;\n      const {\n        loadPageCount: loadPageCount\n      } = isDefined(this._loadViewportParams) ? this.getLoadPageParams() : {\n        loadPageCount: 0\n      };\n      loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount));\n    }\n    return super._loadDataSource.apply(this, arguments);\n  }\n  getRowPageSize() {\n    const rowPageSize = this.option(\"scrolling.rowPageSize\");\n    const pageSize = this.pageSize();\n    return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;\n  }\n  reload() {\n    const rowsScrollController = this._rowsScrollController || this._dataSource;\n    const itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\n    const result = super.reload.apply(this, arguments);\n    return result && result.done(() => {\n      if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n        const rowIndexOffset = this.getRowIndexOffset();\n        const rowIndex = Math.floor(itemIndex) - rowIndexOffset;\n        const {\n          component: component\n        } = this;\n        const scrollable = component.getScrollable && component.getScrollable();\n        const isSortingOperation = this.dataSource().operationTypes().sorting;\n        if (scrollable && !isSortingOperation && rowIndex >= 0) {\n          var _$rowElement$position;\n          const rowElement = component.getRowElement(rowIndex);\n          const $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\n          let top = $rowElement && (null === (_$rowElement$position = $rowElement.position()) || void 0 === _$rowElement$position ? void 0 : _$rowElement$position.top);\n          const isChromeLatest = browser.chrome && Number(browser.version ?? 0) >= 91;\n          const allowedTopOffset = browser.mozilla || isChromeLatest ? 1 : 0;\n          if (top && top > allowedTopOffset) {\n            top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));\n            scrollable.scrollTo({\n              y: top\n            });\n          }\n        }\n      }\n    });\n  }\n  initVirtualRows() {\n    const virtualRowsRendering = gridCoreUtils.isVirtualRowRendering(this);\n    this._allItems = null;\n    this._loadViewportParams = null;\n    if (\"virtual\" !== this.option(\"scrolling.mode\") && !virtualRowsRendering || !virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option(\"scrolling.rowPageSize\")) {\n      this._visibleItems = null;\n      this._rowsScrollController = null;\n      return;\n    }\n    const pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\n    this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\n    this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];\n    this._viewportChanging = false;\n    this._needUpdateViewportAfterLoading = false;\n    if (!this._rowsScrollController) {\n      this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\n      this._rowsScrollController.positionChanged.add(() => {\n        var _this$_dataSource2;\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\n          this._viewportChanging = true;\n          this.loadViewport();\n          this._viewportChanging = false;\n          return;\n        }\n        null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 || _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex());\n      });\n    }\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      this._updateLoadViewportParams();\n    }\n    if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {\n      this._rowsScrollController.load();\n    }\n  }\n  isViewportChanging() {\n    return this._viewportChanging;\n  }\n  _getRowsScrollDataOptions() {\n    const that = this;\n    const isItemCountable = function (item) {\n      return isItemCountableByDataSource(item, that._dataSource);\n    };\n    return {\n      pageSize: () => that.getRowPageSize(),\n      loadedOffset() {\n        var _that$_dataSource;\n        return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0;\n      },\n      loadedItemCount: () => that._itemCount,\n      totalItemsCount() {\n        if (isVirtualPaging(that)) {\n          return that.totalItemsCount();\n        }\n        return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length;\n      },\n      hasKnownLastPage: () => false === that.option(LEGACY_SCROLLING_MODE) ? that.hasKnownLastPage() : true,\n      pageIndex(index) {\n        if (void 0 !== index) {\n          that._rowPageIndex = index;\n        }\n        return that._rowPageIndex;\n      },\n      isLoading: () => that.isLoading(),\n      pageCount() {\n        const pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\n        return pageCount || 1;\n      },\n      load() {\n        if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\n          that._rowPageIndex = this.pageCount() - 1;\n          that._rowsScrollController.pageIndex(that._rowPageIndex);\n        }\n        if (!this.items().length && this.totalItemsCount()) {\n          return;\n        }\n        that._rowsScrollController.handleDataChanged(change => {\n          change = change || {};\n          change.changeType = change.changeType || \"refresh\";\n          change.items = change.items || that._visibleItems;\n          that._visibleItems.forEach((item, index) => {\n            item.rowIndex = index;\n          });\n          that._fireChanged(change);\n        });\n      },\n      updateLoading() {},\n      itemsCount() {\n        return this.items(true).length;\n      },\n      correctCount: (items, count, fromEnd) => correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\n        if (item.isNewRow) {\n          return isNextAfterLast && !fromEnd;\n        }\n        if (isNextAfterLast && fromEnd) {\n          return !item.isNewRow;\n        }\n        return isItemCountable(item);\n      }),\n      items(countableOnly) {\n        let result = that._items;\n        if (that.option(LEGACY_SCROLLING_MODE)) {\n          const dataSource = that.dataSource();\n          const virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();\n          const begin = virtualItemsCount ? virtualItemsCount.begin : 0;\n          const rowPageSize = that.getRowPageSize();\n          let skip = that._rowPageIndex * rowPageSize - begin;\n          let take = rowPageSize;\n          if (skip < 0) {\n            return [];\n          }\n          if (skip) {\n            skip = this.correctCount(result, skip);\n            result = result.slice(skip);\n          }\n          if (take) {\n            take = this.correctCount(result, take);\n            result = result.slice(0, take);\n          }\n        }\n        return countableOnly ? result.filter(isItemCountable) : result;\n      },\n      viewportItems(items) {\n        if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {\n          that._visibleItems = items;\n        }\n        return that._visibleItems;\n      },\n      onChanged() {},\n      changingDuration() {\n        const dataSource = that.dataSource();\n        if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {\n          return 300;\n        }\n        return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;\n      }\n    };\n  }\n  _updateItemsCore(change) {\n    const delta = this.getRowIndexDelta();\n    super._updateItemsCore.apply(this, arguments);\n    if (false === this.option(LEGACY_SCROLLING_MODE) && gridCoreUtils.isVirtualRowRendering(this)) {\n      if (\"update\" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {\n        change.cancel = true;\n      }\n      return;\n    }\n    const rowsScrollController = this._rowsScrollController;\n    if (rowsScrollController) {\n      const visibleItems = this._visibleItems;\n      const isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\n      if (\"append\" === change.changeType && change.items && !change.items.length) {\n        return;\n      }\n      if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\n        change.cancel = true;\n        isRefresh && rowsScrollController.reset(true);\n        rowsScrollController.load();\n      } else {\n        if (\"update\" === change.changeType) {\n          change.rowIndices.forEach((rowIndex, index) => {\n            const changeType = change.changeTypes[index];\n            const newItem = change.items[index];\n            if (\"update\" === changeType) {\n              visibleItems[rowIndex] = newItem;\n            } else if (\"insert\" === changeType) {\n              visibleItems.splice(rowIndex, 0, newItem);\n            } else if (\"remove\" === changeType) {\n              visibleItems.splice(rowIndex, 1);\n            }\n          });\n        } else {\n          visibleItems.forEach((item, index) => {\n            visibleItems[index] = this._items[index + delta] || visibleItems[index];\n          });\n          change.items = visibleItems;\n        }\n        updateItemIndices(visibleItems);\n      }\n    }\n  }\n  _updateLoadViewportParams() {\n    const viewportParams = this._rowsScrollController.getViewportParams();\n    const pageSize = this.pageSize();\n    if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {\n      const pageOffset = this.pageIndex() * pageSize;\n      viewportParams.skip += pageOffset;\n    }\n    this._loadViewportParams = viewportParams;\n  }\n  _processItems() {\n    const resultItems = super._processItems.apply(this, arguments);\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      const dataSource = this._dataSource;\n      let currentIndex = (null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) ?? 0;\n      let prevCountable;\n      let prevRowType;\n      let isPrevRowNew;\n      let wasCountableItem = false;\n      let newRows = [];\n      resultItems.forEach(item => {\n        const {\n          rowType: rowType\n        } = item;\n        const itemCountable = isItemCountableByDataSource(item, dataSource);\n        const isNextGroupItem = \"group\" === rowType && (prevCountable || itemCountable || \"group\" !== prevRowType && currentIndex > 0);\n        const isNextDataItem = \"data\" === rowType && itemCountable && (prevCountable || \"group\" !== prevRowType);\n        if (!item.isNewRow && isDefined(prevCountable)) {\n          const isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;\n          if ((isNextGroupItem || isNextDataItem) && !isPrevNewRowFirst) {\n            currentIndex++;\n          }\n        }\n        if (isNextGroupItem || isNextDataItem) {\n          wasCountableItem = true;\n        }\n        if (item.isNewRow) {\n          newRows.push(item);\n        } else {\n          newRows.forEach(it => {\n            it.loadIndex = currentIndex;\n          });\n          newRows = [];\n        }\n        item.loadIndex = currentIndex;\n        prevCountable = itemCountable;\n        prevRowType = rowType;\n        isPrevRowNew = item.isNewRow;\n      });\n      newRows.forEach(it => {\n        it.loadIndex = currentIndex;\n      });\n    }\n    return resultItems;\n  }\n  _afterProcessItems(items) {\n    this._itemCount = items.filter(item => isItemCountableByDataSource(item, this._dataSource)).length;\n    if (isDefined(this._loadViewportParams)) {\n      this._updateLoadViewportParams();\n      let result = items;\n      this._allItems = items;\n      if (items.length) {\n        const {\n          skipForCurrentPage: skipForCurrentPage\n        } = this.getLoadPageParams(true);\n        const skip = items[0].loadIndex + skipForCurrentPage;\n        const {\n          take: take\n        } = this._loadViewportParams;\n        result = items.filter(it => {\n          const isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;\n          const isLoadIndexGreaterStart = it.loadIndex >= skip;\n          const isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;\n          return isLoadIndexGreaterStart && isLoadIndexLessEnd;\n        });\n      }\n      return result;\n    }\n    return super._afterProcessItems.apply(this, arguments);\n  }\n  _applyChange(change) {\n    const that = this;\n    const {\n      items: items\n    } = change;\n    const {\n      changeType: changeType\n    } = change;\n    let {\n      removeCount: removeCount\n    } = change;\n    if (removeCount) {\n      const fromEnd = \"prepend\" === changeType;\n      removeCount = correctCount(that._items, removeCount, fromEnd, (item, isNextAfterLast) => \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast));\n      change.removeCount = removeCount;\n    }\n    switch (changeType) {\n      case \"prepend\":\n        that._items.unshift.apply(that._items, items);\n        if (removeCount) {\n          that._items.splice(-removeCount);\n        }\n        break;\n      case \"append\":\n        that._items.push.apply(that._items, items);\n        if (removeCount) {\n          that._items.splice(0, removeCount);\n        }\n        break;\n      default:\n        super._applyChange(change);\n    }\n  }\n  items(allItems) {\n    return allItems ? this._allItems || this._items : this._visibleItems || this._items;\n  }\n  getRowIndexDelta() {\n    let delta = 0;\n    if (this.option(LEGACY_SCROLLING_MODE)) {\n      const visibleItems = this._visibleItems;\n      if (visibleItems && visibleItems[0]) {\n        delta = this._items.indexOf(visibleItems[0]);\n      }\n    }\n    return delta < 0 ? 0 : delta;\n  }\n  getRowIndexOffset(byLoadedRows, needGroupOffset) {\n    let offset = 0;\n    const dataSource = this.dataSource();\n    const rowsScrollController = this._rowsScrollController;\n    const newMode = false === this.option(LEGACY_SCROLLING_MODE);\n    const virtualPaging = isVirtualPaging(this);\n    if (rowsScrollController && !byLoadedRows) {\n      if (newMode && isDefined(this._loadViewportParams)) {\n        const {\n          skipForCurrentPage: skipForCurrentPage,\n          pageIndex: pageIndex\n        } = this.getLoadPageParams(true);\n        const items = this.items(true);\n        offset = virtualPaging ? pageIndex * this.pageSize() : 0;\n        if (items.length) {\n          const firstLoadIndex = items[0].loadIndex;\n          offset += items.filter(item => item.loadIndex < firstLoadIndex + skipForCurrentPage).length;\n        }\n      } else {\n        offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize();\n      }\n    } else if (virtualPaging && newMode && dataSource) {\n      var _lastLoadOptions$skip;\n      const lastLoadOptions = dataSource.lastLoadOptions();\n      if (needGroupOffset && null !== (_lastLoadOptions$skip = lastLoadOptions.skips) && void 0 !== _lastLoadOptions$skip && _lastLoadOptions$skip.length) {\n        offset = lastLoadOptions.skips.reduce((res, skip) => res + skip, 0);\n      } else {\n        offset = lastLoadOptions.skip ?? 0;\n      }\n    } else if (isVirtualMode(this) && dataSource) {\n      offset = dataSource.beginPageIndex() * dataSource.pageSize();\n    }\n    return offset;\n  }\n  getDataIndex() {\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      return this.getRowIndexOffset(true, true);\n    }\n    return super.getDataIndex.apply(this, arguments);\n  }\n  viewportSize() {\n    const rowsScrollController = this._rowsScrollController;\n    const dataSource = this._dataSource;\n    const result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      return result;\n    }\n    return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments);\n  }\n  viewportHeight(height, scrollTop) {\n    var _this$_rowsScrollCont;\n    null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont || _this$_rowsScrollCont.viewportHeight(height, scrollTop);\n  }\n  viewportItemSize() {\n    const rowsScrollController = this._rowsScrollController;\n    const dataSource = this._dataSource;\n    const result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      return result;\n    }\n    return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments);\n  }\n  setViewportPosition() {\n    const rowsScrollController = this._rowsScrollController;\n    const dataSource = this._dataSource;\n    this._isPaging = false;\n    if (rowsScrollController) {\n      rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);\n    } else {\n      null === dataSource || void 0 === dataSource || dataSource.setViewportPosition.apply(dataSource, arguments);\n    }\n  }\n  setContentItemSizes(sizes) {\n    const rowsScrollController = this._rowsScrollController;\n    const dataSource = this._dataSource;\n    const result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      return result;\n    }\n    return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes);\n  }\n  getPreloadedRowCount() {\n    const preloadCount = this.option(\"scrolling.preloadedRowCount\");\n    const preloadEnabled = this.option(\"scrolling.preloadEnabled\");\n    if (isDefined(preloadCount)) {\n      return preloadCount;\n    }\n    const viewportSize = this.viewportSize();\n    return preloadEnabled ? 2 * viewportSize : viewportSize;\n  }\n  getLoadPageParams(byLoadedPage) {\n    var _this$_dataSource3, _this$_dataSource4;\n    const pageSize = this.pageSize();\n    const viewportParams = this._loadViewportParams;\n    const lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();\n    const loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;\n    const loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;\n    const isScrollingBack = this._rowsScrollController.isScrollingBack();\n    const topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;\n    const bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();\n    const totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;\n    const skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);\n    const pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);\n    const pageOffset = pageIndex * pageSize;\n    const skipForCurrentPage = viewportParams.skip - pageOffset;\n    const loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;\n    const take = byLoadedPage ? loadedTake : loadingTake;\n    const loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);\n    return {\n      pageIndex: pageIndex,\n      loadPageCount: Math.max(1, loadPageCount),\n      skipForCurrentPage: Math.max(0, skipForCurrentPage)\n    };\n  }\n  _updateVisiblePageIndex(currentPageIndex) {\n    if (!this._rowsScrollController) {\n      return;\n    }\n    if (isDefined(currentPageIndex)) {\n      this._silentOption(\"paging.pageIndex\", currentPageIndex);\n      this.pageChanged.fire();\n      return;\n    }\n    const viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();\n    const newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());\n    if (this.pageIndex() !== newPageIndex) {\n      this._silentOption(\"paging.pageIndex\", newPageIndex);\n      this.updateItems({\n        changeType: \"pageIndex\"\n      });\n    }\n  }\n  _getChangedLoadParams() {\n    const loadedPageParams = this.getLoadPageParams(true);\n    const {\n      pageIndex: pageIndex,\n      loadPageCount: loadPageCount\n    } = this.getLoadPageParams();\n    const pageIndexIsValid = this._pageIndexIsValid(pageIndex);\n    let result = null;\n    if (!this._isLoading && pageIndexIsValid && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {\n      result = {\n        pageIndex: pageIndex,\n        loadPageCount: loadPageCount\n      };\n    }\n    return result;\n  }\n  _pageIndexIsValid(pageIndex) {\n    let result = true;\n    if (isAppendMode(this) && this.hasKnownLastPage() || isVirtualMode(this)) {\n      result = pageIndex * this.pageSize() < this.totalItemsCount();\n    }\n    return result;\n  }\n  _loadItems(checkLoading, viewportIsFilled) {\n    const virtualPaging = isVirtualPaging(this);\n    const dataSourceAdapter = this._dataSource;\n    const changedParams = this._getChangedLoadParams();\n    const currentLoadPageCount = (null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) ?? 0;\n    const lastRequiredItemCount = this.pageSize() * currentLoadPageCount;\n    const currentPageIndex = (null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) ?? 0;\n    const pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;\n    const allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;\n    const isRepaintMode = \"repaint\" === this.option(\"editing.refreshMode\");\n    const pageIndexIncreased = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex;\n    let result = false;\n    if (!dataSourceAdapter || virtualPaging && checkLoading && (isRepaintMode && viewportIsFilled || pageIndexIncreased || pageIndexNotChanged && allLoadedInAppendMode)) {\n      return result;\n    }\n    if (virtualPaging && this._isLoading) {\n      this._needUpdateViewportAfterLoading = true;\n    }\n    if (virtualPaging && changedParams) {\n      result = true;\n      dataSourceAdapter.pageIndex(changedParams.pageIndex);\n      dataSourceAdapter.loadPageCount(changedParams.loadPageCount);\n      this._repaintChangesOnly = true;\n      this._needUpdateDimensions = true;\n      const viewportChanging = this._viewportChanging;\n      this.load().always(() => {\n        this._repaintChangesOnly = void 0;\n        this._needUpdateDimensions = void 0;\n      }).done(() => {\n        const isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;\n        (viewportChanging || isLastPage) && this._updateVisiblePageIndex();\n        if (this._needUpdateViewportAfterLoading) {\n          this._needUpdateViewportAfterLoading = false;\n          this.loadViewport({\n            checkLoadedParamsOnly: true\n          });\n        }\n      });\n    }\n    return result;\n  }\n  loadViewport(params) {\n    const {\n      checkLoadedParamsOnly: checkLoadedParamsOnly,\n      checkLoading: checkLoading,\n      viewportIsNotFilled: viewportIsNotFilled\n    } = params ?? {};\n    const virtualPaging = isVirtualPaging(this);\n    if (virtualPaging || gridCoreUtils.isVirtualRowRendering(this)) {\n      var _this$_dataSource5;\n      this._updateLoadViewportParams();\n      const loadingItemsStarted = this._loadItems(checkLoading, !viewportIsNotFilled);\n      const isCustomLoading = null === (_this$_dataSource5 = this._dataSource) || void 0 === _this$_dataSource5 ? void 0 : _this$_dataSource5.isCustomLoading();\n      const isLoading = checkLoading && !isCustomLoading && this._isLoading;\n      const needToUpdateItems = !(loadingItemsStarted || isLoading || checkLoadedParamsOnly);\n      if (needToUpdateItems) {\n        var _this$_editingControl;\n        const noPendingChangesInEditing = !(null !== (_this$_editingControl = this._editingController) && void 0 !== _this$_editingControl && null !== (_this$_editingControl = _this$_editingControl.getChanges()) && void 0 !== _this$_editingControl && _this$_editingControl.length);\n        this.updateItems({\n          repaintChangesOnly: true,\n          needUpdateDimensions: true,\n          useProcessedItemsCache: noPendingChangesInEditing,\n          cancelEmptyChanges: true\n        });\n      }\n    }\n  }\n  updateViewport() {\n    var _this$_loadViewportPa;\n    const viewportSize = this.viewportSize();\n    const itemCount = this.items().length;\n    const viewportIsNotFilled = viewportSize > itemCount;\n    const currentTake = (null === (_this$_loadViewportPa = this._loadViewportParams) || void 0 === _this$_loadViewportPa ? void 0 : _this$_loadViewportPa.take) ?? 0;\n    const rowsScrollController = this._rowsScrollController;\n    const newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;\n    (viewportIsNotFilled || currentTake < newTake) && !this._isPaging && itemCount && this.loadViewport({\n      checkLoading: true,\n      viewportIsNotFilled: viewportIsNotFilled\n    });\n  }\n  loadIfNeed() {\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      return;\n    }\n    const rowsScrollController = this._rowsScrollController;\n    rowsScrollController && rowsScrollController.loadIfNeed();\n    const dataSource = this._dataSource;\n    return dataSource && dataSource.loadIfNeed();\n  }\n  getItemSize() {\n    const rowsScrollController = this._rowsScrollController;\n    if (rowsScrollController) {\n      return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);\n    }\n    const dataSource = this._dataSource;\n    return dataSource && dataSource.getItemSize.apply(dataSource, arguments);\n  }\n  getItemSizes() {\n    const rowsScrollController = this._rowsScrollController;\n    if (rowsScrollController) {\n      return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);\n    }\n    const dataSource = this._dataSource;\n    return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);\n  }\n  getContentOffset() {\n    const rowsScrollController = this._rowsScrollController;\n    if (rowsScrollController) {\n      return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);\n    }\n    const dataSource = this._dataSource;\n    return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);\n  }\n  refresh(options) {\n    const dataSource = this._dataSource;\n    if (dataSource && options && options.load && isAppendMode(this)) {\n      dataSource.resetCurrentTotalCount();\n    }\n    return super.refresh.apply(this, arguments);\n  }\n  topItemIndex() {\n    var _this$_loadViewportPa2;\n    return null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.skip;\n  }\n  bottomItemIndex() {\n    const viewportParams = this._loadViewportParams;\n    return viewportParams && viewportParams.skip + viewportParams.take;\n  }\n  virtualItemsCount() {\n    const rowsScrollController = this._rowsScrollController;\n    if (rowsScrollController) {\n      return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments);\n    }\n    const dataSource = this._dataSource;\n    return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments);\n  }\n  pageIndex(pageIndex) {\n    const virtualPaging = isVirtualPaging(this);\n    const rowsScrollController = this._rowsScrollController;\n    if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {\n      if (void 0 === pageIndex) {\n        return this.option(\"paging.pageIndex\") ?? 0;\n      }\n    }\n    return super.pageIndex.apply(this, arguments);\n  }\n  _fireChanged(e) {\n    super._fireChanged.apply(this, arguments);\n    const {\n      operationTypes: operationTypes\n    } = e;\n    if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {\n      const {\n        fullReload: fullReload,\n        pageIndex: pageIndex\n      } = operationTypes;\n      if (e.isDataChanged && !fullReload && pageIndex) {\n        this._updateVisiblePageIndex(this._dataSource.pageIndex());\n      }\n    }\n  }\n  _getPagingOptionValue(optionName) {\n    let result = super._getPagingOptionValue.apply(this, arguments);\n    if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\n      result = this[optionName]();\n    }\n    return result;\n  }\n  isEmpty() {\n    return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : super.isEmpty.apply(this, arguments);\n  }\n  isLastPageLoaded() {\n    let result = false;\n    if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\n      const {\n        pageIndex: pageIndex,\n        loadPageCount: loadPageCount\n      } = this.getLoadPageParams(true);\n      const pageCount = this.pageCount();\n      result = pageIndex + loadPageCount >= pageCount;\n    } else {\n      result = super.isLastPageLoaded.apply(this, arguments);\n    }\n    return result;\n  }\n  reset() {\n    this._itemCount = 0;\n    this._allItems = null;\n    super.reset.apply(this, arguments);\n  }\n  _applyFilter() {\n    var _this$_dataSource6;\n    null === (_this$_dataSource6 = this._dataSource) || void 0 === _this$_dataSource6 || _this$_dataSource6.loadPageCount(1);\n    return super._applyFilter.apply(this, arguments);\n  }\n  getVirtualContentSize() {\n    var _this$_dataSource7;\n    return null === (_this$_dataSource7 = this._dataSource) || void 0 === _this$_dataSource7 ? void 0 : _this$_dataSource7.getVirtualContentSize.apply(this._dataSource, arguments);\n  }\n  setViewportItemIndex() {\n    var _this$_dataSource8;\n    return null === (_this$_dataSource8 = this._dataSource) || void 0 === _this$_dataSource8 ? void 0 : _this$_dataSource8.setViewportItemIndex.apply(this._dataSource, arguments);\n  }\n};\nexport const resizing = Base => class extends Base {\n  dispose() {\n    super.dispose.apply(this, arguments);\n    clearTimeout(this._resizeTimeout);\n  }\n  _updateMasterDataGridCore(masterDataGrid) {\n    return when(super._updateMasterDataGridCore.apply(this, arguments)).done(masterDataGridUpdated => {\n      const isNewVirtualMode = isVirtualMode(masterDataGrid) && false === masterDataGrid.option(LEGACY_SCROLLING_MODE);\n      if (!masterDataGridUpdated && isNewVirtualMode) {\n        const scrollable = masterDataGrid.getScrollable();\n        if (scrollable) {\n          masterDataGrid.updateDimensions();\n        }\n      }\n    });\n  }\n  hasResizeTimeout() {\n    return isDefined(this._resizeTimeout);\n  }\n  resize() {\n    let result;\n    if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n      clearTimeout(this._resizeTimeout);\n      this._resizeTimeout = null;\n      const diff = new Date() - this._lastTime;\n      const updateTimeout = this.option(\"scrolling.updateTimeout\");\n      if (this._lastTime && diff < updateTimeout) {\n        result = new Deferred();\n        this._resizeTimeout = setTimeout(() => {\n          this._resizeTimeout = null;\n          super.resize.apply(this).done(result.resolve).fail(result.reject);\n          this._lastTime = new Date();\n        }, updateTimeout);\n        this._lastTime = new Date();\n      } else {\n        result = super.resize.apply(this);\n        if (this._dataController.isLoaded()) {\n          this._lastTime = new Date();\n        }\n      }\n    } else {\n      result = super.resize.apply(this);\n    }\n    return result;\n  }\n};\nexport const rowsView = Base => class extends Base {\n  init() {\n    var _this$_dataController;\n    super.init();\n    this._dataController.pageChanged.add(pageIndex => {\n      const scrollTop = this._scrollTop;\n      this.scrollToPage(pageIndex ?? this._dataController.pageIndex());\n      if (false === this.option(LEGACY_SCROLLING_MODE) && this._scrollTop === scrollTop) {\n        this._dataController.updateViewport();\n      }\n    });\n    this._dataController.dataSourceChanged.add(() => {\n      !this._scrollTop && this._scrollToCurrentPageOnResize();\n    });\n    null === (_this$_dataController = this._dataController.stateLoaded) || void 0 === _this$_dataController || _this$_dataController.add(() => {\n      this._scrollToCurrentPageOnResize();\n    });\n    this._scrollToCurrentPageOnResize();\n  }\n  dispose() {\n    clearTimeout(this._scrollTimeoutID);\n    super.dispose();\n  }\n  _scrollToCurrentPageOnResize() {\n    if (this._dataController.pageIndex() > 0) {\n      const resizeHandler = () => {\n        this.resizeCompleted.remove(resizeHandler);\n        this.scrollToPage(this._dataController.pageIndex());\n      };\n      this.resizeCompleted.add(resizeHandler);\n    }\n  }\n  scrollToPage(pageIndex) {\n    const pageSize = this._dataController ? this._dataController.pageSize() : 0;\n    let scrollPosition;\n    if (isVirtualMode(this) || isAppendMode(this)) {\n      const itemSize = this._dataController.getItemSize();\n      const itemSizes = this._dataController.getItemSizes();\n      const itemIndex = pageIndex * pageSize;\n      scrollPosition = itemIndex * itemSize;\n      for (const index in itemSizes) {\n        if (parseInt(index) < itemIndex) {\n          scrollPosition += itemSizes[index] - itemSize;\n        }\n      }\n    } else {\n      scrollPosition = 0;\n    }\n    this.scrollTo({\n      y: scrollPosition,\n      x: this._scrollLeft\n    });\n  }\n  renderDelayedTemplates() {\n    this.waitAsyncTemplates().done(() => {\n      this._updateContentPosition(true);\n    });\n    super.renderDelayedTemplates.apply(this, arguments);\n  }\n  _renderCore(e) {\n    const startRenderTime = new Date();\n    const deferred = super._renderCore.apply(this, arguments);\n    const dataSource = this._dataController._dataSource;\n    if (dataSource && e) {\n      const itemCount = e.items ? e.items.length : 20;\n      const viewportSize = this._dataController.viewportSize() || 20;\n      if (gridCoreUtils.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {\n        dataSource._renderTime = (new Date() - startRenderTime) * viewportSize / itemCount;\n      } else {\n        dataSource._renderTime = new Date() - startRenderTime;\n      }\n    }\n    return deferred;\n  }\n  _getRowElements(tableElement) {\n    const $rows = super._getRowElements(tableElement);\n    return $rows && $rows.not(\".dx-virtual-row\");\n  }\n  _removeRowsElements(contentTable, removeCount, changeType) {\n    let rowElements = this._getRowElements(contentTable).toArray();\n    if (\"append\" === changeType) {\n      rowElements = rowElements.slice(0, removeCount);\n    } else {\n      rowElements = rowElements.slice(-removeCount);\n    }\n    rowElements.map(rowElement => {\n      const $rowElement = $(rowElement);\n      this._errorHandlingController && this._errorHandlingController.removeErrorRow($rowElement.next());\n      $rowElement.remove();\n    });\n  }\n  _updateContent(tableElement, change) {\n    let $freeSpaceRowElements;\n    const contentElement = this._findContentElement();\n    const changeType = change && change.changeType;\n    const d = Deferred();\n    const contentTable = contentElement.children().first();\n    if (\"append\" === changeType || \"prepend\" === changeType) {\n      this.waitAsyncTemplates().done(() => {\n        const $tBodies = this._getBodies(tableElement);\n        if (1 === $tBodies.length) {\n          this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children());\n        } else {\n          $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable);\n        }\n        tableElement.remove();\n        $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\n        removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\n        if (change.removeCount) {\n          this._removeRowsElements(contentTable, change.removeCount, changeType);\n        }\n        this._restoreErrorRow(contentTable);\n        d.resolve();\n      }).fail(d.reject);\n    } else {\n      super._updateContent.apply(this, arguments).done(() => {\n        if (\"update\" === changeType) {\n          this._restoreErrorRow(contentTable);\n        }\n        d.resolve();\n      }).fail(d.reject);\n    }\n    return d.promise().done(() => {\n      this._updateBottomLoading();\n    });\n  }\n  _addVirtualRow($table, isFixed, location, position) {\n    if (!position) {\n      return;\n    }\n    let $virtualRow = this._createEmptyRow(\"dx-virtual-row\", isFixed, position);\n    $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\n    this._appendEmptyRow($table, $virtualRow, location);\n  }\n  _updateContentItemSizes() {\n    const rowHeights = this._getRowHeights();\n    const correctedRowHeights = this._correctRowHeights(rowHeights);\n    this._dataController.setContentItemSizes(correctedRowHeights);\n  }\n  _updateViewportSize(viewportHeight, scrollTop) {\n    if (!isDefined(viewportHeight)) {\n      viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\n    }\n    this._dataController.viewportHeight(viewportHeight, scrollTop);\n  }\n  _getRowHeights() {\n    var _this$_editingControl2, _this$_editingControl3;\n    const isPopupEditMode = null === (_this$_editingControl2 = this._editingController) || void 0 === _this$_editingControl2 || null === (_this$_editingControl3 = _this$_editingControl2.isPopupEditMode) || void 0 === _this$_editingControl3 ? void 0 : _this$_editingControl3.call(_this$_editingControl2);\n    let rowElements = this._getRowElements(this._tableElement).toArray();\n    if (isPopupEditMode) {\n      rowElements = rowElements.filter(row => !$(row).hasClass(ROW_INSERTED));\n    }\n    return rowElements.map(row => getBoundingRect(row).height);\n  }\n  _correctRowHeights(rowHeights) {\n    const dataController = this._dataController;\n    const dataSource = dataController._dataSource;\n    const correctedRowHeights = [];\n    const visibleRows = dataController.getVisibleRows();\n    let itemSize = 0;\n    let firstCountableItem = true;\n    let lastLoadIndex = -1;\n    for (let i = 0; i < rowHeights.length; i++) {\n      const currentItem = visibleRows[i];\n      if (!isDefined(currentItem)) {\n        continue;\n      }\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {\n          correctedRowHeights.push(itemSize);\n          itemSize = 0;\n        }\n        lastLoadIndex = currentItem.loadIndex;\n      } else if (isItemCountableByDataSource(currentItem, dataSource)) {\n        if (firstCountableItem) {\n          firstCountableItem = false;\n        } else {\n          correctedRowHeights.push(itemSize);\n          itemSize = 0;\n        }\n      }\n      itemSize += rowHeights[i];\n    }\n    itemSize > 0 && correctedRowHeights.push(itemSize);\n    return correctedRowHeights;\n  }\n  _updateContentPosition(isRender) {\n    const rowHeight = this._rowHeight || 20;\n    this._dataController.viewportItemSize(rowHeight);\n    if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n      const isEmptyRows = this._dataController.isEmpty();\n      if (isEmptyRows) {\n        return;\n      }\n      if (!isRender) {\n        this._updateContentItemSizes();\n      }\n      const top = this._dataController.getContentOffset(\"begin\");\n      const bottom = this._dataController.getContentOffset(\"end\");\n      const $tables = this.getTableElements();\n      const $virtualRows = $tables.children(\"tbody\").children(\".dx-virtual-row\");\n      removeEmptyRows($virtualRows, \"dx-virtual-row\");\n      $tables.each((index, element) => {\n        const isFixed = index > 0;\n        const prevFixed = this._isFixedTableRendering;\n        this._isFixedTableRendering = isFixed;\n        this._addVirtualRow($(element), isFixed, \"top\", top);\n        this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\n        this._isFixedTableRendering = prevFixed;\n      });\n    }\n  }\n  _isTableLinesDisplaysCorrect(table) {\n    const hasColumnLines = table.find(\".dx-column-lines\").length > 0;\n    return hasColumnLines === this.option(\"showColumnLines\");\n  }\n  _isColumnElementsEqual($columns, $virtualColumns) {\n    let result = $columns.length === $virtualColumns.length;\n    if (result) {\n      each($columns, (index, element) => {\n        if (element.style.width !== $virtualColumns[index].style.width) {\n          result = false;\n          return result;\n        }\n        return;\n      });\n    }\n    return result;\n  }\n  _getCellClasses(column) {\n    const classes = [];\n    const {\n      cssClass: cssClass\n    } = column;\n    const isExpandColumn = \"expand\" === column.command;\n    cssClass && classes.push(cssClass);\n    isExpandColumn && classes.push(this.addWidgetPrefix(\"group-space\"));\n    return classes;\n  }\n  _findBottomLoadPanel($contentElement) {\n    const $element = $contentElement || this.element();\n    const $bottomLoadPanel = $element && $element.find(`.${this.addWidgetPrefix(\"bottom-load-panel\")}`);\n    if ($bottomLoadPanel && $bottomLoadPanel.length) {\n      return $bottomLoadPanel;\n    }\n  }\n  _updateBottomLoading() {\n    const that = this;\n    const virtualMode = isVirtualMode(this);\n    const appendMode = isAppendMode(this);\n    const showBottomLoading = !that._dataController.hasKnownLastPage() && that._dataController.isLoaded() && (virtualMode || appendMode);\n    const $contentElement = that._findContentElement();\n    const bottomLoadPanelElement = that._findBottomLoadPanel($contentElement);\n    if (showBottomLoading) {\n      if (!bottomLoadPanelElement) {\n        $(\"<div>\").addClass(that.addWidgetPrefix(\"bottom-load-panel\")).append(that._createComponent($(\"<div>\"), LoadIndicator, {\n          elementAttr: {\n            role: null,\n            \"aria-label\": null\n          }\n        }).$element()).appendTo($contentElement);\n      }\n    } else if (bottomLoadPanelElement) {\n      bottomLoadPanelElement.remove();\n    }\n  }\n  _handleScroll(e) {\n    const legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);\n    const zeroTopPosition = 0 === e.scrollOffset.top;\n    const isScrollTopChanged = this._scrollTop !== e.scrollOffset.top;\n    const hasScrolled = isScrollTopChanged || e.forceUpdateScrollPosition;\n    const isValidScrollTarget = this._hasHeight || !legacyScrollingMode && zeroTopPosition;\n    if (hasScrolled && isValidScrollTarget && this._rowHeight) {\n      this._scrollTop = e.scrollOffset.top;\n      const isVirtualRowRendering = isVirtualMode(this) || \"standard\" !== this.option(\"scrolling.rowRenderingMode\");\n      if (isVirtualRowRendering && false === this.option(LEGACY_SCROLLING_MODE)) {\n        this._updateContentItemSizes();\n        this._updateViewportSize(null, this._scrollTop);\n      }\n      this._dataController.setViewportPosition(e.scrollOffset.top);\n    }\n    super._handleScroll.apply(this, arguments);\n  }\n  _needUpdateRowHeight(itemsCount) {\n    return super._needUpdateRowHeight.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !gridCoreUtils.isVirtualRowRendering(this);\n  }\n  _updateRowHeight() {\n    super._updateRowHeight.apply(this, arguments);\n    if (this._rowHeight) {\n      this._updateContentPosition();\n      const viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        this._updateViewportSize(viewportHeight);\n        this._dataController.updateViewport();\n      } else {\n        this._dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight));\n      }\n    }\n  }\n  updateFreeSpaceRowHeight() {\n    const result = super.updateFreeSpaceRowHeight.apply(this, arguments);\n    if (result) {\n      this._updateContentPosition();\n    }\n    return result;\n  }\n  setLoading(isLoading, messageText) {\n    const dataController = this._dataController;\n    const hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\n    if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\n      return;\n    }\n    if (hasBottomLoadPanel) {\n      isLoading = false;\n    }\n    super.setLoading.call(this, isLoading, messageText);\n  }\n  isGridDragging() {\n    return this.component.option(\"isDragging\");\n  }\n  throwHeightWarningIfNeed() {\n    const isGridDragging = this.isGridDragging();\n    if (void 0 === this._hasHeight || isGridDragging) {\n      return;\n    }\n    const needToThrow = !this._hasHeight && isVirtualPaging(this);\n    if (needToThrow && !this._heightWarningIsThrown) {\n      this._heightWarningIsThrown = true;\n      errors.log(\"W1025\");\n    }\n  }\n  _resizeCore() {\n    const that = this;\n    const $element = that.element();\n    super._resizeCore();\n    this.throwHeightWarningIfNeed();\n    if (that.component.$element() && !that._windowScroll && isElementInDom($element)) {\n      that._windowScroll = subscribeToExternalScrollers($element, scrollPos => {\n        if (!that._hasHeight && that._rowHeight) {\n          that._dataController.setViewportPosition(scrollPos);\n        }\n      }, that.component.$element());\n      that.on(\"disposing\", () => {\n        that._windowScroll.dispose();\n      });\n    }\n    if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n      that.loadIfNeed();\n    }\n  }\n  loadIfNeed() {\n    var _this$_dataController2, _this$_dataController3;\n    null === (_this$_dataController2 = this._dataController) || void 0 === _this$_dataController2 || null === (_this$_dataController3 = _this$_dataController2.loadIfNeed) || void 0 === _this$_dataController3 || _this$_dataController3.call(_this$_dataController2);\n  }\n  _restoreErrorRow(contentTable) {\n    if (false === this.option(LEGACY_SCROLLING_MODE)) {\n      var _this$_errorHandlingC;\n      null === (_this$_errorHandlingC = this._errorHandlingController) || void 0 === _this$_errorHandlingC || _this$_errorHandlingC.removeErrorRow();\n    }\n    super._restoreErrorRow.apply(this, arguments);\n  }\n};\nexport const virtualScrollingModule = {\n  defaultOptions: () => ({\n    scrolling: {\n      timeout: 300,\n      updateTimeout: 300,\n      minTimeout: 0,\n      renderingThreshold: 100,\n      removeInvisiblePages: true,\n      rowPageSize: 5,\n      prerenderedRowChunkSize: 1,\n      mode: \"standard\",\n      preloadEnabled: false,\n      rowRenderingMode: \"standard\",\n      loadTwoPagesOnStart: false,\n      legacyMode: false,\n      prerenderedRowCount: 1\n    }\n  }),\n  extenders: {\n    controllers: {\n      data: data,\n      resizing: resizing\n    },\n    views: {\n      rowsView: rowsView\n    }\n  }\n};","map":{"version":3,"names":["$","browser","Deferred","when","isElementInDom","each","getBoundingRect","getOuterHeight","isDefined","getWindow","LoadIndicator","errors","gridCoreUtils","subscribeToExternalScrollers","VirtualScrollController","BOTTOM_LOAD_PANEL_CLASS","GROUP_SPACE_CLASS","FREESPACE_CLASS","COLUMN_LINES_CLASS","VIRTUAL_ROW_CLASS","ROW_INSERTED","SCROLLING_MODE_INFINITE","SCROLLING_MODE_VIRTUAL","LOAD_TIMEOUT","LEGACY_SCROLLING_MODE","VISIBLE_PAGE_INDEX","PAGING_METHOD_NAMES","isVirtualMode","that","option","isAppendMode","isVirtualPaging","correctCount","items","count","fromEnd","isItemCountableFunc","i","item","length","isItemCountableByDataSource","dataSource","rowType","isNewRow","isGroupItemCountable","data","updateItemIndices","forEach","index","rowIndex","updateLoading","beginPageIndex","_virtualScrollController","viewportSize","getViewportItemIndex","pageSize","itemsCount","_dataSource","isLoading","_isLoading","loadingChanged","fire","proxyDataSourceAdapterMethod","methodName","args","includes","pageIndex","apply","virtualScrollController","removeEmptyRows","$emptyRows","className","tBodies","toArray","map","row","parent","get","filter","rowCount","eq","remove","dataSourceAdapterExtender","Base","init","arguments","_items","_totalCount","_isLoaded","_loadPageCount","component","_getVirtualScrollDataOptions","dispose","totalItemsCount","hasKnownLastPage","isCustomLoading","pageCount","load","viewportItems","onChanged","e","changed","changingDuration","_renderTime","_handleLoadingChanged","_isLoadingAll","_startLoadTime","Date","_handleLoadError","_handleDataChanged","slice","_dataSourceTotalCount","callBase","bind","handleDataChanged","_customizeRemoteOperations","options","operationTypes","newMode","renderAsync","reload","skip","delay","isBase","loadOptions","isLoaded","resetPagesCache","isLiveUpdate","reset","_changeRowExpandCore","result","d","done","r","delayDeferred","getDelayDeferred","resolve","fail","reject","refresh","storeLoadOptions","paginate","_totalCountCorrection","loadPageCount","_handleDataLoading","takeIsDefined","take","_loadPageSize","endPageIndex","virtualItemsCount","getContentOffset","getVirtualContentSize","setContentItemSizes","setViewportPosition","setViewportItemIndex","viewportItemIndex","getItemIndexByPosition","viewportItemSize","getItemSize","getItemSizes","loadIfNeed","rowsScrollController","_rowsScrollController","_refreshDataSource","baseResult","promise","initVirtualRows","_loadDataSource","_this$_dataSource","_loadViewportParams","getLoadPageParams","getRowPageSize","rowPageSize","itemIndex","isVirtualRowRendering","rowIndexOffset","getRowIndexOffset","Math","floor","scrollable","getScrollable","isSortingOperation","sorting","_$rowElement$position","rowElement","getRowElement","$rowElement","top","position","isChromeLatest","chrome","Number","version","allowedTopOffset","mozilla","round","scrollTo","y","virtualRowsRendering","_allItems","_visibleItems","_rowPageIndex","ceil","_viewportChanging","_needUpdateViewportAfterLoading","_getRowsScrollDataOptions","positionChanged","add","_this$_dataSource2","loadViewport","_updateLoadViewportParams","isViewportChanging","isItemCountable","loadedOffset","_that$_dataSource","lastLoadOptions","loadedItemCount","_itemCount","change","changeType","_fireChanged","isNextAfterLast","countableOnly","begin","_updateItemsCore","delta","getRowIndexDelta","rowIndices","cancelEmptyChanges","cancel","visibleItems","isRefresh","changeTypes","newItem","splice","viewportParams","getViewportParams","pageOffset","_processItems","resultItems","currentIndex","prevCountable","prevRowType","isPrevRowNew","wasCountableItem","newRows","itemCountable","isNextGroupItem","isNextDataItem","isPrevNewRowFirst","push","it","loadIndex","_afterProcessItems","skipForCurrentPage","isNewRowInEmptyData","isLoadIndexGreaterStart","isLoadIndexLessEnd","_applyChange","removeCount","unshift","allItems","indexOf","byLoadedRows","needGroupOffset","offset","virtualPaging","firstLoadIndex","_lastLoadOptions$skip","skips","reduce","res","getDataIndex","viewportHeight","height","scrollTop","_this$_rowsScrollCont","_isPaging","sizes","getPreloadedRowCount","preloadCount","preloadEnabled","byLoadedPage","_this$_dataSource3","_this$_dataSource4","loadedPageIndex","loadedTake","isScrollingBack","topPreloadCount","bottomPreloadCount","totalCountCorrection","skipWithPreload","max","loadingTake","_updateVisiblePageIndex","currentPageIndex","_silentOption","pageChanged","viewPortItemIndex","newPageIndex","updateItems","_getChangedLoadParams","loadedPageParams","pageIndexIsValid","_pageIndexIsValid","_loadItems","checkLoading","viewportIsFilled","dataSourceAdapter","changedParams","currentLoadPageCount","lastRequiredItemCount","pageIndexNotChanged","allLoadedInAppendMode","isRepaintMode","pageIndexIncreased","_repaintChangesOnly","_needUpdateDimensions","viewportChanging","always","isLastPage","checkLoadedParamsOnly","params","viewportIsNotFilled","_this$_dataSource5","loadingItemsStarted","needToUpdateItems","_this$_editingControl","noPendingChangesInEditing","_editingController","getChanges","repaintChangesOnly","needUpdateDimensions","useProcessedItemsCache","updateViewport","_this$_loadViewportPa","itemCount","currentTake","newTake","resetCurrentTotalCount","topItemIndex","_this$_loadViewportPa2","bottomItemIndex","fullReload","isDataChanged","_getPagingOptionValue","optionName","isEmpty","isLastPageLoaded","_applyFilter","_this$_dataSource6","_this$_dataSource7","_this$_dataSource8","resizing","clearTimeout","_resizeTimeout","_updateMasterDataGridCore","masterDataGrid","masterDataGridUpdated","isNewVirtualMode","updateDimensions","hasResizeTimeout","resize","diff","_lastTime","updateTimeout","setTimeout","_dataController","rowsView","_this$_dataController","_scrollTop","scrollToPage","dataSourceChanged","_scrollToCurrentPageOnResize","stateLoaded","_scrollTimeoutID","resizeHandler","resizeCompleted","scrollPosition","itemSize","itemSizes","parseInt","x","_scrollLeft","renderDelayedTemplates","waitAsyncTemplates","_updateContentPosition","_renderCore","startRenderTime","deferred","_getRowElements","tableElement","$rows","not","_removeRowsElements","contentTable","rowElements","_errorHandlingController","removeErrorRow","next","_updateContent","$freeSpaceRowElements","contentElement","_findContentElement","children","first","$tBodies","_getBodies","_getFreeSpaceRowElements","_restoreErrorRow","_updateBottomLoading","_addVirtualRow","$table","isFixed","location","$virtualRow","_createEmptyRow","_wrapRowIfNeed","_appendEmptyRow","_updateContentItemSizes","rowHeights","_getRowHeights","correctedRowHeights","_correctRowHeights","_updateViewportSize","_hasHeight","element","_this$_editingControl2","_this$_editingControl3","isPopupEditMode","call","_tableElement","hasClass","dataController","visibleRows","getVisibleRows","firstCountableItem","lastLoadIndex","currentItem","isRender","rowHeight","_rowHeight","isEmptyRows","bottom","$tables","getTableElements","$virtualRows","prevFixed","_isFixedTableRendering","_isTableLinesDisplaysCorrect","table","hasColumnLines","find","_isColumnElementsEqual","$columns","$virtualColumns","style","width","_getCellClasses","column","classes","cssClass","isExpandColumn","command","addWidgetPrefix","_findBottomLoadPanel","$contentElement","$element","$bottomLoadPanel","virtualMode","appendMode","showBottomLoading","bottomLoadPanelElement","addClass","append","_createComponent","elementAttr","role","appendTo","_handleScroll","legacyScrollingMode","zeroTopPosition","scrollOffset","isScrollTopChanged","hasScrolled","forceUpdateScrollPosition","isValidScrollTarget","_needUpdateRowHeight","_updateRowHeight","updateFreeSpaceRowHeight","setLoading","messageText","hasBottomLoadPanel","isGridDragging","throwHeightWarningIfNeed","needToThrow","_heightWarningIsThrown","log","_resizeCore","_windowScroll","scrollPos","on","_this$_dataController2","_this$_dataController3","_this$_errorHandlingC","virtualScrollingModule","defaultOptions","scrolling","timeout","minTimeout","renderingThreshold","removeInvisiblePages","prerenderedRowChunkSize","mode","rowRenderingMode","loadTwoPagesOnStart","legacyMode","prerenderedRowCount","extenders","controllers","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/virtual_scrolling/m_virtual_scrolling.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/virtual_scrolling/m_virtual_scrolling.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../../core/renderer\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../../../core/utils/dom\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    getOuterHeight\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    getWindow\r\n} from \"../../../../core/utils/window\";\r\nimport LoadIndicator from \"../../../../ui/load_indicator\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    subscribeToExternalScrollers,\r\n    VirtualScrollController\r\n} from \"./m_virtual_scrolling_core\";\r\nconst BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\r\nconst GROUP_SPACE_CLASS = \"group-space\";\r\nconst FREESPACE_CLASS = \"dx-freespace-row\";\r\nconst COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nconst VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nconst ROW_INSERTED = \"dx-row-inserted\";\r\nconst SCROLLING_MODE_INFINITE = \"infinite\";\r\nconst SCROLLING_MODE_VIRTUAL = \"virtual\";\r\nconst LOAD_TIMEOUT = 300;\r\nconst LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\nconst VISIBLE_PAGE_INDEX = \"paging.pageIndex\";\r\nconst PAGING_METHOD_NAMES = [\"beginPageIndex\", \"endPageIndex\", \"pageIndex\"];\r\nconst isVirtualMode = function(that) {\r\n    return \"virtual\" === that.option(\"scrolling.mode\")\r\n};\r\nconst isAppendMode = function(that) {\r\n    return \"infinite\" === that.option(\"scrolling.mode\")\r\n};\r\nconst isVirtualPaging = function(that) {\r\n    return isVirtualMode(that) || isAppendMode(that)\r\n};\r\nconst correctCount = function(items, count, fromEnd, isItemCountableFunc) {\r\n    for (let i = 0; i < count + 1; i++) {\r\n        const item = items[fromEnd ? items.length - 1 - i : i];\r\n        if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\r\n            count++\r\n        }\r\n    }\r\n    return count\r\n};\r\nconst isItemCountableByDataSource = function(item, dataSource) {\r\n    return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data)\r\n};\r\nconst updateItemIndices = function(items) {\r\n    items.forEach(((item, index) => {\r\n        item.rowIndex = index\r\n    }));\r\n    return items\r\n};\r\nconst updateLoading = function(that) {\r\n    const beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\r\n    if (isVirtualMode(that)) {\r\n        if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\r\n            if (!that._isLoading) {\r\n                that._isLoading = true;\r\n                that.loadingChanged.fire(true)\r\n            }\r\n        } else if (that._isLoading) {\r\n            that._isLoading = false;\r\n            that.loadingChanged.fire(false)\r\n        }\r\n    }\r\n};\r\nconst proxyDataSourceAdapterMethod = function(that, methodName, args) {\r\n    if (false === that.option(LEGACY_SCROLLING_MODE) && PAGING_METHOD_NAMES.includes(methodName)) {\r\n        const dataSource = that._dataSource;\r\n        return dataSource.pageIndex.apply(dataSource, args)\r\n    }\r\n    const virtualScrollController = that._virtualScrollController;\r\n    return virtualScrollController[methodName].apply(virtualScrollController, args)\r\n};\r\nconst removeEmptyRows = function($emptyRows, className) {\r\n    const tBodies = $emptyRows.toArray().map((row => $(row).parent(`.${className}`).get(0))).filter((row => row));\r\n    if (tBodies.length) {\r\n        $emptyRows = $(tBodies)\r\n    }\r\n    const rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\r\n    for (let i = 0; i < rowCount; i++) {\r\n        $emptyRows.eq(i).remove()\r\n    }\r\n};\r\nexport const dataSourceAdapterExtender = Base => class extends Base {\r\n    init() {\r\n        super.init.apply(this, arguments);\r\n        this._items = [];\r\n        this._totalCount = -1;\r\n        this._isLoaded = true;\r\n        this._loadPageCount = 1;\r\n        this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions())\r\n    }\r\n    dispose() {\r\n        this._virtualScrollController.dispose();\r\n        super.dispose.apply(this, arguments)\r\n    }\r\n    _getVirtualScrollDataOptions() {\r\n        const that = this;\r\n        return {\r\n            pageSize: () => that.pageSize(),\r\n            totalItemsCount: () => that.totalItemsCount(),\r\n            hasKnownLastPage: () => that.hasKnownLastPage(),\r\n            pageIndex: index => that._dataSource.pageIndex(index),\r\n            isLoading: () => that._dataSource.isLoading() && !that.isCustomLoading(),\r\n            pageCount: () => that.pageCount(),\r\n            load: () => that._dataSource.load(),\r\n            updateLoading() {\r\n                updateLoading(that)\r\n            },\r\n            itemsCount: () => that.itemsCount(true),\r\n            items: () => that._dataSource.items(),\r\n            viewportItems(items) {\r\n                if (items) {\r\n                    that._items = items\r\n                }\r\n                return that._items\r\n            },\r\n            onChanged(e) {\r\n                that.changed.fire(e)\r\n            },\r\n            changingDuration() {\r\n                if (that.isLoading()) {\r\n                    return 300\r\n                }\r\n                return that._renderTime || 0\r\n            }\r\n        }\r\n    }\r\n    _handleLoadingChanged(isLoading) {\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            super._handleLoadingChanged.apply(this, arguments);\r\n            return\r\n        }\r\n        if (!isVirtualMode(this) || this._isLoadingAll) {\r\n            this._isLoading = isLoading;\r\n            super._handleLoadingChanged.apply(this, arguments)\r\n        }\r\n        if (isLoading) {\r\n            this._startLoadTime = new Date\r\n        } else {\r\n            this._startLoadTime = void 0\r\n        }\r\n    }\r\n    _handleLoadError() {\r\n        if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n            this._isLoading = false;\r\n            this.loadingChanged.fire(false)\r\n        }\r\n        super._handleLoadError.apply(this, arguments)\r\n    }\r\n    _handleDataChanged(e) {\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            this._items = this._dataSource.items().slice();\r\n            this._totalCount = this._dataSourceTotalCount(true);\r\n            super._handleDataChanged.apply(this, arguments);\r\n            return\r\n        }\r\n        const callBase = super._handleDataChanged.bind(this);\r\n        this._virtualScrollController.handleDataChanged(callBase, e)\r\n    }\r\n    _customizeRemoteOperations(options, operationTypes) {\r\n        const newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n        let renderAsync = this.option(\"scrolling.renderAsync\");\r\n        if (!isDefined(renderAsync)) {\r\n            renderAsync = this._renderTime >= this.option(\"scrolling.renderingThreshold\")\r\n        }\r\n        if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {\r\n            options.delay = void 0\r\n        }\r\n        super._customizeRemoteOperations.apply(this, arguments)\r\n    }\r\n    items() {\r\n        return this._items\r\n    }\r\n    _dataSourceTotalCount(isBase) {\r\n        return false === this.option(LEGACY_SCROLLING_MODE) && isVirtualMode(this) && !isBase ? this._totalCount : super._dataSourceTotalCount()\r\n    }\r\n    itemsCount(isBase) {\r\n        if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            return super.itemsCount()\r\n        }\r\n        return this._virtualScrollController.itemsCount()\r\n    }\r\n    load(loadOptions) {\r\n        if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {\r\n            return super.load(loadOptions)\r\n        }\r\n        return this._virtualScrollController.load()\r\n    }\r\n    isLoading() {\r\n        return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading\r\n    }\r\n    isLoaded() {\r\n        return this._dataSource.isLoaded() && this._isLoaded\r\n    }\r\n    resetPagesCache(isLiveUpdate) {\r\n        if (!isLiveUpdate) {\r\n            this._virtualScrollController.reset(true)\r\n        }\r\n        super.resetPagesCache.apply(this, arguments)\r\n    }\r\n    _changeRowExpandCore() {\r\n        const result = super._changeRowExpandCore.apply(this, arguments);\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            return result\r\n        }\r\n        this.resetPagesCache();\r\n        updateLoading(this);\r\n        return result\r\n    }\r\n    reload() {\r\n        this._dataSource.pageIndex(this.pageIndex());\r\n        const virtualScrollController = this._virtualScrollController;\r\n        if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {\r\n            const d = new Deferred;\r\n            super.reload.apply(this, arguments).done((r => {\r\n                const delayDeferred = virtualScrollController.getDelayDeferred();\r\n                if (delayDeferred) {\r\n                    delayDeferred.done(d.resolve).fail(d.reject)\r\n                } else {\r\n                    d.resolve(r)\r\n                }\r\n            })).fail(d.reject);\r\n            return d\r\n        }\r\n        return super.reload.apply(this, arguments)\r\n    }\r\n    refresh(options, operationTypes) {\r\n        if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n            const {\r\n                storeLoadOptions: storeLoadOptions\r\n            } = options;\r\n            const dataSource = this._dataSource;\r\n            if (operationTypes.reload) {\r\n                this._virtualScrollController.reset();\r\n                dataSource.items().length = 0;\r\n                this._isLoaded = false;\r\n                updateLoading(this);\r\n                this._isLoaded = true;\r\n                if (isAppendMode(this)) {\r\n                    this.pageIndex(0);\r\n                    dataSource.pageIndex(0);\r\n                    storeLoadOptions.pageIndex = 0;\r\n                    options.pageIndex = 0;\r\n                    storeLoadOptions.skip = 0\r\n                } else {\r\n                    dataSource.pageIndex(this.pageIndex());\r\n                    if (dataSource.paginate()) {\r\n                        options.pageIndex = this.pageIndex();\r\n                        storeLoadOptions.skip = this.pageIndex() * this.pageSize()\r\n                    }\r\n                }\r\n            } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {\r\n                storeLoadOptions.skip += this._totalCountCorrection\r\n            }\r\n        }\r\n        return super.refresh.apply(this, arguments)\r\n    }\r\n    loadPageCount(count) {\r\n        if (!isDefined(count)) {\r\n            return this._loadPageCount\r\n        }\r\n        this._loadPageCount = count\r\n    }\r\n    _handleDataLoading(options) {\r\n        const loadPageCount = this.loadPageCount();\r\n        const pageSize = this.pageSize();\r\n        const newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n        const {\r\n            storeLoadOptions: storeLoadOptions\r\n        } = options;\r\n        const takeIsDefined = isDefined(storeLoadOptions.take);\r\n        options.loadPageCount = loadPageCount;\r\n        if (!options.isCustomLoading && newMode && takeIsDefined && loadPageCount > 1 && pageSize > 0) {\r\n            storeLoadOptions.take = loadPageCount * pageSize\r\n        }\r\n        super._handleDataLoading.apply(this, arguments)\r\n    }\r\n    _loadPageSize() {\r\n        return super._loadPageSize.apply(this, arguments) * this.loadPageCount()\r\n    }\r\n    beginPageIndex() {\r\n        return proxyDataSourceAdapterMethod(this, \"beginPageIndex\", [...arguments])\r\n    }\r\n    endPageIndex() {\r\n        return proxyDataSourceAdapterMethod(this, \"endPageIndex\", [...arguments])\r\n    }\r\n    pageIndex(pageIndex) {\r\n        return proxyDataSourceAdapterMethod(this, \"pageIndex\", [...arguments])\r\n    }\r\n    virtualItemsCount() {\r\n        return proxyDataSourceAdapterMethod(this, \"virtualItemsCount\", [...arguments])\r\n    }\r\n    getContentOffset() {\r\n        return proxyDataSourceAdapterMethod(this, \"getContentOffset\", [...arguments])\r\n    }\r\n    getVirtualContentSize() {\r\n        return proxyDataSourceAdapterMethod(this, \"getVirtualContentSize\", [...arguments])\r\n    }\r\n    setContentItemSizes() {\r\n        return proxyDataSourceAdapterMethod(this, \"setContentItemSizes\", [...arguments])\r\n    }\r\n    setViewportPosition() {\r\n        return proxyDataSourceAdapterMethod(this, \"setViewportPosition\", [...arguments])\r\n    }\r\n    getViewportItemIndex() {\r\n        return proxyDataSourceAdapterMethod(this, \"getViewportItemIndex\", [...arguments])\r\n    }\r\n    setViewportItemIndex(viewportItemIndex) {\r\n        return proxyDataSourceAdapterMethod(this, \"setViewportItemIndex\", [...arguments])\r\n    }\r\n    getItemIndexByPosition() {\r\n        return proxyDataSourceAdapterMethod(this, \"getItemIndexByPosition\", [...arguments])\r\n    }\r\n    viewportSize() {\r\n        return proxyDataSourceAdapterMethod(this, \"viewportSize\", [...arguments])\r\n    }\r\n    viewportItemSize() {\r\n        return proxyDataSourceAdapterMethod(this, \"viewportItemSize\", [...arguments])\r\n    }\r\n    getItemSize() {\r\n        return proxyDataSourceAdapterMethod(this, \"getItemSize\", [...arguments])\r\n    }\r\n    getItemSizes() {\r\n        return proxyDataSourceAdapterMethod(this, \"getItemSizes\", [...arguments])\r\n    }\r\n    loadIfNeed() {\r\n        return proxyDataSourceAdapterMethod(this, \"loadIfNeed\", [...arguments])\r\n    }\r\n};\r\nexport const data = Base => class extends Base {\r\n    dispose() {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        rowsScrollController && rowsScrollController.dispose();\r\n        super.dispose.apply(this, arguments)\r\n    }\r\n    _refreshDataSource() {\r\n        const baseResult = super._refreshDataSource.apply(this, arguments) || (new Deferred).resolve().promise();\r\n        baseResult.done(this.initVirtualRows.bind(this));\r\n        return baseResult\r\n    }\r\n    _loadDataSource() {\r\n        if (this._rowsScrollController && isVirtualPaging(this)) {\r\n            var _this$_dataSource;\r\n            const {\r\n                loadPageCount: loadPageCount\r\n            } = isDefined(this._loadViewportParams) ? this.getLoadPageParams() : {\r\n                loadPageCount: 0\r\n            };\r\n            loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount))\r\n        }\r\n        return super._loadDataSource.apply(this, arguments)\r\n    }\r\n    getRowPageSize() {\r\n        const rowPageSize = this.option(\"scrolling.rowPageSize\");\r\n        const pageSize = this.pageSize();\r\n        return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize\r\n    }\r\n    reload() {\r\n        const rowsScrollController = this._rowsScrollController || this._dataSource;\r\n        const itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\r\n        const result = super.reload.apply(this, arguments);\r\n        return result && result.done((() => {\r\n            if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                const rowIndexOffset = this.getRowIndexOffset();\r\n                const rowIndex = Math.floor(itemIndex) - rowIndexOffset;\r\n                const {\r\n                    component: component\r\n                } = this;\r\n                const scrollable = component.getScrollable && component.getScrollable();\r\n                const isSortingOperation = this.dataSource().operationTypes().sorting;\r\n                if (scrollable && !isSortingOperation && rowIndex >= 0) {\r\n                    var _$rowElement$position;\r\n                    const rowElement = component.getRowElement(rowIndex);\r\n                    const $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\r\n                    let top = $rowElement && (null === (_$rowElement$position = $rowElement.position()) || void 0 === _$rowElement$position ? void 0 : _$rowElement$position.top);\r\n                    const isChromeLatest = browser.chrome && Number(browser.version ?? 0) >= 91;\r\n                    const allowedTopOffset = browser.mozilla || isChromeLatest ? 1 : 0;\r\n                    if (top && top > allowedTopOffset) {\r\n                        top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));\r\n                        scrollable.scrollTo({\r\n                            y: top\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    initVirtualRows() {\r\n        const virtualRowsRendering = gridCoreUtils.isVirtualRowRendering(this);\r\n        this._allItems = null;\r\n        this._loadViewportParams = null;\r\n        if (\"virtual\" !== this.option(\"scrolling.mode\") && !virtualRowsRendering || !virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option(\"scrolling.rowPageSize\")) {\r\n            this._visibleItems = null;\r\n            this._rowsScrollController = null;\r\n            return\r\n        }\r\n        const pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\r\n        this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\r\n        this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];\r\n        this._viewportChanging = false;\r\n        this._needUpdateViewportAfterLoading = false;\r\n        if (!this._rowsScrollController) {\r\n            this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\r\n            this._rowsScrollController.positionChanged.add((() => {\r\n                var _this$_dataSource2;\r\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    this._viewportChanging = true;\r\n                    this.loadViewport();\r\n                    this._viewportChanging = false;\r\n                    return\r\n                }\r\n                null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 || _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex())\r\n            }))\r\n        }\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            this._updateLoadViewportParams()\r\n        }\r\n        if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n            this._rowsScrollController.load()\r\n        }\r\n    }\r\n    isViewportChanging() {\r\n        return this._viewportChanging\r\n    }\r\n    _getRowsScrollDataOptions() {\r\n        const that = this;\r\n        const isItemCountable = function(item) {\r\n            return isItemCountableByDataSource(item, that._dataSource)\r\n        };\r\n        return {\r\n            pageSize: () => that.getRowPageSize(),\r\n            loadedOffset() {\r\n                var _that$_dataSource;\r\n                return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0\r\n            },\r\n            loadedItemCount: () => that._itemCount,\r\n            totalItemsCount() {\r\n                if (isVirtualPaging(that)) {\r\n                    return that.totalItemsCount()\r\n                }\r\n                return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length\r\n            },\r\n            hasKnownLastPage: () => false === that.option(LEGACY_SCROLLING_MODE) ? that.hasKnownLastPage() : true,\r\n            pageIndex(index) {\r\n                if (void 0 !== index) {\r\n                    that._rowPageIndex = index\r\n                }\r\n                return that._rowPageIndex\r\n            },\r\n            isLoading: () => that.isLoading(),\r\n            pageCount() {\r\n                const pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\r\n                return pageCount || 1\r\n            },\r\n            load() {\r\n                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\r\n                    that._rowPageIndex = this.pageCount() - 1;\r\n                    that._rowsScrollController.pageIndex(that._rowPageIndex)\r\n                }\r\n                if (!this.items().length && this.totalItemsCount()) {\r\n                    return\r\n                }\r\n                that._rowsScrollController.handleDataChanged((change => {\r\n                    change = change || {};\r\n                    change.changeType = change.changeType || \"refresh\";\r\n                    change.items = change.items || that._visibleItems;\r\n                    that._visibleItems.forEach(((item, index) => {\r\n                        item.rowIndex = index\r\n                    }));\r\n                    that._fireChanged(change)\r\n                }))\r\n            },\r\n            updateLoading() {},\r\n            itemsCount() {\r\n                return this.items(true).length\r\n            },\r\n            correctCount: (items, count, fromEnd) => correctCount(items, count, fromEnd, ((item, isNextAfterLast, fromEnd) => {\r\n                if (item.isNewRow) {\r\n                    return isNextAfterLast && !fromEnd\r\n                }\r\n                if (isNextAfterLast && fromEnd) {\r\n                    return !item.isNewRow\r\n                }\r\n                return isItemCountable(item)\r\n            })),\r\n            items(countableOnly) {\r\n                let result = that._items;\r\n                if (that.option(LEGACY_SCROLLING_MODE)) {\r\n                    const dataSource = that.dataSource();\r\n                    const virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();\r\n                    const begin = virtualItemsCount ? virtualItemsCount.begin : 0;\r\n                    const rowPageSize = that.getRowPageSize();\r\n                    let skip = that._rowPageIndex * rowPageSize - begin;\r\n                    let take = rowPageSize;\r\n                    if (skip < 0) {\r\n                        return []\r\n                    }\r\n                    if (skip) {\r\n                        skip = this.correctCount(result, skip);\r\n                        result = result.slice(skip)\r\n                    }\r\n                    if (take) {\r\n                        take = this.correctCount(result, take);\r\n                        result = result.slice(0, take)\r\n                    }\r\n                }\r\n                return countableOnly ? result.filter(isItemCountable) : result\r\n            },\r\n            viewportItems(items) {\r\n                if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {\r\n                    that._visibleItems = items\r\n                }\r\n                return that._visibleItems\r\n            },\r\n            onChanged() {},\r\n            changingDuration() {\r\n                const dataSource = that.dataSource();\r\n                if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {\r\n                    return 300\r\n                }\r\n                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0\r\n            }\r\n        }\r\n    }\r\n    _updateItemsCore(change) {\r\n        const delta = this.getRowIndexDelta();\r\n        super._updateItemsCore.apply(this, arguments);\r\n        if (false === this.option(LEGACY_SCROLLING_MODE) && gridCoreUtils.isVirtualRowRendering(this)) {\r\n            if (\"update\" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {\r\n                change.cancel = true\r\n            }\r\n            return\r\n        }\r\n        const rowsScrollController = this._rowsScrollController;\r\n        if (rowsScrollController) {\r\n            const visibleItems = this._visibleItems;\r\n            const isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\r\n            if (\"append\" === change.changeType && change.items && !change.items.length) {\r\n                return\r\n            }\r\n            if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\r\n                change.cancel = true;\r\n                isRefresh && rowsScrollController.reset(true);\r\n                rowsScrollController.load()\r\n            } else {\r\n                if (\"update\" === change.changeType) {\r\n                    change.rowIndices.forEach(((rowIndex, index) => {\r\n                        const changeType = change.changeTypes[index];\r\n                        const newItem = change.items[index];\r\n                        if (\"update\" === changeType) {\r\n                            visibleItems[rowIndex] = newItem\r\n                        } else if (\"insert\" === changeType) {\r\n                            visibleItems.splice(rowIndex, 0, newItem)\r\n                        } else if (\"remove\" === changeType) {\r\n                            visibleItems.splice(rowIndex, 1)\r\n                        }\r\n                    }))\r\n                } else {\r\n                    visibleItems.forEach(((item, index) => {\r\n                        visibleItems[index] = this._items[index + delta] || visibleItems[index]\r\n                    }));\r\n                    change.items = visibleItems\r\n                }\r\n                updateItemIndices(visibleItems)\r\n            }\r\n        }\r\n    }\r\n    _updateLoadViewportParams() {\r\n        const viewportParams = this._rowsScrollController.getViewportParams();\r\n        const pageSize = this.pageSize();\r\n        if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {\r\n            const pageOffset = this.pageIndex() * pageSize;\r\n            viewportParams.skip += pageOffset\r\n        }\r\n        this._loadViewportParams = viewportParams\r\n    }\r\n    _processItems() {\r\n        const resultItems = super._processItems.apply(this, arguments);\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            const dataSource = this._dataSource;\r\n            let currentIndex = (null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) ?? 0;\r\n            let prevCountable;\r\n            let prevRowType;\r\n            let isPrevRowNew;\r\n            let wasCountableItem = false;\r\n            let newRows = [];\r\n            resultItems.forEach((item => {\r\n                const {\r\n                    rowType: rowType\r\n                } = item;\r\n                const itemCountable = isItemCountableByDataSource(item, dataSource);\r\n                const isNextGroupItem = \"group\" === rowType && (prevCountable || itemCountable || \"group\" !== prevRowType && currentIndex > 0);\r\n                const isNextDataItem = \"data\" === rowType && itemCountable && (prevCountable || \"group\" !== prevRowType);\r\n                if (!item.isNewRow && isDefined(prevCountable)) {\r\n                    const isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;\r\n                    if ((isNextGroupItem || isNextDataItem) && !isPrevNewRowFirst) {\r\n                        currentIndex++\r\n                    }\r\n                }\r\n                if (isNextGroupItem || isNextDataItem) {\r\n                    wasCountableItem = true\r\n                }\r\n                if (item.isNewRow) {\r\n                    newRows.push(item)\r\n                } else {\r\n                    newRows.forEach((it => {\r\n                        it.loadIndex = currentIndex\r\n                    }));\r\n                    newRows = []\r\n                }\r\n                item.loadIndex = currentIndex;\r\n                prevCountable = itemCountable;\r\n                prevRowType = rowType;\r\n                isPrevRowNew = item.isNewRow\r\n            }));\r\n            newRows.forEach((it => {\r\n                it.loadIndex = currentIndex\r\n            }))\r\n        }\r\n        return resultItems\r\n    }\r\n    _afterProcessItems(items) {\r\n        this._itemCount = items.filter((item => isItemCountableByDataSource(item, this._dataSource))).length;\r\n        if (isDefined(this._loadViewportParams)) {\r\n            this._updateLoadViewportParams();\r\n            let result = items;\r\n            this._allItems = items;\r\n            if (items.length) {\r\n                const {\r\n                    skipForCurrentPage: skipForCurrentPage\r\n                } = this.getLoadPageParams(true);\r\n                const skip = items[0].loadIndex + skipForCurrentPage;\r\n                const {\r\n                    take: take\r\n                } = this._loadViewportParams;\r\n                result = items.filter((it => {\r\n                    const isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;\r\n                    const isLoadIndexGreaterStart = it.loadIndex >= skip;\r\n                    const isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;\r\n                    return isLoadIndexGreaterStart && isLoadIndexLessEnd\r\n                }))\r\n            }\r\n            return result\r\n        }\r\n        return super._afterProcessItems.apply(this, arguments)\r\n    }\r\n    _applyChange(change) {\r\n        const that = this;\r\n        const {\r\n            items: items\r\n        } = change;\r\n        const {\r\n            changeType: changeType\r\n        } = change;\r\n        let {\r\n            removeCount: removeCount\r\n        } = change;\r\n        if (removeCount) {\r\n            const fromEnd = \"prepend\" === changeType;\r\n            removeCount = correctCount(that._items, removeCount, fromEnd, ((item, isNextAfterLast) => \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast)));\r\n            change.removeCount = removeCount\r\n        }\r\n        switch (changeType) {\r\n            case \"prepend\":\r\n                that._items.unshift.apply(that._items, items);\r\n                if (removeCount) {\r\n                    that._items.splice(-removeCount)\r\n                }\r\n                break;\r\n            case \"append\":\r\n                that._items.push.apply(that._items, items);\r\n                if (removeCount) {\r\n                    that._items.splice(0, removeCount)\r\n                }\r\n                break;\r\n            default:\r\n                super._applyChange(change)\r\n        }\r\n    }\r\n    items(allItems) {\r\n        return allItems ? this._allItems || this._items : this._visibleItems || this._items\r\n    }\r\n    getRowIndexDelta() {\r\n        let delta = 0;\r\n        if (this.option(LEGACY_SCROLLING_MODE)) {\r\n            const visibleItems = this._visibleItems;\r\n            if (visibleItems && visibleItems[0]) {\r\n                delta = this._items.indexOf(visibleItems[0])\r\n            }\r\n        }\r\n        return delta < 0 ? 0 : delta\r\n    }\r\n    getRowIndexOffset(byLoadedRows, needGroupOffset) {\r\n        let offset = 0;\r\n        const dataSource = this.dataSource();\r\n        const rowsScrollController = this._rowsScrollController;\r\n        const newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n        const virtualPaging = isVirtualPaging(this);\r\n        if (rowsScrollController && !byLoadedRows) {\r\n            if (newMode && isDefined(this._loadViewportParams)) {\r\n                const {\r\n                    skipForCurrentPage: skipForCurrentPage,\r\n                    pageIndex: pageIndex\r\n                } = this.getLoadPageParams(true);\r\n                const items = this.items(true);\r\n                offset = virtualPaging ? pageIndex * this.pageSize() : 0;\r\n                if (items.length) {\r\n                    const firstLoadIndex = items[0].loadIndex;\r\n                    offset += items.filter((item => item.loadIndex < firstLoadIndex + skipForCurrentPage)).length\r\n                }\r\n            } else {\r\n                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize()\r\n            }\r\n        } else if (virtualPaging && newMode && dataSource) {\r\n            var _lastLoadOptions$skip;\r\n            const lastLoadOptions = dataSource.lastLoadOptions();\r\n            if (needGroupOffset && null !== (_lastLoadOptions$skip = lastLoadOptions.skips) && void 0 !== _lastLoadOptions$skip && _lastLoadOptions$skip.length) {\r\n                offset = lastLoadOptions.skips.reduce(((res, skip) => res + skip), 0)\r\n            } else {\r\n                offset = lastLoadOptions.skip ?? 0\r\n            }\r\n        } else if (isVirtualMode(this) && dataSource) {\r\n            offset = dataSource.beginPageIndex() * dataSource.pageSize()\r\n        }\r\n        return offset\r\n    }\r\n    getDataIndex() {\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            return this.getRowIndexOffset(true, true)\r\n        }\r\n        return super.getDataIndex.apply(this, arguments)\r\n    }\r\n    viewportSize() {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        const dataSource = this._dataSource;\r\n        const result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            return result\r\n        }\r\n        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments)\r\n    }\r\n    viewportHeight(height, scrollTop) {\r\n        var _this$_rowsScrollCont;\r\n        null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont || _this$_rowsScrollCont.viewportHeight(height, scrollTop)\r\n    }\r\n    viewportItemSize() {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        const dataSource = this._dataSource;\r\n        const result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            return result\r\n        }\r\n        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments)\r\n    }\r\n    setViewportPosition() {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        const dataSource = this._dataSource;\r\n        this._isPaging = false;\r\n        if (rowsScrollController) {\r\n            rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments)\r\n        } else {\r\n            null === dataSource || void 0 === dataSource || dataSource.setViewportPosition.apply(dataSource, arguments)\r\n        }\r\n    }\r\n    setContentItemSizes(sizes) {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        const dataSource = this._dataSource;\r\n        const result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            return result\r\n        }\r\n        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes)\r\n    }\r\n    getPreloadedRowCount() {\r\n        const preloadCount = this.option(\"scrolling.preloadedRowCount\");\r\n        const preloadEnabled = this.option(\"scrolling.preloadEnabled\");\r\n        if (isDefined(preloadCount)) {\r\n            return preloadCount\r\n        }\r\n        const viewportSize = this.viewportSize();\r\n        return preloadEnabled ? 2 * viewportSize : viewportSize\r\n    }\r\n    getLoadPageParams(byLoadedPage) {\r\n        var _this$_dataSource3, _this$_dataSource4;\r\n        const pageSize = this.pageSize();\r\n        const viewportParams = this._loadViewportParams;\r\n        const lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();\r\n        const loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;\r\n        const loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;\r\n        const isScrollingBack = this._rowsScrollController.isScrollingBack();\r\n        const topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;\r\n        const bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();\r\n        const totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;\r\n        const skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);\r\n        const pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);\r\n        const pageOffset = pageIndex * pageSize;\r\n        const skipForCurrentPage = viewportParams.skip - pageOffset;\r\n        const loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;\r\n        const take = byLoadedPage ? loadedTake : loadingTake;\r\n        const loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);\r\n        return {\r\n            pageIndex: pageIndex,\r\n            loadPageCount: Math.max(1, loadPageCount),\r\n            skipForCurrentPage: Math.max(0, skipForCurrentPage)\r\n        }\r\n    }\r\n    _updateVisiblePageIndex(currentPageIndex) {\r\n        if (!this._rowsScrollController) {\r\n            return\r\n        }\r\n        if (isDefined(currentPageIndex)) {\r\n            this._silentOption(\"paging.pageIndex\", currentPageIndex);\r\n            this.pageChanged.fire();\r\n            return\r\n        }\r\n        const viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();\r\n        const newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());\r\n        if (this.pageIndex() !== newPageIndex) {\r\n            this._silentOption(\"paging.pageIndex\", newPageIndex);\r\n            this.updateItems({\r\n                changeType: \"pageIndex\"\r\n            })\r\n        }\r\n    }\r\n    _getChangedLoadParams() {\r\n        const loadedPageParams = this.getLoadPageParams(true);\r\n        const {\r\n            pageIndex: pageIndex,\r\n            loadPageCount: loadPageCount\r\n        } = this.getLoadPageParams();\r\n        const pageIndexIsValid = this._pageIndexIsValid(pageIndex);\r\n        let result = null;\r\n        if (!this._isLoading && pageIndexIsValid && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {\r\n            result = {\r\n                pageIndex: pageIndex,\r\n                loadPageCount: loadPageCount\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _pageIndexIsValid(pageIndex) {\r\n        let result = true;\r\n        if (isAppendMode(this) && this.hasKnownLastPage() || isVirtualMode(this)) {\r\n            result = pageIndex * this.pageSize() < this.totalItemsCount()\r\n        }\r\n        return result\r\n    }\r\n    _loadItems(checkLoading, viewportIsFilled) {\r\n        const virtualPaging = isVirtualPaging(this);\r\n        const dataSourceAdapter = this._dataSource;\r\n        const changedParams = this._getChangedLoadParams();\r\n        const currentLoadPageCount = (null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) ?? 0;\r\n        const lastRequiredItemCount = this.pageSize() * currentLoadPageCount;\r\n        const currentPageIndex = (null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) ?? 0;\r\n        const pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;\r\n        const allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;\r\n        const isRepaintMode = \"repaint\" === this.option(\"editing.refreshMode\");\r\n        const pageIndexIncreased = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex;\r\n        let result = false;\r\n        if (!dataSourceAdapter || virtualPaging && checkLoading && (isRepaintMode && viewportIsFilled || pageIndexIncreased || pageIndexNotChanged && allLoadedInAppendMode)) {\r\n            return result\r\n        }\r\n        if (virtualPaging && this._isLoading) {\r\n            this._needUpdateViewportAfterLoading = true\r\n        }\r\n        if (virtualPaging && changedParams) {\r\n            result = true;\r\n            dataSourceAdapter.pageIndex(changedParams.pageIndex);\r\n            dataSourceAdapter.loadPageCount(changedParams.loadPageCount);\r\n            this._repaintChangesOnly = true;\r\n            this._needUpdateDimensions = true;\r\n            const viewportChanging = this._viewportChanging;\r\n            this.load().always((() => {\r\n                this._repaintChangesOnly = void 0;\r\n                this._needUpdateDimensions = void 0\r\n            })).done((() => {\r\n                const isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;\r\n                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();\r\n                if (this._needUpdateViewportAfterLoading) {\r\n                    this._needUpdateViewportAfterLoading = false;\r\n                    this.loadViewport({\r\n                        checkLoadedParamsOnly: true\r\n                    })\r\n                }\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    loadViewport(params) {\r\n        const {\r\n            checkLoadedParamsOnly: checkLoadedParamsOnly,\r\n            checkLoading: checkLoading,\r\n            viewportIsNotFilled: viewportIsNotFilled\r\n        } = params ?? {};\r\n        const virtualPaging = isVirtualPaging(this);\r\n        if (virtualPaging || gridCoreUtils.isVirtualRowRendering(this)) {\r\n            var _this$_dataSource5;\r\n            this._updateLoadViewportParams();\r\n            const loadingItemsStarted = this._loadItems(checkLoading, !viewportIsNotFilled);\r\n            const isCustomLoading = null === (_this$_dataSource5 = this._dataSource) || void 0 === _this$_dataSource5 ? void 0 : _this$_dataSource5.isCustomLoading();\r\n            const isLoading = checkLoading && !isCustomLoading && this._isLoading;\r\n            const needToUpdateItems = !(loadingItemsStarted || isLoading || checkLoadedParamsOnly);\r\n            if (needToUpdateItems) {\r\n                var _this$_editingControl;\r\n                const noPendingChangesInEditing = !(null !== (_this$_editingControl = this._editingController) && void 0 !== _this$_editingControl && null !== (_this$_editingControl = _this$_editingControl.getChanges()) && void 0 !== _this$_editingControl && _this$_editingControl.length);\r\n                this.updateItems({\r\n                    repaintChangesOnly: true,\r\n                    needUpdateDimensions: true,\r\n                    useProcessedItemsCache: noPendingChangesInEditing,\r\n                    cancelEmptyChanges: true\r\n                })\r\n            }\r\n        }\r\n    }\r\n    updateViewport() {\r\n        var _this$_loadViewportPa;\r\n        const viewportSize = this.viewportSize();\r\n        const itemCount = this.items().length;\r\n        const viewportIsNotFilled = viewportSize > itemCount;\r\n        const currentTake = (null === (_this$_loadViewportPa = this._loadViewportParams) || void 0 === _this$_loadViewportPa ? void 0 : _this$_loadViewportPa.take) ?? 0;\r\n        const rowsScrollController = this._rowsScrollController;\r\n        const newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;\r\n        (viewportIsNotFilled || currentTake < newTake) && !this._isPaging && itemCount && this.loadViewport({\r\n            checkLoading: true,\r\n            viewportIsNotFilled: viewportIsNotFilled\r\n        })\r\n    }\r\n    loadIfNeed() {\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            return\r\n        }\r\n        const rowsScrollController = this._rowsScrollController;\r\n        rowsScrollController && rowsScrollController.loadIfNeed();\r\n        const dataSource = this._dataSource;\r\n        return dataSource && dataSource.loadIfNeed()\r\n    }\r\n    getItemSize() {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        if (rowsScrollController) {\r\n            return rowsScrollController.getItemSize.apply(rowsScrollController, arguments)\r\n        }\r\n        const dataSource = this._dataSource;\r\n        return dataSource && dataSource.getItemSize.apply(dataSource, arguments)\r\n    }\r\n    getItemSizes() {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        if (rowsScrollController) {\r\n            return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments)\r\n        }\r\n        const dataSource = this._dataSource;\r\n        return dataSource && dataSource.getItemSizes.apply(dataSource, arguments)\r\n    }\r\n    getContentOffset() {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        if (rowsScrollController) {\r\n            return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments)\r\n        }\r\n        const dataSource = this._dataSource;\r\n        return dataSource && dataSource.getContentOffset.apply(dataSource, arguments)\r\n    }\r\n    refresh(options) {\r\n        const dataSource = this._dataSource;\r\n        if (dataSource && options && options.load && isAppendMode(this)) {\r\n            dataSource.resetCurrentTotalCount()\r\n        }\r\n        return super.refresh.apply(this, arguments)\r\n    }\r\n    topItemIndex() {\r\n        var _this$_loadViewportPa2;\r\n        return null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.skip\r\n    }\r\n    bottomItemIndex() {\r\n        const viewportParams = this._loadViewportParams;\r\n        return viewportParams && viewportParams.skip + viewportParams.take\r\n    }\r\n    virtualItemsCount() {\r\n        const rowsScrollController = this._rowsScrollController;\r\n        if (rowsScrollController) {\r\n            return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments)\r\n        }\r\n        const dataSource = this._dataSource;\r\n        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments)\r\n    }\r\n    pageIndex(pageIndex) {\r\n        const virtualPaging = isVirtualPaging(this);\r\n        const rowsScrollController = this._rowsScrollController;\r\n        if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {\r\n            if (void 0 === pageIndex) {\r\n                return this.option(\"paging.pageIndex\") ?? 0\r\n            }\r\n        }\r\n        return super.pageIndex.apply(this, arguments)\r\n    }\r\n    _fireChanged(e) {\r\n        super._fireChanged.apply(this, arguments);\r\n        const {\r\n            operationTypes: operationTypes\r\n        } = e;\r\n        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {\r\n            const {\r\n                fullReload: fullReload,\r\n                pageIndex: pageIndex\r\n            } = operationTypes;\r\n            if (e.isDataChanged && !fullReload && pageIndex) {\r\n                this._updateVisiblePageIndex(this._dataSource.pageIndex())\r\n            }\r\n        }\r\n    }\r\n    _getPagingOptionValue(optionName) {\r\n        let result = super._getPagingOptionValue.apply(this, arguments);\r\n        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\r\n            result = this[optionName]()\r\n        }\r\n        return result\r\n    }\r\n    isEmpty() {\r\n        return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : super.isEmpty.apply(this, arguments)\r\n    }\r\n    isLastPageLoaded() {\r\n        let result = false;\r\n        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\r\n            const {\r\n                pageIndex: pageIndex,\r\n                loadPageCount: loadPageCount\r\n            } = this.getLoadPageParams(true);\r\n            const pageCount = this.pageCount();\r\n            result = pageIndex + loadPageCount >= pageCount\r\n        } else {\r\n            result = super.isLastPageLoaded.apply(this, arguments)\r\n        }\r\n        return result\r\n    }\r\n    reset() {\r\n        this._itemCount = 0;\r\n        this._allItems = null;\r\n        super.reset.apply(this, arguments)\r\n    }\r\n    _applyFilter() {\r\n        var _this$_dataSource6;\r\n        null === (_this$_dataSource6 = this._dataSource) || void 0 === _this$_dataSource6 || _this$_dataSource6.loadPageCount(1);\r\n        return super._applyFilter.apply(this, arguments)\r\n    }\r\n    getVirtualContentSize() {\r\n        var _this$_dataSource7;\r\n        return null === (_this$_dataSource7 = this._dataSource) || void 0 === _this$_dataSource7 ? void 0 : _this$_dataSource7.getVirtualContentSize.apply(this._dataSource, arguments)\r\n    }\r\n    setViewportItemIndex() {\r\n        var _this$_dataSource8;\r\n        return null === (_this$_dataSource8 = this._dataSource) || void 0 === _this$_dataSource8 ? void 0 : _this$_dataSource8.setViewportItemIndex.apply(this._dataSource, arguments)\r\n    }\r\n};\r\nexport const resizing = Base => class extends Base {\r\n    dispose() {\r\n        super.dispose.apply(this, arguments);\r\n        clearTimeout(this._resizeTimeout)\r\n    }\r\n    _updateMasterDataGridCore(masterDataGrid) {\r\n        return when(super._updateMasterDataGridCore.apply(this, arguments)).done((masterDataGridUpdated => {\r\n            const isNewVirtualMode = isVirtualMode(masterDataGrid) && false === masterDataGrid.option(LEGACY_SCROLLING_MODE);\r\n            if (!masterDataGridUpdated && isNewVirtualMode) {\r\n                const scrollable = masterDataGrid.getScrollable();\r\n                if (scrollable) {\r\n                    masterDataGrid.updateDimensions()\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    hasResizeTimeout() {\r\n        return isDefined(this._resizeTimeout)\r\n    }\r\n    resize() {\r\n        let result;\r\n        if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n            clearTimeout(this._resizeTimeout);\r\n            this._resizeTimeout = null;\r\n            const diff = new Date - this._lastTime;\r\n            const updateTimeout = this.option(\"scrolling.updateTimeout\");\r\n            if (this._lastTime && diff < updateTimeout) {\r\n                result = new Deferred;\r\n                this._resizeTimeout = setTimeout((() => {\r\n                    this._resizeTimeout = null;\r\n                    super.resize.apply(this).done(result.resolve).fail(result.reject);\r\n                    this._lastTime = new Date\r\n                }), updateTimeout);\r\n                this._lastTime = new Date\r\n            } else {\r\n                result = super.resize.apply(this);\r\n                if (this._dataController.isLoaded()) {\r\n                    this._lastTime = new Date\r\n                }\r\n            }\r\n        } else {\r\n            result = super.resize.apply(this)\r\n        }\r\n        return result\r\n    }\r\n};\r\nexport const rowsView = Base => class extends Base {\r\n    init() {\r\n        var _this$_dataController;\r\n        super.init();\r\n        this._dataController.pageChanged.add((pageIndex => {\r\n            const scrollTop = this._scrollTop;\r\n            this.scrollToPage(pageIndex ?? this._dataController.pageIndex());\r\n            if (false === this.option(LEGACY_SCROLLING_MODE) && this._scrollTop === scrollTop) {\r\n                this._dataController.updateViewport()\r\n            }\r\n        }));\r\n        this._dataController.dataSourceChanged.add((() => {\r\n            !this._scrollTop && this._scrollToCurrentPageOnResize()\r\n        }));\r\n        null === (_this$_dataController = this._dataController.stateLoaded) || void 0 === _this$_dataController || _this$_dataController.add((() => {\r\n            this._scrollToCurrentPageOnResize()\r\n        }));\r\n        this._scrollToCurrentPageOnResize()\r\n    }\r\n    dispose() {\r\n        clearTimeout(this._scrollTimeoutID);\r\n        super.dispose()\r\n    }\r\n    _scrollToCurrentPageOnResize() {\r\n        if (this._dataController.pageIndex() > 0) {\r\n            const resizeHandler = () => {\r\n                this.resizeCompleted.remove(resizeHandler);\r\n                this.scrollToPage(this._dataController.pageIndex())\r\n            };\r\n            this.resizeCompleted.add(resizeHandler)\r\n        }\r\n    }\r\n    scrollToPage(pageIndex) {\r\n        const pageSize = this._dataController ? this._dataController.pageSize() : 0;\r\n        let scrollPosition;\r\n        if (isVirtualMode(this) || isAppendMode(this)) {\r\n            const itemSize = this._dataController.getItemSize();\r\n            const itemSizes = this._dataController.getItemSizes();\r\n            const itemIndex = pageIndex * pageSize;\r\n            scrollPosition = itemIndex * itemSize;\r\n            for (const index in itemSizes) {\r\n                if (parseInt(index) < itemIndex) {\r\n                    scrollPosition += itemSizes[index] - itemSize\r\n                }\r\n            }\r\n        } else {\r\n            scrollPosition = 0\r\n        }\r\n        this.scrollTo({\r\n            y: scrollPosition,\r\n            x: this._scrollLeft\r\n        })\r\n    }\r\n    renderDelayedTemplates() {\r\n        this.waitAsyncTemplates().done((() => {\r\n            this._updateContentPosition(true)\r\n        }));\r\n        super.renderDelayedTemplates.apply(this, arguments)\r\n    }\r\n    _renderCore(e) {\r\n        const startRenderTime = new Date;\r\n        const deferred = super._renderCore.apply(this, arguments);\r\n        const dataSource = this._dataController._dataSource;\r\n        if (dataSource && e) {\r\n            const itemCount = e.items ? e.items.length : 20;\r\n            const viewportSize = this._dataController.viewportSize() || 20;\r\n            if (gridCoreUtils.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                dataSource._renderTime = (new Date - startRenderTime) * viewportSize / itemCount\r\n            } else {\r\n                dataSource._renderTime = new Date - startRenderTime\r\n            }\r\n        }\r\n        return deferred\r\n    }\r\n    _getRowElements(tableElement) {\r\n        const $rows = super._getRowElements(tableElement);\r\n        return $rows && $rows.not(\".dx-virtual-row\")\r\n    }\r\n    _removeRowsElements(contentTable, removeCount, changeType) {\r\n        let rowElements = this._getRowElements(contentTable).toArray();\r\n        if (\"append\" === changeType) {\r\n            rowElements = rowElements.slice(0, removeCount)\r\n        } else {\r\n            rowElements = rowElements.slice(-removeCount)\r\n        }\r\n        rowElements.map((rowElement => {\r\n            const $rowElement = $(rowElement);\r\n            this._errorHandlingController && this._errorHandlingController.removeErrorRow($rowElement.next());\r\n            $rowElement.remove()\r\n        }))\r\n    }\r\n    _updateContent(tableElement, change) {\r\n        let $freeSpaceRowElements;\r\n        const contentElement = this._findContentElement();\r\n        const changeType = change && change.changeType;\r\n        const d = Deferred();\r\n        const contentTable = contentElement.children().first();\r\n        if (\"append\" === changeType || \"prepend\" === changeType) {\r\n            this.waitAsyncTemplates().done((() => {\r\n                const $tBodies = this._getBodies(tableElement);\r\n                if (1 === $tBodies.length) {\r\n                    this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children())\r\n                } else {\r\n                    $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable)\r\n                }\r\n                tableElement.remove();\r\n                $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\r\n                removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\r\n                if (change.removeCount) {\r\n                    this._removeRowsElements(contentTable, change.removeCount, changeType)\r\n                }\r\n                this._restoreErrorRow(contentTable);\r\n                d.resolve()\r\n            })).fail(d.reject)\r\n        } else {\r\n            super._updateContent.apply(this, arguments).done((() => {\r\n                if (\"update\" === changeType) {\r\n                    this._restoreErrorRow(contentTable)\r\n                }\r\n                d.resolve()\r\n            })).fail(d.reject)\r\n        }\r\n        return d.promise().done((() => {\r\n            this._updateBottomLoading()\r\n        }))\r\n    }\r\n    _addVirtualRow($table, isFixed, location, position) {\r\n        if (!position) {\r\n            return\r\n        }\r\n        let $virtualRow = this._createEmptyRow(\"dx-virtual-row\", isFixed, position);\r\n        $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\r\n        this._appendEmptyRow($table, $virtualRow, location)\r\n    }\r\n    _updateContentItemSizes() {\r\n        const rowHeights = this._getRowHeights();\r\n        const correctedRowHeights = this._correctRowHeights(rowHeights);\r\n        this._dataController.setContentItemSizes(correctedRowHeights)\r\n    }\r\n    _updateViewportSize(viewportHeight, scrollTop) {\r\n        if (!isDefined(viewportHeight)) {\r\n            viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow())\r\n        }\r\n        this._dataController.viewportHeight(viewportHeight, scrollTop)\r\n    }\r\n    _getRowHeights() {\r\n        var _this$_editingControl2, _this$_editingControl3;\r\n        const isPopupEditMode = null === (_this$_editingControl2 = this._editingController) || void 0 === _this$_editingControl2 || null === (_this$_editingControl3 = _this$_editingControl2.isPopupEditMode) || void 0 === _this$_editingControl3 ? void 0 : _this$_editingControl3.call(_this$_editingControl2);\r\n        let rowElements = this._getRowElements(this._tableElement).toArray();\r\n        if (isPopupEditMode) {\r\n            rowElements = rowElements.filter((row => !$(row).hasClass(ROW_INSERTED)))\r\n        }\r\n        return rowElements.map((row => getBoundingRect(row).height))\r\n    }\r\n    _correctRowHeights(rowHeights) {\r\n        const dataController = this._dataController;\r\n        const dataSource = dataController._dataSource;\r\n        const correctedRowHeights = [];\r\n        const visibleRows = dataController.getVisibleRows();\r\n        let itemSize = 0;\r\n        let firstCountableItem = true;\r\n        let lastLoadIndex = -1;\r\n        for (let i = 0; i < rowHeights.length; i++) {\r\n            const currentItem = visibleRows[i];\r\n            if (!isDefined(currentItem)) {\r\n                continue\r\n            }\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {\r\n                    correctedRowHeights.push(itemSize);\r\n                    itemSize = 0\r\n                }\r\n                lastLoadIndex = currentItem.loadIndex\r\n            } else if (isItemCountableByDataSource(currentItem, dataSource)) {\r\n                if (firstCountableItem) {\r\n                    firstCountableItem = false\r\n                } else {\r\n                    correctedRowHeights.push(itemSize);\r\n                    itemSize = 0\r\n                }\r\n            }\r\n            itemSize += rowHeights[i]\r\n        }\r\n        itemSize > 0 && correctedRowHeights.push(itemSize);\r\n        return correctedRowHeights\r\n    }\r\n    _updateContentPosition(isRender) {\r\n        const rowHeight = this._rowHeight || 20;\r\n        this._dataController.viewportItemSize(rowHeight);\r\n        if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n            const isEmptyRows = this._dataController.isEmpty();\r\n            if (isEmptyRows) {\r\n                return\r\n            }\r\n            if (!isRender) {\r\n                this._updateContentItemSizes()\r\n            }\r\n            const top = this._dataController.getContentOffset(\"begin\");\r\n            const bottom = this._dataController.getContentOffset(\"end\");\r\n            const $tables = this.getTableElements();\r\n            const $virtualRows = $tables.children(\"tbody\").children(\".dx-virtual-row\");\r\n            removeEmptyRows($virtualRows, \"dx-virtual-row\");\r\n            $tables.each(((index, element) => {\r\n                const isFixed = index > 0;\r\n                const prevFixed = this._isFixedTableRendering;\r\n                this._isFixedTableRendering = isFixed;\r\n                this._addVirtualRow($(element), isFixed, \"top\", top);\r\n                this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\r\n                this._isFixedTableRendering = prevFixed\r\n            }))\r\n        }\r\n    }\r\n    _isTableLinesDisplaysCorrect(table) {\r\n        const hasColumnLines = table.find(\".dx-column-lines\").length > 0;\r\n        return hasColumnLines === this.option(\"showColumnLines\")\r\n    }\r\n    _isColumnElementsEqual($columns, $virtualColumns) {\r\n        let result = $columns.length === $virtualColumns.length;\r\n        if (result) {\r\n            each($columns, ((index, element) => {\r\n                if (element.style.width !== $virtualColumns[index].style.width) {\r\n                    result = false;\r\n                    return result\r\n                }\r\n                return\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    _getCellClasses(column) {\r\n        const classes = [];\r\n        const {\r\n            cssClass: cssClass\r\n        } = column;\r\n        const isExpandColumn = \"expand\" === column.command;\r\n        cssClass && classes.push(cssClass);\r\n        isExpandColumn && classes.push(this.addWidgetPrefix(\"group-space\"));\r\n        return classes\r\n    }\r\n    _findBottomLoadPanel($contentElement) {\r\n        const $element = $contentElement || this.element();\r\n        const $bottomLoadPanel = $element && $element.find(`.${this.addWidgetPrefix(\"bottom-load-panel\")}`);\r\n        if ($bottomLoadPanel && $bottomLoadPanel.length) {\r\n            return $bottomLoadPanel\r\n        }\r\n    }\r\n    _updateBottomLoading() {\r\n        const that = this;\r\n        const virtualMode = isVirtualMode(this);\r\n        const appendMode = isAppendMode(this);\r\n        const showBottomLoading = !that._dataController.hasKnownLastPage() && that._dataController.isLoaded() && (virtualMode || appendMode);\r\n        const $contentElement = that._findContentElement();\r\n        const bottomLoadPanelElement = that._findBottomLoadPanel($contentElement);\r\n        if (showBottomLoading) {\r\n            if (!bottomLoadPanelElement) {\r\n                $(\"<div>\").addClass(that.addWidgetPrefix(\"bottom-load-panel\")).append(that._createComponent($(\"<div>\"), LoadIndicator, {\r\n                    elementAttr: {\r\n                        role: null,\r\n                        \"aria-label\": null\r\n                    }\r\n                }).$element()).appendTo($contentElement)\r\n            }\r\n        } else if (bottomLoadPanelElement) {\r\n            bottomLoadPanelElement.remove()\r\n        }\r\n    }\r\n    _handleScroll(e) {\r\n        const legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);\r\n        const zeroTopPosition = 0 === e.scrollOffset.top;\r\n        const isScrollTopChanged = this._scrollTop !== e.scrollOffset.top;\r\n        const hasScrolled = isScrollTopChanged || e.forceUpdateScrollPosition;\r\n        const isValidScrollTarget = this._hasHeight || !legacyScrollingMode && zeroTopPosition;\r\n        if (hasScrolled && isValidScrollTarget && this._rowHeight) {\r\n            this._scrollTop = e.scrollOffset.top;\r\n            const isVirtualRowRendering = isVirtualMode(this) || \"standard\" !== this.option(\"scrolling.rowRenderingMode\");\r\n            if (isVirtualRowRendering && false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                this._updateContentItemSizes();\r\n                this._updateViewportSize(null, this._scrollTop)\r\n            }\r\n            this._dataController.setViewportPosition(e.scrollOffset.top)\r\n        }\r\n        super._handleScroll.apply(this, arguments)\r\n    }\r\n    _needUpdateRowHeight(itemsCount) {\r\n        return super._needUpdateRowHeight.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !gridCoreUtils.isVirtualRowRendering(this)\r\n    }\r\n    _updateRowHeight() {\r\n        super._updateRowHeight.apply(this, arguments);\r\n        if (this._rowHeight) {\r\n            this._updateContentPosition();\r\n            const viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                this._updateViewportSize(viewportHeight);\r\n                this._dataController.updateViewport()\r\n            } else {\r\n                this._dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight))\r\n            }\r\n        }\r\n    }\r\n    updateFreeSpaceRowHeight() {\r\n        const result = super.updateFreeSpaceRowHeight.apply(this, arguments);\r\n        if (result) {\r\n            this._updateContentPosition()\r\n        }\r\n        return result\r\n    }\r\n    setLoading(isLoading, messageText) {\r\n        const dataController = this._dataController;\r\n        const hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\r\n        if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\r\n            return\r\n        }\r\n        if (hasBottomLoadPanel) {\r\n            isLoading = false\r\n        }\r\n        super.setLoading.call(this, isLoading, messageText)\r\n    }\r\n    isGridDragging() {\r\n        return this.component.option(\"isDragging\")\r\n    }\r\n    throwHeightWarningIfNeed() {\r\n        const isGridDragging = this.isGridDragging();\r\n        if (void 0 === this._hasHeight || isGridDragging) {\r\n            return\r\n        }\r\n        const needToThrow = !this._hasHeight && isVirtualPaging(this);\r\n        if (needToThrow && !this._heightWarningIsThrown) {\r\n            this._heightWarningIsThrown = true;\r\n            errors.log(\"W1025\")\r\n        }\r\n    }\r\n    _resizeCore() {\r\n        const that = this;\r\n        const $element = that.element();\r\n        super._resizeCore();\r\n        this.throwHeightWarningIfNeed();\r\n        if (that.component.$element() && !that._windowScroll && isElementInDom($element)) {\r\n            that._windowScroll = subscribeToExternalScrollers($element, (scrollPos => {\r\n                if (!that._hasHeight && that._rowHeight) {\r\n                    that._dataController.setViewportPosition(scrollPos)\r\n                }\r\n            }), that.component.$element());\r\n            that.on(\"disposing\", (() => {\r\n                that._windowScroll.dispose()\r\n            }))\r\n        }\r\n        if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n            that.loadIfNeed()\r\n        }\r\n    }\r\n    loadIfNeed() {\r\n        var _this$_dataController2, _this$_dataController3;\r\n        null === (_this$_dataController2 = this._dataController) || void 0 === _this$_dataController2 || null === (_this$_dataController3 = _this$_dataController2.loadIfNeed) || void 0 === _this$_dataController3 || _this$_dataController3.call(_this$_dataController2)\r\n    }\r\n    _restoreErrorRow(contentTable) {\r\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n            var _this$_errorHandlingC;\r\n            null === (_this$_errorHandlingC = this._errorHandlingController) || void 0 === _this$_errorHandlingC || _this$_errorHandlingC.removeErrorRow()\r\n        }\r\n        super._restoreErrorRow.apply(this, arguments)\r\n    }\r\n};\r\nexport const virtualScrollingModule = {\r\n    defaultOptions: () => ({\r\n        scrolling: {\r\n            timeout: 300,\r\n            updateTimeout: 300,\r\n            minTimeout: 0,\r\n            renderingThreshold: 100,\r\n            removeInvisiblePages: true,\r\n            rowPageSize: 5,\r\n            prerenderedRowChunkSize: 1,\r\n            mode: \"standard\",\r\n            preloadEnabled: false,\r\n            rowRenderingMode: \"standard\",\r\n            loadTwoPagesOnStart: false,\r\n            legacyMode: false,\r\n            prerenderedRowCount: 1\r\n        }\r\n    }),\r\n    extenders: {\r\n        controllers: {\r\n            data: data,\r\n            resizing: resizing\r\n        },\r\n        views: {\r\n            rowsView: rowsView\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}