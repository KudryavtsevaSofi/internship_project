{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/data_controller/m_data_controller.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport ArrayStore from \"../../../../common/data/array_store\";\nimport { CustomStore } from \"../../../../common/data/custom_store\";\nimport $ from \"../../../../core/renderer\";\nimport { findChanges } from \"../../../../core/utils/array_compare\";\nimport { deferRender, equalByValue } from \"../../../../core/utils/common\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { isDefined, isObject } from \"../../../../core/utils/type\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nimport { DataHelperMixin } from \"./m_data_helper_mixin\";\nconst changePaging = function (that, optionName, value) {\n  const dataSource = that._dataSource;\n  if (dataSource) {\n    if (void 0 !== value) {\n      const oldValue = that._getPagingOptionValue(optionName);\n      if (oldValue !== value) {\n        if (\"pageSize\" === optionName) {\n          dataSource.pageIndex(0);\n        }\n        dataSource[optionName](value);\n        that._skipProcessingPagingChange = true;\n        that.option(`paging.${optionName}`, value);\n        that._skipProcessingPagingChange = false;\n        const pageIndex = dataSource.pageIndex();\n        that._isPaging = \"pageIndex\" === optionName;\n        return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(() => {\n          that._isPaging = false;\n          that.pageChanged.fire(pageIndex);\n        });\n      }\n      return Deferred().resolve().promise();\n    }\n    return dataSource[optionName]();\n  }\n  if (\"pageIndex\" === optionName && void 0 !== value) {\n    return Deferred().resolve().promise();\n  }\n  return 0;\n};\nexport class DataController extends DataHelperMixin(modules.Controller) {\n  init() {\n    this._items = [];\n    this._cachedProcessedItems = null;\n    this._columnsController = this.getController(\"columns\");\n    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n    this._editingController = this.getController(\"editing\");\n    this._editorFactoryController = this.getController(\"editorFactory\");\n    this._errorHandlingController = this.getController(\"errorHandling\");\n    this._filterSyncController = this.getController(\"filterSync\");\n    this._applyFilterController = this.getController(\"applyFilter\");\n    this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n    this._focusController = this.getController(\"focus\");\n    this._headerFilterController = this.getController(\"headerFilter\");\n    this._selectionController = this.getController(\"selection\");\n    this._stateStoringController = this.getController(\"stateStoring\");\n    this._validatingController = this.getController(\"validating\");\n    this._isPaging = false;\n    this._currentOperationTypes = null;\n    this._dataChangedHandler = e => {\n      this._currentOperationTypes = this._dataSource.operationTypes();\n      this._handleDataChanged(e);\n      this._currentOperationTypes = null;\n    };\n    this._columnsChangedHandler = this._handleColumnsChanged.bind(this);\n    this._loadingChangedHandler = this._handleLoadingChanged.bind(this);\n    this._loadErrorHandler = this._handleLoadError.bind(this);\n    this._customizeStoreLoadOptionsHandler = this._handleCustomizeStoreLoadOptions.bind(this);\n    this._changingHandler = this._handleChanging.bind(this);\n    this._dataPushedHandler = this._handleDataPushed.bind(this);\n    this._columnsController.columnsChanged.add(this._columnsChangedHandler);\n    this._isLoading = false;\n    this._isCustomLoading = false;\n    this._repaintChangesOnly = void 0;\n    this._changes = [];\n    this.createAction(\"onDataErrorOccurred\");\n    this.dataErrorOccurred.add(error => this.executeAction(\"onDataErrorOccurred\", {\n      error: error\n    }));\n    this._refreshDataSource();\n    this.postCtor();\n  }\n  _getPagingOptionValue(optionName) {\n    return this._dataSource[optionName]();\n  }\n  callbackNames() {\n    return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"];\n  }\n  callbackFlags(name) {\n    if (\"dataErrorOccurred\" === name) {\n      return {\n        stopOnFalse: true\n      };\n    }\n    return;\n  }\n  publicMethods() {\n    return [\"_disposeDataSource\", \"beginCustomLoading\", \"byKey\", \"clearFilter\", \"endCustomLoading\", \"filter\", \"getCombinedFilter\", \"getDataByKeys\", \"getDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getVisibleRows\", \"keyOf\", \"pageCount\", \"pageIndex\", \"pageSize\", \"refresh\", \"repaintRows\", \"totalCount\"];\n  }\n  reset() {\n    this._columnsController.reset();\n    this._items = [];\n    this._refreshDataSource();\n  }\n  _handleDataSourceChange(args) {\n    if (args.value === args.previousValue || this.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {\n      const isValueChanged = args.value !== args.previousValue;\n      if (isValueChanged) {\n        const store = this.store();\n        if (store) {\n          store._array = args.value;\n        }\n      }\n      if (this.needToRefreshOnDataSourceChange(args)) {\n        this.refresh(this.option(\"repaintChangesOnly\"));\n      }\n      return true;\n    }\n    return false;\n  }\n  needToRefreshOnDataSourceChange(args) {\n    return true;\n  }\n  optionChanged(args) {\n    const that = this;\n    let dataSource;\n    let changedPagingOptions;\n    function handled() {\n      args.handled = true;\n    }\n    if (\"dataSource\" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {\n      handled();\n      return;\n    }\n    switch (args.name) {\n      case \"cacheEnabled\":\n      case \"repaintChangesOnly\":\n      case \"highlightChanges\":\n      case \"loadingTimeout\":\n        handled();\n        break;\n      case \"remoteOperations\":\n      case \"keyExpr\":\n      case \"dataSource\":\n      case \"scrolling\":\n        handled();\n        that.reset();\n        break;\n      case \"paging\":\n        dataSource = that.dataSource();\n        if (dataSource) {\n          changedPagingOptions = that._setPagingOptions(dataSource);\n          if (changedPagingOptions) {\n            const pageIndex = dataSource.pageIndex();\n            this._isPaging = changedPagingOptions.isPageIndexChanged;\n            dataSource.load().done(() => {\n              this._isPaging = false;\n              that.pageChanged.fire(pageIndex);\n            });\n          }\n        }\n        handled();\n        break;\n      case \"rtlEnabled\":\n        that.reset();\n        break;\n      case \"columns\":\n        dataSource = that.dataSource();\n        if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\n          this._useSortingGroupingFromColumns = true;\n          dataSource.load();\n        }\n        break;\n      default:\n        super.optionChanged(args);\n    }\n  }\n  isReady() {\n    return !this._isLoading;\n  }\n  getDataSource() {\n    return this._dataSource && this._dataSource._dataSource;\n  }\n  getCombinedFilter(returnDataField) {\n    return this.combinedFilter(void 0, returnDataField);\n  }\n  combinedFilter(filter, returnDataField) {\n    if (!this._dataSource) {\n      return filter;\n    }\n    let combined = filter ?? this._dataSource.filter();\n    const isColumnsTypesDefined = this._columnsController.isDataSourceApplied() || this._columnsController.isAllDataTypesDefined();\n    if (isColumnsTypesDefined) {\n      const additionalFilter = this._calculateAdditionalFilter();\n      combined = additionalFilter ? gridCoreUtils.combineFilters([additionalFilter, combined]) : combined;\n    }\n    const isRemoteFiltering = this._dataSource.remoteOperations().filtering || returnDataField;\n    combined = this._columnsController.updateFilter(combined, isRemoteFiltering);\n    return combined;\n  }\n  waitReady() {\n    if (this._updateLockCount) {\n      this._readyDeferred = new Deferred();\n      return this._readyDeferred;\n    }\n    return when();\n  }\n  _endUpdateCore() {\n    const changes = this._changes;\n    if (changes.length) {\n      this._changes = [];\n      const repaintChangesOnly = changes.every(change => change.repaintChangesOnly);\n      this.updateItems(1 === changes.length ? changes[0] : {\n        repaintChangesOnly: repaintChangesOnly\n      });\n    }\n    if (this._readyDeferred) {\n      this._readyDeferred.resolve();\n      this._readyDeferred = null;\n    }\n  }\n  _handleCustomizeStoreLoadOptions(e) {\n    var _storeLoadOptions$fil;\n    const columnsController = this._columnsController;\n    const dataSource = this._dataSource;\n    const {\n      storeLoadOptions: storeLoadOptions\n    } = e;\n    if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\n      return;\n    }\n    storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\n    if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\n      e.data = [];\n      e.extra = e.extra || {};\n      e.extra.totalCount = 0;\n    }\n    if (!columnsController.isDataSourceApplied()) {\n      columnsController.updateColumnDataTypes(dataSource);\n    }\n    this._columnsUpdating = true;\n    columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\n    this._columnsUpdating = false;\n    storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\n    storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\n    dataSource.sort(storeLoadOptions.sort);\n    dataSource.group(storeLoadOptions.group);\n    storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\n    e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping);\n  }\n  _handleColumnsChanged(e) {\n    const that = this;\n    const {\n      changeTypes: changeTypes\n    } = e;\n    const {\n      optionNames: optionNames\n    } = e;\n    let filterValue;\n    let filterValues;\n    let filterApplied;\n    const updateItemsHandler = function (change) {\n      var _change$changeTypes, _change$changeTypes2;\n      that._columnsController.columnsChanged.remove(updateItemsHandler);\n      that.updateItems({\n        repaintChangesOnly: false,\n        event: null === change || void 0 === change || null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes.event,\n        virtualColumnsScrolling: null === change || void 0 === change || null === (_change$changeTypes2 = change.changeTypes) || void 0 === _change$changeTypes2 ? void 0 : _change$changeTypes2.virtualColumnsScrolling\n      });\n    };\n    if (changeTypes.sorting || changeTypes.grouping) {\n      if (that._dataSource && !that._columnsUpdating) {\n        that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\n        that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\n        that.reload();\n      }\n    } else if (changeTypes.columns) {\n      filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\n      if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\n        filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\n        if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\n          that._applyFilter();\n          filterApplied = true;\n        }\n      }\n      if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\n        that._columnsController.columnsChanged.add(updateItemsHandler);\n      }\n      if (isDefined(optionNames.visible)) {\n        const column = that._columnsController.columnOption(e.columnIndex);\n        if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\n          that._applyFilter();\n          filterApplied = true;\n        }\n      }\n    }\n    if (!filterApplied && changeTypes.filtering && !this._needApplyFilter) {\n      that.reload();\n    }\n  }\n  _handleDataChanged(e) {\n    const that = this;\n    const dataSource = that._dataSource;\n    const columnsController = that._columnsController;\n    let isAsyncDataSourceApplying = false;\n    this._useSortingGroupingFromColumns = false;\n    if (dataSource && !that._isDataSourceApplying) {\n      that._isDataSourceApplying = true;\n      when(that._columnsController.applyDataSource(dataSource)).done(() => {\n        if (that._isLoading) {\n          that._handleLoadingChanged(false);\n        }\n        if (isAsyncDataSourceApplying && e && e.isDelayed) {\n          e.isDelayed = false;\n        }\n        that._isDataSourceApplying = false;\n        const needApplyFilter = that._needApplyFilter;\n        that._needApplyFilter = false;\n        if (needApplyFilter && !that._isAllDataTypesDefined && (() => {\n          const additionalFilter = that._calculateAdditionalFilter();\n          return additionalFilter && additionalFilter.length;\n        })()) {\n          errors.log(\"W1005\", that.component.NAME);\n          that._applyFilter();\n        } else {\n          that.updateItems(e, true);\n        }\n      }).fail(() => {\n        that._isDataSourceApplying = false;\n      });\n      if (that._isDataSourceApplying) {\n        isAsyncDataSourceApplying = true;\n        that._handleLoadingChanged(true);\n      }\n      that._needApplyFilter = !that._columnsController.isDataSourceApplied();\n      that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined();\n    }\n  }\n  _handleLoadingChanged(isLoading) {\n    this._isLoading = isLoading;\n    this._fireLoadingChanged();\n  }\n  _handleLoadError(e) {\n    this.dataErrorOccurred.fire(e);\n  }\n  _handleDataPushed(changes) {\n    this.pushed.fire(changes);\n  }\n  fireError() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this.dataErrorOccurred.fire(errors.Error.apply(errors, args));\n  }\n  _setPagingOptions(dataSource) {\n    const pageIndex = this.option(\"paging.pageIndex\");\n    const pageSize = this.option(\"paging.pageSize\");\n    const pagingEnabled = this.option(\"paging.enabled\");\n    const scrollingMode = this.option(\"scrolling.mode\");\n    const appendMode = \"infinite\" === scrollingMode;\n    const virtualMode = \"virtual\" === scrollingMode;\n    const paginate = pagingEnabled || virtualMode || appendMode;\n    let isPaginateChanged = false;\n    let isPageSizeChanged = false;\n    let isPageIndexChanged = false;\n    dataSource.requireTotalCount(!appendMode);\n    if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\n      dataSource.paginate(paginate);\n      isPaginateChanged = true;\n    }\n    if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\n      dataSource.pageSize(pageSize);\n      isPageSizeChanged = true;\n    }\n    if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\n      dataSource.pageIndex(pageIndex);\n      isPageIndexChanged = true;\n    }\n    if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {\n      return {\n        isPaginateChanged: isPaginateChanged,\n        isPageSizeChanged: isPageSizeChanged,\n        isPageIndexChanged: isPageIndexChanged\n      };\n    }\n    return false;\n  }\n  _getSpecificDataSourceOption() {\n    const dataSource = this.option(\"dataSource\");\n    if (Array.isArray(dataSource)) {\n      return {\n        store: {\n          type: \"array\",\n          data: dataSource,\n          key: this.option(\"keyExpr\")\n        }\n      };\n    }\n    return dataSource;\n  }\n  _initDataSource() {\n    const that = this;\n    const oldDataSource = this._dataSource;\n    super._initDataSource();\n    const dataSource = that._dataSource;\n    that._useSortingGroupingFromColumns = true;\n    that._cachedProcessedItems = null;\n    if (dataSource) {\n      const changedPagingOptions = that._setPagingOptions(dataSource);\n      this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;\n      that.setDataSource(dataSource);\n    } else if (oldDataSource) {\n      that.updateItems();\n    }\n  }\n  _loadDataSource() {\n    const that = this;\n    const dataSource = that._dataSource;\n    const result = new Deferred();\n    when(this._columnsController.refresh(true)).always(() => {\n      if (dataSource) {\n        dataSource.load().done(function () {\n          that._isPaging = false;\n          result.resolve.apply(result, arguments);\n        }).fail(result.reject);\n      } else {\n        result.resolve();\n      }\n    });\n    return result.promise();\n  }\n  _beforeProcessItems(items) {\n    return items.slice(0);\n  }\n  getRowIndexDelta() {\n    return 0;\n  }\n  getDataIndex(change) {\n    const visibleItems = this._items;\n    const lastVisibleItem = \"append\" === change.changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\n    return isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;\n  }\n  _processItems(items, change) {\n    const that = this;\n    const rowIndexDelta = that.getRowIndexDelta();\n    const {\n      changeType: changeType\n    } = change;\n    const visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\n    const dataIndex = this.getDataIndex(change);\n    const options = {\n      visibleColumns: visibleColumns,\n      dataIndex: dataIndex\n    };\n    const result = [];\n    each(items, (index, item) => {\n      if (isDefined(item)) {\n        options.rowIndex = index - rowIndexDelta;\n        item = that._processItem(item, options);\n        result.push(item);\n      }\n    });\n    return result;\n  }\n  _processItem(item, options) {\n    item = this._generateDataItem(item, options);\n    item = this._processDataItem(item, options);\n    item.dataIndex = options.dataIndex++;\n    return item;\n  }\n  _generateDataItem(data, options) {\n    return {\n      rowType: \"data\",\n      data: data,\n      key: this.keyOf(data)\n    };\n  }\n  _processDataItem(dataItem, options) {\n    dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\n    return dataItem;\n  }\n  generateDataValues(data, columns, isModified) {\n    const values = [];\n    let value;\n    for (let i = 0; i < columns.length; i++) {\n      const column = columns[i];\n      value = isModified ? void 0 : null;\n      if (!column.command) {\n        if (column.calculateCellValue) {\n          value = column.calculateCellValue(data);\n        } else if (column.dataField) {\n          value = data[column.dataField];\n        }\n      }\n      values.push(value);\n    }\n    return values;\n  }\n  _applyChange(change) {\n    const that = this;\n    if (\"update\" === change.changeType) {\n      that._applyChangeUpdate(change);\n    } else if (that.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\n      that._applyChangesOnly(change);\n    } else if (\"refresh\" === change.changeType) {\n      that._applyChangeFull(change);\n    }\n  }\n  _applyChangeFull(change) {\n    this._items = change.items.slice(0);\n  }\n  _getRowIndices(change) {\n    const rowIndices = change.rowIndices.slice(0);\n    const rowIndexDelta = this.getRowIndexDelta();\n    rowIndices.sort((a, b) => a - b);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let correctedRowIndex = rowIndices[i];\n      if (change.allowInvisibleRowIndices) {\n        correctedRowIndex += rowIndexDelta;\n      }\n      if (correctedRowIndex < 0) {\n        rowIndices.splice(i, 1);\n        i--;\n      }\n    }\n    return rowIndices;\n  }\n  _applyChangeUpdate(change) {\n    const that = this;\n    const {\n      items: items\n    } = change;\n    const rowIndices = that._getRowIndices(change);\n    const rowIndexDelta = that.getRowIndexDelta();\n    const repaintChangesOnly = that.option(\"repaintChangesOnly\");\n    let prevIndex = -1;\n    let rowIndexCorrection = 0;\n    let changeType;\n    change.items = [];\n    change.rowIndices = [];\n    change.columnIndices = [];\n    change.changeTypes = [];\n    const equalItems = function (item1, item2, strict) {\n      let result = item1 && item2 && equalByValue(item1.key, item2.key);\n      if (result && strict) {\n        result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing);\n      }\n      return result;\n    };\n    each(rowIndices, (index, rowIndex) => {\n      let columnIndices;\n      rowIndex += rowIndexCorrection + rowIndexDelta;\n      if (prevIndex === rowIndex) {\n        return;\n      }\n      prevIndex = rowIndex;\n      const oldItem = that._items[rowIndex];\n      const oldNextItem = that._items[rowIndex + 1];\n      const newItem = items[rowIndex];\n      const newNextItem = items[rowIndex + 1];\n      const strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\n      if (newItem) {\n        newItem.rowIndex = rowIndex;\n        change.items.push(newItem);\n      }\n      if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\n        changeType = \"update\";\n        that._items[rowIndex] = newItem;\n        if (oldItem.visible !== newItem.visible) {\n          change.items.splice(-1, 1, {\n            visible: newItem.visible\n          });\n        } else if (repaintChangesOnly && !change.isFullUpdate) {\n          columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta);\n        }\n      } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\n        changeType = \"insert\";\n        that._items.splice(rowIndex, 0, newItem);\n        rowIndexCorrection++;\n      } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\n        changeType = \"remove\";\n        that._items.splice(rowIndex, 1);\n        rowIndexCorrection--;\n        prevIndex = -1;\n      } else if (newItem) {\n        changeType = \"update\";\n        that._items[rowIndex] = newItem;\n      } else {\n        return;\n      }\n      change.rowIndices.push(rowIndex - rowIndexDelta);\n      change.changeTypes.push(changeType);\n      change.columnIndices.push(columnIndices);\n    });\n  }\n  _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n    if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\n      return true;\n    }\n    function isCellModified(row, columnIndex) {\n      return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false;\n    }\n    if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\n      return true;\n    }\n    return false;\n  }\n  _getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n    let columnIndices;\n    if (oldItem.rowType === newItem.rowType) {\n      if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\n        columnIndices = [];\n        if (\"detail\" !== newItem.rowType) {\n          for (let columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\n            if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\n              columnIndices.push(columnIndex);\n            }\n          }\n        }\n      }\n      if (\"group\" === newItem.rowType && oldItem.cells) {\n        const isRowStateEquals = newItem.isExpanded === oldItem.isExpanded && newItem.data.isContinuation === oldItem.data.isContinuation && newItem.data.isContinuationOnNextPage === oldItem.data.isContinuationOnNextPage;\n        if (isRowStateEquals) {\n          columnIndices = oldItem.cells.map((cell, index) => {\n            var _cell$column;\n            return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1;\n          }).filter(index => index >= 0);\n        }\n      }\n    }\n    return columnIndices;\n  }\n  _partialUpdateRow(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n    var _changedColumnIndices;\n    let changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\n    if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\n      changedColumnIndices = void 0;\n    }\n    if (changedColumnIndices) {\n      oldItem.cells && oldItem.cells.forEach((cell, columnIndex) => {\n        const isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\n        if (!isCellChanged && cell && cell.update) {\n          cell.update(newItem);\n        }\n      });\n      newItem.update = oldItem.update;\n      newItem.watch = oldItem.watch;\n      newItem.cells = oldItem.cells;\n      if (isLiveUpdate) {\n        newItem.oldValues = oldItem.values;\n      }\n      oldItem.update && oldItem.update(newItem);\n    }\n    return changedColumnIndices;\n  }\n  _isItemEquals(item1, item2) {\n    if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\n      return false;\n    }\n    if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some(field => item1[field] !== item2[field])) {\n      return false;\n    }\n    if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\n      var _item1$data, _item2$data, _item1$data2, _item2$data2;\n      const expandedMatch = item1.isExpanded === item2.isExpanded;\n      const summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\n      const continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\n      if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _applyChangesOnly(change) {\n    const rowIndices = [];\n    const columnIndices = [];\n    const changeTypes = [];\n    const items = [];\n    const newIndexByKey = {};\n    const isLiveUpdate = (null === change || void 0 === change ? void 0 : change.isLiveUpdate) ?? true;\n    function getRowKey(row) {\n      if (row) {\n        return `${row.rowType},${JSON.stringify(row.key)}`;\n      }\n      return;\n    }\n    const currentItems = this._items;\n    const oldItems = currentItems.slice();\n    change.items.forEach((item, index) => {\n      const key = getRowKey(item);\n      newIndexByKey[key] = index;\n      item.rowIndex = index;\n    });\n    const result = findChanges(oldItems, change.items, getRowKey, (item1, item2) => {\n      if (!this._isItemEquals(item1, item2)) {\n        return false;\n      }\n      if (item1.cells) {\n        item1.update && item1.update(item2);\n        item1.cells.forEach(cell => {\n          if (cell && cell.update) {\n            cell.update(item2, true);\n          }\n        });\n      }\n      return true;\n    });\n    if (!result) {\n      this._applyChangeFull(change);\n      return;\n    }\n    result.forEach(change => {\n      switch (change.type) {\n        case \"update\":\n          {\n            const {\n              index: index\n            } = change;\n            const newItem = change.data;\n            const {\n              oldItem: oldItem\n            } = change;\n            const changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, isLiveUpdate);\n            rowIndices.push(index);\n            changeTypes.push(\"update\");\n            items.push(newItem);\n            currentItems[index] = newItem;\n            columnIndices.push(changedColumnIndices);\n            break;\n          }\n        case \"insert\":\n          rowIndices.push(change.index);\n          changeTypes.push(\"insert\");\n          items.push(change.data);\n          columnIndices.push(void 0);\n          currentItems.splice(change.index, 0, change.data);\n          break;\n        case \"remove\":\n          rowIndices.push(change.index);\n          changeTypes.push(\"remove\");\n          currentItems.splice(change.index, 1);\n          items.push(change.oldItem);\n          columnIndices.push(void 0);\n      }\n    });\n    change.repaintChangesOnly = true;\n    change.changeType = \"update\";\n    change.rowIndices = rowIndices;\n    change.columnIndices = columnIndices;\n    change.changeTypes = changeTypes;\n    change.items = items;\n    if (oldItems.length) {\n      change.isLiveUpdate = true;\n    }\n    this._correctRowIndices(rowIndex => {\n      const oldRowIndexOffset = this._rowIndexOffset || 0;\n      const rowIndexOffset = this.getRowIndexOffset();\n      const oldItem = oldItems[rowIndex - oldRowIndexOffset];\n      const key = getRowKey(oldItem);\n      const newVisibleRowIndex = newIndexByKey[key];\n      return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0;\n    });\n  }\n  _correctRowIndices(rowIndex) {}\n  _afterProcessItems(items, change) {\n    return items;\n  }\n  _updateItemsCore(change) {\n    let items;\n    const dataSource = this._dataSource;\n    const changeType = change.changeType || \"refresh\";\n    change.changeType = changeType;\n    if (dataSource) {\n      const cachedProcessedItems = this._cachedProcessedItems;\n      if (change.useProcessedItemsCache && cachedProcessedItems) {\n        items = cachedProcessedItems;\n      } else {\n        items = change.items || dataSource.items();\n        items = this._beforeProcessItems(items);\n        items = this._processItems(items, change);\n        this._cachedProcessedItems = items;\n      }\n      items = this._afterProcessItems(items, change);\n      change.items = items;\n      const oldItems = this._items.length === items.length && this._items;\n      this._applyChange(change);\n      const rowIndexDelta = this.getRowIndexDelta();\n      each(this._items, (index, item) => {\n        item.rowIndex = index - rowIndexDelta;\n        if (oldItems) {\n          item.cells = oldItems[index].cells ?? [];\n        }\n        const newItem = items[index];\n        if (newItem) {\n          item.loadIndex = newItem.loadIndex;\n        }\n      });\n      this._rowIndexOffset = this.getRowIndexOffset();\n    } else {\n      this._items = [];\n    }\n  }\n  _handleChanging(e) {\n    const rows = this.getVisibleRows();\n    const dataSource = this.dataSource();\n    if (dataSource) {\n      e.changes.forEach(change => {\n        if (\"insert\" === change.type && change.index >= 0) {\n          let dataIndex = 0;\n          for (let i = 0; i < change.index; i++) {\n            const row = rows[i];\n            if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\n              dataIndex++;\n            }\n          }\n          change.index = dataIndex;\n        }\n      });\n    }\n  }\n  updateItems(change, isDataChanged) {\n    change = change || {};\n    const that = this;\n    if (void 0 !== that._repaintChangesOnly) {\n      change.repaintChangesOnly = change.repaintChangesOnly ?? that._repaintChangesOnly;\n      change.needUpdateDimensions = change.needUpdateDimensions || that._needUpdateDimensions;\n    } else if (change.changes) {\n      change.repaintChangesOnly = that.option(\"repaintChangesOnly\");\n    } else if (isDataChanged) {\n      const operationTypes = that.dataSource().operationTypes();\n      change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && that.option(\"repaintChangesOnly\");\n      change.isDataChanged = true;\n      if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\n        change.needUpdateDimensions = true;\n      }\n    }\n    if (that._updateLockCount && !change.cancel) {\n      that._changes.push(change);\n      return;\n    }\n    that._updateItemsCore(change);\n    if (change.cancel) {\n      return;\n    }\n    that._fireChanged(change);\n  }\n  loadingOperationTypes() {\n    const dataSource = this.dataSource();\n    return dataSource && dataSource.loadingOperationTypes() || {};\n  }\n  _fireChanged(change) {\n    if (this._currentOperationTypes) {\n      change.operationTypes = this._currentOperationTypes;\n      this._currentOperationTypes = null;\n    }\n    deferRender(() => {\n      this.changed.fire(change);\n    });\n  }\n  isLoading() {\n    return this._isLoading || this._isCustomLoading;\n  }\n  _fireLoadingChanged() {\n    this.loadingChanged.fire(this.isLoading(), this._loadingText);\n  }\n  _calculateAdditionalFilter() {\n    return null;\n  }\n  _applyFilter() {\n    const dataSource = this._dataSource;\n    if (dataSource) {\n      dataSource.pageIndex(0);\n      this._isFilterApplying = true;\n      return this.reload().done(() => {\n        if (this._isFilterApplying) {\n          this.pageChanged.fire();\n        }\n      });\n    }\n    return new Deferred().resolve();\n  }\n  resetFilterApplying() {\n    this._isFilterApplying = false;\n  }\n  filter(filterExpr) {\n    var _dataSource$loadOptio;\n    const dataSource = this._dataSource;\n    const filter = null === dataSource || void 0 === dataSource ? void 0 : dataSource.filter();\n    const langParams = null === dataSource || void 0 === dataSource || null === (_dataSource$loadOptio = dataSource.loadOptions) || void 0 === _dataSource$loadOptio || null === (_dataSource$loadOptio = _dataSource$loadOptio.call(dataSource)) || void 0 === _dataSource$loadOptio ? void 0 : _dataSource$loadOptio.langParams;\n    if (0 === arguments.length) {\n      return filter;\n    }\n    filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\n    if (gridCoreUtils.equalFilterParameters(filter, filterExpr, langParams)) {\n      return;\n    }\n    if (dataSource) {\n      dataSource.filter(filterExpr);\n    }\n    this._applyFilter();\n  }\n  clearFilter(filterName) {\n    const that = this;\n    const columnsController = that._columnsController;\n    const clearColumnOption = function (optionName) {\n      const columnCount = columnsController.columnCount();\n      for (let index = 0; index < columnCount; index++) {\n        columnsController.columnOption(index, optionName, void 0);\n      }\n    };\n    that.component.beginUpdate();\n    if (arguments.length > 0) {\n      switch (filterName) {\n        case \"dataSource\":\n          that.filter(null);\n          break;\n        case \"search\":\n          that.searchByText(\"\");\n          break;\n        case \"header\":\n          clearColumnOption(\"filterValues\");\n          break;\n        case \"row\":\n          clearColumnOption(\"filterValue\");\n      }\n    } else {\n      that.filter(null);\n      that.searchByText(\"\");\n      clearColumnOption(\"filterValue\");\n      clearColumnOption(\"bufferedFilterValue\");\n      clearColumnOption(\"filterValues\");\n    }\n    that.component.endUpdate();\n  }\n  _fireDataSourceChanged() {\n    const that = this;\n    const changedHandler = function () {\n      that.changed.remove(changedHandler);\n      that.dataSourceChanged.fire();\n    };\n    that.changed.add(changedHandler);\n  }\n  _getDataSourceAdapter() {}\n  _createDataSourceAdapterCore(dataSource, remoteOperations) {\n    const dataSourceAdapterProvider = this._getDataSourceAdapter();\n    const dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\n    dataSourceAdapter.init(dataSource, remoteOperations);\n    return dataSourceAdapter;\n  }\n  isLocalStore() {\n    let store = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.store();\n    return store instanceof ArrayStore;\n  }\n  isCustomStore(store) {\n    store = store || this.store();\n    return store instanceof CustomStore;\n  }\n  _createDataSourceAdapter(dataSource) {\n    let remoteOperations = this.option(\"remoteOperations\");\n    const store = dataSource.store();\n    const enabledRemoteOperations = {\n      filtering: true,\n      sorting: true,\n      paging: true,\n      grouping: true,\n      summary: true\n    };\n    if (isObject(remoteOperations) && remoteOperations.groupPaging) {\n      remoteOperations = extend({}, enabledRemoteOperations, remoteOperations);\n    }\n    if (\"auto\" === remoteOperations) {\n      remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\n        filtering: true,\n        sorting: true,\n        paging: true\n      };\n    }\n    if (true === remoteOperations) {\n      remoteOperations = enabledRemoteOperations;\n    }\n    return this._createDataSourceAdapterCore(dataSource, remoteOperations);\n  }\n  setDataSource(dataSource) {\n    const that = this;\n    const oldDataSource = that._dataSource;\n    if (!dataSource && oldDataSource) {\n      oldDataSource.cancelAll();\n      oldDataSource.changed.remove(that._dataChangedHandler);\n      oldDataSource.loadingChanged.remove(that._loadingChangedHandler);\n      oldDataSource.loadError.remove(that._loadErrorHandler);\n      oldDataSource.customizeStoreLoadOptions.remove(that._customizeStoreLoadOptionsHandler);\n      oldDataSource.changing.remove(that._changingHandler);\n      oldDataSource.pushed.remove(that._dataPushedHandler);\n      oldDataSource.dispose(that._isSharedDataSource);\n    }\n    if (dataSource) {\n      dataSource = that._createDataSourceAdapter(dataSource);\n    }\n    that._dataSource = dataSource;\n    if (dataSource) {\n      that._fireDataSourceChanged();\n      that._isLoading = !dataSource.isLoaded();\n      that._needApplyFilter = true;\n      that._isAllDataTypesDefined = that._columnsController.isAllDataTypesDefined();\n      dataSource.changed.add(that._dataChangedHandler);\n      dataSource.loadingChanged.add(that._loadingChangedHandler);\n      dataSource.loadError.add(that._loadErrorHandler);\n      dataSource.customizeStoreLoadOptions.add(that._customizeStoreLoadOptionsHandler);\n      dataSource.changing.add(that._changingHandler);\n      dataSource.pushed.add(that._dataPushedHandler);\n    }\n  }\n  items(byLoaded) {\n    return this._items;\n  }\n  isEmpty() {\n    return !this.items().length;\n  }\n  pageCount() {\n    return this._dataSource ? this._dataSource.pageCount() : 1;\n  }\n  dataSource() {\n    return this._dataSource;\n  }\n  store() {\n    const dataSource = this._dataSource;\n    return dataSource && dataSource.store();\n  }\n  loadAll(data) {\n    let skipFilter = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    const that = this;\n    const d = new Deferred();\n    const dataSource = that._dataSource;\n    if (dataSource) {\n      if (data) {\n        const options = {\n          data: data,\n          isCustomLoading: true,\n          storeLoadOptions: {\n            isLoadingAll: true\n          },\n          loadOptions: {\n            filter: skipFilter ? null : that.getCombinedFilter(),\n            group: dataSource.group(),\n            sort: dataSource.sort()\n          }\n        };\n        dataSource._handleDataLoaded(options);\n        when(options.data).done(data => {\n          var _options$extra;\n          data = that._beforeProcessItems(data);\n          d.resolve(that._processItems(data, {\n            changeType: \"loadingAll\"\n          }), null === (_options$extra = options.extra) || void 0 === _options$extra ? void 0 : _options$extra.summary);\n        }).fail(d.reject);\n      } else if (!dataSource.isLoading()) {\n        const loadOptions = extend({}, dataSource.loadOptions(), {\n          isLoadingAll: true,\n          requireTotalCount: false\n        });\n        dataSource.load(loadOptions).done((items, extra) => {\n          items = that._beforeProcessItems(items);\n          items = that._processItems(items, {\n            changeType: \"loadingAll\"\n          });\n          d.resolve(items, extra && extra.summary);\n        }).fail(d.reject);\n      } else {\n        d.reject();\n      }\n    } else {\n      d.resolve([]);\n    }\n    return d;\n  }\n  getKeyByRowIndex(rowIndex, byLoaded) {\n    const item = this.items(byLoaded)[rowIndex];\n    if (item) {\n      return item.key;\n    }\n  }\n  getRowIndexByKey(key, byLoaded) {\n    return gridCoreUtils.getIndexByKey(key, this.items(byLoaded));\n  }\n  keyOf(data) {\n    const store = this.store();\n    if (store) {\n      return store.keyOf(data);\n    }\n  }\n  byKey(key) {\n    const store = this.store();\n    const rowIndex = this.getRowIndexByKey(key);\n    let result;\n    if (!store) {\n      return;\n    }\n    if (rowIndex >= 0) {\n      result = new Deferred().resolve(this.items()[rowIndex].data);\n    }\n    return result || store.byKey(key);\n  }\n  key() {\n    const store = this.store();\n    if (store) {\n      return store.key();\n    }\n  }\n  getRowIndexOffset(byLoadedRows) {\n    return 0;\n  }\n  getDataByKeys(rowKeys) {\n    const that = this;\n    const result = new Deferred();\n    const deferreds = [];\n    const data = [];\n    each(rowKeys, (index, key) => {\n      deferreds.push(that.byKey(key).done(keyData => {\n        data[index] = keyData;\n      }));\n    });\n    when.apply($, deferreds).always(() => {\n      result.resolve(data);\n    });\n    return result;\n  }\n  pageIndex(value) {\n    return changePaging(this, \"pageIndex\", value);\n  }\n  pageSize(value) {\n    return changePaging(this, \"pageSize\", value);\n  }\n  beginCustomLoading(messageText) {\n    this._isCustomLoading = true;\n    this._loadingText = messageText || \"\";\n    this._fireLoadingChanged();\n  }\n  endCustomLoading() {\n    this._isCustomLoading = false;\n    this._loadingText = void 0;\n    this._fireLoadingChanged();\n  }\n  refresh(options) {\n    if (true === options) {\n      options = {\n        reload: true,\n        changesOnly: true\n      };\n    } else if (!options) {\n      options = {\n        lookup: true,\n        selection: true,\n        reload: true\n      };\n    }\n    const that = this;\n    const dataSource = that.getDataSource();\n    const {\n      changesOnly: changesOnly\n    } = options;\n    const d = new Deferred();\n    const customizeLoadResult = function () {\n      that._repaintChangesOnly = !!changesOnly;\n    };\n    when(!options.lookup || that._columnsController.refresh()).always(() => {\n      if (options.load || options.reload) {\n        dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\n        when(that.reload(options.reload, changesOnly)).always(() => {\n          dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\n          that._repaintChangesOnly = void 0;\n        }).done(d.resolve).fail(d.reject);\n      } else {\n        that.updateItems({\n          repaintChangesOnly: options.changesOnly\n        });\n        d.resolve();\n      }\n    });\n    return d.promise();\n  }\n  getVisibleRows() {\n    return this.items();\n  }\n  _disposeDataSource() {\n    if (this._dataSource && this._dataSource._eventsStrategy) {\n      this._dataSource._eventsStrategy.off(\"loadingChanged\", this.readyWatcher);\n    }\n    this.setDataSource(null);\n  }\n  dispose() {\n    this._disposeDataSource();\n    super.dispose();\n  }\n  repaintRows(rowIndexes, changesOnly) {\n    rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\n    if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\n      this.updateItems({\n        changeType: \"update\",\n        rowIndices: rowIndexes,\n        isFullUpdate: !changesOnly\n      });\n    }\n  }\n  skipProcessingPagingChange(fullName) {\n    return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName);\n  }\n  getUserState() {\n    return {\n      searchText: this.option(\"searchPanel.text\"),\n      pageIndex: this.pageIndex(),\n      pageSize: this.pageSize()\n    };\n  }\n  getCachedStoreData() {\n    return this._dataSource && this._dataSource.getCachedStoreData();\n  }\n  isLastPageLoaded() {\n    const pageIndex = this.pageIndex();\n    const pageCount = this.pageCount();\n    return pageIndex === pageCount - 1;\n  }\n  load() {\n    var _this$_dataSource;\n    return null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.load();\n  }\n  reload(reload, changesOnly) {\n    var _this$_dataSource2;\n    return null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.reload(reload, changesOnly);\n  }\n  push() {\n    var _this$_dataSource3;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.push(...args);\n  }\n  itemsCount() {\n    var _this$_dataSource4;\n    return this._dataSource ? null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.itemsCount() : 0;\n  }\n  totalItemsCount() {\n    var _this$_dataSource5;\n    return this._dataSource ? null === (_this$_dataSource5 = this._dataSource) || void 0 === _this$_dataSource5 ? void 0 : _this$_dataSource5.totalItemsCount() : 0;\n  }\n  hasKnownLastPage() {\n    var _this$_dataSource6;\n    return this._dataSource ? null === (_this$_dataSource6 = this._dataSource) || void 0 === _this$_dataSource6 ? void 0 : _this$_dataSource6.hasKnownLastPage() : true;\n  }\n  isLoaded() {\n    var _this$_dataSource7;\n    return this._dataSource ? null === (_this$_dataSource7 = this._dataSource) || void 0 === _this$_dataSource7 ? void 0 : _this$_dataSource7.isLoaded() : true;\n  }\n  totalCount() {\n    var _this$_dataSource8;\n    return this._dataSource ? null === (_this$_dataSource8 = this._dataSource) || void 0 === _this$_dataSource8 ? void 0 : _this$_dataSource8.totalCount() : 0;\n  }\n  hasLoadOperation() {\n    var _this$_dataSource9;\n    const operationTypes = (null === (_this$_dataSource9 = this._dataSource) || void 0 === _this$_dataSource9 ? void 0 : _this$_dataSource9.operationTypes()) ?? {};\n    return Object.keys(operationTypes).some(type => operationTypes[type]);\n  }\n}\nexport const dataControllerModule = {\n  defaultOptions: () => ({\n    loadingTimeout: 0,\n    dataSource: null,\n    cacheEnabled: true,\n    repaintChangesOnly: false,\n    highlightChanges: false,\n    onDataErrorOccurred: null,\n    remoteOperations: \"auto\",\n    paging: {\n      enabled: true,\n      pageSize: void 0,\n      pageIndex: void 0\n    }\n  }),\n  controllers: {\n    data: DataController\n  }\n};","map":{"version":3,"names":["ArrayStore","CustomStore","$","findChanges","deferRender","equalByValue","Deferred","when","extend","each","isDefined","isObject","errors","modules","gridCoreUtils","DataHelperMixin","changePaging","that","optionName","value","dataSource","_dataSource","oldValue","_getPagingOptionValue","pageIndex","_skipProcessingPagingChange","option","_isPaging","done","pageChanged","fire","resolve","promise","DataController","Controller","init","_items","_cachedProcessedItems","_columnsController","getController","_adaptiveColumnsController","_editingController","_editorFactoryController","_errorHandlingController","_filterSyncController","_applyFilterController","_keyboardNavigationController","_focusController","_headerFilterController","_selectionController","_stateStoringController","_validatingController","_currentOperationTypes","_dataChangedHandler","e","operationTypes","_handleDataChanged","_columnsChangedHandler","_handleColumnsChanged","bind","_loadingChangedHandler","_handleLoadingChanged","_loadErrorHandler","_handleLoadError","_customizeStoreLoadOptionsHandler","_handleCustomizeStoreLoadOptions","_changingHandler","_handleChanging","_dataPushedHandler","_handleDataPushed","columnsChanged","add","_isLoading","_isCustomLoading","_repaintChangesOnly","_changes","createAction","dataErrorOccurred","error","executeAction","_refreshDataSource","postCtor","callbackNames","callbackFlags","name","stopOnFalse","publicMethods","reset","_handleDataSourceChange","args","previousValue","Array","isArray","isValueChanged","store","_array","needToRefreshOnDataSourceChange","refresh","optionChanged","changedPagingOptions","handled","fullName","_setPagingOptions","isPageIndexChanged","load","isLoading","_useSortingGroupingFromColumns","isReady","getDataSource","getCombinedFilter","returnDataField","combinedFilter","filter","combined","isColumnsTypesDefined","isDataSourceApplied","isAllDataTypesDefined","additionalFilter","_calculateAdditionalFilter","combineFilters","isRemoteFiltering","remoteOperations","filtering","updateFilter","waitReady","_updateLockCount","_readyDeferred","_endUpdateCore","changes","length","repaintChangesOnly","every","change","updateItems","_storeLoadOptions$fil","columnsController","storeLoadOptions","isCustomLoading","isLoadingAll","data","extra","totalCount","updateColumnDataTypes","_columnsUpdating","updateSortingGrouping","sort","getSortDataSourceParameters","group","getGroupDataSourceParameters","sorting","grouping","changeTypes","optionNames","filterValue","filterValues","filterApplied","updateItemsHandler","_change$changeTypes","_change$changeTypes2","remove","event","virtualColumnsScrolling","reload","columns","columnOption","columnIndex","filterType","selectedFilterOperation","allowFiltering","_applyFilter","_needApplyFilter","checkChanges","visible","column","isAsyncDataSourceApplying","_isDataSourceApplying","applyDataSource","isDelayed","needApplyFilter","_isAllDataTypesDefined","log","component","NAME","fail","_fireLoadingChanged","pushed","fireError","_len","arguments","_key","Error","apply","pageSize","pagingEnabled","scrollingMode","appendMode","virtualMode","paginate","isPaginateChanged","isPageSizeChanged","requireTotalCount","_getSpecificDataSourceOption","type","key","_initDataSource","oldDataSource","setDataSource","_loadDataSource","result","always","reject","_beforeProcessItems","items","slice","getRowIndexDelta","getDataIndex","visibleItems","lastVisibleItem","changeType","dataIndex","_processItems","rowIndexDelta","visibleColumns","getVisibleColumns","options","index","item","rowIndex","_processItem","push","_generateDataItem","_processDataItem","rowType","keyOf","dataItem","values","generateDataValues","isModified","i","command","calculateCellValue","dataField","_applyChange","_applyChangeUpdate","_applyChangesOnly","_applyChangeFull","_getRowIndices","rowIndices","a","b","correctedRowIndex","allowInvisibleRowIndices","splice","prevIndex","rowIndexCorrection","columnIndices","equalItems","item1","item2","strict","isEditing","oldItem","oldNextItem","newItem","newNextItem","isFullUpdate","_partialUpdateRow","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","JSON","stringify","isCellModified","row","modifiedValues","_getChangedColumnIndices","cells","isRowStateEquals","isExpanded","isContinuation","isContinuationOnNextPage","map","cell","_cell$column","_changedColumnIndices","changedColumnIndices","forEach","isCellChanged","indexOf","update","watch","oldValues","_isItemEquals","some","field","_item1$data","_item2$data","_item1$data2","_item2$data2","expandedMatch","summaryCellsMatch","summaryCells","continuationMatch","newIndexByKey","getRowKey","currentItems","oldItems","_correctRowIndices","oldRowIndexOffset","_rowIndexOffset","rowIndexOffset","getRowIndexOffset","newVisibleRowIndex","_afterProcessItems","_updateItemsCore","cachedProcessedItems","useProcessedItemsCache","loadIndex","rows","getVisibleRows","isDataChanged","needUpdateDimensions","_needUpdateDimensions","paging","groupExpanding","cancel","_fireChanged","loadingOperationTypes","changed","loadingChanged","_loadingText","_isFilterApplying","resetFilterApplying","filterExpr","_dataSource$loadOptio","langParams","loadOptions","call","prototype","equalFilterParameters","clearFilter","filterName","clearColumnOption","columnCount","beginUpdate","searchByText","endUpdate","_fireDataSourceChanged","changedHandler","dataSourceChanged","_getDataSourceAdapter","_createDataSourceAdapterCore","dataSourceAdapterProvider","dataSourceAdapter","create","isLocalStore","isCustomStore","_createDataSourceAdapter","enabledRemoteOperations","summary","groupPaging","cancelAll","loadError","customizeStoreLoadOptions","changing","dispose","_isSharedDataSource","isLoaded","byLoaded","isEmpty","pageCount","loadAll","skipFilter","d","_handleDataLoaded","_options$extra","getKeyByRowIndex","getRowIndexByKey","getIndexByKey","byKey","byLoadedRows","getDataByKeys","rowKeys","deferreds","keyData","beginCustomLoading","messageText","endCustomLoading","changesOnly","lookup","selection","customizeLoadResult","on","off","_disposeDataSource","_eventsStrategy","readyWatcher","repaintRows","rowIndexes","skipProcessingPagingChange","getUserState","searchText","getCachedStoreData","isLastPageLoaded","_this$_dataSource","_this$_dataSource2","_this$_dataSource3","_len2","_key2","itemsCount","_this$_dataSource4","totalItemsCount","_this$_dataSource5","hasKnownLastPage","_this$_dataSource6","_this$_dataSource7","_this$_dataSource8","hasLoadOperation","_this$_dataSource9","Object","keys","dataControllerModule","defaultOptions","loadingTimeout","cacheEnabled","highlightChanges","onDataErrorOccurred","enabled","controllers"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/data_controller/m_data_controller.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/data_controller/m_data_controller.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport ArrayStore from \"../../../../common/data/array_store\";\r\nimport {\r\n    CustomStore\r\n} from \"../../../../common/data/custom_store\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    findChanges\r\n} from \"../../../../core/utils/array_compare\";\r\nimport {\r\n    deferRender,\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isObject\r\n} from \"../../../../core/utils/type\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    DataHelperMixin\r\n} from \"./m_data_helper_mixin\";\r\nconst changePaging = function(that, optionName, value) {\r\n    const dataSource = that._dataSource;\r\n    if (dataSource) {\r\n        if (void 0 !== value) {\r\n            const oldValue = that._getPagingOptionValue(optionName);\r\n            if (oldValue !== value) {\r\n                if (\"pageSize\" === optionName) {\r\n                    dataSource.pageIndex(0)\r\n                }\r\n                dataSource[optionName](value);\r\n                that._skipProcessingPagingChange = true;\r\n                that.option(`paging.${optionName}`, value);\r\n                that._skipProcessingPagingChange = false;\r\n                const pageIndex = dataSource.pageIndex();\r\n                that._isPaging = \"pageIndex\" === optionName;\r\n                return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done((() => {\r\n                    that._isPaging = false;\r\n                    that.pageChanged.fire(pageIndex)\r\n                }))\r\n            }\r\n            return Deferred().resolve().promise()\r\n        }\r\n        return dataSource[optionName]()\r\n    }\r\n    if (\"pageIndex\" === optionName && void 0 !== value) {\r\n        return Deferred().resolve().promise()\r\n    }\r\n    return 0\r\n};\r\nexport class DataController extends(DataHelperMixin(modules.Controller)) {\r\n    init() {\r\n        this._items = [];\r\n        this._cachedProcessedItems = null;\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n        this._editingController = this.getController(\"editing\");\r\n        this._editorFactoryController = this.getController(\"editorFactory\");\r\n        this._errorHandlingController = this.getController(\"errorHandling\");\r\n        this._filterSyncController = this.getController(\"filterSync\");\r\n        this._applyFilterController = this.getController(\"applyFilter\");\r\n        this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n        this._focusController = this.getController(\"focus\");\r\n        this._headerFilterController = this.getController(\"headerFilter\");\r\n        this._selectionController = this.getController(\"selection\");\r\n        this._stateStoringController = this.getController(\"stateStoring\");\r\n        this._validatingController = this.getController(\"validating\");\r\n        this._isPaging = false;\r\n        this._currentOperationTypes = null;\r\n        this._dataChangedHandler = e => {\r\n            this._currentOperationTypes = this._dataSource.operationTypes();\r\n            this._handleDataChanged(e);\r\n            this._currentOperationTypes = null\r\n        };\r\n        this._columnsChangedHandler = this._handleColumnsChanged.bind(this);\r\n        this._loadingChangedHandler = this._handleLoadingChanged.bind(this);\r\n        this._loadErrorHandler = this._handleLoadError.bind(this);\r\n        this._customizeStoreLoadOptionsHandler = this._handleCustomizeStoreLoadOptions.bind(this);\r\n        this._changingHandler = this._handleChanging.bind(this);\r\n        this._dataPushedHandler = this._handleDataPushed.bind(this);\r\n        this._columnsController.columnsChanged.add(this._columnsChangedHandler);\r\n        this._isLoading = false;\r\n        this._isCustomLoading = false;\r\n        this._repaintChangesOnly = void 0;\r\n        this._changes = [];\r\n        this.createAction(\"onDataErrorOccurred\");\r\n        this.dataErrorOccurred.add((error => this.executeAction(\"onDataErrorOccurred\", {\r\n            error: error\r\n        })));\r\n        this._refreshDataSource();\r\n        this.postCtor()\r\n    }\r\n    _getPagingOptionValue(optionName) {\r\n        return this._dataSource[optionName]()\r\n    }\r\n    callbackNames() {\r\n        return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"]\r\n    }\r\n    callbackFlags(name) {\r\n        if (\"dataErrorOccurred\" === name) {\r\n            return {\r\n                stopOnFalse: true\r\n            }\r\n        }\r\n        return\r\n    }\r\n    publicMethods() {\r\n        return [\"_disposeDataSource\", \"beginCustomLoading\", \"byKey\", \"clearFilter\", \"endCustomLoading\", \"filter\", \"getCombinedFilter\", \"getDataByKeys\", \"getDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getVisibleRows\", \"keyOf\", \"pageCount\", \"pageIndex\", \"pageSize\", \"refresh\", \"repaintRows\", \"totalCount\"]\r\n    }\r\n    reset() {\r\n        this._columnsController.reset();\r\n        this._items = [];\r\n        this._refreshDataSource()\r\n    }\r\n    _handleDataSourceChange(args) {\r\n        if (args.value === args.previousValue || this.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {\r\n            const isValueChanged = args.value !== args.previousValue;\r\n            if (isValueChanged) {\r\n                const store = this.store();\r\n                if (store) {\r\n                    store._array = args.value\r\n                }\r\n            }\r\n            if (this.needToRefreshOnDataSourceChange(args)) {\r\n                this.refresh(this.option(\"repaintChangesOnly\"))\r\n            }\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    needToRefreshOnDataSourceChange(args) {\r\n        return true\r\n    }\r\n    optionChanged(args) {\r\n        const that = this;\r\n        let dataSource;\r\n        let changedPagingOptions;\r\n\r\n        function handled() {\r\n            args.handled = true\r\n        }\r\n        if (\"dataSource\" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {\r\n            handled();\r\n            return\r\n        }\r\n        switch (args.name) {\r\n            case \"cacheEnabled\":\r\n            case \"repaintChangesOnly\":\r\n            case \"highlightChanges\":\r\n            case \"loadingTimeout\":\r\n                handled();\r\n                break;\r\n            case \"remoteOperations\":\r\n            case \"keyExpr\":\r\n            case \"dataSource\":\r\n            case \"scrolling\":\r\n                handled();\r\n                that.reset();\r\n                break;\r\n            case \"paging\":\r\n                dataSource = that.dataSource();\r\n                if (dataSource) {\r\n                    changedPagingOptions = that._setPagingOptions(dataSource);\r\n                    if (changedPagingOptions) {\r\n                        const pageIndex = dataSource.pageIndex();\r\n                        this._isPaging = changedPagingOptions.isPageIndexChanged;\r\n                        dataSource.load().done((() => {\r\n                            this._isPaging = false;\r\n                            that.pageChanged.fire(pageIndex)\r\n                        }))\r\n                    }\r\n                }\r\n                handled();\r\n                break;\r\n            case \"rtlEnabled\":\r\n                that.reset();\r\n                break;\r\n            case \"columns\":\r\n                dataSource = that.dataSource();\r\n                if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\r\n                    this._useSortingGroupingFromColumns = true;\r\n                    dataSource.load()\r\n                }\r\n                break;\r\n            default:\r\n                super.optionChanged(args)\r\n        }\r\n    }\r\n    isReady() {\r\n        return !this._isLoading\r\n    }\r\n    getDataSource() {\r\n        return this._dataSource && this._dataSource._dataSource\r\n    }\r\n    getCombinedFilter(returnDataField) {\r\n        return this.combinedFilter(void 0, returnDataField)\r\n    }\r\n    combinedFilter(filter, returnDataField) {\r\n        if (!this._dataSource) {\r\n            return filter\r\n        }\r\n        let combined = filter ?? this._dataSource.filter();\r\n        const isColumnsTypesDefined = this._columnsController.isDataSourceApplied() || this._columnsController.isAllDataTypesDefined();\r\n        if (isColumnsTypesDefined) {\r\n            const additionalFilter = this._calculateAdditionalFilter();\r\n            combined = additionalFilter ? gridCoreUtils.combineFilters([additionalFilter, combined]) : combined\r\n        }\r\n        const isRemoteFiltering = this._dataSource.remoteOperations().filtering || returnDataField;\r\n        combined = this._columnsController.updateFilter(combined, isRemoteFiltering);\r\n        return combined\r\n    }\r\n    waitReady() {\r\n        if (this._updateLockCount) {\r\n            this._readyDeferred = new Deferred;\r\n            return this._readyDeferred\r\n        }\r\n        return when()\r\n    }\r\n    _endUpdateCore() {\r\n        const changes = this._changes;\r\n        if (changes.length) {\r\n            this._changes = [];\r\n            const repaintChangesOnly = changes.every((change => change.repaintChangesOnly));\r\n            this.updateItems(1 === changes.length ? changes[0] : {\r\n                repaintChangesOnly: repaintChangesOnly\r\n            })\r\n        }\r\n        if (this._readyDeferred) {\r\n            this._readyDeferred.resolve();\r\n            this._readyDeferred = null\r\n        }\r\n    }\r\n    _handleCustomizeStoreLoadOptions(e) {\r\n        var _storeLoadOptions$fil;\r\n        const columnsController = this._columnsController;\r\n        const dataSource = this._dataSource;\r\n        const {\r\n            storeLoadOptions: storeLoadOptions\r\n        } = e;\r\n        if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\r\n            return\r\n        }\r\n        storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\r\n        if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\r\n            e.data = [];\r\n            e.extra = e.extra || {};\r\n            e.extra.totalCount = 0\r\n        }\r\n        if (!columnsController.isDataSourceApplied()) {\r\n            columnsController.updateColumnDataTypes(dataSource)\r\n        }\r\n        this._columnsUpdating = true;\r\n        columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\r\n        this._columnsUpdating = false;\r\n        storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\r\n        storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\r\n        dataSource.sort(storeLoadOptions.sort);\r\n        dataSource.group(storeLoadOptions.group);\r\n        storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\r\n        e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping)\r\n    }\r\n    _handleColumnsChanged(e) {\r\n        const that = this;\r\n        const {\r\n            changeTypes: changeTypes\r\n        } = e;\r\n        const {\r\n            optionNames: optionNames\r\n        } = e;\r\n        let filterValue;\r\n        let filterValues;\r\n        let filterApplied;\r\n        const updateItemsHandler = function(change) {\r\n            var _change$changeTypes, _change$changeTypes2;\r\n            that._columnsController.columnsChanged.remove(updateItemsHandler);\r\n            that.updateItems({\r\n                repaintChangesOnly: false,\r\n                event: null === change || void 0 === change || null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes.event,\r\n                virtualColumnsScrolling: null === change || void 0 === change || null === (_change$changeTypes2 = change.changeTypes) || void 0 === _change$changeTypes2 ? void 0 : _change$changeTypes2.virtualColumnsScrolling\r\n            })\r\n        };\r\n        if (changeTypes.sorting || changeTypes.grouping) {\r\n            if (that._dataSource && !that._columnsUpdating) {\r\n                that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\r\n                that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\r\n                that.reload()\r\n            }\r\n        } else if (changeTypes.columns) {\r\n            filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\r\n            if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\r\n                filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\r\n                if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\r\n                    that._applyFilter();\r\n                    filterApplied = true\r\n                }\r\n            }\r\n            if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\r\n                that._columnsController.columnsChanged.add(updateItemsHandler)\r\n            }\r\n            if (isDefined(optionNames.visible)) {\r\n                const column = that._columnsController.columnOption(e.columnIndex);\r\n                if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\r\n                    that._applyFilter();\r\n                    filterApplied = true\r\n                }\r\n            }\r\n        }\r\n        if (!filterApplied && changeTypes.filtering && !this._needApplyFilter) {\r\n            that.reload()\r\n        }\r\n    }\r\n    _handleDataChanged(e) {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        const columnsController = that._columnsController;\r\n        let isAsyncDataSourceApplying = false;\r\n        this._useSortingGroupingFromColumns = false;\r\n        if (dataSource && !that._isDataSourceApplying) {\r\n            that._isDataSourceApplying = true;\r\n            when(that._columnsController.applyDataSource(dataSource)).done((() => {\r\n                if (that._isLoading) {\r\n                    that._handleLoadingChanged(false)\r\n                }\r\n                if (isAsyncDataSourceApplying && e && e.isDelayed) {\r\n                    e.isDelayed = false\r\n                }\r\n                that._isDataSourceApplying = false;\r\n                const needApplyFilter = that._needApplyFilter;\r\n                that._needApplyFilter = false;\r\n                if (needApplyFilter && !that._isAllDataTypesDefined && (() => {\r\n                        const additionalFilter = that._calculateAdditionalFilter();\r\n                        return additionalFilter && additionalFilter.length\r\n                    })()) {\r\n                    errors.log(\"W1005\", that.component.NAME);\r\n                    that._applyFilter()\r\n                } else {\r\n                    that.updateItems(e, true)\r\n                }\r\n            })).fail((() => {\r\n                that._isDataSourceApplying = false\r\n            }));\r\n            if (that._isDataSourceApplying) {\r\n                isAsyncDataSourceApplying = true;\r\n                that._handleLoadingChanged(true)\r\n            }\r\n            that._needApplyFilter = !that._columnsController.isDataSourceApplied();\r\n            that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined()\r\n        }\r\n    }\r\n    _handleLoadingChanged(isLoading) {\r\n        this._isLoading = isLoading;\r\n        this._fireLoadingChanged()\r\n    }\r\n    _handleLoadError(e) {\r\n        this.dataErrorOccurred.fire(e)\r\n    }\r\n    _handleDataPushed(changes) {\r\n        this.pushed.fire(changes)\r\n    }\r\n    fireError() {\r\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n            args[_key] = arguments[_key]\r\n        }\r\n        this.dataErrorOccurred.fire(errors.Error.apply(errors, args))\r\n    }\r\n    _setPagingOptions(dataSource) {\r\n        const pageIndex = this.option(\"paging.pageIndex\");\r\n        const pageSize = this.option(\"paging.pageSize\");\r\n        const pagingEnabled = this.option(\"paging.enabled\");\r\n        const scrollingMode = this.option(\"scrolling.mode\");\r\n        const appendMode = \"infinite\" === scrollingMode;\r\n        const virtualMode = \"virtual\" === scrollingMode;\r\n        const paginate = pagingEnabled || virtualMode || appendMode;\r\n        let isPaginateChanged = false;\r\n        let isPageSizeChanged = false;\r\n        let isPageIndexChanged = false;\r\n        dataSource.requireTotalCount(!appendMode);\r\n        if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\r\n            dataSource.paginate(paginate);\r\n            isPaginateChanged = true\r\n        }\r\n        if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\r\n            dataSource.pageSize(pageSize);\r\n            isPageSizeChanged = true\r\n        }\r\n        if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\r\n            dataSource.pageIndex(pageIndex);\r\n            isPageIndexChanged = true\r\n        }\r\n        if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {\r\n            return {\r\n                isPaginateChanged: isPaginateChanged,\r\n                isPageSizeChanged: isPageSizeChanged,\r\n                isPageIndexChanged: isPageIndexChanged\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _getSpecificDataSourceOption() {\r\n        const dataSource = this.option(\"dataSource\");\r\n        if (Array.isArray(dataSource)) {\r\n            return {\r\n                store: {\r\n                    type: \"array\",\r\n                    data: dataSource,\r\n                    key: this.option(\"keyExpr\")\r\n                }\r\n            }\r\n        }\r\n        return dataSource\r\n    }\r\n    _initDataSource() {\r\n        const that = this;\r\n        const oldDataSource = this._dataSource;\r\n        super._initDataSource();\r\n        const dataSource = that._dataSource;\r\n        that._useSortingGroupingFromColumns = true;\r\n        that._cachedProcessedItems = null;\r\n        if (dataSource) {\r\n            const changedPagingOptions = that._setPagingOptions(dataSource);\r\n            this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;\r\n            that.setDataSource(dataSource)\r\n        } else if (oldDataSource) {\r\n            that.updateItems()\r\n        }\r\n    }\r\n    _loadDataSource() {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        const result = new Deferred;\r\n        when(this._columnsController.refresh(true)).always((() => {\r\n            if (dataSource) {\r\n                dataSource.load().done((function() {\r\n                    that._isPaging = false;\r\n                    result.resolve.apply(result, arguments)\r\n                })).fail(result.reject)\r\n            } else {\r\n                result.resolve()\r\n            }\r\n        }));\r\n        return result.promise()\r\n    }\r\n    _beforeProcessItems(items) {\r\n        return items.slice(0)\r\n    }\r\n    getRowIndexDelta() {\r\n        return 0\r\n    }\r\n    getDataIndex(change) {\r\n        const visibleItems = this._items;\r\n        const lastVisibleItem = \"append\" === change.changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\r\n        return isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0\r\n    }\r\n    _processItems(items, change) {\r\n        const that = this;\r\n        const rowIndexDelta = that.getRowIndexDelta();\r\n        const {\r\n            changeType: changeType\r\n        } = change;\r\n        const visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\r\n        const dataIndex = this.getDataIndex(change);\r\n        const options = {\r\n            visibleColumns: visibleColumns,\r\n            dataIndex: dataIndex\r\n        };\r\n        const result = [];\r\n        each(items, ((index, item) => {\r\n            if (isDefined(item)) {\r\n                options.rowIndex = index - rowIndexDelta;\r\n                item = that._processItem(item, options);\r\n                result.push(item)\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n    _processItem(item, options) {\r\n        item = this._generateDataItem(item, options);\r\n        item = this._processDataItem(item, options);\r\n        item.dataIndex = options.dataIndex++;\r\n        return item\r\n    }\r\n    _generateDataItem(data, options) {\r\n        return {\r\n            rowType: \"data\",\r\n            data: data,\r\n            key: this.keyOf(data)\r\n        }\r\n    }\r\n    _processDataItem(dataItem, options) {\r\n        dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\r\n        return dataItem\r\n    }\r\n    generateDataValues(data, columns, isModified) {\r\n        const values = [];\r\n        let value;\r\n        for (let i = 0; i < columns.length; i++) {\r\n            const column = columns[i];\r\n            value = isModified ? void 0 : null;\r\n            if (!column.command) {\r\n                if (column.calculateCellValue) {\r\n                    value = column.calculateCellValue(data)\r\n                } else if (column.dataField) {\r\n                    value = data[column.dataField]\r\n                }\r\n            }\r\n            values.push(value)\r\n        }\r\n        return values\r\n    }\r\n    _applyChange(change) {\r\n        const that = this;\r\n        if (\"update\" === change.changeType) {\r\n            that._applyChangeUpdate(change)\r\n        } else if (that.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\r\n            that._applyChangesOnly(change)\r\n        } else if (\"refresh\" === change.changeType) {\r\n            that._applyChangeFull(change)\r\n        }\r\n    }\r\n    _applyChangeFull(change) {\r\n        this._items = change.items.slice(0)\r\n    }\r\n    _getRowIndices(change) {\r\n        const rowIndices = change.rowIndices.slice(0);\r\n        const rowIndexDelta = this.getRowIndexDelta();\r\n        rowIndices.sort(((a, b) => a - b));\r\n        for (let i = 0; i < rowIndices.length; i++) {\r\n            let correctedRowIndex = rowIndices[i];\r\n            if (change.allowInvisibleRowIndices) {\r\n                correctedRowIndex += rowIndexDelta\r\n            }\r\n            if (correctedRowIndex < 0) {\r\n                rowIndices.splice(i, 1);\r\n                i--\r\n            }\r\n        }\r\n        return rowIndices\r\n    }\r\n    _applyChangeUpdate(change) {\r\n        const that = this;\r\n        const {\r\n            items: items\r\n        } = change;\r\n        const rowIndices = that._getRowIndices(change);\r\n        const rowIndexDelta = that.getRowIndexDelta();\r\n        const repaintChangesOnly = that.option(\"repaintChangesOnly\");\r\n        let prevIndex = -1;\r\n        let rowIndexCorrection = 0;\r\n        let changeType;\r\n        change.items = [];\r\n        change.rowIndices = [];\r\n        change.columnIndices = [];\r\n        change.changeTypes = [];\r\n        const equalItems = function(item1, item2, strict) {\r\n            let result = item1 && item2 && equalByValue(item1.key, item2.key);\r\n            if (result && strict) {\r\n                result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing)\r\n            }\r\n            return result\r\n        };\r\n        each(rowIndices, ((index, rowIndex) => {\r\n            let columnIndices;\r\n            rowIndex += rowIndexCorrection + rowIndexDelta;\r\n            if (prevIndex === rowIndex) {\r\n                return\r\n            }\r\n            prevIndex = rowIndex;\r\n            const oldItem = that._items[rowIndex];\r\n            const oldNextItem = that._items[rowIndex + 1];\r\n            const newItem = items[rowIndex];\r\n            const newNextItem = items[rowIndex + 1];\r\n            const strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\r\n            if (newItem) {\r\n                newItem.rowIndex = rowIndex;\r\n                change.items.push(newItem)\r\n            }\r\n            if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\r\n                changeType = \"update\";\r\n                that._items[rowIndex] = newItem;\r\n                if (oldItem.visible !== newItem.visible) {\r\n                    change.items.splice(-1, 1, {\r\n                        visible: newItem.visible\r\n                    })\r\n                } else if (repaintChangesOnly && !change.isFullUpdate) {\r\n                    columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta)\r\n                }\r\n            } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\r\n                changeType = \"insert\";\r\n                that._items.splice(rowIndex, 0, newItem);\r\n                rowIndexCorrection++\r\n            } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\r\n                changeType = \"remove\";\r\n                that._items.splice(rowIndex, 1);\r\n                rowIndexCorrection--;\r\n                prevIndex = -1\r\n            } else if (newItem) {\r\n                changeType = \"update\";\r\n                that._items[rowIndex] = newItem\r\n            } else {\r\n                return\r\n            }\r\n            change.rowIndices.push(rowIndex - rowIndexDelta);\r\n            change.changeTypes.push(changeType);\r\n            change.columnIndices.push(columnIndices)\r\n        }))\r\n    }\r\n    _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n        if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\r\n            return true\r\n        }\r\n\r\n        function isCellModified(row, columnIndex) {\r\n            return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false\r\n        }\r\n        if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    _getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n        let columnIndices;\r\n        if (oldItem.rowType === newItem.rowType) {\r\n            if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\r\n                columnIndices = [];\r\n                if (\"detail\" !== newItem.rowType) {\r\n                    for (let columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\r\n                        if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\r\n                            columnIndices.push(columnIndex)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (\"group\" === newItem.rowType && oldItem.cells) {\r\n                const isRowStateEquals = newItem.isExpanded === oldItem.isExpanded && newItem.data.isContinuation === oldItem.data.isContinuation && newItem.data.isContinuationOnNextPage === oldItem.data.isContinuationOnNextPage;\r\n                if (isRowStateEquals) {\r\n                    columnIndices = oldItem.cells.map(((cell, index) => {\r\n                        var _cell$column;\r\n                        return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1\r\n                    })).filter((index => index >= 0))\r\n                }\r\n            }\r\n        }\r\n        return columnIndices\r\n    }\r\n    _partialUpdateRow(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n        var _changedColumnIndices;\r\n        let changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\r\n        if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\r\n            changedColumnIndices = void 0\r\n        }\r\n        if (changedColumnIndices) {\r\n            oldItem.cells && oldItem.cells.forEach(((cell, columnIndex) => {\r\n                const isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\r\n                if (!isCellChanged && cell && cell.update) {\r\n                    cell.update(newItem)\r\n                }\r\n            }));\r\n            newItem.update = oldItem.update;\r\n            newItem.watch = oldItem.watch;\r\n            newItem.cells = oldItem.cells;\r\n            if (isLiveUpdate) {\r\n                newItem.oldValues = oldItem.values\r\n            }\r\n            oldItem.update && oldItem.update(newItem)\r\n        }\r\n        return changedColumnIndices\r\n    }\r\n    _isItemEquals(item1, item2) {\r\n        if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\r\n            return false\r\n        }\r\n        if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some((field => item1[field] !== item2[field]))) {\r\n            return false\r\n        }\r\n        if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\r\n            var _item1$data, _item2$data, _item1$data2, _item2$data2;\r\n            const expandedMatch = item1.isExpanded === item2.isExpanded;\r\n            const summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\r\n            const continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\r\n            if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    _applyChangesOnly(change) {\r\n        const rowIndices = [];\r\n        const columnIndices = [];\r\n        const changeTypes = [];\r\n        const items = [];\r\n        const newIndexByKey = {};\r\n        const isLiveUpdate = (null === change || void 0 === change ? void 0 : change.isLiveUpdate) ?? true;\r\n\r\n        function getRowKey(row) {\r\n            if (row) {\r\n                return `${row.rowType},${JSON.stringify(row.key)}`\r\n            }\r\n            return\r\n        }\r\n        const currentItems = this._items;\r\n        const oldItems = currentItems.slice();\r\n        change.items.forEach(((item, index) => {\r\n            const key = getRowKey(item);\r\n            newIndexByKey[key] = index;\r\n            item.rowIndex = index\r\n        }));\r\n        const result = findChanges(oldItems, change.items, getRowKey, ((item1, item2) => {\r\n            if (!this._isItemEquals(item1, item2)) {\r\n                return false\r\n            }\r\n            if (item1.cells) {\r\n                item1.update && item1.update(item2);\r\n                item1.cells.forEach((cell => {\r\n                    if (cell && cell.update) {\r\n                        cell.update(item2, true)\r\n                    }\r\n                }))\r\n            }\r\n            return true\r\n        }));\r\n        if (!result) {\r\n            this._applyChangeFull(change);\r\n            return\r\n        }\r\n        result.forEach((change => {\r\n            switch (change.type) {\r\n                case \"update\": {\r\n                    const {\r\n                        index: index\r\n                    } = change;\r\n                    const newItem = change.data;\r\n                    const {\r\n                        oldItem: oldItem\r\n                    } = change;\r\n                    const changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, isLiveUpdate);\r\n                    rowIndices.push(index);\r\n                    changeTypes.push(\"update\");\r\n                    items.push(newItem);\r\n                    currentItems[index] = newItem;\r\n                    columnIndices.push(changedColumnIndices);\r\n                    break\r\n                }\r\n                case \"insert\":\r\n                    rowIndices.push(change.index);\r\n                    changeTypes.push(\"insert\");\r\n                    items.push(change.data);\r\n                    columnIndices.push(void 0);\r\n                    currentItems.splice(change.index, 0, change.data);\r\n                    break;\r\n                case \"remove\":\r\n                    rowIndices.push(change.index);\r\n                    changeTypes.push(\"remove\");\r\n                    currentItems.splice(change.index, 1);\r\n                    items.push(change.oldItem);\r\n                    columnIndices.push(void 0)\r\n            }\r\n        }));\r\n        change.repaintChangesOnly = true;\r\n        change.changeType = \"update\";\r\n        change.rowIndices = rowIndices;\r\n        change.columnIndices = columnIndices;\r\n        change.changeTypes = changeTypes;\r\n        change.items = items;\r\n        if (oldItems.length) {\r\n            change.isLiveUpdate = true\r\n        }\r\n        this._correctRowIndices((rowIndex => {\r\n            const oldRowIndexOffset = this._rowIndexOffset || 0;\r\n            const rowIndexOffset = this.getRowIndexOffset();\r\n            const oldItem = oldItems[rowIndex - oldRowIndexOffset];\r\n            const key = getRowKey(oldItem);\r\n            const newVisibleRowIndex = newIndexByKey[key];\r\n            return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0\r\n        }))\r\n    }\r\n    _correctRowIndices(rowIndex) {}\r\n    _afterProcessItems(items, change) {\r\n        return items\r\n    }\r\n    _updateItemsCore(change) {\r\n        let items;\r\n        const dataSource = this._dataSource;\r\n        const changeType = change.changeType || \"refresh\";\r\n        change.changeType = changeType;\r\n        if (dataSource) {\r\n            const cachedProcessedItems = this._cachedProcessedItems;\r\n            if (change.useProcessedItemsCache && cachedProcessedItems) {\r\n                items = cachedProcessedItems\r\n            } else {\r\n                items = change.items || dataSource.items();\r\n                items = this._beforeProcessItems(items);\r\n                items = this._processItems(items, change);\r\n                this._cachedProcessedItems = items\r\n            }\r\n            items = this._afterProcessItems(items, change);\r\n            change.items = items;\r\n            const oldItems = this._items.length === items.length && this._items;\r\n            this._applyChange(change);\r\n            const rowIndexDelta = this.getRowIndexDelta();\r\n            each(this._items, ((index, item) => {\r\n                item.rowIndex = index - rowIndexDelta;\r\n                if (oldItems) {\r\n                    item.cells = oldItems[index].cells ?? []\r\n                }\r\n                const newItem = items[index];\r\n                if (newItem) {\r\n                    item.loadIndex = newItem.loadIndex\r\n                }\r\n            }));\r\n            this._rowIndexOffset = this.getRowIndexOffset()\r\n        } else {\r\n            this._items = []\r\n        }\r\n    }\r\n    _handleChanging(e) {\r\n        const rows = this.getVisibleRows();\r\n        const dataSource = this.dataSource();\r\n        if (dataSource) {\r\n            e.changes.forEach((change => {\r\n                if (\"insert\" === change.type && change.index >= 0) {\r\n                    let dataIndex = 0;\r\n                    for (let i = 0; i < change.index; i++) {\r\n                        const row = rows[i];\r\n                        if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\r\n                            dataIndex++\r\n                        }\r\n                    }\r\n                    change.index = dataIndex\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    updateItems(change, isDataChanged) {\r\n        change = change || {};\r\n        const that = this;\r\n        if (void 0 !== that._repaintChangesOnly) {\r\n            change.repaintChangesOnly = change.repaintChangesOnly ?? that._repaintChangesOnly;\r\n            change.needUpdateDimensions = change.needUpdateDimensions || that._needUpdateDimensions\r\n        } else if (change.changes) {\r\n            change.repaintChangesOnly = that.option(\"repaintChangesOnly\")\r\n        } else if (isDataChanged) {\r\n            const operationTypes = that.dataSource().operationTypes();\r\n            change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && that.option(\"repaintChangesOnly\");\r\n            change.isDataChanged = true;\r\n            if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\r\n                change.needUpdateDimensions = true\r\n            }\r\n        }\r\n        if (that._updateLockCount && !change.cancel) {\r\n            that._changes.push(change);\r\n            return\r\n        }\r\n        that._updateItemsCore(change);\r\n        if (change.cancel) {\r\n            return\r\n        }\r\n        that._fireChanged(change)\r\n    }\r\n    loadingOperationTypes() {\r\n        const dataSource = this.dataSource();\r\n        return dataSource && dataSource.loadingOperationTypes() || {}\r\n    }\r\n    _fireChanged(change) {\r\n        if (this._currentOperationTypes) {\r\n            change.operationTypes = this._currentOperationTypes;\r\n            this._currentOperationTypes = null\r\n        }\r\n        deferRender((() => {\r\n            this.changed.fire(change)\r\n        }))\r\n    }\r\n    isLoading() {\r\n        return this._isLoading || this._isCustomLoading\r\n    }\r\n    _fireLoadingChanged() {\r\n        this.loadingChanged.fire(this.isLoading(), this._loadingText)\r\n    }\r\n    _calculateAdditionalFilter() {\r\n        return null\r\n    }\r\n    _applyFilter() {\r\n        const dataSource = this._dataSource;\r\n        if (dataSource) {\r\n            dataSource.pageIndex(0);\r\n            this._isFilterApplying = true;\r\n            return this.reload().done((() => {\r\n                if (this._isFilterApplying) {\r\n                    this.pageChanged.fire()\r\n                }\r\n            }))\r\n        }\r\n        return (new Deferred).resolve()\r\n    }\r\n    resetFilterApplying() {\r\n        this._isFilterApplying = false\r\n    }\r\n    filter(filterExpr) {\r\n        var _dataSource$loadOptio;\r\n        const dataSource = this._dataSource;\r\n        const filter = null === dataSource || void 0 === dataSource ? void 0 : dataSource.filter();\r\n        const langParams = null === dataSource || void 0 === dataSource || null === (_dataSource$loadOptio = dataSource.loadOptions) || void 0 === _dataSource$loadOptio || null === (_dataSource$loadOptio = _dataSource$loadOptio.call(dataSource)) || void 0 === _dataSource$loadOptio ? void 0 : _dataSource$loadOptio.langParams;\r\n        if (0 === arguments.length) {\r\n            return filter\r\n        }\r\n        filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\r\n        if (gridCoreUtils.equalFilterParameters(filter, filterExpr, langParams)) {\r\n            return\r\n        }\r\n        if (dataSource) {\r\n            dataSource.filter(filterExpr)\r\n        }\r\n        this._applyFilter()\r\n    }\r\n    clearFilter(filterName) {\r\n        const that = this;\r\n        const columnsController = that._columnsController;\r\n        const clearColumnOption = function(optionName) {\r\n            const columnCount = columnsController.columnCount();\r\n            for (let index = 0; index < columnCount; index++) {\r\n                columnsController.columnOption(index, optionName, void 0)\r\n            }\r\n        };\r\n        that.component.beginUpdate();\r\n        if (arguments.length > 0) {\r\n            switch (filterName) {\r\n                case \"dataSource\":\r\n                    that.filter(null);\r\n                    break;\r\n                case \"search\":\r\n                    that.searchByText(\"\");\r\n                    break;\r\n                case \"header\":\r\n                    clearColumnOption(\"filterValues\");\r\n                    break;\r\n                case \"row\":\r\n                    clearColumnOption(\"filterValue\")\r\n            }\r\n        } else {\r\n            that.filter(null);\r\n            that.searchByText(\"\");\r\n            clearColumnOption(\"filterValue\");\r\n            clearColumnOption(\"bufferedFilterValue\");\r\n            clearColumnOption(\"filterValues\")\r\n        }\r\n        that.component.endUpdate()\r\n    }\r\n    _fireDataSourceChanged() {\r\n        const that = this;\r\n        const changedHandler = function() {\r\n            that.changed.remove(changedHandler);\r\n            that.dataSourceChanged.fire()\r\n        };\r\n        that.changed.add(changedHandler)\r\n    }\r\n    _getDataSourceAdapter() {}\r\n    _createDataSourceAdapterCore(dataSource, remoteOperations) {\r\n        const dataSourceAdapterProvider = this._getDataSourceAdapter();\r\n        const dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\r\n        dataSourceAdapter.init(dataSource, remoteOperations);\r\n        return dataSourceAdapter\r\n    }\r\n    isLocalStore() {\r\n        let store = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.store();\r\n        return store instanceof ArrayStore\r\n    }\r\n    isCustomStore(store) {\r\n        store = store || this.store();\r\n        return store instanceof CustomStore\r\n    }\r\n    _createDataSourceAdapter(dataSource) {\r\n        let remoteOperations = this.option(\"remoteOperations\");\r\n        const store = dataSource.store();\r\n        const enabledRemoteOperations = {\r\n            filtering: true,\r\n            sorting: true,\r\n            paging: true,\r\n            grouping: true,\r\n            summary: true\r\n        };\r\n        if (isObject(remoteOperations) && remoteOperations.groupPaging) {\r\n            remoteOperations = extend({}, enabledRemoteOperations, remoteOperations)\r\n        }\r\n        if (\"auto\" === remoteOperations) {\r\n            remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\r\n                filtering: true,\r\n                sorting: true,\r\n                paging: true\r\n            }\r\n        }\r\n        if (true === remoteOperations) {\r\n            remoteOperations = enabledRemoteOperations\r\n        }\r\n        return this._createDataSourceAdapterCore(dataSource, remoteOperations)\r\n    }\r\n    setDataSource(dataSource) {\r\n        const that = this;\r\n        const oldDataSource = that._dataSource;\r\n        if (!dataSource && oldDataSource) {\r\n            oldDataSource.cancelAll();\r\n            oldDataSource.changed.remove(that._dataChangedHandler);\r\n            oldDataSource.loadingChanged.remove(that._loadingChangedHandler);\r\n            oldDataSource.loadError.remove(that._loadErrorHandler);\r\n            oldDataSource.customizeStoreLoadOptions.remove(that._customizeStoreLoadOptionsHandler);\r\n            oldDataSource.changing.remove(that._changingHandler);\r\n            oldDataSource.pushed.remove(that._dataPushedHandler);\r\n            oldDataSource.dispose(that._isSharedDataSource)\r\n        }\r\n        if (dataSource) {\r\n            dataSource = that._createDataSourceAdapter(dataSource)\r\n        }\r\n        that._dataSource = dataSource;\r\n        if (dataSource) {\r\n            that._fireDataSourceChanged();\r\n            that._isLoading = !dataSource.isLoaded();\r\n            that._needApplyFilter = true;\r\n            that._isAllDataTypesDefined = that._columnsController.isAllDataTypesDefined();\r\n            dataSource.changed.add(that._dataChangedHandler);\r\n            dataSource.loadingChanged.add(that._loadingChangedHandler);\r\n            dataSource.loadError.add(that._loadErrorHandler);\r\n            dataSource.customizeStoreLoadOptions.add(that._customizeStoreLoadOptionsHandler);\r\n            dataSource.changing.add(that._changingHandler);\r\n            dataSource.pushed.add(that._dataPushedHandler)\r\n        }\r\n    }\r\n    items(byLoaded) {\r\n        return this._items\r\n    }\r\n    isEmpty() {\r\n        return !this.items().length\r\n    }\r\n    pageCount() {\r\n        return this._dataSource ? this._dataSource.pageCount() : 1\r\n    }\r\n    dataSource() {\r\n        return this._dataSource\r\n    }\r\n    store() {\r\n        const dataSource = this._dataSource;\r\n        return dataSource && dataSource.store()\r\n    }\r\n    loadAll(data) {\r\n        let skipFilter = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        const that = this;\r\n        const d = new Deferred;\r\n        const dataSource = that._dataSource;\r\n        if (dataSource) {\r\n            if (data) {\r\n                const options = {\r\n                    data: data,\r\n                    isCustomLoading: true,\r\n                    storeLoadOptions: {\r\n                        isLoadingAll: true\r\n                    },\r\n                    loadOptions: {\r\n                        filter: skipFilter ? null : that.getCombinedFilter(),\r\n                        group: dataSource.group(),\r\n                        sort: dataSource.sort()\r\n                    }\r\n                };\r\n                dataSource._handleDataLoaded(options);\r\n                when(options.data).done((data => {\r\n                    var _options$extra;\r\n                    data = that._beforeProcessItems(data);\r\n                    d.resolve(that._processItems(data, {\r\n                        changeType: \"loadingAll\"\r\n                    }), null === (_options$extra = options.extra) || void 0 === _options$extra ? void 0 : _options$extra.summary)\r\n                })).fail(d.reject)\r\n            } else if (!dataSource.isLoading()) {\r\n                const loadOptions = extend({}, dataSource.loadOptions(), {\r\n                    isLoadingAll: true,\r\n                    requireTotalCount: false\r\n                });\r\n                dataSource.load(loadOptions).done(((items, extra) => {\r\n                    items = that._beforeProcessItems(items);\r\n                    items = that._processItems(items, {\r\n                        changeType: \"loadingAll\"\r\n                    });\r\n                    d.resolve(items, extra && extra.summary)\r\n                })).fail(d.reject)\r\n            } else {\r\n                d.reject()\r\n            }\r\n        } else {\r\n            d.resolve([])\r\n        }\r\n        return d\r\n    }\r\n    getKeyByRowIndex(rowIndex, byLoaded) {\r\n        const item = this.items(byLoaded)[rowIndex];\r\n        if (item) {\r\n            return item.key\r\n        }\r\n    }\r\n    getRowIndexByKey(key, byLoaded) {\r\n        return gridCoreUtils.getIndexByKey(key, this.items(byLoaded))\r\n    }\r\n    keyOf(data) {\r\n        const store = this.store();\r\n        if (store) {\r\n            return store.keyOf(data)\r\n        }\r\n    }\r\n    byKey(key) {\r\n        const store = this.store();\r\n        const rowIndex = this.getRowIndexByKey(key);\r\n        let result;\r\n        if (!store) {\r\n            return\r\n        }\r\n        if (rowIndex >= 0) {\r\n            result = (new Deferred).resolve(this.items()[rowIndex].data)\r\n        }\r\n        return result || store.byKey(key)\r\n    }\r\n    key() {\r\n        const store = this.store();\r\n        if (store) {\r\n            return store.key()\r\n        }\r\n    }\r\n    getRowIndexOffset(byLoadedRows) {\r\n        return 0\r\n    }\r\n    getDataByKeys(rowKeys) {\r\n        const that = this;\r\n        const result = new Deferred;\r\n        const deferreds = [];\r\n        const data = [];\r\n        each(rowKeys, ((index, key) => {\r\n            deferreds.push(that.byKey(key).done((keyData => {\r\n                data[index] = keyData\r\n            })))\r\n        }));\r\n        when.apply($, deferreds).always((() => {\r\n            result.resolve(data)\r\n        }));\r\n        return result\r\n    }\r\n    pageIndex(value) {\r\n        return changePaging(this, \"pageIndex\", value)\r\n    }\r\n    pageSize(value) {\r\n        return changePaging(this, \"pageSize\", value)\r\n    }\r\n    beginCustomLoading(messageText) {\r\n        this._isCustomLoading = true;\r\n        this._loadingText = messageText || \"\";\r\n        this._fireLoadingChanged()\r\n    }\r\n    endCustomLoading() {\r\n        this._isCustomLoading = false;\r\n        this._loadingText = void 0;\r\n        this._fireLoadingChanged()\r\n    }\r\n    refresh(options) {\r\n        if (true === options) {\r\n            options = {\r\n                reload: true,\r\n                changesOnly: true\r\n            }\r\n        } else if (!options) {\r\n            options = {\r\n                lookup: true,\r\n                selection: true,\r\n                reload: true\r\n            }\r\n        }\r\n        const that = this;\r\n        const dataSource = that.getDataSource();\r\n        const {\r\n            changesOnly: changesOnly\r\n        } = options;\r\n        const d = new Deferred;\r\n        const customizeLoadResult = function() {\r\n            that._repaintChangesOnly = !!changesOnly\r\n        };\r\n        when(!options.lookup || that._columnsController.refresh()).always((() => {\r\n            if (options.load || options.reload) {\r\n                dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\r\n                when(that.reload(options.reload, changesOnly)).always((() => {\r\n                    dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\r\n                    that._repaintChangesOnly = void 0\r\n                })).done(d.resolve).fail(d.reject)\r\n            } else {\r\n                that.updateItems({\r\n                    repaintChangesOnly: options.changesOnly\r\n                });\r\n                d.resolve()\r\n            }\r\n        }));\r\n        return d.promise()\r\n    }\r\n    getVisibleRows() {\r\n        return this.items()\r\n    }\r\n    _disposeDataSource() {\r\n        if (this._dataSource && this._dataSource._eventsStrategy) {\r\n            this._dataSource._eventsStrategy.off(\"loadingChanged\", this.readyWatcher)\r\n        }\r\n        this.setDataSource(null)\r\n    }\r\n    dispose() {\r\n        this._disposeDataSource();\r\n        super.dispose()\r\n    }\r\n    repaintRows(rowIndexes, changesOnly) {\r\n        rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\r\n        if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\r\n            this.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: rowIndexes,\r\n                isFullUpdate: !changesOnly\r\n            })\r\n        }\r\n    }\r\n    skipProcessingPagingChange(fullName) {\r\n        return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName)\r\n    }\r\n    getUserState() {\r\n        return {\r\n            searchText: this.option(\"searchPanel.text\"),\r\n            pageIndex: this.pageIndex(),\r\n            pageSize: this.pageSize()\r\n        }\r\n    }\r\n    getCachedStoreData() {\r\n        return this._dataSource && this._dataSource.getCachedStoreData()\r\n    }\r\n    isLastPageLoaded() {\r\n        const pageIndex = this.pageIndex();\r\n        const pageCount = this.pageCount();\r\n        return pageIndex === pageCount - 1\r\n    }\r\n    load() {\r\n        var _this$_dataSource;\r\n        return null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.load()\r\n    }\r\n    reload(reload, changesOnly) {\r\n        var _this$_dataSource2;\r\n        return null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.reload(reload, changesOnly)\r\n    }\r\n    push() {\r\n        var _this$_dataSource3;\r\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n            args[_key2] = arguments[_key2]\r\n        }\r\n        return null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.push(...args)\r\n    }\r\n    itemsCount() {\r\n        var _this$_dataSource4;\r\n        return this._dataSource ? null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.itemsCount() : 0\r\n    }\r\n    totalItemsCount() {\r\n        var _this$_dataSource5;\r\n        return this._dataSource ? null === (_this$_dataSource5 = this._dataSource) || void 0 === _this$_dataSource5 ? void 0 : _this$_dataSource5.totalItemsCount() : 0\r\n    }\r\n    hasKnownLastPage() {\r\n        var _this$_dataSource6;\r\n        return this._dataSource ? null === (_this$_dataSource6 = this._dataSource) || void 0 === _this$_dataSource6 ? void 0 : _this$_dataSource6.hasKnownLastPage() : true\r\n    }\r\n    isLoaded() {\r\n        var _this$_dataSource7;\r\n        return this._dataSource ? null === (_this$_dataSource7 = this._dataSource) || void 0 === _this$_dataSource7 ? void 0 : _this$_dataSource7.isLoaded() : true\r\n    }\r\n    totalCount() {\r\n        var _this$_dataSource8;\r\n        return this._dataSource ? null === (_this$_dataSource8 = this._dataSource) || void 0 === _this$_dataSource8 ? void 0 : _this$_dataSource8.totalCount() : 0\r\n    }\r\n    hasLoadOperation() {\r\n        var _this$_dataSource9;\r\n        const operationTypes = (null === (_this$_dataSource9 = this._dataSource) || void 0 === _this$_dataSource9 ? void 0 : _this$_dataSource9.operationTypes()) ?? {};\r\n        return Object.keys(operationTypes).some((type => operationTypes[type]))\r\n    }\r\n}\r\nexport const dataControllerModule = {\r\n    defaultOptions: () => ({\r\n        loadingTimeout: 0,\r\n        dataSource: null,\r\n        cacheEnabled: true,\r\n        repaintChangesOnly: false,\r\n        highlightChanges: false,\r\n        onDataErrorOccurred: null,\r\n        remoteOperations: \"auto\",\r\n        paging: {\r\n            enabled: true,\r\n            pageSize: void 0,\r\n            pageIndex: void 0\r\n        }\r\n    }),\r\n    controllers: {\r\n        data: DataController\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,qCAAqC;AAC5D,SACIC,WAAW,QACR,sCAAsC;AAC7C,OAAOC,CAAC,MAAM,2BAA2B;AACzC,SACIC,WAAW,QACR,sCAAsC;AAC7C,SACIC,WAAW,EACXC,YAAY,QACT,+BAA+B;AACtC,SACIC,QAAQ,EACRC,IAAI,QACD,iCAAiC;AACxC,SACIC,MAAM,QACH,+BAA+B;AACtC,SACIC,IAAI,QACD,iCAAiC;AACxC,SACIC,SAAS,EACTC,QAAQ,QACL,6BAA6B;AACpC,OAAOC,MAAM,MAAM,iCAAiC;AACpD,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,aAAa,MAAM,YAAY;AACtC,SACIC,eAAe,QACZ,uBAAuB;AAC9B,MAAMC,YAAY,GAAG,SAAAA,CAASC,IAAI,EAAEC,UAAU,EAAEC,KAAK,EAAE;EACnD,MAAMC,UAAU,GAAGH,IAAI,CAACI,WAAW;EACnC,IAAID,UAAU,EAAE;IACZ,IAAI,KAAK,CAAC,KAAKD,KAAK,EAAE;MAClB,MAAMG,QAAQ,GAAGL,IAAI,CAACM,qBAAqB,CAACL,UAAU,CAAC;MACvD,IAAII,QAAQ,KAAKH,KAAK,EAAE;QACpB,IAAI,UAAU,KAAKD,UAAU,EAAE;UAC3BE,UAAU,CAACI,SAAS,CAAC,CAAC,CAAC;QAC3B;QACAJ,UAAU,CAACF,UAAU,CAAC,CAACC,KAAK,CAAC;QAC7BF,IAAI,CAACQ,2BAA2B,GAAG,IAAI;QACvCR,IAAI,CAACS,MAAM,CAAC,UAAUR,UAAU,EAAE,EAAEC,KAAK,CAAC;QAC1CF,IAAI,CAACQ,2BAA2B,GAAG,KAAK;QACxC,MAAMD,SAAS,GAAGJ,UAAU,CAACI,SAAS,CAAC,CAAC;QACxCP,IAAI,CAACU,SAAS,GAAG,WAAW,KAAKT,UAAU;QAC3C,OAAOE,UAAU,CAAC,WAAW,KAAKF,UAAU,GAAG,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAACU,IAAI,CAAE,MAAM;UAC5EX,IAAI,CAACU,SAAS,GAAG,KAAK;UACtBV,IAAI,CAACY,WAAW,CAACC,IAAI,CAACN,SAAS,CAAC;QACpC,CAAE,CAAC;MACP;MACA,OAAOlB,QAAQ,CAAC,CAAC,CAACyB,OAAO,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACzC;IACA,OAAOZ,UAAU,CAACF,UAAU,CAAC,CAAC,CAAC;EACnC;EACA,IAAI,WAAW,KAAKA,UAAU,IAAI,KAAK,CAAC,KAAKC,KAAK,EAAE;IAChD,OAAOb,QAAQ,CAAC,CAAC,CAACyB,OAAO,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EACzC;EACA,OAAO,CAAC;AACZ,CAAC;AACD,OAAO,MAAMC,cAAc,SAASlB,eAAe,CAACF,OAAO,CAACqB,UAAU,CAAC,CAAE;EACrEC,IAAIA,CAAA,EAAG;IACH,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,qBAAqB,GAAG,IAAI;IACjC,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,SAAS,CAAC;IACvD,IAAI,CAACC,0BAA0B,GAAG,IAAI,CAACD,aAAa,CAAC,iBAAiB,CAAC;IACvE,IAAI,CAACE,kBAAkB,GAAG,IAAI,CAACF,aAAa,CAAC,SAAS,CAAC;IACvD,IAAI,CAACG,wBAAwB,GAAG,IAAI,CAACH,aAAa,CAAC,eAAe,CAAC;IACnE,IAAI,CAACI,wBAAwB,GAAG,IAAI,CAACJ,aAAa,CAAC,eAAe,CAAC;IACnE,IAAI,CAACK,qBAAqB,GAAG,IAAI,CAACL,aAAa,CAAC,YAAY,CAAC;IAC7D,IAAI,CAACM,sBAAsB,GAAG,IAAI,CAACN,aAAa,CAAC,aAAa,CAAC;IAC/D,IAAI,CAACO,6BAA6B,GAAG,IAAI,CAACP,aAAa,CAAC,oBAAoB,CAAC;IAC7E,IAAI,CAACQ,gBAAgB,GAAG,IAAI,CAACR,aAAa,CAAC,OAAO,CAAC;IACnD,IAAI,CAACS,uBAAuB,GAAG,IAAI,CAACT,aAAa,CAAC,cAAc,CAAC;IACjE,IAAI,CAACU,oBAAoB,GAAG,IAAI,CAACV,aAAa,CAAC,WAAW,CAAC;IAC3D,IAAI,CAACW,uBAAuB,GAAG,IAAI,CAACX,aAAa,CAAC,cAAc,CAAC;IACjE,IAAI,CAACY,qBAAqB,GAAG,IAAI,CAACZ,aAAa,CAAC,YAAY,CAAC;IAC7D,IAAI,CAACZ,SAAS,GAAG,KAAK;IACtB,IAAI,CAACyB,sBAAsB,GAAG,IAAI;IAClC,IAAI,CAACC,mBAAmB,GAAGC,CAAC,IAAI;MAC5B,IAAI,CAACF,sBAAsB,GAAG,IAAI,CAAC/B,WAAW,CAACkC,cAAc,CAAC,CAAC;MAC/D,IAAI,CAACC,kBAAkB,CAACF,CAAC,CAAC;MAC1B,IAAI,CAACF,sBAAsB,GAAG,IAAI;IACtC,CAAC;IACD,IAAI,CAACK,sBAAsB,GAAG,IAAI,CAACC,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC;IACnE,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACC,qBAAqB,CAACF,IAAI,CAAC,IAAI,CAAC;IACnE,IAAI,CAACG,iBAAiB,GAAG,IAAI,CAACC,gBAAgB,CAACJ,IAAI,CAAC,IAAI,CAAC;IACzD,IAAI,CAACK,iCAAiC,GAAG,IAAI,CAACC,gCAAgC,CAACN,IAAI,CAAC,IAAI,CAAC;IACzF,IAAI,CAACO,gBAAgB,GAAG,IAAI,CAACC,eAAe,CAACR,IAAI,CAAC,IAAI,CAAC;IACvD,IAAI,CAACS,kBAAkB,GAAG,IAAI,CAACC,iBAAiB,CAACV,IAAI,CAAC,IAAI,CAAC;IAC3D,IAAI,CAACrB,kBAAkB,CAACgC,cAAc,CAACC,GAAG,CAAC,IAAI,CAACd,sBAAsB,CAAC;IACvE,IAAI,CAACe,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACC,mBAAmB,GAAG,KAAK,CAAC;IACjC,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,YAAY,CAAC,qBAAqB,CAAC;IACxC,IAAI,CAACC,iBAAiB,CAACN,GAAG,CAAEO,KAAK,IAAI,IAAI,CAACC,aAAa,CAAC,qBAAqB,EAAE;MAC3ED,KAAK,EAAEA;IACX,CAAC,CAAE,CAAC;IACJ,IAAI,CAACE,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACC,QAAQ,CAAC,CAAC;EACnB;EACA1D,qBAAqBA,CAACL,UAAU,EAAE;IAC9B,OAAO,IAAI,CAACG,WAAW,CAACH,UAAU,CAAC,CAAC,CAAC;EACzC;EACAgE,aAAaA,CAAA,EAAG;IACZ,OAAO,CAAC,SAAS,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,aAAa,EAAE,mBAAmB,EAAE,QAAQ,CAAC;EAC3G;EACAC,aAAaA,CAACC,IAAI,EAAE;IAChB,IAAI,mBAAmB,KAAKA,IAAI,EAAE;MAC9B,OAAO;QACHC,WAAW,EAAE;MACjB,CAAC;IACL;IACA;EACJ;EACAC,aAAaA,CAAA,EAAG;IACZ,OAAO,CAAC,oBAAoB,EAAE,oBAAoB,EAAE,OAAO,EAAE,aAAa,EAAE,kBAAkB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,eAAe,EAAE,eAAe,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,EAAE,aAAa,EAAE,YAAY,CAAC;EACrT;EACAC,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACjD,kBAAkB,CAACiD,KAAK,CAAC,CAAC;IAC/B,IAAI,CAACnD,MAAM,GAAG,EAAE;IAChB,IAAI,CAAC4C,kBAAkB,CAAC,CAAC;EAC7B;EACAQ,uBAAuBA,CAACC,IAAI,EAAE;IAC1B,IAAIA,IAAI,CAACtE,KAAK,KAAKsE,IAAI,CAACC,aAAa,IAAI,IAAI,CAAChE,MAAM,CAAC,SAAS,CAAC,IAAIiE,KAAK,CAACC,OAAO,CAACH,IAAI,CAACtE,KAAK,CAAC,IAAIwE,KAAK,CAACC,OAAO,CAACH,IAAI,CAACC,aAAa,CAAC,EAAE;MAC/H,MAAMG,cAAc,GAAGJ,IAAI,CAACtE,KAAK,KAAKsE,IAAI,CAACC,aAAa;MACxD,IAAIG,cAAc,EAAE;QAChB,MAAMC,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC,CAAC;QAC1B,IAAIA,KAAK,EAAE;UACPA,KAAK,CAACC,MAAM,GAAGN,IAAI,CAACtE,KAAK;QAC7B;MACJ;MACA,IAAI,IAAI,CAAC6E,+BAA+B,CAACP,IAAI,CAAC,EAAE;QAC5C,IAAI,CAACQ,OAAO,CAAC,IAAI,CAACvE,MAAM,CAAC,oBAAoB,CAAC,CAAC;MACnD;MACA,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAsE,+BAA+BA,CAACP,IAAI,EAAE;IAClC,OAAO,IAAI;EACf;EACAS,aAAaA,CAACT,IAAI,EAAE;IAChB,MAAMxE,IAAI,GAAG,IAAI;IACjB,IAAIG,UAAU;IACd,IAAI+E,oBAAoB;IAExB,SAASC,OAAOA,CAAA,EAAG;MACfX,IAAI,CAACW,OAAO,GAAG,IAAI;IACvB;IACA,IAAI,YAAY,KAAKX,IAAI,CAACL,IAAI,IAAIK,IAAI,CAACL,IAAI,KAAKK,IAAI,CAACY,QAAQ,IAAI,IAAI,CAACb,uBAAuB,CAACC,IAAI,CAAC,EAAE;MACjGW,OAAO,CAAC,CAAC;MACT;IACJ;IACA,QAAQX,IAAI,CAACL,IAAI;MACb,KAAK,cAAc;MACnB,KAAK,oBAAoB;MACzB,KAAK,kBAAkB;MACvB,KAAK,gBAAgB;QACjBgB,OAAO,CAAC,CAAC;QACT;MACJ,KAAK,kBAAkB;MACvB,KAAK,SAAS;MACd,KAAK,YAAY;MACjB,KAAK,WAAW;QACZA,OAAO,CAAC,CAAC;QACTnF,IAAI,CAACsE,KAAK,CAAC,CAAC;QACZ;MACJ,KAAK,QAAQ;QACTnE,UAAU,GAAGH,IAAI,CAACG,UAAU,CAAC,CAAC;QAC9B,IAAIA,UAAU,EAAE;UACZ+E,oBAAoB,GAAGlF,IAAI,CAACqF,iBAAiB,CAAClF,UAAU,CAAC;UACzD,IAAI+E,oBAAoB,EAAE;YACtB,MAAM3E,SAAS,GAAGJ,UAAU,CAACI,SAAS,CAAC,CAAC;YACxC,IAAI,CAACG,SAAS,GAAGwE,oBAAoB,CAACI,kBAAkB;YACxDnF,UAAU,CAACoF,IAAI,CAAC,CAAC,CAAC5E,IAAI,CAAE,MAAM;cAC1B,IAAI,CAACD,SAAS,GAAG,KAAK;cACtBV,IAAI,CAACY,WAAW,CAACC,IAAI,CAACN,SAAS,CAAC;YACpC,CAAE,CAAC;UACP;QACJ;QACA4E,OAAO,CAAC,CAAC;QACT;MACJ,KAAK,YAAY;QACbnF,IAAI,CAACsE,KAAK,CAAC,CAAC;QACZ;MACJ,KAAK,SAAS;QACVnE,UAAU,GAAGH,IAAI,CAACG,UAAU,CAAC,CAAC;QAC9B,IAAIA,UAAU,IAAIA,UAAU,CAACqF,SAAS,CAAC,CAAC,IAAIhB,IAAI,CAACL,IAAI,KAAKK,IAAI,CAACY,QAAQ,EAAE;UACrE,IAAI,CAACK,8BAA8B,GAAG,IAAI;UAC1CtF,UAAU,CAACoF,IAAI,CAAC,CAAC;QACrB;QACA;MACJ;QACI,KAAK,CAACN,aAAa,CAACT,IAAI,CAAC;IACjC;EACJ;EACAkB,OAAOA,CAAA,EAAG;IACN,OAAO,CAAC,IAAI,CAACnC,UAAU;EAC3B;EACAoC,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACvF,WAAW,IAAI,IAAI,CAACA,WAAW,CAACA,WAAW;EAC3D;EACAwF,iBAAiBA,CAACC,eAAe,EAAE;IAC/B,OAAO,IAAI,CAACC,cAAc,CAAC,KAAK,CAAC,EAAED,eAAe,CAAC;EACvD;EACAC,cAAcA,CAACC,MAAM,EAAEF,eAAe,EAAE;IACpC,IAAI,CAAC,IAAI,CAACzF,WAAW,EAAE;MACnB,OAAO2F,MAAM;IACjB;IACA,IAAIC,QAAQ,GAAGD,MAAM,IAAI,IAAI,CAAC3F,WAAW,CAAC2F,MAAM,CAAC,CAAC;IAClD,MAAME,qBAAqB,GAAG,IAAI,CAAC5E,kBAAkB,CAAC6E,mBAAmB,CAAC,CAAC,IAAI,IAAI,CAAC7E,kBAAkB,CAAC8E,qBAAqB,CAAC,CAAC;IAC9H,IAAIF,qBAAqB,EAAE;MACvB,MAAMG,gBAAgB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC;MAC1DL,QAAQ,GAAGI,gBAAgB,GAAGvG,aAAa,CAACyG,cAAc,CAAC,CAACF,gBAAgB,EAAEJ,QAAQ,CAAC,CAAC,GAAGA,QAAQ;IACvG;IACA,MAAMO,iBAAiB,GAAG,IAAI,CAACnG,WAAW,CAACoG,gBAAgB,CAAC,CAAC,CAACC,SAAS,IAAIZ,eAAe;IAC1FG,QAAQ,GAAG,IAAI,CAAC3E,kBAAkB,CAACqF,YAAY,CAACV,QAAQ,EAAEO,iBAAiB,CAAC;IAC5E,OAAOP,QAAQ;EACnB;EACAW,SAASA,CAAA,EAAG;IACR,IAAI,IAAI,CAACC,gBAAgB,EAAE;MACvB,IAAI,CAACC,cAAc,GAAG,IAAIxH,QAAQ,CAAD,CAAC;MAClC,OAAO,IAAI,CAACwH,cAAc;IAC9B;IACA,OAAOvH,IAAI,CAAC,CAAC;EACjB;EACAwH,cAAcA,CAAA,EAAG;IACb,MAAMC,OAAO,GAAG,IAAI,CAACrD,QAAQ;IAC7B,IAAIqD,OAAO,CAACC,MAAM,EAAE;MAChB,IAAI,CAACtD,QAAQ,GAAG,EAAE;MAClB,MAAMuD,kBAAkB,GAAGF,OAAO,CAACG,KAAK,CAAEC,MAAM,IAAIA,MAAM,CAACF,kBAAmB,CAAC;MAC/E,IAAI,CAACG,WAAW,CAAC,CAAC,KAAKL,OAAO,CAACC,MAAM,GAAGD,OAAO,CAAC,CAAC,CAAC,GAAG;QACjDE,kBAAkB,EAAEA;MACxB,CAAC,CAAC;IACN;IACA,IAAI,IAAI,CAACJ,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAAC/F,OAAO,CAAC,CAAC;MAC7B,IAAI,CAAC+F,cAAc,GAAG,IAAI;IAC9B;EACJ;EACA7D,gCAAgCA,CAACX,CAAC,EAAE;IAChC,IAAIgF,qBAAqB;IACzB,MAAMC,iBAAiB,GAAG,IAAI,CAACjG,kBAAkB;IACjD,MAAMlB,UAAU,GAAG,IAAI,CAACC,WAAW;IACnC,MAAM;MACFmH,gBAAgB,EAAEA;IACtB,CAAC,GAAGlF,CAAC;IACL,IAAIA,CAAC,CAACmF,eAAe,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE;MACrD;IACJ;IACAF,gBAAgB,CAACxB,MAAM,GAAG,IAAI,CAACD,cAAc,CAACyB,gBAAgB,CAACxB,MAAM,CAAC;IACtE,IAAI,CAAC,MAAM,IAAI,MAAMsB,qBAAqB,GAAGE,gBAAgB,CAACxB,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKsB,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACL,MAAM,CAAC,IAAI,GAAG,KAAKO,gBAAgB,CAACxB,MAAM,CAAC,CAAC,CAAC,EAAE;MACtL1D,CAAC,CAACqF,IAAI,GAAG,EAAE;MACXrF,CAAC,CAACsF,KAAK,GAAGtF,CAAC,CAACsF,KAAK,IAAI,CAAC,CAAC;MACvBtF,CAAC,CAACsF,KAAK,CAACC,UAAU,GAAG,CAAC;IAC1B;IACA,IAAI,CAACN,iBAAiB,CAACpB,mBAAmB,CAAC,CAAC,EAAE;MAC1CoB,iBAAiB,CAACO,qBAAqB,CAAC1H,UAAU,CAAC;IACvD;IACA,IAAI,CAAC2H,gBAAgB,GAAG,IAAI;IAC5BR,iBAAiB,CAACS,qBAAqB,CAAC5H,UAAU,EAAE,CAAC,IAAI,CAACsF,8BAA8B,CAAC;IACzF,IAAI,CAACqC,gBAAgB,GAAG,KAAK;IAC7BP,gBAAgB,CAACS,IAAI,GAAGV,iBAAiB,CAACW,2BAA2B,CAAC,CAAC;IACvEV,gBAAgB,CAACW,KAAK,GAAGZ,iBAAiB,CAACa,4BAA4B,CAAC,CAAC;IACzEhI,UAAU,CAAC6H,IAAI,CAACT,gBAAgB,CAACS,IAAI,CAAC;IACtC7H,UAAU,CAAC+H,KAAK,CAACX,gBAAgB,CAACW,KAAK,CAAC;IACxCX,gBAAgB,CAACS,IAAI,GAAGV,iBAAiB,CAACW,2BAA2B,CAAC,CAAC9H,UAAU,CAACqG,gBAAgB,CAAC,CAAC,CAAC4B,OAAO,CAAC;IAC7G/F,CAAC,CAAC6F,KAAK,GAAGZ,iBAAiB,CAACa,4BAA4B,CAAC,CAAChI,UAAU,CAACqG,gBAAgB,CAAC,CAAC,CAAC6B,QAAQ,CAAC;EACrG;EACA5F,qBAAqBA,CAACJ,CAAC,EAAE;IACrB,MAAMrC,IAAI,GAAG,IAAI;IACjB,MAAM;MACFsI,WAAW,EAAEA;IACjB,CAAC,GAAGjG,CAAC;IACL,MAAM;MACFkG,WAAW,EAAEA;IACjB,CAAC,GAAGlG,CAAC;IACL,IAAImG,WAAW;IACf,IAAIC,YAAY;IAChB,IAAIC,aAAa;IACjB,MAAMC,kBAAkB,GAAG,SAAAA,CAASxB,MAAM,EAAE;MACxC,IAAIyB,mBAAmB,EAAEC,oBAAoB;MAC7C7I,IAAI,CAACqB,kBAAkB,CAACgC,cAAc,CAACyF,MAAM,CAACH,kBAAkB,CAAC;MACjE3I,IAAI,CAACoH,WAAW,CAAC;QACbH,kBAAkB,EAAE,KAAK;QACzB8B,KAAK,EAAE,IAAI,KAAK5B,MAAM,IAAI,KAAK,CAAC,KAAKA,MAAM,IAAI,IAAI,MAAMyB,mBAAmB,GAAGzB,MAAM,CAACmB,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKM,mBAAmB,GAAG,KAAK,CAAC,GAAGA,mBAAmB,CAACG,KAAK;QACzKC,uBAAuB,EAAE,IAAI,KAAK7B,MAAM,IAAI,KAAK,CAAC,KAAKA,MAAM,IAAI,IAAI,MAAM0B,oBAAoB,GAAG1B,MAAM,CAACmB,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKO,oBAAoB,GAAG,KAAK,CAAC,GAAGA,oBAAoB,CAACG;MAC7L,CAAC,CAAC;IACN,CAAC;IACD,IAAIV,WAAW,CAACF,OAAO,IAAIE,WAAW,CAACD,QAAQ,EAAE;MAC7C,IAAIrI,IAAI,CAACI,WAAW,IAAI,CAACJ,IAAI,CAAC8H,gBAAgB,EAAE;QAC5C9H,IAAI,CAACI,WAAW,CAAC8H,KAAK,CAAClI,IAAI,CAACqB,kBAAkB,CAAC8G,4BAA4B,CAAC,CAAC,CAAC;QAC9EnI,IAAI,CAACI,WAAW,CAAC4H,IAAI,CAAChI,IAAI,CAACqB,kBAAkB,CAAC4G,2BAA2B,CAAC,CAAC,CAAC;QAC5EjI,IAAI,CAACiJ,MAAM,CAAC,CAAC;MACjB;IACJ,CAAC,MAAM,IAAIX,WAAW,CAACY,OAAO,EAAE;MAC5BT,YAAY,GAAGzI,IAAI,CAACqB,kBAAkB,CAAC8H,YAAY,CAAC9G,CAAC,CAAC+G,WAAW,EAAE,cAAc,CAAC;MAClF,IAAIb,WAAW,CAACE,YAAY,IAAIF,WAAW,CAACc,UAAU,IAAI3E,KAAK,CAACC,OAAO,CAAC8D,YAAY,CAAC,IAAIF,WAAW,CAACC,WAAW,IAAID,WAAW,CAACe,uBAAuB,IAAIf,WAAW,CAACgB,cAAc,EAAE;QACnLf,WAAW,GAAGxI,IAAI,CAACqB,kBAAkB,CAAC8H,YAAY,CAAC9G,CAAC,CAAC+G,WAAW,EAAE,aAAa,CAAC;QAChF,IAAI1E,KAAK,CAACC,OAAO,CAAC8D,YAAY,CAAC,IAAI,KAAK,CAAC,KAAKpG,CAAC,CAAC+G,WAAW,IAAI3J,SAAS,CAAC+I,WAAW,CAAC,IAAI,CAACD,WAAW,CAACe,uBAAuB,IAAIf,WAAW,CAACC,WAAW,EAAE;UACtJxI,IAAI,CAACwJ,YAAY,CAAC,CAAC;UACnBd,aAAa,GAAG,IAAI;QACxB;MACJ;MACA,IAAI,CAAC1I,IAAI,CAACyJ,gBAAgB,IAAI,CAAC5J,aAAa,CAAC6J,YAAY,CAACnB,WAAW,EAAE,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,qBAAqB,EAAE,yBAAyB,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC,EAAE;QAC9LvI,IAAI,CAACqB,kBAAkB,CAACgC,cAAc,CAACC,GAAG,CAACqF,kBAAkB,CAAC;MAClE;MACA,IAAIlJ,SAAS,CAAC8I,WAAW,CAACoB,OAAO,CAAC,EAAE;QAChC,MAAMC,MAAM,GAAG5J,IAAI,CAACqB,kBAAkB,CAAC8H,YAAY,CAAC9G,CAAC,CAAC+G,WAAW,CAAC;QAClE,IAAIQ,MAAM,KAAKnK,SAAS,CAACmK,MAAM,CAACpB,WAAW,CAAC,IAAI/I,SAAS,CAACmK,MAAM,CAACnB,YAAY,CAAC,CAAC,EAAE;UAC7EzI,IAAI,CAACwJ,YAAY,CAAC,CAAC;UACnBd,aAAa,GAAG,IAAI;QACxB;MACJ;IACJ;IACA,IAAI,CAACA,aAAa,IAAIJ,WAAW,CAAC7B,SAAS,IAAI,CAAC,IAAI,CAACgD,gBAAgB,EAAE;MACnEzJ,IAAI,CAACiJ,MAAM,CAAC,CAAC;IACjB;EACJ;EACA1G,kBAAkBA,CAACF,CAAC,EAAE;IAClB,MAAMrC,IAAI,GAAG,IAAI;IACjB,MAAMG,UAAU,GAAGH,IAAI,CAACI,WAAW;IACnC,MAAMkH,iBAAiB,GAAGtH,IAAI,CAACqB,kBAAkB;IACjD,IAAIwI,yBAAyB,GAAG,KAAK;IACrC,IAAI,CAACpE,8BAA8B,GAAG,KAAK;IAC3C,IAAItF,UAAU,IAAI,CAACH,IAAI,CAAC8J,qBAAqB,EAAE;MAC3C9J,IAAI,CAAC8J,qBAAqB,GAAG,IAAI;MACjCxK,IAAI,CAACU,IAAI,CAACqB,kBAAkB,CAAC0I,eAAe,CAAC5J,UAAU,CAAC,CAAC,CAACQ,IAAI,CAAE,MAAM;QAClE,IAAIX,IAAI,CAACuD,UAAU,EAAE;UACjBvD,IAAI,CAAC4C,qBAAqB,CAAC,KAAK,CAAC;QACrC;QACA,IAAIiH,yBAAyB,IAAIxH,CAAC,IAAIA,CAAC,CAAC2H,SAAS,EAAE;UAC/C3H,CAAC,CAAC2H,SAAS,GAAG,KAAK;QACvB;QACAhK,IAAI,CAAC8J,qBAAqB,GAAG,KAAK;QAClC,MAAMG,eAAe,GAAGjK,IAAI,CAACyJ,gBAAgB;QAC7CzJ,IAAI,CAACyJ,gBAAgB,GAAG,KAAK;QAC7B,IAAIQ,eAAe,IAAI,CAACjK,IAAI,CAACkK,sBAAsB,IAAI,CAAC,MAAM;UACtD,MAAM9D,gBAAgB,GAAGpG,IAAI,CAACqG,0BAA0B,CAAC,CAAC;UAC1D,OAAOD,gBAAgB,IAAIA,gBAAgB,CAACY,MAAM;QACtD,CAAC,EAAE,CAAC,EAAE;UACNrH,MAAM,CAACwK,GAAG,CAAC,OAAO,EAAEnK,IAAI,CAACoK,SAAS,CAACC,IAAI,CAAC;UACxCrK,IAAI,CAACwJ,YAAY,CAAC,CAAC;QACvB,CAAC,MAAM;UACHxJ,IAAI,CAACoH,WAAW,CAAC/E,CAAC,EAAE,IAAI,CAAC;QAC7B;MACJ,CAAE,CAAC,CAACiI,IAAI,CAAE,MAAM;QACZtK,IAAI,CAAC8J,qBAAqB,GAAG,KAAK;MACtC,CAAE,CAAC;MACH,IAAI9J,IAAI,CAAC8J,qBAAqB,EAAE;QAC5BD,yBAAyB,GAAG,IAAI;QAChC7J,IAAI,CAAC4C,qBAAqB,CAAC,IAAI,CAAC;MACpC;MACA5C,IAAI,CAACyJ,gBAAgB,GAAG,CAACzJ,IAAI,CAACqB,kBAAkB,CAAC6E,mBAAmB,CAAC,CAAC;MACtElG,IAAI,CAACkK,sBAAsB,GAAG5C,iBAAiB,CAACnB,qBAAqB,CAAC,CAAC;IAC3E;EACJ;EACAvD,qBAAqBA,CAAC4C,SAAS,EAAE;IAC7B,IAAI,CAACjC,UAAU,GAAGiC,SAAS;IAC3B,IAAI,CAAC+E,mBAAmB,CAAC,CAAC;EAC9B;EACAzH,gBAAgBA,CAACT,CAAC,EAAE;IAChB,IAAI,CAACuB,iBAAiB,CAAC/C,IAAI,CAACwB,CAAC,CAAC;EAClC;EACAe,iBAAiBA,CAAC2D,OAAO,EAAE;IACvB,IAAI,CAACyD,MAAM,CAAC3J,IAAI,CAACkG,OAAO,CAAC;EAC7B;EACA0D,SAASA,CAAA,EAAG;IACR,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAAC3D,MAAM,EAAExC,IAAI,GAAG,IAAIE,KAAK,CAACgG,IAAI,CAAC,EAAEE,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGF,IAAI,EAAEE,IAAI,EAAE,EAAE;MACrFpG,IAAI,CAACoG,IAAI,CAAC,GAAGD,SAAS,CAACC,IAAI,CAAC;IAChC;IACA,IAAI,CAAChH,iBAAiB,CAAC/C,IAAI,CAAClB,MAAM,CAACkL,KAAK,CAACC,KAAK,CAACnL,MAAM,EAAE6E,IAAI,CAAC,CAAC;EACjE;EACAa,iBAAiBA,CAAClF,UAAU,EAAE;IAC1B,MAAMI,SAAS,GAAG,IAAI,CAACE,MAAM,CAAC,kBAAkB,CAAC;IACjD,MAAMsK,QAAQ,GAAG,IAAI,CAACtK,MAAM,CAAC,iBAAiB,CAAC;IAC/C,MAAMuK,aAAa,GAAG,IAAI,CAACvK,MAAM,CAAC,gBAAgB,CAAC;IACnD,MAAMwK,aAAa,GAAG,IAAI,CAACxK,MAAM,CAAC,gBAAgB,CAAC;IACnD,MAAMyK,UAAU,GAAG,UAAU,KAAKD,aAAa;IAC/C,MAAME,WAAW,GAAG,SAAS,KAAKF,aAAa;IAC/C,MAAMG,QAAQ,GAAGJ,aAAa,IAAIG,WAAW,IAAID,UAAU;IAC3D,IAAIG,iBAAiB,GAAG,KAAK;IAC7B,IAAIC,iBAAiB,GAAG,KAAK;IAC7B,IAAIhG,kBAAkB,GAAG,KAAK;IAC9BnF,UAAU,CAACoL,iBAAiB,CAAC,CAACL,UAAU,CAAC;IACzC,IAAI,KAAK,CAAC,KAAKF,aAAa,IAAI7K,UAAU,CAACiL,QAAQ,CAAC,CAAC,KAAKA,QAAQ,EAAE;MAChEjL,UAAU,CAACiL,QAAQ,CAACA,QAAQ,CAAC;MAC7BC,iBAAiB,GAAG,IAAI;IAC5B;IACA,IAAI,KAAK,CAAC,KAAKN,QAAQ,IAAI5K,UAAU,CAAC4K,QAAQ,CAAC,CAAC,KAAKA,QAAQ,EAAE;MAC3D5K,UAAU,CAAC4K,QAAQ,CAACA,QAAQ,CAAC;MAC7BO,iBAAiB,GAAG,IAAI;IAC5B;IACA,IAAI,KAAK,CAAC,KAAK/K,SAAS,IAAIJ,UAAU,CAACI,SAAS,CAAC,CAAC,KAAKA,SAAS,EAAE;MAC9DJ,UAAU,CAACI,SAAS,CAACA,SAAS,CAAC;MAC/B+E,kBAAkB,GAAG,IAAI;IAC7B;IACA,IAAI+F,iBAAiB,IAAIC,iBAAiB,IAAIhG,kBAAkB,EAAE;MAC9D,OAAO;QACH+F,iBAAiB,EAAEA,iBAAiB;QACpCC,iBAAiB,EAAEA,iBAAiB;QACpChG,kBAAkB,EAAEA;MACxB,CAAC;IACL;IACA,OAAO,KAAK;EAChB;EACAkG,4BAA4BA,CAAA,EAAG;IAC3B,MAAMrL,UAAU,GAAG,IAAI,CAACM,MAAM,CAAC,YAAY,CAAC;IAC5C,IAAIiE,KAAK,CAACC,OAAO,CAACxE,UAAU,CAAC,EAAE;MAC3B,OAAO;QACH0E,KAAK,EAAE;UACH4G,IAAI,EAAE,OAAO;UACb/D,IAAI,EAAEvH,UAAU;UAChBuL,GAAG,EAAE,IAAI,CAACjL,MAAM,CAAC,SAAS;QAC9B;MACJ,CAAC;IACL;IACA,OAAON,UAAU;EACrB;EACAwL,eAAeA,CAAA,EAAG;IACd,MAAM3L,IAAI,GAAG,IAAI;IACjB,MAAM4L,aAAa,GAAG,IAAI,CAACxL,WAAW;IACtC,KAAK,CAACuL,eAAe,CAAC,CAAC;IACvB,MAAMxL,UAAU,GAAGH,IAAI,CAACI,WAAW;IACnCJ,IAAI,CAACyF,8BAA8B,GAAG,IAAI;IAC1CzF,IAAI,CAACoB,qBAAqB,GAAG,IAAI;IACjC,IAAIjB,UAAU,EAAE;MACZ,MAAM+E,oBAAoB,GAAGlF,IAAI,CAACqF,iBAAiB,CAAClF,UAAU,CAAC;MAC/D,IAAI,CAACO,SAAS,GAAG,IAAI,KAAKwE,oBAAoB,IAAI,KAAK,CAAC,KAAKA,oBAAoB,GAAG,KAAK,CAAC,GAAGA,oBAAoB,CAACI,kBAAkB;MACpItF,IAAI,CAAC6L,aAAa,CAAC1L,UAAU,CAAC;IAClC,CAAC,MAAM,IAAIyL,aAAa,EAAE;MACtB5L,IAAI,CAACoH,WAAW,CAAC,CAAC;IACtB;EACJ;EACA0E,eAAeA,CAAA,EAAG;IACd,MAAM9L,IAAI,GAAG,IAAI;IACjB,MAAMG,UAAU,GAAGH,IAAI,CAACI,WAAW;IACnC,MAAM2L,MAAM,GAAG,IAAI1M,QAAQ,CAAD,CAAC;IAC3BC,IAAI,CAAC,IAAI,CAAC+B,kBAAkB,CAAC2D,OAAO,CAAC,IAAI,CAAC,CAAC,CAACgH,MAAM,CAAE,MAAM;MACtD,IAAI7L,UAAU,EAAE;QACZA,UAAU,CAACoF,IAAI,CAAC,CAAC,CAAC5E,IAAI,CAAE,YAAW;UAC/BX,IAAI,CAACU,SAAS,GAAG,KAAK;UACtBqL,MAAM,CAACjL,OAAO,CAACgK,KAAK,CAACiB,MAAM,EAAEpB,SAAS,CAAC;QAC3C,CAAE,CAAC,CAACL,IAAI,CAACyB,MAAM,CAACE,MAAM,CAAC;MAC3B,CAAC,MAAM;QACHF,MAAM,CAACjL,OAAO,CAAC,CAAC;MACpB;IACJ,CAAE,CAAC;IACH,OAAOiL,MAAM,CAAChL,OAAO,CAAC,CAAC;EAC3B;EACAmL,mBAAmBA,CAACC,KAAK,EAAE;IACvB,OAAOA,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;EACzB;EACAC,gBAAgBA,CAAA,EAAG;IACf,OAAO,CAAC;EACZ;EACAC,YAAYA,CAACnF,MAAM,EAAE;IACjB,MAAMoF,YAAY,GAAG,IAAI,CAACpL,MAAM;IAChC,MAAMqL,eAAe,GAAG,QAAQ,KAAKrF,MAAM,CAACsF,UAAU,IAAIF,YAAY,CAACvF,MAAM,GAAG,CAAC,GAAGuF,YAAY,CAACA,YAAY,CAACvF,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;IAChI,OAAOvH,SAAS,CAAC,IAAI,KAAK+M,eAAe,IAAI,KAAK,CAAC,KAAKA,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACE,SAAS,CAAC,GAAGF,eAAe,CAACE,SAAS,GAAG,CAAC,GAAG,CAAC;EACrJ;EACAC,aAAaA,CAACR,KAAK,EAAEhF,MAAM,EAAE;IACzB,MAAMnH,IAAI,GAAG,IAAI;IACjB,MAAM4M,aAAa,GAAG5M,IAAI,CAACqM,gBAAgB,CAAC,CAAC;IAC7C,MAAM;MACFI,UAAU,EAAEA;IAChB,CAAC,GAAGtF,MAAM;IACV,MAAM0F,cAAc,GAAG7M,IAAI,CAACqB,kBAAkB,CAACyL,iBAAiB,CAAC,IAAI,EAAE,YAAY,KAAKL,UAAU,CAAC;IACnG,MAAMC,SAAS,GAAG,IAAI,CAACJ,YAAY,CAACnF,MAAM,CAAC;IAC3C,MAAM4F,OAAO,GAAG;MACZF,cAAc,EAAEA,cAAc;MAC9BH,SAAS,EAAEA;IACf,CAAC;IACD,MAAMX,MAAM,GAAG,EAAE;IACjBvM,IAAI,CAAC2M,KAAK,EAAG,CAACa,KAAK,EAAEC,IAAI,KAAK;MAC1B,IAAIxN,SAAS,CAACwN,IAAI,CAAC,EAAE;QACjBF,OAAO,CAACG,QAAQ,GAAGF,KAAK,GAAGJ,aAAa;QACxCK,IAAI,GAAGjN,IAAI,CAACmN,YAAY,CAACF,IAAI,EAAEF,OAAO,CAAC;QACvChB,MAAM,CAACqB,IAAI,CAACH,IAAI,CAAC;MACrB;IACJ,CAAE,CAAC;IACH,OAAOlB,MAAM;EACjB;EACAoB,YAAYA,CAACF,IAAI,EAAEF,OAAO,EAAE;IACxBE,IAAI,GAAG,IAAI,CAACI,iBAAiB,CAACJ,IAAI,EAAEF,OAAO,CAAC;IAC5CE,IAAI,GAAG,IAAI,CAACK,gBAAgB,CAACL,IAAI,EAAEF,OAAO,CAAC;IAC3CE,IAAI,CAACP,SAAS,GAAGK,OAAO,CAACL,SAAS,EAAE;IACpC,OAAOO,IAAI;EACf;EACAI,iBAAiBA,CAAC3F,IAAI,EAAEqF,OAAO,EAAE;IAC7B,OAAO;MACHQ,OAAO,EAAE,MAAM;MACf7F,IAAI,EAAEA,IAAI;MACVgE,GAAG,EAAE,IAAI,CAAC8B,KAAK,CAAC9F,IAAI;IACxB,CAAC;EACL;EACA4F,gBAAgBA,CAACG,QAAQ,EAAEV,OAAO,EAAE;IAChCU,QAAQ,CAACC,MAAM,GAAG,IAAI,CAACC,kBAAkB,CAACF,QAAQ,CAAC/F,IAAI,EAAEqF,OAAO,CAACF,cAAc,CAAC;IAChF,OAAOY,QAAQ;EACnB;EACAE,kBAAkBA,CAACjG,IAAI,EAAEwB,OAAO,EAAE0E,UAAU,EAAE;IAC1C,MAAMF,MAAM,GAAG,EAAE;IACjB,IAAIxN,KAAK;IACT,KAAK,IAAI2N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3E,OAAO,CAAClC,MAAM,EAAE6G,CAAC,EAAE,EAAE;MACrC,MAAMjE,MAAM,GAAGV,OAAO,CAAC2E,CAAC,CAAC;MACzB3N,KAAK,GAAG0N,UAAU,GAAG,KAAK,CAAC,GAAG,IAAI;MAClC,IAAI,CAAChE,MAAM,CAACkE,OAAO,EAAE;QACjB,IAAIlE,MAAM,CAACmE,kBAAkB,EAAE;UAC3B7N,KAAK,GAAG0J,MAAM,CAACmE,kBAAkB,CAACrG,IAAI,CAAC;QAC3C,CAAC,MAAM,IAAIkC,MAAM,CAACoE,SAAS,EAAE;UACzB9N,KAAK,GAAGwH,IAAI,CAACkC,MAAM,CAACoE,SAAS,CAAC;QAClC;MACJ;MACAN,MAAM,CAACN,IAAI,CAAClN,KAAK,CAAC;IACtB;IACA,OAAOwN,MAAM;EACjB;EACAO,YAAYA,CAAC9G,MAAM,EAAE;IACjB,MAAMnH,IAAI,GAAG,IAAI;IACjB,IAAI,QAAQ,KAAKmH,MAAM,CAACsF,UAAU,EAAE;MAChCzM,IAAI,CAACkO,kBAAkB,CAAC/G,MAAM,CAAC;IACnC,CAAC,MAAM,IAAInH,IAAI,CAACmM,KAAK,CAAC,CAAC,CAACnF,MAAM,IAAIG,MAAM,CAACF,kBAAkB,IAAI,SAAS,KAAKE,MAAM,CAACsF,UAAU,EAAE;MAC5FzM,IAAI,CAACmO,iBAAiB,CAAChH,MAAM,CAAC;IAClC,CAAC,MAAM,IAAI,SAAS,KAAKA,MAAM,CAACsF,UAAU,EAAE;MACxCzM,IAAI,CAACoO,gBAAgB,CAACjH,MAAM,CAAC;IACjC;EACJ;EACAiH,gBAAgBA,CAACjH,MAAM,EAAE;IACrB,IAAI,CAAChG,MAAM,GAAGgG,MAAM,CAACgF,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;EACvC;EACAiC,cAAcA,CAAClH,MAAM,EAAE;IACnB,MAAMmH,UAAU,GAAGnH,MAAM,CAACmH,UAAU,CAAClC,KAAK,CAAC,CAAC,CAAC;IAC7C,MAAMQ,aAAa,GAAG,IAAI,CAACP,gBAAgB,CAAC,CAAC;IAC7CiC,UAAU,CAACtG,IAAI,CAAE,CAACuG,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAE,CAAC;IAClC,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,UAAU,CAACtH,MAAM,EAAE6G,CAAC,EAAE,EAAE;MACxC,IAAIY,iBAAiB,GAAGH,UAAU,CAACT,CAAC,CAAC;MACrC,IAAI1G,MAAM,CAACuH,wBAAwB,EAAE;QACjCD,iBAAiB,IAAI7B,aAAa;MACtC;MACA,IAAI6B,iBAAiB,GAAG,CAAC,EAAE;QACvBH,UAAU,CAACK,MAAM,CAACd,CAAC,EAAE,CAAC,CAAC;QACvBA,CAAC,EAAE;MACP;IACJ;IACA,OAAOS,UAAU;EACrB;EACAJ,kBAAkBA,CAAC/G,MAAM,EAAE;IACvB,MAAMnH,IAAI,GAAG,IAAI;IACjB,MAAM;MACFmM,KAAK,EAAEA;IACX,CAAC,GAAGhF,MAAM;IACV,MAAMmH,UAAU,GAAGtO,IAAI,CAACqO,cAAc,CAAClH,MAAM,CAAC;IAC9C,MAAMyF,aAAa,GAAG5M,IAAI,CAACqM,gBAAgB,CAAC,CAAC;IAC7C,MAAMpF,kBAAkB,GAAGjH,IAAI,CAACS,MAAM,CAAC,oBAAoB,CAAC;IAC5D,IAAImO,SAAS,GAAG,CAAC,CAAC;IAClB,IAAIC,kBAAkB,GAAG,CAAC;IAC1B,IAAIpC,UAAU;IACdtF,MAAM,CAACgF,KAAK,GAAG,EAAE;IACjBhF,MAAM,CAACmH,UAAU,GAAG,EAAE;IACtBnH,MAAM,CAAC2H,aAAa,GAAG,EAAE;IACzB3H,MAAM,CAACmB,WAAW,GAAG,EAAE;IACvB,MAAMyG,UAAU,GAAG,SAAAA,CAASC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAE;MAC9C,IAAInD,MAAM,GAAGiD,KAAK,IAAIC,KAAK,IAAI7P,YAAY,CAAC4P,KAAK,CAACtD,GAAG,EAAEuD,KAAK,CAACvD,GAAG,CAAC;MACjE,IAAIK,MAAM,IAAImD,MAAM,EAAE;QAClBnD,MAAM,GAAGiD,KAAK,CAACzB,OAAO,KAAK0B,KAAK,CAAC1B,OAAO,KAAK,QAAQ,KAAK0B,KAAK,CAAC1B,OAAO,IAAIyB,KAAK,CAACG,SAAS,KAAKF,KAAK,CAACE,SAAS,CAAC;MACnH;MACA,OAAOpD,MAAM;IACjB,CAAC;IACDvM,IAAI,CAAC8O,UAAU,EAAG,CAACtB,KAAK,EAAEE,QAAQ,KAAK;MACnC,IAAI4B,aAAa;MACjB5B,QAAQ,IAAI2B,kBAAkB,GAAGjC,aAAa;MAC9C,IAAIgC,SAAS,KAAK1B,QAAQ,EAAE;QACxB;MACJ;MACA0B,SAAS,GAAG1B,QAAQ;MACpB,MAAMkC,OAAO,GAAGpP,IAAI,CAACmB,MAAM,CAAC+L,QAAQ,CAAC;MACrC,MAAMmC,WAAW,GAAGrP,IAAI,CAACmB,MAAM,CAAC+L,QAAQ,GAAG,CAAC,CAAC;MAC7C,MAAMoC,OAAO,GAAGnD,KAAK,CAACe,QAAQ,CAAC;MAC/B,MAAMqC,WAAW,GAAGpD,KAAK,CAACe,QAAQ,GAAG,CAAC,CAAC;MACvC,MAAMgC,MAAM,GAAGH,UAAU,CAACK,OAAO,EAAEC,WAAW,CAAC,IAAIN,UAAU,CAACO,OAAO,EAAEC,WAAW,CAAC;MACnF,IAAID,OAAO,EAAE;QACTA,OAAO,CAACpC,QAAQ,GAAGA,QAAQ;QAC3B/F,MAAM,CAACgF,KAAK,CAACiB,IAAI,CAACkC,OAAO,CAAC;MAC9B;MACA,IAAIF,OAAO,IAAIE,OAAO,IAAIP,UAAU,CAACK,OAAO,EAAEE,OAAO,EAAEJ,MAAM,CAAC,EAAE;QAC5DzC,UAAU,GAAG,QAAQ;QACrBzM,IAAI,CAACmB,MAAM,CAAC+L,QAAQ,CAAC,GAAGoC,OAAO;QAC/B,IAAIF,OAAO,CAACzF,OAAO,KAAK2F,OAAO,CAAC3F,OAAO,EAAE;UACrCxC,MAAM,CAACgF,KAAK,CAACwC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;YACvBhF,OAAO,EAAE2F,OAAO,CAAC3F;UACrB,CAAC,CAAC;QACN,CAAC,MAAM,IAAI1C,kBAAkB,IAAI,CAACE,MAAM,CAACqI,YAAY,EAAE;UACnDV,aAAa,GAAG9O,IAAI,CAACyP,iBAAiB,CAACL,OAAO,EAAEE,OAAO,EAAEpC,QAAQ,GAAGN,aAAa,CAAC;QACtF;MACJ,CAAC,MAAM,IAAI0C,OAAO,IAAI,CAACF,OAAO,IAAIG,WAAW,IAAIR,UAAU,CAACK,OAAO,EAAEG,WAAW,EAAEL,MAAM,CAAC,EAAE;QACvFzC,UAAU,GAAG,QAAQ;QACrBzM,IAAI,CAACmB,MAAM,CAACwN,MAAM,CAACzB,QAAQ,EAAE,CAAC,EAAEoC,OAAO,CAAC;QACxCT,kBAAkB,EAAE;MACxB,CAAC,MAAM,IAAIO,OAAO,IAAI,CAACE,OAAO,IAAID,WAAW,IAAIN,UAAU,CAACO,OAAO,EAAED,WAAW,EAAEH,MAAM,CAAC,EAAE;QACvFzC,UAAU,GAAG,QAAQ;QACrBzM,IAAI,CAACmB,MAAM,CAACwN,MAAM,CAACzB,QAAQ,EAAE,CAAC,CAAC;QAC/B2B,kBAAkB,EAAE;QACpBD,SAAS,GAAG,CAAC,CAAC;MAClB,CAAC,MAAM,IAAIU,OAAO,EAAE;QAChB7C,UAAU,GAAG,QAAQ;QACrBzM,IAAI,CAACmB,MAAM,CAAC+L,QAAQ,CAAC,GAAGoC,OAAO;MACnC,CAAC,MAAM;QACH;MACJ;MACAnI,MAAM,CAACmH,UAAU,CAAClB,IAAI,CAACF,QAAQ,GAAGN,aAAa,CAAC;MAChDzF,MAAM,CAACmB,WAAW,CAAC8E,IAAI,CAACX,UAAU,CAAC;MACnCtF,MAAM,CAAC2H,aAAa,CAAC1B,IAAI,CAAC0B,aAAa,CAAC;IAC5C,CAAE,CAAC;EACP;EACAY,cAAcA,CAACC,MAAM,EAAEC,MAAM,EAAEC,eAAe,EAAEzG,WAAW,EAAE0G,YAAY,EAAE;IACvE,IAAIC,IAAI,CAACC,SAAS,CAACL,MAAM,CAACjC,MAAM,CAACtE,WAAW,CAAC,CAAC,KAAK2G,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAClC,MAAM,CAACtE,WAAW,CAAC,CAAC,EAAE;MAC3F,OAAO,IAAI;IACf;IAEA,SAAS6G,cAAcA,CAACC,GAAG,EAAE9G,WAAW,EAAE;MACtC,OAAO8G,GAAG,CAACC,cAAc,GAAG,KAAK,CAAC,KAAKD,GAAG,CAACC,cAAc,CAAC/G,WAAW,CAAC,GAAG,KAAK;IAClF;IACA,IAAI6G,cAAc,CAACN,MAAM,EAAEvG,WAAW,CAAC,KAAK6G,cAAc,CAACL,MAAM,EAAExG,WAAW,CAAC,EAAE;MAC7E,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAgH,wBAAwBA,CAAChB,OAAO,EAAEE,OAAO,EAAEO,eAAe,EAAEC,YAAY,EAAE;IACtE,IAAIhB,aAAa;IACjB,IAAIM,OAAO,CAAC7B,OAAO,KAAK+B,OAAO,CAAC/B,OAAO,EAAE;MACrC,IAAI,OAAO,KAAK+B,OAAO,CAAC/B,OAAO,IAAI,aAAa,KAAK+B,OAAO,CAAC/B,OAAO,EAAE;QAClEuB,aAAa,GAAG,EAAE;QAClB,IAAI,QAAQ,KAAKQ,OAAO,CAAC/B,OAAO,EAAE;UAC9B,KAAK,IAAInE,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAGgG,OAAO,CAAC1B,MAAM,CAAC1G,MAAM,EAAEoC,WAAW,EAAE,EAAE;YAC1E,IAAI,IAAI,CAACsG,cAAc,CAACN,OAAO,EAAEE,OAAO,EAAEO,eAAe,EAAEzG,WAAW,EAAE0G,YAAY,CAAC,EAAE;cACnFhB,aAAa,CAAC1B,IAAI,CAAChE,WAAW,CAAC;YACnC;UACJ;QACJ;MACJ;MACA,IAAI,OAAO,KAAKkG,OAAO,CAAC/B,OAAO,IAAI6B,OAAO,CAACiB,KAAK,EAAE;QAC9C,MAAMC,gBAAgB,GAAGhB,OAAO,CAACiB,UAAU,KAAKnB,OAAO,CAACmB,UAAU,IAAIjB,OAAO,CAAC5H,IAAI,CAAC8I,cAAc,KAAKpB,OAAO,CAAC1H,IAAI,CAAC8I,cAAc,IAAIlB,OAAO,CAAC5H,IAAI,CAAC+I,wBAAwB,KAAKrB,OAAO,CAAC1H,IAAI,CAAC+I,wBAAwB;QACpN,IAAIH,gBAAgB,EAAE;UAClBxB,aAAa,GAAGM,OAAO,CAACiB,KAAK,CAACK,GAAG,CAAE,CAACC,IAAI,EAAE3D,KAAK,KAAK;YAChD,IAAI4D,YAAY;YAChB,OAAO,aAAa,MAAM,IAAI,MAAMA,YAAY,GAAGD,IAAI,CAAC/G,MAAM,CAAC,IAAI,KAAK,CAAC,KAAKgH,YAAY,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACnF,IAAI,CAAC,GAAGuB,KAAK,GAAG,CAAC,CAAC;UACzI,CAAE,CAAC,CAACjH,MAAM,CAAEiH,KAAK,IAAIA,KAAK,IAAI,CAAE,CAAC;QACrC;MACJ;IACJ;IACA,OAAO8B,aAAa;EACxB;EACAW,iBAAiBA,CAACL,OAAO,EAAEE,OAAO,EAAEO,eAAe,EAAEC,YAAY,EAAE;IAC/D,IAAIe,qBAAqB;IACzB,IAAIC,oBAAoB,GAAG,IAAI,CAACV,wBAAwB,CAAChB,OAAO,EAAEE,OAAO,EAAEO,eAAe,EAAEC,YAAY,CAAC;IACzG,IAAI,IAAI,MAAMe,qBAAqB,GAAGC,oBAAoB,CAAC,IAAI,KAAK,CAAC,KAAKD,qBAAqB,IAAIA,qBAAqB,CAAC7J,MAAM,IAAI,IAAI,CAACvG,MAAM,CAAC,iBAAiB,CAAC,EAAE;MAC/JqQ,oBAAoB,GAAG,KAAK,CAAC;IACjC;IACA,IAAIA,oBAAoB,EAAE;MACtB1B,OAAO,CAACiB,KAAK,IAAIjB,OAAO,CAACiB,KAAK,CAACU,OAAO,CAAE,CAACJ,IAAI,EAAEvH,WAAW,KAAK;QAC3D,MAAM4H,aAAa,GAAGF,oBAAoB,CAACG,OAAO,CAAC7H,WAAW,CAAC,IAAI,CAAC;QACpE,IAAI,CAAC4H,aAAa,IAAIL,IAAI,IAAIA,IAAI,CAACO,MAAM,EAAE;UACvCP,IAAI,CAACO,MAAM,CAAC5B,OAAO,CAAC;QACxB;MACJ,CAAE,CAAC;MACHA,OAAO,CAAC4B,MAAM,GAAG9B,OAAO,CAAC8B,MAAM;MAC/B5B,OAAO,CAAC6B,KAAK,GAAG/B,OAAO,CAAC+B,KAAK;MAC7B7B,OAAO,CAACe,KAAK,GAAGjB,OAAO,CAACiB,KAAK;MAC7B,IAAIP,YAAY,EAAE;QACdR,OAAO,CAAC8B,SAAS,GAAGhC,OAAO,CAAC1B,MAAM;MACtC;MACA0B,OAAO,CAAC8B,MAAM,IAAI9B,OAAO,CAAC8B,MAAM,CAAC5B,OAAO,CAAC;IAC7C;IACA,OAAOwB,oBAAoB;EAC/B;EACAO,aAAaA,CAACrC,KAAK,EAAEC,KAAK,EAAE;IACxB,IAAIc,IAAI,CAACC,SAAS,CAAChB,KAAK,CAACtB,MAAM,CAAC,KAAKqC,IAAI,CAACC,SAAS,CAACf,KAAK,CAACvB,MAAM,CAAC,EAAE;MAC/D,OAAO,KAAK;IAChB;IACA,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC4D,IAAI,CAAEC,KAAK,IAAIvC,KAAK,CAACuC,KAAK,CAAC,KAAKtC,KAAK,CAACsC,KAAK,CAAE,CAAC,EAAE;MACjG,OAAO,KAAK;IAChB;IACA,IAAI,OAAO,KAAKvC,KAAK,CAACzB,OAAO,IAAI,aAAa,KAAKyB,KAAK,CAACzB,OAAO,EAAE;MAC9D,IAAIiE,WAAW,EAAEC,WAAW,EAAEC,YAAY,EAAEC,YAAY;MACxD,MAAMC,aAAa,GAAG5C,KAAK,CAACuB,UAAU,KAAKtB,KAAK,CAACsB,UAAU;MAC3D,MAAMsB,iBAAiB,GAAG9B,IAAI,CAACC,SAAS,CAAChB,KAAK,CAAC8C,YAAY,CAAC,KAAK/B,IAAI,CAACC,SAAS,CAACf,KAAK,CAAC6C,YAAY,CAAC;MACnG,MAAMC,iBAAiB,GAAG,CAAC,IAAI,MAAMP,WAAW,GAAGxC,KAAK,CAACtH,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK8J,WAAW,GAAG,KAAK,CAAC,GAAGA,WAAW,CAAChB,cAAc,OAAO,IAAI,MAAMiB,WAAW,GAAGxC,KAAK,CAACvH,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK+J,WAAW,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACjB,cAAc,CAAC,IAAI,CAAC,IAAI,MAAMkB,YAAY,GAAG1C,KAAK,CAACtH,IAAI,CAAC,IAAI,KAAK,CAAC,KAAKgK,YAAY,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACjB,wBAAwB,OAAO,IAAI,MAAMkB,YAAY,GAAG1C,KAAK,CAACvH,IAAI,CAAC,IAAI,KAAK,CAAC,KAAKiK,YAAY,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAClB,wBAAwB,CAAC;MACtd,IAAI,CAACmB,aAAa,IAAI,CAACC,iBAAiB,IAAI,CAACE,iBAAiB,EAAE;QAC5D,OAAO,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf;EACA5D,iBAAiBA,CAAChH,MAAM,EAAE;IACtB,MAAMmH,UAAU,GAAG,EAAE;IACrB,MAAMQ,aAAa,GAAG,EAAE;IACxB,MAAMxG,WAAW,GAAG,EAAE;IACtB,MAAM6D,KAAK,GAAG,EAAE;IAChB,MAAM6F,aAAa,GAAG,CAAC,CAAC;IACxB,MAAMlC,YAAY,GAAG,CAAC,IAAI,KAAK3I,MAAM,IAAI,KAAK,CAAC,KAAKA,MAAM,GAAG,KAAK,CAAC,GAAGA,MAAM,CAAC2I,YAAY,KAAK,IAAI;IAElG,SAASmC,SAASA,CAAC/B,GAAG,EAAE;MACpB,IAAIA,GAAG,EAAE;QACL,OAAO,GAAGA,GAAG,CAAC3C,OAAO,IAAIwC,IAAI,CAACC,SAAS,CAACE,GAAG,CAACxE,GAAG,CAAC,EAAE;MACtD;MACA;IACJ;IACA,MAAMwG,YAAY,GAAG,IAAI,CAAC/Q,MAAM;IAChC,MAAMgR,QAAQ,GAAGD,YAAY,CAAC9F,KAAK,CAAC,CAAC;IACrCjF,MAAM,CAACgF,KAAK,CAAC4E,OAAO,CAAE,CAAC9D,IAAI,EAAED,KAAK,KAAK;MACnC,MAAMtB,GAAG,GAAGuG,SAAS,CAAChF,IAAI,CAAC;MAC3B+E,aAAa,CAACtG,GAAG,CAAC,GAAGsB,KAAK;MAC1BC,IAAI,CAACC,QAAQ,GAAGF,KAAK;IACzB,CAAE,CAAC;IACH,MAAMjB,MAAM,GAAG7M,WAAW,CAACiT,QAAQ,EAAEhL,MAAM,CAACgF,KAAK,EAAE8F,SAAS,EAAG,CAACjD,KAAK,EAAEC,KAAK,KAAK;MAC7E,IAAI,CAAC,IAAI,CAACoC,aAAa,CAACrC,KAAK,EAAEC,KAAK,CAAC,EAAE;QACnC,OAAO,KAAK;MAChB;MACA,IAAID,KAAK,CAACqB,KAAK,EAAE;QACbrB,KAAK,CAACkC,MAAM,IAAIlC,KAAK,CAACkC,MAAM,CAACjC,KAAK,CAAC;QACnCD,KAAK,CAACqB,KAAK,CAACU,OAAO,CAAEJ,IAAI,IAAI;UACzB,IAAIA,IAAI,IAAIA,IAAI,CAACO,MAAM,EAAE;YACrBP,IAAI,CAACO,MAAM,CAACjC,KAAK,EAAE,IAAI,CAAC;UAC5B;QACJ,CAAE,CAAC;MACP;MACA,OAAO,IAAI;IACf,CAAE,CAAC;IACH,IAAI,CAAClD,MAAM,EAAE;MACT,IAAI,CAACqC,gBAAgB,CAACjH,MAAM,CAAC;MAC7B;IACJ;IACA4E,MAAM,CAACgF,OAAO,CAAE5J,MAAM,IAAI;MACtB,QAAQA,MAAM,CAACsE,IAAI;QACf,KAAK,QAAQ;UAAE;YACX,MAAM;cACFuB,KAAK,EAAEA;YACX,CAAC,GAAG7F,MAAM;YACV,MAAMmI,OAAO,GAAGnI,MAAM,CAACO,IAAI;YAC3B,MAAM;cACF0H,OAAO,EAAEA;YACb,CAAC,GAAGjI,MAAM;YACV,MAAM2J,oBAAoB,GAAG,IAAI,CAACrB,iBAAiB,CAACL,OAAO,EAAEE,OAAO,EAAEtC,KAAK,EAAE8C,YAAY,CAAC;YAC1FxB,UAAU,CAAClB,IAAI,CAACJ,KAAK,CAAC;YACtB1E,WAAW,CAAC8E,IAAI,CAAC,QAAQ,CAAC;YAC1BjB,KAAK,CAACiB,IAAI,CAACkC,OAAO,CAAC;YACnB4C,YAAY,CAAClF,KAAK,CAAC,GAAGsC,OAAO;YAC7BR,aAAa,CAAC1B,IAAI,CAAC0D,oBAAoB,CAAC;YACxC;UACJ;QACA,KAAK,QAAQ;UACTxC,UAAU,CAAClB,IAAI,CAACjG,MAAM,CAAC6F,KAAK,CAAC;UAC7B1E,WAAW,CAAC8E,IAAI,CAAC,QAAQ,CAAC;UAC1BjB,KAAK,CAACiB,IAAI,CAACjG,MAAM,CAACO,IAAI,CAAC;UACvBoH,aAAa,CAAC1B,IAAI,CAAC,KAAK,CAAC,CAAC;UAC1B8E,YAAY,CAACvD,MAAM,CAACxH,MAAM,CAAC6F,KAAK,EAAE,CAAC,EAAE7F,MAAM,CAACO,IAAI,CAAC;UACjD;QACJ,KAAK,QAAQ;UACT4G,UAAU,CAAClB,IAAI,CAACjG,MAAM,CAAC6F,KAAK,CAAC;UAC7B1E,WAAW,CAAC8E,IAAI,CAAC,QAAQ,CAAC;UAC1B8E,YAAY,CAACvD,MAAM,CAACxH,MAAM,CAAC6F,KAAK,EAAE,CAAC,CAAC;UACpCb,KAAK,CAACiB,IAAI,CAACjG,MAAM,CAACiI,OAAO,CAAC;UAC1BN,aAAa,CAAC1B,IAAI,CAAC,KAAK,CAAC,CAAC;MAClC;IACJ,CAAE,CAAC;IACHjG,MAAM,CAACF,kBAAkB,GAAG,IAAI;IAChCE,MAAM,CAACsF,UAAU,GAAG,QAAQ;IAC5BtF,MAAM,CAACmH,UAAU,GAAGA,UAAU;IAC9BnH,MAAM,CAAC2H,aAAa,GAAGA,aAAa;IACpC3H,MAAM,CAACmB,WAAW,GAAGA,WAAW;IAChCnB,MAAM,CAACgF,KAAK,GAAGA,KAAK;IACpB,IAAIgG,QAAQ,CAACnL,MAAM,EAAE;MACjBG,MAAM,CAAC2I,YAAY,GAAG,IAAI;IAC9B;IACA,IAAI,CAACsC,kBAAkB,CAAElF,QAAQ,IAAI;MACjC,MAAMmF,iBAAiB,GAAG,IAAI,CAACC,eAAe,IAAI,CAAC;MACnD,MAAMC,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAC/C,MAAMpD,OAAO,GAAG+C,QAAQ,CAACjF,QAAQ,GAAGmF,iBAAiB,CAAC;MACtD,MAAM3G,GAAG,GAAGuG,SAAS,CAAC7C,OAAO,CAAC;MAC9B,MAAMqD,kBAAkB,GAAGT,aAAa,CAACtG,GAAG,CAAC;MAC7C,OAAO+G,kBAAkB,IAAI,CAAC,GAAGA,kBAAkB,GAAGF,cAAc,GAAGrF,QAAQ,GAAG,CAAC;IACvF,CAAE,CAAC;EACP;EACAkF,kBAAkBA,CAAClF,QAAQ,EAAE,CAAC;EAC9BwF,kBAAkBA,CAACvG,KAAK,EAAEhF,MAAM,EAAE;IAC9B,OAAOgF,KAAK;EAChB;EACAwG,gBAAgBA,CAACxL,MAAM,EAAE;IACrB,IAAIgF,KAAK;IACT,MAAMhM,UAAU,GAAG,IAAI,CAACC,WAAW;IACnC,MAAMqM,UAAU,GAAGtF,MAAM,CAACsF,UAAU,IAAI,SAAS;IACjDtF,MAAM,CAACsF,UAAU,GAAGA,UAAU;IAC9B,IAAItM,UAAU,EAAE;MACZ,MAAMyS,oBAAoB,GAAG,IAAI,CAACxR,qBAAqB;MACvD,IAAI+F,MAAM,CAAC0L,sBAAsB,IAAID,oBAAoB,EAAE;QACvDzG,KAAK,GAAGyG,oBAAoB;MAChC,CAAC,MAAM;QACHzG,KAAK,GAAGhF,MAAM,CAACgF,KAAK,IAAIhM,UAAU,CAACgM,KAAK,CAAC,CAAC;QAC1CA,KAAK,GAAG,IAAI,CAACD,mBAAmB,CAACC,KAAK,CAAC;QACvCA,KAAK,GAAG,IAAI,CAACQ,aAAa,CAACR,KAAK,EAAEhF,MAAM,CAAC;QACzC,IAAI,CAAC/F,qBAAqB,GAAG+K,KAAK;MACtC;MACAA,KAAK,GAAG,IAAI,CAACuG,kBAAkB,CAACvG,KAAK,EAAEhF,MAAM,CAAC;MAC9CA,MAAM,CAACgF,KAAK,GAAGA,KAAK;MACpB,MAAMgG,QAAQ,GAAG,IAAI,CAAChR,MAAM,CAAC6F,MAAM,KAAKmF,KAAK,CAACnF,MAAM,IAAI,IAAI,CAAC7F,MAAM;MACnE,IAAI,CAAC8M,YAAY,CAAC9G,MAAM,CAAC;MACzB,MAAMyF,aAAa,GAAG,IAAI,CAACP,gBAAgB,CAAC,CAAC;MAC7C7M,IAAI,CAAC,IAAI,CAAC2B,MAAM,EAAG,CAAC6L,KAAK,EAAEC,IAAI,KAAK;QAChCA,IAAI,CAACC,QAAQ,GAAGF,KAAK,GAAGJ,aAAa;QACrC,IAAIuF,QAAQ,EAAE;UACVlF,IAAI,CAACoD,KAAK,GAAG8B,QAAQ,CAACnF,KAAK,CAAC,CAACqD,KAAK,IAAI,EAAE;QAC5C;QACA,MAAMf,OAAO,GAAGnD,KAAK,CAACa,KAAK,CAAC;QAC5B,IAAIsC,OAAO,EAAE;UACTrC,IAAI,CAAC6F,SAAS,GAAGxD,OAAO,CAACwD,SAAS;QACtC;MACJ,CAAE,CAAC;MACH,IAAI,CAACR,eAAe,GAAG,IAAI,CAACE,iBAAiB,CAAC,CAAC;IACnD,CAAC,MAAM;MACH,IAAI,CAACrR,MAAM,GAAG,EAAE;IACpB;EACJ;EACA+B,eAAeA,CAACb,CAAC,EAAE;IACf,MAAM0Q,IAAI,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IAClC,MAAM7S,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC,CAAC;IACpC,IAAIA,UAAU,EAAE;MACZkC,CAAC,CAAC0E,OAAO,CAACgK,OAAO,CAAE5J,MAAM,IAAI;QACzB,IAAI,QAAQ,KAAKA,MAAM,CAACsE,IAAI,IAAItE,MAAM,CAAC6F,KAAK,IAAI,CAAC,EAAE;UAC/C,IAAIN,SAAS,GAAG,CAAC;UACjB,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1G,MAAM,CAAC6F,KAAK,EAAEa,CAAC,EAAE,EAAE;YACnC,MAAMqC,GAAG,GAAG6C,IAAI,CAAClF,CAAC,CAAC;YACnB,IAAIqC,GAAG,KAAK,MAAM,KAAKA,GAAG,CAAC3C,OAAO,IAAI,OAAO,KAAK2C,GAAG,CAAC3C,OAAO,CAAC,EAAE;cAC5Db,SAAS,EAAE;YACf;UACJ;UACAvF,MAAM,CAAC6F,KAAK,GAAGN,SAAS;QAC5B;MACJ,CAAE,CAAC;IACP;EACJ;EACAtF,WAAWA,CAACD,MAAM,EAAE8L,aAAa,EAAE;IAC/B9L,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;IACrB,MAAMnH,IAAI,GAAG,IAAI;IACjB,IAAI,KAAK,CAAC,KAAKA,IAAI,CAACyD,mBAAmB,EAAE;MACrC0D,MAAM,CAACF,kBAAkB,GAAGE,MAAM,CAACF,kBAAkB,IAAIjH,IAAI,CAACyD,mBAAmB;MACjF0D,MAAM,CAAC+L,oBAAoB,GAAG/L,MAAM,CAAC+L,oBAAoB,IAAIlT,IAAI,CAACmT,qBAAqB;IAC3F,CAAC,MAAM,IAAIhM,MAAM,CAACJ,OAAO,EAAE;MACvBI,MAAM,CAACF,kBAAkB,GAAGjH,IAAI,CAACS,MAAM,CAAC,oBAAoB,CAAC;IACjE,CAAC,MAAM,IAAIwS,aAAa,EAAE;MACtB,MAAM3Q,cAAc,GAAGtC,IAAI,CAACG,UAAU,CAAC,CAAC,CAACmC,cAAc,CAAC,CAAC;MACzD6E,MAAM,CAACF,kBAAkB,GAAG3E,cAAc,IAAI,CAACA,cAAc,CAAC+F,QAAQ,IAAI,CAAC/F,cAAc,CAACmE,SAAS,IAAIzG,IAAI,CAACS,MAAM,CAAC,oBAAoB,CAAC;MACxI0G,MAAM,CAAC8L,aAAa,GAAG,IAAI;MAC3B,IAAI3Q,cAAc,KAAKA,cAAc,CAAC2G,MAAM,IAAI3G,cAAc,CAAC8Q,MAAM,IAAI9Q,cAAc,CAAC+Q,cAAc,CAAC,EAAE;QACrGlM,MAAM,CAAC+L,oBAAoB,GAAG,IAAI;MACtC;IACJ;IACA,IAAIlT,IAAI,CAAC4G,gBAAgB,IAAI,CAACO,MAAM,CAACmM,MAAM,EAAE;MACzCtT,IAAI,CAAC0D,QAAQ,CAAC0J,IAAI,CAACjG,MAAM,CAAC;MAC1B;IACJ;IACAnH,IAAI,CAAC2S,gBAAgB,CAACxL,MAAM,CAAC;IAC7B,IAAIA,MAAM,CAACmM,MAAM,EAAE;MACf;IACJ;IACAtT,IAAI,CAACuT,YAAY,CAACpM,MAAM,CAAC;EAC7B;EACAqM,qBAAqBA,CAAA,EAAG;IACpB,MAAMrT,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC,CAAC;IACpC,OAAOA,UAAU,IAAIA,UAAU,CAACqT,qBAAqB,CAAC,CAAC,IAAI,CAAC,CAAC;EACjE;EACAD,YAAYA,CAACpM,MAAM,EAAE;IACjB,IAAI,IAAI,CAAChF,sBAAsB,EAAE;MAC7BgF,MAAM,CAAC7E,cAAc,GAAG,IAAI,CAACH,sBAAsB;MACnD,IAAI,CAACA,sBAAsB,GAAG,IAAI;IACtC;IACAhD,WAAW,CAAE,MAAM;MACf,IAAI,CAACsU,OAAO,CAAC5S,IAAI,CAACsG,MAAM,CAAC;IAC7B,CAAE,CAAC;EACP;EACA3B,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACjC,UAAU,IAAI,IAAI,CAACC,gBAAgB;EACnD;EACA+G,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACmJ,cAAc,CAAC7S,IAAI,CAAC,IAAI,CAAC2E,SAAS,CAAC,CAAC,EAAE,IAAI,CAACmO,YAAY,CAAC;EACjE;EACAtN,0BAA0BA,CAAA,EAAG;IACzB,OAAO,IAAI;EACf;EACAmD,YAAYA,CAAA,EAAG;IACX,MAAMrJ,UAAU,GAAG,IAAI,CAACC,WAAW;IACnC,IAAID,UAAU,EAAE;MACZA,UAAU,CAACI,SAAS,CAAC,CAAC,CAAC;MACvB,IAAI,CAACqT,iBAAiB,GAAG,IAAI;MAC7B,OAAO,IAAI,CAAC3K,MAAM,CAAC,CAAC,CAACtI,IAAI,CAAE,MAAM;QAC7B,IAAI,IAAI,CAACiT,iBAAiB,EAAE;UACxB,IAAI,CAAChT,WAAW,CAACC,IAAI,CAAC,CAAC;QAC3B;MACJ,CAAE,CAAC;IACP;IACA,OAAQ,IAAIxB,QAAQ,CAAD,CAAC,CAAEyB,OAAO,CAAC,CAAC;EACnC;EACA+S,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACD,iBAAiB,GAAG,KAAK;EAClC;EACA7N,MAAMA,CAAC+N,UAAU,EAAE;IACf,IAAIC,qBAAqB;IACzB,MAAM5T,UAAU,GAAG,IAAI,CAACC,WAAW;IACnC,MAAM2F,MAAM,GAAG,IAAI,KAAK5F,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAAC4F,MAAM,CAAC,CAAC;IAC1F,MAAMiO,UAAU,GAAG,IAAI,KAAK7T,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAI,IAAI,MAAM4T,qBAAqB,GAAG5T,UAAU,CAAC8T,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKF,qBAAqB,IAAI,IAAI,MAAMA,qBAAqB,GAAGA,qBAAqB,CAACG,IAAI,CAAC/T,UAAU,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK4T,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACC,UAAU;IAC7T,IAAI,CAAC,KAAKrJ,SAAS,CAAC3D,MAAM,EAAE;MACxB,OAAOjB,MAAM;IACjB;IACA+N,UAAU,GAAGnJ,SAAS,CAAC3D,MAAM,GAAG,CAAC,GAAGtC,KAAK,CAACyP,SAAS,CAAC/H,KAAK,CAAC8H,IAAI,CAACvJ,SAAS,EAAE,CAAC,CAAC,GAAGmJ,UAAU;IACzF,IAAIjU,aAAa,CAACuU,qBAAqB,CAACrO,MAAM,EAAE+N,UAAU,EAAEE,UAAU,CAAC,EAAE;MACrE;IACJ;IACA,IAAI7T,UAAU,EAAE;MACZA,UAAU,CAAC4F,MAAM,CAAC+N,UAAU,CAAC;IACjC;IACA,IAAI,CAACtK,YAAY,CAAC,CAAC;EACvB;EACA6K,WAAWA,CAACC,UAAU,EAAE;IACpB,MAAMtU,IAAI,GAAG,IAAI;IACjB,MAAMsH,iBAAiB,GAAGtH,IAAI,CAACqB,kBAAkB;IACjD,MAAMkT,iBAAiB,GAAG,SAAAA,CAAStU,UAAU,EAAE;MAC3C,MAAMuU,WAAW,GAAGlN,iBAAiB,CAACkN,WAAW,CAAC,CAAC;MACnD,KAAK,IAAIxH,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGwH,WAAW,EAAExH,KAAK,EAAE,EAAE;QAC9C1F,iBAAiB,CAAC6B,YAAY,CAAC6D,KAAK,EAAE/M,UAAU,EAAE,KAAK,CAAC,CAAC;MAC7D;IACJ,CAAC;IACDD,IAAI,CAACoK,SAAS,CAACqK,WAAW,CAAC,CAAC;IAC5B,IAAI9J,SAAS,CAAC3D,MAAM,GAAG,CAAC,EAAE;MACtB,QAAQsN,UAAU;QACd,KAAK,YAAY;UACbtU,IAAI,CAAC+F,MAAM,CAAC,IAAI,CAAC;UACjB;QACJ,KAAK,QAAQ;UACT/F,IAAI,CAAC0U,YAAY,CAAC,EAAE,CAAC;UACrB;QACJ,KAAK,QAAQ;UACTH,iBAAiB,CAAC,cAAc,CAAC;UACjC;QACJ,KAAK,KAAK;UACNA,iBAAiB,CAAC,aAAa,CAAC;MACxC;IACJ,CAAC,MAAM;MACHvU,IAAI,CAAC+F,MAAM,CAAC,IAAI,CAAC;MACjB/F,IAAI,CAAC0U,YAAY,CAAC,EAAE,CAAC;MACrBH,iBAAiB,CAAC,aAAa,CAAC;MAChCA,iBAAiB,CAAC,qBAAqB,CAAC;MACxCA,iBAAiB,CAAC,cAAc,CAAC;IACrC;IACAvU,IAAI,CAACoK,SAAS,CAACuK,SAAS,CAAC,CAAC;EAC9B;EACAC,sBAAsBA,CAAA,EAAG;IACrB,MAAM5U,IAAI,GAAG,IAAI;IACjB,MAAM6U,cAAc,GAAG,SAAAA,CAAA,EAAW;MAC9B7U,IAAI,CAACyT,OAAO,CAAC3K,MAAM,CAAC+L,cAAc,CAAC;MACnC7U,IAAI,CAAC8U,iBAAiB,CAACjU,IAAI,CAAC,CAAC;IACjC,CAAC;IACDb,IAAI,CAACyT,OAAO,CAACnQ,GAAG,CAACuR,cAAc,CAAC;EACpC;EACAE,qBAAqBA,CAAA,EAAG,CAAC;EACzBC,4BAA4BA,CAAC7U,UAAU,EAAEqG,gBAAgB,EAAE;IACvD,MAAMyO,yBAAyB,GAAG,IAAI,CAACF,qBAAqB,CAAC,CAAC;IAC9D,MAAMG,iBAAiB,GAAGD,yBAAyB,CAACE,MAAM,CAAC,IAAI,CAAC/K,SAAS,CAAC;IAC1E8K,iBAAiB,CAAChU,IAAI,CAACf,UAAU,EAAEqG,gBAAgB,CAAC;IACpD,OAAO0O,iBAAiB;EAC5B;EACAE,YAAYA,CAAA,EAAG;IACX,IAAIvQ,KAAK,GAAG8F,SAAS,CAAC3D,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK2D,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC9F,KAAK,CAAC,CAAC;IACzF,OAAOA,KAAK,YAAY9F,UAAU;EACtC;EACAsW,aAAaA,CAACxQ,KAAK,EAAE;IACjBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACA,KAAK,CAAC,CAAC;IAC7B,OAAOA,KAAK,YAAY7F,WAAW;EACvC;EACAsW,wBAAwBA,CAACnV,UAAU,EAAE;IACjC,IAAIqG,gBAAgB,GAAG,IAAI,CAAC/F,MAAM,CAAC,kBAAkB,CAAC;IACtD,MAAMoE,KAAK,GAAG1E,UAAU,CAAC0E,KAAK,CAAC,CAAC;IAChC,MAAM0Q,uBAAuB,GAAG;MAC5B9O,SAAS,EAAE,IAAI;MACf2B,OAAO,EAAE,IAAI;MACbgL,MAAM,EAAE,IAAI;MACZ/K,QAAQ,EAAE,IAAI;MACdmN,OAAO,EAAE;IACb,CAAC;IACD,IAAI9V,QAAQ,CAAC8G,gBAAgB,CAAC,IAAIA,gBAAgB,CAACiP,WAAW,EAAE;MAC5DjP,gBAAgB,GAAGjH,MAAM,CAAC,CAAC,CAAC,EAAEgW,uBAAuB,EAAE/O,gBAAgB,CAAC;IAC5E;IACA,IAAI,MAAM,KAAKA,gBAAgB,EAAE;MAC7BA,gBAAgB,GAAG,IAAI,CAAC4O,YAAY,CAACvQ,KAAK,CAAC,IAAI,IAAI,CAACwQ,aAAa,CAACxQ,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG;QAC5E4B,SAAS,EAAE,IAAI;QACf2B,OAAO,EAAE,IAAI;QACbgL,MAAM,EAAE;MACZ,CAAC;IACL;IACA,IAAI,IAAI,KAAK5M,gBAAgB,EAAE;MAC3BA,gBAAgB,GAAG+O,uBAAuB;IAC9C;IACA,OAAO,IAAI,CAACP,4BAA4B,CAAC7U,UAAU,EAAEqG,gBAAgB,CAAC;EAC1E;EACAqF,aAAaA,CAAC1L,UAAU,EAAE;IACtB,MAAMH,IAAI,GAAG,IAAI;IACjB,MAAM4L,aAAa,GAAG5L,IAAI,CAACI,WAAW;IACtC,IAAI,CAACD,UAAU,IAAIyL,aAAa,EAAE;MAC9BA,aAAa,CAAC8J,SAAS,CAAC,CAAC;MACzB9J,aAAa,CAAC6H,OAAO,CAAC3K,MAAM,CAAC9I,IAAI,CAACoC,mBAAmB,CAAC;MACtDwJ,aAAa,CAAC8H,cAAc,CAAC5K,MAAM,CAAC9I,IAAI,CAAC2C,sBAAsB,CAAC;MAChEiJ,aAAa,CAAC+J,SAAS,CAAC7M,MAAM,CAAC9I,IAAI,CAAC6C,iBAAiB,CAAC;MACtD+I,aAAa,CAACgK,yBAAyB,CAAC9M,MAAM,CAAC9I,IAAI,CAAC+C,iCAAiC,CAAC;MACtF6I,aAAa,CAACiK,QAAQ,CAAC/M,MAAM,CAAC9I,IAAI,CAACiD,gBAAgB,CAAC;MACpD2I,aAAa,CAACpB,MAAM,CAAC1B,MAAM,CAAC9I,IAAI,CAACmD,kBAAkB,CAAC;MACpDyI,aAAa,CAACkK,OAAO,CAAC9V,IAAI,CAAC+V,mBAAmB,CAAC;IACnD;IACA,IAAI5V,UAAU,EAAE;MACZA,UAAU,GAAGH,IAAI,CAACsV,wBAAwB,CAACnV,UAAU,CAAC;IAC1D;IACAH,IAAI,CAACI,WAAW,GAAGD,UAAU;IAC7B,IAAIA,UAAU,EAAE;MACZH,IAAI,CAAC4U,sBAAsB,CAAC,CAAC;MAC7B5U,IAAI,CAACuD,UAAU,GAAG,CAACpD,UAAU,CAAC6V,QAAQ,CAAC,CAAC;MACxChW,IAAI,CAACyJ,gBAAgB,GAAG,IAAI;MAC5BzJ,IAAI,CAACkK,sBAAsB,GAAGlK,IAAI,CAACqB,kBAAkB,CAAC8E,qBAAqB,CAAC,CAAC;MAC7EhG,UAAU,CAACsT,OAAO,CAACnQ,GAAG,CAACtD,IAAI,CAACoC,mBAAmB,CAAC;MAChDjC,UAAU,CAACuT,cAAc,CAACpQ,GAAG,CAACtD,IAAI,CAAC2C,sBAAsB,CAAC;MAC1DxC,UAAU,CAACwV,SAAS,CAACrS,GAAG,CAACtD,IAAI,CAAC6C,iBAAiB,CAAC;MAChD1C,UAAU,CAACyV,yBAAyB,CAACtS,GAAG,CAACtD,IAAI,CAAC+C,iCAAiC,CAAC;MAChF5C,UAAU,CAAC0V,QAAQ,CAACvS,GAAG,CAACtD,IAAI,CAACiD,gBAAgB,CAAC;MAC9C9C,UAAU,CAACqK,MAAM,CAAClH,GAAG,CAACtD,IAAI,CAACmD,kBAAkB,CAAC;IAClD;EACJ;EACAgJ,KAAKA,CAAC8J,QAAQ,EAAE;IACZ,OAAO,IAAI,CAAC9U,MAAM;EACtB;EACA+U,OAAOA,CAAA,EAAG;IACN,OAAO,CAAC,IAAI,CAAC/J,KAAK,CAAC,CAAC,CAACnF,MAAM;EAC/B;EACAmP,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAAC/V,WAAW,GAAG,IAAI,CAACA,WAAW,CAAC+V,SAAS,CAAC,CAAC,GAAG,CAAC;EAC9D;EACAhW,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACC,WAAW;EAC3B;EACAyE,KAAKA,CAAA,EAAG;IACJ,MAAM1E,UAAU,GAAG,IAAI,CAACC,WAAW;IACnC,OAAOD,UAAU,IAAIA,UAAU,CAAC0E,KAAK,CAAC,CAAC;EAC3C;EACAuR,OAAOA,CAAC1O,IAAI,EAAE;IACV,IAAI2O,UAAU,GAAG1L,SAAS,CAAC3D,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK2D,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;IACvF,MAAM3K,IAAI,GAAG,IAAI;IACjB,MAAMsW,CAAC,GAAG,IAAIjX,QAAQ,CAAD,CAAC;IACtB,MAAMc,UAAU,GAAGH,IAAI,CAACI,WAAW;IACnC,IAAID,UAAU,EAAE;MACZ,IAAIuH,IAAI,EAAE;QACN,MAAMqF,OAAO,GAAG;UACZrF,IAAI,EAAEA,IAAI;UACVF,eAAe,EAAE,IAAI;UACrBD,gBAAgB,EAAE;YACdE,YAAY,EAAE;UAClB,CAAC;UACDwM,WAAW,EAAE;YACTlO,MAAM,EAAEsQ,UAAU,GAAG,IAAI,GAAGrW,IAAI,CAAC4F,iBAAiB,CAAC,CAAC;YACpDsC,KAAK,EAAE/H,UAAU,CAAC+H,KAAK,CAAC,CAAC;YACzBF,IAAI,EAAE7H,UAAU,CAAC6H,IAAI,CAAC;UAC1B;QACJ,CAAC;QACD7H,UAAU,CAACoW,iBAAiB,CAACxJ,OAAO,CAAC;QACrCzN,IAAI,CAACyN,OAAO,CAACrF,IAAI,CAAC,CAAC/G,IAAI,CAAE+G,IAAI,IAAI;UAC7B,IAAI8O,cAAc;UAClB9O,IAAI,GAAG1H,IAAI,CAACkM,mBAAmB,CAACxE,IAAI,CAAC;UACrC4O,CAAC,CAACxV,OAAO,CAACd,IAAI,CAAC2M,aAAa,CAACjF,IAAI,EAAE;YAC/B+E,UAAU,EAAE;UAChB,CAAC,CAAC,EAAE,IAAI,MAAM+J,cAAc,GAAGzJ,OAAO,CAACpF,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK6O,cAAc,GAAG,KAAK,CAAC,GAAGA,cAAc,CAAChB,OAAO,CAAC;QACjH,CAAE,CAAC,CAAClL,IAAI,CAACgM,CAAC,CAACrK,MAAM,CAAC;MACtB,CAAC,MAAM,IAAI,CAAC9L,UAAU,CAACqF,SAAS,CAAC,CAAC,EAAE;QAChC,MAAMyO,WAAW,GAAG1U,MAAM,CAAC,CAAC,CAAC,EAAEY,UAAU,CAAC8T,WAAW,CAAC,CAAC,EAAE;UACrDxM,YAAY,EAAE,IAAI;UAClB8D,iBAAiB,EAAE;QACvB,CAAC,CAAC;QACFpL,UAAU,CAACoF,IAAI,CAAC0O,WAAW,CAAC,CAACtT,IAAI,CAAE,CAACwL,KAAK,EAAExE,KAAK,KAAK;UACjDwE,KAAK,GAAGnM,IAAI,CAACkM,mBAAmB,CAACC,KAAK,CAAC;UACvCA,KAAK,GAAGnM,IAAI,CAAC2M,aAAa,CAACR,KAAK,EAAE;YAC9BM,UAAU,EAAE;UAChB,CAAC,CAAC;UACF6J,CAAC,CAACxV,OAAO,CAACqL,KAAK,EAAExE,KAAK,IAAIA,KAAK,CAAC6N,OAAO,CAAC;QAC5C,CAAE,CAAC,CAAClL,IAAI,CAACgM,CAAC,CAACrK,MAAM,CAAC;MACtB,CAAC,MAAM;QACHqK,CAAC,CAACrK,MAAM,CAAC,CAAC;MACd;IACJ,CAAC,MAAM;MACHqK,CAAC,CAACxV,OAAO,CAAC,EAAE,CAAC;IACjB;IACA,OAAOwV,CAAC;EACZ;EACAG,gBAAgBA,CAACvJ,QAAQ,EAAE+I,QAAQ,EAAE;IACjC,MAAMhJ,IAAI,GAAG,IAAI,CAACd,KAAK,CAAC8J,QAAQ,CAAC,CAAC/I,QAAQ,CAAC;IAC3C,IAAID,IAAI,EAAE;MACN,OAAOA,IAAI,CAACvB,GAAG;IACnB;EACJ;EACAgL,gBAAgBA,CAAChL,GAAG,EAAEuK,QAAQ,EAAE;IAC5B,OAAOpW,aAAa,CAAC8W,aAAa,CAACjL,GAAG,EAAE,IAAI,CAACS,KAAK,CAAC8J,QAAQ,CAAC,CAAC;EACjE;EACAzI,KAAKA,CAAC9F,IAAI,EAAE;IACR,MAAM7C,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC,CAAC;IAC1B,IAAIA,KAAK,EAAE;MACP,OAAOA,KAAK,CAAC2I,KAAK,CAAC9F,IAAI,CAAC;IAC5B;EACJ;EACAkP,KAAKA,CAAClL,GAAG,EAAE;IACP,MAAM7G,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC,CAAC;IAC1B,MAAMqI,QAAQ,GAAG,IAAI,CAACwJ,gBAAgB,CAAChL,GAAG,CAAC;IAC3C,IAAIK,MAAM;IACV,IAAI,CAAClH,KAAK,EAAE;MACR;IACJ;IACA,IAAIqI,QAAQ,IAAI,CAAC,EAAE;MACfnB,MAAM,GAAI,IAAI1M,QAAQ,CAAD,CAAC,CAAEyB,OAAO,CAAC,IAAI,CAACqL,KAAK,CAAC,CAAC,CAACe,QAAQ,CAAC,CAACxF,IAAI,CAAC;IAChE;IACA,OAAOqE,MAAM,IAAIlH,KAAK,CAAC+R,KAAK,CAAClL,GAAG,CAAC;EACrC;EACAA,GAAGA,CAAA,EAAG;IACF,MAAM7G,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC,CAAC;IAC1B,IAAIA,KAAK,EAAE;MACP,OAAOA,KAAK,CAAC6G,GAAG,CAAC,CAAC;IACtB;EACJ;EACA8G,iBAAiBA,CAACqE,YAAY,EAAE;IAC5B,OAAO,CAAC;EACZ;EACAC,aAAaA,CAACC,OAAO,EAAE;IACnB,MAAM/W,IAAI,GAAG,IAAI;IACjB,MAAM+L,MAAM,GAAG,IAAI1M,QAAQ,CAAD,CAAC;IAC3B,MAAM2X,SAAS,GAAG,EAAE;IACpB,MAAMtP,IAAI,GAAG,EAAE;IACflI,IAAI,CAACuX,OAAO,EAAG,CAAC/J,KAAK,EAAEtB,GAAG,KAAK;MAC3BsL,SAAS,CAAC5J,IAAI,CAACpN,IAAI,CAAC4W,KAAK,CAAClL,GAAG,CAAC,CAAC/K,IAAI,CAAEsW,OAAO,IAAI;QAC5CvP,IAAI,CAACsF,KAAK,CAAC,GAAGiK,OAAO;MACzB,CAAE,CAAC,CAAC;IACR,CAAE,CAAC;IACH3X,IAAI,CAACwL,KAAK,CAAC7L,CAAC,EAAE+X,SAAS,CAAC,CAAChL,MAAM,CAAE,MAAM;MACnCD,MAAM,CAACjL,OAAO,CAAC4G,IAAI,CAAC;IACxB,CAAE,CAAC;IACH,OAAOqE,MAAM;EACjB;EACAxL,SAASA,CAACL,KAAK,EAAE;IACb,OAAOH,YAAY,CAAC,IAAI,EAAE,WAAW,EAAEG,KAAK,CAAC;EACjD;EACA6K,QAAQA,CAAC7K,KAAK,EAAE;IACZ,OAAOH,YAAY,CAAC,IAAI,EAAE,UAAU,EAAEG,KAAK,CAAC;EAChD;EACAgX,kBAAkBA,CAACC,WAAW,EAAE;IAC5B,IAAI,CAAC3T,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACmQ,YAAY,GAAGwD,WAAW,IAAI,EAAE;IACrC,IAAI,CAAC5M,mBAAmB,CAAC,CAAC;EAC9B;EACA6M,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAAC5T,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACmQ,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACpJ,mBAAmB,CAAC,CAAC;EAC9B;EACAvF,OAAOA,CAAC+H,OAAO,EAAE;IACb,IAAI,IAAI,KAAKA,OAAO,EAAE;MAClBA,OAAO,GAAG;QACN9D,MAAM,EAAE,IAAI;QACZoO,WAAW,EAAE;MACjB,CAAC;IACL,CAAC,MAAM,IAAI,CAACtK,OAAO,EAAE;MACjBA,OAAO,GAAG;QACNuK,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAI;QACftO,MAAM,EAAE;MACZ,CAAC;IACL;IACA,MAAMjJ,IAAI,GAAG,IAAI;IACjB,MAAMG,UAAU,GAAGH,IAAI,CAAC2F,aAAa,CAAC,CAAC;IACvC,MAAM;MACF0R,WAAW,EAAEA;IACjB,CAAC,GAAGtK,OAAO;IACX,MAAMuJ,CAAC,GAAG,IAAIjX,QAAQ,CAAD,CAAC;IACtB,MAAMmY,mBAAmB,GAAG,SAAAA,CAAA,EAAW;MACnCxX,IAAI,CAACyD,mBAAmB,GAAG,CAAC,CAAC4T,WAAW;IAC5C,CAAC;IACD/X,IAAI,CAAC,CAACyN,OAAO,CAACuK,MAAM,IAAItX,IAAI,CAACqB,kBAAkB,CAAC2D,OAAO,CAAC,CAAC,CAAC,CAACgH,MAAM,CAAE,MAAM;MACrE,IAAIe,OAAO,CAACxH,IAAI,IAAIwH,OAAO,CAAC9D,MAAM,EAAE;QAChC9I,UAAU,IAAIA,UAAU,CAACsX,EAAE,CAAC,qBAAqB,EAAED,mBAAmB,CAAC;QACvElY,IAAI,CAACU,IAAI,CAACiJ,MAAM,CAAC8D,OAAO,CAAC9D,MAAM,EAAEoO,WAAW,CAAC,CAAC,CAACrL,MAAM,CAAE,MAAM;UACzD7L,UAAU,IAAIA,UAAU,CAACuX,GAAG,CAAC,qBAAqB,EAAEF,mBAAmB,CAAC;UACxExX,IAAI,CAACyD,mBAAmB,GAAG,KAAK,CAAC;QACrC,CAAE,CAAC,CAAC9C,IAAI,CAAC2V,CAAC,CAACxV,OAAO,CAAC,CAACwJ,IAAI,CAACgM,CAAC,CAACrK,MAAM,CAAC;MACtC,CAAC,MAAM;QACHjM,IAAI,CAACoH,WAAW,CAAC;UACbH,kBAAkB,EAAE8F,OAAO,CAACsK;QAChC,CAAC,CAAC;QACFf,CAAC,CAACxV,OAAO,CAAC,CAAC;MACf;IACJ,CAAE,CAAC;IACH,OAAOwV,CAAC,CAACvV,OAAO,CAAC,CAAC;EACtB;EACAiS,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC7G,KAAK,CAAC,CAAC;EACvB;EACAwL,kBAAkBA,CAAA,EAAG;IACjB,IAAI,IAAI,CAACvX,WAAW,IAAI,IAAI,CAACA,WAAW,CAACwX,eAAe,EAAE;MACtD,IAAI,CAACxX,WAAW,CAACwX,eAAe,CAACF,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACG,YAAY,CAAC;IAC7E;IACA,IAAI,CAAChM,aAAa,CAAC,IAAI,CAAC;EAC5B;EACAiK,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC6B,kBAAkB,CAAC,CAAC;IACzB,KAAK,CAAC7B,OAAO,CAAC,CAAC;EACnB;EACAgC,WAAWA,CAACC,UAAU,EAAEV,WAAW,EAAE;IACjCU,UAAU,GAAGrT,KAAK,CAACC,OAAO,CAACoT,UAAU,CAAC,GAAGA,UAAU,GAAG,CAACA,UAAU,CAAC;IAClE,IAAIA,UAAU,CAAC/Q,MAAM,GAAG,CAAC,IAAIvH,SAAS,CAACsY,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;MACnD,IAAI,CAAC3Q,WAAW,CAAC;QACbqF,UAAU,EAAE,QAAQ;QACpB6B,UAAU,EAAEyJ,UAAU;QACtBvI,YAAY,EAAE,CAAC6H;MACnB,CAAC,CAAC;IACN;EACJ;EACAW,0BAA0BA,CAAC5S,QAAQ,EAAE;IACjC,OAAO,IAAI,CAAC5E,2BAA2B,KAAK,kBAAkB,KAAK4E,QAAQ,IAAI,iBAAiB,KAAKA,QAAQ,CAAC;EAClH;EACA6S,YAAYA,CAAA,EAAG;IACX,OAAO;MACHC,UAAU,EAAE,IAAI,CAACzX,MAAM,CAAC,kBAAkB,CAAC;MAC3CF,SAAS,EAAE,IAAI,CAACA,SAAS,CAAC,CAAC;MAC3BwK,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAAC;IAC5B,CAAC;EACL;EACAoN,kBAAkBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAAC/X,WAAW,IAAI,IAAI,CAACA,WAAW,CAAC+X,kBAAkB,CAAC,CAAC;EACpE;EACAC,gBAAgBA,CAAA,EAAG;IACf,MAAM7X,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC,CAAC;IAClC,MAAM4V,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC,CAAC;IAClC,OAAO5V,SAAS,KAAK4V,SAAS,GAAG,CAAC;EACtC;EACA5Q,IAAIA,CAAA,EAAG;IACH,IAAI8S,iBAAiB;IACrB,OAAO,IAAI,MAAMA,iBAAiB,GAAG,IAAI,CAACjY,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKiY,iBAAiB,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAAC9S,IAAI,CAAC,CAAC;EAC9H;EACA0D,MAAMA,CAACA,MAAM,EAAEoO,WAAW,EAAE;IACxB,IAAIiB,kBAAkB;IACtB,OAAO,IAAI,MAAMA,kBAAkB,GAAG,IAAI,CAAClY,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKkY,kBAAkB,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACrP,MAAM,CAACA,MAAM,EAAEoO,WAAW,CAAC;EACtJ;EACAjK,IAAIA,CAAA,EAAG;IACH,IAAImL,kBAAkB;IACtB,KAAK,IAAIC,KAAK,GAAG7N,SAAS,CAAC3D,MAAM,EAAExC,IAAI,GAAG,IAAIE,KAAK,CAAC8T,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;MAC3FjU,IAAI,CAACiU,KAAK,CAAC,GAAG9N,SAAS,CAAC8N,KAAK,CAAC;IAClC;IACA,OAAO,IAAI,MAAMF,kBAAkB,GAAG,IAAI,CAACnY,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKmY,kBAAkB,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACnL,IAAI,CAAC,GAAG5I,IAAI,CAAC;EACxI;EACAkU,UAAUA,CAAA,EAAG;IACT,IAAIC,kBAAkB;IACtB,OAAO,IAAI,CAACvY,WAAW,GAAG,IAAI,MAAMuY,kBAAkB,GAAG,IAAI,CAACvY,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKuY,kBAAkB,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACD,UAAU,CAAC,CAAC,GAAG,CAAC;EAC9J;EACAE,eAAeA,CAAA,EAAG;IACd,IAAIC,kBAAkB;IACtB,OAAO,IAAI,CAACzY,WAAW,GAAG,IAAI,MAAMyY,kBAAkB,GAAG,IAAI,CAACzY,WAAW,CAAC,IAAI,KAAK,CAAC,KAAKyY,kBAAkB,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACD,eAAe,CAAC,CAAC,GAAG,CAAC;EACnK;EACAE,gBAAgBA,CAAA,EAAG;IACf,IAAIC,kBAAkB;IACtB,OAAO,IAAI,CAAC3Y,WAAW,GAAG,IAAI,MAAM2Y,kBAAkB,GAAG,IAAI,CAAC3Y,WAAW,CAAC,IAAI,KAAK,CAAC,KAAK2Y,kBAAkB,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACD,gBAAgB,CAAC,CAAC,GAAG,IAAI;EACvK;EACA9C,QAAQA,CAAA,EAAG;IACP,IAAIgD,kBAAkB;IACtB,OAAO,IAAI,CAAC5Y,WAAW,GAAG,IAAI,MAAM4Y,kBAAkB,GAAG,IAAI,CAAC5Y,WAAW,CAAC,IAAI,KAAK,CAAC,KAAK4Y,kBAAkB,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAAChD,QAAQ,CAAC,CAAC,GAAG,IAAI;EAC/J;EACApO,UAAUA,CAAA,EAAG;IACT,IAAIqR,kBAAkB;IACtB,OAAO,IAAI,CAAC7Y,WAAW,GAAG,IAAI,MAAM6Y,kBAAkB,GAAG,IAAI,CAAC7Y,WAAW,CAAC,IAAI,KAAK,CAAC,KAAK6Y,kBAAkB,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACrR,UAAU,CAAC,CAAC,GAAG,CAAC;EAC9J;EACAsR,gBAAgBA,CAAA,EAAG;IACf,IAAIC,kBAAkB;IACtB,MAAM7W,cAAc,GAAG,CAAC,IAAI,MAAM6W,kBAAkB,GAAG,IAAI,CAAC/Y,WAAW,CAAC,IAAI,KAAK,CAAC,KAAK+Y,kBAAkB,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAAC7W,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC;IAC/J,OAAO8W,MAAM,CAACC,IAAI,CAAC/W,cAAc,CAAC,CAACgP,IAAI,CAAE7F,IAAI,IAAInJ,cAAc,CAACmJ,IAAI,CAAE,CAAC;EAC3E;AACJ;AACA,OAAO,MAAM6N,oBAAoB,GAAG;EAChCC,cAAc,EAAEA,CAAA,MAAO;IACnBC,cAAc,EAAE,CAAC;IACjBrZ,UAAU,EAAE,IAAI;IAChBsZ,YAAY,EAAE,IAAI;IAClBxS,kBAAkB,EAAE,KAAK;IACzByS,gBAAgB,EAAE,KAAK;IACvBC,mBAAmB,EAAE,IAAI;IACzBnT,gBAAgB,EAAE,MAAM;IACxB4M,MAAM,EAAE;MACJwG,OAAO,EAAE,IAAI;MACb7O,QAAQ,EAAE,KAAK,CAAC;MAChBxK,SAAS,EAAE,KAAK;IACpB;EACJ,CAAC,CAAC;EACFsZ,WAAW,EAAE;IACTnS,IAAI,EAAE1G;EACV;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}