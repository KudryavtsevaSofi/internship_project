{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editing/m_editing.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { name as clickEventName } from \"../../../../common/core/events/click\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport pointerEvents from \"../../../../common/core/events/pointer\";\nimport { removeEvent } from \"../../../../common/core/events/remove\";\nimport { addNamespace } from \"../../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport { createObjectWithChanges } from \"../../../../common/data/array_utils\";\nimport devices from \"../../../../core/devices\";\nimport domAdapter from \"../../../../core/dom_adapter\";\nimport Guid from \"../../../../core/guid\";\nimport $ from \"../../../../core/renderer\";\nimport { equalByValue, getKeyHash } from \"../../../../core/utils/common\";\nimport { Deferred, fromPromise, when } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport * as iconUtils from \"../../../../core/utils/icon\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { deepExtendArraySafe } from \"../../../../core/utils/object\";\nimport { isDefined, isEmptyObject, isFunction, isObject } from \"../../../../core/utils/type\";\nimport { confirm } from \"../../../../ui/dialog\";\nimport { current, isFluent } from \"../../../../ui/themes\";\nimport domUtils from \"../../../core/utils/m_dom\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nimport { ACTION_OPTION_NAMES, BUTTON_NAMES, CELL_BASED_MODES, CELL_FOCUS_DISABLED_CLASS, CELL_MODIFIED, COMMAND_EDIT_CLASS, COMMAND_EDIT_WITH_ICONS_CLASS, DATA_EDIT_DATA_INSERT_TYPE, DATA_EDIT_DATA_REMOVE_TYPE, DATA_EDIT_DATA_UPDATE_TYPE, DEFAULT_START_EDIT_ACTION, EDIT_BUTTON_CLASS, EDIT_FORM_CLASS, EDIT_ICON_CLASS, EDIT_LINK_CLASS, EDIT_MODE_POPUP, EDIT_MODE_ROW, EDIT_MODES, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITING_NAMESPACE, EDITING_POPUP_OPTION_NAME, EDITOR_CELL_CLASS, EDITORS_INPUT_SELECTOR, FIRST_NEW_ROW_POSITION, FOCUSABLE_ELEMENT_SELECTOR, INSERT_INDEX, LAST_NEW_ROW_POSITION, LINK_CLASS, LINK_ICON_CLASS, METHOD_NAMES, PAGE_BOTTOM_NEW_ROW_POSITION, PAGE_TOP_NEW_ROW_POSITION, READONLY_CLASS, REQUIRED_EDITOR_LABELLEDBY_MODES, ROW_BASED_MODES, ROW_CLASS, ROW_INSERTED, ROW_MODIFIED, ROW_SELECTED, TARGET_COMPONENT_NAME, VIEWPORT_BOTTOM_NEW_ROW_POSITION, VIEWPORT_TOP_NEW_ROW_POSITION } from \"./const\";\nimport { createFailureHandler, generateNewRowTempKey, getButtonIndex, getButtonName, getEditingTexts, isEditingCell, isEditingOrShowEditorAlwaysDataCell } from \"./m_editing_utils\";\nclass EditingControllerImpl extends modules.ViewController {\n  init() {\n    this._columnsController = this.getController(\"columns\");\n    this._dataController = this.getController(\"data\");\n    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n    this._validatingController = this.getController(\"validating\");\n    this._editorFactoryController = this.getController(\"editorFactory\");\n    this._focusController = this.getController(\"focus\");\n    this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n    this._columnsResizerController = this.getController(\"columnsResizer\");\n    this._errorHandlingController = this.getController(\"errorHandling\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._headerPanelView = this.getView(\"headerPanel\");\n    this._lastOperation = null;\n    this._changes = [];\n    if (this._deferreds) {\n      this._deferreds.forEach(d => {\n        d.reject(\"cancel\");\n      });\n    }\n    this._deferreds = [];\n    if (!this._dataChangedHandler) {\n      this._dataChangedHandler = this._handleDataChanged.bind(this);\n      this._dataController.changed.add(this._dataChangedHandler);\n    }\n    if (!this._saveEditorHandler) {\n      this.createAction(\"onInitNewRow\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onRowInserting\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onRowInserted\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onEditingStart\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onRowUpdating\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onRowUpdated\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onRowRemoving\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onRowRemoved\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onSaved\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onSaving\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onEditCanceling\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this.createAction(\"onEditCanceled\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n    }\n    this._updateEditColumn();\n    this._updateEditButtons();\n    if (!this._internalState) {\n      this._internalState = new Map();\n    }\n    this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\n    this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;\n  }\n  getEditMode() {\n    const editMode = this.option(\"editing.mode\") ?? EDIT_MODE_ROW;\n    if (EDIT_MODES.includes(editMode)) {\n      return editMode;\n    }\n    return EDIT_MODE_ROW;\n  }\n  isCellBasedEditMode() {\n    const editMode = this.getEditMode();\n    return CELL_BASED_MODES.includes(editMode);\n  }\n  _getDefaultEditorTemplate() {\n    return (container, options) => {\n      const $editor = $(\"<div>\").appendTo(container);\n      const editorOptions = extend({}, options.column, {\n        value: options.value,\n        setValue: options.setValue,\n        row: options.row,\n        parentType: \"dataRow\",\n        width: null,\n        readOnly: !options.setValue,\n        isOnForm: options.isOnForm,\n        id: options.id\n      });\n      const needLabel = REQUIRED_EDITOR_LABELLEDBY_MODES.includes(this.getEditMode());\n      if (needLabel) {\n        editorOptions[\"aria-labelledby\"] = options.column.headerId;\n      }\n      this._editorFactoryController.createEditor($editor, editorOptions);\n    };\n  }\n  _getNewRowPosition() {\n    const newRowPosition = this.option(\"editing.newRowPosition\");\n    const scrollingMode = this.option(\"scrolling.mode\");\n    if (\"virtual\" === scrollingMode) {\n      switch (newRowPosition) {\n        case PAGE_TOP_NEW_ROW_POSITION:\n          return VIEWPORT_TOP_NEW_ROW_POSITION;\n        case PAGE_BOTTOM_NEW_ROW_POSITION:\n          return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n        default:\n          return newRowPosition;\n      }\n    }\n    return newRowPosition;\n  }\n  getChanges() {\n    return this.option(EDITING_CHANGES_OPTION_NAME);\n  }\n  getInsertRowCount() {\n    const changes = this.option(EDITING_CHANGES_OPTION_NAME);\n    return changes.filter(change => \"insert\" === change.type).length;\n  }\n  resetChanges() {\n    const changes = this.getChanges();\n    const needReset = null === changes || void 0 === changes ? void 0 : changes.length;\n    if (needReset) {\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\n      this._internalState.clear();\n    }\n  }\n  _getInternalData(key) {\n    return this._internalState.get(getKeyHash(key));\n  }\n  _addInternalData(params) {\n    const internalData = this._getInternalData(params.key);\n    if (internalData) {\n      return extend(internalData, params);\n    }\n    this._internalState.set(getKeyHash(params.key), params);\n    return params;\n  }\n  _getOldData(key) {\n    var _this$_getInternalDat;\n    return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData;\n  }\n  getUpdatedData(data) {\n    const key = this._dataController.keyOf(data);\n    const changes = this.getChanges();\n    const editIndex = gridCoreUtils.getIndexByKey(key, changes);\n    if (changes[editIndex]) {\n      return createObjectWithChanges(data, changes[editIndex].data);\n    }\n    return data;\n  }\n  getInsertedData() {\n    return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data);\n  }\n  getRemovedData() {\n    return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key));\n  }\n  _fireDataErrorOccurred(arg) {\n    if (\"cancel\" === arg) {\n      return;\n    }\n    const $popupContent = this.getPopupContent();\n    this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n  }\n  _needToCloseEditableCell($targetElement) {}\n  _closeEditItem($targetElement) {}\n  _handleDataChanged(args) {}\n  _isDefaultButtonVisible(button, options) {\n    let result = true;\n    switch (button.name) {\n      case \"delete\":\n        result = this.allowDeleting(options);\n        break;\n      case \"undelete\":\n        result = false;\n    }\n    return result;\n  }\n  isPopupEditMode() {\n    const editMode = this.option(\"editing.mode\");\n    return editMode === EDIT_MODE_POPUP;\n  }\n  _isButtonVisible(button, options) {\n    const {\n      visible: visible\n    } = button;\n    if (!isDefined(visible)) {\n      return this._isDefaultButtonVisible(button, options);\n    }\n    return isFunction(visible) ? visible.call(button, {\n      component: options.component,\n      row: options.row,\n      column: options.column\n    }) : visible;\n  }\n  _isButtonDisabled(button, options) {\n    const {\n      disabled: disabled\n    } = button;\n    return isFunction(disabled) ? disabled.call(button, {\n      component: options.component,\n      row: options.row,\n      column: options.column\n    }) : !!disabled;\n  }\n  _getButtonConfig(button, options) {\n    const config = isObject(button) ? button : {};\n    const buttonName = getButtonName(button);\n    const editingTexts = getEditingTexts(options);\n    const methodName = METHOD_NAMES[buttonName];\n    const editingOptions = this.option(\"editing\");\n    const actionName = ACTION_OPTION_NAMES[buttonName];\n    const allowAction = actionName ? editingOptions[actionName] : true;\n    return extend({\n      name: buttonName,\n      text: editingTexts[buttonName],\n      cssClass: EDIT_LINK_CLASS[buttonName]\n    }, {\n      onClick: methodName && (e => {\n        const {\n          event: event\n        } = e;\n        event.stopPropagation();\n        event.preventDefault();\n        setTimeout(() => {\n          options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex);\n        });\n      })\n    }, config);\n  }\n  _getEditingButtons(options) {\n    let buttonIndex;\n    const haveCustomButtons = !!options.column.buttons;\n    let buttons = (options.column.buttons || []).slice();\n    if (haveCustomButtons) {\n      buttonIndex = getButtonIndex(buttons, \"edit\");\n      if (buttonIndex >= 0) {\n        if (getButtonIndex(buttons, \"save\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"save\");\n        }\n        if (getButtonIndex(buttons, \"cancel\") < 0) {\n          buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n        }\n      }\n      buttonIndex = getButtonIndex(buttons, \"delete\");\n      if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n        buttons.splice(buttonIndex + 1, 0, \"undelete\");\n      }\n    } else {\n      buttons = BUTTON_NAMES.slice();\n    }\n    return buttons.map(button => this._getButtonConfig(button, options));\n  }\n  _renderEditingButtons($container, buttons, options, change) {\n    buttons.forEach(button => {\n      if (this._isButtonVisible(button, options)) {\n        this._createButton($container, button, options, change);\n      }\n    });\n  }\n  _getEditCommandCellTemplate() {\n    return (container, options, change) => {\n      const $container = $(container);\n      if (\"data\" === options.rowType) {\n        const buttons = this._getEditingButtons(options);\n        this._renderEditingButtons($container, buttons, options, change);\n        if (options.watch) {\n          const dispose = options.watch(() => buttons.map(button => ({\n            visible: this._isButtonVisible(button, options),\n            disabled: this._isButtonDisabled(button, options)\n          })), () => {\n            $container.empty();\n            this._renderEditingButtons($container, buttons, options);\n          });\n          eventsEngine.on($container, removeEvent, dispose);\n        }\n      } else {\n        gridCoreUtils.setEmptyText($container);\n      }\n    };\n  }\n  isRowBasedEditMode() {\n    const editMode = this.getEditMode();\n    return ROW_BASED_MODES.includes(editMode);\n  }\n  getFirstEditableColumnIndex() {\n    let columnIndex;\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    each(visibleColumns, (index, column) => {\n      if (column.allowEditing) {\n        columnIndex = index;\n        return false;\n      }\n    });\n    return columnIndex;\n  }\n  getFirstEditableCellInRow(rowIndex) {\n    var _this$_rowsView;\n    const columnIndex = this.getFirstEditableColumnIndex();\n    return null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(rowIndex || 0, columnIndex);\n  }\n  getFocusedCellInRow(rowIndex) {\n    return this.getFirstEditableCellInRow(rowIndex);\n  }\n  getIndexByKey(key, items) {\n    return gridCoreUtils.getIndexByKey(key, items);\n  }\n  hasChanges(rowIndex) {\n    const changes = this.getChanges();\n    let result = false;\n    for (let i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\n      if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\n        result = true;\n        break;\n      }\n    }\n    return result;\n  }\n  dispose() {\n    super.dispose();\n    clearTimeout(this._inputFocusTimeoutID);\n    eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n    eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n    eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n  }\n  _silentOption(name, value) {\n    if (\"editing.changes\" === name) {\n      this._changes = deepExtendArraySafe([], value);\n    }\n    super._silentOption(name, value);\n  }\n  optionChanged(args) {\n    if (\"editing\" === args.name) {\n      const {\n        fullName: fullName\n      } = args;\n      if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\n        this._handleEditRowKeyChange(args);\n      } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\n        const isEqual = equalByValue(args.value, this._changes, {\n          maxDepth: 4\n        });\n        if (!isEqual) {\n          this._changes = deepExtendArraySafe([], args.value);\n          this._handleChangesChange(args);\n        }\n      } else if (!args.handled) {\n        this._columnsController.reinit();\n        this.init();\n        this.resetChanges();\n        this._resetEditColumnName();\n        this._resetEditRowKey();\n      }\n      args.handled = true;\n    } else {\n      super.optionChanged(args);\n    }\n  }\n  _handleEditRowKeyChange(args) {\n    const rowIndex = this._dataController.getRowIndexByKey(args.value);\n    const oldRowIndexCorrection = this._getEditRowIndexCorrection();\n    const oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n    if (isDefined(args.value)) {\n      if (args.value !== args.previousValue) {\n        this._editRowFromOptionChanged(rowIndex, oldRowIndex);\n      }\n    } else {\n      this.cancelEditData();\n    }\n  }\n  _handleChangesChange(args) {\n    const dataController = this._dataController;\n    const changes = args.value;\n    if (!args.value.length && !args.previousValue.length) {\n      return;\n    }\n    changes.forEach(change => {\n      if (\"insert\" === change.type) {\n        this._addInsertInfo(change);\n      } else {\n        var _dataController$items;\n        const items = dataController.getCachedStoreData() || (null === (_dataController$items = dataController.items()) || void 0 === _dataController$items ? void 0 : _dataController$items.map(item => item.data));\n        const rowIndex = gridCoreUtils.getIndexByKey(change.key, items, dataController.key());\n        this._addInternalData({\n          key: change.key,\n          oldData: items[rowIndex]\n        });\n      }\n    });\n    dataController.updateItems({\n      repaintChangesOnly: true,\n      isLiveUpdate: false,\n      isOptionChanged: true\n    });\n  }\n  publicMethods() {\n    return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n  }\n  refresh() {\n    if (!isDefined(this._pageIndex)) {\n      return;\n    }\n    this._refreshCore.apply(this, arguments);\n  }\n  _refreshCore(params) {}\n  isEditing() {\n    const isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n    return isEditRowKeyDefined;\n  }\n  isEditRow(rowIndex) {\n    return false;\n  }\n  _setEditRowKey(value, silent) {\n    if (silent) {\n      this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value);\n    } else {\n      this.option(EDITING_EDITROWKEY_OPTION_NAME, value);\n    }\n    if (this._refocusEditCell) {\n      this._refocusEditCell = false;\n      this._focusEditingCell();\n    }\n  }\n  _setEditRowKeyByIndex(rowIndex, silent) {\n    const key = this._dataController.getKeyByRowIndex(rowIndex);\n    if (void 0 === key) {\n      this._dataController.fireError(\"E1043\");\n      return;\n    }\n    this._setEditRowKey(key, silent);\n  }\n  getEditRowIndex() {\n    return this._getVisibleEditRowIndex();\n  }\n  getEditFormRowIndex() {\n    return -1;\n  }\n  isEditRowByIndex(rowIndex) {\n    const key = this._dataController.getKeyByRowIndex(rowIndex);\n    const isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\n    if (isKeyEqual) {\n      return this._getVisibleEditRowIndex() === rowIndex;\n    }\n    return isKeyEqual;\n  }\n  isEditCell(visibleRowIndex, columnIndex) {\n    return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex;\n  }\n  getPopupContent() {}\n  _isProcessedItem(item) {\n    return false;\n  }\n  _getInsertRowIndex(items, change, isProcessedItems) {\n    let result = -1;\n    const dataController = this._dataController;\n    const key = this._getInsertAfterOrBeforeKey(change);\n    if (!isDefined(key) && 0 === items.length) {\n      result = 0;\n    } else if (isDefined(key)) {\n      items.some((item, index) => {\n        const isProcessedItem = isProcessedItems || this._isProcessedItem(item);\n        if (isObject(item)) {\n          if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\n            if (equalByValue(item.key, key)) {\n              result = index;\n            }\n          } else if (equalByValue(dataController.keyOf(item), key)) {\n            result = index;\n          }\n        }\n        if (result >= 0) {\n          const nextItem = items[result + 1];\n          if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\n            return;\n          }\n          if (isDefined(change.insertAfterKey)) {\n            result += 1;\n          }\n          return true;\n        }\n      });\n    }\n    return result;\n  }\n  _generateNewItem(key) {\n    var _this$_getInternalDat2;\n    const item = {\n      key: key\n    };\n    const insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\n    if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\n      item[INSERT_INDEX] = insertInfo[INSERT_INDEX];\n    }\n    return item;\n  }\n  _getLoadedRowIndex(items, change, isProcessedItems) {\n    let loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\n    const dataController = this._dataController;\n    if (loadedRowIndex < 0) {\n      const newRowPosition = this._getNewRowPosition();\n      const pageIndex = dataController.pageIndex();\n      const insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n      if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\n        loadedRowIndex = 0;\n      } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\n        loadedRowIndex = items.length;\n      }\n    }\n    return loadedRowIndex;\n  }\n  processItems(items, e) {\n    const {\n      changeType: changeType\n    } = e;\n    this.update(changeType);\n    const changes = this.getChanges();\n    changes.forEach(change => {\n      var _this$_getInternalDat3;\n      const isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\n      if (!isInsert) {\n        return;\n      }\n      let {\n        key: key\n      } = change;\n      let insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\n      if (!isDefined(key) || !isDefined(insertInfo)) {\n        insertInfo = this._addInsertInfo(change);\n        key = insertInfo.key;\n      }\n      const loadedRowIndex = this._getLoadedRowIndex(items, change);\n      const item = this._generateNewItem(key);\n      if (loadedRowIndex >= 0) {\n        items.splice(loadedRowIndex, 0, item);\n      }\n    });\n    return items;\n  }\n  processDataItem(item, options, generateDataValues) {\n    const columns = options.visibleColumns;\n    const key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n    const changes = this.getChanges();\n    const editIndex = gridCoreUtils.getIndexByKey(key, changes);\n    item.isEditing = false;\n    if (editIndex >= 0) {\n      this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues);\n    }\n  }\n  _processDataItemCore(item, change, key, columns, generateDataValues) {\n    const {\n      data: data,\n      type: type\n    } = change;\n    switch (type) {\n      case DATA_EDIT_DATA_INSERT_TYPE:\n        item.isNewRow = true;\n        item.key = key;\n        item.data = data;\n        break;\n      case DATA_EDIT_DATA_UPDATE_TYPE:\n        item.modified = true;\n        item.oldData = item.data;\n        item.data = createObjectWithChanges(item.data, data);\n        item.modifiedValues = generateDataValues(data, columns, true);\n        break;\n      case DATA_EDIT_DATA_REMOVE_TYPE:\n        item.removed = true;\n    }\n  }\n  _initNewRow(options) {\n    this.executeAction(\"onInitNewRow\", options);\n    if (options.promise) {\n      const deferred = new Deferred();\n      when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n      return deferred;\n    }\n  }\n  _createInsertInfo() {\n    const insertInfo = {};\n    insertInfo[INSERT_INDEX] = this._getInsertIndex();\n    return insertInfo;\n  }\n  _addInsertInfo(change, parentKey) {\n    var _this$_getInternalDat4;\n    let insertInfo;\n    change.key = this.getChangeKeyValue(change);\n    const {\n      key: key\n    } = change;\n    insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\n    if (!isDefined(insertInfo)) {\n      const insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n      insertInfo = this._createInsertInfo();\n      if (!isDefined(insertAfterOrBeforeKey)) {\n        this._setInsertAfterOrBeforeKey(change, parentKey);\n      }\n    }\n    this._addInternalData({\n      insertInfo: insertInfo,\n      key: key\n    });\n    return {\n      insertInfo: insertInfo,\n      key: key\n    };\n  }\n  getChangeKeyValue(change) {\n    if (isDefined(change.key)) {\n      return change.key;\n    }\n    const keyExpr = this._dataController.key();\n    let keyValue;\n    if (change.data && keyExpr && !Array.isArray(keyExpr)) {\n      keyValue = change.data[keyExpr];\n    }\n    if (!isDefined(keyValue)) {\n      keyValue = generateNewRowTempKey();\n    }\n    return keyValue;\n  }\n  _setInsertAfterOrBeforeKey(change, parentKey) {\n    const rowsView = this.getView(\"rowsView\");\n    const dataController = this._dataController;\n    const allItems = dataController.items(true);\n    const newRowPosition = this._getNewRowPosition();\n    switch (newRowPosition) {\n      case FIRST_NEW_ROW_POSITION:\n      case LAST_NEW_ROW_POSITION:\n        break;\n      case PAGE_TOP_NEW_ROW_POSITION:\n      case PAGE_BOTTOM_NEW_ROW_POSITION:\n        if (allItems.length) {\n          const itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\n          change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key;\n        }\n        break;\n      default:\n        {\n          const isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n          let visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\n          const row = dataController.getVisibleRows()[visibleItemIndex];\n          if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n            visibleItemIndex++;\n          }\n          const insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\n          if (isDefined(insertKey)) {\n            change.insertBeforeKey = insertKey;\n          }\n        }\n    }\n  }\n  _getInsertIndex() {\n    let maxInsertIndex = 0;\n    this.getChanges().forEach(editItem => {\n      var _this$_getInternalDat5;\n      const insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\n      if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\n        maxInsertIndex = insertInfo[INSERT_INDEX];\n      }\n    });\n    return maxInsertIndex + 1;\n  }\n  _getInsertAfterOrBeforeKey(insertChange) {\n    return insertChange.insertAfterKey ?? insertChange.insertBeforeKey;\n  }\n  _getPageIndexToInsertRow() {\n    const newRowPosition = this._getNewRowPosition();\n    const dataController = this._dataController;\n    const pageIndex = dataController.pageIndex();\n    const lastPageIndex = dataController.pageCount() - 1;\n    if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\n      return 0;\n    }\n    if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\n      return lastPageIndex;\n    }\n    return -1;\n  }\n  addRow(parentKey) {\n    const dataController = this._dataController;\n    const store = dataController.store();\n    if (!store) {\n      dataController.fireError(\"E1052\", this.component.NAME);\n      return new Deferred().reject();\n    }\n    return this._addRow(parentKey);\n  }\n  _addRow(parentKey) {\n    const dataController = this._dataController;\n    const store = dataController.store();\n    const key = store && store.key();\n    const param = {\n      data: {}\n    };\n    const oldEditRowIndex = this._getVisibleEditRowIndex();\n    const deferred = new Deferred();\n    this.refresh({\n      allowCancelEditing: true\n    });\n    if (!this._allowRowAdding()) {\n      when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n      return deferred.promise();\n    }\n    if (!key) {\n      param.data.__KEY__ = String(new Guid());\n    }\n    when(this._initNewRow(param, parentKey)).done(() => {\n      if (this._allowRowAdding()) {\n        when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n      } else {\n        deferred.reject(\"cancel\");\n      }\n    }).fail(deferred.reject);\n    return deferred.promise();\n  }\n  _allowRowAdding(params) {\n    const insertIndex = this._getInsertIndex();\n    if (insertIndex > 1) {\n      return false;\n    }\n    return true;\n  }\n  _addRowCore(data, parentKey, initialOldEditRowIndex) {\n    const change = {\n      data: data,\n      type: DATA_EDIT_DATA_INSERT_TYPE\n    };\n    const editRowIndex = this._getVisibleEditRowIndex();\n    const insertInfo = this._addInsertInfo(change, parentKey);\n    const {\n      key: key\n    } = insertInfo;\n    this._setEditRowKey(key, true);\n    this._addChange(change);\n    return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex);\n  }\n  _navigateToNewRow(oldEditRowIndex, change, editRowIndex) {\n    const d = new Deferred();\n    const dataController = this._dataController;\n    editRowIndex = editRowIndex ?? -1;\n    change = change ?? this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\n    if (!change) {\n      return d.reject(\"cancel\").promise();\n    }\n    const pageIndexToInsertRow = this._getPageIndexToInsertRow();\n    let rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\n    const navigateToRowByKey = key => {\n      var _this$_focusControlle;\n      when(null === (_this$_focusControlle = this._focusController) || void 0 === _this$_focusControlle ? void 0 : _this$_focusControlle.navigateToRow(key)).done(() => {\n        rowIndex = dataController.getRowIndexByKey(change.key);\n        d.resolve();\n      });\n    };\n    const insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n    if (pageIndexToInsertRow >= 0) {\n      dataController.pageIndex(pageIndexToInsertRow).done(() => {\n        navigateToRowByKey(change.key);\n      }).fail(d.reject);\n    } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\n      navigateToRowByKey(insertAfterOrBeforeKey);\n    } else {\n      dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\n      });\n      rowIndex = dataController.getRowIndexByKey(change.key);\n      if (rowIndex < 0) {\n        navigateToRowByKey(change.key);\n      } else {\n        d.resolve();\n      }\n    }\n    d.done(() => {\n      var _this$_rowsView2;\n      null === (_this$_rowsView2 = this._rowsView) || void 0 === _this$_rowsView2 || _this$_rowsView2.waitAsyncTemplates(true).done(() => {\n        this._showAddedRow(rowIndex);\n        this._afterInsertRow(change.key);\n      });\n    });\n    return d.promise();\n  }\n  _showAddedRow(rowIndex) {\n    this._focusFirstEditableCellInRow(rowIndex);\n  }\n  _beforeFocusElementInRow(rowIndex) {}\n  _focusFirstEditableCellInRow(rowIndex) {\n    var _this$_keyboardNaviga;\n    const dataController = this._dataController;\n    const key = dataController.getKeyByRowIndex(rowIndex);\n    const $firstCell = this.getFirstEditableCellInRow(rowIndex);\n    null === (_this$_keyboardNaviga = this._keyboardNavigationController) || void 0 === _this$_keyboardNaviga || _this$_keyboardNaviga.focus($firstCell);\n    this.option(\"focusedRowKey\", key);\n    this._editCellInProgress = true;\n    this._delayedInputFocus($firstCell, () => {\n      rowIndex = dataController.getRowIndexByKey(key);\n      this._editCellInProgress = false;\n      this._beforeFocusElementInRow(rowIndex);\n    });\n  }\n  _isEditingStart(options) {\n    this.executeAction(\"onEditingStart\", options);\n    return options.cancel;\n  }\n  _beforeUpdateItems(rowIndices, rowIndex) {}\n  _getVisibleEditColumnIndex() {\n    const editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n    if (!isDefined(editColumnName)) {\n      return -1;\n    }\n    return this._columnsController.getVisibleColumnIndex(editColumnName);\n  }\n  _setEditColumnNameByIndex(index, silent) {\n    var _visibleColumns$index;\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent);\n  }\n  _setEditColumnName(name, silent) {\n    if (silent) {\n      this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n    } else {\n      this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n    }\n  }\n  _resetEditColumnName() {\n    this._setEditColumnName(null, true);\n  }\n  _getEditColumn() {\n    const editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n    return this._getColumnByName(editColumnName);\n  }\n  _getColumnByName(name) {\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    let editColumn;\n    isDefined(name) && visibleColumns.some(column => {\n      if (column.name === name) {\n        editColumn = column;\n        return true;\n      }\n    });\n    return editColumn;\n  }\n  _getVisibleEditRowIndex(columnName) {\n    const dataController = this._dataController;\n    const editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n    const rowIndex = dataController.getRowIndexByKey(editRowKey);\n    if (-1 === rowIndex) {\n      return rowIndex;\n    }\n    return rowIndex + this._getEditRowIndexCorrection(columnName);\n  }\n  _getEditRowIndexCorrection(columnName) {\n    const editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\n    const isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\n    return isColumnHidden ? 1 : 0;\n  }\n  _resetEditRowKey() {\n    this._refocusEditCell = false;\n    this._setEditRowKey(null, true);\n  }\n  _resetEditIndices() {\n    this._resetEditColumnName();\n    this._resetEditRowKey();\n  }\n  editRow(rowIndex) {\n    const dataController = this._dataController;\n    const items = dataController.items();\n    const item = items[rowIndex];\n    const params = {\n      data: item && item.data,\n      cancel: false\n    };\n    const oldRowIndex = this._getVisibleEditRowIndex();\n    if (!item) {\n      return;\n    }\n    if (rowIndex === oldRowIndex) {\n      return true;\n    }\n    if (void 0 === item.key) {\n      this._dataController.fireError(\"E1043\");\n      return;\n    }\n    if (!item.isNewRow) {\n      params.key = item.key;\n    }\n    if (this._isEditingStart(params)) {\n      return;\n    }\n    this.resetChanges();\n    this.init();\n    this._resetEditColumnName();\n    this._pageIndex = dataController.pageIndex();\n    this._addInternalData({\n      key: item.key,\n      oldData: item.oldData ?? item.data\n    });\n    this._setEditRowKey(item.key);\n  }\n  _editRowFromOptionChanged(rowIndex, oldRowIndex) {\n    const rowIndices = [oldRowIndex, rowIndex];\n    this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\n    this._editRowFromOptionChangedCore(rowIndices, rowIndex);\n  }\n  _editRowFromOptionChangedCore(rowIndices, rowIndex, preventRendering) {\n    this._needFocusEditor = true;\n    this._dataController.updateItems({\n      changeType: \"update\",\n      rowIndices: rowIndices,\n      cancel: preventRendering\n    });\n  }\n  _focusEditorIfNeed() {}\n  _showEditPopup(rowIndex, repaintForm) {}\n  _repaintEditPopup() {}\n  _getEditPopupHiddenHandler() {\n    return e => {\n      if (this.isEditing()) {\n        this.cancelEditData();\n      }\n    };\n  }\n  _getPopupEditFormTemplate(rowIndex) {}\n  _getSaveButtonConfig() {\n    const buttonConfig = {\n      text: this.option(\"editing.texts.saveRowChanges\"),\n      onClick: this.saveEditData.bind(this)\n    };\n    if (isFluent(current())) {\n      buttonConfig.stylingMode = \"contained\";\n      buttonConfig.type = \"default\";\n    }\n    return buttonConfig;\n  }\n  _getCancelButtonConfig() {\n    const buttonConfig = {\n      text: this.option(\"editing.texts.cancelRowChanges\"),\n      onClick: this.cancelEditData.bind(this)\n    };\n    if (isFluent(current())) {\n      buttonConfig.stylingMode = \"outlined\";\n    }\n    return buttonConfig;\n  }\n  _removeInternalData(key) {\n    this._internalState.delete(getKeyHash(key));\n  }\n  _updateInsertAfterOrBeforeKeys(changes, index) {\n    const removeChange = changes[index];\n    changes.forEach(change => {\n      if (change.type === DATA_EDIT_DATA_INSERT_TYPE) {\n        const insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n        if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\n          change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange);\n        }\n      }\n    });\n  }\n  _removeChange(index) {\n    if (index >= 0) {\n      const changes = [...this.getChanges()];\n      const {\n        key: key\n      } = changes[index];\n      this._removeInternalData(key);\n      this._updateInsertAfterOrBeforeKeys(changes, index);\n      changes.splice(index, 1);\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\n        this._resetEditIndices();\n      }\n    }\n  }\n  executeOperation(deferred, func) {\n    this._lastOperation && this._lastOperation.reject();\n    this._lastOperation = deferred;\n    this.waitForDeferredOperations().done(() => {\n      if (\"rejected\" === deferred.state()) {\n        return;\n      }\n      func();\n      this._lastOperation = null;\n    }).fail(() => {\n      deferred.reject();\n      this._lastOperation = null;\n    });\n  }\n  waitForDeferredOperations() {\n    return when(...this._deferreds);\n  }\n  _processCanceledEditingCell() {}\n  _repaintEditCell(column, oldColumn, oldEditRowIndex) {\n    if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n      this._editCellInProgress = true;\n      this._needFocusEditor = true;\n      this._editorFactoryController.loseFocus();\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\n      });\n    } else if (column !== oldColumn) {\n      this._needFocusEditor = true;\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: []\n      });\n    }\n  }\n  _delayedInputFocus($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n    const inputFocus = () => {\n      if (beforeFocusCallback) {\n        beforeFocusCallback();\n      }\n      if ($cell) {\n        const $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n        gridCoreUtils.focusAndSelectElement(this, $focusableElement);\n      }\n      this._beforeFocusCallback = null;\n    };\n    if (devices.real().ios || devices.real().android) {\n      inputFocus();\n    } else {\n      if (this._beforeFocusCallback) {\n        this._beforeFocusCallback();\n      }\n      clearTimeout(this._inputFocusTimeoutID);\n      if (callBeforeFocusCallbackAlways) {\n        this._beforeFocusCallback = beforeFocusCallback;\n      }\n      this._inputFocusTimeoutID = setTimeout(inputFocus);\n    }\n  }\n  _focusEditingCell(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n    const editColumnIndex = this._getVisibleEditColumnIndex();\n    $editCell = $editCell || this._rowsView && this._rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n    if ($editCell) {\n      this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n    }\n  }\n  deleteRow(rowIndex) {\n    this._checkAndDeleteRow(rowIndex);\n  }\n  _checkAndDeleteRow(rowIndex) {\n    const editingOptions = this.option(\"editing\");\n    const editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\n    const confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\n    const confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\n    const item = this._dataController.items()[rowIndex];\n    const allowDeleting = !this.isEditing() || item.isNewRow;\n    if (item && allowDeleting) {\n      if (!confirmDelete || !confirmDeleteMessage) {\n        this._deleteRowCore(rowIndex);\n      } else {\n        const confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n        const showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n        confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\n          if (confirmResult) {\n            this._deleteRowCore(rowIndex);\n          }\n        });\n      }\n    }\n  }\n  _deleteRowCore(rowIndex) {\n    const dataController = this._dataController;\n    const item = dataController.items()[rowIndex];\n    const key = item && item.key;\n    const oldEditRowIndex = this._getVisibleEditRowIndex();\n    this.refresh();\n    const changes = this.getChanges();\n    const editIndex = gridCoreUtils.getIndexByKey(key, changes);\n    if (editIndex >= 0) {\n      if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n        this._removeChange(editIndex);\n      } else {\n        this._addChange({\n          key: key,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n    } else {\n      this._addChange({\n        key: key,\n        oldData: item.data,\n        type: DATA_EDIT_DATA_REMOVE_TYPE\n      });\n    }\n    return this._afterDeleteRow(rowIndex, oldEditRowIndex);\n  }\n  _afterDeleteRow(rowIndex, oldEditRowIndex) {\n    return this.saveEditData();\n  }\n  undeleteRow(rowIndex) {\n    const dataController = this._dataController;\n    const item = dataController.items()[rowIndex];\n    const oldEditRowIndex = this._getVisibleEditRowIndex();\n    const key = item && item.key;\n    const changes = this.getChanges();\n    if (item) {\n      const editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      if (editIndex >= 0) {\n        const {\n          data: data\n        } = changes[editIndex];\n        if (isEmptyObject(data)) {\n          this._removeChange(editIndex);\n        } else {\n          this._addChange({\n            key: key,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, rowIndex]\n        });\n      }\n    }\n  }\n  _fireOnSaving() {\n    const onSavingParams = {\n      cancel: false,\n      promise: null,\n      changes: [...this.getChanges()]\n    };\n    this.executeAction(\"onSaving\", onSavingParams);\n    const d = new Deferred();\n    when(fromPromise(onSavingParams.promise)).done(() => {\n      d.resolve(onSavingParams);\n    }).fail(arg => {\n      createFailureHandler(d);\n      this._fireDataErrorOccurred(arg);\n      d.resolve({\n        cancel: true\n      });\n    });\n    return d;\n  }\n  _executeEditingAction(actionName, params, func) {\n    if (this.component._disposed) {\n      return null;\n    }\n    const deferred = new Deferred();\n    this.executeAction(actionName, params);\n    when(fromPromise(params.cancel)).done(cancel => {\n      if (cancel) {\n        setTimeout(() => {\n          deferred.resolve(\"cancel\");\n        });\n      } else {\n        func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n      }\n    }).fail(createFailureHandler(deferred));\n    return deferred;\n  }\n  _processChanges(deferreds, results, dataChanges, changes) {\n    const store = this._dataController.store();\n    each(changes, (index, change) => {\n      const oldData = this._getOldData(change.key);\n      const {\n        data: data,\n        type: type\n      } = change;\n      const changeCopy = _extends({}, change);\n      let deferred;\n      let params;\n      if (this._beforeSaveEditData(change, index)) {\n        return;\n      }\n      switch (type) {\n        case DATA_EDIT_DATA_REMOVE_TYPE:\n          params = {\n            data: oldData,\n            key: change.key,\n            cancel: false\n          };\n          deferred = this._executeEditingAction(\"onRowRemoving\", params, () => store.remove(change.key).done(key => {\n            dataChanges.push({\n              type: \"remove\",\n              key: key\n            });\n          }));\n          break;\n        case DATA_EDIT_DATA_INSERT_TYPE:\n          params = {\n            data: data,\n            cancel: false\n          };\n          deferred = this._executeEditingAction(\"onRowInserting\", params, () => store.insert(params.data).done((data, key) => {\n            if (isDefined(key)) {\n              changeCopy.key = key;\n            }\n            if (data && isObject(data) && data !== params.data) {\n              changeCopy.data = data;\n            }\n            dataChanges.push({\n              type: \"insert\",\n              data: data,\n              index: 0\n            });\n          }));\n          break;\n        case DATA_EDIT_DATA_UPDATE_TYPE:\n          params = {\n            newData: data,\n            oldData: oldData,\n            key: change.key,\n            cancel: false\n          };\n          deferred = this._executeEditingAction(\"onRowUpdating\", params, () => store.update(change.key, params.newData).done((data, key) => {\n            if (data && isObject(data) && data !== params.newData) {\n              changeCopy.data = data;\n            }\n            dataChanges.push({\n              type: \"update\",\n              key: key,\n              data: data\n            });\n          }));\n      }\n      changes[index] = changeCopy;\n      if (deferred) {\n        const doneDeferred = new Deferred();\n        deferred.always(data => {\n          results.push({\n            key: change.key,\n            result: data\n          });\n        }).always(doneDeferred.resolve);\n        deferreds.push(doneDeferred.promise());\n      }\n    });\n  }\n  _processRemoveIfError(changes, editIndex) {\n    const change = changes[editIndex];\n    if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\n      if (editIndex >= 0) {\n        changes.splice(editIndex, 1);\n      }\n    }\n    return true;\n  }\n  _processRemove(changes, editIndex, cancel) {\n    const change = changes[editIndex];\n    if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n      return this._processRemoveCore(changes, editIndex, !cancel || !change);\n    }\n  }\n  _processRemoveCore(changes, editIndex, processIfBatch) {\n    if (editIndex >= 0) {\n      changes.splice(editIndex, 1);\n    }\n    return true;\n  }\n  _processSaveEditDataResult(results) {\n    let hasSavedData = false;\n    const originalChanges = this.getChanges();\n    const changes = [...originalChanges];\n    const changesLength = changes.length;\n    for (let i = 0; i < results.length; i++) {\n      const arg = results[i].result;\n      const cancel = \"cancel\" === arg;\n      const editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\n      const change = changes[editIndex];\n      const isError = arg && arg instanceof Error;\n      if (isError) {\n        if (change) {\n          this._addInternalData({\n            key: change.key,\n            error: arg\n          });\n        }\n        this._fireDataErrorOccurred(arg);\n        if (this._processRemoveIfError(changes, editIndex)) {\n          break;\n        }\n      } else if (this._processRemove(changes, editIndex, cancel)) {\n        hasSavedData = !cancel;\n        const removedChangeIndex = gridCoreUtils.getIndexByKey(results[i].key, originalChanges);\n        this._updateInsertAfterOrBeforeKeys(originalChanges, removedChangeIndex);\n      }\n    }\n    if (changes.length < changesLength) {\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n    }\n    return hasSavedData;\n  }\n  _fireSaveEditDataEvents(changes) {\n    each(changes, (_, _ref) => {\n      let {\n        data: data,\n        key: key,\n        type: type\n      } = _ref;\n      const internalData = this._addInternalData({\n        key: key\n      });\n      const params = {\n        key: key,\n        data: data\n      };\n      if (internalData.error) {\n        params.error = internalData.error;\n      }\n      switch (type) {\n        case DATA_EDIT_DATA_REMOVE_TYPE:\n          this.executeAction(\"onRowRemoved\", extend({}, params, {\n            data: internalData.oldData\n          }));\n          break;\n        case DATA_EDIT_DATA_INSERT_TYPE:\n          this.executeAction(\"onRowInserted\", params);\n          break;\n        case DATA_EDIT_DATA_UPDATE_TYPE:\n          this.executeAction(\"onRowUpdated\", params);\n      }\n    });\n    this.executeAction(\"onSaved\", {\n      changes: changes\n    });\n  }\n  saveEditData() {\n    const deferred = new Deferred();\n    this.waitForDeferredOperations().done(() => {\n      if (this.isSaving()) {\n        this._resolveAfterSave(deferred);\n        return;\n      }\n      when(this._beforeSaveEditData()).done(cancel => {\n        if (cancel) {\n          this._resolveAfterSave(deferred, {\n            cancel: cancel\n          });\n          return;\n        }\n        this._saving = true;\n        this._saveEditDataInner().always(() => {\n          this._saving = false;\n          if (this._refocusEditCell) {\n            this._focusEditingCell();\n          }\n        }).done(deferred.resolve).fail(deferred.reject);\n      }).fail(deferred.reject);\n    }).fail(deferred.reject);\n    return deferred.promise();\n  }\n  _resolveAfterSave(deferred) {\n    let {\n      cancel: cancel,\n      error: error\n    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    when(this._afterSaveEditData(cancel)).done(() => {\n      deferred.resolve(error);\n    }).fail(deferred.reject);\n  }\n  _saveEditDataInner() {\n    const result = new Deferred();\n    const results = [];\n    const deferreds = [];\n    const dataChanges = [];\n    const dataSource = this._dataController.dataSource();\n    when(this._fireOnSaving()).done(_ref2 => {\n      let {\n        cancel: cancel,\n        changes: changes\n      } = _ref2;\n      if (cancel) {\n        return result.resolve().promise();\n      }\n      this._processChanges(deferreds, results, dataChanges, changes);\n      if (deferreds.length) {\n        this._refocusEditCell = true;\n        null === dataSource || void 0 === dataSource || dataSource.beginLoading();\n        when(...deferreds).done(() => {\n          if (this._processSaveEditDataResult(results)) {\n            this._endSaving(dataChanges, changes, result);\n          } else {\n            null === dataSource || void 0 === dataSource || dataSource.endLoading();\n            result.resolve();\n          }\n        }).fail(error => {\n          null === dataSource || void 0 === dataSource || dataSource.endLoading();\n          result.resolve(error);\n        });\n        return result.always(() => {\n          this._refocusEditCell = true;\n        }).promise();\n      }\n      this._cancelSaving(result);\n    }).fail(result.reject);\n    return result.promise();\n  }\n  _beforeEndSaving(changes) {\n    this._resetEditIndices();\n  }\n  _endSaving(dataChanges, changes, deferred) {\n    const dataSource = this._dataController.dataSource();\n    this._beforeEndSaving(changes);\n    null === dataSource || void 0 === dataSource || dataSource.endLoading();\n    this._refreshDataAfterSave(dataChanges, changes, deferred);\n  }\n  _cancelSaving(result) {\n    this.executeAction(\"onSaved\", {\n      changes: []\n    });\n    this._resolveAfterSave(result);\n  }\n  _refreshDataAfterSave(dataChanges, changes, deferred) {\n    const dataController = this._dataController;\n    const refreshMode = this.option(\"editing.refreshMode\");\n    const isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n    if (!isFullRefresh) {\n      dataController.push(dataChanges);\n    }\n    when(dataController.refresh({\n      selection: isFullRefresh,\n      reload: isFullRefresh,\n      load: \"reshape\" === refreshMode,\n      changesOnly: this.option(\"repaintChangesOnly\")\n    })).always(() => {\n      this._fireSaveEditDataEvents(changes);\n    }).done(() => {\n      this._resolveAfterSave(deferred);\n    }).fail(error => {\n      this._resolveAfterSave(deferred, {\n        error: error\n      });\n    });\n  }\n  isSaving() {\n    return this._saving;\n  }\n  _updateEditColumn() {\n    const isEditColumnVisible = this._isEditColumnVisible();\n    const useIcons = this.option(\"editing.useIcons\");\n    const cssClass = COMMAND_EDIT_CLASS + (useIcons ? ` ${COMMAND_EDIT_WITH_ICONS_CLASS}` : \"\");\n    this._columnsController.addCommandColumn({\n      type: \"buttons\",\n      command: \"edit\",\n      visible: isEditColumnVisible,\n      cssClass: cssClass,\n      width: \"auto\",\n      alignment: \"center\",\n      cellTemplate: this._getEditCommandCellTemplate(),\n      fixedPosition: \"right\"\n    });\n    this._columnsController.columnOption(\"command:edit\", {\n      visible: isEditColumnVisible,\n      cssClass: cssClass\n    });\n  }\n  _isEditColumnVisible() {\n    const editingOptions = this.option(\"editing\");\n    return editingOptions.allowDeleting;\n  }\n  _isEditButtonDisabled() {\n    const hasChanges = this.hasChanges();\n    const isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\n    return !(isEditRowDefined || hasChanges);\n  }\n  _updateEditButtons() {\n    const isButtonDisabled = this._isEditButtonDisabled();\n    if (this._headerPanelView) {\n      this._headerPanelView.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\n      this._headerPanelView.setToolbarItemDisabled(\"revertButton\", isButtonDisabled);\n    }\n  }\n  _applyModified($element, options) {\n    $element && $element.addClass(CELL_MODIFIED);\n  }\n  _beforeCloseEditCellInBatchMode(rowIndices) {}\n  cancelEditData() {\n    const changes = this.getChanges();\n    const params = {\n      cancel: false,\n      changes: changes\n    };\n    this.executeAction(\"onEditCanceling\", params);\n    if (!params.cancel) {\n      this._cancelEditDataCore();\n      this.executeAction(\"onEditCanceled\", {\n        changes: changes\n      });\n    }\n  }\n  _cancelEditDataCore() {\n    const rowIndex = this._getVisibleEditRowIndex();\n    this._beforeCancelEditData();\n    this.init();\n    this.resetChanges();\n    this._resetEditColumnName();\n    this._resetEditRowKey();\n    this._afterCancelEditData(rowIndex);\n  }\n  _afterCancelEditData(rowIndex) {\n    const dataController = this._dataController;\n    dataController.updateItems({\n      repaintChangesOnly: this.option(\"repaintChangesOnly\")\n    });\n  }\n  _hideEditPopup() {}\n  hasEditData() {\n    return this.hasChanges();\n  }\n  update(changeType) {\n    const dataController = this._dataController;\n    if (dataController && this._pageIndex !== dataController.pageIndex()) {\n      if (\"refresh\" === changeType) {\n        this.refresh({\n          isPageChanged: true\n        });\n      }\n      this._pageIndex = dataController.pageIndex();\n    }\n    this._updateEditButtons();\n  }\n  _getRowIndicesForCascadeUpdating(row, skipCurrentRow) {\n    return skipCurrentRow ? [] : [row.rowIndex];\n  }\n  addDeferred(deferred) {\n    if (!this._deferreds.includes(deferred)) {\n      this._deferreds.push(deferred);\n      deferred.always(() => {\n        const index = this._deferreds.indexOf(deferred);\n        if (index >= 0) {\n          this._deferreds.splice(index, 1);\n        }\n      });\n    }\n  }\n  _prepareChange(options, value, text) {\n    var _options$row;\n    const newData = {};\n    const oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n    const rowKey = options.key;\n    const deferred = new Deferred();\n    if (void 0 !== rowKey) {\n      options.value = value;\n      const setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\n      setCellValueResult.done(() => {\n        deferred.resolve({\n          data: newData,\n          key: rowKey,\n          oldData: oldData,\n          type: DATA_EDIT_DATA_UPDATE_TYPE\n        });\n      }).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n      if (isDefined(text) && options.column.displayValueMap) {\n        options.column.displayValueMap[value] = text;\n      }\n      this._updateRowValues(options);\n      this.addDeferred(deferred);\n    }\n    return deferred;\n  }\n  _updateRowValues(options) {\n    if (options.values) {\n      const dataController = this._dataController;\n      const rowIndex = dataController.getRowIndexByKey(options.key);\n      const row = dataController.getVisibleRows()[rowIndex];\n      if (row) {\n        options.row.values = row.values;\n        options.values = row.values;\n      }\n      options.values[options.columnIndex] = options.value;\n    }\n  }\n  updateFieldValue(options, value, text, forceUpdateRow) {\n    const rowKey = options.key;\n    const deferred = new Deferred();\n    if (void 0 === rowKey) {\n      this._dataController.fireError(\"E1043\");\n    }\n    if (options.column.setCellValue) {\n      this._prepareChange(options, value, text).done(params => {\n        when(this._applyChange(options, params, forceUpdateRow)).always(() => {\n          deferred.resolve();\n        });\n      });\n    } else {\n      deferred.resolve();\n    }\n    return deferred.promise();\n  }\n  _focusPreviousEditingCellIfNeed(options) {\n    if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\n      this._focusEditingCell();\n      this._updateEditRow(options.row, true);\n      return true;\n    }\n  }\n  _needUpdateRow(column) {\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    if (!column) {\n      column = this._getEditColumn();\n    }\n    const isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n    const isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\n    return isCustomSetCellValue || isCustomCalculateCellValue;\n  }\n  _applyChange(options, params, forceUpdateRow) {\n    const changeOptions = _extends({}, options, {\n      forceUpdateRow: forceUpdateRow\n    });\n    this._addChange(params, changeOptions);\n    this._updateEditButtons();\n    return this._applyChangeCore(options, changeOptions.forceUpdateRow);\n  }\n  _applyChangeCore(options, forceUpdateRow) {\n    const isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n    const {\n      row: row\n    } = options;\n    if (row) {\n      if (forceUpdateRow || isCustomSetCellValue) {\n        this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n      } else if (row.update) {\n        row.update();\n      }\n    }\n  }\n  _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {\n    this._dataController.updateItems({\n      changeType: \"update\",\n      rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n    });\n  }\n  _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {\n    if (forceUpdateRow) {\n      this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n    } else {\n      this._updateRowWithDelay(row, isCustomSetCellValue);\n    }\n  }\n  _updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue) {\n    this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n    this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n    if (!forceUpdateRow) {\n      this._focusEditingCell();\n    }\n  }\n  _updateRowWithDelay(row, isCustomSetCellValue) {\n    const deferred = new Deferred();\n    this.addDeferred(deferred);\n    setTimeout(() => {\n      var _this$_editForm;\n      const elementContainer = (null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.element()) || this.component.$element().get(0);\n      const $focusedElement = $(domAdapter.getActiveElement(elementContainer));\n      const columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\n      let focusedElement = $focusedElement.get(0);\n      const selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n      this._updateEditRowCore(row, false, isCustomSetCellValue);\n      this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n      if (columnIndex >= 0) {\n        const $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\n        this._delayedInputFocus($focusedItem, () => {\n          setTimeout(() => {\n            var _this$component$$elem;\n            focusedElement = domAdapter.getActiveElement(null === (_this$component$$elem = this.component.$element()) || void 0 === _this$component$$elem ? void 0 : _this$component$$elem.get(0));\n            if (selectionRange.selectionStart >= 0) {\n              gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n            }\n          });\n        });\n      }\n      deferred.resolve();\n    });\n  }\n  _validateEditFormAfterUpdate() {}\n  _addChange(changeParams, options) {\n    var _this$getChanges;\n    const row = null === options || void 0 === options ? void 0 : options.row;\n    const changes = [...this.getChanges()];\n    let index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\n    if (index < 0) {\n      index = changes.length;\n      this._addInternalData({\n        key: changeParams.key,\n        oldData: changeParams.oldData\n      });\n      delete changeParams.oldData;\n      changes.push(changeParams);\n    }\n    const change = _extends({}, changes[index]);\n    if (change) {\n      if (changeParams.data) {\n        change.data = createObjectWithChanges(change.data, changeParams.data);\n      }\n      if ((!change.type || !changeParams.data) && changeParams.type) {\n        change.type = changeParams.type;\n      }\n      if (row) {\n        row.oldData = this._getOldData(row.key);\n        row.data = createObjectWithChanges(row.data, changeParams.data);\n      }\n    }\n    changes[index] = change;\n    this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n    if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\n      options.forceUpdateRow = true;\n    }\n    return change;\n  }\n  _getFormEditItemTemplate(cellOptions, column) {\n    return column.editCellTemplate || this._getDefaultEditorTemplate();\n  }\n  getColumnTemplate(options) {\n    const {\n      column: column\n    } = options;\n    const rowIndex = options.row && options.row.rowIndex;\n    let template;\n    const isRowMode = this.isRowBasedEditMode();\n    const isRowEditing = this.isEditRow(rowIndex);\n    const isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\n    let editingStartOptions;\n    if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n      const allowUpdating = this.allowUpdating(options);\n      if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\n        if (column.showEditorAlways && !isRowMode) {\n          editingStartOptions = {\n            cancel: false,\n            key: options.row.isNewRow ? void 0 : options.row.key,\n            data: options.row.data,\n            column: column\n          };\n          this._isEditingStart(editingStartOptions);\n        }\n        if (!editingStartOptions || !editingStartOptions.cancel) {\n          options.setValue = (value, text) => {\n            this.updateFieldValue(options, value, text);\n          };\n        }\n      }\n      template = column.editCellTemplate || this._getDefaultEditorTemplate();\n    } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n      template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options);\n    }\n    return template;\n  }\n  _createButton($container, button, options, change) {\n    let icon = EDIT_ICON_CLASS[button.name];\n    const useIcons = this.option(\"editing.useIcons\");\n    const useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\n    let $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n    if (button.template && useLegacyColumnButtonTemplate) {\n      this._rowsView.renderTemplate($container, button.template, options, true);\n    } else {\n      if (button.template) {\n        $button = $(\"<span>\").addClass(button.cssClass);\n      } else if (useIcons && icon || button.icon) {\n        icon = button.icon || icon;\n        const iconType = iconUtils.getImageSourceType(icon);\n        if (\"image\" === iconType || \"svg\" === iconType) {\n          $button = iconUtils.getImageContainer(icon).addClass(button.cssClass);\n        } else {\n          $button.addClass(`dx-icon${\"dxIcon\" === iconType ? \"-\" : \" \"}${icon}`).attr(\"title\", button.text);\n        }\n        $button.addClass(LINK_ICON_CLASS);\n        $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n        const localizationName = this.getButtonLocalizationNames()[button.name];\n        localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName));\n      } else {\n        $button.text(button.text);\n      }\n      if (isDefined(button.hint)) {\n        $button.attr(\"title\", button.hint);\n      }\n      if (this._isButtonDisabled(button, options)) {\n        $button.addClass(\"dx-state-disabled\");\n      } else if (!button.template || button.onClick) {\n        eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction(e => {\n          var _button$onClick;\n          null === (_button$onClick = button.onClick) || void 0 === _button$onClick || _button$onClick.call(button, extend({}, e, {\n            row: options.row,\n            column: options.column\n          }));\n          e.event.preventDefault();\n          e.event.stopPropagation();\n        }));\n      }\n      $container.append($button);\n      if (button.template) {\n        options.renderAsync = false;\n        this._rowsView.renderTemplate($button, button.template, options, true, change);\n      }\n    }\n  }\n  getButtonLocalizationNames() {\n    return {\n      edit: \"dxDataGrid-editingEditRow\",\n      save: \"dxDataGrid-editingSaveRowChanges\",\n      delete: \"dxDataGrid-editingDeleteRow\",\n      undelete: \"dxDataGrid-editingUndeleteRow\",\n      cancel: \"dxDataGrid-editingCancelRowChanges\"\n    };\n  }\n  prepareButtonItem(headerPanel, name, methodName, sortIndex) {\n    const editingTexts = this.option(\"editing.texts\") ?? {};\n    const titleButtonTextByClassNames = {\n      revert: editingTexts.cancelAllChanges,\n      save: editingTexts.saveAllChanges,\n      addRow: editingTexts.addRow\n    };\n    const className = {\n      revert: \"cancel\",\n      save: \"save\",\n      addRow: \"addrow\"\n    }[name];\n    const hintText = titleButtonTextByClassNames[name];\n    const isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\n    return {\n      widget: \"dxButton\",\n      options: {\n        onInitialized: e => {\n          $(e.element).addClass(headerPanel._getToolbarButtonClass(`${EDIT_BUTTON_CLASS} ${this.addWidgetPrefix(className)}-button`));\n        },\n        icon: `edit-button-${className}`,\n        disabled: isButtonDisabled,\n        onClick: () => {\n          setTimeout(() => {\n            this[methodName]();\n          });\n        },\n        text: hintText,\n        hint: hintText\n      },\n      showText: \"inMenu\",\n      name: `${name}Button`,\n      location: \"after\",\n      locateInMenu: \"auto\",\n      sortIndex: sortIndex\n    };\n  }\n  prepareEditButtons(headerPanel) {\n    const editingOptions = this.option(\"editing\") ?? {};\n    const buttonItems = [];\n    if (editingOptions.allowAdding) {\n      buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20));\n    }\n    return buttonItems;\n  }\n  highlightDataCell($cell, params) {\n    this.shouldHighlightCell(params) && $cell.addClass(CELL_MODIFIED);\n  }\n  _afterInsertRow(key) {}\n  _beforeSaveEditData(change) {\n    if (change && !isDefined(change.key) && isDefined(change.type)) {\n      return true;\n    }\n  }\n  _afterSaveEditData() {}\n  _beforeCancelEditData() {}\n  _allowEditAction(actionName, options) {\n    let allowEditAction = this.option(`editing.${actionName}`);\n    if (isFunction(allowEditAction)) {\n      allowEditAction = allowEditAction({\n        component: this.component,\n        row: options.row\n      });\n    }\n    return allowEditAction;\n  }\n  allowUpdating(options, eventName) {\n    const startEditAction = this.option(\"editing.startEditAction\") ?? DEFAULT_START_EDIT_ACTION;\n    const needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n    return needCallback && this._allowEditAction(\"allowUpdating\", options);\n  }\n  allowDeleting(options) {\n    return this._allowEditAction(\"allowDeleting\", options);\n  }\n  isCellModified(parameters) {\n    var _parameters$row, _parameters$row2;\n    const {\n      columnIndex: columnIndex\n    } = parameters;\n    let modifiedValue = null === parameters || void 0 === parameters || null === (_parameters$row = parameters.row) || void 0 === _parameters$row || null === (_parameters$row = _parameters$row.modifiedValues) || void 0 === _parameters$row ? void 0 : _parameters$row[columnIndex];\n    if (null !== parameters && void 0 !== parameters && null !== (_parameters$row2 = parameters.row) && void 0 !== _parameters$row2 && _parameters$row2.isNewRow) {\n      modifiedValue = parameters.value;\n    }\n    return void 0 !== modifiedValue;\n  }\n  isNewRowInEditMode() {\n    const visibleEditRowIndex = this._getVisibleEditRowIndex();\n    const rows = this._dataController.items();\n    return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false;\n  }\n  _isRowDeleteAllowed() {}\n  shouldHighlightCell(parameters) {\n    const cellModified = this.isCellModified(parameters);\n    return cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing);\n  }\n}\nexport const dataControllerEditingExtenderMixin = Base => class extends Base {\n  reload(full, repaintChangesOnly) {\n    !repaintChangesOnly && this._editingController.refresh();\n    return super.reload.apply(this, arguments);\n  }\n  repaintRows() {\n    if (this._editingController.isSaving()) {\n      return;\n    }\n    return super.repaintRows.apply(this, arguments);\n  }\n  _updateEditRow(items) {\n    const editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n    const editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\n    const editItem = items[editRowIndex];\n    if (editItem) {\n      var _this$_updateEditItem;\n      editItem.isEditing = true;\n      null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem || _this$_updateEditItem.call(this, editItem);\n    }\n  }\n  _updateItemsCore(change) {\n    super._updateItemsCore(change);\n    this._updateEditRow(this.items(true));\n  }\n  _applyChangeUpdate(change) {\n    this._updateEditRow(change.items);\n    super._applyChangeUpdate(change);\n  }\n  _applyChangesOnly(change) {\n    this._updateEditRow(change.items);\n    super._applyChangesOnly(change);\n  }\n  _processItems(items, change) {\n    items = this._editingController.processItems(items, change);\n    return super._processItems(items, change);\n  }\n  _processDataItem(dataItem, options) {\n    this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n    return super._processDataItem(dataItem, options);\n  }\n  _processItem(item, options) {\n    item = super._processItem(item, options);\n    if (item.isNewRow) {\n      options.dataIndex--;\n      delete item.dataIndex;\n    }\n    return item;\n  }\n  _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {\n    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\n      return;\n    }\n    return super._getChangedColumnIndices.apply(this, arguments);\n  }\n  _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n    const cell = oldRow.cells && oldRow.cells[columnIndex];\n    const isEditing = this._editingController && this._editingController.isEditCell(visibleRowIndex, columnIndex);\n    if (isLiveUpdate && isEditing) {\n      return false;\n    }\n    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n      return true;\n    }\n    return super._isCellChanged.apply(this, arguments);\n  }\n  needToRefreshOnDataSourceChange(args) {\n    const isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && this._editingController.isSaving();\n    return !isParasiteChange;\n  }\n  _handleDataSourceChange(args) {\n    const result = super._handleDataSourceChange(args);\n    const changes = this.option(\"editing.changes\");\n    const dataSource = args.value;\n    if (Array.isArray(dataSource) && changes.length) {\n      const dataSourceKeys = dataSource.map(item => this.keyOf(item));\n      const newChanges = changes.filter(change => \"insert\" === change.type || dataSourceKeys.some(key => equalByValue(change.key, key)));\n      if (newChanges.length !== changes.length) {\n        this.option(\"editing.changes\", newChanges);\n      }\n      const editRowKey = this.option(\"editing.editRowKey\");\n      const isEditNewItem = newChanges.some(change => \"insert\" === change.type && equalByValue(editRowKey, change.key));\n      if (!isEditNewItem && dataSourceKeys.every(key => !equalByValue(editRowKey, key))) {\n        this.option(\"editing.editRowKey\", null);\n      }\n    }\n    return result;\n  }\n};\nconst rowsView = Base => class extends Base {\n  getCellIndex($cell, rowIndex) {\n    if (!$cell.is(\"td\") && rowIndex >= 0) {\n      const $cellElements = this.getCellElements(rowIndex);\n      let cellIndex = -1;\n      each($cellElements, (index, cellElement) => {\n        if ($(cellElement).find($cell).length) {\n          cellIndex = index;\n        }\n      });\n      return cellIndex;\n    }\n    return super.getCellIndex.apply(this, arguments);\n  }\n  publicMethods() {\n    return super.publicMethods().concat([\"cellValue\"]);\n  }\n  _getCellTemplate(options) {\n    const template = this._editingController.getColumnTemplate(options);\n    return template || super._getCellTemplate(options);\n  }\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    if (row) {\n      const isRowRemoved = !!row.removed;\n      const isRowInserted = !!row.isNewRow;\n      const isRowModified = !!row.modified;\n      isRowInserted && $row.addClass(ROW_INSERTED);\n      isRowModified && $row.addClass(ROW_MODIFIED);\n      if (isRowInserted || isRowRemoved) {\n        $row.removeClass(ROW_SELECTED);\n      }\n    }\n    return $row;\n  }\n  _getColumnIndexByElement($element) {\n    let $tableElement = $element.closest(\"table\");\n    const $tableElements = this.getTableElements();\n    while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n      $element = $tableElement.closest(\"td\");\n      $tableElement = $element.closest(\"table\");\n    }\n    return this._getColumnIndexByElementCore($element);\n  }\n  _getColumnIndexByElementCore($element) {\n    const $targetElement = $element.closest(`.${ROW_CLASS}> td:not(.dx-master-detail-cell)`);\n    return this.getCellIndex($targetElement);\n  }\n  _editCellByClick(e, eventName) {\n    const editingController = this._editingController;\n    const $targetElement = $(e.event.target);\n    const columnIndex = this._getColumnIndexByElement($targetElement);\n    const row = this._dataController.items()[e.rowIndex];\n    const allowUpdating = editingController.allowUpdating({\n      row: row\n    }, eventName) || row && row.isNewRow;\n    const column = this._columnsController.getVisibleColumns()[columnIndex];\n    const isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\n    const allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\n    const startEditAction = this.option(\"editing.startEditAction\") || \"click\";\n    const isShowEditorAlways = column && column.showEditorAlways;\n    if (isEditedCell) {\n      return true;\n    }\n    if (\"down\" === eventName) {\n      if (devices.real().ios || devices.real().android) {\n        domUtils.resetActiveElement();\n      }\n      return isShowEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n    }\n    if (\"click\" === eventName && \"dblClick\" === startEditAction && this._pointerDownTarget === $targetElement.get(0)) {\n      const isError = false;\n      const withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\n      editingController.closeEditCell(isError, withoutSaveEditData);\n    }\n    if (allowEditing && eventName === startEditAction) {\n      return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n    }\n  }\n  _rowPointerDown(e) {\n    this._pointerDownTarget = e.event.target;\n    this._pointerDownTimeout = setTimeout(() => {\n      this._editCellByClick(e, \"down\");\n    });\n  }\n  _rowClickTreeListHack(e) {\n    super._rowClick.apply(this, arguments);\n  }\n  _rowClick(e) {\n    const isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n    e.event[TARGET_COMPONENT_NAME] = this.component;\n    if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n      super._rowClick.apply(this, arguments);\n    }\n  }\n  _rowDblClickTreeListHack(e) {\n    super._rowDblClick.apply(this, arguments);\n  }\n  _rowDblClick(e) {\n    if (!this._editCellByClick(e, \"dblClick\")) {\n      super._rowDblClick.apply(this, arguments);\n    }\n  }\n  _cellPrepared($cell, parameters) {\n    var _parameters$column;\n    const editingController = this._editingController;\n    const isCommandCell = !!parameters.column.command;\n    const isEditableCell = parameters.setValue;\n    const isEditRow = editingController.isEditRow(parameters.rowIndex);\n    const isEditing = isEditingCell(isEditRow, parameters);\n    if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\n      const {\n        alignment: alignment\n      } = parameters.column;\n      $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n      if (alignment) {\n        $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n      }\n    }\n    if (isEditing) {\n      this._editCellPrepared($cell);\n    }\n    const hasTemplate = !!(null !== (_parameters$column = parameters.column) && void 0 !== _parameters$column && _parameters$column.cellTemplate);\n    if (parameters.column && !isCommandCell && (!hasTemplate || editingController.shouldHighlightCell(parameters))) {\n      editingController.highlightDataCell($cell, parameters);\n    }\n    super._cellPrepared.apply(this, arguments);\n  }\n  _getCellOptions(options) {\n    const cellOptions = super._getCellOptions(options);\n    const {\n      columnIndex: columnIndex,\n      row: row\n    } = options;\n    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n    cellOptions.removed = row.removed;\n    if (row.modified) {\n      cellOptions.modified = void 0 !== row.modifiedValues[columnIndex];\n    }\n    return cellOptions;\n  }\n  _setCellAriaAttributes($cell, cellOptions, options) {\n    super._setCellAriaAttributes($cell, cellOptions, options);\n    if (cellOptions.removed) {\n      this.setAria(\"roledescription\", messageLocalization.format(\"dxDataGrid-ariaDeletedCell\"), $cell);\n    }\n    if (cellOptions.modified) {\n      this.setAria(\"roledescription\", messageLocalization.format(\"dxDataGrid-ariaModifiedCell\"), $cell);\n    }\n    const isEditableCell = cellOptions.column.allowEditing && !cellOptions.removed && !cellOptions.modified && \"data\" === cellOptions.rowType && cellOptions.column.calculateCellValue === cellOptions.column.defaultCalculateCellValue && this._editingController.isCellBasedEditMode();\n    if (isEditableCell) {\n      this.setAria(\"roledescription\", messageLocalization.format(\"dxDataGrid-ariaEditableCell\"), $cell);\n    }\n  }\n  _createCell(options) {\n    const $cell = super._createCell(options);\n    const isEditRow = this._editingController.isEditRow(options.rowIndex);\n    isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\n    return $cell;\n  }\n  cellValue(rowIndex, columnIdentifier, value, text) {\n    const cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n    if (cellOptions) {\n      if (void 0 === value) {\n        return cellOptions.value;\n      }\n      this._editingController.updateFieldValue(cellOptions, value, text, true);\n    }\n  }\n  dispose() {\n    super.dispose.apply(this, arguments);\n    clearTimeout(this._pointerDownTimeout);\n  }\n  _renderCore() {\n    super._renderCore.apply(this, arguments);\n    return this.waitAsyncTemplates(true).done(() => {\n      this._editingController._focusEditorIfNeed();\n    });\n  }\n  _editCellPrepared() {}\n  _formItemPrepared() {}\n};\nconst headerPanel = Base => class extends Base {\n  optionChanged(args) {\n    const {\n      fullName: fullName\n    } = args;\n    switch (args.name) {\n      case \"editing\":\n        {\n          const excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\n          const shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\n          shouldInvalidate && this._invalidate();\n          super.optionChanged(args);\n          break;\n        }\n      case \"useLegacyColumnButtonTemplate\":\n        args.handled = true;\n        break;\n      default:\n        super.optionChanged(args);\n    }\n  }\n  _getToolbarItems() {\n    const items = super._getToolbarItems();\n    const editButtonItems = this._editingController.prepareEditButtons(this);\n    return editButtonItems.concat(items);\n  }\n};\nexport const editingModule = {\n  defaultOptions: () => ({\n    editing: {\n      mode: \"row\",\n      refreshMode: \"full\",\n      newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\n      allowAdding: false,\n      allowUpdating: false,\n      allowDeleting: false,\n      useIcons: false,\n      selectTextOnEditStart: false,\n      confirmDelete: true,\n      texts: {\n        editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\n        saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\n        saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\n        cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\n        cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\n        addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\n        deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\n        undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\n        confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n        confirmDeleteTitle: \"\"\n      },\n      form: {\n        colCount: 2\n      },\n      popup: {},\n      startEditAction: \"click\",\n      editRowKey: null,\n      editColumnName: null,\n      changes: []\n    },\n    useLegacyColumnButtonTemplate: false\n  }),\n  controllers: {\n    editing: EditingControllerImpl\n  },\n  extenders: {\n    controllers: {\n      data: dataControllerEditingExtenderMixin\n    },\n    views: {\n      rowsView: rowsView,\n      headerPanel: headerPanel\n    }\n  }\n};","map":{"version":3,"names":["_extends","name","clickEventName","eventsEngine","pointerEvents","removeEvent","addNamespace","messageLocalization","createObjectWithChanges","devices","domAdapter","Guid","$","equalByValue","getKeyHash","Deferred","fromPromise","when","extend","iconUtils","each","deepExtendArraySafe","isDefined","isEmptyObject","isFunction","isObject","confirm","current","isFluent","domUtils","modules","gridCoreUtils","ACTION_OPTION_NAMES","BUTTON_NAMES","CELL_BASED_MODES","CELL_FOCUS_DISABLED_CLASS","CELL_MODIFIED","COMMAND_EDIT_CLASS","COMMAND_EDIT_WITH_ICONS_CLASS","DATA_EDIT_DATA_INSERT_TYPE","DATA_EDIT_DATA_REMOVE_TYPE","DATA_EDIT_DATA_UPDATE_TYPE","DEFAULT_START_EDIT_ACTION","EDIT_BUTTON_CLASS","EDIT_FORM_CLASS","EDIT_ICON_CLASS","EDIT_LINK_CLASS","EDIT_MODE_POPUP","EDIT_MODE_ROW","EDIT_MODES","EDITING_CHANGES_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","EDITING_EDITROWKEY_OPTION_NAME","EDITING_NAMESPACE","EDITING_POPUP_OPTION_NAME","EDITOR_CELL_CLASS","EDITORS_INPUT_SELECTOR","FIRST_NEW_ROW_POSITION","FOCUSABLE_ELEMENT_SELECTOR","INSERT_INDEX","LAST_NEW_ROW_POSITION","LINK_CLASS","LINK_ICON_CLASS","METHOD_NAMES","PAGE_BOTTOM_NEW_ROW_POSITION","PAGE_TOP_NEW_ROW_POSITION","READONLY_CLASS","REQUIRED_EDITOR_LABELLEDBY_MODES","ROW_BASED_MODES","ROW_CLASS","ROW_INSERTED","ROW_MODIFIED","ROW_SELECTED","TARGET_COMPONENT_NAME","VIEWPORT_BOTTOM_NEW_ROW_POSITION","VIEWPORT_TOP_NEW_ROW_POSITION","createFailureHandler","generateNewRowTempKey","getButtonIndex","getButtonName","getEditingTexts","isEditingCell","isEditingOrShowEditorAlwaysDataCell","EditingControllerImpl","ViewController","init","_columnsController","getController","_dataController","_adaptiveColumnsController","_validatingController","_editorFactoryController","_focusController","_keyboardNavigationController","_columnsResizerController","_errorHandlingController","_rowsView","getView","_headerPanelView","_lastOperation","_changes","_deferreds","forEach","d","reject","_dataChangedHandler","_handleDataChanged","bind","changed","add","_saveEditorHandler","createAction","excludeValidators","_updateEditColumn","_updateEditButtons","_internalState","Map","component","_optionsByReference","getEditMode","editMode","option","includes","isCellBasedEditMode","_getDefaultEditorTemplate","container","options","$editor","appendTo","editorOptions","column","value","setValue","row","parentType","width","readOnly","isOnForm","id","needLabel","headerId","createEditor","_getNewRowPosition","newRowPosition","scrollingMode","getChanges","getInsertRowCount","changes","filter","change","type","length","resetChanges","needReset","_silentOption","clear","_getInternalData","key","get","_addInternalData","params","internalData","set","_getOldData","_this$_getInternalDat","oldData","getUpdatedData","data","keyOf","editIndex","getIndexByKey","getInsertedData","map","getRemovedData","_fireDataErrorOccurred","arg","$popupContent","getPopupContent","dataErrorOccurred","fire","_needToCloseEditableCell","$targetElement","_closeEditItem","args","_isDefaultButtonVisible","button","result","allowDeleting","isPopupEditMode","_isButtonVisible","visible","call","_isButtonDisabled","disabled","_getButtonConfig","config","buttonName","editingTexts","methodName","editingOptions","actionName","allowAction","text","cssClass","onClick","e","event","stopPropagation","preventDefault","setTimeout","rowIndex","_getEditingButtons","buttonIndex","haveCustomButtons","buttons","slice","splice","_renderEditingButtons","$container","_createButton","_getEditCommandCellTemplate","rowType","watch","dispose","empty","on","setEmptyText","isRowBasedEditMode","getFirstEditableColumnIndex","columnIndex","visibleColumns","getVisibleColumns","index","allowEditing","getFirstEditableCellInRow","_this$_rowsView","_getCellElement","getFocusedCellInRow","items","hasChanges","i","getRowIndexByKey","clearTimeout","_inputFocusTimeoutID","off","getDocument","up","_pointerUpEditorHandler","down","_pointerDownEditorHandler","optionChanged","fullName","_handleEditRowKeyChange","isEqual","maxDepth","_handleChangesChange","handled","reinit","_resetEditColumnName","_resetEditRowKey","oldRowIndexCorrection","_getEditRowIndexCorrection","oldRowIndex","previousValue","_editRowFromOptionChanged","cancelEditData","dataController","_addInsertInfo","_dataController$items","getCachedStoreData","item","updateItems","repaintChangesOnly","isLiveUpdate","isOptionChanged","publicMethods","refresh","_pageIndex","_refreshCore","apply","arguments","isEditing","isEditRowKeyDefined","isEditRow","_setEditRowKey","silent","_refocusEditCell","_focusEditingCell","_setEditRowKeyByIndex","getKeyByRowIndex","fireError","getEditRowIndex","_getVisibleEditRowIndex","getEditFormRowIndex","isEditRowByIndex","isKeyEqual","isEditCell","visibleRowIndex","_getVisibleEditColumnIndex","_isProcessedItem","_getInsertRowIndex","isProcessedItems","_getInsertAfterOrBeforeKey","some","isProcessedItem","nextItem","insertAfterKey","_generateNewItem","_this$_getInternalDat2","insertInfo","_getLoadedRowIndex","loadedRowIndex","pageIndex","insertAfterOrBeforeKey","isLastPageLoaded","processItems","changeType","update","_this$_getInternalDat3","isInsert","processDataItem","generateDataValues","columns","_processDataItemCore","isNewRow","modified","modifiedValues","removed","_initNewRow","executeAction","promise","deferred","done","resolve","fail","_createInsertInfo","_getInsertIndex","parentKey","_this$_getInternalDat4","getChangeKeyValue","_setInsertAfterOrBeforeKey","keyExpr","keyValue","Array","isArray","rowsView","allItems","itemIndex","isViewportBottom","visibleItemIndex","getBottomVisibleItemIndex","getTopVisibleItemIndex","getVisibleRows","insertKey","insertBeforeKey","maxInsertIndex","editItem","_this$_getInternalDat5","insertChange","_getPageIndexToInsertRow","lastPageIndex","pageCount","addRow","store","NAME","_addRow","param","oldEditRowIndex","allowCancelEditing","_allowRowAdding","_navigateToNewRow","__KEY__","String","_addRowCore","insertIndex","initialOldEditRowIndex","editRowIndex","_addChange","c","pageIndexToInsertRow","navigateToRowByKey","_this$_focusControlle","navigateToRow","rowIndices","_this$_rowsView2","waitAsyncTemplates","_showAddedRow","_afterInsertRow","_focusFirstEditableCellInRow","_beforeFocusElementInRow","_this$_keyboardNaviga","$firstCell","focus","_editCellInProgress","_delayedInputFocus","_isEditingStart","cancel","_beforeUpdateItems","editColumnName","getVisibleColumnIndex","_setEditColumnNameByIndex","_visibleColumns$index","_setEditColumnName","_getEditColumn","_getColumnByName","editColumn","columnName","editRowKey","isColumnHidden","visibleWidth","_resetEditIndices","editRow","_editRowFromOptionChangedCore","preventRendering","_needFocusEditor","_focusEditorIfNeed","_showEditPopup","repaintForm","_repaintEditPopup","_getEditPopupHiddenHandler","_getPopupEditFormTemplate","_getSaveButtonConfig","buttonConfig","saveEditData","stylingMode","_getCancelButtonConfig","_removeInternalData","delete","_updateInsertAfterOrBeforeKeys","removeChange","_removeChange","executeOperation","func","waitForDeferredOperations","state","_processCanceledEditingCell","_repaintEditCell","oldColumn","showEditorAlways","loseFocus","$cell","beforeFocusCallback","callBeforeFocusCallbackAlways","inputFocus","$focusableElement","find","first","focusAndSelectElement","_beforeFocusCallback","real","ios","android","$editCell","editColumnIndex","deleteRow","_checkAndDeleteRow","texts","confirmDelete","confirmDeleteMessage","_deleteRowCore","confirmDeleteTitle","showDialogTitle","confirmResult","_afterDeleteRow","undeleteRow","_fireOnSaving","onSavingParams","_executeEditingAction","_disposed","_processChanges","deferreds","results","dataChanges","changeCopy","_beforeSaveEditData","remove","push","insert","newData","doneDeferred","always","_processRemoveIfError","_processRemove","_processRemoveCore","processIfBatch","_processSaveEditDataResult","hasSavedData","originalChanges","changesLength","isError","Error","error","removedChangeIndex","_fireSaveEditDataEvents","_","_ref","isSaving","_resolveAfterSave","_saving","_saveEditDataInner","_afterSaveEditData","dataSource","_ref2","beginLoading","_endSaving","endLoading","_cancelSaving","_beforeEndSaving","_refreshDataAfterSave","refreshMode","isFullRefresh","selection","reload","load","changesOnly","isEditColumnVisible","_isEditColumnVisible","useIcons","addCommandColumn","command","alignment","cellTemplate","fixedPosition","columnOption","_isEditButtonDisabled","isEditRowDefined","isButtonDisabled","setToolbarItemDisabled","_applyModified","$element","addClass","_beforeCloseEditCellInBatchMode","_cancelEditDataCore","_beforeCancelEditData","_afterCancelEditData","_hideEditPopup","hasEditData","isPageChanged","_getRowIndicesForCascadeUpdating","skipCurrentRow","addDeferred","indexOf","_prepareChange","_options$row","rowKey","setCellValueResult","setCellValue","displayValueMap","_updateRowValues","values","updateFieldValue","forceUpdateRow","_applyChange","_focusPreviousEditingCellIfNeed","_updateEditRow","_needUpdateRow","isCustomSetCellValue","defaultSetCellValue","isCustomCalculateCellValue","visibleColumn","calculateCellValue","defaultCalculateCellValue","changeOptions","_applyChangeCore","_updateEditRowCore","_updateRowImmediately","_updateRowWithDelay","_validateEditFormAfterUpdate","_this$_editForm","elementContainer","_editForm","element","$focusedElement","getActiveElement","getCellIndex","focusedElement","selectionRange","getSelectionRange","$focusedItem","_this$component$$elem","selectionStart","setSelectionRange","changeParams","_this$getChanges","_getFormEditItemTemplate","cellOptions","editCellTemplate","getColumnTemplate","template","isRowMode","isRowEditing","isCellEditing","editingStartOptions","allowUpdating","getEditFormTemplate","icon","useLegacyColumnButtonTemplate","$button","attr","renderTemplate","iconType","getImageSourceType","getImageContainer","localizationName","getButtonLocalizationNames","format","hint","_button$onClick","append","renderAsync","edit","save","undelete","prepareButtonItem","headerPanel","sortIndex","titleButtonTextByClassNames","revert","cancelAllChanges","saveAllChanges","className","hintText","widget","onInitialized","_getToolbarButtonClass","addWidgetPrefix","showText","location","locateInMenu","prepareEditButtons","buttonItems","allowAdding","highlightDataCell","shouldHighlightCell","_allowEditAction","allowEditAction","eventName","startEditAction","needCallback","isCellModified","parameters","_parameters$row","_parameters$row2","modifiedValue","isNewRowInEditMode","visibleEditRowIndex","rows","_isRowDeleteAllowed","cellModified","dataControllerEditingExtenderMixin","Base","full","_editingController","repaintRows","_this$_updateEditItem","_updateEditItem","_updateItemsCore","_applyChangeUpdate","_applyChangesOnly","_processItems","_processDataItem","dataItem","_processItem","dataIndex","_getChangedColumnIndices","oldItem","newItem","_isCellChanged","oldRow","newRow","cell","cells","needToRefreshOnDataSourceChange","isParasiteChange","_handleDataSourceChange","dataSourceKeys","newChanges","isEditNewItem","every","is","$cellElements","getCellElements","cellIndex","cellElement","concat","_getCellTemplate","_createRow","$row","isRowRemoved","isRowInserted","isRowModified","removeClass","_getColumnIndexByElement","$tableElement","closest","$tableElements","getTableElements","_getColumnIndexByElementCore","_editCellByClick","editingController","target","isEditedCell","isShowEditorAlways","resetActiveElement","editCell","_pointerDownTarget","withoutSaveEditData","closeEditCell","_rowPointerDown","_pointerDownTimeout","_rowClickTreeListHack","_rowClick","isEditForm","rowElement","hasClass","_rowDblClickTreeListHack","_rowDblClick","_cellPrepared","_parameters$column","isCommandCell","isEditableCell","toggleClass","css","_editCellPrepared","hasTemplate","_getCellOptions","_setCellAriaAttributes","setAria","_createCell","cellValue","columnIdentifier","getCellOptions","_renderCore","_formItemPrepared","excludedOptions","shouldInvalidate","optionName","_invalidate","_getToolbarItems","editButtonItems","editingModule","defaultOptions","editing","mode","selectTextOnEditStart","saveRowChanges","cancelRowChanges","form","colCount","popup","controllers","extenders","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/editing/m_editing.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport pointerEvents from \"../../../../common/core/events/pointer\";\r\nimport {\r\n    removeEvent\r\n} from \"../../../../common/core/events/remove\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../../../common/data/array_utils\";\r\nimport devices from \"../../../../core/devices\";\r\nimport domAdapter from \"../../../../core/dom_adapter\";\r\nimport Guid from \"../../../../core/guid\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    equalByValue,\r\n    getKeyHash\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    fromPromise,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport * as iconUtils from \"../../../../core/utils/icon\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    deepExtendArraySafe\r\n} from \"../../../../core/utils/object\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isFunction,\r\n    isObject\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    confirm\r\n} from \"../../../../ui/dialog\";\r\nimport {\r\n    current,\r\n    isFluent\r\n} from \"../../../../ui/themes\";\r\nimport domUtils from \"../../../core/utils/m_dom\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    ACTION_OPTION_NAMES,\r\n    BUTTON_NAMES,\r\n    CELL_BASED_MODES,\r\n    CELL_FOCUS_DISABLED_CLASS,\r\n    CELL_MODIFIED,\r\n    COMMAND_EDIT_CLASS,\r\n    COMMAND_EDIT_WITH_ICONS_CLASS,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    DATA_EDIT_DATA_REMOVE_TYPE,\r\n    DATA_EDIT_DATA_UPDATE_TYPE,\r\n    DEFAULT_START_EDIT_ACTION,\r\n    EDIT_BUTTON_CLASS,\r\n    EDIT_FORM_CLASS,\r\n    EDIT_ICON_CLASS,\r\n    EDIT_LINK_CLASS,\r\n    EDIT_MODE_POPUP,\r\n    EDIT_MODE_ROW,\r\n    EDIT_MODES,\r\n    EDITING_CHANGES_OPTION_NAME,\r\n    EDITING_EDITCOLUMNNAME_OPTION_NAME,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_NAMESPACE,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    EDITOR_CELL_CLASS,\r\n    EDITORS_INPUT_SELECTOR,\r\n    FIRST_NEW_ROW_POSITION,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    INSERT_INDEX,\r\n    LAST_NEW_ROW_POSITION,\r\n    LINK_CLASS,\r\n    LINK_ICON_CLASS,\r\n    METHOD_NAMES,\r\n    PAGE_BOTTOM_NEW_ROW_POSITION,\r\n    PAGE_TOP_NEW_ROW_POSITION,\r\n    READONLY_CLASS,\r\n    REQUIRED_EDITOR_LABELLEDBY_MODES,\r\n    ROW_BASED_MODES,\r\n    ROW_CLASS,\r\n    ROW_INSERTED,\r\n    ROW_MODIFIED,\r\n    ROW_SELECTED,\r\n    TARGET_COMPONENT_NAME,\r\n    VIEWPORT_BOTTOM_NEW_ROW_POSITION,\r\n    VIEWPORT_TOP_NEW_ROW_POSITION\r\n} from \"./const\";\r\nimport {\r\n    createFailureHandler,\r\n    generateNewRowTempKey,\r\n    getButtonIndex,\r\n    getButtonName,\r\n    getEditingTexts,\r\n    isEditingCell,\r\n    isEditingOrShowEditorAlwaysDataCell\r\n} from \"./m_editing_utils\";\r\nclass EditingControllerImpl extends modules.ViewController {\r\n    init() {\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._dataController = this.getController(\"data\");\r\n        this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n        this._validatingController = this.getController(\"validating\");\r\n        this._editorFactoryController = this.getController(\"editorFactory\");\r\n        this._focusController = this.getController(\"focus\");\r\n        this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\r\n        this._columnsResizerController = this.getController(\"columnsResizer\");\r\n        this._errorHandlingController = this.getController(\"errorHandling\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._headerPanelView = this.getView(\"headerPanel\");\r\n        this._lastOperation = null;\r\n        this._changes = [];\r\n        if (this._deferreds) {\r\n            this._deferreds.forEach((d => {\r\n                d.reject(\"cancel\")\r\n            }))\r\n        }\r\n        this._deferreds = [];\r\n        if (!this._dataChangedHandler) {\r\n            this._dataChangedHandler = this._handleDataChanged.bind(this);\r\n            this._dataController.changed.add(this._dataChangedHandler)\r\n        }\r\n        if (!this._saveEditorHandler) {\r\n            this.createAction(\"onInitNewRow\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onRowInserting\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onRowInserted\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onEditingStart\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onRowUpdating\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onRowUpdated\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onRowRemoving\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onRowRemoved\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onSaved\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onSaving\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onEditCanceling\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this.createAction(\"onEditCanceled\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            })\r\n        }\r\n        this._updateEditColumn();\r\n        this._updateEditButtons();\r\n        if (!this._internalState) {\r\n            this._internalState = new Map\r\n        }\r\n        this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\r\n        this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true\r\n    }\r\n    getEditMode() {\r\n        const editMode = this.option(\"editing.mode\") ?? EDIT_MODE_ROW;\r\n        if (EDIT_MODES.includes(editMode)) {\r\n            return editMode\r\n        }\r\n        return EDIT_MODE_ROW\r\n    }\r\n    isCellBasedEditMode() {\r\n        const editMode = this.getEditMode();\r\n        return CELL_BASED_MODES.includes(editMode)\r\n    }\r\n    _getDefaultEditorTemplate() {\r\n        return (container, options) => {\r\n            const $editor = $(\"<div>\").appendTo(container);\r\n            const editorOptions = extend({}, options.column, {\r\n                value: options.value,\r\n                setValue: options.setValue,\r\n                row: options.row,\r\n                parentType: \"dataRow\",\r\n                width: null,\r\n                readOnly: !options.setValue,\r\n                isOnForm: options.isOnForm,\r\n                id: options.id\r\n            });\r\n            const needLabel = REQUIRED_EDITOR_LABELLEDBY_MODES.includes(this.getEditMode());\r\n            if (needLabel) {\r\n                editorOptions[\"aria-labelledby\"] = options.column.headerId\r\n            }\r\n            this._editorFactoryController.createEditor($editor, editorOptions)\r\n        }\r\n    }\r\n    _getNewRowPosition() {\r\n        const newRowPosition = this.option(\"editing.newRowPosition\");\r\n        const scrollingMode = this.option(\"scrolling.mode\");\r\n        if (\"virtual\" === scrollingMode) {\r\n            switch (newRowPosition) {\r\n                case PAGE_TOP_NEW_ROW_POSITION:\r\n                    return VIEWPORT_TOP_NEW_ROW_POSITION;\r\n                case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                    return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                default:\r\n                    return newRowPosition\r\n            }\r\n        }\r\n        return newRowPosition\r\n    }\r\n    getChanges() {\r\n        return this.option(EDITING_CHANGES_OPTION_NAME)\r\n    }\r\n    getInsertRowCount() {\r\n        const changes = this.option(EDITING_CHANGES_OPTION_NAME);\r\n        return changes.filter((change => \"insert\" === change.type)).length\r\n    }\r\n    resetChanges() {\r\n        const changes = this.getChanges();\r\n        const needReset = null === changes || void 0 === changes ? void 0 : changes.length;\r\n        if (needReset) {\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\r\n            this._internalState.clear()\r\n        }\r\n    }\r\n    _getInternalData(key) {\r\n        return this._internalState.get(getKeyHash(key))\r\n    }\r\n    _addInternalData(params) {\r\n        const internalData = this._getInternalData(params.key);\r\n        if (internalData) {\r\n            return extend(internalData, params)\r\n        }\r\n        this._internalState.set(getKeyHash(params.key), params);\r\n        return params\r\n    }\r\n    _getOldData(key) {\r\n        var _this$_getInternalDat;\r\n        return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData\r\n    }\r\n    getUpdatedData(data) {\r\n        const key = this._dataController.keyOf(data);\r\n        const changes = this.getChanges();\r\n        const editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n        if (changes[editIndex]) {\r\n            return createObjectWithChanges(data, changes[editIndex].data)\r\n        }\r\n        return data\r\n    }\r\n    getInsertedData() {\r\n        return this.getChanges().filter((change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE)).map((change => change.data))\r\n    }\r\n    getRemovedData() {\r\n        return this.getChanges().filter((change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE)).map((change => this._getOldData(change.key)))\r\n    }\r\n    _fireDataErrorOccurred(arg) {\r\n        if (\"cancel\" === arg) {\r\n            return\r\n        }\r\n        const $popupContent = this.getPopupContent();\r\n        this._dataController.dataErrorOccurred.fire(arg, $popupContent)\r\n    }\r\n    _needToCloseEditableCell($targetElement) {}\r\n    _closeEditItem($targetElement) {}\r\n    _handleDataChanged(args) {}\r\n    _isDefaultButtonVisible(button, options) {\r\n        let result = true;\r\n        switch (button.name) {\r\n            case \"delete\":\r\n                result = this.allowDeleting(options);\r\n                break;\r\n            case \"undelete\":\r\n                result = false\r\n        }\r\n        return result\r\n    }\r\n    isPopupEditMode() {\r\n        const editMode = this.option(\"editing.mode\");\r\n        return editMode === EDIT_MODE_POPUP\r\n    }\r\n    _isButtonVisible(button, options) {\r\n        const {\r\n            visible: visible\r\n        } = button;\r\n        if (!isDefined(visible)) {\r\n            return this._isDefaultButtonVisible(button, options)\r\n        }\r\n        return isFunction(visible) ? visible.call(button, {\r\n            component: options.component,\r\n            row: options.row,\r\n            column: options.column\r\n        }) : visible\r\n    }\r\n    _isButtonDisabled(button, options) {\r\n        const {\r\n            disabled: disabled\r\n        } = button;\r\n        return isFunction(disabled) ? disabled.call(button, {\r\n            component: options.component,\r\n            row: options.row,\r\n            column: options.column\r\n        }) : !!disabled\r\n    }\r\n    _getButtonConfig(button, options) {\r\n        const config = isObject(button) ? button : {};\r\n        const buttonName = getButtonName(button);\r\n        const editingTexts = getEditingTexts(options);\r\n        const methodName = METHOD_NAMES[buttonName];\r\n        const editingOptions = this.option(\"editing\");\r\n        const actionName = ACTION_OPTION_NAMES[buttonName];\r\n        const allowAction = actionName ? editingOptions[actionName] : true;\r\n        return extend({\r\n            name: buttonName,\r\n            text: editingTexts[buttonName],\r\n            cssClass: EDIT_LINK_CLASS[buttonName]\r\n        }, {\r\n            onClick: methodName && (e => {\r\n                const {\r\n                    event: event\r\n                } = e;\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                setTimeout((() => {\r\n                    options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex)\r\n                }))\r\n            })\r\n        }, config)\r\n    }\r\n    _getEditingButtons(options) {\r\n        let buttonIndex;\r\n        const haveCustomButtons = !!options.column.buttons;\r\n        let buttons = (options.column.buttons || []).slice();\r\n        if (haveCustomButtons) {\r\n            buttonIndex = getButtonIndex(buttons, \"edit\");\r\n            if (buttonIndex >= 0) {\r\n                if (getButtonIndex(buttons, \"save\") < 0) {\r\n                    buttons.splice(buttonIndex + 1, 0, \"save\")\r\n                }\r\n                if (getButtonIndex(buttons, \"cancel\") < 0) {\r\n                    buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\")\r\n                }\r\n            }\r\n            buttonIndex = getButtonIndex(buttons, \"delete\");\r\n            if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\r\n                buttons.splice(buttonIndex + 1, 0, \"undelete\")\r\n            }\r\n        } else {\r\n            buttons = BUTTON_NAMES.slice()\r\n        }\r\n        return buttons.map((button => this._getButtonConfig(button, options)))\r\n    }\r\n    _renderEditingButtons($container, buttons, options, change) {\r\n        buttons.forEach((button => {\r\n            if (this._isButtonVisible(button, options)) {\r\n                this._createButton($container, button, options, change)\r\n            }\r\n        }))\r\n    }\r\n    _getEditCommandCellTemplate() {\r\n        return (container, options, change) => {\r\n            const $container = $(container);\r\n            if (\"data\" === options.rowType) {\r\n                const buttons = this._getEditingButtons(options);\r\n                this._renderEditingButtons($container, buttons, options, change);\r\n                if (options.watch) {\r\n                    const dispose = options.watch((() => buttons.map((button => ({\r\n                        visible: this._isButtonVisible(button, options),\r\n                        disabled: this._isButtonDisabled(button, options)\r\n                    })))), (() => {\r\n                        $container.empty();\r\n                        this._renderEditingButtons($container, buttons, options)\r\n                    }));\r\n                    eventsEngine.on($container, removeEvent, dispose)\r\n                }\r\n            } else {\r\n                gridCoreUtils.setEmptyText($container)\r\n            }\r\n        }\r\n    }\r\n    isRowBasedEditMode() {\r\n        const editMode = this.getEditMode();\r\n        return ROW_BASED_MODES.includes(editMode)\r\n    }\r\n    getFirstEditableColumnIndex() {\r\n        let columnIndex;\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        each(visibleColumns, ((index, column) => {\r\n            if (column.allowEditing) {\r\n                columnIndex = index;\r\n                return false\r\n            }\r\n        }));\r\n        return columnIndex\r\n    }\r\n    getFirstEditableCellInRow(rowIndex) {\r\n        var _this$_rowsView;\r\n        const columnIndex = this.getFirstEditableColumnIndex();\r\n        return null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(rowIndex || 0, columnIndex)\r\n    }\r\n    getFocusedCellInRow(rowIndex) {\r\n        return this.getFirstEditableCellInRow(rowIndex)\r\n    }\r\n    getIndexByKey(key, items) {\r\n        return gridCoreUtils.getIndexByKey(key, items)\r\n    }\r\n    hasChanges(rowIndex) {\r\n        const changes = this.getChanges();\r\n        let result = false;\r\n        for (let i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\r\n            if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\r\n                result = true;\r\n                break\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        clearTimeout(this._inputFocusTimeoutID);\r\n        eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n        eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n        eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n    }\r\n    _silentOption(name, value) {\r\n        if (\"editing.changes\" === name) {\r\n            this._changes = deepExtendArraySafe([], value)\r\n        }\r\n        super._silentOption(name, value)\r\n    }\r\n    optionChanged(args) {\r\n        if (\"editing\" === args.name) {\r\n            const {\r\n                fullName: fullName\r\n            } = args;\r\n            if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\r\n                this._handleEditRowKeyChange(args)\r\n            } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\r\n                const isEqual = equalByValue(args.value, this._changes, {\r\n                    maxDepth: 4\r\n                });\r\n                if (!isEqual) {\r\n                    this._changes = deepExtendArraySafe([], args.value);\r\n                    this._handleChangesChange(args)\r\n                }\r\n            } else if (!args.handled) {\r\n                this._columnsController.reinit();\r\n                this.init();\r\n                this.resetChanges();\r\n                this._resetEditColumnName();\r\n                this._resetEditRowKey()\r\n            }\r\n            args.handled = true\r\n        } else {\r\n            super.optionChanged(args)\r\n        }\r\n    }\r\n    _handleEditRowKeyChange(args) {\r\n        const rowIndex = this._dataController.getRowIndexByKey(args.value);\r\n        const oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n        const oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n        if (isDefined(args.value)) {\r\n            if (args.value !== args.previousValue) {\r\n                this._editRowFromOptionChanged(rowIndex, oldRowIndex)\r\n            }\r\n        } else {\r\n            this.cancelEditData()\r\n        }\r\n    }\r\n    _handleChangesChange(args) {\r\n        const dataController = this._dataController;\r\n        const changes = args.value;\r\n        if (!args.value.length && !args.previousValue.length) {\r\n            return\r\n        }\r\n        changes.forEach((change => {\r\n            if (\"insert\" === change.type) {\r\n                this._addInsertInfo(change)\r\n            } else {\r\n                var _dataController$items;\r\n                const items = dataController.getCachedStoreData() || (null === (_dataController$items = dataController.items()) || void 0 === _dataController$items ? void 0 : _dataController$items.map((item => item.data)));\r\n                const rowIndex = gridCoreUtils.getIndexByKey(change.key, items, dataController.key());\r\n                this._addInternalData({\r\n                    key: change.key,\r\n                    oldData: items[rowIndex]\r\n                })\r\n            }\r\n        }));\r\n        dataController.updateItems({\r\n            repaintChangesOnly: true,\r\n            isLiveUpdate: false,\r\n            isOptionChanged: true\r\n        })\r\n    }\r\n    publicMethods() {\r\n        return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"]\r\n    }\r\n    refresh() {\r\n        if (!isDefined(this._pageIndex)) {\r\n            return\r\n        }\r\n        this._refreshCore.apply(this, arguments)\r\n    }\r\n    _refreshCore(params) {}\r\n    isEditing() {\r\n        const isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n        return isEditRowKeyDefined\r\n    }\r\n    isEditRow(rowIndex) {\r\n        return false\r\n    }\r\n    _setEditRowKey(value, silent) {\r\n        if (silent) {\r\n            this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n        } else {\r\n            this.option(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n        }\r\n        if (this._refocusEditCell) {\r\n            this._refocusEditCell = false;\r\n            this._focusEditingCell()\r\n        }\r\n    }\r\n    _setEditRowKeyByIndex(rowIndex, silent) {\r\n        const key = this._dataController.getKeyByRowIndex(rowIndex);\r\n        if (void 0 === key) {\r\n            this._dataController.fireError(\"E1043\");\r\n            return\r\n        }\r\n        this._setEditRowKey(key, silent)\r\n    }\r\n    getEditRowIndex() {\r\n        return this._getVisibleEditRowIndex()\r\n    }\r\n    getEditFormRowIndex() {\r\n        return -1\r\n    }\r\n    isEditRowByIndex(rowIndex) {\r\n        const key = this._dataController.getKeyByRowIndex(rowIndex);\r\n        const isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\r\n        if (isKeyEqual) {\r\n            return this._getVisibleEditRowIndex() === rowIndex\r\n        }\r\n        return isKeyEqual\r\n    }\r\n    isEditCell(visibleRowIndex, columnIndex) {\r\n        return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex\r\n    }\r\n    getPopupContent() {}\r\n    _isProcessedItem(item) {\r\n        return false\r\n    }\r\n    _getInsertRowIndex(items, change, isProcessedItems) {\r\n        let result = -1;\r\n        const dataController = this._dataController;\r\n        const key = this._getInsertAfterOrBeforeKey(change);\r\n        if (!isDefined(key) && 0 === items.length) {\r\n            result = 0\r\n        } else if (isDefined(key)) {\r\n            items.some(((item, index) => {\r\n                const isProcessedItem = isProcessedItems || this._isProcessedItem(item);\r\n                if (isObject(item)) {\r\n                    if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\r\n                        if (equalByValue(item.key, key)) {\r\n                            result = index\r\n                        }\r\n                    } else if (equalByValue(dataController.keyOf(item), key)) {\r\n                        result = index\r\n                    }\r\n                }\r\n                if (result >= 0) {\r\n                    const nextItem = items[result + 1];\r\n                    if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\r\n                        return\r\n                    }\r\n                    if (isDefined(change.insertAfterKey)) {\r\n                        result += 1\r\n                    }\r\n                    return true\r\n                }\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    _generateNewItem(key) {\r\n        var _this$_getInternalDat2;\r\n        const item = {\r\n            key: key\r\n        };\r\n        const insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\r\n        if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\r\n            item[INSERT_INDEX] = insertInfo[INSERT_INDEX]\r\n        }\r\n        return item\r\n    }\r\n    _getLoadedRowIndex(items, change, isProcessedItems) {\r\n        let loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\r\n        const dataController = this._dataController;\r\n        if (loadedRowIndex < 0) {\r\n            const newRowPosition = this._getNewRowPosition();\r\n            const pageIndex = dataController.pageIndex();\r\n            const insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n            if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\r\n                loadedRowIndex = 0\r\n            } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\r\n                loadedRowIndex = items.length\r\n            }\r\n        }\r\n        return loadedRowIndex\r\n    }\r\n    processItems(items, e) {\r\n        const {\r\n            changeType: changeType\r\n        } = e;\r\n        this.update(changeType);\r\n        const changes = this.getChanges();\r\n        changes.forEach((change => {\r\n            var _this$_getInternalDat3;\r\n            const isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\r\n            if (!isInsert) {\r\n                return\r\n            }\r\n            let {\r\n                key: key\r\n            } = change;\r\n            let insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\r\n            if (!isDefined(key) || !isDefined(insertInfo)) {\r\n                insertInfo = this._addInsertInfo(change);\r\n                key = insertInfo.key\r\n            }\r\n            const loadedRowIndex = this._getLoadedRowIndex(items, change);\r\n            const item = this._generateNewItem(key);\r\n            if (loadedRowIndex >= 0) {\r\n                items.splice(loadedRowIndex, 0, item)\r\n            }\r\n        }));\r\n        return items\r\n    }\r\n    processDataItem(item, options, generateDataValues) {\r\n        const columns = options.visibleColumns;\r\n        const key = item.data[INSERT_INDEX] ? item.data.key : item.key;\r\n        const changes = this.getChanges();\r\n        const editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n        item.isEditing = false;\r\n        if (editIndex >= 0) {\r\n            this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues)\r\n        }\r\n    }\r\n    _processDataItemCore(item, change, key, columns, generateDataValues) {\r\n        const {\r\n            data: data,\r\n            type: type\r\n        } = change;\r\n        switch (type) {\r\n            case DATA_EDIT_DATA_INSERT_TYPE:\r\n                item.isNewRow = true;\r\n                item.key = key;\r\n                item.data = data;\r\n                break;\r\n            case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                item.modified = true;\r\n                item.oldData = item.data;\r\n                item.data = createObjectWithChanges(item.data, data);\r\n                item.modifiedValues = generateDataValues(data, columns, true);\r\n                break;\r\n            case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                item.removed = true\r\n        }\r\n    }\r\n    _initNewRow(options) {\r\n        this.executeAction(\"onInitNewRow\", options);\r\n        if (options.promise) {\r\n            const deferred = new Deferred;\r\n            when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail((arg => this._fireDataErrorOccurred(arg)));\r\n            return deferred\r\n        }\r\n    }\r\n    _createInsertInfo() {\r\n        const insertInfo = {};\r\n        insertInfo[INSERT_INDEX] = this._getInsertIndex();\r\n        return insertInfo\r\n    }\r\n    _addInsertInfo(change, parentKey) {\r\n        var _this$_getInternalDat4;\r\n        let insertInfo;\r\n        change.key = this.getChangeKeyValue(change);\r\n        const {\r\n            key: key\r\n        } = change;\r\n        insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\r\n        if (!isDefined(insertInfo)) {\r\n            const insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n            insertInfo = this._createInsertInfo();\r\n            if (!isDefined(insertAfterOrBeforeKey)) {\r\n                this._setInsertAfterOrBeforeKey(change, parentKey)\r\n            }\r\n        }\r\n        this._addInternalData({\r\n            insertInfo: insertInfo,\r\n            key: key\r\n        });\r\n        return {\r\n            insertInfo: insertInfo,\r\n            key: key\r\n        }\r\n    }\r\n    getChangeKeyValue(change) {\r\n        if (isDefined(change.key)) {\r\n            return change.key\r\n        }\r\n        const keyExpr = this._dataController.key();\r\n        let keyValue;\r\n        if (change.data && keyExpr && !Array.isArray(keyExpr)) {\r\n            keyValue = change.data[keyExpr]\r\n        }\r\n        if (!isDefined(keyValue)) {\r\n            keyValue = generateNewRowTempKey()\r\n        }\r\n        return keyValue\r\n    }\r\n    _setInsertAfterOrBeforeKey(change, parentKey) {\r\n        const rowsView = this.getView(\"rowsView\");\r\n        const dataController = this._dataController;\r\n        const allItems = dataController.items(true);\r\n        const newRowPosition = this._getNewRowPosition();\r\n        switch (newRowPosition) {\r\n            case FIRST_NEW_ROW_POSITION:\r\n            case LAST_NEW_ROW_POSITION:\r\n                break;\r\n            case PAGE_TOP_NEW_ROW_POSITION:\r\n            case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                if (allItems.length) {\r\n                    const itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\r\n                    change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key\r\n                }\r\n                break;\r\n            default: {\r\n                const isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                let visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\r\n                const row = dataController.getVisibleRows()[visibleItemIndex];\r\n                if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\r\n                    visibleItemIndex++\r\n                }\r\n                const insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\r\n                if (isDefined(insertKey)) {\r\n                    change.insertBeforeKey = insertKey\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _getInsertIndex() {\r\n        let maxInsertIndex = 0;\r\n        this.getChanges().forEach((editItem => {\r\n            var _this$_getInternalDat5;\r\n            const insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\r\n            if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\r\n                maxInsertIndex = insertInfo[INSERT_INDEX]\r\n            }\r\n        }));\r\n        return maxInsertIndex + 1\r\n    }\r\n    _getInsertAfterOrBeforeKey(insertChange) {\r\n        return insertChange.insertAfterKey ?? insertChange.insertBeforeKey\r\n    }\r\n    _getPageIndexToInsertRow() {\r\n        const newRowPosition = this._getNewRowPosition();\r\n        const dataController = this._dataController;\r\n        const pageIndex = dataController.pageIndex();\r\n        const lastPageIndex = dataController.pageCount() - 1;\r\n        if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\r\n            return 0\r\n        }\r\n        if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\r\n            return lastPageIndex\r\n        }\r\n        return -1\r\n    }\r\n    addRow(parentKey) {\r\n        const dataController = this._dataController;\r\n        const store = dataController.store();\r\n        if (!store) {\r\n            dataController.fireError(\"E1052\", this.component.NAME);\r\n            return (new Deferred).reject()\r\n        }\r\n        return this._addRow(parentKey)\r\n    }\r\n    _addRow(parentKey) {\r\n        const dataController = this._dataController;\r\n        const store = dataController.store();\r\n        const key = store && store.key();\r\n        const param = {\r\n            data: {}\r\n        };\r\n        const oldEditRowIndex = this._getVisibleEditRowIndex();\r\n        const deferred = new Deferred;\r\n        this.refresh({\r\n            allowCancelEditing: true\r\n        });\r\n        if (!this._allowRowAdding()) {\r\n            when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\r\n            return deferred.promise()\r\n        }\r\n        if (!key) {\r\n            param.data.__KEY__ = String(new Guid)\r\n        }\r\n        when(this._initNewRow(param, parentKey)).done((() => {\r\n            if (this._allowRowAdding()) {\r\n                when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject)\r\n            } else {\r\n                deferred.reject(\"cancel\")\r\n            }\r\n        })).fail(deferred.reject);\r\n        return deferred.promise()\r\n    }\r\n    _allowRowAdding(params) {\r\n        const insertIndex = this._getInsertIndex();\r\n        if (insertIndex > 1) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    _addRowCore(data, parentKey, initialOldEditRowIndex) {\r\n        const change = {\r\n            data: data,\r\n            type: DATA_EDIT_DATA_INSERT_TYPE\r\n        };\r\n        const editRowIndex = this._getVisibleEditRowIndex();\r\n        const insertInfo = this._addInsertInfo(change, parentKey);\r\n        const {\r\n            key: key\r\n        } = insertInfo;\r\n        this._setEditRowKey(key, true);\r\n        this._addChange(change);\r\n        return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex)\r\n    }\r\n    _navigateToNewRow(oldEditRowIndex, change, editRowIndex) {\r\n        const d = new Deferred;\r\n        const dataController = this._dataController;\r\n        editRowIndex = editRowIndex ?? -1;\r\n        change = change ?? this.getChanges().filter((c => c.type === DATA_EDIT_DATA_INSERT_TYPE))[0];\r\n        if (!change) {\r\n            return d.reject(\"cancel\").promise()\r\n        }\r\n        const pageIndexToInsertRow = this._getPageIndexToInsertRow();\r\n        let rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\r\n        const navigateToRowByKey = key => {\r\n            var _this$_focusControlle;\r\n            when(null === (_this$_focusControlle = this._focusController) || void 0 === _this$_focusControlle ? void 0 : _this$_focusControlle.navigateToRow(key)).done((() => {\r\n                rowIndex = dataController.getRowIndexByKey(change.key);\r\n                d.resolve()\r\n            }))\r\n        };\r\n        const insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n        if (pageIndexToInsertRow >= 0) {\r\n            dataController.pageIndex(pageIndexToInsertRow).done((() => {\r\n                navigateToRowByKey(change.key)\r\n            })).fail(d.reject)\r\n        } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\r\n            navigateToRowByKey(insertAfterOrBeforeKey)\r\n        } else {\r\n            dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\r\n            });\r\n            rowIndex = dataController.getRowIndexByKey(change.key);\r\n            if (rowIndex < 0) {\r\n                navigateToRowByKey(change.key)\r\n            } else {\r\n                d.resolve()\r\n            }\r\n        }\r\n        d.done((() => {\r\n            var _this$_rowsView2;\r\n            null === (_this$_rowsView2 = this._rowsView) || void 0 === _this$_rowsView2 || _this$_rowsView2.waitAsyncTemplates(true).done((() => {\r\n                this._showAddedRow(rowIndex);\r\n                this._afterInsertRow(change.key)\r\n            }))\r\n        }));\r\n        return d.promise()\r\n    }\r\n    _showAddedRow(rowIndex) {\r\n        this._focusFirstEditableCellInRow(rowIndex)\r\n    }\r\n    _beforeFocusElementInRow(rowIndex) {}\r\n    _focusFirstEditableCellInRow(rowIndex) {\r\n        var _this$_keyboardNaviga;\r\n        const dataController = this._dataController;\r\n        const key = dataController.getKeyByRowIndex(rowIndex);\r\n        const $firstCell = this.getFirstEditableCellInRow(rowIndex);\r\n        null === (_this$_keyboardNaviga = this._keyboardNavigationController) || void 0 === _this$_keyboardNaviga || _this$_keyboardNaviga.focus($firstCell);\r\n        this.option(\"focusedRowKey\", key);\r\n        this._editCellInProgress = true;\r\n        this._delayedInputFocus($firstCell, (() => {\r\n            rowIndex = dataController.getRowIndexByKey(key);\r\n            this._editCellInProgress = false;\r\n            this._beforeFocusElementInRow(rowIndex)\r\n        }))\r\n    }\r\n    _isEditingStart(options) {\r\n        this.executeAction(\"onEditingStart\", options);\r\n        return options.cancel\r\n    }\r\n    _beforeUpdateItems(rowIndices, rowIndex) {}\r\n    _getVisibleEditColumnIndex() {\r\n        const editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n        if (!isDefined(editColumnName)) {\r\n            return -1\r\n        }\r\n        return this._columnsController.getVisibleColumnIndex(editColumnName)\r\n    }\r\n    _setEditColumnNameByIndex(index, silent) {\r\n        var _visibleColumns$index;\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent)\r\n    }\r\n    _setEditColumnName(name, silent) {\r\n        if (silent) {\r\n            this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n        } else {\r\n            this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n        }\r\n    }\r\n    _resetEditColumnName() {\r\n        this._setEditColumnName(null, true)\r\n    }\r\n    _getEditColumn() {\r\n        const editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n        return this._getColumnByName(editColumnName)\r\n    }\r\n    _getColumnByName(name) {\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        let editColumn;\r\n        isDefined(name) && visibleColumns.some((column => {\r\n            if (column.name === name) {\r\n                editColumn = column;\r\n                return true\r\n            }\r\n        }));\r\n        return editColumn\r\n    }\r\n    _getVisibleEditRowIndex(columnName) {\r\n        const dataController = this._dataController;\r\n        const editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n        const rowIndex = dataController.getRowIndexByKey(editRowKey);\r\n        if (-1 === rowIndex) {\r\n            return rowIndex\r\n        }\r\n        return rowIndex + this._getEditRowIndexCorrection(columnName)\r\n    }\r\n    _getEditRowIndexCorrection(columnName) {\r\n        const editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\r\n        const isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\r\n        return isColumnHidden ? 1 : 0\r\n    }\r\n    _resetEditRowKey() {\r\n        this._refocusEditCell = false;\r\n        this._setEditRowKey(null, true)\r\n    }\r\n    _resetEditIndices() {\r\n        this._resetEditColumnName();\r\n        this._resetEditRowKey()\r\n    }\r\n    editRow(rowIndex) {\r\n        const dataController = this._dataController;\r\n        const items = dataController.items();\r\n        const item = items[rowIndex];\r\n        const params = {\r\n            data: item && item.data,\r\n            cancel: false\r\n        };\r\n        const oldRowIndex = this._getVisibleEditRowIndex();\r\n        if (!item) {\r\n            return\r\n        }\r\n        if (rowIndex === oldRowIndex) {\r\n            return true\r\n        }\r\n        if (void 0 === item.key) {\r\n            this._dataController.fireError(\"E1043\");\r\n            return\r\n        }\r\n        if (!item.isNewRow) {\r\n            params.key = item.key\r\n        }\r\n        if (this._isEditingStart(params)) {\r\n            return\r\n        }\r\n        this.resetChanges();\r\n        this.init();\r\n        this._resetEditColumnName();\r\n        this._pageIndex = dataController.pageIndex();\r\n        this._addInternalData({\r\n            key: item.key,\r\n            oldData: item.oldData ?? item.data\r\n        });\r\n        this._setEditRowKey(item.key)\r\n    }\r\n    _editRowFromOptionChanged(rowIndex, oldRowIndex) {\r\n        const rowIndices = [oldRowIndex, rowIndex];\r\n        this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\r\n        this._editRowFromOptionChangedCore(rowIndices, rowIndex)\r\n    }\r\n    _editRowFromOptionChangedCore(rowIndices, rowIndex, preventRendering) {\r\n        this._needFocusEditor = true;\r\n        this._dataController.updateItems({\r\n            changeType: \"update\",\r\n            rowIndices: rowIndices,\r\n            cancel: preventRendering\r\n        })\r\n    }\r\n    _focusEditorIfNeed() {}\r\n    _showEditPopup(rowIndex, repaintForm) {}\r\n    _repaintEditPopup() {}\r\n    _getEditPopupHiddenHandler() {\r\n        return e => {\r\n            if (this.isEditing()) {\r\n                this.cancelEditData()\r\n            }\r\n        }\r\n    }\r\n    _getPopupEditFormTemplate(rowIndex) {}\r\n    _getSaveButtonConfig() {\r\n        const buttonConfig = {\r\n            text: this.option(\"editing.texts.saveRowChanges\"),\r\n            onClick: this.saveEditData.bind(this)\r\n        };\r\n        if (isFluent(current())) {\r\n            buttonConfig.stylingMode = \"contained\";\r\n            buttonConfig.type = \"default\"\r\n        }\r\n        return buttonConfig\r\n    }\r\n    _getCancelButtonConfig() {\r\n        const buttonConfig = {\r\n            text: this.option(\"editing.texts.cancelRowChanges\"),\r\n            onClick: this.cancelEditData.bind(this)\r\n        };\r\n        if (isFluent(current())) {\r\n            buttonConfig.stylingMode = \"outlined\"\r\n        }\r\n        return buttonConfig\r\n    }\r\n    _removeInternalData(key) {\r\n        this._internalState.delete(getKeyHash(key))\r\n    }\r\n    _updateInsertAfterOrBeforeKeys(changes, index) {\r\n        const removeChange = changes[index];\r\n        changes.forEach((change => {\r\n            if (change.type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                const insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\r\n                    change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange)\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    _removeChange(index) {\r\n        if (index >= 0) {\r\n            const changes = [...this.getChanges()];\r\n            const {\r\n                key: key\r\n            } = changes[index];\r\n            this._removeInternalData(key);\r\n            this._updateInsertAfterOrBeforeKeys(changes, index);\r\n            changes.splice(index, 1);\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n            if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\r\n                this._resetEditIndices()\r\n            }\r\n        }\r\n    }\r\n    executeOperation(deferred, func) {\r\n        this._lastOperation && this._lastOperation.reject();\r\n        this._lastOperation = deferred;\r\n        this.waitForDeferredOperations().done((() => {\r\n            if (\"rejected\" === deferred.state()) {\r\n                return\r\n            }\r\n            func();\r\n            this._lastOperation = null\r\n        })).fail((() => {\r\n            deferred.reject();\r\n            this._lastOperation = null\r\n        }))\r\n    }\r\n    waitForDeferredOperations() {\r\n        return when(...this._deferreds)\r\n    }\r\n    _processCanceledEditingCell() {}\r\n    _repaintEditCell(column, oldColumn, oldEditRowIndex) {\r\n        if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\r\n            this._editCellInProgress = true;\r\n            this._needFocusEditor = true;\r\n            this._editorFactoryController.loseFocus();\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\r\n            })\r\n        } else if (column !== oldColumn) {\r\n            this._needFocusEditor = true;\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: []\r\n            })\r\n        }\r\n    }\r\n    _delayedInputFocus($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\r\n        const inputFocus = () => {\r\n            if (beforeFocusCallback) {\r\n                beforeFocusCallback()\r\n            }\r\n            if ($cell) {\r\n                const $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\r\n                gridCoreUtils.focusAndSelectElement(this, $focusableElement)\r\n            }\r\n            this._beforeFocusCallback = null\r\n        };\r\n        if (devices.real().ios || devices.real().android) {\r\n            inputFocus()\r\n        } else {\r\n            if (this._beforeFocusCallback) {\r\n                this._beforeFocusCallback()\r\n            }\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            if (callBeforeFocusCallbackAlways) {\r\n                this._beforeFocusCallback = beforeFocusCallback\r\n            }\r\n            this._inputFocusTimeoutID = setTimeout(inputFocus)\r\n        }\r\n    }\r\n    _focusEditingCell(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\r\n        const editColumnIndex = this._getVisibleEditColumnIndex();\r\n        $editCell = $editCell || this._rowsView && this._rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n        if ($editCell) {\r\n            this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)\r\n        }\r\n    }\r\n    deleteRow(rowIndex) {\r\n        this._checkAndDeleteRow(rowIndex)\r\n    }\r\n    _checkAndDeleteRow(rowIndex) {\r\n        const editingOptions = this.option(\"editing\");\r\n        const editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\r\n        const confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\r\n        const confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\r\n        const item = this._dataController.items()[rowIndex];\r\n        const allowDeleting = !this.isEditing() || item.isNewRow;\r\n        if (item && allowDeleting) {\r\n            if (!confirmDelete || !confirmDeleteMessage) {\r\n                this._deleteRowCore(rowIndex)\r\n            } else {\r\n                const confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\r\n                const showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\r\n                confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done((confirmResult => {\r\n                    if (confirmResult) {\r\n                        this._deleteRowCore(rowIndex)\r\n                    }\r\n                }))\r\n            }\r\n        }\r\n    }\r\n    _deleteRowCore(rowIndex) {\r\n        const dataController = this._dataController;\r\n        const item = dataController.items()[rowIndex];\r\n        const key = item && item.key;\r\n        const oldEditRowIndex = this._getVisibleEditRowIndex();\r\n        this.refresh();\r\n        const changes = this.getChanges();\r\n        const editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n        if (editIndex >= 0) {\r\n            if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                this._removeChange(editIndex)\r\n            } else {\r\n                this._addChange({\r\n                    key: key,\r\n                    type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                })\r\n            }\r\n        } else {\r\n            this._addChange({\r\n                key: key,\r\n                oldData: item.data,\r\n                type: DATA_EDIT_DATA_REMOVE_TYPE\r\n            })\r\n        }\r\n        return this._afterDeleteRow(rowIndex, oldEditRowIndex)\r\n    }\r\n    _afterDeleteRow(rowIndex, oldEditRowIndex) {\r\n        return this.saveEditData()\r\n    }\r\n    undeleteRow(rowIndex) {\r\n        const dataController = this._dataController;\r\n        const item = dataController.items()[rowIndex];\r\n        const oldEditRowIndex = this._getVisibleEditRowIndex();\r\n        const key = item && item.key;\r\n        const changes = this.getChanges();\r\n        if (item) {\r\n            const editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (editIndex >= 0) {\r\n                const {\r\n                    data: data\r\n                } = changes[editIndex];\r\n                if (isEmptyObject(data)) {\r\n                    this._removeChange(editIndex)\r\n                } else {\r\n                    this._addChange({\r\n                        key: key,\r\n                        type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                    })\r\n                }\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, rowIndex]\r\n                })\r\n            }\r\n        }\r\n    }\r\n    _fireOnSaving() {\r\n        const onSavingParams = {\r\n            cancel: false,\r\n            promise: null,\r\n            changes: [...this.getChanges()]\r\n        };\r\n        this.executeAction(\"onSaving\", onSavingParams);\r\n        const d = new Deferred;\r\n        when(fromPromise(onSavingParams.promise)).done((() => {\r\n            d.resolve(onSavingParams)\r\n        })).fail((arg => {\r\n            createFailureHandler(d);\r\n            this._fireDataErrorOccurred(arg);\r\n            d.resolve({\r\n                cancel: true\r\n            })\r\n        }));\r\n        return d\r\n    }\r\n    _executeEditingAction(actionName, params, func) {\r\n        if (this.component._disposed) {\r\n            return null\r\n        }\r\n        const deferred = new Deferred;\r\n        this.executeAction(actionName, params);\r\n        when(fromPromise(params.cancel)).done((cancel => {\r\n            if (cancel) {\r\n                setTimeout((() => {\r\n                    deferred.resolve(\"cancel\")\r\n                }))\r\n            } else {\r\n                func(params).done(deferred.resolve).fail(createFailureHandler(deferred))\r\n            }\r\n        })).fail(createFailureHandler(deferred));\r\n        return deferred\r\n    }\r\n    _processChanges(deferreds, results, dataChanges, changes) {\r\n        const store = this._dataController.store();\r\n        each(changes, ((index, change) => {\r\n            const oldData = this._getOldData(change.key);\r\n            const {\r\n                data: data,\r\n                type: type\r\n            } = change;\r\n            const changeCopy = _extends({}, change);\r\n            let deferred;\r\n            let params;\r\n            if (this._beforeSaveEditData(change, index)) {\r\n                return\r\n            }\r\n            switch (type) {\r\n                case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                    params = {\r\n                        data: oldData,\r\n                        key: change.key,\r\n                        cancel: false\r\n                    };\r\n                    deferred = this._executeEditingAction(\"onRowRemoving\", params, (() => store.remove(change.key).done((key => {\r\n                        dataChanges.push({\r\n                            type: \"remove\",\r\n                            key: key\r\n                        })\r\n                    }))));\r\n                    break;\r\n                case DATA_EDIT_DATA_INSERT_TYPE:\r\n                    params = {\r\n                        data: data,\r\n                        cancel: false\r\n                    };\r\n                    deferred = this._executeEditingAction(\"onRowInserting\", params, (() => store.insert(params.data).done(((data, key) => {\r\n                        if (isDefined(key)) {\r\n                            changeCopy.key = key\r\n                        }\r\n                        if (data && isObject(data) && data !== params.data) {\r\n                            changeCopy.data = data\r\n                        }\r\n                        dataChanges.push({\r\n                            type: \"insert\",\r\n                            data: data,\r\n                            index: 0\r\n                        })\r\n                    }))));\r\n                    break;\r\n                case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                    params = {\r\n                        newData: data,\r\n                        oldData: oldData,\r\n                        key: change.key,\r\n                        cancel: false\r\n                    };\r\n                    deferred = this._executeEditingAction(\"onRowUpdating\", params, (() => store.update(change.key, params.newData).done(((data, key) => {\r\n                        if (data && isObject(data) && data !== params.newData) {\r\n                            changeCopy.data = data\r\n                        }\r\n                        dataChanges.push({\r\n                            type: \"update\",\r\n                            key: key,\r\n                            data: data\r\n                        })\r\n                    }))))\r\n            }\r\n            changes[index] = changeCopy;\r\n            if (deferred) {\r\n                const doneDeferred = new Deferred;\r\n                deferred.always((data => {\r\n                    results.push({\r\n                        key: change.key,\r\n                        result: data\r\n                    })\r\n                })).always(doneDeferred.resolve);\r\n                deferreds.push(doneDeferred.promise())\r\n            }\r\n        }))\r\n    }\r\n    _processRemoveIfError(changes, editIndex) {\r\n        const change = changes[editIndex];\r\n        if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n            if (editIndex >= 0) {\r\n                changes.splice(editIndex, 1)\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    _processRemove(changes, editIndex, cancel) {\r\n        const change = changes[editIndex];\r\n        if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n            return this._processRemoveCore(changes, editIndex, !cancel || !change)\r\n        }\r\n    }\r\n    _processRemoveCore(changes, editIndex, processIfBatch) {\r\n        if (editIndex >= 0) {\r\n            changes.splice(editIndex, 1)\r\n        }\r\n        return true\r\n    }\r\n    _processSaveEditDataResult(results) {\r\n        let hasSavedData = false;\r\n        const originalChanges = this.getChanges();\r\n        const changes = [...originalChanges];\r\n        const changesLength = changes.length;\r\n        for (let i = 0; i < results.length; i++) {\r\n            const arg = results[i].result;\r\n            const cancel = \"cancel\" === arg;\r\n            const editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\r\n            const change = changes[editIndex];\r\n            const isError = arg && arg instanceof Error;\r\n            if (isError) {\r\n                if (change) {\r\n                    this._addInternalData({\r\n                        key: change.key,\r\n                        error: arg\r\n                    })\r\n                }\r\n                this._fireDataErrorOccurred(arg);\r\n                if (this._processRemoveIfError(changes, editIndex)) {\r\n                    break\r\n                }\r\n            } else if (this._processRemove(changes, editIndex, cancel)) {\r\n                hasSavedData = !cancel;\r\n                const removedChangeIndex = gridCoreUtils.getIndexByKey(results[i].key, originalChanges);\r\n                this._updateInsertAfterOrBeforeKeys(originalChanges, removedChangeIndex)\r\n            }\r\n        }\r\n        if (changes.length < changesLength) {\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes)\r\n        }\r\n        return hasSavedData\r\n    }\r\n    _fireSaveEditDataEvents(changes) {\r\n        each(changes, ((_, _ref) => {\r\n            let {\r\n                data: data,\r\n                key: key,\r\n                type: type\r\n            } = _ref;\r\n            const internalData = this._addInternalData({\r\n                key: key\r\n            });\r\n            const params = {\r\n                key: key,\r\n                data: data\r\n            };\r\n            if (internalData.error) {\r\n                params.error = internalData.error\r\n            }\r\n            switch (type) {\r\n                case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                    this.executeAction(\"onRowRemoved\", extend({}, params, {\r\n                        data: internalData.oldData\r\n                    }));\r\n                    break;\r\n                case DATA_EDIT_DATA_INSERT_TYPE:\r\n                    this.executeAction(\"onRowInserted\", params);\r\n                    break;\r\n                case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                    this.executeAction(\"onRowUpdated\", params)\r\n            }\r\n        }));\r\n        this.executeAction(\"onSaved\", {\r\n            changes: changes\r\n        })\r\n    }\r\n    saveEditData() {\r\n        const deferred = new Deferred;\r\n        this.waitForDeferredOperations().done((() => {\r\n            if (this.isSaving()) {\r\n                this._resolveAfterSave(deferred);\r\n                return\r\n            }\r\n            when(this._beforeSaveEditData()).done((cancel => {\r\n                if (cancel) {\r\n                    this._resolveAfterSave(deferred, {\r\n                        cancel: cancel\r\n                    });\r\n                    return\r\n                }\r\n                this._saving = true;\r\n                this._saveEditDataInner().always((() => {\r\n                    this._saving = false;\r\n                    if (this._refocusEditCell) {\r\n                        this._focusEditingCell()\r\n                    }\r\n                })).done(deferred.resolve).fail(deferred.reject)\r\n            })).fail(deferred.reject)\r\n        })).fail(deferred.reject);\r\n        return deferred.promise()\r\n    }\r\n    _resolveAfterSave(deferred) {\r\n        let {\r\n            cancel: cancel,\r\n            error: error\r\n        } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n        when(this._afterSaveEditData(cancel)).done((() => {\r\n            deferred.resolve(error)\r\n        })).fail(deferred.reject)\r\n    }\r\n    _saveEditDataInner() {\r\n        const result = new Deferred;\r\n        const results = [];\r\n        const deferreds = [];\r\n        const dataChanges = [];\r\n        const dataSource = this._dataController.dataSource();\r\n        when(this._fireOnSaving()).done((_ref2 => {\r\n            let {\r\n                cancel: cancel,\r\n                changes: changes\r\n            } = _ref2;\r\n            if (cancel) {\r\n                return result.resolve().promise()\r\n            }\r\n            this._processChanges(deferreds, results, dataChanges, changes);\r\n            if (deferreds.length) {\r\n                this._refocusEditCell = true;\r\n                null === dataSource || void 0 === dataSource || dataSource.beginLoading();\r\n                when(...deferreds).done((() => {\r\n                    if (this._processSaveEditDataResult(results)) {\r\n                        this._endSaving(dataChanges, changes, result)\r\n                    } else {\r\n                        null === dataSource || void 0 === dataSource || dataSource.endLoading();\r\n                        result.resolve()\r\n                    }\r\n                })).fail((error => {\r\n                    null === dataSource || void 0 === dataSource || dataSource.endLoading();\r\n                    result.resolve(error)\r\n                }));\r\n                return result.always((() => {\r\n                    this._refocusEditCell = true\r\n                })).promise()\r\n            }\r\n            this._cancelSaving(result)\r\n        })).fail(result.reject);\r\n        return result.promise()\r\n    }\r\n    _beforeEndSaving(changes) {\r\n        this._resetEditIndices()\r\n    }\r\n    _endSaving(dataChanges, changes, deferred) {\r\n        const dataSource = this._dataController.dataSource();\r\n        this._beforeEndSaving(changes);\r\n        null === dataSource || void 0 === dataSource || dataSource.endLoading();\r\n        this._refreshDataAfterSave(dataChanges, changes, deferred)\r\n    }\r\n    _cancelSaving(result) {\r\n        this.executeAction(\"onSaved\", {\r\n            changes: []\r\n        });\r\n        this._resolveAfterSave(result)\r\n    }\r\n    _refreshDataAfterSave(dataChanges, changes, deferred) {\r\n        const dataController = this._dataController;\r\n        const refreshMode = this.option(\"editing.refreshMode\");\r\n        const isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\r\n        if (!isFullRefresh) {\r\n            dataController.push(dataChanges)\r\n        }\r\n        when(dataController.refresh({\r\n            selection: isFullRefresh,\r\n            reload: isFullRefresh,\r\n            load: \"reshape\" === refreshMode,\r\n            changesOnly: this.option(\"repaintChangesOnly\")\r\n        })).always((() => {\r\n            this._fireSaveEditDataEvents(changes)\r\n        })).done((() => {\r\n            this._resolveAfterSave(deferred)\r\n        })).fail((error => {\r\n            this._resolveAfterSave(deferred, {\r\n                error: error\r\n            })\r\n        }))\r\n    }\r\n    isSaving() {\r\n        return this._saving\r\n    }\r\n    _updateEditColumn() {\r\n        const isEditColumnVisible = this._isEditColumnVisible();\r\n        const useIcons = this.option(\"editing.useIcons\");\r\n        const cssClass = COMMAND_EDIT_CLASS + (useIcons ? ` ${COMMAND_EDIT_WITH_ICONS_CLASS}` : \"\");\r\n        this._columnsController.addCommandColumn({\r\n            type: \"buttons\",\r\n            command: \"edit\",\r\n            visible: isEditColumnVisible,\r\n            cssClass: cssClass,\r\n            width: \"auto\",\r\n            alignment: \"center\",\r\n            cellTemplate: this._getEditCommandCellTemplate(),\r\n            fixedPosition: \"right\"\r\n        });\r\n        this._columnsController.columnOption(\"command:edit\", {\r\n            visible: isEditColumnVisible,\r\n            cssClass: cssClass\r\n        })\r\n    }\r\n    _isEditColumnVisible() {\r\n        const editingOptions = this.option(\"editing\");\r\n        return editingOptions.allowDeleting\r\n    }\r\n    _isEditButtonDisabled() {\r\n        const hasChanges = this.hasChanges();\r\n        const isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\r\n        return !(isEditRowDefined || hasChanges)\r\n    }\r\n    _updateEditButtons() {\r\n        const isButtonDisabled = this._isEditButtonDisabled();\r\n        if (this._headerPanelView) {\r\n            this._headerPanelView.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\r\n            this._headerPanelView.setToolbarItemDisabled(\"revertButton\", isButtonDisabled)\r\n        }\r\n    }\r\n    _applyModified($element, options) {\r\n        $element && $element.addClass(CELL_MODIFIED)\r\n    }\r\n    _beforeCloseEditCellInBatchMode(rowIndices) {}\r\n    cancelEditData() {\r\n        const changes = this.getChanges();\r\n        const params = {\r\n            cancel: false,\r\n            changes: changes\r\n        };\r\n        this.executeAction(\"onEditCanceling\", params);\r\n        if (!params.cancel) {\r\n            this._cancelEditDataCore();\r\n            this.executeAction(\"onEditCanceled\", {\r\n                changes: changes\r\n            })\r\n        }\r\n    }\r\n    _cancelEditDataCore() {\r\n        const rowIndex = this._getVisibleEditRowIndex();\r\n        this._beforeCancelEditData();\r\n        this.init();\r\n        this.resetChanges();\r\n        this._resetEditColumnName();\r\n        this._resetEditRowKey();\r\n        this._afterCancelEditData(rowIndex)\r\n    }\r\n    _afterCancelEditData(rowIndex) {\r\n        const dataController = this._dataController;\r\n        dataController.updateItems({\r\n            repaintChangesOnly: this.option(\"repaintChangesOnly\")\r\n        })\r\n    }\r\n    _hideEditPopup() {}\r\n    hasEditData() {\r\n        return this.hasChanges()\r\n    }\r\n    update(changeType) {\r\n        const dataController = this._dataController;\r\n        if (dataController && this._pageIndex !== dataController.pageIndex()) {\r\n            if (\"refresh\" === changeType) {\r\n                this.refresh({\r\n                    isPageChanged: true\r\n                })\r\n            }\r\n            this._pageIndex = dataController.pageIndex()\r\n        }\r\n        this._updateEditButtons()\r\n    }\r\n    _getRowIndicesForCascadeUpdating(row, skipCurrentRow) {\r\n        return skipCurrentRow ? [] : [row.rowIndex]\r\n    }\r\n    addDeferred(deferred) {\r\n        if (!this._deferreds.includes(deferred)) {\r\n            this._deferreds.push(deferred);\r\n            deferred.always((() => {\r\n                const index = this._deferreds.indexOf(deferred);\r\n                if (index >= 0) {\r\n                    this._deferreds.splice(index, 1)\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    _prepareChange(options, value, text) {\r\n        var _options$row;\r\n        const newData = {};\r\n        const oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\r\n        const rowKey = options.key;\r\n        const deferred = new Deferred;\r\n        if (void 0 !== rowKey) {\r\n            options.value = value;\r\n            const setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\r\n            setCellValueResult.done((() => {\r\n                deferred.resolve({\r\n                    data: newData,\r\n                    key: rowKey,\r\n                    oldData: oldData,\r\n                    type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                })\r\n            })).fail(createFailureHandler(deferred)).fail((arg => this._fireDataErrorOccurred(arg)));\r\n            if (isDefined(text) && options.column.displayValueMap) {\r\n                options.column.displayValueMap[value] = text\r\n            }\r\n            this._updateRowValues(options);\r\n            this.addDeferred(deferred)\r\n        }\r\n        return deferred\r\n    }\r\n    _updateRowValues(options) {\r\n        if (options.values) {\r\n            const dataController = this._dataController;\r\n            const rowIndex = dataController.getRowIndexByKey(options.key);\r\n            const row = dataController.getVisibleRows()[rowIndex];\r\n            if (row) {\r\n                options.row.values = row.values;\r\n                options.values = row.values\r\n            }\r\n            options.values[options.columnIndex] = options.value\r\n        }\r\n    }\r\n    updateFieldValue(options, value, text, forceUpdateRow) {\r\n        const rowKey = options.key;\r\n        const deferred = new Deferred;\r\n        if (void 0 === rowKey) {\r\n            this._dataController.fireError(\"E1043\")\r\n        }\r\n        if (options.column.setCellValue) {\r\n            this._prepareChange(options, value, text).done((params => {\r\n                when(this._applyChange(options, params, forceUpdateRow)).always((() => {\r\n                    deferred.resolve()\r\n                }))\r\n            }))\r\n        } else {\r\n            deferred.resolve()\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    _focusPreviousEditingCellIfNeed(options) {\r\n        if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\r\n            this._focusEditingCell();\r\n            this._updateEditRow(options.row, true);\r\n            return true\r\n        }\r\n    }\r\n    _needUpdateRow(column) {\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        if (!column) {\r\n            column = this._getEditColumn()\r\n        }\r\n        const isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\r\n        const isCustomCalculateCellValue = visibleColumns.some((visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue));\r\n        return isCustomSetCellValue || isCustomCalculateCellValue\r\n    }\r\n    _applyChange(options, params, forceUpdateRow) {\r\n        const changeOptions = _extends({}, options, {\r\n            forceUpdateRow: forceUpdateRow\r\n        });\r\n        this._addChange(params, changeOptions);\r\n        this._updateEditButtons();\r\n        return this._applyChangeCore(options, changeOptions.forceUpdateRow)\r\n    }\r\n    _applyChangeCore(options, forceUpdateRow) {\r\n        const isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n        const {\r\n            row: row\r\n        } = options;\r\n        if (row) {\r\n            if (forceUpdateRow || isCustomSetCellValue) {\r\n                this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n            } else if (row.update) {\r\n                row.update()\r\n            }\r\n        }\r\n    }\r\n    _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {\r\n        this._dataController.updateItems({\r\n            changeType: \"update\",\r\n            rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\r\n        })\r\n    }\r\n    _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {\r\n        if (forceUpdateRow) {\r\n            this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n        } else {\r\n            this._updateRowWithDelay(row, isCustomSetCellValue)\r\n        }\r\n    }\r\n    _updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue) {\r\n        this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\r\n        this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n        if (!forceUpdateRow) {\r\n            this._focusEditingCell()\r\n        }\r\n    }\r\n    _updateRowWithDelay(row, isCustomSetCellValue) {\r\n        const deferred = new Deferred;\r\n        this.addDeferred(deferred);\r\n        setTimeout((() => {\r\n            var _this$_editForm;\r\n            const elementContainer = (null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.element()) || this.component.$element().get(0);\r\n            const $focusedElement = $(domAdapter.getActiveElement(elementContainer));\r\n            const columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\r\n            let focusedElement = $focusedElement.get(0);\r\n            const selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n            this._updateEditRowCore(row, false, isCustomSetCellValue);\r\n            this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n            if (columnIndex >= 0) {\r\n                const $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\r\n                this._delayedInputFocus($focusedItem, (() => {\r\n                    setTimeout((() => {\r\n                        var _this$component$$elem;\r\n                        focusedElement = domAdapter.getActiveElement(null === (_this$component$$elem = this.component.$element()) || void 0 === _this$component$$elem ? void 0 : _this$component$$elem.get(0));\r\n                        if (selectionRange.selectionStart >= 0) {\r\n                            gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n                        }\r\n                    }))\r\n                }))\r\n            }\r\n            deferred.resolve()\r\n        }))\r\n    }\r\n    _validateEditFormAfterUpdate() {}\r\n    _addChange(changeParams, options) {\r\n        var _this$getChanges;\r\n        const row = null === options || void 0 === options ? void 0 : options.row;\r\n        const changes = [...this.getChanges()];\r\n        let index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\r\n        if (index < 0) {\r\n            index = changes.length;\r\n            this._addInternalData({\r\n                key: changeParams.key,\r\n                oldData: changeParams.oldData\r\n            });\r\n            delete changeParams.oldData;\r\n            changes.push(changeParams)\r\n        }\r\n        const change = _extends({}, changes[index]);\r\n        if (change) {\r\n            if (changeParams.data) {\r\n                change.data = createObjectWithChanges(change.data, changeParams.data)\r\n            }\r\n            if ((!change.type || !changeParams.data) && changeParams.type) {\r\n                change.type = changeParams.type\r\n            }\r\n            if (row) {\r\n                row.oldData = this._getOldData(row.key);\r\n                row.data = createObjectWithChanges(row.data, changeParams.data)\r\n            }\r\n        }\r\n        changes[index] = change;\r\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n        if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\r\n            options.forceUpdateRow = true\r\n        }\r\n        return change\r\n    }\r\n    _getFormEditItemTemplate(cellOptions, column) {\r\n        return column.editCellTemplate || this._getDefaultEditorTemplate()\r\n    }\r\n    getColumnTemplate(options) {\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const rowIndex = options.row && options.row.rowIndex;\r\n        let template;\r\n        const isRowMode = this.isRowBasedEditMode();\r\n        const isRowEditing = this.isEditRow(rowIndex);\r\n        const isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\r\n        let editingStartOptions;\r\n        if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\r\n            const allowUpdating = this.allowUpdating(options);\r\n            if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\r\n                if (column.showEditorAlways && !isRowMode) {\r\n                    editingStartOptions = {\r\n                        cancel: false,\r\n                        key: options.row.isNewRow ? void 0 : options.row.key,\r\n                        data: options.row.data,\r\n                        column: column\r\n                    };\r\n                    this._isEditingStart(editingStartOptions)\r\n                }\r\n                if (!editingStartOptions || !editingStartOptions.cancel) {\r\n                    options.setValue = (value, text) => {\r\n                        this.updateFieldValue(options, value, text)\r\n                    }\r\n                }\r\n            }\r\n            template = column.editCellTemplate || this._getDefaultEditorTemplate()\r\n        } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\r\n            template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options)\r\n        }\r\n        return template\r\n    }\r\n    _createButton($container, button, options, change) {\r\n        let icon = EDIT_ICON_CLASS[button.name];\r\n        const useIcons = this.option(\"editing.useIcons\");\r\n        const useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\r\n        let $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\r\n        if (button.template && useLegacyColumnButtonTemplate) {\r\n            this._rowsView.renderTemplate($container, button.template, options, true)\r\n        } else {\r\n            if (button.template) {\r\n                $button = $(\"<span>\").addClass(button.cssClass)\r\n            } else if (useIcons && icon || button.icon) {\r\n                icon = button.icon || icon;\r\n                const iconType = iconUtils.getImageSourceType(icon);\r\n                if (\"image\" === iconType || \"svg\" === iconType) {\r\n                    $button = iconUtils.getImageContainer(icon).addClass(button.cssClass)\r\n                } else {\r\n                    $button.addClass(`dx-icon${\"dxIcon\"===iconType?\"-\":\" \"}${icon}`).attr(\"title\", button.text)\r\n                }\r\n                $button.addClass(LINK_ICON_CLASS);\r\n                $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\r\n                const localizationName = this.getButtonLocalizationNames()[button.name];\r\n                localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName))\r\n            } else {\r\n                $button.text(button.text)\r\n            }\r\n            if (isDefined(button.hint)) {\r\n                $button.attr(\"title\", button.hint)\r\n            }\r\n            if (this._isButtonDisabled(button, options)) {\r\n                $button.addClass(\"dx-state-disabled\")\r\n            } else if (!button.template || button.onClick) {\r\n                eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction((e => {\r\n                    var _button$onClick;\r\n                    null === (_button$onClick = button.onClick) || void 0 === _button$onClick || _button$onClick.call(button, extend({}, e, {\r\n                        row: options.row,\r\n                        column: options.column\r\n                    }));\r\n                    e.event.preventDefault();\r\n                    e.event.stopPropagation()\r\n                })))\r\n            }\r\n            $container.append($button);\r\n            if (button.template) {\r\n                options.renderAsync = false;\r\n                this._rowsView.renderTemplate($button, button.template, options, true, change)\r\n            }\r\n        }\r\n    }\r\n    getButtonLocalizationNames() {\r\n        return {\r\n            edit: \"dxDataGrid-editingEditRow\",\r\n            save: \"dxDataGrid-editingSaveRowChanges\",\r\n            delete: \"dxDataGrid-editingDeleteRow\",\r\n            undelete: \"dxDataGrid-editingUndeleteRow\",\r\n            cancel: \"dxDataGrid-editingCancelRowChanges\"\r\n        }\r\n    }\r\n    prepareButtonItem(headerPanel, name, methodName, sortIndex) {\r\n        const editingTexts = this.option(\"editing.texts\") ?? {};\r\n        const titleButtonTextByClassNames = {\r\n            revert: editingTexts.cancelAllChanges,\r\n            save: editingTexts.saveAllChanges,\r\n            addRow: editingTexts.addRow\r\n        };\r\n        const className = {\r\n            revert: \"cancel\",\r\n            save: \"save\",\r\n            addRow: \"addrow\"\r\n        } [name];\r\n        const hintText = titleButtonTextByClassNames[name];\r\n        const isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\r\n        return {\r\n            widget: \"dxButton\",\r\n            options: {\r\n                onInitialized: e => {\r\n                    $(e.element).addClass(headerPanel._getToolbarButtonClass(`${EDIT_BUTTON_CLASS} ${this.addWidgetPrefix(className)}-button`))\r\n                },\r\n                icon: `edit-button-${className}`,\r\n                disabled: isButtonDisabled,\r\n                onClick: () => {\r\n                    setTimeout((() => {\r\n                        this[methodName]()\r\n                    }))\r\n                },\r\n                text: hintText,\r\n                hint: hintText\r\n            },\r\n            showText: \"inMenu\",\r\n            name: `${name}Button`,\r\n            location: \"after\",\r\n            locateInMenu: \"auto\",\r\n            sortIndex: sortIndex\r\n        }\r\n    }\r\n    prepareEditButtons(headerPanel) {\r\n        const editingOptions = this.option(\"editing\") ?? {};\r\n        const buttonItems = [];\r\n        if (editingOptions.allowAdding) {\r\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20))\r\n        }\r\n        return buttonItems\r\n    }\r\n    highlightDataCell($cell, params) {\r\n        this.shouldHighlightCell(params) && $cell.addClass(CELL_MODIFIED)\r\n    }\r\n    _afterInsertRow(key) {}\r\n    _beforeSaveEditData(change) {\r\n        if (change && !isDefined(change.key) && isDefined(change.type)) {\r\n            return true\r\n        }\r\n    }\r\n    _afterSaveEditData() {}\r\n    _beforeCancelEditData() {}\r\n    _allowEditAction(actionName, options) {\r\n        let allowEditAction = this.option(`editing.${actionName}`);\r\n        if (isFunction(allowEditAction)) {\r\n            allowEditAction = allowEditAction({\r\n                component: this.component,\r\n                row: options.row\r\n            })\r\n        }\r\n        return allowEditAction\r\n    }\r\n    allowUpdating(options, eventName) {\r\n        const startEditAction = this.option(\"editing.startEditAction\") ?? DEFAULT_START_EDIT_ACTION;\r\n        const needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\r\n        return needCallback && this._allowEditAction(\"allowUpdating\", options)\r\n    }\r\n    allowDeleting(options) {\r\n        return this._allowEditAction(\"allowDeleting\", options)\r\n    }\r\n    isCellModified(parameters) {\r\n        var _parameters$row, _parameters$row2;\r\n        const {\r\n            columnIndex: columnIndex\r\n        } = parameters;\r\n        let modifiedValue = null === parameters || void 0 === parameters || null === (_parameters$row = parameters.row) || void 0 === _parameters$row || null === (_parameters$row = _parameters$row.modifiedValues) || void 0 === _parameters$row ? void 0 : _parameters$row[columnIndex];\r\n        if (null !== parameters && void 0 !== parameters && null !== (_parameters$row2 = parameters.row) && void 0 !== _parameters$row2 && _parameters$row2.isNewRow) {\r\n            modifiedValue = parameters.value\r\n        }\r\n        return void 0 !== modifiedValue\r\n    }\r\n    isNewRowInEditMode() {\r\n        const visibleEditRowIndex = this._getVisibleEditRowIndex();\r\n        const rows = this._dataController.items();\r\n        return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false\r\n    }\r\n    _isRowDeleteAllowed() {}\r\n    shouldHighlightCell(parameters) {\r\n        const cellModified = this.isCellModified(parameters);\r\n        return cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing)\r\n    }\r\n}\r\nexport const dataControllerEditingExtenderMixin = Base => class extends Base {\r\n    reload(full, repaintChangesOnly) {\r\n        !repaintChangesOnly && this._editingController.refresh();\r\n        return super.reload.apply(this, arguments)\r\n    }\r\n    repaintRows() {\r\n        if (this._editingController.isSaving()) {\r\n            return\r\n        }\r\n        return super.repaintRows.apply(this, arguments)\r\n    }\r\n    _updateEditRow(items) {\r\n        const editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n        const editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\r\n        const editItem = items[editRowIndex];\r\n        if (editItem) {\r\n            var _this$_updateEditItem;\r\n            editItem.isEditing = true;\r\n            null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem || _this$_updateEditItem.call(this, editItem)\r\n        }\r\n    }\r\n    _updateItemsCore(change) {\r\n        super._updateItemsCore(change);\r\n        this._updateEditRow(this.items(true))\r\n    }\r\n    _applyChangeUpdate(change) {\r\n        this._updateEditRow(change.items);\r\n        super._applyChangeUpdate(change)\r\n    }\r\n    _applyChangesOnly(change) {\r\n        this._updateEditRow(change.items);\r\n        super._applyChangesOnly(change)\r\n    }\r\n    _processItems(items, change) {\r\n        items = this._editingController.processItems(items, change);\r\n        return super._processItems(items, change)\r\n    }\r\n    _processDataItem(dataItem, options) {\r\n        this._editingController.processDataItem(dataItem, options, this.generateDataValues);\r\n        return super._processDataItem(dataItem, options)\r\n    }\r\n    _processItem(item, options) {\r\n        item = super._processItem(item, options);\r\n        if (item.isNewRow) {\r\n            options.dataIndex--;\r\n            delete item.dataIndex\r\n        }\r\n        return item\r\n    }\r\n    _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n        if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\r\n            return\r\n        }\r\n        return super._getChangedColumnIndices.apply(this, arguments)\r\n    }\r\n    _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n        const cell = oldRow.cells && oldRow.cells[columnIndex];\r\n        const isEditing = this._editingController && this._editingController.isEditCell(visibleRowIndex, columnIndex);\r\n        if (isLiveUpdate && isEditing) {\r\n            return false\r\n        }\r\n        if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\r\n            return true\r\n        }\r\n        return super._isCellChanged.apply(this, arguments)\r\n    }\r\n    needToRefreshOnDataSourceChange(args) {\r\n        const isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && this._editingController.isSaving();\r\n        return !isParasiteChange\r\n    }\r\n    _handleDataSourceChange(args) {\r\n        const result = super._handleDataSourceChange(args);\r\n        const changes = this.option(\"editing.changes\");\r\n        const dataSource = args.value;\r\n        if (Array.isArray(dataSource) && changes.length) {\r\n            const dataSourceKeys = dataSource.map((item => this.keyOf(item)));\r\n            const newChanges = changes.filter((change => \"insert\" === change.type || dataSourceKeys.some((key => equalByValue(change.key, key)))));\r\n            if (newChanges.length !== changes.length) {\r\n                this.option(\"editing.changes\", newChanges)\r\n            }\r\n            const editRowKey = this.option(\"editing.editRowKey\");\r\n            const isEditNewItem = newChanges.some((change => \"insert\" === change.type && equalByValue(editRowKey, change.key)));\r\n            if (!isEditNewItem && dataSourceKeys.every((key => !equalByValue(editRowKey, key)))) {\r\n                this.option(\"editing.editRowKey\", null)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n};\r\nconst rowsView = Base => class extends Base {\r\n    getCellIndex($cell, rowIndex) {\r\n        if (!$cell.is(\"td\") && rowIndex >= 0) {\r\n            const $cellElements = this.getCellElements(rowIndex);\r\n            let cellIndex = -1;\r\n            each($cellElements, ((index, cellElement) => {\r\n                if ($(cellElement).find($cell).length) {\r\n                    cellIndex = index\r\n                }\r\n            }));\r\n            return cellIndex\r\n        }\r\n        return super.getCellIndex.apply(this, arguments)\r\n    }\r\n    publicMethods() {\r\n        return super.publicMethods().concat([\"cellValue\"])\r\n    }\r\n    _getCellTemplate(options) {\r\n        const template = this._editingController.getColumnTemplate(options);\r\n        return template || super._getCellTemplate(options)\r\n    }\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (row) {\r\n            const isRowRemoved = !!row.removed;\r\n            const isRowInserted = !!row.isNewRow;\r\n            const isRowModified = !!row.modified;\r\n            isRowInserted && $row.addClass(ROW_INSERTED);\r\n            isRowModified && $row.addClass(ROW_MODIFIED);\r\n            if (isRowInserted || isRowRemoved) {\r\n                $row.removeClass(ROW_SELECTED)\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n    _getColumnIndexByElement($element) {\r\n        let $tableElement = $element.closest(\"table\");\r\n        const $tableElements = this.getTableElements();\r\n        while ($tableElement.length && !$tableElements.filter($tableElement).length) {\r\n            $element = $tableElement.closest(\"td\");\r\n            $tableElement = $element.closest(\"table\")\r\n        }\r\n        return this._getColumnIndexByElementCore($element)\r\n    }\r\n    _getColumnIndexByElementCore($element) {\r\n        const $targetElement = $element.closest(`.${ROW_CLASS}> td:not(.dx-master-detail-cell)`);\r\n        return this.getCellIndex($targetElement)\r\n    }\r\n    _editCellByClick(e, eventName) {\r\n        const editingController = this._editingController;\r\n        const $targetElement = $(e.event.target);\r\n        const columnIndex = this._getColumnIndexByElement($targetElement);\r\n        const row = this._dataController.items()[e.rowIndex];\r\n        const allowUpdating = editingController.allowUpdating({\r\n            row: row\r\n        }, eventName) || row && row.isNewRow;\r\n        const column = this._columnsController.getVisibleColumns()[columnIndex];\r\n        const isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\r\n        const allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\r\n        const startEditAction = this.option(\"editing.startEditAction\") || \"click\";\r\n        const isShowEditorAlways = column && column.showEditorAlways;\r\n        if (isEditedCell) {\r\n            return true\r\n        }\r\n        if (\"down\" === eventName) {\r\n            if (devices.real().ios || devices.real().android) {\r\n                domUtils.resetActiveElement()\r\n            }\r\n            return isShowEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)\r\n        }\r\n        if (\"click\" === eventName && \"dblClick\" === startEditAction && this._pointerDownTarget === $targetElement.get(0)) {\r\n            const isError = false;\r\n            const withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\r\n            editingController.closeEditCell(isError, withoutSaveEditData)\r\n        }\r\n        if (allowEditing && eventName === startEditAction) {\r\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)\r\n        }\r\n    }\r\n    _rowPointerDown(e) {\r\n        this._pointerDownTarget = e.event.target;\r\n        this._pointerDownTimeout = setTimeout((() => {\r\n            this._editCellByClick(e, \"down\")\r\n        }))\r\n    }\r\n    _rowClickTreeListHack(e) {\r\n        super._rowClick.apply(this, arguments)\r\n    }\r\n    _rowClick(e) {\r\n        const isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\r\n        e.event[TARGET_COMPONENT_NAME] = this.component;\r\n        if (!this._editCellByClick(e, \"click\") && !isEditForm) {\r\n            super._rowClick.apply(this, arguments)\r\n        }\r\n    }\r\n    _rowDblClickTreeListHack(e) {\r\n        super._rowDblClick.apply(this, arguments)\r\n    }\r\n    _rowDblClick(e) {\r\n        if (!this._editCellByClick(e, \"dblClick\")) {\r\n            super._rowDblClick.apply(this, arguments)\r\n        }\r\n    }\r\n    _cellPrepared($cell, parameters) {\r\n        var _parameters$column;\r\n        const editingController = this._editingController;\r\n        const isCommandCell = !!parameters.column.command;\r\n        const isEditableCell = parameters.setValue;\r\n        const isEditRow = editingController.isEditRow(parameters.rowIndex);\r\n        const isEditing = isEditingCell(isEditRow, parameters);\r\n        if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\r\n            const {\r\n                alignment: alignment\r\n            } = parameters.column;\r\n            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\r\n            if (alignment) {\r\n                $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment)\r\n            }\r\n        }\r\n        if (isEditing) {\r\n            this._editCellPrepared($cell)\r\n        }\r\n        const hasTemplate = !!(null !== (_parameters$column = parameters.column) && void 0 !== _parameters$column && _parameters$column.cellTemplate);\r\n        if (parameters.column && !isCommandCell && (!hasTemplate || editingController.shouldHighlightCell(parameters))) {\r\n            editingController.highlightDataCell($cell, parameters)\r\n        }\r\n        super._cellPrepared.apply(this, arguments)\r\n    }\r\n    _getCellOptions(options) {\r\n        const cellOptions = super._getCellOptions(options);\r\n        const {\r\n            columnIndex: columnIndex,\r\n            row: row\r\n        } = options;\r\n        cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\r\n        cellOptions.removed = row.removed;\r\n        if (row.modified) {\r\n            cellOptions.modified = void 0 !== row.modifiedValues[columnIndex]\r\n        }\r\n        return cellOptions\r\n    }\r\n    _setCellAriaAttributes($cell, cellOptions, options) {\r\n        super._setCellAriaAttributes($cell, cellOptions, options);\r\n        if (cellOptions.removed) {\r\n            this.setAria(\"roledescription\", messageLocalization.format(\"dxDataGrid-ariaDeletedCell\"), $cell)\r\n        }\r\n        if (cellOptions.modified) {\r\n            this.setAria(\"roledescription\", messageLocalization.format(\"dxDataGrid-ariaModifiedCell\"), $cell)\r\n        }\r\n        const isEditableCell = cellOptions.column.allowEditing && !cellOptions.removed && !cellOptions.modified && \"data\" === cellOptions.rowType && cellOptions.column.calculateCellValue === cellOptions.column.defaultCalculateCellValue && this._editingController.isCellBasedEditMode();\r\n        if (isEditableCell) {\r\n            this.setAria(\"roledescription\", messageLocalization.format(\"dxDataGrid-ariaEditableCell\"), $cell)\r\n        }\r\n    }\r\n    _createCell(options) {\r\n        const $cell = super._createCell(options);\r\n        const isEditRow = this._editingController.isEditRow(options.rowIndex);\r\n        isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\r\n        return $cell\r\n    }\r\n    cellValue(rowIndex, columnIdentifier, value, text) {\r\n        const cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\r\n        if (cellOptions) {\r\n            if (void 0 === value) {\r\n                return cellOptions.value\r\n            }\r\n            this._editingController.updateFieldValue(cellOptions, value, text, true)\r\n        }\r\n    }\r\n    dispose() {\r\n        super.dispose.apply(this, arguments);\r\n        clearTimeout(this._pointerDownTimeout)\r\n    }\r\n    _renderCore() {\r\n        super._renderCore.apply(this, arguments);\r\n        return this.waitAsyncTemplates(true).done((() => {\r\n            this._editingController._focusEditorIfNeed()\r\n        }))\r\n    }\r\n    _editCellPrepared() {}\r\n    _formItemPrepared() {}\r\n};\r\nconst headerPanel = Base => class extends Base {\r\n    optionChanged(args) {\r\n        const {\r\n            fullName: fullName\r\n        } = args;\r\n        switch (args.name) {\r\n            case \"editing\": {\r\n                const excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\r\n                const shouldInvalidate = fullName && !excludedOptions.some((optionName => optionName === fullName));\r\n                shouldInvalidate && this._invalidate();\r\n                super.optionChanged(args);\r\n                break\r\n            }\r\n            case \"useLegacyColumnButtonTemplate\":\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                super.optionChanged(args)\r\n        }\r\n    }\r\n    _getToolbarItems() {\r\n        const items = super._getToolbarItems();\r\n        const editButtonItems = this._editingController.prepareEditButtons(this);\r\n        return editButtonItems.concat(items)\r\n    }\r\n};\r\nexport const editingModule = {\r\n    defaultOptions: () => ({\r\n        editing: {\r\n            mode: \"row\",\r\n            refreshMode: \"full\",\r\n            newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\r\n            allowAdding: false,\r\n            allowUpdating: false,\r\n            allowDeleting: false,\r\n            useIcons: false,\r\n            selectTextOnEditStart: false,\r\n            confirmDelete: true,\r\n            texts: {\r\n                editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\r\n                saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\r\n                saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\r\n                cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\r\n                cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\r\n                addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\r\n                deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\r\n                undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\r\n                confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\r\n                confirmDeleteTitle: \"\"\r\n            },\r\n            form: {\r\n                colCount: 2\r\n            },\r\n            popup: {},\r\n            startEditAction: \"click\",\r\n            editRowKey: null,\r\n            editColumnName: null,\r\n            changes: []\r\n        },\r\n        useLegacyColumnButtonTemplate: false\r\n    }),\r\n    controllers: {\r\n        editing: EditingControllerImpl\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: dataControllerEditingExtenderMixin\r\n        },\r\n        views: {\r\n            rowsView: rowsView,\r\n            headerPanel: headerPanel\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SACIC,IAAI,IAAIC,cAAc,QACnB,sCAAsC;AAC7C,OAAOC,YAAY,MAAM,mDAAmD;AAC5E,OAAOC,aAAa,MAAM,wCAAwC;AAClE,SACIC,WAAW,QACR,uCAAuC;AAC9C,SACIC,YAAY,QACT,4CAA4C;AACnD,OAAOC,mBAAmB,MAAM,8CAA8C;AAC9E,SACIC,uBAAuB,QACpB,qCAAqC;AAC5C,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,CAAC,MAAM,2BAA2B;AACzC,SACIC,YAAY,EACZC,UAAU,QACP,+BAA+B;AACtC,SACIC,QAAQ,EACRC,WAAW,EACXC,IAAI,QACD,iCAAiC;AACxC,SACIC,MAAM,QACH,+BAA+B;AACtC,OAAO,KAAKC,SAAS,MAAM,6BAA6B;AACxD,SACIC,IAAI,QACD,iCAAiC;AACxC,SACIC,mBAAmB,QAChB,+BAA+B;AACtC,SACIC,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,QAAQ,QACL,6BAA6B;AACpC,SACIC,OAAO,QACJ,uBAAuB;AAC9B,SACIC,OAAO,EACPC,QAAQ,QACL,uBAAuB;AAC9B,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,aAAa,MAAM,YAAY;AACtC,SACIC,mBAAmB,EACnBC,YAAY,EACZC,gBAAgB,EAChBC,yBAAyB,EACzBC,aAAa,EACbC,kBAAkB,EAClBC,6BAA6B,EAC7BC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,yBAAyB,EACzBC,iBAAiB,EACjBC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,aAAa,EACbC,UAAU,EACVC,2BAA2B,EAC3BC,kCAAkC,EAClCC,8BAA8B,EAC9BC,iBAAiB,EACjBC,yBAAyB,EACzBC,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,0BAA0B,EAC1BC,YAAY,EACZC,qBAAqB,EACrBC,UAAU,EACVC,eAAe,EACfC,YAAY,EACZC,4BAA4B,EAC5BC,yBAAyB,EACzBC,cAAc,EACdC,gCAAgC,EAChCC,eAAe,EACfC,SAAS,EACTC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,qBAAqB,EACrBC,gCAAgC,EAChCC,6BAA6B,QAC1B,SAAS;AAChB,SACIC,oBAAoB,EACpBC,qBAAqB,EACrBC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,aAAa,EACbC,mCAAmC,QAChC,mBAAmB;AAC1B,MAAMC,qBAAqB,SAASrD,OAAO,CAACsD,cAAc,CAAC;EACvDC,IAAIA,CAAA,EAAG;IACH,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACC,aAAa,CAAC,SAAS,CAAC;IACvD,IAAI,CAACC,eAAe,GAAG,IAAI,CAACD,aAAa,CAAC,MAAM,CAAC;IACjD,IAAI,CAACE,0BAA0B,GAAG,IAAI,CAACF,aAAa,CAAC,iBAAiB,CAAC;IACvE,IAAI,CAACG,qBAAqB,GAAG,IAAI,CAACH,aAAa,CAAC,YAAY,CAAC;IAC7D,IAAI,CAACI,wBAAwB,GAAG,IAAI,CAACJ,aAAa,CAAC,eAAe,CAAC;IACnE,IAAI,CAACK,gBAAgB,GAAG,IAAI,CAACL,aAAa,CAAC,OAAO,CAAC;IACnD,IAAI,CAACM,6BAA6B,GAAG,IAAI,CAACN,aAAa,CAAC,oBAAoB,CAAC;IAC7E,IAAI,CAACO,yBAAyB,GAAG,IAAI,CAACP,aAAa,CAAC,gBAAgB,CAAC;IACrE,IAAI,CAACQ,wBAAwB,GAAG,IAAI,CAACR,aAAa,CAAC,eAAe,CAAC;IACnE,IAAI,CAACS,SAAS,GAAG,IAAI,CAACC,OAAO,CAAC,UAAU,CAAC;IACzC,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACD,OAAO,CAAC,aAAa,CAAC;IACnD,IAAI,CAACE,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,IAAI,CAACC,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAACC,OAAO,CAAEC,CAAC,IAAI;QAC1BA,CAAC,CAACC,MAAM,CAAC,QAAQ,CAAC;MACtB,CAAE,CAAC;IACP;IACA,IAAI,CAACH,UAAU,GAAG,EAAE;IACpB,IAAI,CAAC,IAAI,CAACI,mBAAmB,EAAE;MAC3B,IAAI,CAACA,mBAAmB,GAAG,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC;MAC7D,IAAI,CAACnB,eAAe,CAACoB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,mBAAmB,CAAC;IAC9D;IACA,IAAI,CAAC,IAAI,CAACK,kBAAkB,EAAE;MAC1B,IAAI,CAACC,YAAY,CAAC,cAAc,EAAE;QAC9BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,gBAAgB,EAAE;QAChCC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,eAAe,EAAE;QAC/BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,gBAAgB,EAAE;QAChCC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,eAAe,EAAE;QAC/BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,cAAc,EAAE;QAC9BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,eAAe,EAAE;QAC/BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,cAAc,EAAE;QAC9BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,SAAS,EAAE;QACzBC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,UAAU,EAAE;QAC1BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,iBAAiB,EAAE;QACjCC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;MACF,IAAI,CAACD,YAAY,CAAC,gBAAgB,EAAE;QAChCC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU;MAC9C,CAAC,CAAC;IACN;IACA,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACC,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;MACtB,IAAI,CAACA,cAAc,GAAG,IAAIC,GAAG,CAAD,CAAC;IACjC;IACA,IAAI,CAACC,SAAS,CAACC,mBAAmB,CAAClE,8BAA8B,CAAC,GAAG,IAAI;IACzE,IAAI,CAACiE,SAAS,CAACC,mBAAmB,CAACpE,2BAA2B,CAAC,GAAG,IAAI;EAC1E;EACAqE,WAAWA,CAAA,EAAG;IACV,MAAMC,QAAQ,GAAG,IAAI,CAACC,MAAM,CAAC,cAAc,CAAC,IAAIzE,aAAa;IAC7D,IAAIC,UAAU,CAACyE,QAAQ,CAACF,QAAQ,CAAC,EAAE;MAC/B,OAAOA,QAAQ;IACnB;IACA,OAAOxE,aAAa;EACxB;EACA2E,mBAAmBA,CAAA,EAAG;IAClB,MAAMH,QAAQ,GAAG,IAAI,CAACD,WAAW,CAAC,CAAC;IACnC,OAAOrF,gBAAgB,CAACwF,QAAQ,CAACF,QAAQ,CAAC;EAC9C;EACAI,yBAAyBA,CAAA,EAAG;IACxB,OAAO,CAACC,SAAS,EAAEC,OAAO,KAAK;MAC3B,MAAMC,OAAO,GAAGnH,CAAC,CAAC,OAAO,CAAC,CAACoH,QAAQ,CAACH,SAAS,CAAC;MAC9C,MAAMI,aAAa,GAAG/G,MAAM,CAAC,CAAC,CAAC,EAAE4G,OAAO,CAACI,MAAM,EAAE;QAC7CC,KAAK,EAAEL,OAAO,CAACK,KAAK;QACpBC,QAAQ,EAAEN,OAAO,CAACM,QAAQ;QAC1BC,GAAG,EAAEP,OAAO,CAACO,GAAG;QAChBC,UAAU,EAAE,SAAS;QACrBC,KAAK,EAAE,IAAI;QACXC,QAAQ,EAAE,CAACV,OAAO,CAACM,QAAQ;QAC3BK,QAAQ,EAAEX,OAAO,CAACW,QAAQ;QAC1BC,EAAE,EAAEZ,OAAO,CAACY;MAChB,CAAC,CAAC;MACF,MAAMC,SAAS,GAAGxE,gCAAgC,CAACuD,QAAQ,CAAC,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC;MAC/E,IAAIoB,SAAS,EAAE;QACXV,aAAa,CAAC,iBAAiB,CAAC,GAAGH,OAAO,CAACI,MAAM,CAACU,QAAQ;MAC9D;MACA,IAAI,CAACjD,wBAAwB,CAACkD,YAAY,CAACd,OAAO,EAAEE,aAAa,CAAC;IACtE,CAAC;EACL;EACAa,kBAAkBA,CAAA,EAAG;IACjB,MAAMC,cAAc,GAAG,IAAI,CAACtB,MAAM,CAAC,wBAAwB,CAAC;IAC5D,MAAMuB,aAAa,GAAG,IAAI,CAACvB,MAAM,CAAC,gBAAgB,CAAC;IACnD,IAAI,SAAS,KAAKuB,aAAa,EAAE;MAC7B,QAAQD,cAAc;QAClB,KAAK9E,yBAAyB;UAC1B,OAAOU,6BAA6B;QACxC,KAAKX,4BAA4B;UAC7B,OAAOU,gCAAgC;QAC3C;UACI,OAAOqE,cAAc;MAC7B;IACJ;IACA,OAAOA,cAAc;EACzB;EACAE,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACxB,MAAM,CAACvE,2BAA2B,CAAC;EACnD;EACAgG,iBAAiBA,CAAA,EAAG;IAChB,MAAMC,OAAO,GAAG,IAAI,CAAC1B,MAAM,CAACvE,2BAA2B,CAAC;IACxD,OAAOiG,OAAO,CAACC,MAAM,CAAEC,MAAM,IAAI,QAAQ,KAAKA,MAAM,CAACC,IAAK,CAAC,CAACC,MAAM;EACtE;EACAC,YAAYA,CAAA,EAAG;IACX,MAAML,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IACjC,MAAMQ,SAAS,GAAG,IAAI,KAAKN,OAAO,IAAI,KAAK,CAAC,KAAKA,OAAO,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACI,MAAM;IAClF,IAAIE,SAAS,EAAE;MACX,IAAI,CAACC,aAAa,CAACxG,2BAA2B,EAAE,EAAE,CAAC;MACnD,IAAI,CAACiE,cAAc,CAACwC,KAAK,CAAC,CAAC;IAC/B;EACJ;EACAC,gBAAgBA,CAACC,GAAG,EAAE;IAClB,OAAO,IAAI,CAAC1C,cAAc,CAAC2C,GAAG,CAAChJ,UAAU,CAAC+I,GAAG,CAAC,CAAC;EACnD;EACAE,gBAAgBA,CAACC,MAAM,EAAE;IACrB,MAAMC,YAAY,GAAG,IAAI,CAACL,gBAAgB,CAACI,MAAM,CAACH,GAAG,CAAC;IACtD,IAAII,YAAY,EAAE;MACd,OAAO/I,MAAM,CAAC+I,YAAY,EAAED,MAAM,CAAC;IACvC;IACA,IAAI,CAAC7C,cAAc,CAAC+C,GAAG,CAACpJ,UAAU,CAACkJ,MAAM,CAACH,GAAG,CAAC,EAAEG,MAAM,CAAC;IACvD,OAAOA,MAAM;EACjB;EACAG,WAAWA,CAACN,GAAG,EAAE;IACb,IAAIO,qBAAqB;IACzB,OAAO,IAAI,MAAMA,qBAAqB,GAAG,IAAI,CAACR,gBAAgB,CAACC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKO,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACC,OAAO;EACrJ;EACAC,cAAcA,CAACC,IAAI,EAAE;IACjB,MAAMV,GAAG,GAAG,IAAI,CAACrE,eAAe,CAACgF,KAAK,CAACD,IAAI,CAAC;IAC5C,MAAMpB,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IACjC,MAAMwB,SAAS,GAAG1I,aAAa,CAAC2I,aAAa,CAACb,GAAG,EAAEV,OAAO,CAAC;IAC3D,IAAIA,OAAO,CAACsB,SAAS,CAAC,EAAE;MACpB,OAAOjK,uBAAuB,CAAC+J,IAAI,EAAEpB,OAAO,CAACsB,SAAS,CAAC,CAACF,IAAI,CAAC;IACjE;IACA,OAAOA,IAAI;EACf;EACAI,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC1B,UAAU,CAAC,CAAC,CAACG,MAAM,CAAEC,MAAM,IAAIA,MAAM,CAACkB,IAAI,IAAIlB,MAAM,CAACC,IAAI,KAAK/G,0BAA2B,CAAC,CAACqI,GAAG,CAAEvB,MAAM,IAAIA,MAAM,CAACkB,IAAK,CAAC;EACvI;EACAM,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC5B,UAAU,CAAC,CAAC,CAACG,MAAM,CAAEC,MAAM,IAAI,IAAI,CAACc,WAAW,CAACd,MAAM,CAACQ,GAAG,CAAC,IAAIR,MAAM,CAACC,IAAI,KAAK9G,0BAA2B,CAAC,CAACoI,GAAG,CAAEvB,MAAM,IAAI,IAAI,CAACc,WAAW,CAACd,MAAM,CAACQ,GAAG,CAAE,CAAC;EACzK;EACAiB,sBAAsBA,CAACC,GAAG,EAAE;IACxB,IAAI,QAAQ,KAAKA,GAAG,EAAE;MAClB;IACJ;IACA,MAAMC,aAAa,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;IAC5C,IAAI,CAACzF,eAAe,CAAC0F,iBAAiB,CAACC,IAAI,CAACJ,GAAG,EAAEC,aAAa,CAAC;EACnE;EACAI,wBAAwBA,CAACC,cAAc,EAAE,CAAC;EAC1CC,cAAcA,CAACD,cAAc,EAAE,CAAC;EAChC3E,kBAAkBA,CAAC6E,IAAI,EAAE,CAAC;EAC1BC,uBAAuBA,CAACC,MAAM,EAAE3D,OAAO,EAAE;IACrC,IAAI4D,MAAM,GAAG,IAAI;IACjB,QAAQD,MAAM,CAACxL,IAAI;MACf,KAAK,QAAQ;QACTyL,MAAM,GAAG,IAAI,CAACC,aAAa,CAAC7D,OAAO,CAAC;QACpC;MACJ,KAAK,UAAU;QACX4D,MAAM,GAAG,KAAK;IACtB;IACA,OAAOA,MAAM;EACjB;EACAE,eAAeA,CAAA,EAAG;IACd,MAAMpE,QAAQ,GAAG,IAAI,CAACC,MAAM,CAAC,cAAc,CAAC;IAC5C,OAAOD,QAAQ,KAAKzE,eAAe;EACvC;EACA8I,gBAAgBA,CAACJ,MAAM,EAAE3D,OAAO,EAAE;IAC9B,MAAM;MACFgE,OAAO,EAAEA;IACb,CAAC,GAAGL,MAAM;IACV,IAAI,CAACnK,SAAS,CAACwK,OAAO,CAAC,EAAE;MACrB,OAAO,IAAI,CAACN,uBAAuB,CAACC,MAAM,EAAE3D,OAAO,CAAC;IACxD;IACA,OAAOtG,UAAU,CAACsK,OAAO,CAAC,GAAGA,OAAO,CAACC,IAAI,CAACN,MAAM,EAAE;MAC9CpE,SAAS,EAAES,OAAO,CAACT,SAAS;MAC5BgB,GAAG,EAAEP,OAAO,CAACO,GAAG;MAChBH,MAAM,EAAEJ,OAAO,CAACI;IACpB,CAAC,CAAC,GAAG4D,OAAO;EAChB;EACAE,iBAAiBA,CAACP,MAAM,EAAE3D,OAAO,EAAE;IAC/B,MAAM;MACFmE,QAAQ,EAAEA;IACd,CAAC,GAAGR,MAAM;IACV,OAAOjK,UAAU,CAACyK,QAAQ,CAAC,GAAGA,QAAQ,CAACF,IAAI,CAACN,MAAM,EAAE;MAChDpE,SAAS,EAAES,OAAO,CAACT,SAAS;MAC5BgB,GAAG,EAAEP,OAAO,CAACO,GAAG;MAChBH,MAAM,EAAEJ,OAAO,CAACI;IACpB,CAAC,CAAC,GAAG,CAAC,CAAC+D,QAAQ;EACnB;EACAC,gBAAgBA,CAACT,MAAM,EAAE3D,OAAO,EAAE;IAC9B,MAAMqE,MAAM,GAAG1K,QAAQ,CAACgK,MAAM,CAAC,GAAGA,MAAM,GAAG,CAAC,CAAC;IAC7C,MAAMW,UAAU,GAAGrH,aAAa,CAAC0G,MAAM,CAAC;IACxC,MAAMY,YAAY,GAAGrH,eAAe,CAAC8C,OAAO,CAAC;IAC7C,MAAMwE,UAAU,GAAGvI,YAAY,CAACqI,UAAU,CAAC;IAC3C,MAAMG,cAAc,GAAG,IAAI,CAAC9E,MAAM,CAAC,SAAS,CAAC;IAC7C,MAAM+E,UAAU,GAAGxK,mBAAmB,CAACoK,UAAU,CAAC;IAClD,MAAMK,WAAW,GAAGD,UAAU,GAAGD,cAAc,CAACC,UAAU,CAAC,GAAG,IAAI;IAClE,OAAOtL,MAAM,CAAC;MACVjB,IAAI,EAAEmM,UAAU;MAChBM,IAAI,EAAEL,YAAY,CAACD,UAAU,CAAC;MAC9BO,QAAQ,EAAE7J,eAAe,CAACsJ,UAAU;IACxC,CAAC,EAAE;MACCQ,OAAO,EAAEN,UAAU,KAAKO,CAAC,IAAI;QACzB,MAAM;UACFC,KAAK,EAAEA;QACX,CAAC,GAAGD,CAAC;QACLC,KAAK,CAACC,eAAe,CAAC,CAAC;QACvBD,KAAK,CAACE,cAAc,CAAC,CAAC;QACtBC,UAAU,CAAE,MAAM;UACdnF,OAAO,CAACO,GAAG,IAAIoE,WAAW,IAAI,IAAI,CAACH,UAAU,CAAC,IAAI,IAAI,CAACA,UAAU,CAAC,CAACxE,OAAO,CAACO,GAAG,CAAC6E,QAAQ,CAAC;QAC5F,CAAE,CAAC;MACP,CAAC;IACL,CAAC,EAAEf,MAAM,CAAC;EACd;EACAgB,kBAAkBA,CAACrF,OAAO,EAAE;IACxB,IAAIsF,WAAW;IACf,MAAMC,iBAAiB,GAAG,CAAC,CAACvF,OAAO,CAACI,MAAM,CAACoF,OAAO;IAClD,IAAIA,OAAO,GAAG,CAACxF,OAAO,CAACI,MAAM,CAACoF,OAAO,IAAI,EAAE,EAAEC,KAAK,CAAC,CAAC;IACpD,IAAIF,iBAAiB,EAAE;MACnBD,WAAW,GAAGtI,cAAc,CAACwI,OAAO,EAAE,MAAM,CAAC;MAC7C,IAAIF,WAAW,IAAI,CAAC,EAAE;QAClB,IAAItI,cAAc,CAACwI,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE;UACrCA,OAAO,CAACE,MAAM,CAACJ,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC;QAC9C;QACA,IAAItI,cAAc,CAACwI,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE;UACvCA,OAAO,CAACE,MAAM,CAAC1I,cAAc,CAACwI,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;QACpE;MACJ;MACAF,WAAW,GAAGtI,cAAc,CAACwI,OAAO,EAAE,QAAQ,CAAC;MAC/C,IAAIF,WAAW,IAAI,CAAC,IAAItI,cAAc,CAACwI,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE;QAC7DA,OAAO,CAACE,MAAM,CAACJ,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC;MAClD;IACJ,CAAC,MAAM;MACHE,OAAO,GAAGrL,YAAY,CAACsL,KAAK,CAAC,CAAC;IAClC;IACA,OAAOD,OAAO,CAAC1C,GAAG,CAAEa,MAAM,IAAI,IAAI,CAACS,gBAAgB,CAACT,MAAM,EAAE3D,OAAO,CAAE,CAAC;EAC1E;EACA2F,qBAAqBA,CAACC,UAAU,EAAEJ,OAAO,EAAExF,OAAO,EAAEuB,MAAM,EAAE;IACxDiE,OAAO,CAAChH,OAAO,CAAEmF,MAAM,IAAI;MACvB,IAAI,IAAI,CAACI,gBAAgB,CAACJ,MAAM,EAAE3D,OAAO,CAAC,EAAE;QACxC,IAAI,CAAC6F,aAAa,CAACD,UAAU,EAAEjC,MAAM,EAAE3D,OAAO,EAAEuB,MAAM,CAAC;MAC3D;IACJ,CAAE,CAAC;EACP;EACAuE,2BAA2BA,CAAA,EAAG;IAC1B,OAAO,CAAC/F,SAAS,EAAEC,OAAO,EAAEuB,MAAM,KAAK;MACnC,MAAMqE,UAAU,GAAG9M,CAAC,CAACiH,SAAS,CAAC;MAC/B,IAAI,MAAM,KAAKC,OAAO,CAAC+F,OAAO,EAAE;QAC5B,MAAMP,OAAO,GAAG,IAAI,CAACH,kBAAkB,CAACrF,OAAO,CAAC;QAChD,IAAI,CAAC2F,qBAAqB,CAACC,UAAU,EAAEJ,OAAO,EAAExF,OAAO,EAAEuB,MAAM,CAAC;QAChE,IAAIvB,OAAO,CAACgG,KAAK,EAAE;UACf,MAAMC,OAAO,GAAGjG,OAAO,CAACgG,KAAK,CAAE,MAAMR,OAAO,CAAC1C,GAAG,CAAEa,MAAM,KAAK;YACzDK,OAAO,EAAE,IAAI,CAACD,gBAAgB,CAACJ,MAAM,EAAE3D,OAAO,CAAC;YAC/CmE,QAAQ,EAAE,IAAI,CAACD,iBAAiB,CAACP,MAAM,EAAE3D,OAAO;UACpD,CAAC,CAAE,CAAC,EAAI,MAAM;YACV4F,UAAU,CAACM,KAAK,CAAC,CAAC;YAClB,IAAI,CAACP,qBAAqB,CAACC,UAAU,EAAEJ,OAAO,EAAExF,OAAO,CAAC;UAC5D,CAAE,CAAC;UACH3H,YAAY,CAAC8N,EAAE,CAACP,UAAU,EAAErN,WAAW,EAAE0N,OAAO,CAAC;QACrD;MACJ,CAAC,MAAM;QACHhM,aAAa,CAACmM,YAAY,CAACR,UAAU,CAAC;MAC1C;IACJ,CAAC;EACL;EACAS,kBAAkBA,CAAA,EAAG;IACjB,MAAM3G,QAAQ,GAAG,IAAI,CAACD,WAAW,CAAC,CAAC;IACnC,OAAOnD,eAAe,CAACsD,QAAQ,CAACF,QAAQ,CAAC;EAC7C;EACA4G,2BAA2BA,CAAA,EAAG;IAC1B,IAAIC,WAAW;IACf,MAAMC,cAAc,GAAG,IAAI,CAAChJ,kBAAkB,CAACiJ,iBAAiB,CAAC,CAAC;IAClEnN,IAAI,CAACkN,cAAc,EAAG,CAACE,KAAK,EAAEtG,MAAM,KAAK;MACrC,IAAIA,MAAM,CAACuG,YAAY,EAAE;QACrBJ,WAAW,GAAGG,KAAK;QACnB,OAAO,KAAK;MAChB;IACJ,CAAE,CAAC;IACH,OAAOH,WAAW;EACtB;EACAK,yBAAyBA,CAACxB,QAAQ,EAAE;IAChC,IAAIyB,eAAe;IACnB,MAAMN,WAAW,GAAG,IAAI,CAACD,2BAA2B,CAAC,CAAC;IACtD,OAAO,IAAI,MAAMO,eAAe,GAAG,IAAI,CAAC3I,SAAS,CAAC,IAAI,KAAK,CAAC,KAAK2I,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACC,eAAe,CAAC1B,QAAQ,IAAI,CAAC,EAAEmB,WAAW,CAAC;EAC3J;EACAQ,mBAAmBA,CAAC3B,QAAQ,EAAE;IAC1B,OAAO,IAAI,CAACwB,yBAAyB,CAACxB,QAAQ,CAAC;EACnD;EACAxC,aAAaA,CAACb,GAAG,EAAEiF,KAAK,EAAE;IACtB,OAAO/M,aAAa,CAAC2I,aAAa,CAACb,GAAG,EAAEiF,KAAK,CAAC;EAClD;EACAC,UAAUA,CAAC7B,QAAQ,EAAE;IACjB,MAAM/D,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IACjC,IAAIyC,MAAM,GAAG,KAAK;IAClB,KAAK,IAAIsD,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,KAAK7F,OAAO,IAAI,KAAK,CAAC,KAAKA,OAAO,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACI,MAAM,CAAC,EAAEyF,CAAC,EAAE,EAAE;MACzF,IAAI7F,OAAO,CAAC6F,CAAC,CAAC,CAAC1F,IAAI,KAAK,CAAChI,SAAS,CAAC4L,QAAQ,CAAC,IAAI,IAAI,CAAC1H,eAAe,CAACyJ,gBAAgB,CAAC9F,OAAO,CAAC6F,CAAC,CAAC,CAACnF,GAAG,CAAC,KAAKqD,QAAQ,CAAC,EAAE;QACjHxB,MAAM,GAAG,IAAI;QACb;MACJ;IACJ;IACA,OAAOA,MAAM;EACjB;EACAqC,OAAOA,CAAA,EAAG;IACN,KAAK,CAACA,OAAO,CAAC,CAAC;IACfmB,YAAY,CAAC,IAAI,CAACC,oBAAoB,CAAC;IACvChP,YAAY,CAACiP,GAAG,CAAC1O,UAAU,CAAC2O,WAAW,CAAC,CAAC,EAAEjP,aAAa,CAACkP,EAAE,EAAE,IAAI,CAACC,uBAAuB,CAAC;IAC1FpP,YAAY,CAACiP,GAAG,CAAC1O,UAAU,CAAC2O,WAAW,CAAC,CAAC,EAAEjP,aAAa,CAACoP,IAAI,EAAE,IAAI,CAACC,yBAAyB,CAAC;IAC9FtP,YAAY,CAACiP,GAAG,CAAC1O,UAAU,CAAC2O,WAAW,CAAC,CAAC,EAAEnP,cAAc,EAAE,IAAI,CAAC4G,kBAAkB,CAAC;EACvF;EACA4C,aAAaA,CAACzJ,IAAI,EAAEkI,KAAK,EAAE;IACvB,IAAI,iBAAiB,KAAKlI,IAAI,EAAE;MAC5B,IAAI,CAACmG,QAAQ,GAAG/E,mBAAmB,CAAC,EAAE,EAAE8G,KAAK,CAAC;IAClD;IACA,KAAK,CAACuB,aAAa,CAACzJ,IAAI,EAAEkI,KAAK,CAAC;EACpC;EACAuH,aAAaA,CAACnE,IAAI,EAAE;IAChB,IAAI,SAAS,KAAKA,IAAI,CAACtL,IAAI,EAAE;MACzB,MAAM;QACF0P,QAAQ,EAAEA;MACd,CAAC,GAAGpE,IAAI;MACR,IAAIoE,QAAQ,KAAKvM,8BAA8B,EAAE;QAC7C,IAAI,CAACwM,uBAAuB,CAACrE,IAAI,CAAC;MACtC,CAAC,MAAM,IAAIoE,QAAQ,KAAKzM,2BAA2B,EAAE;QACjD,MAAM2M,OAAO,GAAGhP,YAAY,CAAC0K,IAAI,CAACpD,KAAK,EAAE,IAAI,CAAC/B,QAAQ,EAAE;UACpD0J,QAAQ,EAAE;QACd,CAAC,CAAC;QACF,IAAI,CAACD,OAAO,EAAE;UACV,IAAI,CAACzJ,QAAQ,GAAG/E,mBAAmB,CAAC,EAAE,EAAEkK,IAAI,CAACpD,KAAK,CAAC;UACnD,IAAI,CAAC4H,oBAAoB,CAACxE,IAAI,CAAC;QACnC;MACJ,CAAC,MAAM,IAAI,CAACA,IAAI,CAACyE,OAAO,EAAE;QACtB,IAAI,CAAC1K,kBAAkB,CAAC2K,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC5K,IAAI,CAAC,CAAC;QACX,IAAI,CAACmE,YAAY,CAAC,CAAC;QACnB,IAAI,CAAC0G,oBAAoB,CAAC,CAAC;QAC3B,IAAI,CAACC,gBAAgB,CAAC,CAAC;MAC3B;MACA5E,IAAI,CAACyE,OAAO,GAAG,IAAI;IACvB,CAAC,MAAM;MACH,KAAK,CAACN,aAAa,CAACnE,IAAI,CAAC;IAC7B;EACJ;EACAqE,uBAAuBA,CAACrE,IAAI,EAAE;IAC1B,MAAM2B,QAAQ,GAAG,IAAI,CAAC1H,eAAe,CAACyJ,gBAAgB,CAAC1D,IAAI,CAACpD,KAAK,CAAC;IAClE,MAAMiI,qBAAqB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC;IAC/D,MAAMC,WAAW,GAAG,IAAI,CAAC9K,eAAe,CAACyJ,gBAAgB,CAAC1D,IAAI,CAACgF,aAAa,CAAC,GAAGH,qBAAqB;IACrG,IAAI9O,SAAS,CAACiK,IAAI,CAACpD,KAAK,CAAC,EAAE;MACvB,IAAIoD,IAAI,CAACpD,KAAK,KAAKoD,IAAI,CAACgF,aAAa,EAAE;QACnC,IAAI,CAACC,yBAAyB,CAACtD,QAAQ,EAAEoD,WAAW,CAAC;MACzD;IACJ,CAAC,MAAM;MACH,IAAI,CAACG,cAAc,CAAC,CAAC;IACzB;EACJ;EACAV,oBAAoBA,CAACxE,IAAI,EAAE;IACvB,MAAMmF,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAM2D,OAAO,GAAGoC,IAAI,CAACpD,KAAK;IAC1B,IAAI,CAACoD,IAAI,CAACpD,KAAK,CAACoB,MAAM,IAAI,CAACgC,IAAI,CAACgF,aAAa,CAAChH,MAAM,EAAE;MAClD;IACJ;IACAJ,OAAO,CAAC7C,OAAO,CAAE+C,MAAM,IAAI;MACvB,IAAI,QAAQ,KAAKA,MAAM,CAACC,IAAI,EAAE;QAC1B,IAAI,CAACqH,cAAc,CAACtH,MAAM,CAAC;MAC/B,CAAC,MAAM;QACH,IAAIuH,qBAAqB;QACzB,MAAM9B,KAAK,GAAG4B,cAAc,CAACG,kBAAkB,CAAC,CAAC,KAAK,IAAI,MAAMD,qBAAqB,GAAGF,cAAc,CAAC5B,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK8B,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAAChG,GAAG,CAAEkG,IAAI,IAAIA,IAAI,CAACvG,IAAK,CAAC,CAAC;QAC9M,MAAM2C,QAAQ,GAAGnL,aAAa,CAAC2I,aAAa,CAACrB,MAAM,CAACQ,GAAG,EAAEiF,KAAK,EAAE4B,cAAc,CAAC7G,GAAG,CAAC,CAAC,CAAC;QACrF,IAAI,CAACE,gBAAgB,CAAC;UAClBF,GAAG,EAAER,MAAM,CAACQ,GAAG;UACfQ,OAAO,EAAEyE,KAAK,CAAC5B,QAAQ;QAC3B,CAAC,CAAC;MACN;IACJ,CAAE,CAAC;IACHwD,cAAc,CAACK,WAAW,CAAC;MACvBC,kBAAkB,EAAE,IAAI;MACxBC,YAAY,EAAE,KAAK;MACnBC,eAAe,EAAE;IACrB,CAAC,CAAC;EACN;EACAC,aAAaA,CAAA,EAAG;IACZ,OAAO,CAAC,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAE,SAAS,EAAE,cAAc,EAAE,gBAAgB,EAAE,aAAa,CAAC;EAC7G;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC9P,SAAS,CAAC,IAAI,CAAC+P,UAAU,CAAC,EAAE;MAC7B;IACJ;IACA,IAAI,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC5C;EACAF,YAAYA,CAACtH,MAAM,EAAE,CAAC;EACtByH,SAASA,CAAA,EAAG;IACR,MAAMC,mBAAmB,GAAGpQ,SAAS,CAAC,IAAI,CAACmG,MAAM,CAACrE,8BAA8B,CAAC,CAAC;IAClF,OAAOsO,mBAAmB;EAC9B;EACAC,SAASA,CAACzE,QAAQ,EAAE;IAChB,OAAO,KAAK;EAChB;EACA0E,cAAcA,CAACzJ,KAAK,EAAE0J,MAAM,EAAE;IAC1B,IAAIA,MAAM,EAAE;MACR,IAAI,CAACnI,aAAa,CAACtG,8BAA8B,EAAE+E,KAAK,CAAC;IAC7D,CAAC,MAAM;MACH,IAAI,CAACV,MAAM,CAACrE,8BAA8B,EAAE+E,KAAK,CAAC;IACtD;IACA,IAAI,IAAI,CAAC2J,gBAAgB,EAAE;MACvB,IAAI,CAACA,gBAAgB,GAAG,KAAK;MAC7B,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC5B;EACJ;EACAC,qBAAqBA,CAAC9E,QAAQ,EAAE2E,MAAM,EAAE;IACpC,MAAMhI,GAAG,GAAG,IAAI,CAACrE,eAAe,CAACyM,gBAAgB,CAAC/E,QAAQ,CAAC;IAC3D,IAAI,KAAK,CAAC,KAAKrD,GAAG,EAAE;MAChB,IAAI,CAACrE,eAAe,CAAC0M,SAAS,CAAC,OAAO,CAAC;MACvC;IACJ;IACA,IAAI,CAACN,cAAc,CAAC/H,GAAG,EAAEgI,MAAM,CAAC;EACpC;EACAM,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACC,uBAAuB,CAAC,CAAC;EACzC;EACAC,mBAAmBA,CAAA,EAAG;IAClB,OAAO,CAAC,CAAC;EACb;EACAC,gBAAgBA,CAACpF,QAAQ,EAAE;IACvB,MAAMrD,GAAG,GAAG,IAAI,CAACrE,eAAe,CAACyM,gBAAgB,CAAC/E,QAAQ,CAAC;IAC3D,MAAMqF,UAAU,GAAGjR,SAAS,CAACuI,GAAG,CAAC,IAAIhJ,YAAY,CAAC,IAAI,CAAC4G,MAAM,CAACrE,8BAA8B,CAAC,EAAEyG,GAAG,CAAC;IACnG,IAAI0I,UAAU,EAAE;MACZ,OAAO,IAAI,CAACH,uBAAuB,CAAC,CAAC,KAAKlF,QAAQ;IACtD;IACA,OAAOqF,UAAU;EACrB;EACAC,UAAUA,CAACC,eAAe,EAAEpE,WAAW,EAAE;IACrC,OAAO,IAAI,CAACiE,gBAAgB,CAACG,eAAe,CAAC,IAAI,IAAI,CAACC,0BAA0B,CAAC,CAAC,KAAKrE,WAAW;EACtG;EACApD,eAAeA,CAAA,EAAG,CAAC;EACnB0H,gBAAgBA,CAAC7B,IAAI,EAAE;IACnB,OAAO,KAAK;EAChB;EACA8B,kBAAkBA,CAAC9D,KAAK,EAAEzF,MAAM,EAAEwJ,gBAAgB,EAAE;IAChD,IAAInH,MAAM,GAAG,CAAC,CAAC;IACf,MAAMgF,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMqE,GAAG,GAAG,IAAI,CAACiJ,0BAA0B,CAACzJ,MAAM,CAAC;IACnD,IAAI,CAAC/H,SAAS,CAACuI,GAAG,CAAC,IAAI,CAAC,KAAKiF,KAAK,CAACvF,MAAM,EAAE;MACvCmC,MAAM,GAAG,CAAC;IACd,CAAC,MAAM,IAAIpK,SAAS,CAACuI,GAAG,CAAC,EAAE;MACvBiF,KAAK,CAACiE,IAAI,CAAE,CAACjC,IAAI,EAAEtC,KAAK,KAAK;QACzB,MAAMwE,eAAe,GAAGH,gBAAgB,IAAI,IAAI,CAACF,gBAAgB,CAAC7B,IAAI,CAAC;QACvE,IAAIrP,QAAQ,CAACqP,IAAI,CAAC,EAAE;UAChB,IAAIkC,eAAe,IAAI1R,SAAS,CAACwP,IAAI,CAACnN,YAAY,CAAC,CAAC,EAAE;YAClD,IAAI9C,YAAY,CAACiQ,IAAI,CAACjH,GAAG,EAAEA,GAAG,CAAC,EAAE;cAC7B6B,MAAM,GAAG8C,KAAK;YAClB;UACJ,CAAC,MAAM,IAAI3N,YAAY,CAAC6P,cAAc,CAAClG,KAAK,CAACsG,IAAI,CAAC,EAAEjH,GAAG,CAAC,EAAE;YACtD6B,MAAM,GAAG8C,KAAK;UAClB;QACJ;QACA,IAAI9C,MAAM,IAAI,CAAC,EAAE;UACb,MAAMuH,QAAQ,GAAGnE,KAAK,CAACpD,MAAM,GAAG,CAAC,CAAC;UAClC,IAAIuH,QAAQ,KAAK,QAAQ,KAAKA,QAAQ,CAACpF,OAAO,IAAI,gBAAgB,KAAKoF,QAAQ,CAACpF,OAAO,CAAC,IAAIvM,SAAS,CAAC+H,MAAM,CAAC6J,cAAc,CAAC,EAAE;YAC1H;UACJ;UACA,IAAI5R,SAAS,CAAC+H,MAAM,CAAC6J,cAAc,CAAC,EAAE;YAClCxH,MAAM,IAAI,CAAC;UACf;UACA,OAAO,IAAI;QACf;MACJ,CAAE,CAAC;IACP;IACA,OAAOA,MAAM;EACjB;EACAyH,gBAAgBA,CAACtJ,GAAG,EAAE;IAClB,IAAIuJ,sBAAsB;IAC1B,MAAMtC,IAAI,GAAG;MACTjH,GAAG,EAAEA;IACT,CAAC;IACD,MAAMwJ,UAAU,GAAG,IAAI,MAAMD,sBAAsB,GAAG,IAAI,CAACxJ,gBAAgB,CAACC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKuJ,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACC,UAAU;IACnK,IAAI,IAAI,KAAKA,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAIA,UAAU,CAAC1P,YAAY,CAAC,EAAE;MAC1EmN,IAAI,CAACnN,YAAY,CAAC,GAAG0P,UAAU,CAAC1P,YAAY,CAAC;IACjD;IACA,OAAOmN,IAAI;EACf;EACAwC,kBAAkBA,CAACxE,KAAK,EAAEzF,MAAM,EAAEwJ,gBAAgB,EAAE;IAChD,IAAIU,cAAc,GAAG,IAAI,CAACX,kBAAkB,CAAC9D,KAAK,EAAEzF,MAAM,EAAEwJ,gBAAgB,CAAC;IAC7E,MAAMnC,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,IAAI+N,cAAc,GAAG,CAAC,EAAE;MACpB,MAAMxK,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAAC,CAAC;MAChD,MAAM0K,SAAS,GAAG9C,cAAc,CAAC8C,SAAS,CAAC,CAAC;MAC5C,MAAMC,sBAAsB,GAAG,IAAI,CAACX,0BAA0B,CAACzJ,MAAM,CAAC;MACtE,IAAIN,cAAc,KAAKnF,qBAAqB,IAAI,CAAC,KAAK4P,SAAS,IAAI,CAAClS,SAAS,CAACmS,sBAAsB,CAAC,EAAE;QACnGF,cAAc,GAAG,CAAC;MACtB,CAAC,MAAM,IAAIxK,cAAc,KAAKnF,qBAAqB,IAAI8M,cAAc,CAACgD,gBAAgB,CAAC,CAAC,EAAE;QACtFH,cAAc,GAAGzE,KAAK,CAACvF,MAAM;MACjC;IACJ;IACA,OAAOgK,cAAc;EACzB;EACAI,YAAYA,CAAC7E,KAAK,EAAEjC,CAAC,EAAE;IACnB,MAAM;MACF+G,UAAU,EAAEA;IAChB,CAAC,GAAG/G,CAAC;IACL,IAAI,CAACgH,MAAM,CAACD,UAAU,CAAC;IACvB,MAAMzK,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IACjCE,OAAO,CAAC7C,OAAO,CAAE+C,MAAM,IAAI;MACvB,IAAIyK,sBAAsB;MAC1B,MAAMC,QAAQ,GAAG1K,MAAM,CAACC,IAAI,KAAK/G,0BAA0B;MAC3D,IAAI,CAACwR,QAAQ,EAAE;QACX;MACJ;MACA,IAAI;QACAlK,GAAG,EAAEA;MACT,CAAC,GAAGR,MAAM;MACV,IAAIgK,UAAU,GAAG,IAAI,MAAMS,sBAAsB,GAAG,IAAI,CAAClK,gBAAgB,CAACC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKiK,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACT,UAAU;MACjK,IAAI,CAAC/R,SAAS,CAACuI,GAAG,CAAC,IAAI,CAACvI,SAAS,CAAC+R,UAAU,CAAC,EAAE;QAC3CA,UAAU,GAAG,IAAI,CAAC1C,cAAc,CAACtH,MAAM,CAAC;QACxCQ,GAAG,GAAGwJ,UAAU,CAACxJ,GAAG;MACxB;MACA,MAAM0J,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACxE,KAAK,EAAEzF,MAAM,CAAC;MAC7D,MAAMyH,IAAI,GAAG,IAAI,CAACqC,gBAAgB,CAACtJ,GAAG,CAAC;MACvC,IAAI0J,cAAc,IAAI,CAAC,EAAE;QACrBzE,KAAK,CAACtB,MAAM,CAAC+F,cAAc,EAAE,CAAC,EAAEzC,IAAI,CAAC;MACzC;IACJ,CAAE,CAAC;IACH,OAAOhC,KAAK;EAChB;EACAkF,eAAeA,CAAClD,IAAI,EAAEhJ,OAAO,EAAEmM,kBAAkB,EAAE;IAC/C,MAAMC,OAAO,GAAGpM,OAAO,CAACwG,cAAc;IACtC,MAAMzE,GAAG,GAAGiH,IAAI,CAACvG,IAAI,CAAC5G,YAAY,CAAC,GAAGmN,IAAI,CAACvG,IAAI,CAACV,GAAG,GAAGiH,IAAI,CAACjH,GAAG;IAC9D,MAAMV,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IACjC,MAAMwB,SAAS,GAAG1I,aAAa,CAAC2I,aAAa,CAACb,GAAG,EAAEV,OAAO,CAAC;IAC3D2H,IAAI,CAACW,SAAS,GAAG,KAAK;IACtB,IAAIhH,SAAS,IAAI,CAAC,EAAE;MAChB,IAAI,CAAC0J,oBAAoB,CAACrD,IAAI,EAAE3H,OAAO,CAACsB,SAAS,CAAC,EAAEZ,GAAG,EAAEqK,OAAO,EAAED,kBAAkB,CAAC;IACzF;EACJ;EACAE,oBAAoBA,CAACrD,IAAI,EAAEzH,MAAM,EAAEQ,GAAG,EAAEqK,OAAO,EAAED,kBAAkB,EAAE;IACjE,MAAM;MACF1J,IAAI,EAAEA,IAAI;MACVjB,IAAI,EAAEA;IACV,CAAC,GAAGD,MAAM;IACV,QAAQC,IAAI;MACR,KAAK/G,0BAA0B;QAC3BuO,IAAI,CAACsD,QAAQ,GAAG,IAAI;QACpBtD,IAAI,CAACjH,GAAG,GAAGA,GAAG;QACdiH,IAAI,CAACvG,IAAI,GAAGA,IAAI;QAChB;MACJ,KAAK9H,0BAA0B;QAC3BqO,IAAI,CAACuD,QAAQ,GAAG,IAAI;QACpBvD,IAAI,CAACzG,OAAO,GAAGyG,IAAI,CAACvG,IAAI;QACxBuG,IAAI,CAACvG,IAAI,GAAG/J,uBAAuB,CAACsQ,IAAI,CAACvG,IAAI,EAAEA,IAAI,CAAC;QACpDuG,IAAI,CAACwD,cAAc,GAAGL,kBAAkB,CAAC1J,IAAI,EAAE2J,OAAO,EAAE,IAAI,CAAC;QAC7D;MACJ,KAAK1R,0BAA0B;QAC3BsO,IAAI,CAACyD,OAAO,GAAG,IAAI;IAC3B;EACJ;EACAC,WAAWA,CAAC1M,OAAO,EAAE;IACjB,IAAI,CAAC2M,aAAa,CAAC,cAAc,EAAE3M,OAAO,CAAC;IAC3C,IAAIA,OAAO,CAAC4M,OAAO,EAAE;MACjB,MAAMC,QAAQ,GAAG,IAAI5T,QAAQ,CAAD,CAAC;MAC7BE,IAAI,CAACD,WAAW,CAAC8G,OAAO,CAAC4M,OAAO,CAAC,CAAC,CAACE,IAAI,CAACD,QAAQ,CAACE,OAAO,CAAC,CAACC,IAAI,CAAClQ,oBAAoB,CAAC+P,QAAQ,CAAC,CAAC,CAACG,IAAI,CAAE/J,GAAG,IAAI,IAAI,CAACD,sBAAsB,CAACC,GAAG,CAAE,CAAC;MAC9I,OAAO4J,QAAQ;IACnB;EACJ;EACAI,iBAAiBA,CAAA,EAAG;IAChB,MAAM1B,UAAU,GAAG,CAAC,CAAC;IACrBA,UAAU,CAAC1P,YAAY,CAAC,GAAG,IAAI,CAACqR,eAAe,CAAC,CAAC;IACjD,OAAO3B,UAAU;EACrB;EACA1C,cAAcA,CAACtH,MAAM,EAAE4L,SAAS,EAAE;IAC9B,IAAIC,sBAAsB;IAC1B,IAAI7B,UAAU;IACdhK,MAAM,CAACQ,GAAG,GAAG,IAAI,CAACsL,iBAAiB,CAAC9L,MAAM,CAAC;IAC3C,MAAM;MACFQ,GAAG,EAAEA;IACT,CAAC,GAAGR,MAAM;IACVgK,UAAU,GAAG,IAAI,MAAM6B,sBAAsB,GAAG,IAAI,CAACtL,gBAAgB,CAACC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKqL,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAAC7B,UAAU;IAC7J,IAAI,CAAC/R,SAAS,CAAC+R,UAAU,CAAC,EAAE;MACxB,MAAMI,sBAAsB,GAAG,IAAI,CAACX,0BAA0B,CAACzJ,MAAM,CAAC;MACtEgK,UAAU,GAAG,IAAI,CAAC0B,iBAAiB,CAAC,CAAC;MACrC,IAAI,CAACzT,SAAS,CAACmS,sBAAsB,CAAC,EAAE;QACpC,IAAI,CAAC2B,0BAA0B,CAAC/L,MAAM,EAAE4L,SAAS,CAAC;MACtD;IACJ;IACA,IAAI,CAAClL,gBAAgB,CAAC;MAClBsJ,UAAU,EAAEA,UAAU;MACtBxJ,GAAG,EAAEA;IACT,CAAC,CAAC;IACF,OAAO;MACHwJ,UAAU,EAAEA,UAAU;MACtBxJ,GAAG,EAAEA;IACT,CAAC;EACL;EACAsL,iBAAiBA,CAAC9L,MAAM,EAAE;IACtB,IAAI/H,SAAS,CAAC+H,MAAM,CAACQ,GAAG,CAAC,EAAE;MACvB,OAAOR,MAAM,CAACQ,GAAG;IACrB;IACA,MAAMwL,OAAO,GAAG,IAAI,CAAC7P,eAAe,CAACqE,GAAG,CAAC,CAAC;IAC1C,IAAIyL,QAAQ;IACZ,IAAIjM,MAAM,CAACkB,IAAI,IAAI8K,OAAO,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE;MACnDC,QAAQ,GAAGjM,MAAM,CAACkB,IAAI,CAAC8K,OAAO,CAAC;IACnC;IACA,IAAI,CAAC/T,SAAS,CAACgU,QAAQ,CAAC,EAAE;MACtBA,QAAQ,GAAGzQ,qBAAqB,CAAC,CAAC;IACtC;IACA,OAAOyQ,QAAQ;EACnB;EACAF,0BAA0BA,CAAC/L,MAAM,EAAE4L,SAAS,EAAE;IAC1C,MAAMQ,QAAQ,GAAG,IAAI,CAACxP,OAAO,CAAC,UAAU,CAAC;IACzC,MAAMyK,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMkQ,QAAQ,GAAGhF,cAAc,CAAC5B,KAAK,CAAC,IAAI,CAAC;IAC3C,MAAM/F,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAAC,CAAC;IAChD,QAAQC,cAAc;MAClB,KAAKtF,sBAAsB;MAC3B,KAAKG,qBAAqB;QACtB;MACJ,KAAKK,yBAAyB;MAC9B,KAAKD,4BAA4B;QAC7B,IAAI0R,QAAQ,CAACnM,MAAM,EAAE;UACjB,MAAMoM,SAAS,GAAG5M,cAAc,KAAK9E,yBAAyB,GAAG,CAAC,GAAGyR,QAAQ,CAACnM,MAAM,GAAG,CAAC;UACxFF,MAAM,CAAC,CAAC,KAAKsM,SAAS,GAAG,iBAAiB,GAAG,gBAAgB,CAAC,GAAGD,QAAQ,CAACC,SAAS,CAAC,CAAC9L,GAAG;QAC5F;QACA;MACJ;QAAS;UACL,MAAM+L,gBAAgB,GAAG7M,cAAc,KAAKrE,gCAAgC;UAC5E,IAAImR,gBAAgB,GAAGD,gBAAgB,GAAG,IAAI,KAAKH,QAAQ,IAAI,KAAK,CAAC,KAAKA,QAAQ,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACK,yBAAyB,CAAC,CAAC,GAAG,IAAI,KAAKL,QAAQ,IAAI,KAAK,CAAC,KAAKA,QAAQ,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACM,sBAAsB,CAAC,CAAC;UAC1N,MAAM1N,GAAG,GAAGqI,cAAc,CAACsF,cAAc,CAAC,CAAC,CAACH,gBAAgB,CAAC;UAC7D,IAAIxN,GAAG,KAAK,CAACA,GAAG,CAACoJ,SAAS,IAAI,QAAQ,KAAKpJ,GAAG,CAACwF,OAAO,IAAI,gBAAgB,KAAKxF,GAAG,CAACwF,OAAO,CAAC,EAAE;YACzFgI,gBAAgB,EAAE;UACtB;UACA,MAAMI,SAAS,GAAGvF,cAAc,CAACuB,gBAAgB,CAAC4D,gBAAgB,CAAC;UACnE,IAAIvU,SAAS,CAAC2U,SAAS,CAAC,EAAE;YACtB5M,MAAM,CAAC6M,eAAe,GAAGD,SAAS;UACtC;QACJ;IACJ;EACJ;EACAjB,eAAeA,CAAA,EAAG;IACd,IAAImB,cAAc,GAAG,CAAC;IACtB,IAAI,CAAClN,UAAU,CAAC,CAAC,CAAC3C,OAAO,CAAE8P,QAAQ,IAAI;MACnC,IAAIC,sBAAsB;MAC1B,MAAMhD,UAAU,GAAG,IAAI,MAAMgD,sBAAsB,GAAG,IAAI,CAACzM,gBAAgB,CAACwM,QAAQ,CAACvM,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKwM,sBAAsB,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAAChD,UAAU;MAC5K,IAAI/R,SAAS,CAAC+R,UAAU,CAAC,IAAI+C,QAAQ,CAAC9M,IAAI,KAAK/G,0BAA0B,IAAI8Q,UAAU,CAAC1P,YAAY,CAAC,GAAGwS,cAAc,EAAE;QACpHA,cAAc,GAAG9C,UAAU,CAAC1P,YAAY,CAAC;MAC7C;IACJ,CAAE,CAAC;IACH,OAAOwS,cAAc,GAAG,CAAC;EAC7B;EACArD,0BAA0BA,CAACwD,YAAY,EAAE;IACrC,OAAOA,YAAY,CAACpD,cAAc,IAAIoD,YAAY,CAACJ,eAAe;EACtE;EACAK,wBAAwBA,CAAA,EAAG;IACvB,MAAMxN,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAAC,CAAC;IAChD,MAAM4H,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMgO,SAAS,GAAG9C,cAAc,CAAC8C,SAAS,CAAC,CAAC;IAC5C,MAAMgD,aAAa,GAAG9F,cAAc,CAAC+F,SAAS,CAAC,CAAC,GAAG,CAAC;IACpD,IAAI1N,cAAc,KAAKtF,sBAAsB,IAAI,CAAC,KAAK+P,SAAS,EAAE;MAC9D,OAAO,CAAC;IACZ;IACA,IAAIzK,cAAc,KAAKnF,qBAAqB,IAAI4P,SAAS,KAAKgD,aAAa,EAAE;MACzE,OAAOA,aAAa;IACxB;IACA,OAAO,CAAC,CAAC;EACb;EACAE,MAAMA,CAACzB,SAAS,EAAE;IACd,MAAMvE,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMmR,KAAK,GAAGjG,cAAc,CAACiG,KAAK,CAAC,CAAC;IACpC,IAAI,CAACA,KAAK,EAAE;MACRjG,cAAc,CAACwB,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC7K,SAAS,CAACuP,IAAI,CAAC;MACtD,OAAQ,IAAI7V,QAAQ,CAAD,CAAC,CAAEyF,MAAM,CAAC,CAAC;IAClC;IACA,OAAO,IAAI,CAACqQ,OAAO,CAAC5B,SAAS,CAAC;EAClC;EACA4B,OAAOA,CAAC5B,SAAS,EAAE;IACf,MAAMvE,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMmR,KAAK,GAAGjG,cAAc,CAACiG,KAAK,CAAC,CAAC;IACpC,MAAM9M,GAAG,GAAG8M,KAAK,IAAIA,KAAK,CAAC9M,GAAG,CAAC,CAAC;IAChC,MAAMiN,KAAK,GAAG;MACVvM,IAAI,EAAE,CAAC;IACX,CAAC;IACD,MAAMwM,eAAe,GAAG,IAAI,CAAC3E,uBAAuB,CAAC,CAAC;IACtD,MAAMuC,QAAQ,GAAG,IAAI5T,QAAQ,CAAD,CAAC;IAC7B,IAAI,CAACqQ,OAAO,CAAC;MACT4F,kBAAkB,EAAE;IACxB,CAAC,CAAC;IACF,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,CAAC,EAAE;MACzBhW,IAAI,CAAC,IAAI,CAACiW,iBAAiB,CAACH,eAAe,CAAC,CAAC,CAACnC,IAAI,CAACD,QAAQ,CAACE,OAAO,CAAC,CAACC,IAAI,CAACH,QAAQ,CAACnO,MAAM,CAAC;MAC1F,OAAOmO,QAAQ,CAACD,OAAO,CAAC,CAAC;IAC7B;IACA,IAAI,CAAC7K,GAAG,EAAE;MACNiN,KAAK,CAACvM,IAAI,CAAC4M,OAAO,GAAGC,MAAM,CAAC,IAAIzW,IAAI,CAAD,CAAC,CAAC;IACzC;IACAM,IAAI,CAAC,IAAI,CAACuT,WAAW,CAACsC,KAAK,EAAE7B,SAAS,CAAC,CAAC,CAACL,IAAI,CAAE,MAAM;MACjD,IAAI,IAAI,CAACqC,eAAe,CAAC,CAAC,EAAE;QACxBhW,IAAI,CAAC,IAAI,CAACoW,WAAW,CAACP,KAAK,CAACvM,IAAI,EAAE0K,SAAS,EAAE8B,eAAe,CAAC,CAAC,CAACnC,IAAI,CAACD,QAAQ,CAACE,OAAO,CAAC,CAACC,IAAI,CAACH,QAAQ,CAACnO,MAAM,CAAC;MAC/G,CAAC,MAAM;QACHmO,QAAQ,CAACnO,MAAM,CAAC,QAAQ,CAAC;MAC7B;IACJ,CAAE,CAAC,CAACsO,IAAI,CAACH,QAAQ,CAACnO,MAAM,CAAC;IACzB,OAAOmO,QAAQ,CAACD,OAAO,CAAC,CAAC;EAC7B;EACAuC,eAAeA,CAACjN,MAAM,EAAE;IACpB,MAAMsN,WAAW,GAAG,IAAI,CAACtC,eAAe,CAAC,CAAC;IAC1C,IAAIsC,WAAW,GAAG,CAAC,EAAE;MACjB,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf;EACAD,WAAWA,CAAC9M,IAAI,EAAE0K,SAAS,EAAEsC,sBAAsB,EAAE;IACjD,MAAMlO,MAAM,GAAG;MACXkB,IAAI,EAAEA,IAAI;MACVjB,IAAI,EAAE/G;IACV,CAAC;IACD,MAAMiV,YAAY,GAAG,IAAI,CAACpF,uBAAuB,CAAC,CAAC;IACnD,MAAMiB,UAAU,GAAG,IAAI,CAAC1C,cAAc,CAACtH,MAAM,EAAE4L,SAAS,CAAC;IACzD,MAAM;MACFpL,GAAG,EAAEA;IACT,CAAC,GAAGwJ,UAAU;IACd,IAAI,CAACzB,cAAc,CAAC/H,GAAG,EAAE,IAAI,CAAC;IAC9B,IAAI,CAAC4N,UAAU,CAACpO,MAAM,CAAC;IACvB,OAAO,IAAI,CAAC6N,iBAAiB,CAACK,sBAAsB,EAAElO,MAAM,EAAEmO,YAAY,CAAC;EAC/E;EACAN,iBAAiBA,CAACH,eAAe,EAAE1N,MAAM,EAAEmO,YAAY,EAAE;IACrD,MAAMjR,CAAC,GAAG,IAAIxF,QAAQ,CAAD,CAAC;IACtB,MAAM2P,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3CgS,YAAY,GAAGA,YAAY,IAAI,CAAC,CAAC;IACjCnO,MAAM,GAAGA,MAAM,IAAI,IAAI,CAACJ,UAAU,CAAC,CAAC,CAACG,MAAM,CAAEsO,CAAC,IAAIA,CAAC,CAACpO,IAAI,KAAK/G,0BAA2B,CAAC,CAAC,CAAC,CAAC;IAC5F,IAAI,CAAC8G,MAAM,EAAE;MACT,OAAO9C,CAAC,CAACC,MAAM,CAAC,QAAQ,CAAC,CAACkO,OAAO,CAAC,CAAC;IACvC;IACA,MAAMiD,oBAAoB,GAAG,IAAI,CAACpB,wBAAwB,CAAC,CAAC;IAC5D,IAAIrJ,QAAQ,GAAG,IAAI,CAACoG,kBAAkB,CAAC5C,cAAc,CAAC5B,KAAK,CAAC,CAAC,EAAEzF,MAAM,EAAE,IAAI,CAAC;IAC5E,MAAMuO,kBAAkB,GAAG/N,GAAG,IAAI;MAC9B,IAAIgO,qBAAqB;MACzB5W,IAAI,CAAC,IAAI,MAAM4W,qBAAqB,GAAG,IAAI,CAACjS,gBAAgB,CAAC,IAAI,KAAK,CAAC,KAAKiS,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACC,aAAa,CAACjO,GAAG,CAAC,CAAC,CAAC+K,IAAI,CAAE,MAAM;QAC/J1H,QAAQ,GAAGwD,cAAc,CAACzB,gBAAgB,CAAC5F,MAAM,CAACQ,GAAG,CAAC;QACtDtD,CAAC,CAACsO,OAAO,CAAC,CAAC;MACf,CAAE,CAAC;IACP,CAAC;IACD,MAAMpB,sBAAsB,GAAG,IAAI,CAACX,0BAA0B,CAACzJ,MAAM,CAAC;IACtE,IAAIsO,oBAAoB,IAAI,CAAC,EAAE;MAC3BjH,cAAc,CAAC8C,SAAS,CAACmE,oBAAoB,CAAC,CAAC/C,IAAI,CAAE,MAAM;QACvDgD,kBAAkB,CAACvO,MAAM,CAACQ,GAAG,CAAC;MAClC,CAAE,CAAC,CAACiL,IAAI,CAACvO,CAAC,CAACC,MAAM,CAAC;IACtB,CAAC,MAAM,IAAI0G,QAAQ,GAAG,CAAC,IAAI5L,SAAS,CAACmS,sBAAsB,CAAC,EAAE;MAC1DmE,kBAAkB,CAACnE,sBAAsB,CAAC;IAC9C,CAAC,MAAM;MACH/C,cAAc,CAACK,WAAW,CAAC;QACvB6C,UAAU,EAAE,QAAQ;QACpBmE,UAAU,EAAE,CAAChB,eAAe,EAAES,YAAY,EAAEtK,QAAQ;MACxD,CAAC,CAAC;MACFA,QAAQ,GAAGwD,cAAc,CAACzB,gBAAgB,CAAC5F,MAAM,CAACQ,GAAG,CAAC;MACtD,IAAIqD,QAAQ,GAAG,CAAC,EAAE;QACd0K,kBAAkB,CAACvO,MAAM,CAACQ,GAAG,CAAC;MAClC,CAAC,MAAM;QACHtD,CAAC,CAACsO,OAAO,CAAC,CAAC;MACf;IACJ;IACAtO,CAAC,CAACqO,IAAI,CAAE,MAAM;MACV,IAAIoD,gBAAgB;MACpB,IAAI,MAAMA,gBAAgB,GAAG,IAAI,CAAChS,SAAS,CAAC,IAAI,KAAK,CAAC,KAAKgS,gBAAgB,IAAIA,gBAAgB,CAACC,kBAAkB,CAAC,IAAI,CAAC,CAACrD,IAAI,CAAE,MAAM;QACjI,IAAI,CAACsD,aAAa,CAAChL,QAAQ,CAAC;QAC5B,IAAI,CAACiL,eAAe,CAAC9O,MAAM,CAACQ,GAAG,CAAC;MACpC,CAAE,CAAC;IACP,CAAE,CAAC;IACH,OAAOtD,CAAC,CAACmO,OAAO,CAAC,CAAC;EACtB;EACAwD,aAAaA,CAAChL,QAAQ,EAAE;IACpB,IAAI,CAACkL,4BAA4B,CAAClL,QAAQ,CAAC;EAC/C;EACAmL,wBAAwBA,CAACnL,QAAQ,EAAE,CAAC;EACpCkL,4BAA4BA,CAAClL,QAAQ,EAAE;IACnC,IAAIoL,qBAAqB;IACzB,MAAM5H,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMqE,GAAG,GAAG6G,cAAc,CAACuB,gBAAgB,CAAC/E,QAAQ,CAAC;IACrD,MAAMqL,UAAU,GAAG,IAAI,CAAC7J,yBAAyB,CAACxB,QAAQ,CAAC;IAC3D,IAAI,MAAMoL,qBAAqB,GAAG,IAAI,CAACzS,6BAA6B,CAAC,IAAI,KAAK,CAAC,KAAKyS,qBAAqB,IAAIA,qBAAqB,CAACE,KAAK,CAACD,UAAU,CAAC;IACpJ,IAAI,CAAC9Q,MAAM,CAAC,eAAe,EAAEoC,GAAG,CAAC;IACjC,IAAI,CAAC4O,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACC,kBAAkB,CAACH,UAAU,EAAG,MAAM;MACvCrL,QAAQ,GAAGwD,cAAc,CAACzB,gBAAgB,CAACpF,GAAG,CAAC;MAC/C,IAAI,CAAC4O,mBAAmB,GAAG,KAAK;MAChC,IAAI,CAACJ,wBAAwB,CAACnL,QAAQ,CAAC;IAC3C,CAAE,CAAC;EACP;EACAyL,eAAeA,CAAC7Q,OAAO,EAAE;IACrB,IAAI,CAAC2M,aAAa,CAAC,gBAAgB,EAAE3M,OAAO,CAAC;IAC7C,OAAOA,OAAO,CAAC8Q,MAAM;EACzB;EACAC,kBAAkBA,CAACd,UAAU,EAAE7K,QAAQ,EAAE,CAAC;EAC1CwF,0BAA0BA,CAAA,EAAG;IACzB,MAAMoG,cAAc,GAAG,IAAI,CAACrR,MAAM,CAACtE,kCAAkC,CAAC;IACtE,IAAI,CAAC7B,SAAS,CAACwX,cAAc,CAAC,EAAE;MAC5B,OAAO,CAAC,CAAC;IACb;IACA,OAAO,IAAI,CAACxT,kBAAkB,CAACyT,qBAAqB,CAACD,cAAc,CAAC;EACxE;EACAE,yBAAyBA,CAACxK,KAAK,EAAEqD,MAAM,EAAE;IACrC,IAAIoH,qBAAqB;IACzB,MAAM3K,cAAc,GAAG,IAAI,CAAChJ,kBAAkB,CAACiJ,iBAAiB,CAAC,CAAC;IAClE,IAAI,CAAC2K,kBAAkB,CAAC,IAAI,MAAMD,qBAAqB,GAAG3K,cAAc,CAACE,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKyK,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAAChZ,IAAI,EAAE4R,MAAM,CAAC;EACvK;EACAqH,kBAAkBA,CAACjZ,IAAI,EAAE4R,MAAM,EAAE;IAC7B,IAAIA,MAAM,EAAE;MACR,IAAI,CAACnI,aAAa,CAACvG,kCAAkC,EAAElD,IAAI,CAAC;IAChE,CAAC,MAAM;MACH,IAAI,CAACwH,MAAM,CAACtE,kCAAkC,EAAElD,IAAI,CAAC;IACzD;EACJ;EACAiQ,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAACgJ,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC;EACvC;EACAC,cAAcA,CAAA,EAAG;IACb,MAAML,cAAc,GAAG,IAAI,CAACrR,MAAM,CAACtE,kCAAkC,CAAC;IACtE,OAAO,IAAI,CAACiW,gBAAgB,CAACN,cAAc,CAAC;EAChD;EACAM,gBAAgBA,CAACnZ,IAAI,EAAE;IACnB,MAAMqO,cAAc,GAAG,IAAI,CAAChJ,kBAAkB,CAACiJ,iBAAiB,CAAC,CAAC;IAClE,IAAI8K,UAAU;IACd/X,SAAS,CAACrB,IAAI,CAAC,IAAIqO,cAAc,CAACyE,IAAI,CAAE7K,MAAM,IAAI;MAC9C,IAAIA,MAAM,CAACjI,IAAI,KAAKA,IAAI,EAAE;QACtBoZ,UAAU,GAAGnR,MAAM;QACnB,OAAO,IAAI;MACf;IACJ,CAAE,CAAC;IACH,OAAOmR,UAAU;EACrB;EACAjH,uBAAuBA,CAACkH,UAAU,EAAE;IAChC,MAAM5I,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAM+T,UAAU,GAAG,IAAI,CAAC9R,MAAM,CAACrE,8BAA8B,CAAC;IAC9D,MAAM8J,QAAQ,GAAGwD,cAAc,CAACzB,gBAAgB,CAACsK,UAAU,CAAC;IAC5D,IAAI,CAAC,CAAC,KAAKrM,QAAQ,EAAE;MACjB,OAAOA,QAAQ;IACnB;IACA,OAAOA,QAAQ,GAAG,IAAI,CAACmD,0BAA0B,CAACiJ,UAAU,CAAC;EACjE;EACAjJ,0BAA0BA,CAACiJ,UAAU,EAAE;IACnC,MAAMD,UAAU,GAAGC,UAAU,GAAG,IAAI,CAACF,gBAAgB,CAACE,UAAU,CAAC,GAAG,IAAI,CAACH,cAAc,CAAC,CAAC;IACzF,MAAMK,cAAc,GAAG,gBAAgB,MAAM,IAAI,KAAKH,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACI,YAAY,CAAC;IAC7H,OAAOD,cAAc,GAAG,CAAC,GAAG,CAAC;EACjC;EACArJ,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAAC2B,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACF,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;EACnC;EACA8H,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACxJ,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAC3B;EACAwJ,OAAOA,CAACzM,QAAQ,EAAE;IACd,MAAMwD,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMsJ,KAAK,GAAG4B,cAAc,CAAC5B,KAAK,CAAC,CAAC;IACpC,MAAMgC,IAAI,GAAGhC,KAAK,CAAC5B,QAAQ,CAAC;IAC5B,MAAMlD,MAAM,GAAG;MACXO,IAAI,EAAEuG,IAAI,IAAIA,IAAI,CAACvG,IAAI;MACvBqO,MAAM,EAAE;IACZ,CAAC;IACD,MAAMtI,WAAW,GAAG,IAAI,CAAC8B,uBAAuB,CAAC,CAAC;IAClD,IAAI,CAACtB,IAAI,EAAE;MACP;IACJ;IACA,IAAI5D,QAAQ,KAAKoD,WAAW,EAAE;MAC1B,OAAO,IAAI;IACf;IACA,IAAI,KAAK,CAAC,KAAKQ,IAAI,CAACjH,GAAG,EAAE;MACrB,IAAI,CAACrE,eAAe,CAAC0M,SAAS,CAAC,OAAO,CAAC;MACvC;IACJ;IACA,IAAI,CAACpB,IAAI,CAACsD,QAAQ,EAAE;MAChBpK,MAAM,CAACH,GAAG,GAAGiH,IAAI,CAACjH,GAAG;IACzB;IACA,IAAI,IAAI,CAAC8O,eAAe,CAAC3O,MAAM,CAAC,EAAE;MAC9B;IACJ;IACA,IAAI,CAACR,YAAY,CAAC,CAAC;IACnB,IAAI,CAACnE,IAAI,CAAC,CAAC;IACX,IAAI,CAAC6K,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACmB,UAAU,GAAGX,cAAc,CAAC8C,SAAS,CAAC,CAAC;IAC5C,IAAI,CAACzJ,gBAAgB,CAAC;MAClBF,GAAG,EAAEiH,IAAI,CAACjH,GAAG;MACbQ,OAAO,EAAEyG,IAAI,CAACzG,OAAO,IAAIyG,IAAI,CAACvG;IAClC,CAAC,CAAC;IACF,IAAI,CAACqH,cAAc,CAACd,IAAI,CAACjH,GAAG,CAAC;EACjC;EACA2G,yBAAyBA,CAACtD,QAAQ,EAAEoD,WAAW,EAAE;IAC7C,MAAMyH,UAAU,GAAG,CAACzH,WAAW,EAAEpD,QAAQ,CAAC;IAC1C,IAAI,CAAC2L,kBAAkB,CAACd,UAAU,EAAE7K,QAAQ,EAAEoD,WAAW,CAAC;IAC1D,IAAI,CAACsJ,6BAA6B,CAAC7B,UAAU,EAAE7K,QAAQ,CAAC;EAC5D;EACA0M,6BAA6BA,CAAC7B,UAAU,EAAE7K,QAAQ,EAAE2M,gBAAgB,EAAE;IAClE,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACtU,eAAe,CAACuL,WAAW,CAAC;MAC7B6C,UAAU,EAAE,QAAQ;MACpBmE,UAAU,EAAEA,UAAU;MACtBa,MAAM,EAAEiB;IACZ,CAAC,CAAC;EACN;EACAE,kBAAkBA,CAAA,EAAG,CAAC;EACtBC,cAAcA,CAAC9M,QAAQ,EAAE+M,WAAW,EAAE,CAAC;EACvCC,iBAAiBA,CAAA,EAAG,CAAC;EACrBC,0BAA0BA,CAAA,EAAG;IACzB,OAAOtN,CAAC,IAAI;MACR,IAAI,IAAI,CAAC4E,SAAS,CAAC,CAAC,EAAE;QAClB,IAAI,CAAChB,cAAc,CAAC,CAAC;MACzB;IACJ,CAAC;EACL;EACA2J,yBAAyBA,CAAClN,QAAQ,EAAE,CAAC;EACrCmN,oBAAoBA,CAAA,EAAG;IACnB,MAAMC,YAAY,GAAG;MACjB5N,IAAI,EAAE,IAAI,CAACjF,MAAM,CAAC,8BAA8B,CAAC;MACjDmF,OAAO,EAAE,IAAI,CAAC2N,YAAY,CAAC5T,IAAI,CAAC,IAAI;IACxC,CAAC;IACD,IAAI/E,QAAQ,CAACD,OAAO,CAAC,CAAC,CAAC,EAAE;MACrB2Y,YAAY,CAACE,WAAW,GAAG,WAAW;MACtCF,YAAY,CAAChR,IAAI,GAAG,SAAS;IACjC;IACA,OAAOgR,YAAY;EACvB;EACAG,sBAAsBA,CAAA,EAAG;IACrB,MAAMH,YAAY,GAAG;MACjB5N,IAAI,EAAE,IAAI,CAACjF,MAAM,CAAC,gCAAgC,CAAC;MACnDmF,OAAO,EAAE,IAAI,CAAC6D,cAAc,CAAC9J,IAAI,CAAC,IAAI;IAC1C,CAAC;IACD,IAAI/E,QAAQ,CAACD,OAAO,CAAC,CAAC,CAAC,EAAE;MACrB2Y,YAAY,CAACE,WAAW,GAAG,UAAU;IACzC;IACA,OAAOF,YAAY;EACvB;EACAI,mBAAmBA,CAAC7Q,GAAG,EAAE;IACrB,IAAI,CAAC1C,cAAc,CAACwT,MAAM,CAAC7Z,UAAU,CAAC+I,GAAG,CAAC,CAAC;EAC/C;EACA+Q,8BAA8BA,CAACzR,OAAO,EAAEqF,KAAK,EAAE;IAC3C,MAAMqM,YAAY,GAAG1R,OAAO,CAACqF,KAAK,CAAC;IACnCrF,OAAO,CAAC7C,OAAO,CAAE+C,MAAM,IAAI;MACvB,IAAIA,MAAM,CAACC,IAAI,KAAK/G,0BAA0B,EAAE;QAC5C,MAAMkR,sBAAsB,GAAG,IAAI,CAACX,0BAA0B,CAACzJ,MAAM,CAAC;QACtE,IAAIxI,YAAY,CAAC4S,sBAAsB,EAAEoH,YAAY,CAAChR,GAAG,CAAC,EAAE;UACxDR,MAAM,CAAC/H,SAAS,CAAC+H,MAAM,CAAC6J,cAAc,CAAC,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,IAAI,CAACJ,0BAA0B,CAAC+H,YAAY,CAAC;QACnI;MACJ;IACJ,CAAE,CAAC;EACP;EACAC,aAAaA,CAACtM,KAAK,EAAE;IACjB,IAAIA,KAAK,IAAI,CAAC,EAAE;MACZ,MAAMrF,OAAO,GAAG,CAAC,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC,CAAC;MACtC,MAAM;QACFY,GAAG,EAAEA;MACT,CAAC,GAAGV,OAAO,CAACqF,KAAK,CAAC;MAClB,IAAI,CAACkM,mBAAmB,CAAC7Q,GAAG,CAAC;MAC7B,IAAI,CAAC+Q,8BAA8B,CAACzR,OAAO,EAAEqF,KAAK,CAAC;MACnDrF,OAAO,CAACqE,MAAM,CAACgB,KAAK,EAAE,CAAC,CAAC;MACxB,IAAI,CAAC9E,aAAa,CAACxG,2BAA2B,EAAEiG,OAAO,CAAC;MACxD,IAAItI,YAAY,CAAC,IAAI,CAAC4G,MAAM,CAACrE,8BAA8B,CAAC,EAAEyG,GAAG,CAAC,EAAE;QAChE,IAAI,CAAC6P,iBAAiB,CAAC,CAAC;MAC5B;IACJ;EACJ;EACAqB,gBAAgBA,CAACpG,QAAQ,EAAEqG,IAAI,EAAE;IAC7B,IAAI,CAAC7U,cAAc,IAAI,IAAI,CAACA,cAAc,CAACK,MAAM,CAAC,CAAC;IACnD,IAAI,CAACL,cAAc,GAAGwO,QAAQ;IAC9B,IAAI,CAACsG,yBAAyB,CAAC,CAAC,CAACrG,IAAI,CAAE,MAAM;MACzC,IAAI,UAAU,KAAKD,QAAQ,CAACuG,KAAK,CAAC,CAAC,EAAE;QACjC;MACJ;MACAF,IAAI,CAAC,CAAC;MACN,IAAI,CAAC7U,cAAc,GAAG,IAAI;IAC9B,CAAE,CAAC,CAAC2O,IAAI,CAAE,MAAM;MACZH,QAAQ,CAACnO,MAAM,CAAC,CAAC;MACjB,IAAI,CAACL,cAAc,GAAG,IAAI;IAC9B,CAAE,CAAC;EACP;EACA8U,yBAAyBA,CAAA,EAAG;IACxB,OAAOha,IAAI,CAAC,GAAG,IAAI,CAACoF,UAAU,CAAC;EACnC;EACA8U,2BAA2BA,CAAA,EAAG,CAAC;EAC/BC,gBAAgBA,CAAClT,MAAM,EAAEmT,SAAS,EAAEtE,eAAe,EAAE;IACjD,IAAI,CAAC7O,MAAM,IAAI,CAACA,MAAM,CAACoT,gBAAgB,IAAID,SAAS,IAAI,CAACA,SAAS,CAACC,gBAAgB,EAAE;MACjF,IAAI,CAAC7C,mBAAmB,GAAG,IAAI;MAC/B,IAAI,CAACqB,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACnU,wBAAwB,CAAC4V,SAAS,CAAC,CAAC;MACzC,IAAI,CAAC/V,eAAe,CAACuL,WAAW,CAAC;QAC7B6C,UAAU,EAAE,QAAQ;QACpBmE,UAAU,EAAE,CAAChB,eAAe,EAAE,IAAI,CAAC3E,uBAAuB,CAAC,CAAC;MAChE,CAAC,CAAC;IACN,CAAC,MAAM,IAAIlK,MAAM,KAAKmT,SAAS,EAAE;MAC7B,IAAI,CAACvB,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACtU,eAAe,CAACuL,WAAW,CAAC;QAC7B6C,UAAU,EAAE,QAAQ;QACpBmE,UAAU,EAAE;MAChB,CAAC,CAAC;IACN;EACJ;EACAW,kBAAkBA,CAAC8C,KAAK,EAAEC,mBAAmB,EAAEC,6BAA6B,EAAE;IAC1E,MAAMC,UAAU,GAAGA,CAAA,KAAM;MACrB,IAAIF,mBAAmB,EAAE;QACrBA,mBAAmB,CAAC,CAAC;MACzB;MACA,IAAID,KAAK,EAAE;QACP,MAAMI,iBAAiB,GAAGJ,KAAK,CAACK,IAAI,CAACnY,0BAA0B,CAAC,CAACoY,KAAK,CAAC,CAAC;QACxE/Z,aAAa,CAACga,qBAAqB,CAAC,IAAI,EAAEH,iBAAiB,CAAC;MAChE;MACA,IAAI,CAACI,oBAAoB,GAAG,IAAI;IACpC,CAAC;IACD,IAAIvb,OAAO,CAACwb,IAAI,CAAC,CAAC,CAACC,GAAG,IAAIzb,OAAO,CAACwb,IAAI,CAAC,CAAC,CAACE,OAAO,EAAE;MAC9CR,UAAU,CAAC,CAAC;IAChB,CAAC,MAAM;MACH,IAAI,IAAI,CAACK,oBAAoB,EAAE;QAC3B,IAAI,CAACA,oBAAoB,CAAC,CAAC;MAC/B;MACA9M,YAAY,CAAC,IAAI,CAACC,oBAAoB,CAAC;MACvC,IAAIuM,6BAA6B,EAAE;QAC/B,IAAI,CAACM,oBAAoB,GAAGP,mBAAmB;MACnD;MACA,IAAI,CAACtM,oBAAoB,GAAGlC,UAAU,CAAC0O,UAAU,CAAC;IACtD;EACJ;EACA5J,iBAAiBA,CAAC0J,mBAAmB,EAAEW,SAAS,EAAEV,6BAA6B,EAAE;IAC7E,MAAMW,eAAe,GAAG,IAAI,CAAC3J,0BAA0B,CAAC,CAAC;IACzD0J,SAAS,GAAGA,SAAS,IAAI,IAAI,CAACpW,SAAS,IAAI,IAAI,CAACA,SAAS,CAAC4I,eAAe,CAAC,IAAI,CAACwD,uBAAuB,CAAC,CAAC,EAAEiK,eAAe,CAAC;IAC1H,IAAID,SAAS,EAAE;MACX,IAAI,CAAC1D,kBAAkB,CAAC0D,SAAS,EAAEX,mBAAmB,EAAEC,6BAA6B,CAAC;IAC1F;EACJ;EACAY,SAASA,CAACpP,QAAQ,EAAE;IAChB,IAAI,CAACqP,kBAAkB,CAACrP,QAAQ,CAAC;EACrC;EACAqP,kBAAkBA,CAACrP,QAAQ,EAAE;IACzB,MAAMX,cAAc,GAAG,IAAI,CAAC9E,MAAM,CAAC,SAAS,CAAC;IAC7C,MAAM4E,YAAY,GAAG,IAAI,KAAKE,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACiQ,KAAK;IACzG,MAAMC,aAAa,GAAG,IAAI,KAAKlQ,cAAc,IAAI,KAAK,CAAC,KAAKA,cAAc,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACkQ,aAAa;IAClH,MAAMC,oBAAoB,GAAG,IAAI,KAAKrQ,YAAY,IAAI,KAAK,CAAC,KAAKA,YAAY,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACqQ,oBAAoB;IAC1H,MAAM5L,IAAI,GAAG,IAAI,CAACtL,eAAe,CAACsJ,KAAK,CAAC,CAAC,CAAC5B,QAAQ,CAAC;IACnD,MAAMvB,aAAa,GAAG,CAAC,IAAI,CAAC8F,SAAS,CAAC,CAAC,IAAIX,IAAI,CAACsD,QAAQ;IACxD,IAAItD,IAAI,IAAInF,aAAa,EAAE;MACvB,IAAI,CAAC8Q,aAAa,IAAI,CAACC,oBAAoB,EAAE;QACzC,IAAI,CAACC,cAAc,CAACzP,QAAQ,CAAC;MACjC,CAAC,MAAM;QACH,MAAM0P,kBAAkB,GAAGvQ,YAAY,IAAIA,YAAY,CAACuQ,kBAAkB;QAC1E,MAAMC,eAAe,GAAGvb,SAAS,CAACsb,kBAAkB,CAAC,IAAIA,kBAAkB,CAACrT,MAAM,GAAG,CAAC;QACtF7H,OAAO,CAACgb,oBAAoB,EAAEE,kBAAkB,EAAEC,eAAe,CAAC,CAACjI,IAAI,CAAEkI,aAAa,IAAI;UACtF,IAAIA,aAAa,EAAE;YACf,IAAI,CAACH,cAAc,CAACzP,QAAQ,CAAC;UACjC;QACJ,CAAE,CAAC;MACP;IACJ;EACJ;EACAyP,cAAcA,CAACzP,QAAQ,EAAE;IACrB,MAAMwD,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMsL,IAAI,GAAGJ,cAAc,CAAC5B,KAAK,CAAC,CAAC,CAAC5B,QAAQ,CAAC;IAC7C,MAAMrD,GAAG,GAAGiH,IAAI,IAAIA,IAAI,CAACjH,GAAG;IAC5B,MAAMkN,eAAe,GAAG,IAAI,CAAC3E,uBAAuB,CAAC,CAAC;IACtD,IAAI,CAAChB,OAAO,CAAC,CAAC;IACd,MAAMjI,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IACjC,MAAMwB,SAAS,GAAG1I,aAAa,CAAC2I,aAAa,CAACb,GAAG,EAAEV,OAAO,CAAC;IAC3D,IAAIsB,SAAS,IAAI,CAAC,EAAE;MAChB,IAAItB,OAAO,CAACsB,SAAS,CAAC,CAACnB,IAAI,KAAK/G,0BAA0B,EAAE;QACxD,IAAI,CAACuY,aAAa,CAACrQ,SAAS,CAAC;MACjC,CAAC,MAAM;QACH,IAAI,CAACgN,UAAU,CAAC;UACZ5N,GAAG,EAAEA,GAAG;UACRP,IAAI,EAAE9G;QACV,CAAC,CAAC;MACN;IACJ,CAAC,MAAM;MACH,IAAI,CAACiV,UAAU,CAAC;QACZ5N,GAAG,EAAEA,GAAG;QACRQ,OAAO,EAAEyG,IAAI,CAACvG,IAAI;QAClBjB,IAAI,EAAE9G;MACV,CAAC,CAAC;IACN;IACA,OAAO,IAAI,CAACua,eAAe,CAAC7P,QAAQ,EAAE6J,eAAe,CAAC;EAC1D;EACAgG,eAAeA,CAAC7P,QAAQ,EAAE6J,eAAe,EAAE;IACvC,OAAO,IAAI,CAACwD,YAAY,CAAC,CAAC;EAC9B;EACAyC,WAAWA,CAAC9P,QAAQ,EAAE;IAClB,MAAMwD,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMsL,IAAI,GAAGJ,cAAc,CAAC5B,KAAK,CAAC,CAAC,CAAC5B,QAAQ,CAAC;IAC7C,MAAM6J,eAAe,GAAG,IAAI,CAAC3E,uBAAuB,CAAC,CAAC;IACtD,MAAMvI,GAAG,GAAGiH,IAAI,IAAIA,IAAI,CAACjH,GAAG;IAC5B,MAAMV,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IACjC,IAAI6H,IAAI,EAAE;MACN,MAAMrG,SAAS,GAAG1I,aAAa,CAAC2I,aAAa,CAACb,GAAG,EAAEV,OAAO,CAAC;MAC3D,IAAIsB,SAAS,IAAI,CAAC,EAAE;QAChB,MAAM;UACFF,IAAI,EAAEA;QACV,CAAC,GAAGpB,OAAO,CAACsB,SAAS,CAAC;QACtB,IAAIlJ,aAAa,CAACgJ,IAAI,CAAC,EAAE;UACrB,IAAI,CAACuQ,aAAa,CAACrQ,SAAS,CAAC;QACjC,CAAC,MAAM;UACH,IAAI,CAACgN,UAAU,CAAC;YACZ5N,GAAG,EAAEA,GAAG;YACRP,IAAI,EAAE7G;UACV,CAAC,CAAC;QACN;QACAiO,cAAc,CAACK,WAAW,CAAC;UACvB6C,UAAU,EAAE,QAAQ;UACpBmE,UAAU,EAAE,CAAChB,eAAe,EAAE7J,QAAQ;QAC1C,CAAC,CAAC;MACN;IACJ;EACJ;EACA+P,aAAaA,CAAA,EAAG;IACZ,MAAMC,cAAc,GAAG;MACnBtE,MAAM,EAAE,KAAK;MACblE,OAAO,EAAE,IAAI;MACbvL,OAAO,EAAE,CAAC,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IAClC,CAAC;IACD,IAAI,CAACwL,aAAa,CAAC,UAAU,EAAEyI,cAAc,CAAC;IAC9C,MAAM3W,CAAC,GAAG,IAAIxF,QAAQ,CAAD,CAAC;IACtBE,IAAI,CAACD,WAAW,CAACkc,cAAc,CAACxI,OAAO,CAAC,CAAC,CAACE,IAAI,CAAE,MAAM;MAClDrO,CAAC,CAACsO,OAAO,CAACqI,cAAc,CAAC;IAC7B,CAAE,CAAC,CAACpI,IAAI,CAAE/J,GAAG,IAAI;MACbnG,oBAAoB,CAAC2B,CAAC,CAAC;MACvB,IAAI,CAACuE,sBAAsB,CAACC,GAAG,CAAC;MAChCxE,CAAC,CAACsO,OAAO,CAAC;QACN+D,MAAM,EAAE;MACZ,CAAC,CAAC;IACN,CAAE,CAAC;IACH,OAAOrS,CAAC;EACZ;EACA4W,qBAAqBA,CAAC3Q,UAAU,EAAExC,MAAM,EAAEgR,IAAI,EAAE;IAC5C,IAAI,IAAI,CAAC3T,SAAS,CAAC+V,SAAS,EAAE;MAC1B,OAAO,IAAI;IACf;IACA,MAAMzI,QAAQ,GAAG,IAAI5T,QAAQ,CAAD,CAAC;IAC7B,IAAI,CAAC0T,aAAa,CAACjI,UAAU,EAAExC,MAAM,CAAC;IACtC/I,IAAI,CAACD,WAAW,CAACgJ,MAAM,CAAC4O,MAAM,CAAC,CAAC,CAAChE,IAAI,CAAEgE,MAAM,IAAI;MAC7C,IAAIA,MAAM,EAAE;QACR3L,UAAU,CAAE,MAAM;UACd0H,QAAQ,CAACE,OAAO,CAAC,QAAQ,CAAC;QAC9B,CAAE,CAAC;MACP,CAAC,MAAM;QACHmG,IAAI,CAAChR,MAAM,CAAC,CAAC4K,IAAI,CAACD,QAAQ,CAACE,OAAO,CAAC,CAACC,IAAI,CAAClQ,oBAAoB,CAAC+P,QAAQ,CAAC,CAAC;MAC5E;IACJ,CAAE,CAAC,CAACG,IAAI,CAAClQ,oBAAoB,CAAC+P,QAAQ,CAAC,CAAC;IACxC,OAAOA,QAAQ;EACnB;EACA0I,eAAeA,CAACC,SAAS,EAAEC,OAAO,EAAEC,WAAW,EAAErU,OAAO,EAAE;IACtD,MAAMwN,KAAK,GAAG,IAAI,CAACnR,eAAe,CAACmR,KAAK,CAAC,CAAC;IAC1CvV,IAAI,CAAC+H,OAAO,EAAG,CAACqF,KAAK,EAAEnF,MAAM,KAAK;MAC9B,MAAMgB,OAAO,GAAG,IAAI,CAACF,WAAW,CAACd,MAAM,CAACQ,GAAG,CAAC;MAC5C,MAAM;QACFU,IAAI,EAAEA,IAAI;QACVjB,IAAI,EAAEA;MACV,CAAC,GAAGD,MAAM;MACV,MAAMoU,UAAU,GAAGzd,QAAQ,CAAC,CAAC,CAAC,EAAEqJ,MAAM,CAAC;MACvC,IAAIsL,QAAQ;MACZ,IAAI3K,MAAM;MACV,IAAI,IAAI,CAAC0T,mBAAmB,CAACrU,MAAM,EAAEmF,KAAK,CAAC,EAAE;QACzC;MACJ;MACA,QAAQlF,IAAI;QACR,KAAK9G,0BAA0B;UAC3BwH,MAAM,GAAG;YACLO,IAAI,EAAEF,OAAO;YACbR,GAAG,EAAER,MAAM,CAACQ,GAAG;YACf+O,MAAM,EAAE;UACZ,CAAC;UACDjE,QAAQ,GAAG,IAAI,CAACwI,qBAAqB,CAAC,eAAe,EAAEnT,MAAM,EAAG,MAAM2M,KAAK,CAACgH,MAAM,CAACtU,MAAM,CAACQ,GAAG,CAAC,CAAC+K,IAAI,CAAE/K,GAAG,IAAI;YACxG2T,WAAW,CAACI,IAAI,CAAC;cACbtU,IAAI,EAAE,QAAQ;cACdO,GAAG,EAAEA;YACT,CAAC,CAAC;UACN,CAAE,CAAE,CAAC;UACL;QACJ,KAAKtH,0BAA0B;UAC3ByH,MAAM,GAAG;YACLO,IAAI,EAAEA,IAAI;YACVqO,MAAM,EAAE;UACZ,CAAC;UACDjE,QAAQ,GAAG,IAAI,CAACwI,qBAAqB,CAAC,gBAAgB,EAAEnT,MAAM,EAAG,MAAM2M,KAAK,CAACkH,MAAM,CAAC7T,MAAM,CAACO,IAAI,CAAC,CAACqK,IAAI,CAAE,CAACrK,IAAI,EAAEV,GAAG,KAAK;YAClH,IAAIvI,SAAS,CAACuI,GAAG,CAAC,EAAE;cAChB4T,UAAU,CAAC5T,GAAG,GAAGA,GAAG;YACxB;YACA,IAAIU,IAAI,IAAI9I,QAAQ,CAAC8I,IAAI,CAAC,IAAIA,IAAI,KAAKP,MAAM,CAACO,IAAI,EAAE;cAChDkT,UAAU,CAAClT,IAAI,GAAGA,IAAI;YAC1B;YACAiT,WAAW,CAACI,IAAI,CAAC;cACbtU,IAAI,EAAE,QAAQ;cACdiB,IAAI,EAAEA,IAAI;cACViE,KAAK,EAAE;YACX,CAAC,CAAC;UACN,CAAE,CAAE,CAAC;UACL;QACJ,KAAK/L,0BAA0B;UAC3BuH,MAAM,GAAG;YACL8T,OAAO,EAAEvT,IAAI;YACbF,OAAO,EAAEA,OAAO;YAChBR,GAAG,EAAER,MAAM,CAACQ,GAAG;YACf+O,MAAM,EAAE;UACZ,CAAC;UACDjE,QAAQ,GAAG,IAAI,CAACwI,qBAAqB,CAAC,eAAe,EAAEnT,MAAM,EAAG,MAAM2M,KAAK,CAAC9C,MAAM,CAACxK,MAAM,CAACQ,GAAG,EAAEG,MAAM,CAAC8T,OAAO,CAAC,CAAClJ,IAAI,CAAE,CAACrK,IAAI,EAAEV,GAAG,KAAK;YAChI,IAAIU,IAAI,IAAI9I,QAAQ,CAAC8I,IAAI,CAAC,IAAIA,IAAI,KAAKP,MAAM,CAAC8T,OAAO,EAAE;cACnDL,UAAU,CAAClT,IAAI,GAAGA,IAAI;YAC1B;YACAiT,WAAW,CAACI,IAAI,CAAC;cACbtU,IAAI,EAAE,QAAQ;cACdO,GAAG,EAAEA,GAAG;cACRU,IAAI,EAAEA;YACV,CAAC,CAAC;UACN,CAAE,CAAE,CAAC;MACb;MACApB,OAAO,CAACqF,KAAK,CAAC,GAAGiP,UAAU;MAC3B,IAAI9I,QAAQ,EAAE;QACV,MAAMoJ,YAAY,GAAG,IAAIhd,QAAQ,CAAD,CAAC;QACjC4T,QAAQ,CAACqJ,MAAM,CAAEzT,IAAI,IAAI;UACrBgT,OAAO,CAACK,IAAI,CAAC;YACT/T,GAAG,EAAER,MAAM,CAACQ,GAAG;YACf6B,MAAM,EAAEnB;UACZ,CAAC,CAAC;QACN,CAAE,CAAC,CAACyT,MAAM,CAACD,YAAY,CAAClJ,OAAO,CAAC;QAChCyI,SAAS,CAACM,IAAI,CAACG,YAAY,CAACrJ,OAAO,CAAC,CAAC,CAAC;MAC1C;IACJ,CAAE,CAAC;EACP;EACAuJ,qBAAqBA,CAAC9U,OAAO,EAAEsB,SAAS,EAAE;IACtC,MAAMpB,MAAM,GAAGF,OAAO,CAACsB,SAAS,CAAC;IACjC,IAAI,CAAC,IAAI,KAAKpB,MAAM,IAAI,KAAK,CAAC,KAAKA,MAAM,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACC,IAAI,MAAM9G,0BAA0B,EAAE;MAC9F,IAAIiI,SAAS,IAAI,CAAC,EAAE;QAChBtB,OAAO,CAACqE,MAAM,CAAC/C,SAAS,EAAE,CAAC,CAAC;MAChC;IACJ;IACA,OAAO,IAAI;EACf;EACAyT,cAAcA,CAAC/U,OAAO,EAAEsB,SAAS,EAAEmO,MAAM,EAAE;IACvC,MAAMvP,MAAM,GAAGF,OAAO,CAACsB,SAAS,CAAC;IACjC,IAAI,CAACmO,MAAM,IAAI,CAACvP,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAK9G,0BAA0B,EAAE;MAClE,OAAO,IAAI,CAAC2b,kBAAkB,CAAChV,OAAO,EAAEsB,SAAS,EAAE,CAACmO,MAAM,IAAI,CAACvP,MAAM,CAAC;IAC1E;EACJ;EACA8U,kBAAkBA,CAAChV,OAAO,EAAEsB,SAAS,EAAE2T,cAAc,EAAE;IACnD,IAAI3T,SAAS,IAAI,CAAC,EAAE;MAChBtB,OAAO,CAACqE,MAAM,CAAC/C,SAAS,EAAE,CAAC,CAAC;IAChC;IACA,OAAO,IAAI;EACf;EACA4T,0BAA0BA,CAACd,OAAO,EAAE;IAChC,IAAIe,YAAY,GAAG,KAAK;IACxB,MAAMC,eAAe,GAAG,IAAI,CAACtV,UAAU,CAAC,CAAC;IACzC,MAAME,OAAO,GAAG,CAAC,GAAGoV,eAAe,CAAC;IACpC,MAAMC,aAAa,GAAGrV,OAAO,CAACI,MAAM;IACpC,KAAK,IAAIyF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuO,OAAO,CAAChU,MAAM,EAAEyF,CAAC,EAAE,EAAE;MACrC,MAAMjE,GAAG,GAAGwS,OAAO,CAACvO,CAAC,CAAC,CAACtD,MAAM;MAC7B,MAAMkN,MAAM,GAAG,QAAQ,KAAK7N,GAAG;MAC/B,MAAMN,SAAS,GAAG1I,aAAa,CAAC2I,aAAa,CAAC6S,OAAO,CAACvO,CAAC,CAAC,CAACnF,GAAG,EAAEV,OAAO,CAAC;MACtE,MAAME,MAAM,GAAGF,OAAO,CAACsB,SAAS,CAAC;MACjC,MAAMgU,OAAO,GAAG1T,GAAG,IAAIA,GAAG,YAAY2T,KAAK;MAC3C,IAAID,OAAO,EAAE;QACT,IAAIpV,MAAM,EAAE;UACR,IAAI,CAACU,gBAAgB,CAAC;YAClBF,GAAG,EAAER,MAAM,CAACQ,GAAG;YACf8U,KAAK,EAAE5T;UACX,CAAC,CAAC;QACN;QACA,IAAI,CAACD,sBAAsB,CAACC,GAAG,CAAC;QAChC,IAAI,IAAI,CAACkT,qBAAqB,CAAC9U,OAAO,EAAEsB,SAAS,CAAC,EAAE;UAChD;QACJ;MACJ,CAAC,MAAM,IAAI,IAAI,CAACyT,cAAc,CAAC/U,OAAO,EAAEsB,SAAS,EAAEmO,MAAM,CAAC,EAAE;QACxD0F,YAAY,GAAG,CAAC1F,MAAM;QACtB,MAAMgG,kBAAkB,GAAG7c,aAAa,CAAC2I,aAAa,CAAC6S,OAAO,CAACvO,CAAC,CAAC,CAACnF,GAAG,EAAE0U,eAAe,CAAC;QACvF,IAAI,CAAC3D,8BAA8B,CAAC2D,eAAe,EAAEK,kBAAkB,CAAC;MAC5E;IACJ;IACA,IAAIzV,OAAO,CAACI,MAAM,GAAGiV,aAAa,EAAE;MAChC,IAAI,CAAC9U,aAAa,CAACxG,2BAA2B,EAAEiG,OAAO,CAAC;IAC5D;IACA,OAAOmV,YAAY;EACvB;EACAO,uBAAuBA,CAAC1V,OAAO,EAAE;IAC7B/H,IAAI,CAAC+H,OAAO,EAAG,CAAC2V,CAAC,EAAEC,IAAI,KAAK;MACxB,IAAI;QACAxU,IAAI,EAAEA,IAAI;QACVV,GAAG,EAAEA,GAAG;QACRP,IAAI,EAAEA;MACV,CAAC,GAAGyV,IAAI;MACR,MAAM9U,YAAY,GAAG,IAAI,CAACF,gBAAgB,CAAC;QACvCF,GAAG,EAAEA;MACT,CAAC,CAAC;MACF,MAAMG,MAAM,GAAG;QACXH,GAAG,EAAEA,GAAG;QACRU,IAAI,EAAEA;MACV,CAAC;MACD,IAAIN,YAAY,CAAC0U,KAAK,EAAE;QACpB3U,MAAM,CAAC2U,KAAK,GAAG1U,YAAY,CAAC0U,KAAK;MACrC;MACA,QAAQrV,IAAI;QACR,KAAK9G,0BAA0B;UAC3B,IAAI,CAACiS,aAAa,CAAC,cAAc,EAAEvT,MAAM,CAAC,CAAC,CAAC,EAAE8I,MAAM,EAAE;YAClDO,IAAI,EAAEN,YAAY,CAACI;UACvB,CAAC,CAAC,CAAC;UACH;QACJ,KAAK9H,0BAA0B;UAC3B,IAAI,CAACkS,aAAa,CAAC,eAAe,EAAEzK,MAAM,CAAC;UAC3C;QACJ,KAAKvH,0BAA0B;UAC3B,IAAI,CAACgS,aAAa,CAAC,cAAc,EAAEzK,MAAM,CAAC;MAClD;IACJ,CAAE,CAAC;IACH,IAAI,CAACyK,aAAa,CAAC,SAAS,EAAE;MAC1BtL,OAAO,EAAEA;IACb,CAAC,CAAC;EACN;EACAoR,YAAYA,CAAA,EAAG;IACX,MAAM5F,QAAQ,GAAG,IAAI5T,QAAQ,CAAD,CAAC;IAC7B,IAAI,CAACka,yBAAyB,CAAC,CAAC,CAACrG,IAAI,CAAE,MAAM;MACzC,IAAI,IAAI,CAACoK,QAAQ,CAAC,CAAC,EAAE;QACjB,IAAI,CAACC,iBAAiB,CAACtK,QAAQ,CAAC;QAChC;MACJ;MACA1T,IAAI,CAAC,IAAI,CAACyc,mBAAmB,CAAC,CAAC,CAAC,CAAC9I,IAAI,CAAEgE,MAAM,IAAI;QAC7C,IAAIA,MAAM,EAAE;UACR,IAAI,CAACqG,iBAAiB,CAACtK,QAAQ,EAAE;YAC7BiE,MAAM,EAAEA;UACZ,CAAC,CAAC;UACF;QACJ;QACA,IAAI,CAACsG,OAAO,GAAG,IAAI;QACnB,IAAI,CAACC,kBAAkB,CAAC,CAAC,CAACnB,MAAM,CAAE,MAAM;UACpC,IAAI,CAACkB,OAAO,GAAG,KAAK;UACpB,IAAI,IAAI,CAACpN,gBAAgB,EAAE;YACvB,IAAI,CAACC,iBAAiB,CAAC,CAAC;UAC5B;QACJ,CAAE,CAAC,CAAC6C,IAAI,CAACD,QAAQ,CAACE,OAAO,CAAC,CAACC,IAAI,CAACH,QAAQ,CAACnO,MAAM,CAAC;MACpD,CAAE,CAAC,CAACsO,IAAI,CAACH,QAAQ,CAACnO,MAAM,CAAC;IAC7B,CAAE,CAAC,CAACsO,IAAI,CAACH,QAAQ,CAACnO,MAAM,CAAC;IACzB,OAAOmO,QAAQ,CAACD,OAAO,CAAC,CAAC;EAC7B;EACAuK,iBAAiBA,CAACtK,QAAQ,EAAE;IACxB,IAAI;MACAiE,MAAM,EAAEA,MAAM;MACd+F,KAAK,EAAEA;IACX,CAAC,GAAGnN,SAAS,CAACjI,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAKiI,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvEvQ,IAAI,CAAC,IAAI,CAACme,kBAAkB,CAACxG,MAAM,CAAC,CAAC,CAAChE,IAAI,CAAE,MAAM;MAC9CD,QAAQ,CAACE,OAAO,CAAC8J,KAAK,CAAC;IAC3B,CAAE,CAAC,CAAC7J,IAAI,CAACH,QAAQ,CAACnO,MAAM,CAAC;EAC7B;EACA2Y,kBAAkBA,CAAA,EAAG;IACjB,MAAMzT,MAAM,GAAG,IAAI3K,QAAQ,CAAD,CAAC;IAC3B,MAAMwc,OAAO,GAAG,EAAE;IAClB,MAAMD,SAAS,GAAG,EAAE;IACpB,MAAME,WAAW,GAAG,EAAE;IACtB,MAAM6B,UAAU,GAAG,IAAI,CAAC7Z,eAAe,CAAC6Z,UAAU,CAAC,CAAC;IACpDpe,IAAI,CAAC,IAAI,CAACgc,aAAa,CAAC,CAAC,CAAC,CAACrI,IAAI,CAAE0K,KAAK,IAAI;MACtC,IAAI;QACA1G,MAAM,EAAEA,MAAM;QACdzP,OAAO,EAAEA;MACb,CAAC,GAAGmW,KAAK;MACT,IAAI1G,MAAM,EAAE;QACR,OAAOlN,MAAM,CAACmJ,OAAO,CAAC,CAAC,CAACH,OAAO,CAAC,CAAC;MACrC;MACA,IAAI,CAAC2I,eAAe,CAACC,SAAS,EAAEC,OAAO,EAAEC,WAAW,EAAErU,OAAO,CAAC;MAC9D,IAAImU,SAAS,CAAC/T,MAAM,EAAE;QAClB,IAAI,CAACuI,gBAAgB,GAAG,IAAI;QAC5B,IAAI,KAAKuN,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAIA,UAAU,CAACE,YAAY,CAAC,CAAC;QACzEte,IAAI,CAAC,GAAGqc,SAAS,CAAC,CAAC1I,IAAI,CAAE,MAAM;UAC3B,IAAI,IAAI,CAACyJ,0BAA0B,CAACd,OAAO,CAAC,EAAE;YAC1C,IAAI,CAACiC,UAAU,CAAChC,WAAW,EAAErU,OAAO,EAAEuC,MAAM,CAAC;UACjD,CAAC,MAAM;YACH,IAAI,KAAK2T,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAIA,UAAU,CAACI,UAAU,CAAC,CAAC;YACvE/T,MAAM,CAACmJ,OAAO,CAAC,CAAC;UACpB;QACJ,CAAE,CAAC,CAACC,IAAI,CAAE6J,KAAK,IAAI;UACf,IAAI,KAAKU,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAIA,UAAU,CAACI,UAAU,CAAC,CAAC;UACvE/T,MAAM,CAACmJ,OAAO,CAAC8J,KAAK,CAAC;QACzB,CAAE,CAAC;QACH,OAAOjT,MAAM,CAACsS,MAAM,CAAE,MAAM;UACxB,IAAI,CAAClM,gBAAgB,GAAG,IAAI;QAChC,CAAE,CAAC,CAAC4C,OAAO,CAAC,CAAC;MACjB;MACA,IAAI,CAACgL,aAAa,CAAChU,MAAM,CAAC;IAC9B,CAAE,CAAC,CAACoJ,IAAI,CAACpJ,MAAM,CAAClF,MAAM,CAAC;IACvB,OAAOkF,MAAM,CAACgJ,OAAO,CAAC,CAAC;EAC3B;EACAiL,gBAAgBA,CAACxW,OAAO,EAAE;IACtB,IAAI,CAACuQ,iBAAiB,CAAC,CAAC;EAC5B;EACA8F,UAAUA,CAAChC,WAAW,EAAErU,OAAO,EAAEwL,QAAQ,EAAE;IACvC,MAAM0K,UAAU,GAAG,IAAI,CAAC7Z,eAAe,CAAC6Z,UAAU,CAAC,CAAC;IACpD,IAAI,CAACM,gBAAgB,CAACxW,OAAO,CAAC;IAC9B,IAAI,KAAKkW,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAIA,UAAU,CAACI,UAAU,CAAC,CAAC;IACvE,IAAI,CAACG,qBAAqB,CAACpC,WAAW,EAAErU,OAAO,EAAEwL,QAAQ,CAAC;EAC9D;EACA+K,aAAaA,CAAChU,MAAM,EAAE;IAClB,IAAI,CAAC+I,aAAa,CAAC,SAAS,EAAE;MAC1BtL,OAAO,EAAE;IACb,CAAC,CAAC;IACF,IAAI,CAAC8V,iBAAiB,CAACvT,MAAM,CAAC;EAClC;EACAkU,qBAAqBA,CAACpC,WAAW,EAAErU,OAAO,EAAEwL,QAAQ,EAAE;IAClD,MAAMjE,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,MAAMqa,WAAW,GAAG,IAAI,CAACpY,MAAM,CAAC,qBAAqB,CAAC;IACtD,MAAMqY,aAAa,GAAG,SAAS,KAAKD,WAAW,IAAI,SAAS,KAAKA,WAAW;IAC5E,IAAI,CAACC,aAAa,EAAE;MAChBpP,cAAc,CAACkN,IAAI,CAACJ,WAAW,CAAC;IACpC;IACAvc,IAAI,CAACyP,cAAc,CAACU,OAAO,CAAC;MACxB2O,SAAS,EAAED,aAAa;MACxBE,MAAM,EAAEF,aAAa;MACrBG,IAAI,EAAE,SAAS,KAAKJ,WAAW;MAC/BK,WAAW,EAAE,IAAI,CAACzY,MAAM,CAAC,oBAAoB;IACjD,CAAC,CAAC,CAAC,CAACuW,MAAM,CAAE,MAAM;MACd,IAAI,CAACa,uBAAuB,CAAC1V,OAAO,CAAC;IACzC,CAAE,CAAC,CAACyL,IAAI,CAAE,MAAM;MACZ,IAAI,CAACqK,iBAAiB,CAACtK,QAAQ,CAAC;IACpC,CAAE,CAAC,CAACG,IAAI,CAAE6J,KAAK,IAAI;MACf,IAAI,CAACM,iBAAiB,CAACtK,QAAQ,EAAE;QAC7BgK,KAAK,EAAEA;MACX,CAAC,CAAC;IACN,CAAE,CAAC;EACP;EACAK,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACE,OAAO;EACvB;EACAjY,iBAAiBA,CAAA,EAAG;IAChB,MAAMkZ,mBAAmB,GAAG,IAAI,CAACC,oBAAoB,CAAC,CAAC;IACvD,MAAMC,QAAQ,GAAG,IAAI,CAAC5Y,MAAM,CAAC,kBAAkB,CAAC;IAChD,MAAMkF,QAAQ,GAAGtK,kBAAkB,IAAIge,QAAQ,GAAG,IAAI/d,6BAA6B,EAAE,GAAG,EAAE,CAAC;IAC3F,IAAI,CAACgD,kBAAkB,CAACgb,gBAAgB,CAAC;MACrChX,IAAI,EAAE,SAAS;MACfiX,OAAO,EAAE,MAAM;MACfzU,OAAO,EAAEqU,mBAAmB;MAC5BxT,QAAQ,EAAEA,QAAQ;MAClBpE,KAAK,EAAE,MAAM;MACbiY,SAAS,EAAE,QAAQ;MACnBC,YAAY,EAAE,IAAI,CAAC7S,2BAA2B,CAAC,CAAC;MAChD8S,aAAa,EAAE;IACnB,CAAC,CAAC;IACF,IAAI,CAACpb,kBAAkB,CAACqb,YAAY,CAAC,cAAc,EAAE;MACjD7U,OAAO,EAAEqU,mBAAmB;MAC5BxT,QAAQ,EAAEA;IACd,CAAC,CAAC;EACN;EACAyT,oBAAoBA,CAAA,EAAG;IACnB,MAAM7T,cAAc,GAAG,IAAI,CAAC9E,MAAM,CAAC,SAAS,CAAC;IAC7C,OAAO8E,cAAc,CAACZ,aAAa;EACvC;EACAiV,qBAAqBA,CAAA,EAAG;IACpB,MAAM7R,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC,CAAC;IACpC,MAAM8R,gBAAgB,GAAGvf,SAAS,CAAC,IAAI,CAACmG,MAAM,CAAC,oBAAoB,CAAC,CAAC;IACrE,OAAO,EAAEoZ,gBAAgB,IAAI9R,UAAU,CAAC;EAC5C;EACA7H,kBAAkBA,CAAA,EAAG;IACjB,MAAM4Z,gBAAgB,GAAG,IAAI,CAACF,qBAAqB,CAAC,CAAC;IACrD,IAAI,IAAI,CAAC1a,gBAAgB,EAAE;MACvB,IAAI,CAACA,gBAAgB,CAAC6a,sBAAsB,CAAC,YAAY,EAAED,gBAAgB,CAAC;MAC5E,IAAI,CAAC5a,gBAAgB,CAAC6a,sBAAsB,CAAC,cAAc,EAAED,gBAAgB,CAAC;IAClF;EACJ;EACAE,cAAcA,CAACC,QAAQ,EAAEnZ,OAAO,EAAE;IAC9BmZ,QAAQ,IAAIA,QAAQ,CAACC,QAAQ,CAAC9e,aAAa,CAAC;EAChD;EACA+e,+BAA+BA,CAACpJ,UAAU,EAAE,CAAC;EAC7CtH,cAAcA,CAAA,EAAG;IACb,MAAMtH,OAAO,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC;IACjC,MAAMe,MAAM,GAAG;MACX4O,MAAM,EAAE,KAAK;MACbzP,OAAO,EAAEA;IACb,CAAC;IACD,IAAI,CAACsL,aAAa,CAAC,iBAAiB,EAAEzK,MAAM,CAAC;IAC7C,IAAI,CAACA,MAAM,CAAC4O,MAAM,EAAE;MAChB,IAAI,CAACwI,mBAAmB,CAAC,CAAC;MAC1B,IAAI,CAAC3M,aAAa,CAAC,gBAAgB,EAAE;QACjCtL,OAAO,EAAEA;MACb,CAAC,CAAC;IACN;EACJ;EACAiY,mBAAmBA,CAAA,EAAG;IAClB,MAAMlU,QAAQ,GAAG,IAAI,CAACkF,uBAAuB,CAAC,CAAC;IAC/C,IAAI,CAACiP,qBAAqB,CAAC,CAAC;IAC5B,IAAI,CAAChc,IAAI,CAAC,CAAC;IACX,IAAI,CAACmE,YAAY,CAAC,CAAC;IACnB,IAAI,CAAC0G,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACmR,oBAAoB,CAACpU,QAAQ,CAAC;EACvC;EACAoU,oBAAoBA,CAACpU,QAAQ,EAAE;IAC3B,MAAMwD,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3CkL,cAAc,CAACK,WAAW,CAAC;MACvBC,kBAAkB,EAAE,IAAI,CAACvJ,MAAM,CAAC,oBAAoB;IACxD,CAAC,CAAC;EACN;EACA8Z,cAAcA,CAAA,EAAG,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACzS,UAAU,CAAC,CAAC;EAC5B;EACA8E,MAAMA,CAACD,UAAU,EAAE;IACf,MAAMlD,cAAc,GAAG,IAAI,CAAClL,eAAe;IAC3C,IAAIkL,cAAc,IAAI,IAAI,CAACW,UAAU,KAAKX,cAAc,CAAC8C,SAAS,CAAC,CAAC,EAAE;MAClE,IAAI,SAAS,KAAKI,UAAU,EAAE;QAC1B,IAAI,CAACxC,OAAO,CAAC;UACTqQ,aAAa,EAAE;QACnB,CAAC,CAAC;MACN;MACA,IAAI,CAACpQ,UAAU,GAAGX,cAAc,CAAC8C,SAAS,CAAC,CAAC;IAChD;IACA,IAAI,CAACtM,kBAAkB,CAAC,CAAC;EAC7B;EACAwa,gCAAgCA,CAACrZ,GAAG,EAAEsZ,cAAc,EAAE;IAClD,OAAOA,cAAc,GAAG,EAAE,GAAG,CAACtZ,GAAG,CAAC6E,QAAQ,CAAC;EAC/C;EACA0U,WAAWA,CAACjN,QAAQ,EAAE;IAClB,IAAI,CAAC,IAAI,CAACtO,UAAU,CAACqB,QAAQ,CAACiN,QAAQ,CAAC,EAAE;MACrC,IAAI,CAACtO,UAAU,CAACuX,IAAI,CAACjJ,QAAQ,CAAC;MAC9BA,QAAQ,CAACqJ,MAAM,CAAE,MAAM;QACnB,MAAMxP,KAAK,GAAG,IAAI,CAACnI,UAAU,CAACwb,OAAO,CAAClN,QAAQ,CAAC;QAC/C,IAAInG,KAAK,IAAI,CAAC,EAAE;UACZ,IAAI,CAACnI,UAAU,CAACmH,MAAM,CAACgB,KAAK,EAAE,CAAC,CAAC;QACpC;MACJ,CAAE,CAAC;IACP;EACJ;EACAsT,cAAcA,CAACha,OAAO,EAAEK,KAAK,EAAEuE,IAAI,EAAE;IACjC,IAAIqV,YAAY;IAChB,MAAMjE,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMzT,OAAO,GAAG,IAAI,MAAM0X,YAAY,GAAGja,OAAO,CAACO,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK0Z,YAAY,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACxX,IAAI;IAC7G,MAAMyX,MAAM,GAAGla,OAAO,CAAC+B,GAAG;IAC1B,MAAM8K,QAAQ,GAAG,IAAI5T,QAAQ,CAAD,CAAC;IAC7B,IAAI,KAAK,CAAC,KAAKihB,MAAM,EAAE;MACnBla,OAAO,CAACK,KAAK,GAAGA,KAAK;MACrB,MAAM8Z,kBAAkB,GAAGjhB,WAAW,CAAC8G,OAAO,CAACI,MAAM,CAACga,YAAY,CAACpE,OAAO,EAAE3V,KAAK,EAAEjH,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,EAAEmJ,OAAO,CAAC,EAAEqC,IAAI,CAAC,CAAC;MACpHuV,kBAAkB,CAACrN,IAAI,CAAE,MAAM;QAC3BD,QAAQ,CAACE,OAAO,CAAC;UACbtK,IAAI,EAAEuT,OAAO;UACbjU,GAAG,EAAEmY,MAAM;UACX3X,OAAO,EAAEA,OAAO;UAChBf,IAAI,EAAE7G;QACV,CAAC,CAAC;MACN,CAAE,CAAC,CAACqS,IAAI,CAAClQ,oBAAoB,CAAC+P,QAAQ,CAAC,CAAC,CAACG,IAAI,CAAE/J,GAAG,IAAI,IAAI,CAACD,sBAAsB,CAACC,GAAG,CAAE,CAAC;MACxF,IAAIzJ,SAAS,CAACoL,IAAI,CAAC,IAAI5E,OAAO,CAACI,MAAM,CAACia,eAAe,EAAE;QACnDra,OAAO,CAACI,MAAM,CAACia,eAAe,CAACha,KAAK,CAAC,GAAGuE,IAAI;MAChD;MACA,IAAI,CAAC0V,gBAAgB,CAACta,OAAO,CAAC;MAC9B,IAAI,CAAC8Z,WAAW,CAACjN,QAAQ,CAAC;IAC9B;IACA,OAAOA,QAAQ;EACnB;EACAyN,gBAAgBA,CAACta,OAAO,EAAE;IACtB,IAAIA,OAAO,CAACua,MAAM,EAAE;MAChB,MAAM3R,cAAc,GAAG,IAAI,CAAClL,eAAe;MAC3C,MAAM0H,QAAQ,GAAGwD,cAAc,CAACzB,gBAAgB,CAACnH,OAAO,CAAC+B,GAAG,CAAC;MAC7D,MAAMxB,GAAG,GAAGqI,cAAc,CAACsF,cAAc,CAAC,CAAC,CAAC9I,QAAQ,CAAC;MACrD,IAAI7E,GAAG,EAAE;QACLP,OAAO,CAACO,GAAG,CAACga,MAAM,GAAGha,GAAG,CAACga,MAAM;QAC/Bva,OAAO,CAACua,MAAM,GAAGha,GAAG,CAACga,MAAM;MAC/B;MACAva,OAAO,CAACua,MAAM,CAACva,OAAO,CAACuG,WAAW,CAAC,GAAGvG,OAAO,CAACK,KAAK;IACvD;EACJ;EACAma,gBAAgBA,CAACxa,OAAO,EAAEK,KAAK,EAAEuE,IAAI,EAAE6V,cAAc,EAAE;IACnD,MAAMP,MAAM,GAAGla,OAAO,CAAC+B,GAAG;IAC1B,MAAM8K,QAAQ,GAAG,IAAI5T,QAAQ,CAAD,CAAC;IAC7B,IAAI,KAAK,CAAC,KAAKihB,MAAM,EAAE;MACnB,IAAI,CAACxc,eAAe,CAAC0M,SAAS,CAAC,OAAO,CAAC;IAC3C;IACA,IAAIpK,OAAO,CAACI,MAAM,CAACga,YAAY,EAAE;MAC7B,IAAI,CAACJ,cAAc,CAACha,OAAO,EAAEK,KAAK,EAAEuE,IAAI,CAAC,CAACkI,IAAI,CAAE5K,MAAM,IAAI;QACtD/I,IAAI,CAAC,IAAI,CAACuhB,YAAY,CAAC1a,OAAO,EAAEkC,MAAM,EAAEuY,cAAc,CAAC,CAAC,CAACvE,MAAM,CAAE,MAAM;UACnErJ,QAAQ,CAACE,OAAO,CAAC,CAAC;QACtB,CAAE,CAAC;MACP,CAAE,CAAC;IACP,CAAC,MAAM;MACHF,QAAQ,CAACE,OAAO,CAAC,CAAC;IACtB;IACA,OAAOF,QAAQ,CAACD,OAAO,CAAC,CAAC;EAC7B;EACA+N,+BAA+BA,CAAC3a,OAAO,EAAE;IACrC,IAAI,IAAI,CAAC0Z,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAChP,UAAU,CAAC1K,OAAO,CAACoF,QAAQ,EAAEpF,OAAO,CAACuG,WAAW,CAAC,EAAE;MAC/E,IAAI,CAAC0D,iBAAiB,CAAC,CAAC;MACxB,IAAI,CAAC2Q,cAAc,CAAC5a,OAAO,CAACO,GAAG,EAAE,IAAI,CAAC;MACtC,OAAO,IAAI;IACf;EACJ;EACAsa,cAAcA,CAACza,MAAM,EAAE;IACnB,MAAMoG,cAAc,GAAG,IAAI,CAAChJ,kBAAkB,CAACiJ,iBAAiB,CAAC,CAAC;IAClE,IAAI,CAACrG,MAAM,EAAE;MACTA,MAAM,GAAG,IAAI,CAACiR,cAAc,CAAC,CAAC;IAClC;IACA,MAAMyJ,oBAAoB,GAAG1a,MAAM,IAAIA,MAAM,CAACga,YAAY,KAAKha,MAAM,CAAC2a,mBAAmB;IACzF,MAAMC,0BAA0B,GAAGxU,cAAc,CAACyE,IAAI,CAAEgQ,aAAa,IAAIA,aAAa,CAACC,kBAAkB,KAAKD,aAAa,CAACE,yBAA0B,CAAC;IACvJ,OAAOL,oBAAoB,IAAIE,0BAA0B;EAC7D;EACAN,YAAYA,CAAC1a,OAAO,EAAEkC,MAAM,EAAEuY,cAAc,EAAE;IAC1C,MAAMW,aAAa,GAAGljB,QAAQ,CAAC,CAAC,CAAC,EAAE8H,OAAO,EAAE;MACxCya,cAAc,EAAEA;IACpB,CAAC,CAAC;IACF,IAAI,CAAC9K,UAAU,CAACzN,MAAM,EAAEkZ,aAAa,CAAC;IACtC,IAAI,CAAChc,kBAAkB,CAAC,CAAC;IACzB,OAAO,IAAI,CAACic,gBAAgB,CAACrb,OAAO,EAAEob,aAAa,CAACX,cAAc,CAAC;EACvE;EACAY,gBAAgBA,CAACrb,OAAO,EAAEya,cAAc,EAAE;IACtC,MAAMK,oBAAoB,GAAG9a,OAAO,CAACI,MAAM,CAACga,YAAY,KAAKpa,OAAO,CAACI,MAAM,CAAC2a,mBAAmB;IAC/F,MAAM;MACFxa,GAAG,EAAEA;IACT,CAAC,GAAGP,OAAO;IACX,IAAIO,GAAG,EAAE;MACL,IAAIka,cAAc,IAAIK,oBAAoB,EAAE;QACxC,IAAI,CAACF,cAAc,CAACra,GAAG,EAAEka,cAAc,EAAEK,oBAAoB,CAAC;MAClE,CAAC,MAAM,IAAIva,GAAG,CAACwL,MAAM,EAAE;QACnBxL,GAAG,CAACwL,MAAM,CAAC,CAAC;MAChB;IACJ;EACJ;EACAuP,kBAAkBA,CAAC/a,GAAG,EAAEsZ,cAAc,EAAEiB,oBAAoB,EAAE;IAC1D,IAAI,CAACpd,eAAe,CAACuL,WAAW,CAAC;MAC7B6C,UAAU,EAAE,QAAQ;MACpBmE,UAAU,EAAE,IAAI,CAAC2J,gCAAgC,CAACrZ,GAAG,EAAEsZ,cAAc;IACzE,CAAC,CAAC;EACN;EACAe,cAAcA,CAACra,GAAG,EAAEka,cAAc,EAAEK,oBAAoB,EAAE;IACtD,IAAIL,cAAc,EAAE;MAChB,IAAI,CAACc,qBAAqB,CAAChb,GAAG,EAAEka,cAAc,EAAEK,oBAAoB,CAAC;IACzE,CAAC,MAAM;MACH,IAAI,CAACU,mBAAmB,CAACjb,GAAG,EAAEua,oBAAoB,CAAC;IACvD;EACJ;EACAS,qBAAqBA,CAAChb,GAAG,EAAEka,cAAc,EAAEK,oBAAoB,EAAE;IAC7D,IAAI,CAACQ,kBAAkB,CAAC/a,GAAG,EAAE,CAACka,cAAc,EAAEK,oBAAoB,CAAC;IACnE,IAAI,CAACW,4BAA4B,CAAClb,GAAG,EAAEua,oBAAoB,CAAC;IAC5D,IAAI,CAACL,cAAc,EAAE;MACjB,IAAI,CAACxQ,iBAAiB,CAAC,CAAC;IAC5B;EACJ;EACAuR,mBAAmBA,CAACjb,GAAG,EAAEua,oBAAoB,EAAE;IAC3C,MAAMjO,QAAQ,GAAG,IAAI5T,QAAQ,CAAD,CAAC;IAC7B,IAAI,CAAC6gB,WAAW,CAACjN,QAAQ,CAAC;IAC1B1H,UAAU,CAAE,MAAM;MACd,IAAIuW,eAAe;MACnB,MAAMC,gBAAgB,GAAG,CAAC,IAAI,MAAMD,eAAe,GAAG,IAAI,CAACE,SAAS,CAAC,IAAI,KAAK,CAAC,KAAKF,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACG,OAAO,CAAC,CAAC,KAAK,IAAI,CAACtc,SAAS,CAAC4Z,QAAQ,CAAC,CAAC,CAACnX,GAAG,CAAC,CAAC,CAAC;MAC7K,MAAM8Z,eAAe,GAAGhjB,CAAC,CAACF,UAAU,CAACmjB,gBAAgB,CAACJ,gBAAgB,CAAC,CAAC;MACxE,MAAMpV,WAAW,GAAG,IAAI,CAACrI,SAAS,CAAC8d,YAAY,CAACF,eAAe,EAAEvb,GAAG,CAAC6E,QAAQ,CAAC;MAC9E,IAAI6W,cAAc,GAAGH,eAAe,CAAC9Z,GAAG,CAAC,CAAC,CAAC;MAC3C,MAAMka,cAAc,GAAGjiB,aAAa,CAACkiB,iBAAiB,CAACF,cAAc,CAAC;MACtE,IAAI,CAACX,kBAAkB,CAAC/a,GAAG,EAAE,KAAK,EAAEua,oBAAoB,CAAC;MACzD,IAAI,CAACW,4BAA4B,CAAClb,GAAG,EAAEua,oBAAoB,CAAC;MAC5D,IAAIvU,WAAW,IAAI,CAAC,EAAE;QAClB,MAAM6V,YAAY,GAAG,IAAI,CAACle,SAAS,CAAC4I,eAAe,CAACvG,GAAG,CAAC6E,QAAQ,EAAEmB,WAAW,CAAC;QAC9E,IAAI,CAACqK,kBAAkB,CAACwL,YAAY,EAAG,MAAM;UACzCjX,UAAU,CAAE,MAAM;YACd,IAAIkX,qBAAqB;YACzBJ,cAAc,GAAGrjB,UAAU,CAACmjB,gBAAgB,CAAC,IAAI,MAAMM,qBAAqB,GAAG,IAAI,CAAC9c,SAAS,CAAC4Z,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKkD,qBAAqB,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACra,GAAG,CAAC,CAAC,CAAC,CAAC;YACtL,IAAIka,cAAc,CAACI,cAAc,IAAI,CAAC,EAAE;cACpCriB,aAAa,CAACsiB,iBAAiB,CAACN,cAAc,EAAEC,cAAc,CAAC;YACnE;UACJ,CAAE,CAAC;QACP,CAAE,CAAC;MACP;MACArP,QAAQ,CAACE,OAAO,CAAC,CAAC;IACtB,CAAE,CAAC;EACP;EACA0O,4BAA4BA,CAAA,EAAG,CAAC;EAChC9L,UAAUA,CAAC6M,YAAY,EAAExc,OAAO,EAAE;IAC9B,IAAIyc,gBAAgB;IACpB,MAAMlc,GAAG,GAAG,IAAI,KAAKP,OAAO,IAAI,KAAK,CAAC,KAAKA,OAAO,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACO,GAAG;IACzE,MAAMc,OAAO,GAAG,CAAC,GAAG,IAAI,CAACF,UAAU,CAAC,CAAC,CAAC;IACtC,IAAIuF,KAAK,GAAGzM,aAAa,CAAC2I,aAAa,CAAC4Z,YAAY,CAACza,GAAG,EAAEV,OAAO,CAAC;IAClE,IAAIqF,KAAK,GAAG,CAAC,EAAE;MACXA,KAAK,GAAGrF,OAAO,CAACI,MAAM;MACtB,IAAI,CAACQ,gBAAgB,CAAC;QAClBF,GAAG,EAAEya,YAAY,CAACza,GAAG;QACrBQ,OAAO,EAAEia,YAAY,CAACja;MAC1B,CAAC,CAAC;MACF,OAAOia,YAAY,CAACja,OAAO;MAC3BlB,OAAO,CAACyU,IAAI,CAAC0G,YAAY,CAAC;IAC9B;IACA,MAAMjb,MAAM,GAAGrJ,QAAQ,CAAC,CAAC,CAAC,EAAEmJ,OAAO,CAACqF,KAAK,CAAC,CAAC;IAC3C,IAAInF,MAAM,EAAE;MACR,IAAIib,YAAY,CAAC/Z,IAAI,EAAE;QACnBlB,MAAM,CAACkB,IAAI,GAAG/J,uBAAuB,CAAC6I,MAAM,CAACkB,IAAI,EAAE+Z,YAAY,CAAC/Z,IAAI,CAAC;MACzE;MACA,IAAI,CAAC,CAAClB,MAAM,CAACC,IAAI,IAAI,CAACgb,YAAY,CAAC/Z,IAAI,KAAK+Z,YAAY,CAAChb,IAAI,EAAE;QAC3DD,MAAM,CAACC,IAAI,GAAGgb,YAAY,CAAChb,IAAI;MACnC;MACA,IAAIjB,GAAG,EAAE;QACLA,GAAG,CAACgC,OAAO,GAAG,IAAI,CAACF,WAAW,CAAC9B,GAAG,CAACwB,GAAG,CAAC;QACvCxB,GAAG,CAACkC,IAAI,GAAG/J,uBAAuB,CAAC6H,GAAG,CAACkC,IAAI,EAAE+Z,YAAY,CAAC/Z,IAAI,CAAC;MACnE;IACJ;IACApB,OAAO,CAACqF,KAAK,CAAC,GAAGnF,MAAM;IACvB,IAAI,CAACK,aAAa,CAACxG,2BAA2B,EAAEiG,OAAO,CAAC;IACxD,IAAIrB,OAAO,IAAIuB,MAAM,MAAM,IAAI,MAAMkb,gBAAgB,GAAG,IAAI,CAACtb,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAKsb,gBAAgB,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAAC/V,KAAK,CAAC,CAAC,EAAE;MAC3I1G,OAAO,CAACya,cAAc,GAAG,IAAI;IACjC;IACA,OAAOlZ,MAAM;EACjB;EACAmb,wBAAwBA,CAACC,WAAW,EAAEvc,MAAM,EAAE;IAC1C,OAAOA,MAAM,CAACwc,gBAAgB,IAAI,IAAI,CAAC9c,yBAAyB,CAAC,CAAC;EACtE;EACA+c,iBAAiBA,CAAC7c,OAAO,EAAE;IACvB,MAAM;MACFI,MAAM,EAAEA;IACZ,CAAC,GAAGJ,OAAO;IACX,MAAMoF,QAAQ,GAAGpF,OAAO,CAACO,GAAG,IAAIP,OAAO,CAACO,GAAG,CAAC6E,QAAQ;IACpD,IAAI0X,QAAQ;IACZ,MAAMC,SAAS,GAAG,IAAI,CAAC1W,kBAAkB,CAAC,CAAC;IAC3C,MAAM2W,YAAY,GAAG,IAAI,CAACnT,SAAS,CAACzE,QAAQ,CAAC;IAC7C,MAAM6X,aAAa,GAAG,IAAI,CAACvS,UAAU,CAACtF,QAAQ,EAAEpF,OAAO,CAACuG,WAAW,CAAC;IACpE,IAAI2W,mBAAmB;IACvB,IAAI,CAAC9c,MAAM,CAACoT,gBAAgB,IAAIpT,MAAM,CAACga,YAAY,KAAK4C,YAAY,IAAI5c,MAAM,CAACuG,YAAY,IAAIsW,aAAa,CAAC,MAAM,MAAM,KAAKjd,OAAO,CAAC+F,OAAO,IAAI,gBAAgB,KAAK/F,OAAO,CAAC+F,OAAO,CAAC,IAAI,CAAC3F,MAAM,CAACqY,OAAO,EAAE;MACvM,MAAM0E,aAAa,GAAG,IAAI,CAACA,aAAa,CAACnd,OAAO,CAAC;MACjD,IAAI,CAAC,CAACmd,aAAa,IAAIH,YAAY,KAAK5c,MAAM,CAACuG,YAAY,IAAIsW,aAAa,MAAMD,YAAY,IAAI,CAACD,SAAS,CAAC,EAAE;QAC3G,IAAI3c,MAAM,CAACoT,gBAAgB,IAAI,CAACuJ,SAAS,EAAE;UACvCG,mBAAmB,GAAG;YAClBpM,MAAM,EAAE,KAAK;YACb/O,GAAG,EAAE/B,OAAO,CAACO,GAAG,CAAC+L,QAAQ,GAAG,KAAK,CAAC,GAAGtM,OAAO,CAACO,GAAG,CAACwB,GAAG;YACpDU,IAAI,EAAEzC,OAAO,CAACO,GAAG,CAACkC,IAAI;YACtBrC,MAAM,EAAEA;UACZ,CAAC;UACD,IAAI,CAACyQ,eAAe,CAACqM,mBAAmB,CAAC;QAC7C;QACA,IAAI,CAACA,mBAAmB,IAAI,CAACA,mBAAmB,CAACpM,MAAM,EAAE;UACrD9Q,OAAO,CAACM,QAAQ,GAAG,CAACD,KAAK,EAAEuE,IAAI,KAAK;YAChC,IAAI,CAAC4V,gBAAgB,CAACxa,OAAO,EAAEK,KAAK,EAAEuE,IAAI,CAAC;UAC/C,CAAC;QACL;MACJ;MACAkY,QAAQ,GAAG1c,MAAM,CAACwc,gBAAgB,IAAI,IAAI,CAAC9c,yBAAyB,CAAC,CAAC;IAC1E,CAAC,MAAM,IAAI,QAAQ,KAAKM,MAAM,CAACqY,OAAO,IAAI,QAAQ,KAAKzY,OAAO,CAAC+F,OAAO,IAAIiX,YAAY,EAAE;MACpFF,QAAQ,GAAG,IAAI,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,CAACM,mBAAmB,CAACpd,OAAO,CAAC;IAC5F;IACA,OAAO8c,QAAQ;EACnB;EACAjX,aAAaA,CAACD,UAAU,EAAEjC,MAAM,EAAE3D,OAAO,EAAEuB,MAAM,EAAE;IAC/C,IAAI8b,IAAI,GAAGtiB,eAAe,CAAC4I,MAAM,CAACxL,IAAI,CAAC;IACvC,MAAMogB,QAAQ,GAAG,IAAI,CAAC5Y,MAAM,CAAC,kBAAkB,CAAC;IAChD,MAAM2d,6BAA6B,GAAG,IAAI,CAAC3d,MAAM,CAAC,+BAA+B,CAAC;IAClF,IAAI4d,OAAO,GAAGzkB,CAAC,CAAC,KAAK,CAAC,CAAC0kB,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAACpE,QAAQ,CAACrd,UAAU,CAAC,CAACqd,QAAQ,CAACzV,MAAM,CAACkB,QAAQ,CAAC;IACvF,IAAIlB,MAAM,CAACmZ,QAAQ,IAAIQ,6BAA6B,EAAE;MAClD,IAAI,CAACpf,SAAS,CAACuf,cAAc,CAAC7X,UAAU,EAAEjC,MAAM,CAACmZ,QAAQ,EAAE9c,OAAO,EAAE,IAAI,CAAC;IAC7E,CAAC,MAAM;MACH,IAAI2D,MAAM,CAACmZ,QAAQ,EAAE;QACjBS,OAAO,GAAGzkB,CAAC,CAAC,QAAQ,CAAC,CAACsgB,QAAQ,CAACzV,MAAM,CAACkB,QAAQ,CAAC;MACnD,CAAC,MAAM,IAAI0T,QAAQ,IAAI8E,IAAI,IAAI1Z,MAAM,CAAC0Z,IAAI,EAAE;QACxCA,IAAI,GAAG1Z,MAAM,CAAC0Z,IAAI,IAAIA,IAAI;QAC1B,MAAMK,QAAQ,GAAGrkB,SAAS,CAACskB,kBAAkB,CAACN,IAAI,CAAC;QACnD,IAAI,OAAO,KAAKK,QAAQ,IAAI,KAAK,KAAKA,QAAQ,EAAE;UAC5CH,OAAO,GAAGlkB,SAAS,CAACukB,iBAAiB,CAACP,IAAI,CAAC,CAACjE,QAAQ,CAACzV,MAAM,CAACkB,QAAQ,CAAC;QACzE,CAAC,MAAM;UACH0Y,OAAO,CAACnE,QAAQ,CAAC,UAAU,QAAQ,KAAGsE,QAAQ,GAAC,GAAG,GAAC,GAAG,GAAGL,IAAI,EAAE,CAAC,CAACG,IAAI,CAAC,OAAO,EAAE7Z,MAAM,CAACiB,IAAI,CAAC;QAC/F;QACA2Y,OAAO,CAACnE,QAAQ,CAACpd,eAAe,CAAC;QACjC4J,UAAU,CAACwT,QAAQ,CAAC5e,6BAA6B,CAAC;QAClD,MAAMqjB,gBAAgB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC,CAACna,MAAM,CAACxL,IAAI,CAAC;QACvE0lB,gBAAgB,IAAIN,OAAO,CAACC,IAAI,CAAC,YAAY,EAAE/kB,mBAAmB,CAACslB,MAAM,CAACF,gBAAgB,CAAC,CAAC;MAChG,CAAC,MAAM;QACHN,OAAO,CAAC3Y,IAAI,CAACjB,MAAM,CAACiB,IAAI,CAAC;MAC7B;MACA,IAAIpL,SAAS,CAACmK,MAAM,CAACqa,IAAI,CAAC,EAAE;QACxBT,OAAO,CAACC,IAAI,CAAC,OAAO,EAAE7Z,MAAM,CAACqa,IAAI,CAAC;MACtC;MACA,IAAI,IAAI,CAAC9Z,iBAAiB,CAACP,MAAM,EAAE3D,OAAO,CAAC,EAAE;QACzCud,OAAO,CAACnE,QAAQ,CAAC,mBAAmB,CAAC;MACzC,CAAC,MAAM,IAAI,CAACzV,MAAM,CAACmZ,QAAQ,IAAInZ,MAAM,CAACmB,OAAO,EAAE;QAC3CzM,YAAY,CAAC8N,EAAE,CAACoX,OAAO,EAAE/kB,YAAY,CAAC,OAAO,EAAE+C,iBAAiB,CAAC,EAAE,IAAI,CAAC0D,YAAY,CAAE8F,CAAC,IAAI;UACvF,IAAIkZ,eAAe;UACnB,IAAI,MAAMA,eAAe,GAAGta,MAAM,CAACmB,OAAO,CAAC,IAAI,KAAK,CAAC,KAAKmZ,eAAe,IAAIA,eAAe,CAACha,IAAI,CAACN,MAAM,EAAEvK,MAAM,CAAC,CAAC,CAAC,EAAE2L,CAAC,EAAE;YACpHxE,GAAG,EAAEP,OAAO,CAACO,GAAG;YAChBH,MAAM,EAAEJ,OAAO,CAACI;UACpB,CAAC,CAAC,CAAC;UACH2E,CAAC,CAACC,KAAK,CAACE,cAAc,CAAC,CAAC;UACxBH,CAAC,CAACC,KAAK,CAACC,eAAe,CAAC,CAAC;QAC7B,CAAE,CAAC,CAAC;MACR;MACAW,UAAU,CAACsY,MAAM,CAACX,OAAO,CAAC;MAC1B,IAAI5Z,MAAM,CAACmZ,QAAQ,EAAE;QACjB9c,OAAO,CAACme,WAAW,GAAG,KAAK;QAC3B,IAAI,CAACjgB,SAAS,CAACuf,cAAc,CAACF,OAAO,EAAE5Z,MAAM,CAACmZ,QAAQ,EAAE9c,OAAO,EAAE,IAAI,EAAEuB,MAAM,CAAC;MAClF;IACJ;EACJ;EACAuc,0BAA0BA,CAAA,EAAG;IACzB,OAAO;MACHM,IAAI,EAAE,2BAA2B;MACjCC,IAAI,EAAE,kCAAkC;MACxCxL,MAAM,EAAE,6BAA6B;MACrCyL,QAAQ,EAAE,+BAA+B;MACzCxN,MAAM,EAAE;IACZ,CAAC;EACL;EACAyN,iBAAiBA,CAACC,WAAW,EAAErmB,IAAI,EAAEqM,UAAU,EAAEia,SAAS,EAAE;IACxD,MAAMla,YAAY,GAAG,IAAI,CAAC5E,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvD,MAAM+e,2BAA2B,GAAG;MAChCC,MAAM,EAAEpa,YAAY,CAACqa,gBAAgB;MACrCP,IAAI,EAAE9Z,YAAY,CAACsa,cAAc;MACjCjQ,MAAM,EAAErK,YAAY,CAACqK;IACzB,CAAC;IACD,MAAMkQ,SAAS,GAAG;MACdH,MAAM,EAAE,QAAQ;MAChBN,IAAI,EAAE,MAAM;MACZzP,MAAM,EAAE;IACZ,CAAC,CAAEzW,IAAI,CAAC;IACR,MAAM4mB,QAAQ,GAAGL,2BAA2B,CAACvmB,IAAI,CAAC;IAClD,MAAM6gB,gBAAgB,GAAG,CAAC,MAAM,KAAK8F,SAAS,IAAI,QAAQ,KAAKA,SAAS,KAAK,IAAI,CAAChG,qBAAqB,CAAC,CAAC;IACzG,OAAO;MACHkG,MAAM,EAAE,UAAU;MAClBhf,OAAO,EAAE;QACLif,aAAa,EAAEla,CAAC,IAAI;UAChBjM,CAAC,CAACiM,CAAC,CAAC8W,OAAO,CAAC,CAACzC,QAAQ,CAACoF,WAAW,CAACU,sBAAsB,CAAC,GAAGrkB,iBAAiB,IAAI,IAAI,CAACskB,eAAe,CAACL,SAAS,CAAC,SAAS,CAAC,CAAC;QAC/H,CAAC;QACDzB,IAAI,EAAE,eAAeyB,SAAS,EAAE;QAChC3a,QAAQ,EAAE6U,gBAAgB;QAC1BlU,OAAO,EAAEA,CAAA,KAAM;UACXK,UAAU,CAAE,MAAM;YACd,IAAI,CAACX,UAAU,CAAC,CAAC,CAAC;UACtB,CAAE,CAAC;QACP,CAAC;QACDI,IAAI,EAAEma,QAAQ;QACdf,IAAI,EAAEe;MACV,CAAC;MACDK,QAAQ,EAAE,QAAQ;MAClBjnB,IAAI,EAAE,GAAGA,IAAI,QAAQ;MACrBknB,QAAQ,EAAE,OAAO;MACjBC,YAAY,EAAE,MAAM;MACpBb,SAAS,EAAEA;IACf,CAAC;EACL;EACAc,kBAAkBA,CAACf,WAAW,EAAE;IAC5B,MAAM/Z,cAAc,GAAG,IAAI,CAAC9E,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACnD,MAAM6f,WAAW,GAAG,EAAE;IACtB,IAAI/a,cAAc,CAACgb,WAAW,EAAE;MAC5BD,WAAW,CAAC1J,IAAI,CAAC,IAAI,CAACyI,iBAAiB,CAACC,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;IACjF;IACA,OAAOgB,WAAW;EACtB;EACAE,iBAAiBA,CAAChM,KAAK,EAAExR,MAAM,EAAE;IAC7B,IAAI,CAACyd,mBAAmB,CAACzd,MAAM,CAAC,IAAIwR,KAAK,CAAC0F,QAAQ,CAAC9e,aAAa,CAAC;EACrE;EACA+V,eAAeA,CAACtO,GAAG,EAAE,CAAC;EACtB6T,mBAAmBA,CAACrU,MAAM,EAAE;IACxB,IAAIA,MAAM,IAAI,CAAC/H,SAAS,CAAC+H,MAAM,CAACQ,GAAG,CAAC,IAAIvI,SAAS,CAAC+H,MAAM,CAACC,IAAI,CAAC,EAAE;MAC5D,OAAO,IAAI;IACf;EACJ;EACA8V,kBAAkBA,CAAA,EAAG,CAAC;EACtBiC,qBAAqBA,CAAA,EAAG,CAAC;EACzBqG,gBAAgBA,CAAClb,UAAU,EAAE1E,OAAO,EAAE;IAClC,IAAI6f,eAAe,GAAG,IAAI,CAAClgB,MAAM,CAAC,WAAW+E,UAAU,EAAE,CAAC;IAC1D,IAAIhL,UAAU,CAACmmB,eAAe,CAAC,EAAE;MAC7BA,eAAe,GAAGA,eAAe,CAAC;QAC9BtgB,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBgB,GAAG,EAAEP,OAAO,CAACO;MACjB,CAAC,CAAC;IACN;IACA,OAAOsf,eAAe;EAC1B;EACA1C,aAAaA,CAACnd,OAAO,EAAE8f,SAAS,EAAE;IAC9B,MAAMC,eAAe,GAAG,IAAI,CAACpgB,MAAM,CAAC,yBAAyB,CAAC,IAAI/E,yBAAyB;IAC3F,MAAMolB,YAAY,GAAGtW,SAAS,CAACjI,MAAM,GAAG,CAAC,GAAGse,eAAe,KAAKD,SAAS,IAAI,MAAM,KAAKA,SAAS,GAAG,IAAI;IACxG,OAAOE,YAAY,IAAI,IAAI,CAACJ,gBAAgB,CAAC,eAAe,EAAE5f,OAAO,CAAC;EAC1E;EACA6D,aAAaA,CAAC7D,OAAO,EAAE;IACnB,OAAO,IAAI,CAAC4f,gBAAgB,CAAC,eAAe,EAAE5f,OAAO,CAAC;EAC1D;EACAigB,cAAcA,CAACC,UAAU,EAAE;IACvB,IAAIC,eAAe,EAAEC,gBAAgB;IACrC,MAAM;MACF7Z,WAAW,EAAEA;IACjB,CAAC,GAAG2Z,UAAU;IACd,IAAIG,aAAa,GAAG,IAAI,KAAKH,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAI,IAAI,MAAMC,eAAe,GAAGD,UAAU,CAAC3f,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK4f,eAAe,IAAI,IAAI,MAAMA,eAAe,GAAGA,eAAe,CAAC3T,cAAc,CAAC,IAAI,KAAK,CAAC,KAAK2T,eAAe,GAAG,KAAK,CAAC,GAAGA,eAAe,CAAC5Z,WAAW,CAAC;IAClR,IAAI,IAAI,KAAK2Z,UAAU,IAAI,KAAK,CAAC,KAAKA,UAAU,IAAI,IAAI,MAAME,gBAAgB,GAAGF,UAAU,CAAC3f,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK6f,gBAAgB,IAAIA,gBAAgB,CAAC9T,QAAQ,EAAE;MAC1J+T,aAAa,GAAGH,UAAU,CAAC7f,KAAK;IACpC;IACA,OAAO,KAAK,CAAC,KAAKggB,aAAa;EACnC;EACAC,kBAAkBA,CAAA,EAAG;IACjB,MAAMC,mBAAmB,GAAG,IAAI,CAACjW,uBAAuB,CAAC,CAAC;IAC1D,MAAMkW,IAAI,GAAG,IAAI,CAAC9iB,eAAe,CAACsJ,KAAK,CAAC,CAAC;IACzC,OAAOuZ,mBAAmB,IAAI,CAAC,GAAGC,IAAI,CAACD,mBAAmB,CAAC,CAACjU,QAAQ,GAAG,KAAK;EAChF;EACAmU,mBAAmBA,CAAA,EAAG,CAAC;EACvBd,mBAAmBA,CAACO,UAAU,EAAE;IAC5B,MAAMQ,YAAY,GAAG,IAAI,CAACT,cAAc,CAACC,UAAU,CAAC;IACpD,OAAOQ,YAAY,IAAIR,UAAU,CAAC9f,MAAM,CAACga,YAAY,KAAK,IAAI,CAAC3a,WAAW,CAAC,CAAC,KAAKvE,aAAa,IAAI,CAACglB,UAAU,CAAC3f,GAAG,CAACoJ,SAAS,CAAC;EAChI;AACJ;AACA,OAAO,MAAMgX,kCAAkC,GAAGC,IAAI,IAAI,cAAcA,IAAI,CAAC;EACzE1I,MAAMA,CAAC2I,IAAI,EAAE3X,kBAAkB,EAAE;IAC7B,CAACA,kBAAkB,IAAI,IAAI,CAAC4X,kBAAkB,CAACxX,OAAO,CAAC,CAAC;IACxD,OAAO,KAAK,CAAC4O,MAAM,CAACzO,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC9C;EACAqX,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACD,kBAAkB,CAAC5J,QAAQ,CAAC,CAAC,EAAE;MACpC;IACJ;IACA,OAAO,KAAK,CAAC6J,WAAW,CAACtX,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EACnD;EACAkR,cAAcA,CAAC5T,KAAK,EAAE;IAClB,MAAMyK,UAAU,GAAG,IAAI,CAAC9R,MAAM,CAACrE,8BAA8B,CAAC;IAC9D,MAAMoU,YAAY,GAAGzV,aAAa,CAAC2I,aAAa,CAAC6O,UAAU,EAAEzK,KAAK,CAAC;IACnE,MAAMsH,QAAQ,GAAGtH,KAAK,CAAC0I,YAAY,CAAC;IACpC,IAAIpB,QAAQ,EAAE;MACV,IAAI0S,qBAAqB;MACzB1S,QAAQ,CAAC3E,SAAS,GAAG,IAAI;MACzB,IAAI,MAAMqX,qBAAqB,GAAG,IAAI,CAACC,eAAe,CAAC,IAAI,KAAK,CAAC,KAAKD,qBAAqB,IAAIA,qBAAqB,CAAC/c,IAAI,CAAC,IAAI,EAAEqK,QAAQ,CAAC;IAC7I;EACJ;EACA4S,gBAAgBA,CAAC3f,MAAM,EAAE;IACrB,KAAK,CAAC2f,gBAAgB,CAAC3f,MAAM,CAAC;IAC9B,IAAI,CAACqZ,cAAc,CAAC,IAAI,CAAC5T,KAAK,CAAC,IAAI,CAAC,CAAC;EACzC;EACAma,kBAAkBA,CAAC5f,MAAM,EAAE;IACvB,IAAI,CAACqZ,cAAc,CAACrZ,MAAM,CAACyF,KAAK,CAAC;IACjC,KAAK,CAACma,kBAAkB,CAAC5f,MAAM,CAAC;EACpC;EACA6f,iBAAiBA,CAAC7f,MAAM,EAAE;IACtB,IAAI,CAACqZ,cAAc,CAACrZ,MAAM,CAACyF,KAAK,CAAC;IACjC,KAAK,CAACoa,iBAAiB,CAAC7f,MAAM,CAAC;EACnC;EACA8f,aAAaA,CAACra,KAAK,EAAEzF,MAAM,EAAE;IACzByF,KAAK,GAAG,IAAI,CAAC8Z,kBAAkB,CAACjV,YAAY,CAAC7E,KAAK,EAAEzF,MAAM,CAAC;IAC3D,OAAO,KAAK,CAAC8f,aAAa,CAACra,KAAK,EAAEzF,MAAM,CAAC;EAC7C;EACA+f,gBAAgBA,CAACC,QAAQ,EAAEvhB,OAAO,EAAE;IAChC,IAAI,CAAC8gB,kBAAkB,CAAC5U,eAAe,CAACqV,QAAQ,EAAEvhB,OAAO,EAAE,IAAI,CAACmM,kBAAkB,CAAC;IACnF,OAAO,KAAK,CAACmV,gBAAgB,CAACC,QAAQ,EAAEvhB,OAAO,CAAC;EACpD;EACAwhB,YAAYA,CAACxY,IAAI,EAAEhJ,OAAO,EAAE;IACxBgJ,IAAI,GAAG,KAAK,CAACwY,YAAY,CAACxY,IAAI,EAAEhJ,OAAO,CAAC;IACxC,IAAIgJ,IAAI,CAACsD,QAAQ,EAAE;MACftM,OAAO,CAACyhB,SAAS,EAAE;MACnB,OAAOzY,IAAI,CAACyY,SAAS;IACzB;IACA,OAAOzY,IAAI;EACf;EACA0Y,wBAAwBA,CAACC,OAAO,EAAEC,OAAO,EAAExc,QAAQ,EAAE+D,YAAY,EAAE;IAC/D,IAAIwY,OAAO,CAACrV,QAAQ,KAAKsV,OAAO,CAACtV,QAAQ,IAAIqV,OAAO,CAAClV,OAAO,KAAKmV,OAAO,CAACnV,OAAO,EAAE;MAC9E;IACJ;IACA,OAAO,KAAK,CAACiV,wBAAwB,CAACjY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAChE;EACAmY,cAAcA,CAACC,MAAM,EAAEC,MAAM,EAAEpX,eAAe,EAAEpE,WAAW,EAAE4C,YAAY,EAAE;IACvE,MAAM6Y,IAAI,GAAGF,MAAM,CAACG,KAAK,IAAIH,MAAM,CAACG,KAAK,CAAC1b,WAAW,CAAC;IACtD,MAAMoD,SAAS,GAAG,IAAI,CAACmX,kBAAkB,IAAI,IAAI,CAACA,kBAAkB,CAACpW,UAAU,CAACC,eAAe,EAAEpE,WAAW,CAAC;IAC7G,IAAI4C,YAAY,IAAIQ,SAAS,EAAE;MAC3B,OAAO,KAAK;IAChB;IACA,IAAIqY,IAAI,IAAIA,IAAI,CAAC5hB,MAAM,IAAI,CAAC4hB,IAAI,CAAC5hB,MAAM,CAACoT,gBAAgB,IAAIwO,IAAI,CAACrY,SAAS,KAAKA,SAAS,EAAE;MACtF,OAAO,IAAI;IACf;IACA,OAAO,KAAK,CAACkY,cAAc,CAACpY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EACtD;EACAwY,+BAA+BA,CAACze,IAAI,EAAE;IAClC,MAAM0e,gBAAgB,GAAG1U,KAAK,CAACC,OAAO,CAACjK,IAAI,CAACpD,KAAK,CAAC,IAAIoD,IAAI,CAACpD,KAAK,KAAKoD,IAAI,CAACgF,aAAa,IAAI,IAAI,CAACqY,kBAAkB,CAAC5J,QAAQ,CAAC,CAAC;IAC7H,OAAO,CAACiL,gBAAgB;EAC5B;EACAC,uBAAuBA,CAAC3e,IAAI,EAAE;IAC1B,MAAMG,MAAM,GAAG,KAAK,CAACwe,uBAAuB,CAAC3e,IAAI,CAAC;IAClD,MAAMpC,OAAO,GAAG,IAAI,CAAC1B,MAAM,CAAC,iBAAiB,CAAC;IAC9C,MAAM4X,UAAU,GAAG9T,IAAI,CAACpD,KAAK;IAC7B,IAAIoN,KAAK,CAACC,OAAO,CAAC6J,UAAU,CAAC,IAAIlW,OAAO,CAACI,MAAM,EAAE;MAC7C,MAAM4gB,cAAc,GAAG9K,UAAU,CAACzU,GAAG,CAAEkG,IAAI,IAAI,IAAI,CAACtG,KAAK,CAACsG,IAAI,CAAE,CAAC;MACjE,MAAMsZ,UAAU,GAAGjhB,OAAO,CAACC,MAAM,CAAEC,MAAM,IAAI,QAAQ,KAAKA,MAAM,CAACC,IAAI,IAAI6gB,cAAc,CAACpX,IAAI,CAAElJ,GAAG,IAAIhJ,YAAY,CAACwI,MAAM,CAACQ,GAAG,EAAEA,GAAG,CAAE,CAAE,CAAC;MACtI,IAAIugB,UAAU,CAAC7gB,MAAM,KAAKJ,OAAO,CAACI,MAAM,EAAE;QACtC,IAAI,CAAC9B,MAAM,CAAC,iBAAiB,EAAE2iB,UAAU,CAAC;MAC9C;MACA,MAAM7Q,UAAU,GAAG,IAAI,CAAC9R,MAAM,CAAC,oBAAoB,CAAC;MACpD,MAAM4iB,aAAa,GAAGD,UAAU,CAACrX,IAAI,CAAE1J,MAAM,IAAI,QAAQ,KAAKA,MAAM,CAACC,IAAI,IAAIzI,YAAY,CAAC0Y,UAAU,EAAElQ,MAAM,CAACQ,GAAG,CAAE,CAAC;MACnH,IAAI,CAACwgB,aAAa,IAAIF,cAAc,CAACG,KAAK,CAAEzgB,GAAG,IAAI,CAAChJ,YAAY,CAAC0Y,UAAU,EAAE1P,GAAG,CAAE,CAAC,EAAE;QACjF,IAAI,CAACpC,MAAM,CAAC,oBAAoB,EAAE,IAAI,CAAC;MAC3C;IACJ;IACA,OAAOiE,MAAM;EACjB;AACJ,CAAC;AACD,MAAM+J,QAAQ,GAAGiT,IAAI,IAAI,cAAcA,IAAI,CAAC;EACxC5E,YAAYA,CAACtI,KAAK,EAAEtO,QAAQ,EAAE;IAC1B,IAAI,CAACsO,KAAK,CAAC+O,EAAE,CAAC,IAAI,CAAC,IAAIrd,QAAQ,IAAI,CAAC,EAAE;MAClC,MAAMsd,aAAa,GAAG,IAAI,CAACC,eAAe,CAACvd,QAAQ,CAAC;MACpD,IAAIwd,SAAS,GAAG,CAAC,CAAC;MAClBtpB,IAAI,CAACopB,aAAa,EAAG,CAAChc,KAAK,EAAEmc,WAAW,KAAK;QACzC,IAAI/pB,CAAC,CAAC+pB,WAAW,CAAC,CAAC9O,IAAI,CAACL,KAAK,CAAC,CAACjS,MAAM,EAAE;UACnCmhB,SAAS,GAAGlc,KAAK;QACrB;MACJ,CAAE,CAAC;MACH,OAAOkc,SAAS;IACpB;IACA,OAAO,KAAK,CAAC5G,YAAY,CAACvS,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EACpD;EACAL,aAAaA,CAAA,EAAG;IACZ,OAAO,KAAK,CAACA,aAAa,CAAC,CAAC,CAACyZ,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC;EACtD;EACAC,gBAAgBA,CAAC/iB,OAAO,EAAE;IACtB,MAAM8c,QAAQ,GAAG,IAAI,CAACgE,kBAAkB,CAACjE,iBAAiB,CAAC7c,OAAO,CAAC;IACnE,OAAO8c,QAAQ,IAAI,KAAK,CAACiG,gBAAgB,CAAC/iB,OAAO,CAAC;EACtD;EACAgjB,UAAUA,CAACziB,GAAG,EAAE;IACZ,MAAM0iB,IAAI,GAAG,KAAK,CAACD,UAAU,CAACvZ,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACpD,IAAInJ,GAAG,EAAE;MACL,MAAM2iB,YAAY,GAAG,CAAC,CAAC3iB,GAAG,CAACkM,OAAO;MAClC,MAAM0W,aAAa,GAAG,CAAC,CAAC5iB,GAAG,CAAC+L,QAAQ;MACpC,MAAM8W,aAAa,GAAG,CAAC,CAAC7iB,GAAG,CAACgM,QAAQ;MACpC4W,aAAa,IAAIF,IAAI,CAAC7J,QAAQ,CAAC5c,YAAY,CAAC;MAC5C4mB,aAAa,IAAIH,IAAI,CAAC7J,QAAQ,CAAC3c,YAAY,CAAC;MAC5C,IAAI0mB,aAAa,IAAID,YAAY,EAAE;QAC/BD,IAAI,CAACI,WAAW,CAAC3mB,YAAY,CAAC;MAClC;IACJ;IACA,OAAOumB,IAAI;EACf;EACAK,wBAAwBA,CAACnK,QAAQ,EAAE;IAC/B,IAAIoK,aAAa,GAAGpK,QAAQ,CAACqK,OAAO,CAAC,OAAO,CAAC;IAC7C,MAAMC,cAAc,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;IAC9C,OAAOH,aAAa,CAAC9hB,MAAM,IAAI,CAACgiB,cAAc,CAACniB,MAAM,CAACiiB,aAAa,CAAC,CAAC9hB,MAAM,EAAE;MACzE0X,QAAQ,GAAGoK,aAAa,CAACC,OAAO,CAAC,IAAI,CAAC;MACtCD,aAAa,GAAGpK,QAAQ,CAACqK,OAAO,CAAC,OAAO,CAAC;IAC7C;IACA,OAAO,IAAI,CAACG,4BAA4B,CAACxK,QAAQ,CAAC;EACtD;EACAwK,4BAA4BA,CAACxK,QAAQ,EAAE;IACnC,MAAM5V,cAAc,GAAG4V,QAAQ,CAACqK,OAAO,CAAC,IAAIjnB,SAAS,kCAAkC,CAAC;IACxF,OAAO,IAAI,CAACyf,YAAY,CAACzY,cAAc,CAAC;EAC5C;EACAqgB,gBAAgBA,CAAC7e,CAAC,EAAE+a,SAAS,EAAE;IAC3B,MAAM+D,iBAAiB,GAAG,IAAI,CAAC/C,kBAAkB;IACjD,MAAMvd,cAAc,GAAGzK,CAAC,CAACiM,CAAC,CAACC,KAAK,CAAC8e,MAAM,CAAC;IACxC,MAAMvd,WAAW,GAAG,IAAI,CAAC+c,wBAAwB,CAAC/f,cAAc,CAAC;IACjE,MAAMhD,GAAG,GAAG,IAAI,CAAC7C,eAAe,CAACsJ,KAAK,CAAC,CAAC,CAACjC,CAAC,CAACK,QAAQ,CAAC;IACpD,MAAM+X,aAAa,GAAG0G,iBAAiB,CAAC1G,aAAa,CAAC;MAClD5c,GAAG,EAAEA;IACT,CAAC,EAAEuf,SAAS,CAAC,IAAIvf,GAAG,IAAIA,GAAG,CAAC+L,QAAQ;IACpC,MAAMlM,MAAM,GAAG,IAAI,CAAC5C,kBAAkB,CAACiJ,iBAAiB,CAAC,CAAC,CAACF,WAAW,CAAC;IACvE,MAAMwd,YAAY,GAAGF,iBAAiB,CAACnZ,UAAU,CAAC3F,CAAC,CAACK,QAAQ,EAAEmB,WAAW,CAAC;IAC1E,MAAMI,YAAY,GAAGwW,aAAa,IAAI/c,MAAM,KAAKA,MAAM,CAACuG,YAAY,IAAIod,YAAY,CAAC;IACrF,MAAMhE,eAAe,GAAG,IAAI,CAACpgB,MAAM,CAAC,yBAAyB,CAAC,IAAI,OAAO;IACzE,MAAMqkB,kBAAkB,GAAG5jB,MAAM,IAAIA,MAAM,CAACoT,gBAAgB;IAC5D,IAAIuQ,YAAY,EAAE;MACd,OAAO,IAAI;IACf;IACA,IAAI,MAAM,KAAKjE,SAAS,EAAE;MACtB,IAAInnB,OAAO,CAACwb,IAAI,CAAC,CAAC,CAACC,GAAG,IAAIzb,OAAO,CAACwb,IAAI,CAAC,CAAC,CAACE,OAAO,EAAE;QAC9Cta,QAAQ,CAACkqB,kBAAkB,CAAC,CAAC;MACjC;MACA,OAAOD,kBAAkB,IAAIrd,YAAY,IAAIkd,iBAAiB,CAACK,QAAQ,CAACnf,CAAC,CAACK,QAAQ,EAAEmB,WAAW,CAAC;IACpG;IACA,IAAI,OAAO,KAAKuZ,SAAS,IAAI,UAAU,KAAKC,eAAe,IAAI,IAAI,CAACoE,kBAAkB,KAAK5gB,cAAc,CAACvB,GAAG,CAAC,CAAC,CAAC,EAAE;MAC9G,MAAM2U,OAAO,GAAG,KAAK;MACrB,MAAMyN,mBAAmB,GAAG,IAAI,KAAK7jB,GAAG,IAAI,KAAK,CAAC,KAAKA,GAAG,GAAG,KAAK,CAAC,GAAGA,GAAG,CAAC+L,QAAQ;MAClFuX,iBAAiB,CAACQ,aAAa,CAAC1N,OAAO,EAAEyN,mBAAmB,CAAC;IACjE;IACA,IAAIzd,YAAY,IAAImZ,SAAS,KAAKC,eAAe,EAAE;MAC/C,OAAO8D,iBAAiB,CAACK,QAAQ,CAACnf,CAAC,CAACK,QAAQ,EAAEmB,WAAW,CAAC,IAAIsd,iBAAiB,CAACha,SAAS,CAAC9E,CAAC,CAACK,QAAQ,CAAC;IACzG;EACJ;EACAkf,eAAeA,CAACvf,CAAC,EAAE;IACf,IAAI,CAACof,kBAAkB,GAAGpf,CAAC,CAACC,KAAK,CAAC8e,MAAM;IACxC,IAAI,CAACS,mBAAmB,GAAGpf,UAAU,CAAE,MAAM;MACzC,IAAI,CAACye,gBAAgB,CAAC7e,CAAC,EAAE,MAAM,CAAC;IACpC,CAAE,CAAC;EACP;EACAyf,qBAAqBA,CAACzf,CAAC,EAAE;IACrB,KAAK,CAAC0f,SAAS,CAAChb,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC1C;EACA+a,SAASA,CAAC1f,CAAC,EAAE;IACT,MAAM2f,UAAU,GAAG5rB,CAAC,CAACiM,CAAC,CAAC4f,UAAU,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACzF,eAAe,CAACrkB,eAAe,CAAC,CAAC;IAClFiK,CAAC,CAACC,KAAK,CAACrI,qBAAqB,CAAC,GAAG,IAAI,CAAC4C,SAAS;IAC/C,IAAI,CAAC,IAAI,CAACqkB,gBAAgB,CAAC7e,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC2f,UAAU,EAAE;MACnD,KAAK,CAACD,SAAS,CAAChb,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC1C;EACJ;EACAmb,wBAAwBA,CAAC9f,CAAC,EAAE;IACxB,KAAK,CAAC+f,YAAY,CAACrb,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC7C;EACAob,YAAYA,CAAC/f,CAAC,EAAE;IACZ,IAAI,CAAC,IAAI,CAAC6e,gBAAgB,CAAC7e,CAAC,EAAE,UAAU,CAAC,EAAE;MACvC,KAAK,CAAC+f,YAAY,CAACrb,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC7C;EACJ;EACAqb,aAAaA,CAACrR,KAAK,EAAEwM,UAAU,EAAE;IAC7B,IAAI8E,kBAAkB;IACtB,MAAMnB,iBAAiB,GAAG,IAAI,CAAC/C,kBAAkB;IACjD,MAAMmE,aAAa,GAAG,CAAC,CAAC/E,UAAU,CAAC9f,MAAM,CAACqY,OAAO;IACjD,MAAMyM,cAAc,GAAGhF,UAAU,CAAC5f,QAAQ;IAC1C,MAAMuJ,SAAS,GAAGga,iBAAiB,CAACha,SAAS,CAACqW,UAAU,CAAC9a,QAAQ,CAAC;IAClE,MAAMuE,SAAS,GAAGxM,aAAa,CAAC0M,SAAS,EAAEqW,UAAU,CAAC;IACtD,IAAI9iB,mCAAmC,CAACyM,SAAS,EAAEqW,UAAU,CAAC,EAAE;MAC5D,MAAM;QACFxH,SAAS,EAAEA;MACf,CAAC,GAAGwH,UAAU,CAAC9f,MAAM;MACrBsT,KAAK,CAACyR,WAAW,CAAC,IAAI,CAAChG,eAAe,CAAC/iB,cAAc,CAAC,EAAE,CAAC8oB,cAAc,CAAC,CAACC,WAAW,CAAC9qB,yBAAyB,EAAE,CAAC6qB,cAAc,CAAC;MAChI,IAAIxM,SAAS,EAAE;QACXhF,KAAK,CAACK,IAAI,CAACrY,sBAAsB,CAAC,CAACsY,KAAK,CAAC,CAAC,CAACoR,GAAG,CAAC,WAAW,EAAE1M,SAAS,CAAC;MAC1E;IACJ;IACA,IAAI/O,SAAS,EAAE;MACX,IAAI,CAAC0b,iBAAiB,CAAC3R,KAAK,CAAC;IACjC;IACA,MAAM4R,WAAW,GAAG,CAAC,EAAE,IAAI,MAAMN,kBAAkB,GAAG9E,UAAU,CAAC9f,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK4kB,kBAAkB,IAAIA,kBAAkB,CAACrM,YAAY,CAAC;IAC7I,IAAIuH,UAAU,CAAC9f,MAAM,IAAI,CAAC6kB,aAAa,KAAK,CAACK,WAAW,IAAIzB,iBAAiB,CAAClE,mBAAmB,CAACO,UAAU,CAAC,CAAC,EAAE;MAC5G2D,iBAAiB,CAACnE,iBAAiB,CAAChM,KAAK,EAAEwM,UAAU,CAAC;IAC1D;IACA,KAAK,CAAC6E,aAAa,CAACtb,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC9C;EACA6b,eAAeA,CAACvlB,OAAO,EAAE;IACrB,MAAM2c,WAAW,GAAG,KAAK,CAAC4I,eAAe,CAACvlB,OAAO,CAAC;IAClD,MAAM;MACFuG,WAAW,EAAEA,WAAW;MACxBhG,GAAG,EAAEA;IACT,CAAC,GAAGP,OAAO;IACX2c,WAAW,CAAChT,SAAS,GAAG,IAAI,CAACmX,kBAAkB,CAACpW,UAAU,CAACiS,WAAW,CAACvX,QAAQ,EAAEuX,WAAW,CAACpW,WAAW,CAAC;IACzGoW,WAAW,CAAClQ,OAAO,GAAGlM,GAAG,CAACkM,OAAO;IACjC,IAAIlM,GAAG,CAACgM,QAAQ,EAAE;MACdoQ,WAAW,CAACpQ,QAAQ,GAAG,KAAK,CAAC,KAAKhM,GAAG,CAACiM,cAAc,CAACjG,WAAW,CAAC;IACrE;IACA,OAAOoW,WAAW;EACtB;EACA6I,sBAAsBA,CAAC9R,KAAK,EAAEiJ,WAAW,EAAE3c,OAAO,EAAE;IAChD,KAAK,CAACwlB,sBAAsB,CAAC9R,KAAK,EAAEiJ,WAAW,EAAE3c,OAAO,CAAC;IACzD,IAAI2c,WAAW,CAAClQ,OAAO,EAAE;MACrB,IAAI,CAACgZ,OAAO,CAAC,iBAAiB,EAAEhtB,mBAAmB,CAACslB,MAAM,CAAC,4BAA4B,CAAC,EAAErK,KAAK,CAAC;IACpG;IACA,IAAIiJ,WAAW,CAACpQ,QAAQ,EAAE;MACtB,IAAI,CAACkZ,OAAO,CAAC,iBAAiB,EAAEhtB,mBAAmB,CAACslB,MAAM,CAAC,6BAA6B,CAAC,EAAErK,KAAK,CAAC;IACrG;IACA,MAAMwR,cAAc,GAAGvI,WAAW,CAACvc,MAAM,CAACuG,YAAY,IAAI,CAACgW,WAAW,CAAClQ,OAAO,IAAI,CAACkQ,WAAW,CAACpQ,QAAQ,IAAI,MAAM,KAAKoQ,WAAW,CAAC5W,OAAO,IAAI4W,WAAW,CAACvc,MAAM,CAAC8a,kBAAkB,KAAKyB,WAAW,CAACvc,MAAM,CAAC+a,yBAAyB,IAAI,IAAI,CAAC2F,kBAAkB,CAACjhB,mBAAmB,CAAC,CAAC;IACpR,IAAIqlB,cAAc,EAAE;MAChB,IAAI,CAACO,OAAO,CAAC,iBAAiB,EAAEhtB,mBAAmB,CAACslB,MAAM,CAAC,6BAA6B,CAAC,EAAErK,KAAK,CAAC;IACrG;EACJ;EACAgS,WAAWA,CAAC1lB,OAAO,EAAE;IACjB,MAAM0T,KAAK,GAAG,KAAK,CAACgS,WAAW,CAAC1lB,OAAO,CAAC;IACxC,MAAM6J,SAAS,GAAG,IAAI,CAACiX,kBAAkB,CAACjX,SAAS,CAAC7J,OAAO,CAACoF,QAAQ,CAAC;IACrEhI,mCAAmC,CAACyM,SAAS,EAAE7J,OAAO,CAAC,IAAI0T,KAAK,CAAC0F,QAAQ,CAAC3d,iBAAiB,CAAC;IAC5F,OAAOiY,KAAK;EAChB;EACAiS,SAASA,CAACvgB,QAAQ,EAAEwgB,gBAAgB,EAAEvlB,KAAK,EAAEuE,IAAI,EAAE;IAC/C,MAAM+X,WAAW,GAAG,IAAI,CAACkJ,cAAc,CAACzgB,QAAQ,EAAEwgB,gBAAgB,CAAC;IACnE,IAAIjJ,WAAW,EAAE;MACb,IAAI,KAAK,CAAC,KAAKtc,KAAK,EAAE;QAClB,OAAOsc,WAAW,CAACtc,KAAK;MAC5B;MACA,IAAI,CAACygB,kBAAkB,CAACtG,gBAAgB,CAACmC,WAAW,EAAEtc,KAAK,EAAEuE,IAAI,EAAE,IAAI,CAAC;IAC5E;EACJ;EACAqB,OAAOA,CAAA,EAAG;IACN,KAAK,CAACA,OAAO,CAACwD,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACpCtC,YAAY,CAAC,IAAI,CAACmd,mBAAmB,CAAC;EAC1C;EACAuB,WAAWA,CAAA,EAAG;IACV,KAAK,CAACA,WAAW,CAACrc,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACxC,OAAO,IAAI,CAACyG,kBAAkB,CAAC,IAAI,CAAC,CAACrD,IAAI,CAAE,MAAM;MAC7C,IAAI,CAACgU,kBAAkB,CAAC7O,kBAAkB,CAAC,CAAC;IAChD,CAAE,CAAC;EACP;EACAoT,iBAAiBA,CAAA,EAAG,CAAC;EACrBU,iBAAiBA,CAAA,EAAG,CAAC;AACzB,CAAC;AACD,MAAMvH,WAAW,GAAGoC,IAAI,IAAI,cAAcA,IAAI,CAAC;EAC3ChZ,aAAaA,CAACnE,IAAI,EAAE;IAChB,MAAM;MACFoE,QAAQ,EAAEA;IACd,CAAC,GAAGpE,IAAI;IACR,QAAQA,IAAI,CAACtL,IAAI;MACb,KAAK,SAAS;QAAE;UACZ,MAAM6tB,eAAe,GAAG,CAACxqB,yBAAyB,EAAEJ,2BAA2B,EAAEC,kCAAkC,EAAEC,8BAA8B,CAAC;UACpJ,MAAM2qB,gBAAgB,GAAGpe,QAAQ,IAAI,CAACme,eAAe,CAAC/a,IAAI,CAAEib,UAAU,IAAIA,UAAU,KAAKre,QAAS,CAAC;UACnGoe,gBAAgB,IAAI,IAAI,CAACE,WAAW,CAAC,CAAC;UACtC,KAAK,CAACve,aAAa,CAACnE,IAAI,CAAC;UACzB;QACJ;MACA,KAAK,+BAA+B;QAChCA,IAAI,CAACyE,OAAO,GAAG,IAAI;QACnB;MACJ;QACI,KAAK,CAACN,aAAa,CAACnE,IAAI,CAAC;IACjC;EACJ;EACA2iB,gBAAgBA,CAAA,EAAG;IACf,MAAMpf,KAAK,GAAG,KAAK,CAACof,gBAAgB,CAAC,CAAC;IACtC,MAAMC,eAAe,GAAG,IAAI,CAACvF,kBAAkB,CAACvB,kBAAkB,CAAC,IAAI,CAAC;IACxE,OAAO8G,eAAe,CAACvD,MAAM,CAAC9b,KAAK,CAAC;EACxC;AACJ,CAAC;AACD,OAAO,MAAMsf,aAAa,GAAG;EACzBC,cAAc,EAAEA,CAAA,MAAO;IACnBC,OAAO,EAAE;MACLC,IAAI,EAAE,KAAK;MACX1O,WAAW,EAAE,MAAM;MACnB9W,cAAc,EAAEpE,6BAA6B;MAC7C4iB,WAAW,EAAE,KAAK;MAClBtC,aAAa,EAAE,KAAK;MACpBtZ,aAAa,EAAE,KAAK;MACpB0U,QAAQ,EAAE,KAAK;MACfmO,qBAAqB,EAAE,KAAK;MAC5B/R,aAAa,EAAE,IAAI;MACnBD,KAAK,EAAE;QACH7C,OAAO,EAAEpZ,mBAAmB,CAACslB,MAAM,CAAC,2BAA2B,CAAC;QAChEc,cAAc,EAAEpmB,mBAAmB,CAACslB,MAAM,CAAC,kCAAkC,CAAC;QAC9E4I,cAAc,EAAEluB,mBAAmB,CAACslB,MAAM,CAAC,kCAAkC,CAAC;QAC9Ea,gBAAgB,EAAEnmB,mBAAmB,CAACslB,MAAM,CAAC,oCAAoC,CAAC;QAClF6I,gBAAgB,EAAEnuB,mBAAmB,CAACslB,MAAM,CAAC,oCAAoC,CAAC;QAClFnP,MAAM,EAAEnW,mBAAmB,CAACslB,MAAM,CAAC,0BAA0B,CAAC;QAC9DvJ,SAAS,EAAE/b,mBAAmB,CAACslB,MAAM,CAAC,6BAA6B,CAAC;QACpE7I,WAAW,EAAEzc,mBAAmB,CAACslB,MAAM,CAAC,+BAA+B,CAAC;QACxEnJ,oBAAoB,EAAEnc,mBAAmB,CAACslB,MAAM,CAAC,wCAAwC,CAAC;QAC1FjJ,kBAAkB,EAAE;MACxB,CAAC;MACD+R,IAAI,EAAE;QACFC,QAAQ,EAAE;MACd,CAAC;MACDC,KAAK,EAAE,CAAC,CAAC;MACThH,eAAe,EAAE,OAAO;MACxBtO,UAAU,EAAE,IAAI;MAChBT,cAAc,EAAE,IAAI;MACpB3P,OAAO,EAAE;IACb,CAAC;IACDic,6BAA6B,EAAE;EACnC,CAAC,CAAC;EACF0J,WAAW,EAAE;IACTR,OAAO,EAAEnpB;EACb,CAAC;EACD4pB,SAAS,EAAE;IACPD,WAAW,EAAE;MACTvkB,IAAI,EAAEke;IACV,CAAC;IACDuG,KAAK,EAAE;MACHvZ,QAAQ,EAAEA,QAAQ;MAClB6Q,WAAW,EAAEA;IACjB;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}