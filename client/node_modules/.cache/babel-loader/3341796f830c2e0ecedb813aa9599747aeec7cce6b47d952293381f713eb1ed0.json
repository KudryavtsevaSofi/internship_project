{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/validating/m_validating.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport pointerEvents from \"../../../../common/core/events/pointer\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport { createObjectWithChanges } from \"../../../../common/data/array_utils\";\nimport $ from \"../../../../core/renderer\";\nimport browser from \"../../../../core/utils/browser\";\nimport { deferUpdate, equalByValue, getKeyHash } from \"../../../../core/utils/common\";\nimport { Deferred, fromPromise, when } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getOuterHeight, getOuterWidth, getWidth, setHeight } from \"../../../../core/utils/size\";\nimport { encodeHtml } from \"../../../../core/utils/string\";\nimport { isDefined, isEmptyObject, isObject } from \"../../../../core/utils/type\";\nimport Button from \"../../../../ui/button\";\nimport LoadIndicator from \"../../../../ui/load_indicator\";\nimport Overlay from \"../../../../ui/overlay/ui.overlay\";\nimport { current, isFluent } from \"../../../../ui/themes\";\nimport ValidationEngine from \"../../../../ui/validation_engine\";\nimport Validator from \"../../../../ui/validator\";\nimport { focused } from \"../../../../ui/widget/selectors\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport { EDITORS_INPUT_SELECTOR } from \"../editing/const\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nconst INVALIDATE_CLASS = \"invalid\";\nconst REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nconst INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\nconst INVALID_MESSAGE_ID = \"dxInvalidMessage\";\nconst WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\nconst INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\nconst REVERT_BUTTON_CLASS = \"dx-revert-button\";\nconst REVERT_BUTTON_ID = \"dxRevertButton\";\nconst VALIDATOR_CLASS = \"validator\";\nconst PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\nconst VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\nconst CONTENT_CLASS = \"content\";\nconst INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nconst PADDING_BETWEEN_TOOLTIPS = 2;\nconst EDIT_MODE_ROW = \"row\";\nconst EDIT_MODE_FORM = \"form\";\nconst EDIT_MODE_BATCH = \"batch\";\nconst EDIT_MODE_CELL = \"cell\";\nconst EDIT_MODE_POPUP = \"popup\";\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\nconst FORM_BASED_MODES = [\"popup\", \"form\"];\nconst COMMAND_TRANSPARENT = \"transparent\";\nconst VALIDATION_STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\nconst EDIT_DATA_INSERT_TYPE = \"insert\";\nconst EDIT_DATA_REMOVE_TYPE = \"remove\";\nconst VALIDATION_CANCELLED = \"cancel\";\nconst validationResultIsValid = function (result) {\n  return isDefined(result) && \"cancel\" !== result;\n};\nconst cellValueShouldBeValidated = function (value, rowOptions) {\n  return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow;\n};\nexport class ValidatingController extends modules.Controller {\n  constructor() {\n    super(...arguments);\n    this._isValidationInProgress = false;\n    this._disableApplyValidationResults = false;\n  }\n  init() {\n    this._editingController = this.getController(\"editing\");\n    this._editorFactoryController = this.getController(\"editorFactory\");\n    this._columnsController = this.getController(\"columns\");\n    this.createAction(\"onRowValidating\");\n    if (!this._validationState) {\n      this.initValidationState();\n    }\n  }\n  initValidationState() {\n    this._validationState = [];\n    this._validationStateCache = {};\n  }\n  _rowIsValidated(change) {\n    const validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n    return !!validationData && !!validationData.validated;\n  }\n  _getValidationData(key, create) {\n    const keyHash = getKeyHash(key);\n    const isObjectKeyHash = isObject(keyHash);\n    let validationData;\n    if (isObjectKeyHash) {\n      validationData = this._validationState.filter(data => equalByValue(data.key, key))[0];\n    } else {\n      validationData = this._validationStateCache[keyHash];\n    }\n    if (!validationData && create) {\n      validationData = {\n        key: key,\n        isValid: true\n      };\n      this._validationState.push(validationData);\n      if (!isObjectKeyHash) {\n        this._validationStateCache[keyHash] = validationData;\n      }\n    }\n    return validationData;\n  }\n  _getBrokenRules(validationData, validationResults) {\n    let brokenRules;\n    if (validationResults) {\n      brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule];\n    } else {\n      brokenRules = validationData.brokenRules || [];\n    }\n    return brokenRules;\n  }\n  _rowValidating(validationData, validationResults) {\n    const deferred = new Deferred();\n    const change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n    const brokenRules = this._getBrokenRules(validationData, validationResults);\n    const isValid = validationResults ? validationResults.isValid : validationData.isValid;\n    const parameters = {\n      brokenRules: brokenRules,\n      isValid: isValid,\n      key: change.key,\n      newData: change.data,\n      oldData: this._editingController._getOldData(change.key),\n      promise: null,\n      errorText: this.getHiddenValidatorsErrorText(brokenRules)\n    };\n    this.executeAction(\"onRowValidating\", parameters);\n    when(fromPromise(parameters.promise)).always(() => {\n      validationData.isValid = parameters.isValid;\n      validationData.errorText = parameters.errorText;\n      deferred.resolve(parameters);\n    });\n    return deferred.promise();\n  }\n  getHiddenValidatorsErrorText(brokenRules) {\n    const brokenRulesMessages = [];\n    each(brokenRules, (_, brokenRule) => {\n      const {\n        column: column\n      } = brokenRule;\n      const isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\n      const isVisibleColumn = column && column.visible;\n      if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\n        brokenRulesMessages.push(brokenRule.message);\n      }\n    });\n    return brokenRulesMessages.join(\", \");\n  }\n  validate(isFull) {\n    let isValid = true;\n    const editingController = this._editingController;\n    const deferred = new Deferred();\n    const completeList = [];\n    const editMode = editingController.getEditMode();\n    isFull = isFull || editMode === EDIT_MODE_ROW;\n    if (this._isValidationInProgress) {\n      return deferred.resolve(false).promise();\n    }\n    this._isValidationInProgress = true;\n    if (isFull) {\n      editingController.addDeferred(deferred);\n      const changes = editingController.getChanges();\n      each(changes, (index, _ref) => {\n        let {\n          type: type,\n          key: key\n        } = _ref;\n        if (\"remove\" !== type) {\n          const validationData = this._getValidationData(key, true);\n          const validationResult = this.validateGroup(validationData);\n          completeList.push(validationResult);\n          validationResult.done(validationResult => {\n            validationData.validated = true;\n            isValid = isValid && validationResult.isValid;\n          });\n        }\n      });\n    } else if (this._currentCellValidator) {\n      const validationResult = this.validateGroup(this._currentCellValidator._findGroup());\n      completeList.push(validationResult);\n      validationResult.done(validationResult => {\n        isValid = validationResult.isValid;\n      });\n    }\n    when(...completeList).done(() => {\n      this._isValidationInProgress = false;\n      deferred.resolve(isValid);\n    });\n    return deferred.promise();\n  }\n  validateGroup(validationData) {\n    var _validationResult;\n    const result = new Deferred();\n    const validateGroup = validationData && ValidationEngine.getGroupConfig(validationData);\n    let validationResult;\n    if (null !== validateGroup && void 0 !== validateGroup && validateGroup.validators.length) {\n      this.resetRowValidationResults(validationData);\n      validationResult = ValidationEngine.validateGroup(validationData);\n    }\n    when((null === (_validationResult = validationResult) || void 0 === _validationResult ? void 0 : _validationResult.complete) || validationResult).done(validationResult => {\n      when(this._rowValidating(validationData, validationResult)).done(result.resolve);\n    });\n    return result.promise();\n  }\n  isRowDataModified(change) {\n    return !isEmptyObject(change.data);\n  }\n  updateValidationState(change) {\n    const editMode = this._editingController.getEditMode();\n    const {\n      key: key\n    } = change;\n    const validationData = this._getValidationData(key, true);\n    if (!FORM_BASED_MODES.includes(editMode)) {\n      if (\"insert\" === change.type && !this.isRowDataModified(change)) {\n        validationData.isValid = true;\n        return;\n      }\n      this.setDisableApplyValidationResults(true);\n      const groupConfig = ValidationEngine.getGroupConfig(validationData);\n      if (groupConfig) {\n        const validationResult = ValidationEngine.validateGroup(validationData);\n        when(validationResult.complete || validationResult).done(validationResult => {\n          validationData.isValid = validationResult.isValid;\n          validationData.brokenRules = validationResult.brokenRules;\n        });\n      } else if (!validationData.brokenRules || !validationData.brokenRules.length) {\n        validationData.isValid = true;\n      }\n      this.setDisableApplyValidationResults(false);\n    } else {\n      validationData.isValid = true;\n    }\n  }\n  setValidator(validator) {\n    this._currentCellValidator = validator;\n  }\n  renderCellPendingIndicator($container) {\n    let $indicator = $container.find(\".dx-pending-indicator\");\n    if (!$indicator.length) {\n      const $indicatorContainer = $container;\n      $indicator = $(\"<div>\").appendTo($indicatorContainer).addClass(\"dx-pending-indicator\");\n      this._createComponent($indicator, LoadIndicator);\n      $container.addClass(\"dx-validation-pending\");\n    }\n  }\n  disposeCellPendingIndicator($container) {\n    const $indicator = $container.find(\".dx-pending-indicator\");\n    if ($indicator.length) {\n      const indicator = LoadIndicator.getInstance($indicator);\n      if (indicator) {\n        indicator.dispose();\n        indicator.$element().remove();\n      }\n      $container.removeClass(\"dx-validation-pending\");\n    }\n  }\n  validationStatusChanged(result) {\n    const {\n      validator: validator\n    } = result;\n    const validationGroup = validator.option(\"validationGroup\");\n    const {\n      column: column\n    } = validator.option(\"dataGetter\")();\n    this.updateCellValidationResult({\n      rowKey: validationGroup.key,\n      columnIndex: column.index,\n      validationResult: result\n    });\n  }\n  validatorInitialized(arg) {\n    arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\n    arg.component.on(\"validated\", this.validationStatusChanged.bind(this));\n  }\n  validatorDisposing(arg) {\n    const validator = arg.component;\n    const validationGroup = validator.option(\"validationGroup\");\n    const {\n      column: column\n    } = validator.option(\"dataGetter\")();\n    const result = this.getCellValidationResult({\n      rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\n      columnIndex: column.index\n    });\n    if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\n      this.cancelCellValidationResult({\n        change: validationGroup,\n        columnIndex: column.index\n      });\n    }\n  }\n  applyValidationResult($container, result) {\n    const {\n      validator: validator\n    } = result;\n    const validationGroup = validator.option(\"validationGroup\");\n    const {\n      column: column\n    } = validator.option(\"dataGetter\")();\n    result.brokenRules && result.brokenRules.forEach(rule => {\n      rule.columnIndex = column.index;\n      rule.column = column;\n    });\n    if ($container) {\n      const validationResult = this.getCellValidationResult({\n        rowKey: validationGroup.key,\n        columnIndex: column.index\n      });\n      const requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\n      if (this._disableApplyValidationResults || requestIsDisabled) {\n        return;\n      }\n      if (result.status === VALIDATION_STATUS.invalid) {\n        const $focus = $container.find(\":focus\");\n        if (!focused($focus)) {\n          eventsEngine.trigger($focus, \"focus\");\n          eventsEngine.trigger($focus, pointerEvents.down);\n        }\n      }\n      const editor = !column.editCellTemplate && this._editorFactoryController.getEditorInstance($container);\n      if (result.status === VALIDATION_STATUS.pending) {\n        if (editor) {\n          editor.option(\"validationStatus\", VALIDATION_STATUS.pending);\n        } else {\n          this.renderCellPendingIndicator($container);\n        }\n      } else if (editor) {\n        editor.option(\"validationStatus\", VALIDATION_STATUS.valid);\n      } else {\n        this.disposeCellPendingIndicator($container);\n      }\n      $container.toggleClass(this.addWidgetPrefix(\"invalid\"), result.status === VALIDATION_STATUS.invalid);\n    }\n  }\n  _syncInternalEditingData(parameters) {\n    var _parameters$row;\n    const editingController = this._editingController;\n    const change = editingController.getChangeByKey(parameters.key);\n    const oldDataFromState = editingController._getOldData(parameters.key);\n    const oldData = null === (_parameters$row = parameters.row) || void 0 === _parameters$row ? void 0 : _parameters$row.oldData;\n    if (change && oldData && !oldDataFromState) {\n      editingController._addInternalData({\n        key: parameters.key,\n        oldData: oldData\n      });\n    }\n  }\n  createValidator(parameters, $container) {\n    const editingController = this._editingController;\n    const {\n      column: column\n    } = parameters;\n    let {\n      showEditorAlways: showEditorAlways\n    } = column;\n    if (isDefined(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\n      return;\n    }\n    const editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\n    let needCreateValidator = editIndex > -1;\n    if (!needCreateValidator) {\n      if (!showEditorAlways) {\n        var _this$_columnsControl;\n        const visibleColumns = (null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.getVisibleColumns()) || [];\n        showEditorAlways = visibleColumns.some(column => column.showEditorAlways);\n      }\n      const isEditRow = equalByValue(this.option(\"editing.editRowKey\"), parameters.key);\n      const isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\n        row: parameters.row\n      });\n      needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\n      if (isCellOrBatchEditingAllowed && showEditorAlways) {\n        var _parameters$row2;\n        editingController._addInternalData({\n          key: parameters.key,\n          oldData: (null === (_parameters$row2 = parameters.row) || void 0 === _parameters$row2 ? void 0 : _parameters$row2.oldData) ?? parameters.data\n        });\n      }\n    }\n    if (needCreateValidator) {\n      if ($container && !$container.length) {\n        errors.log(\"E1050\");\n        return;\n      }\n      this._syncInternalEditingData(parameters);\n      const validationData = this._getValidationData(parameters.key, true);\n      const getValue = () => {\n        const change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n        const value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\n        return void 0 !== value ? value : parameters.value;\n      };\n      const useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\n      $container && $container.addClass(this.addWidgetPrefix(\"validator\"));\n      const validator = new Validator($container || $(\"<div>\"), {\n        name: column.caption,\n        validationRules: extend(true, [], column.validationRules),\n        validationGroup: validationData,\n        adapter: useDefaultValidator ? null : {\n          getValue: getValue,\n          applyValidationResults: result => {\n            this.applyValidationResult($container, result);\n          }\n        },\n        dataGetter() {\n          const key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\n          const change = editingController.getChangeByKey(key);\n          const oldData = editingController._getOldData(key);\n          return {\n            data: createObjectWithChanges(oldData, null === change || void 0 === change ? void 0 : change.data),\n            column: column\n          };\n        },\n        onInitialized: this.validatorInitialized.bind(this),\n        onDisposing: this.validatorDisposing.bind(this)\n      });\n      if (useDefaultValidator) {\n        const adapter = validator.option(\"adapter\");\n        if (adapter) {\n          const originBypass = adapter.bypass;\n          const defaultAdapterBypass = () => parameters.row.isNewRow && !this._isValidationInProgress && !editingController.isCellModified(parameters);\n          adapter.getValue = getValue;\n          adapter.validationRequestsCallbacks = [];\n          adapter.bypass = () => originBypass.call(adapter) || defaultAdapterBypass();\n        }\n      }\n      return validator;\n    }\n    return;\n  }\n  setDisableApplyValidationResults(flag) {\n    this._disableApplyValidationResults = flag;\n  }\n  getDisableApplyValidationResults() {\n    return this._disableApplyValidationResults;\n  }\n  isCurrentValidatorProcessing(_ref2) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref2;\n    return this._currentCellValidator && equalByValue(this._currentCellValidator.option(\"validationGroup\").key, rowKey) && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex;\n  }\n  validateCell(validator) {\n    const cellParams = {\n      rowKey: validator.option(\"validationGroup\").key,\n      columnIndex: validator.option(\"dataGetter\")().column.index,\n      validationResult: null\n    };\n    let validationResult = this.getCellValidationResult(cellParams);\n    const stateRestored = validationResultIsValid(validationResult);\n    const adapter = validator.option(\"adapter\");\n    if (!stateRestored) {\n      validationResult = validator.validate();\n    } else {\n      const currentCellValue = adapter.getValue();\n      if (!equalByValue(currentCellValue, validationResult.value)) {\n        validationResult = validator.validate();\n      }\n    }\n    const deferred = new Deferred();\n    if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\n      this.updateCellValidationResult(cellParams);\n      adapter.applyValidationResults(validationResult);\n    }\n    when(validationResult.complete || validationResult).done(validationResult => {\n      stateRestored && adapter.applyValidationResults(validationResult);\n      deferred.resolve(validationResult);\n    });\n    return deferred.promise();\n  }\n  updateCellValidationResult(_ref3) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex,\n      validationResult: validationResult\n    } = _ref3;\n    const validationData = this._getValidationData(rowKey);\n    if (!validationData) {\n      return;\n    }\n    if (!validationData.validationResults) {\n      validationData.validationResults = {};\n    }\n    let result;\n    if (validationResult) {\n      result = extend({}, validationResult);\n      validationData.validationResults[columnIndex] = result;\n      if (validationResult.status === VALIDATION_STATUS.pending) {\n        if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n          result.deferred = new Deferred();\n          result.complete.always(() => {\n            result.deferred.resolve();\n          });\n          this._editingController.addDeferred(result.deferred);\n        }\n        if (this._disableApplyValidationResults) {\n          result.disabledPendingId = validationResult.id;\n          return;\n        }\n      }\n    } else {\n      result = validationData.validationResults[columnIndex];\n    }\n    if (result && result.disabledPendingId) {\n      delete result.disabledPendingId;\n    }\n  }\n  getCellValidationResult(_ref4) {\n    var _validationData$valid;\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref4;\n    const validationData = this._getValidationData(rowKey, true);\n    return null === validationData || void 0 === validationData || null === (_validationData$valid = validationData.validationResults) || void 0 === _validationData$valid ? void 0 : _validationData$valid[columnIndex];\n  }\n  removeCellValidationResult(_ref5) {\n    let {\n      change: change,\n      columnIndex: columnIndex\n    } = _ref5;\n    const validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n    if (validationData && validationData.validationResults) {\n      this.cancelCellValidationResult({\n        change: change,\n        columnIndex: columnIndex\n      });\n      delete validationData.validationResults[columnIndex];\n    }\n  }\n  cancelCellValidationResult(_ref6) {\n    let {\n      change: change,\n      columnIndex: columnIndex\n    } = _ref6;\n    const validationData = this._getValidationData(change.key);\n    if (change && validationData.validationResults) {\n      const result = validationData.validationResults[columnIndex];\n      if (result) {\n        result.deferred && result.deferred.reject(\"cancel\");\n        validationData.validationResults[columnIndex] = \"cancel\";\n      }\n    }\n  }\n  resetRowValidationResults(validationData) {\n    if (validationData) {\n      validationData.validationResults && delete validationData.validationResults;\n      delete validationData.validated;\n    }\n  }\n  isInvalidCell(_ref7) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref7;\n    const result = this.getCellValidationResult({\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    });\n    return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid;\n  }\n  getCellValidator(_ref8) {\n    let {\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    } = _ref8;\n    const validationData = this._getValidationData(rowKey);\n    const groupConfig = validationData && ValidationEngine.getGroupConfig(validationData);\n    const validators = groupConfig && groupConfig.validators;\n    return validators && validators.filter(v => {\n      const {\n        column: column\n      } = v.option(\"dataGetter\")();\n      return column ? column.index === columnIndex : false;\n    })[0];\n  }\n  setCellValidationStatus(cellOptions) {\n    const validationResult = this.getCellValidationResult({\n      rowKey: cellOptions.key,\n      columnIndex: cellOptions.column.index\n    });\n    if (isDefined(validationResult)) {\n      cellOptions.validationStatus = \"cancel\" !== validationResult ? validationResult.status : \"cancel\";\n    } else {\n      delete cellOptions.validationStatus;\n    }\n  }\n}\nexport const validatingEditingExtender = Base => class extends Base {\n  processDataItemTreeListHack(item) {\n    super.processDataItem.apply(this, arguments);\n  }\n  processItemsTreeListHack(items, e) {\n    return super.processItems.apply(this, arguments);\n  }\n  _addChange(changeParams) {\n    const change = super._addChange.apply(this, arguments);\n    if (change && \"remove\" !== changeParams.type) {\n      this._validatingController.updateValidationState(change);\n    }\n    return change;\n  }\n  _handleChangesChange(args) {\n    super._handleChangesChange.apply(this, arguments);\n    args.value.forEach(change => {\n      if (void 0 === this._validatingController._getValidationData(change.key)) {\n        this._validatingController.updateValidationState(change);\n      }\n    });\n  }\n  _updateRowAndPageIndices() {\n    const that = this;\n    const startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\n    let rowIndex = startInsertIndex;\n    each(that.getChanges(), (_, _ref9) => {\n      let {\n        key: key,\n        type: type\n      } = _ref9;\n      const validationData = this._validatingController._getValidationData(key);\n      if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\n        validationData.pageIndex = that._pageIndex;\n        if (\"insert\" === type) {\n          validationData.rowIndex = startInsertIndex;\n        } else {\n          validationData.rowIndex = rowIndex;\n        }\n        rowIndex++;\n      }\n    });\n  }\n  _getValidationGroupsInForm(detailOptions) {\n    const validationData = this._validatingController._getValidationData(detailOptions.key, true);\n    return {\n      validationGroup: validationData\n    };\n  }\n  _validateEditFormAfterUpdate(row, isCustomSetCellValue) {\n    if (isCustomSetCellValue && this._editForm) {\n      this._editForm.validate();\n    }\n    super._validateEditFormAfterUpdate.apply(this, arguments);\n  }\n  _prepareEditCell(params) {\n    const isNotCanceled = super._prepareEditCell.apply(this, arguments);\n    if (isNotCanceled && params.column.showEditorAlways) {\n      this._validatingController.updateValidationState({\n        key: params.key\n      });\n    }\n    return isNotCanceled;\n  }\n  processItems(items, changeType) {\n    const changes = this.getChanges();\n    const getIndexByChange = (change, items) => {\n      let index = -1;\n      const isInsert = \"insert\" === change.type;\n      const {\n        key: key\n      } = change;\n      each(items, (i, item) => {\n        if (equalByValue(key, isInsert ? item.key : this._dataController.keyOf(item))) {\n          index = i;\n          return false;\n        }\n        return;\n      });\n      return index;\n    };\n    items = super.processItems(items, changeType);\n    const itemsCount = items.length;\n    if (this.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\n      changes.forEach(change => {\n        const {\n          key: key\n        } = change;\n        const validationData = this._validatingController._getValidationData(key);\n        if (validationData && change.type && validationData.pageIndex === this._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== this._pageIndex) {\n          !function (change, validationData) {\n            const data = {\n              key: change.key\n            };\n            const index = getIndexByChange(change, items);\n            if (index >= 0) {\n              return;\n            }\n            validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\n            const {\n              rowIndex: rowIndex\n            } = validationData;\n            data[INSERT_INDEX] = 1;\n            items.splice(rowIndex, 0, data);\n          }(change, validationData);\n        }\n      });\n    }\n    return items;\n  }\n  processDataItem(item) {\n    const isInserted = item.data[INSERT_INDEX];\n    const key = isInserted ? item.data.key : item.key;\n    const editMode = this.getEditMode();\n    if (editMode === EDIT_MODE_BATCH && isInserted && key) {\n      const changes = this.getChanges();\n      const editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      if (editIndex >= 0) {\n        const change = changes[editIndex];\n        if (\"insert\" !== change.type) {\n          const oldData = this._getOldData(change.key);\n          item.data = extend(true, {}, oldData, change.data);\n          item.key = key;\n        }\n      }\n    }\n    super.processDataItem.apply(this, arguments);\n  }\n  _createInvisibleColumnValidators(changes) {\n    const that = this;\n    const columns = this._columnsController.getColumns();\n    const invisibleColumns = this._columnsController.getInvisibleColumns().filter(column => !column.isBand);\n    const groupColumns = this._columnsController.getGroupColumns().filter(column => !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column));\n    const invisibleColumnValidators = [];\n    const isCellVisible = (column, rowKey) => this._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;\n    invisibleColumns.push(...groupColumns);\n    if (!FORM_BASED_MODES.includes(this.getEditMode())) {\n      each(columns, (_, column) => {\n        changes.forEach(change => {\n          let data;\n          if (isCellVisible(column, change.key)) {\n            return;\n          }\n          if (\"insert\" === change.type) {\n            data = change.data;\n          } else if (\"update\" === change.type) {\n            const oldData = that._getOldData(change.key);\n            if (!isDefined(oldData)) {\n              return;\n            }\n            data = createObjectWithChanges(oldData, change.data);\n          }\n          if (data) {\n            const validator = this._validatingController.createValidator({\n              column: column,\n              key: change.key,\n              value: column.calculateCellValue(data)\n            });\n            if (validator) {\n              invisibleColumnValidators.push(validator);\n            }\n          }\n        });\n      });\n    }\n    return function () {\n      invisibleColumnValidators.forEach(validator => {\n        validator.dispose();\n      });\n    };\n  }\n  _beforeSaveEditData(change, editIndex) {\n    let result = super._beforeSaveEditData.apply(this, arguments);\n    const validationData = this._validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key, true);\n    if (change) {\n      const isValid = \"remove\" === change.type || validationData.isValid;\n      result = result || !isValid;\n    } else {\n      const disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\n      result = new Deferred();\n      this.executeOperation(result, () => {\n        this._validatingController.validate(true).done(isFullValid => {\n          disposeValidators();\n          this._updateRowAndPageIndices();\n          switch (this.getEditMode()) {\n            case EDIT_MODE_CELL:\n              if (!isFullValid) {\n                this._focusEditingCell();\n              }\n              break;\n            case EDIT_MODE_BATCH:\n              if (!isFullValid) {\n                this._resetEditRowKey();\n                this._resetEditColumnName();\n                this._dataController.updateItems();\n              }\n          }\n          result.resolve(!isFullValid);\n        });\n      });\n    }\n    return result.promise ? result.promise() : result;\n  }\n  _beforeEditCell(rowIndex, columnIndex, item) {\n    const result = super._beforeEditCell(rowIndex, columnIndex, item);\n    if (this.getEditMode() === EDIT_MODE_CELL) {\n      const $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\n      const validator = $cell && $cell.data(\"dxValidator\");\n      const rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\n      const value = validator && validator.option(\"adapter\").getValue();\n      if (validator && cellValueShouldBeValidated(value, rowOptions)) {\n        const deferred = new Deferred();\n        when(this._validatingController.validateCell(validator), result).done((validationResult, result) => {\n          deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result);\n        });\n        return deferred.promise();\n      }\n      if (!validator) {\n        return result;\n      }\n    }\n    return false;\n  }\n  _afterSaveEditData(cancel) {\n    let $firstErrorRow;\n    const isCellEditMode = this.getEditMode() === EDIT_MODE_CELL;\n    each(this.getChanges(), (_, change) => {\n      const $errorRow = this._showErrorRow(change);\n      $firstErrorRow = $firstErrorRow || $errorRow;\n    });\n    if ($firstErrorRow) {\n      const scrollable = this._rowsView.getScrollable();\n      if (scrollable) {\n        scrollable.update();\n        scrollable.scrollToElement($firstErrorRow);\n      }\n    }\n    if (cancel && isCellEditMode && this._needUpdateRow()) {\n      const editRowIndex = this.getEditRowIndex();\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [editRowIndex]\n      });\n      this._focusEditingCell();\n    } else if (!cancel) {\n      let shouldResetValidationState = true;\n      if (isCellEditMode) {\n        const columns = this._columnsController.getColumns();\n        const columnsWithValidatingEditors = columns.filter(col => {\n          var _col$validationRules;\n          return col.showEditorAlways && (null === (_col$validationRules = col.validationRules) || void 0 === _col$validationRules ? void 0 : _col$validationRules.length) > 0;\n        }).length > 0;\n        shouldResetValidationState = !columnsWithValidatingEditors;\n      }\n      if (shouldResetValidationState) {\n        this._validatingController.initValidationState();\n      }\n    }\n  }\n  _handleDataChanged(args) {\n    const validationState = this._validatingController._validationState;\n    if (\"standard\" === this.option(\"scrolling.mode\")) {\n      this.resetRowAndPageIndices();\n    }\n    if (\"prepend\" === args.changeType) {\n      each(validationState, (_, validationData) => {\n        validationData.rowIndex += args.items.length;\n      });\n    }\n    super._handleDataChanged(args);\n  }\n  resetRowAndPageIndices() {\n    const validationState = this._validatingController._validationState;\n    each(validationState, (_, validationData) => {\n      if (validationData.pageIndex !== this._pageIndex) {\n        delete validationData.pageIndex;\n        delete validationData.rowIndex;\n      }\n    });\n  }\n  _beforeCancelEditData() {\n    this._validatingController.initValidationState();\n    super._beforeCancelEditData();\n  }\n  _showErrorRow(change) {\n    let $popupContent;\n    const items = this._dataController.items();\n    const rowIndex = this.getIndexByKey(change.key, items);\n    const validationData = this._validatingController._getValidationData(change.key);\n    if (!(null !== validationData && void 0 !== validationData && validationData.isValid) && null !== validationData && void 0 !== validationData && validationData.errorText && rowIndex >= 0) {\n      $popupContent = this.getPopupContent();\n      return this._errorHandlingController && this._errorHandlingController.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent);\n    }\n  }\n  updateFieldValue(e) {\n    const deferred = new Deferred();\n    this._validatingController.removeCellValidationResult({\n      change: this.getChangeByKey(e.key),\n      columnIndex: e.column.index\n    });\n    super.updateFieldValue.apply(this, arguments).done(() => {\n      const currentValidator = this._validatingController.getCellValidator({\n        rowKey: e.key,\n        columnIndex: e.column.index\n      });\n      when(currentValidator && this._validatingController.validateCell(currentValidator)).done(validationResult => {\n        this._editorFactoryController.refocus();\n        deferred.resolve(validationResult);\n      });\n    });\n    return deferred.promise();\n  }\n  highlightDataCell($cell, parameters) {\n    super.highlightDataCell.apply(this, arguments);\n    this._validatingController.setCellValidationStatus(parameters);\n    const isEditableCell = !!parameters.setValue;\n    const cellModified = this.isCellModified(parameters);\n    const isValidated = isDefined(parameters.validationStatus);\n    const needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\n    if (needValidation) {\n      const validator = $cell.data(\"dxValidator\");\n      if (validator) {\n        when(this._validatingController.validateCell(validator)).done(() => {\n          this._validatingController.setCellValidationStatus(parameters);\n        });\n      }\n    }\n  }\n  getChangeByKey(key) {\n    const changes = this.getChanges();\n    return changes[gridCoreUtils.getIndexByKey(key, changes)];\n  }\n  isCellModified(parameters) {\n    const cellModified = super.isCellModified(parameters);\n    const change = this.getChangeByKey(parameters.key);\n    const isCellInvalid = !!parameters.row && this._validatingController.isInvalidCell({\n      rowKey: parameters.key,\n      columnIndex: parameters.column.index\n    });\n    return cellModified || this._validatingController._rowIsValidated(change) && isCellInvalid;\n  }\n};\nconst getWidthOfVisibleCells = function (that, element) {\n  const rowIndex = $(element).closest(\"tr\").index();\n  const $cellElements = $(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\n  return that._rowsView._getWidths($cellElements).reduce((w1, w2) => w1 + w2, 0);\n};\nconst getBoundaryNonFixedColumnsInfo = function (fixedColumns) {\n  let firstNonFixedColumnIndex;\n  let lastNonFixedColumnIndex;\n  fixedColumns.some((column, index) => {\n    if (\"transparent\" === column.command) {\n      firstNonFixedColumnIndex = 0 === index ? -1 : index;\n      lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\n      return true;\n    }\n    return;\n  });\n  return {\n    startColumnIndex: firstNonFixedColumnIndex,\n    endColumnIndex: lastNonFixedColumnIndex\n  };\n};\nexport const validatingEditorFactoryExtender = Base => class extends Base {\n  _showRevertButton($container) {\n    var _this$_revertTooltip, _$tooltipElement2;\n    let $tooltipElement = null === (_this$_revertTooltip = this._revertTooltip) || void 0 === _this$_revertTooltip ? void 0 : _this$_revertTooltip.$element();\n    if (!$container || !$container.length) {\n      var _$tooltipElement;\n      null === (_$tooltipElement = $tooltipElement) || void 0 === _$tooltipElement || _$tooltipElement.remove();\n      this._revertTooltip = void 0;\n      return;\n    }\n    if ($container.find($tooltipElement).length) {\n      var _this$_revertTooltip2;\n      null === (_this$_revertTooltip2 = this._revertTooltip) || void 0 === _this$_revertTooltip2 || _this$_revertTooltip2.repaint();\n      return;\n    }\n    const $overlayContainer = this.getRevertButtonContainer($container);\n    const revertTooltipClass = this.addWidgetPrefix(\"revert-tooltip\");\n    null === (_$tooltipElement2 = $tooltipElement) || void 0 === _$tooltipElement2 || _$tooltipElement2.remove();\n    $tooltipElement = $(\"<div>\").addClass(revertTooltipClass).appendTo($container);\n    const tooltipOptions = {\n      animation: null,\n      visible: true,\n      width: \"auto\",\n      height: \"auto\",\n      shading: false,\n      container: $overlayContainer,\n      propagateOutsideClick: true,\n      hideOnOutsideClick: false,\n      wrapperAttr: {\n        class: revertTooltipClass\n      },\n      contentTemplate: () => {\n        const $buttonElement = $(\"<div>\").addClass(\"dx-revert-button\");\n        const buttonOptions = {\n          icon: \"revert\",\n          hint: this.option(\"editing.texts.validationCancelChanges\"),\n          elementAttr: {\n            id: \"dxRevertButton\",\n            \"aria-label\": messageLocalization.format(\"dxDataGrid-ariaRevertButton\")\n          },\n          onClick: () => {\n            this._editingController.cancelEditData();\n          }\n        };\n        return new Button($buttonElement, buttonOptions).$element();\n      },\n      position: {\n        my: \"left top\",\n        at: \"right top\",\n        offset: \"1 0\",\n        collision: \"flip\",\n        boundaryOffset: \"0 0\",\n        boundary: this._rowsView.element(),\n        of: $container\n      },\n      onPositioned: this.overlayPositionedHandler.bind(this)\n    };\n    this._revertTooltip = new Overlay($tooltipElement, tooltipOptions);\n  }\n  _hideFixedGroupCell($cell, overlayOptions) {\n    var _this$_rowsView, _this$_rowsView$isFix;\n    let $nextFixedRowElement;\n    let $groupCellElement;\n    const isFixedColumns = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView || null === (_this$_rowsView$isFix = _this$_rowsView.isFixedColumns) || void 0 === _this$_rowsView$isFix ? void 0 : _this$_rowsView$isFix.call(_this$_rowsView);\n    const isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();\n    if (isFixedColumns && !isFormOrPopupEditMode) {\n      const nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\n      if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\n        $nextFixedRowElement = $(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\n        $groupCellElement = $nextFixedRowElement.find(\".dx-group-cell\");\n        if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\n          $groupCellElement.css(\"visibility\", \"hidden\");\n          overlayOptions.onDisposing = function () {\n            $groupCellElement.css(\"visibility\", \"\");\n          };\n        }\n      }\n    }\n  }\n  _showValidationMessage($cell, messages, alignment) {\n    const editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\n    const isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\n    const myPosition = isOverlayVisible ? \"top right\" : `top ${alignment}`;\n    const atPosition = isOverlayVisible ? \"top left\" : `bottom ${alignment}`;\n    const $overlayContainer = this.getValidationMessageContainer($cell);\n    let errorMessageText = \"\";\n    messages && messages.forEach(message => {\n      errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + encodeHtml(message);\n    });\n    const invalidMessageClass = this.addWidgetPrefix(\"invalid-message\");\n    this._rowsView.element().find(`.${invalidMessageClass}`).remove();\n    const $overlayElement = $(\"<div>\").addClass(\"dx-invalid-message\").addClass(\"dx-invalid-message-always\").addClass(invalidMessageClass).html(errorMessageText).appendTo($cell);\n    const overlayOptions = {\n      container: $overlayContainer,\n      shading: false,\n      width: \"auto\",\n      height: \"auto\",\n      visible: true,\n      animation: false,\n      propagateOutsideClick: true,\n      hideOnOutsideClick: false,\n      wrapperAttr: {\n        id: \"dxInvalidMessage\",\n        class: `dx-invalid-message dx-invalid-message-always ${invalidMessageClass}`\n      },\n      position: {\n        collision: \"flip\",\n        boundary: this._rowsView.element(),\n        boundaryOffset: \"0 0\",\n        offset: {\n          x: 0,\n          y: !isOverlayVisible && browser.mozilla ? -1 : 0\n        },\n        my: myPosition,\n        at: atPosition,\n        of: $cell\n      },\n      onPositioned: e => {\n        this.overlayPositionedHandler(e, isOverlayVisible);\n        this._shiftValidationMessageIfNeed(e.component.$content(), $cell);\n      }\n    };\n    this._hideFixedGroupCell($cell, overlayOptions);\n    new Overlay($overlayElement, overlayOptions);\n  }\n  getValidationMessages() {\n    var _this$_rowsView$eleme;\n    return null === (_this$_rowsView$eleme = this._rowsView.element()) || void 0 === _this$_rowsView$eleme ? void 0 : _this$_rowsView$eleme.find(this._getValidationMessagesSelector());\n  }\n  getRevertButton() {\n    var _this$_revertTooltip3;\n    return $(null === (_this$_revertTooltip3 = this._revertTooltip) || void 0 === _this$_revertTooltip3 ? void 0 : _this$_revertTooltip3.element());\n  }\n  _hideValidationMessage() {\n    var _this$_rowsView$eleme2;\n    const validationMessages = null === (_this$_rowsView$eleme2 = this._rowsView.element()) || void 0 === _this$_rowsView$eleme2 ? void 0 : _this$_rowsView$eleme2.find(this._getValidationMessagesSelector());\n    null === validationMessages || void 0 === validationMessages || validationMessages.remove();\n  }\n  _normalizeValidationMessagePositionAndMaxWidth(options, isRevertButton, isOverlayVisible) {\n    const fixedColumns = this._columnsController.getFixedColumns();\n    if (!fixedColumns || !fixedColumns.length) {\n      return;\n    }\n    let position;\n    const visibleTableWidth = !isRevertButton && getWidthOfVisibleCells(this, options.element);\n    const $overlayContentElement = options.component.$content();\n    const validationMessageWidth = getOuterWidth($overlayContentElement, true);\n    const needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\n    const columnIndex = this._rowsView.getCellIndex($(options.element).closest(\"td\"));\n    const boundaryNonFixedColumnsInfo = getBoundaryNonFixedColumnsInfo(fixedColumns);\n    if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\n      position = {\n        collision: \"none flip\",\n        my: \"top left\",\n        at: isOverlayVisible ? \"top right\" : \"bottom left\"\n      };\n    } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\n      position = {\n        collision: \"none flip\",\n        my: \"top right\",\n        at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\n      };\n      if (isRevertButton) {\n        position.offset = \"-1 0\";\n      }\n    }\n    return position && {\n      position: position,\n      maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\n    };\n  }\n  _shiftValidationMessageIfNeed($content, $cell) {\n    const $revertContent = this._revertTooltip && this._revertTooltip.$content();\n    if (!$revertContent) {\n      return;\n    }\n    const contentOffset = $content.offset();\n    const revertContentOffset = $revertContent.offset();\n    if (contentOffset.top === revertContentOffset.top && contentOffset.left + getWidth($content) > revertContentOffset.left) {\n      const left = getWidth($revertContent) + 2;\n      $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left);\n    }\n  }\n  getOverlayBaseZIndex() {\n    return Overlay.baseZIndex();\n  }\n  overlayPositionedHandler(e, isOverlayVisible) {\n    if (!e.component.__skipPositionProcessing) {\n      const isRevertButton = $(e.element).hasClass(this.addWidgetPrefix(\"revert-tooltip\"));\n      const needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\n      const normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\n      e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\n      if (normalizedPosition) {\n        e.component.option(normalizedPosition);\n      } else if (needRepaint) {\n        e.component.repaint();\n      }\n    }\n  }\n  _getRevertTooltipsSelector() {\n    const revertTooltipClass = this.addWidgetPrefix(\"revert-tooltip\");\n    return `.dx-editor-cell .${revertTooltipClass}`;\n  }\n  _getValidationMessagesSelector() {\n    const invalidMessageClass = this.addWidgetPrefix(\"invalid-message\");\n    return `.dx-editor-cell .${invalidMessageClass}, .dx-cell-modified .${invalidMessageClass}`;\n  }\n  loseFocus(skipValidator) {\n    if (!skipValidator) {\n      this._validatingController.setValidator(null);\n    }\n    super.loseFocus();\n  }\n  updateCellState($element, validationResult, isHideBorder) {\n    var _change$data;\n    const $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n    const $cell = null !== $focus && void 0 !== $focus && $focus.is(\"td\") ? $focus : null;\n    const rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\n    const change = rowOptions ? this._editingController.getChangeByKey(rowOptions.key) : null;\n    const column = $cell && this._columnsController.getVisibleColumns()[$cell.index()];\n    const isCellModified = void 0 !== (null === change || void 0 === change || null === (_change$data = change.data) || void 0 === _change$data ? void 0 : _change$data[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\n    const validationDescriptionValues = [];\n    if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n      if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\n        this._showRevertButton($focus);\n        validationDescriptionValues.push(\"dxRevertButton\");\n      } else {\n        this._revertTooltip && this._revertTooltip.$element().remove();\n      }\n    }\n    const showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\n    if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\n      const errorMessages = [];\n      validationResult.brokenRules.forEach(rule => {\n        if (rule.message) {\n          errorMessages.push(rule.message);\n        }\n      });\n      if (errorMessages.length) {\n        this._showValidationMessage($focus, errorMessages, column.alignment || \"left\");\n        validationDescriptionValues.push(\"dxInvalidMessage\");\n      }\n    }\n    this._updateAriaValidationAttributes($focus, validationDescriptionValues);\n    !isHideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight();\n  }\n  _updateAriaValidationAttributes($focus, inputDescriptionValues) {\n    if (0 === inputDescriptionValues.length) {\n      return;\n    }\n    const editMode = this._editingController.getEditMode();\n    const shouldSetValidationAriaAttributes = [EDIT_MODE_CELL, EDIT_MODE_BATCH, EDIT_MODE_ROW].includes(editMode);\n    if (shouldSetValidationAriaAttributes) {\n      const $focusElement = this._getCurrentFocusElement($focus);\n      $focusElement.attr(\"aria-labelledby\", inputDescriptionValues.join(\" \"));\n      $focusElement.attr(\"aria-invalid\", true);\n    }\n  }\n  _getCurrentFocusElement($focus) {\n    if (this._editingController.isEditing()) {\n      return $focus.find(EDITORS_INPUT_SELECTOR).first();\n    }\n    return $focus;\n  }\n  focus($element, isHideBorder) {\n    if (!arguments.length) {\n      return super.focus();\n    }\n    this._hideValidationMessage();\n    if (null !== $element && void 0 !== $element && $element.hasClass(\"dx-row\") || null !== $element && void 0 !== $element && $element.hasClass(\"dx-master-detail-cell\")) {\n      return super.focus($element, isHideBorder);\n    }\n    const $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n    const validator = $focus && ($focus.data(\"dxValidator\") || $element.find(`.${this.addWidgetPrefix(\"validator\")}`).eq(0).data(\"dxValidator\"));\n    const rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\n    const change = rowOptions ? this._editingController.getChangeByKey(rowOptions.key) : null;\n    let validationResult;\n    if (validator) {\n      this._validatingController.setValidator(validator);\n      const value = validator.option(\"adapter\").getValue();\n      if (cellValueShouldBeValidated(value, rowOptions) || this._validatingController._rowIsValidated(change)) {\n        this._editingController.waitForDeferredOperations().done(() => {\n          const isDetached = !this._rowsView.isElementInside($element);\n          if (isDetached) {\n            return;\n          }\n          when(this._validatingController.validateCell(validator)).done(result => {\n            validationResult = result;\n            const {\n              column: column\n            } = validationResult.validator.option(\"dataGetter\")();\n            if (change && column && !this._validatingController.isCurrentValidatorProcessing({\n              rowKey: change.key,\n              columnIndex: column.index\n            })) {\n              return;\n            }\n            if (!isFluent(current()) && validationResult.status === VALIDATION_STATUS.invalid) {\n              isHideBorder = true;\n            }\n            this.updateCellState($element, validationResult, isHideBorder);\n            super.focus.call(this, $element, isHideBorder);\n          });\n        });\n        return super.focus($element, isHideBorder);\n      }\n    }\n    this.updateCellState($element, validationResult, isHideBorder);\n    return super.focus($element, isHideBorder);\n  }\n  getEditorInstance($container) {\n    const $editor = $container.find(\".dx-texteditor\").eq(0);\n    return gridCoreUtils.getWidgetInstance($editor);\n  }\n  getValidationMessageContainer($cell) {\n    return $cell.closest(`.${this.addWidgetPrefix(\"content\")}`);\n  }\n  getRevertButtonContainer($cell) {\n    return $cell.closest(`.${this.addWidgetPrefix(\"content\")}`).parent();\n  }\n  hasOverlayElements() {\n    const $validationMessageElements = this.getValidationMessages();\n    const $revertButtonElement = this.getRevertButton();\n    return super.hasOverlayElements() || !!(null !== $validationMessageElements && void 0 !== $validationMessageElements && $validationMessageElements.length) || !!(null !== $revertButtonElement && void 0 !== $revertButtonElement && $revertButtonElement.length);\n  }\n};\nexport const validatingDataControllerExtender = Base => class extends Base {\n  _getValidationStatus(validationResult) {\n    const validationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\n    return validationStatus || VALIDATION_STATUS.valid;\n  }\n  _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n    var _oldRow$cells, _cell$column$validati;\n    const cell = null === (_oldRow$cells = oldRow.cells) || void 0 === _oldRow$cells ? void 0 : _oldRow$cells[columnIndex];\n    const oldValidationStatus = this._getValidationStatus({\n      status: null === cell || void 0 === cell ? void 0 : cell.validationStatus\n    });\n    const validationResult = this._validatingController.getCellValidationResult({\n      rowKey: oldRow.key,\n      columnIndex: columnIndex\n    });\n    const validationData = this._validatingController._getValidationData(oldRow.key);\n    const newValidationStatus = this._getValidationStatus(validationResult);\n    const rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\n    const validationStatusChanged = oldValidationStatus !== newValidationStatus && rowIsModified;\n    const cellIsMarkedAsInvalid = $(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(\"invalid\"));\n    const hasValidationRules = null === cell || void 0 === cell || null === (_cell$column$validati = cell.column.validationRules) || void 0 === _cell$column$validati ? void 0 : _cell$column$validati.length;\n    const rowEditStateChanged = oldRow.isEditing !== newRow.isEditing && hasValidationRules;\n    const cellValidationStateChanged = validationStatusChanged || validationData.isValid && cellIsMarkedAsInvalid;\n    if (rowEditStateChanged || cellValidationStateChanged) {\n      return true;\n    }\n    return super._isCellChanged.apply(this, arguments);\n  }\n};\nexport const validatingRowsViewExtender = Base => class extends Base {\n  updateFreeSpaceRowHeight($table) {\n    const that = this;\n    let $rowElements;\n    let $freeSpaceRowElement;\n    let $freeSpaceRowElements;\n    const $element = that.element();\n    const $tooltipContent = $element && $element.find(`.${that.addWidgetPrefix(\"invalid-message\")} .dx-overlay-content`);\n    super.updateFreeSpaceRowHeight($table);\n    if ($tooltipContent && $tooltipContent.length) {\n      $rowElements = that._getRowElements();\n      $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\n      $freeSpaceRowElement = $freeSpaceRowElements.first();\n      if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || getOuterHeight($tooltipContent) > getOuterHeight($freeSpaceRowElement))) {\n        $freeSpaceRowElements.show();\n        setHeight($freeSpaceRowElements, getOuterHeight($tooltipContent));\n        return true;\n      }\n    }\n    return;\n  }\n  _formItemPrepared(cellOptions, $container) {\n    super._formItemPrepared.apply(this, arguments);\n    deferUpdate(() => {\n      const $editor = $container.find(\".dx-widget\").first();\n      const isEditorDisposed = $editor.length && !$editor.children().length;\n      if (!isEditorDisposed) {\n        this._validatingController.createValidator(cellOptions, $editor);\n      }\n    });\n  }\n  _cellPrepared($cell, parameters) {\n    if (!this._editingController.isFormOrPopupEditMode()) {\n      this._validatingController.createValidator(parameters, $cell);\n    }\n    super._cellPrepared.apply(this, arguments);\n  }\n  _restoreErrorRow(contentTable) {\n    this._editingController && this._editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {\n      const rowOptions = $(item).data(\"options\");\n      if (rowOptions) {\n        const change = this._editingController.getChangeByKey(rowOptions.key);\n        change && this._editingController._showErrorRow(change);\n      }\n    });\n  }\n};\nexport const validatingModule = {\n  defaultOptions: () => ({\n    editing: {\n      texts: {\n        validationCancelChanges: messageLocalization.format(\"dxDataGrid-validationCancelChanges\")\n      }\n    }\n  }),\n  controllers: {\n    validating: ValidatingController\n  },\n  extenders: {\n    controllers: {\n      editing: validatingEditingExtender,\n      editorFactory: validatingEditorFactoryExtender,\n      data: validatingDataControllerExtender\n    },\n    views: {\n      rowsView: validatingRowsViewExtender\n    }\n  }\n};","map":{"version":3,"names":["eventsEngine","pointerEvents","messageLocalization","createObjectWithChanges","$","browser","deferUpdate","equalByValue","getKeyHash","Deferred","fromPromise","when","extend","each","getOuterHeight","getOuterWidth","getWidth","setHeight","encodeHtml","isDefined","isEmptyObject","isObject","Button","LoadIndicator","Overlay","current","isFluent","ValidationEngine","Validator","focused","errors","EDITORS_INPUT_SELECTOR","modules","gridCoreUtils","INVALIDATE_CLASS","REVERT_TOOLTIP_CLASS","INVALID_MESSAGE_CLASS","INVALID_MESSAGE_ID","WIDGET_INVALID_MESSAGE_CLASS","INVALID_MESSAGE_ALWAYS_CLASS","REVERT_BUTTON_CLASS","REVERT_BUTTON_ID","VALIDATOR_CLASS","PENDING_INDICATOR_CLASS","VALIDATION_PENDING_CLASS","CONTENT_CLASS","INSERT_INDEX","PADDING_BETWEEN_TOOLTIPS","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_BATCH","EDIT_MODE_CELL","EDIT_MODE_POPUP","GROUP_CELL_CLASS","FORM_BASED_MODES","COMMAND_TRANSPARENT","VALIDATION_STATUS","valid","invalid","pending","EDIT_DATA_INSERT_TYPE","EDIT_DATA_REMOVE_TYPE","VALIDATION_CANCELLED","validationResultIsValid","result","cellValueShouldBeValidated","value","rowOptions","isNewRow","ValidatingController","Controller","constructor","arguments","_isValidationInProgress","_disableApplyValidationResults","init","_editingController","getController","_editorFactoryController","_columnsController","createAction","_validationState","initValidationState","_validationStateCache","_rowIsValidated","change","validationData","_getValidationData","key","validated","create","keyHash","isObjectKeyHash","filter","data","isValid","push","_getBrokenRules","validationResults","brokenRules","brokenRule","_rowValidating","deferred","getChangeByKey","parameters","newData","oldData","_getOldData","promise","errorText","getHiddenValidatorsErrorText","executeAction","always","resolve","brokenRulesMessages","_","column","isGroupExpandColumn","groupIndex","showWhenGrouped","isVisibleColumn","visible","validator","$element","parent","length","message","join","validate","isFull","editingController","completeList","editMode","getEditMode","addDeferred","changes","getChanges","index","_ref","type","validationResult","validateGroup","done","_currentCellValidator","_findGroup","_validationResult","getGroupConfig","validators","resetRowValidationResults","complete","isRowDataModified","updateValidationState","includes","setDisableApplyValidationResults","groupConfig","setValidator","renderCellPendingIndicator","$container","$indicator","find","$indicatorContainer","appendTo","addClass","_createComponent","disposeCellPendingIndicator","indicator","getInstance","dispose","remove","removeClass","validationStatusChanged","validationGroup","option","updateCellValidationResult","rowKey","columnIndex","validatorInitialized","arg","component","on","bind","validatorDisposing","getCellValidationResult","status","cancelCellValidationResult","applyValidationResult","forEach","rule","requestIsDisabled","disabledPendingId","id","$focus","trigger","down","editor","editCellTemplate","getEditorInstance","toggleClass","addWidgetPrefix","_syncInternalEditingData","_parameters$row","oldDataFromState","row","_addInternalData","createValidator","showEditorAlways","command","validationRules","Array","isArray","editIndex","getIndexByKey","needCreateValidator","_this$_columnsControl","visibleColumns","getVisibleColumns","some","isEditRow","isCellOrBatchEditingAllowed","isCellOrBatchEditMode","allowUpdating","_parameters$row2","log","getValue","calculateCellValue","useDefaultValidator","hasClass","name","caption","adapter","applyValidationResults","dataGetter","onInitialized","onDisposing","originBypass","bypass","defaultAdapterBypass","isCellModified","validationRequestsCallbacks","call","flag","getDisableApplyValidationResults","isCurrentValidatorProcessing","_ref2","validateCell","cellParams","stateRestored","currentCellValue","_ref3","_ref4","_validationData$valid","removeCellValidationResult","_ref5","_ref6","reject","isInvalidCell","_ref7","getCellValidator","_ref8","v","setCellValidationStatus","cellOptions","validationStatus","validatingEditingExtender","Base","processDataItemTreeListHack","item","processDataItem","apply","processItemsTreeListHack","items","e","processItems","_addChange","changeParams","_validatingController","_handleChangesChange","args","_updateRowAndPageIndices","that","startInsertIndex","getView","getTopVisibleItemIndex","rowIndex","_ref9","pageIndex","_pageIndex","_getValidationGroupsInForm","detailOptions","_validateEditFormAfterUpdate","isCustomSetCellValue","_editForm","_prepareEditCell","params","isNotCanceled","changeType","getIndexByChange","isInsert","i","_dataController","keyOf","itemsCount","splice","isInserted","_createInvisibleColumnValidators","columns","getColumns","invisibleColumns","getInvisibleColumns","isBand","groupColumns","getGroupColumns","indexOf","invisibleColumnValidators","isCellVisible","getRowIndexByKey","_beforeSaveEditData","disposeValidators","executeOperation","isFullValid","_focusEditingCell","_resetEditRowKey","_resetEditColumnName","updateItems","_beforeEditCell","$cell","_rowsView","_getCellElement","closest","_afterSaveEditData","cancel","$firstErrorRow","isCellEditMode","$errorRow","_showErrorRow","scrollable","getScrollable","update","scrollToElement","_needUpdateRow","editRowIndex","getEditRowIndex","rowIndices","shouldResetValidationState","columnsWithValidatingEditors","col","_col$validationRules","_handleDataChanged","validationState","resetRowAndPageIndices","_beforeCancelEditData","$popupContent","getPopupContent","_errorHandlingController","renderErrorRow","updateFieldValue","currentValidator","refocus","highlightDataCell","isEditableCell","setValue","cellModified","isValidated","needValidation","setCellValue","isCellInvalid","getWidthOfVisibleCells","element","$cellElements","getRowElement","first","children","_getWidths","reduce","w1","w2","getBoundaryNonFixedColumnsInfo","fixedColumns","firstNonFixedColumnIndex","lastNonFixedColumnIndex","colspan","startColumnIndex","endColumnIndex","validatingEditorFactoryExtender","_showRevertButton","_this$_revertTooltip","_$tooltipElement2","$tooltipElement","_revertTooltip","_$tooltipElement","_this$_revertTooltip2","repaint","$overlayContainer","getRevertButtonContainer","revertTooltipClass","tooltipOptions","animation","width","height","shading","container","propagateOutsideClick","hideOnOutsideClick","wrapperAttr","class","contentTemplate","$buttonElement","buttonOptions","icon","hint","elementAttr","format","onClick","cancelEditData","position","my","at","offset","collision","boundaryOffset","boundary","of","onPositioned","overlayPositionedHandler","_hideFixedGroupCell","overlayOptions","_this$_rowsView","_this$_rowsView$isFix","$nextFixedRowElement","$groupCellElement","isFixedColumns","isFormOrPopupEditMode","nextRowOptions","next","rowType","last","get","style","visibility","css","_showValidationMessage","messages","alignment","editorPopup","isOverlayVisible","myPosition","atPosition","getValidationMessageContainer","errorMessageText","invalidMessageClass","$overlayElement","html","x","y","mozilla","_shiftValidationMessageIfNeed","$content","getValidationMessages","_this$_rowsView$eleme","_getValidationMessagesSelector","getRevertButton","_this$_revertTooltip3","_hideValidationMessage","_this$_rowsView$eleme2","validationMessages","_normalizeValidationMessagePositionAndMaxWidth","options","isRevertButton","getFixedColumns","visibleTableWidth","$overlayContentElement","validationMessageWidth","needMaxWidth","getCellIndex","boundaryNonFixedColumnsInfo","maxWidth","$revertContent","contentOffset","revertContentOffset","top","left","getOverlayBaseZIndex","baseZIndex","__skipPositionProcessing","needRepaint","updateFreeSpaceRowHeight","normalizedPosition","_getRevertTooltipsSelector","loseFocus","skipValidator","updateCellState","isHideBorder","_change$data","_getFocusCellSelector","is","isSaving","validationDescriptionValues","showValidationMessage","errorMessages","_updateAriaValidationAttributes","inputDescriptionValues","shouldSetValidationAriaAttributes","$focusElement","_getCurrentFocusElement","attr","isEditing","focus","eq","waitForDeferredOperations","isDetached","isElementInside","$editor","getWidgetInstance","hasOverlayElements","$validationMessageElements","$revertButtonElement","validatingDataControllerExtender","_getValidationStatus","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","_oldRow$cells","_cell$column$validati","cell","cells","oldValidationStatus","newValidationStatus","rowIsModified","JSON","stringify","modifiedValues","cellIsMarkedAsInvalid","cellElement","hasValidationRules","rowEditStateChanged","cellValidationStateChanged","validatingRowsViewExtender","$table","$rowElements","$freeSpaceRowElement","$freeSpaceRowElements","$tooltipContent","_getRowElements","_getFreeSpaceRowElements","show","_formItemPrepared","isEditorDisposed","_cellPrepared","_restoreErrorRow","contentTable","hasChanges","validatingModule","defaultOptions","editing","texts","validationCancelChanges","controllers","validating","extenders","editorFactory","views","rowsView"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/validating/m_validating.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/validating/m_validating.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport pointerEvents from \"../../../../common/core/events/pointer\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../../../common/data/array_utils\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    deferUpdate,\r\n    equalByValue,\r\n    getKeyHash\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    Deferred,\r\n    fromPromise,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    getWidth,\r\n    setHeight\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    encodeHtml\r\n} from \"../../../../core/utils/string\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isObject\r\n} from \"../../../../core/utils/type\";\r\nimport Button from \"../../../../ui/button\";\r\nimport LoadIndicator from \"../../../../ui/load_indicator\";\r\nimport Overlay from \"../../../../ui/overlay/ui.overlay\";\r\nimport {\r\n    current,\r\n    isFluent\r\n} from \"../../../../ui/themes\";\r\nimport ValidationEngine from \"../../../../ui/validation_engine\";\r\nimport Validator from \"../../../../ui/validator\";\r\nimport {\r\n    focused\r\n} from \"../../../../ui/widget/selectors\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport {\r\n    EDITORS_INPUT_SELECTOR\r\n} from \"../editing/const\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nconst INVALIDATE_CLASS = \"invalid\";\r\nconst REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nconst INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\r\nconst INVALID_MESSAGE_ID = \"dxInvalidMessage\";\r\nconst WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\r\nconst INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\r\nconst REVERT_BUTTON_CLASS = \"dx-revert-button\";\r\nconst REVERT_BUTTON_ID = \"dxRevertButton\";\r\nconst VALIDATOR_CLASS = \"validator\";\r\nconst PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\r\nconst VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\r\nconst CONTENT_CLASS = \"content\";\r\nconst INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nconst PADDING_BETWEEN_TOOLTIPS = 2;\r\nconst EDIT_MODE_ROW = \"row\";\r\nconst EDIT_MODE_FORM = \"form\";\r\nconst EDIT_MODE_BATCH = \"batch\";\r\nconst EDIT_MODE_CELL = \"cell\";\r\nconst EDIT_MODE_POPUP = \"popup\";\r\nconst GROUP_CELL_CLASS = \"dx-group-cell\";\r\nconst FORM_BASED_MODES = [\"popup\", \"form\"];\r\nconst COMMAND_TRANSPARENT = \"transparent\";\r\nconst VALIDATION_STATUS = {\r\n    valid: \"valid\",\r\n    invalid: \"invalid\",\r\n    pending: \"pending\"\r\n};\r\nconst EDIT_DATA_INSERT_TYPE = \"insert\";\r\nconst EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nconst VALIDATION_CANCELLED = \"cancel\";\r\nconst validationResultIsValid = function(result) {\r\n    return isDefined(result) && \"cancel\" !== result\r\n};\r\nconst cellValueShouldBeValidated = function(value, rowOptions) {\r\n    return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow\r\n};\r\nexport class ValidatingController extends modules.Controller {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._isValidationInProgress = false;\r\n        this._disableApplyValidationResults = false\r\n    }\r\n    init() {\r\n        this._editingController = this.getController(\"editing\");\r\n        this._editorFactoryController = this.getController(\"editorFactory\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this.createAction(\"onRowValidating\");\r\n        if (!this._validationState) {\r\n            this.initValidationState()\r\n        }\r\n    }\r\n    initValidationState() {\r\n        this._validationState = [];\r\n        this._validationStateCache = {}\r\n    }\r\n    _rowIsValidated(change) {\r\n        const validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n        return !!validationData && !!validationData.validated\r\n    }\r\n    _getValidationData(key, create) {\r\n        const keyHash = getKeyHash(key);\r\n        const isObjectKeyHash = isObject(keyHash);\r\n        let validationData;\r\n        if (isObjectKeyHash) {\r\n            validationData = this._validationState.filter((data => equalByValue(data.key, key)))[0]\r\n        } else {\r\n            validationData = this._validationStateCache[keyHash]\r\n        }\r\n        if (!validationData && create) {\r\n            validationData = {\r\n                key: key,\r\n                isValid: true\r\n            };\r\n            this._validationState.push(validationData);\r\n            if (!isObjectKeyHash) {\r\n                this._validationStateCache[keyHash] = validationData\r\n            }\r\n        }\r\n        return validationData\r\n    }\r\n    _getBrokenRules(validationData, validationResults) {\r\n        let brokenRules;\r\n        if (validationResults) {\r\n            brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule]\r\n        } else {\r\n            brokenRules = validationData.brokenRules || []\r\n        }\r\n        return brokenRules\r\n    }\r\n    _rowValidating(validationData, validationResults) {\r\n        const deferred = new Deferred;\r\n        const change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\r\n        const brokenRules = this._getBrokenRules(validationData, validationResults);\r\n        const isValid = validationResults ? validationResults.isValid : validationData.isValid;\r\n        const parameters = {\r\n            brokenRules: brokenRules,\r\n            isValid: isValid,\r\n            key: change.key,\r\n            newData: change.data,\r\n            oldData: this._editingController._getOldData(change.key),\r\n            promise: null,\r\n            errorText: this.getHiddenValidatorsErrorText(brokenRules)\r\n        };\r\n        this.executeAction(\"onRowValidating\", parameters);\r\n        when(fromPromise(parameters.promise)).always((() => {\r\n            validationData.isValid = parameters.isValid;\r\n            validationData.errorText = parameters.errorText;\r\n            deferred.resolve(parameters)\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n    getHiddenValidatorsErrorText(brokenRules) {\r\n        const brokenRulesMessages = [];\r\n        each(brokenRules, ((_, brokenRule) => {\r\n            const {\r\n                column: column\r\n            } = brokenRule;\r\n            const isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\r\n            const isVisibleColumn = column && column.visible;\r\n            if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\r\n                brokenRulesMessages.push(brokenRule.message)\r\n            }\r\n        }));\r\n        return brokenRulesMessages.join(\", \")\r\n    }\r\n    validate(isFull) {\r\n        let isValid = true;\r\n        const editingController = this._editingController;\r\n        const deferred = new Deferred;\r\n        const completeList = [];\r\n        const editMode = editingController.getEditMode();\r\n        isFull = isFull || editMode === EDIT_MODE_ROW;\r\n        if (this._isValidationInProgress) {\r\n            return deferred.resolve(false).promise()\r\n        }\r\n        this._isValidationInProgress = true;\r\n        if (isFull) {\r\n            editingController.addDeferred(deferred);\r\n            const changes = editingController.getChanges();\r\n            each(changes, ((index, _ref) => {\r\n                let {\r\n                    type: type,\r\n                    key: key\r\n                } = _ref;\r\n                if (\"remove\" !== type) {\r\n                    const validationData = this._getValidationData(key, true);\r\n                    const validationResult = this.validateGroup(validationData);\r\n                    completeList.push(validationResult);\r\n                    validationResult.done((validationResult => {\r\n                        validationData.validated = true;\r\n                        isValid = isValid && validationResult.isValid\r\n                    }))\r\n                }\r\n            }))\r\n        } else if (this._currentCellValidator) {\r\n            const validationResult = this.validateGroup(this._currentCellValidator._findGroup());\r\n            completeList.push(validationResult);\r\n            validationResult.done((validationResult => {\r\n                isValid = validationResult.isValid\r\n            }))\r\n        }\r\n        when(...completeList).done((() => {\r\n            this._isValidationInProgress = false;\r\n            deferred.resolve(isValid)\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n    validateGroup(validationData) {\r\n        var _validationResult;\r\n        const result = new Deferred;\r\n        const validateGroup = validationData && ValidationEngine.getGroupConfig(validationData);\r\n        let validationResult;\r\n        if (null !== validateGroup && void 0 !== validateGroup && validateGroup.validators.length) {\r\n            this.resetRowValidationResults(validationData);\r\n            validationResult = ValidationEngine.validateGroup(validationData)\r\n        }\r\n        when((null === (_validationResult = validationResult) || void 0 === _validationResult ? void 0 : _validationResult.complete) || validationResult).done((validationResult => {\r\n            when(this._rowValidating(validationData, validationResult)).done(result.resolve)\r\n        }));\r\n        return result.promise()\r\n    }\r\n    isRowDataModified(change) {\r\n        return !isEmptyObject(change.data)\r\n    }\r\n    updateValidationState(change) {\r\n        const editMode = this._editingController.getEditMode();\r\n        const {\r\n            key: key\r\n        } = change;\r\n        const validationData = this._getValidationData(key, true);\r\n        if (!FORM_BASED_MODES.includes(editMode)) {\r\n            if (\"insert\" === change.type && !this.isRowDataModified(change)) {\r\n                validationData.isValid = true;\r\n                return\r\n            }\r\n            this.setDisableApplyValidationResults(true);\r\n            const groupConfig = ValidationEngine.getGroupConfig(validationData);\r\n            if (groupConfig) {\r\n                const validationResult = ValidationEngine.validateGroup(validationData);\r\n                when(validationResult.complete || validationResult).done((validationResult => {\r\n                    validationData.isValid = validationResult.isValid;\r\n                    validationData.brokenRules = validationResult.brokenRules\r\n                }))\r\n            } else if (!validationData.brokenRules || !validationData.brokenRules.length) {\r\n                validationData.isValid = true\r\n            }\r\n            this.setDisableApplyValidationResults(false)\r\n        } else {\r\n            validationData.isValid = true\r\n        }\r\n    }\r\n    setValidator(validator) {\r\n        this._currentCellValidator = validator\r\n    }\r\n    renderCellPendingIndicator($container) {\r\n        let $indicator = $container.find(\".dx-pending-indicator\");\r\n        if (!$indicator.length) {\r\n            const $indicatorContainer = $container;\r\n            $indicator = $(\"<div>\").appendTo($indicatorContainer).addClass(\"dx-pending-indicator\");\r\n            this._createComponent($indicator, LoadIndicator);\r\n            $container.addClass(\"dx-validation-pending\")\r\n        }\r\n    }\r\n    disposeCellPendingIndicator($container) {\r\n        const $indicator = $container.find(\".dx-pending-indicator\");\r\n        if ($indicator.length) {\r\n            const indicator = LoadIndicator.getInstance($indicator);\r\n            if (indicator) {\r\n                indicator.dispose();\r\n                indicator.$element().remove()\r\n            }\r\n            $container.removeClass(\"dx-validation-pending\")\r\n        }\r\n    }\r\n    validationStatusChanged(result) {\r\n        const {\r\n            validator: validator\r\n        } = result;\r\n        const validationGroup = validator.option(\"validationGroup\");\r\n        const {\r\n            column: column\r\n        } = validator.option(\"dataGetter\")();\r\n        this.updateCellValidationResult({\r\n            rowKey: validationGroup.key,\r\n            columnIndex: column.index,\r\n            validationResult: result\r\n        })\r\n    }\r\n    validatorInitialized(arg) {\r\n        arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\r\n        arg.component.on(\"validated\", this.validationStatusChanged.bind(this))\r\n    }\r\n    validatorDisposing(arg) {\r\n        const validator = arg.component;\r\n        const validationGroup = validator.option(\"validationGroup\");\r\n        const {\r\n            column: column\r\n        } = validator.option(\"dataGetter\")();\r\n        const result = this.getCellValidationResult({\r\n            rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\r\n            columnIndex: column.index\r\n        });\r\n        if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\r\n            this.cancelCellValidationResult({\r\n                change: validationGroup,\r\n                columnIndex: column.index\r\n            })\r\n        }\r\n    }\r\n    applyValidationResult($container, result) {\r\n        const {\r\n            validator: validator\r\n        } = result;\r\n        const validationGroup = validator.option(\"validationGroup\");\r\n        const {\r\n            column: column\r\n        } = validator.option(\"dataGetter\")();\r\n        result.brokenRules && result.brokenRules.forEach((rule => {\r\n            rule.columnIndex = column.index;\r\n            rule.column = column\r\n        }));\r\n        if ($container) {\r\n            const validationResult = this.getCellValidationResult({\r\n                rowKey: validationGroup.key,\r\n                columnIndex: column.index\r\n            });\r\n            const requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\r\n            if (this._disableApplyValidationResults || requestIsDisabled) {\r\n                return\r\n            }\r\n            if (result.status === VALIDATION_STATUS.invalid) {\r\n                const $focus = $container.find(\":focus\");\r\n                if (!focused($focus)) {\r\n                    eventsEngine.trigger($focus, \"focus\");\r\n                    eventsEngine.trigger($focus, pointerEvents.down)\r\n                }\r\n            }\r\n            const editor = !column.editCellTemplate && this._editorFactoryController.getEditorInstance($container);\r\n            if (result.status === VALIDATION_STATUS.pending) {\r\n                if (editor) {\r\n                    editor.option(\"validationStatus\", VALIDATION_STATUS.pending)\r\n                } else {\r\n                    this.renderCellPendingIndicator($container)\r\n                }\r\n            } else if (editor) {\r\n                editor.option(\"validationStatus\", VALIDATION_STATUS.valid)\r\n            } else {\r\n                this.disposeCellPendingIndicator($container)\r\n            }\r\n            $container.toggleClass(this.addWidgetPrefix(\"invalid\"), result.status === VALIDATION_STATUS.invalid)\r\n        }\r\n    }\r\n    _syncInternalEditingData(parameters) {\r\n        var _parameters$row;\r\n        const editingController = this._editingController;\r\n        const change = editingController.getChangeByKey(parameters.key);\r\n        const oldDataFromState = editingController._getOldData(parameters.key);\r\n        const oldData = null === (_parameters$row = parameters.row) || void 0 === _parameters$row ? void 0 : _parameters$row.oldData;\r\n        if (change && oldData && !oldDataFromState) {\r\n            editingController._addInternalData({\r\n                key: parameters.key,\r\n                oldData: oldData\r\n            })\r\n        }\r\n    }\r\n    createValidator(parameters, $container) {\r\n        const editingController = this._editingController;\r\n        const {\r\n            column: column\r\n        } = parameters;\r\n        let {\r\n            showEditorAlways: showEditorAlways\r\n        } = column;\r\n        if (isDefined(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\r\n            return\r\n        }\r\n        const editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\r\n        let needCreateValidator = editIndex > -1;\r\n        if (!needCreateValidator) {\r\n            if (!showEditorAlways) {\r\n                var _this$_columnsControl;\r\n                const visibleColumns = (null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.getVisibleColumns()) || [];\r\n                showEditorAlways = visibleColumns.some((column => column.showEditorAlways))\r\n            }\r\n            const isEditRow = equalByValue(this.option(\"editing.editRowKey\"), parameters.key);\r\n            const isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\r\n                row: parameters.row\r\n            });\r\n            needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\r\n            if (isCellOrBatchEditingAllowed && showEditorAlways) {\r\n                var _parameters$row2;\r\n                editingController._addInternalData({\r\n                    key: parameters.key,\r\n                    oldData: (null === (_parameters$row2 = parameters.row) || void 0 === _parameters$row2 ? void 0 : _parameters$row2.oldData) ?? parameters.data\r\n                })\r\n            }\r\n        }\r\n        if (needCreateValidator) {\r\n            if ($container && !$container.length) {\r\n                errors.log(\"E1050\");\r\n                return\r\n            }\r\n            this._syncInternalEditingData(parameters);\r\n            const validationData = this._getValidationData(parameters.key, true);\r\n            const getValue = () => {\r\n                const change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\r\n                const value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\r\n                return void 0 !== value ? value : parameters.value\r\n            };\r\n            const useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\r\n            $container && $container.addClass(this.addWidgetPrefix(\"validator\"));\r\n            const validator = new Validator($container || $(\"<div>\"), {\r\n                name: column.caption,\r\n                validationRules: extend(true, [], column.validationRules),\r\n                validationGroup: validationData,\r\n                adapter: useDefaultValidator ? null : {\r\n                    getValue: getValue,\r\n                    applyValidationResults: result => {\r\n                        this.applyValidationResult($container, result)\r\n                    }\r\n                },\r\n                dataGetter() {\r\n                    const key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\r\n                    const change = editingController.getChangeByKey(key);\r\n                    const oldData = editingController._getOldData(key);\r\n                    return {\r\n                        data: createObjectWithChanges(oldData, null === change || void 0 === change ? void 0 : change.data),\r\n                        column: column\r\n                    }\r\n                },\r\n                onInitialized: this.validatorInitialized.bind(this),\r\n                onDisposing: this.validatorDisposing.bind(this)\r\n            });\r\n            if (useDefaultValidator) {\r\n                const adapter = validator.option(\"adapter\");\r\n                if (adapter) {\r\n                    const originBypass = adapter.bypass;\r\n                    const defaultAdapterBypass = () => parameters.row.isNewRow && !this._isValidationInProgress && !editingController.isCellModified(parameters);\r\n                    adapter.getValue = getValue;\r\n                    adapter.validationRequestsCallbacks = [];\r\n                    adapter.bypass = () => originBypass.call(adapter) || defaultAdapterBypass()\r\n                }\r\n            }\r\n            return validator\r\n        }\r\n        return\r\n    }\r\n    setDisableApplyValidationResults(flag) {\r\n        this._disableApplyValidationResults = flag\r\n    }\r\n    getDisableApplyValidationResults() {\r\n        return this._disableApplyValidationResults\r\n    }\r\n    isCurrentValidatorProcessing(_ref2) {\r\n        let {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        } = _ref2;\r\n        return this._currentCellValidator && equalByValue(this._currentCellValidator.option(\"validationGroup\").key, rowKey) && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex\r\n    }\r\n    validateCell(validator) {\r\n        const cellParams = {\r\n            rowKey: validator.option(\"validationGroup\").key,\r\n            columnIndex: validator.option(\"dataGetter\")().column.index,\r\n            validationResult: null\r\n        };\r\n        let validationResult = this.getCellValidationResult(cellParams);\r\n        const stateRestored = validationResultIsValid(validationResult);\r\n        const adapter = validator.option(\"adapter\");\r\n        if (!stateRestored) {\r\n            validationResult = validator.validate()\r\n        } else {\r\n            const currentCellValue = adapter.getValue();\r\n            if (!equalByValue(currentCellValue, validationResult.value)) {\r\n                validationResult = validator.validate()\r\n            }\r\n        }\r\n        const deferred = new Deferred;\r\n        if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\r\n            this.updateCellValidationResult(cellParams);\r\n            adapter.applyValidationResults(validationResult)\r\n        }\r\n        when(validationResult.complete || validationResult).done((validationResult => {\r\n            stateRestored && adapter.applyValidationResults(validationResult);\r\n            deferred.resolve(validationResult)\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n    updateCellValidationResult(_ref3) {\r\n        let {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex,\r\n            validationResult: validationResult\r\n        } = _ref3;\r\n        const validationData = this._getValidationData(rowKey);\r\n        if (!validationData) {\r\n            return\r\n        }\r\n        if (!validationData.validationResults) {\r\n            validationData.validationResults = {}\r\n        }\r\n        let result;\r\n        if (validationResult) {\r\n            result = extend({}, validationResult);\r\n            validationData.validationResults[columnIndex] = result;\r\n            if (validationResult.status === VALIDATION_STATUS.pending) {\r\n                if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\r\n                    result.deferred = new Deferred;\r\n                    result.complete.always((() => {\r\n                        result.deferred.resolve()\r\n                    }));\r\n                    this._editingController.addDeferred(result.deferred)\r\n                }\r\n                if (this._disableApplyValidationResults) {\r\n                    result.disabledPendingId = validationResult.id;\r\n                    return\r\n                }\r\n            }\r\n        } else {\r\n            result = validationData.validationResults[columnIndex]\r\n        }\r\n        if (result && result.disabledPendingId) {\r\n            delete result.disabledPendingId\r\n        }\r\n    }\r\n    getCellValidationResult(_ref4) {\r\n        var _validationData$valid;\r\n        let {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        } = _ref4;\r\n        const validationData = this._getValidationData(rowKey, true);\r\n        return null === validationData || void 0 === validationData || null === (_validationData$valid = validationData.validationResults) || void 0 === _validationData$valid ? void 0 : _validationData$valid[columnIndex]\r\n    }\r\n    removeCellValidationResult(_ref5) {\r\n        let {\r\n            change: change,\r\n            columnIndex: columnIndex\r\n        } = _ref5;\r\n        const validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n        if (validationData && validationData.validationResults) {\r\n            this.cancelCellValidationResult({\r\n                change: change,\r\n                columnIndex: columnIndex\r\n            });\r\n            delete validationData.validationResults[columnIndex]\r\n        }\r\n    }\r\n    cancelCellValidationResult(_ref6) {\r\n        let {\r\n            change: change,\r\n            columnIndex: columnIndex\r\n        } = _ref6;\r\n        const validationData = this._getValidationData(change.key);\r\n        if (change && validationData.validationResults) {\r\n            const result = validationData.validationResults[columnIndex];\r\n            if (result) {\r\n                result.deferred && result.deferred.reject(\"cancel\");\r\n                validationData.validationResults[columnIndex] = \"cancel\"\r\n            }\r\n        }\r\n    }\r\n    resetRowValidationResults(validationData) {\r\n        if (validationData) {\r\n            validationData.validationResults && delete validationData.validationResults;\r\n            delete validationData.validated\r\n        }\r\n    }\r\n    isInvalidCell(_ref7) {\r\n        let {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        } = _ref7;\r\n        const result = this.getCellValidationResult({\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        });\r\n        return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid\r\n    }\r\n    getCellValidator(_ref8) {\r\n        let {\r\n            rowKey: rowKey,\r\n            columnIndex: columnIndex\r\n        } = _ref8;\r\n        const validationData = this._getValidationData(rowKey);\r\n        const groupConfig = validationData && ValidationEngine.getGroupConfig(validationData);\r\n        const validators = groupConfig && groupConfig.validators;\r\n        return validators && validators.filter((v => {\r\n            const {\r\n                column: column\r\n            } = v.option(\"dataGetter\")();\r\n            return column ? column.index === columnIndex : false\r\n        }))[0]\r\n    }\r\n    setCellValidationStatus(cellOptions) {\r\n        const validationResult = this.getCellValidationResult({\r\n            rowKey: cellOptions.key,\r\n            columnIndex: cellOptions.column.index\r\n        });\r\n        if (isDefined(validationResult)) {\r\n            cellOptions.validationStatus = \"cancel\" !== validationResult ? validationResult.status : \"cancel\"\r\n        } else {\r\n            delete cellOptions.validationStatus\r\n        }\r\n    }\r\n}\r\nexport const validatingEditingExtender = Base => class extends Base {\r\n    processDataItemTreeListHack(item) {\r\n        super.processDataItem.apply(this, arguments)\r\n    }\r\n    processItemsTreeListHack(items, e) {\r\n        return super.processItems.apply(this, arguments)\r\n    }\r\n    _addChange(changeParams) {\r\n        const change = super._addChange.apply(this, arguments);\r\n        if (change && \"remove\" !== changeParams.type) {\r\n            this._validatingController.updateValidationState(change)\r\n        }\r\n        return change\r\n    }\r\n    _handleChangesChange(args) {\r\n        super._handleChangesChange.apply(this, arguments);\r\n        args.value.forEach((change => {\r\n            if (void 0 === this._validatingController._getValidationData(change.key)) {\r\n                this._validatingController.updateValidationState(change)\r\n            }\r\n        }))\r\n    }\r\n    _updateRowAndPageIndices() {\r\n        const that = this;\r\n        const startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\r\n        let rowIndex = startInsertIndex;\r\n        each(that.getChanges(), ((_, _ref9) => {\r\n            let {\r\n                key: key,\r\n                type: type\r\n            } = _ref9;\r\n            const validationData = this._validatingController._getValidationData(key);\r\n            if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\r\n                validationData.pageIndex = that._pageIndex;\r\n                if (\"insert\" === type) {\r\n                    validationData.rowIndex = startInsertIndex\r\n                } else {\r\n                    validationData.rowIndex = rowIndex\r\n                }\r\n                rowIndex++\r\n            }\r\n        }))\r\n    }\r\n    _getValidationGroupsInForm(detailOptions) {\r\n        const validationData = this._validatingController._getValidationData(detailOptions.key, true);\r\n        return {\r\n            validationGroup: validationData\r\n        }\r\n    }\r\n    _validateEditFormAfterUpdate(row, isCustomSetCellValue) {\r\n        if (isCustomSetCellValue && this._editForm) {\r\n            this._editForm.validate()\r\n        }\r\n        super._validateEditFormAfterUpdate.apply(this, arguments)\r\n    }\r\n    _prepareEditCell(params) {\r\n        const isNotCanceled = super._prepareEditCell.apply(this, arguments);\r\n        if (isNotCanceled && params.column.showEditorAlways) {\r\n            this._validatingController.updateValidationState({\r\n                key: params.key\r\n            })\r\n        }\r\n        return isNotCanceled\r\n    }\r\n    processItems(items, changeType) {\r\n        const changes = this.getChanges();\r\n        const getIndexByChange = (change, items) => {\r\n            let index = -1;\r\n            const isInsert = \"insert\" === change.type;\r\n            const {\r\n                key: key\r\n            } = change;\r\n            each(items, ((i, item) => {\r\n                if (equalByValue(key, isInsert ? item.key : this._dataController.keyOf(item))) {\r\n                    index = i;\r\n                    return false\r\n                }\r\n                return\r\n            }));\r\n            return index\r\n        };\r\n        items = super.processItems(items, changeType);\r\n        const itemsCount = items.length;\r\n        if (this.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\r\n            changes.forEach((change => {\r\n                const {\r\n                    key: key\r\n                } = change;\r\n                const validationData = this._validatingController._getValidationData(key);\r\n                if (validationData && change.type && validationData.pageIndex === this._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== this._pageIndex) {\r\n                    ! function(change, validationData) {\r\n                        const data = {\r\n                            key: change.key\r\n                        };\r\n                        const index = getIndexByChange(change, items);\r\n                        if (index >= 0) {\r\n                            return\r\n                        }\r\n                        validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\r\n                        const {\r\n                            rowIndex: rowIndex\r\n                        } = validationData;\r\n                        data[INSERT_INDEX] = 1;\r\n                        items.splice(rowIndex, 0, data)\r\n                    }(change, validationData)\r\n                }\r\n            }))\r\n        }\r\n        return items\r\n    }\r\n    processDataItem(item) {\r\n        const isInserted = item.data[INSERT_INDEX];\r\n        const key = isInserted ? item.data.key : item.key;\r\n        const editMode = this.getEditMode();\r\n        if (editMode === EDIT_MODE_BATCH && isInserted && key) {\r\n            const changes = this.getChanges();\r\n            const editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (editIndex >= 0) {\r\n                const change = changes[editIndex];\r\n                if (\"insert\" !== change.type) {\r\n                    const oldData = this._getOldData(change.key);\r\n                    item.data = extend(true, {}, oldData, change.data);\r\n                    item.key = key\r\n                }\r\n            }\r\n        }\r\n        super.processDataItem.apply(this, arguments)\r\n    }\r\n    _createInvisibleColumnValidators(changes) {\r\n        const that = this;\r\n        const columns = this._columnsController.getColumns();\r\n        const invisibleColumns = this._columnsController.getInvisibleColumns().filter((column => !column.isBand));\r\n        const groupColumns = this._columnsController.getGroupColumns().filter((column => !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column)));\r\n        const invisibleColumnValidators = [];\r\n        const isCellVisible = (column, rowKey) => this._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;\r\n        invisibleColumns.push(...groupColumns);\r\n        if (!FORM_BASED_MODES.includes(this.getEditMode())) {\r\n            each(columns, ((_, column) => {\r\n                changes.forEach((change => {\r\n                    let data;\r\n                    if (isCellVisible(column, change.key)) {\r\n                        return\r\n                    }\r\n                    if (\"insert\" === change.type) {\r\n                        data = change.data\r\n                    } else if (\"update\" === change.type) {\r\n                        const oldData = that._getOldData(change.key);\r\n                        if (!isDefined(oldData)) {\r\n                            return\r\n                        }\r\n                        data = createObjectWithChanges(oldData, change.data)\r\n                    }\r\n                    if (data) {\r\n                        const validator = this._validatingController.createValidator({\r\n                            column: column,\r\n                            key: change.key,\r\n                            value: column.calculateCellValue(data)\r\n                        });\r\n                        if (validator) {\r\n                            invisibleColumnValidators.push(validator)\r\n                        }\r\n                    }\r\n                }))\r\n            }))\r\n        }\r\n        return function() {\r\n            invisibleColumnValidators.forEach((validator => {\r\n                validator.dispose()\r\n            }))\r\n        }\r\n    }\r\n    _beforeSaveEditData(change, editIndex) {\r\n        let result = super._beforeSaveEditData.apply(this, arguments);\r\n        const validationData = this._validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key, true);\r\n        if (change) {\r\n            const isValid = \"remove\" === change.type || validationData.isValid;\r\n            result = result || !isValid\r\n        } else {\r\n            const disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\r\n            result = new Deferred;\r\n            this.executeOperation(result, (() => {\r\n                this._validatingController.validate(true).done((isFullValid => {\r\n                    disposeValidators();\r\n                    this._updateRowAndPageIndices();\r\n                    switch (this.getEditMode()) {\r\n                        case EDIT_MODE_CELL:\r\n                            if (!isFullValid) {\r\n                                this._focusEditingCell()\r\n                            }\r\n                            break;\r\n                        case EDIT_MODE_BATCH:\r\n                            if (!isFullValid) {\r\n                                this._resetEditRowKey();\r\n                                this._resetEditColumnName();\r\n                                this._dataController.updateItems()\r\n                            }\r\n                    }\r\n                    result.resolve(!isFullValid)\r\n                }))\r\n            }))\r\n        }\r\n        return result.promise ? result.promise() : result\r\n    }\r\n    _beforeEditCell(rowIndex, columnIndex, item) {\r\n        const result = super._beforeEditCell(rowIndex, columnIndex, item);\r\n        if (this.getEditMode() === EDIT_MODE_CELL) {\r\n            const $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\r\n            const validator = $cell && $cell.data(\"dxValidator\");\r\n            const rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\r\n            const value = validator && validator.option(\"adapter\").getValue();\r\n            if (validator && cellValueShouldBeValidated(value, rowOptions)) {\r\n                const deferred = new Deferred;\r\n                when(this._validatingController.validateCell(validator), result).done(((validationResult, result) => {\r\n                    deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result)\r\n                }));\r\n                return deferred.promise()\r\n            }\r\n            if (!validator) {\r\n                return result\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _afterSaveEditData(cancel) {\r\n        let $firstErrorRow;\r\n        const isCellEditMode = this.getEditMode() === EDIT_MODE_CELL;\r\n        each(this.getChanges(), ((_, change) => {\r\n            const $errorRow = this._showErrorRow(change);\r\n            $firstErrorRow = $firstErrorRow || $errorRow\r\n        }));\r\n        if ($firstErrorRow) {\r\n            const scrollable = this._rowsView.getScrollable();\r\n            if (scrollable) {\r\n                scrollable.update();\r\n                scrollable.scrollToElement($firstErrorRow)\r\n            }\r\n        }\r\n        if (cancel && isCellEditMode && this._needUpdateRow()) {\r\n            const editRowIndex = this.getEditRowIndex();\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: [editRowIndex]\r\n            });\r\n            this._focusEditingCell()\r\n        } else if (!cancel) {\r\n            let shouldResetValidationState = true;\r\n            if (isCellEditMode) {\r\n                const columns = this._columnsController.getColumns();\r\n                const columnsWithValidatingEditors = columns.filter((col => {\r\n                    var _col$validationRules;\r\n                    return col.showEditorAlways && (null === (_col$validationRules = col.validationRules) || void 0 === _col$validationRules ? void 0 : _col$validationRules.length) > 0\r\n                })).length > 0;\r\n                shouldResetValidationState = !columnsWithValidatingEditors\r\n            }\r\n            if (shouldResetValidationState) {\r\n                this._validatingController.initValidationState()\r\n            }\r\n        }\r\n    }\r\n    _handleDataChanged(args) {\r\n        const validationState = this._validatingController._validationState;\r\n        if (\"standard\" === this.option(\"scrolling.mode\")) {\r\n            this.resetRowAndPageIndices()\r\n        }\r\n        if (\"prepend\" === args.changeType) {\r\n            each(validationState, ((_, validationData) => {\r\n                validationData.rowIndex += args.items.length\r\n            }))\r\n        }\r\n        super._handleDataChanged(args)\r\n    }\r\n    resetRowAndPageIndices() {\r\n        const validationState = this._validatingController._validationState;\r\n        each(validationState, ((_, validationData) => {\r\n            if (validationData.pageIndex !== this._pageIndex) {\r\n                delete validationData.pageIndex;\r\n                delete validationData.rowIndex\r\n            }\r\n        }))\r\n    }\r\n    _beforeCancelEditData() {\r\n        this._validatingController.initValidationState();\r\n        super._beforeCancelEditData()\r\n    }\r\n    _showErrorRow(change) {\r\n        let $popupContent;\r\n        const items = this._dataController.items();\r\n        const rowIndex = this.getIndexByKey(change.key, items);\r\n        const validationData = this._validatingController._getValidationData(change.key);\r\n        if (!(null !== validationData && void 0 !== validationData && validationData.isValid) && null !== validationData && void 0 !== validationData && validationData.errorText && rowIndex >= 0) {\r\n            $popupContent = this.getPopupContent();\r\n            return this._errorHandlingController && this._errorHandlingController.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent)\r\n        }\r\n    }\r\n    updateFieldValue(e) {\r\n        const deferred = new Deferred;\r\n        this._validatingController.removeCellValidationResult({\r\n            change: this.getChangeByKey(e.key),\r\n            columnIndex: e.column.index\r\n        });\r\n        super.updateFieldValue.apply(this, arguments).done((() => {\r\n            const currentValidator = this._validatingController.getCellValidator({\r\n                rowKey: e.key,\r\n                columnIndex: e.column.index\r\n            });\r\n            when(currentValidator && this._validatingController.validateCell(currentValidator)).done((validationResult => {\r\n                this._editorFactoryController.refocus();\r\n                deferred.resolve(validationResult)\r\n            }))\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n    highlightDataCell($cell, parameters) {\r\n        super.highlightDataCell.apply(this, arguments);\r\n        this._validatingController.setCellValidationStatus(parameters);\r\n        const isEditableCell = !!parameters.setValue;\r\n        const cellModified = this.isCellModified(parameters);\r\n        const isValidated = isDefined(parameters.validationStatus);\r\n        const needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\r\n        if (needValidation) {\r\n            const validator = $cell.data(\"dxValidator\");\r\n            if (validator) {\r\n                when(this._validatingController.validateCell(validator)).done((() => {\r\n                    this._validatingController.setCellValidationStatus(parameters)\r\n                }))\r\n            }\r\n        }\r\n    }\r\n    getChangeByKey(key) {\r\n        const changes = this.getChanges();\r\n        return changes[gridCoreUtils.getIndexByKey(key, changes)]\r\n    }\r\n    isCellModified(parameters) {\r\n        const cellModified = super.isCellModified(parameters);\r\n        const change = this.getChangeByKey(parameters.key);\r\n        const isCellInvalid = !!parameters.row && this._validatingController.isInvalidCell({\r\n            rowKey: parameters.key,\r\n            columnIndex: parameters.column.index\r\n        });\r\n        return cellModified || this._validatingController._rowIsValidated(change) && isCellInvalid\r\n    }\r\n};\r\nconst getWidthOfVisibleCells = function(that, element) {\r\n    const rowIndex = $(element).closest(\"tr\").index();\r\n    const $cellElements = $(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\r\n    return that._rowsView._getWidths($cellElements).reduce(((w1, w2) => w1 + w2), 0)\r\n};\r\nconst getBoundaryNonFixedColumnsInfo = function(fixedColumns) {\r\n    let firstNonFixedColumnIndex;\r\n    let lastNonFixedColumnIndex;\r\n    fixedColumns.some(((column, index) => {\r\n        if (\"transparent\" === column.command) {\r\n            firstNonFixedColumnIndex = 0 === index ? -1 : index;\r\n            lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\r\n            return true\r\n        }\r\n        return\r\n    }));\r\n    return {\r\n        startColumnIndex: firstNonFixedColumnIndex,\r\n        endColumnIndex: lastNonFixedColumnIndex\r\n    }\r\n};\r\nexport const validatingEditorFactoryExtender = Base => class extends Base {\r\n    _showRevertButton($container) {\r\n        var _this$_revertTooltip, _$tooltipElement2;\r\n        let $tooltipElement = null === (_this$_revertTooltip = this._revertTooltip) || void 0 === _this$_revertTooltip ? void 0 : _this$_revertTooltip.$element();\r\n        if (!$container || !$container.length) {\r\n            var _$tooltipElement;\r\n            null === (_$tooltipElement = $tooltipElement) || void 0 === _$tooltipElement || _$tooltipElement.remove();\r\n            this._revertTooltip = void 0;\r\n            return\r\n        }\r\n        if ($container.find($tooltipElement).length) {\r\n            var _this$_revertTooltip2;\r\n            null === (_this$_revertTooltip2 = this._revertTooltip) || void 0 === _this$_revertTooltip2 || _this$_revertTooltip2.repaint();\r\n            return\r\n        }\r\n        const $overlayContainer = this.getRevertButtonContainer($container);\r\n        const revertTooltipClass = this.addWidgetPrefix(\"revert-tooltip\");\r\n        null === (_$tooltipElement2 = $tooltipElement) || void 0 === _$tooltipElement2 || _$tooltipElement2.remove();\r\n        $tooltipElement = $(\"<div>\").addClass(revertTooltipClass).appendTo($container);\r\n        const tooltipOptions = {\r\n            animation: null,\r\n            visible: true,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n            shading: false,\r\n            container: $overlayContainer,\r\n            propagateOutsideClick: true,\r\n            hideOnOutsideClick: false,\r\n            wrapperAttr: {\r\n                class: revertTooltipClass\r\n            },\r\n            contentTemplate: () => {\r\n                const $buttonElement = $(\"<div>\").addClass(\"dx-revert-button\");\r\n                const buttonOptions = {\r\n                    icon: \"revert\",\r\n                    hint: this.option(\"editing.texts.validationCancelChanges\"),\r\n                    elementAttr: {\r\n                        id: \"dxRevertButton\",\r\n                        \"aria-label\": messageLocalization.format(\"dxDataGrid-ariaRevertButton\")\r\n                    },\r\n                    onClick: () => {\r\n                        this._editingController.cancelEditData()\r\n                    }\r\n                };\r\n                return new Button($buttonElement, buttonOptions).$element()\r\n            },\r\n            position: {\r\n                my: \"left top\",\r\n                at: \"right top\",\r\n                offset: \"1 0\",\r\n                collision: \"flip\",\r\n                boundaryOffset: \"0 0\",\r\n                boundary: this._rowsView.element(),\r\n                of: $container\r\n            },\r\n            onPositioned: this.overlayPositionedHandler.bind(this)\r\n        };\r\n        this._revertTooltip = new Overlay($tooltipElement, tooltipOptions)\r\n    }\r\n    _hideFixedGroupCell($cell, overlayOptions) {\r\n        var _this$_rowsView, _this$_rowsView$isFix;\r\n        let $nextFixedRowElement;\r\n        let $groupCellElement;\r\n        const isFixedColumns = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView || null === (_this$_rowsView$isFix = _this$_rowsView.isFixedColumns) || void 0 === _this$_rowsView$isFix ? void 0 : _this$_rowsView$isFix.call(_this$_rowsView);\r\n        const isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();\r\n        if (isFixedColumns && !isFormOrPopupEditMode) {\r\n            const nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\r\n            if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\r\n                $nextFixedRowElement = $(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\r\n                $groupCellElement = $nextFixedRowElement.find(\".dx-group-cell\");\r\n                if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\r\n                    $groupCellElement.css(\"visibility\", \"hidden\");\r\n                    overlayOptions.onDisposing = function() {\r\n                        $groupCellElement.css(\"visibility\", \"\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _showValidationMessage($cell, messages, alignment) {\r\n        const editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\r\n        const isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\r\n        const myPosition = isOverlayVisible ? \"top right\" : `top ${alignment}`;\r\n        const atPosition = isOverlayVisible ? \"top left\" : `bottom ${alignment}`;\r\n        const $overlayContainer = this.getValidationMessageContainer($cell);\r\n        let errorMessageText = \"\";\r\n        messages && messages.forEach((message => {\r\n            errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + encodeHtml(message)\r\n        }));\r\n        const invalidMessageClass = this.addWidgetPrefix(\"invalid-message\");\r\n        this._rowsView.element().find(`.${invalidMessageClass}`).remove();\r\n        const $overlayElement = $(\"<div>\").addClass(\"dx-invalid-message\").addClass(\"dx-invalid-message-always\").addClass(invalidMessageClass).html(errorMessageText).appendTo($cell);\r\n        const overlayOptions = {\r\n            container: $overlayContainer,\r\n            shading: false,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n            visible: true,\r\n            animation: false,\r\n            propagateOutsideClick: true,\r\n            hideOnOutsideClick: false,\r\n            wrapperAttr: {\r\n                id: \"dxInvalidMessage\",\r\n                class: `dx-invalid-message dx-invalid-message-always ${invalidMessageClass}`\r\n            },\r\n            position: {\r\n                collision: \"flip\",\r\n                boundary: this._rowsView.element(),\r\n                boundaryOffset: \"0 0\",\r\n                offset: {\r\n                    x: 0,\r\n                    y: !isOverlayVisible && browser.mozilla ? -1 : 0\r\n                },\r\n                my: myPosition,\r\n                at: atPosition,\r\n                of: $cell\r\n            },\r\n            onPositioned: e => {\r\n                this.overlayPositionedHandler(e, isOverlayVisible);\r\n                this._shiftValidationMessageIfNeed(e.component.$content(), $cell)\r\n            }\r\n        };\r\n        this._hideFixedGroupCell($cell, overlayOptions);\r\n        new Overlay($overlayElement, overlayOptions)\r\n    }\r\n    getValidationMessages() {\r\n        var _this$_rowsView$eleme;\r\n        return null === (_this$_rowsView$eleme = this._rowsView.element()) || void 0 === _this$_rowsView$eleme ? void 0 : _this$_rowsView$eleme.find(this._getValidationMessagesSelector())\r\n    }\r\n    getRevertButton() {\r\n        var _this$_revertTooltip3;\r\n        return $(null === (_this$_revertTooltip3 = this._revertTooltip) || void 0 === _this$_revertTooltip3 ? void 0 : _this$_revertTooltip3.element())\r\n    }\r\n    _hideValidationMessage() {\r\n        var _this$_rowsView$eleme2;\r\n        const validationMessages = null === (_this$_rowsView$eleme2 = this._rowsView.element()) || void 0 === _this$_rowsView$eleme2 ? void 0 : _this$_rowsView$eleme2.find(this._getValidationMessagesSelector());\r\n        null === validationMessages || void 0 === validationMessages || validationMessages.remove()\r\n    }\r\n    _normalizeValidationMessagePositionAndMaxWidth(options, isRevertButton, isOverlayVisible) {\r\n        const fixedColumns = this._columnsController.getFixedColumns();\r\n        if (!fixedColumns || !fixedColumns.length) {\r\n            return\r\n        }\r\n        let position;\r\n        const visibleTableWidth = !isRevertButton && getWidthOfVisibleCells(this, options.element);\r\n        const $overlayContentElement = options.component.$content();\r\n        const validationMessageWidth = getOuterWidth($overlayContentElement, true);\r\n        const needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\r\n        const columnIndex = this._rowsView.getCellIndex($(options.element).closest(\"td\"));\r\n        const boundaryNonFixedColumnsInfo = getBoundaryNonFixedColumnsInfo(fixedColumns);\r\n        if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\r\n            position = {\r\n                collision: \"none flip\",\r\n                my: \"top left\",\r\n                at: isOverlayVisible ? \"top right\" : \"bottom left\"\r\n            }\r\n        } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\r\n            position = {\r\n                collision: \"none flip\",\r\n                my: \"top right\",\r\n                at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\r\n            };\r\n            if (isRevertButton) {\r\n                position.offset = \"-1 0\"\r\n            }\r\n        }\r\n        return position && {\r\n            position: position,\r\n            maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\r\n        }\r\n    }\r\n    _shiftValidationMessageIfNeed($content, $cell) {\r\n        const $revertContent = this._revertTooltip && this._revertTooltip.$content();\r\n        if (!$revertContent) {\r\n            return\r\n        }\r\n        const contentOffset = $content.offset();\r\n        const revertContentOffset = $revertContent.offset();\r\n        if (contentOffset.top === revertContentOffset.top && contentOffset.left + getWidth($content) > revertContentOffset.left) {\r\n            const left = getWidth($revertContent) + 2;\r\n            $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left)\r\n        }\r\n    }\r\n    getOverlayBaseZIndex() {\r\n        return Overlay.baseZIndex()\r\n    }\r\n    overlayPositionedHandler(e, isOverlayVisible) {\r\n        if (!e.component.__skipPositionProcessing) {\r\n            const isRevertButton = $(e.element).hasClass(this.addWidgetPrefix(\"revert-tooltip\"));\r\n            const needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\r\n            const normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\r\n            e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\r\n            if (normalizedPosition) {\r\n                e.component.option(normalizedPosition)\r\n            } else if (needRepaint) {\r\n                e.component.repaint()\r\n            }\r\n        }\r\n    }\r\n    _getRevertTooltipsSelector() {\r\n        const revertTooltipClass = this.addWidgetPrefix(\"revert-tooltip\");\r\n        return `.dx-editor-cell .${revertTooltipClass}`\r\n    }\r\n    _getValidationMessagesSelector() {\r\n        const invalidMessageClass = this.addWidgetPrefix(\"invalid-message\");\r\n        return `.dx-editor-cell .${invalidMessageClass}, .dx-cell-modified .${invalidMessageClass}`\r\n    }\r\n    loseFocus(skipValidator) {\r\n        if (!skipValidator) {\r\n            this._validatingController.setValidator(null)\r\n        }\r\n        super.loseFocus()\r\n    }\r\n    updateCellState($element, validationResult, isHideBorder) {\r\n        var _change$data;\r\n        const $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\r\n        const $cell = null !== $focus && void 0 !== $focus && $focus.is(\"td\") ? $focus : null;\r\n        const rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\r\n        const change = rowOptions ? this._editingController.getChangeByKey(rowOptions.key) : null;\r\n        const column = $cell && this._columnsController.getVisibleColumns()[$cell.index()];\r\n        const isCellModified = void 0 !== (null === change || void 0 === change || null === (_change$data = change.data) || void 0 === _change$data ? void 0 : _change$data[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\r\n        const validationDescriptionValues = [];\r\n        if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\r\n            if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\r\n                this._showRevertButton($focus);\r\n                validationDescriptionValues.push(\"dxRevertButton\")\r\n            } else {\r\n                this._revertTooltip && this._revertTooltip.$element().remove()\r\n            }\r\n        }\r\n        const showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\r\n        if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\r\n            const errorMessages = [];\r\n            validationResult.brokenRules.forEach((rule => {\r\n                if (rule.message) {\r\n                    errorMessages.push(rule.message)\r\n                }\r\n            }));\r\n            if (errorMessages.length) {\r\n                this._showValidationMessage($focus, errorMessages, column.alignment || \"left\");\r\n                validationDescriptionValues.push(\"dxInvalidMessage\")\r\n            }\r\n        }\r\n        this._updateAriaValidationAttributes($focus, validationDescriptionValues);\r\n        !isHideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight()\r\n    }\r\n    _updateAriaValidationAttributes($focus, inputDescriptionValues) {\r\n        if (0 === inputDescriptionValues.length) {\r\n            return\r\n        }\r\n        const editMode = this._editingController.getEditMode();\r\n        const shouldSetValidationAriaAttributes = [EDIT_MODE_CELL, EDIT_MODE_BATCH, EDIT_MODE_ROW].includes(editMode);\r\n        if (shouldSetValidationAriaAttributes) {\r\n            const $focusElement = this._getCurrentFocusElement($focus);\r\n            $focusElement.attr(\"aria-labelledby\", inputDescriptionValues.join(\" \"));\r\n            $focusElement.attr(\"aria-invalid\", true)\r\n        }\r\n    }\r\n    _getCurrentFocusElement($focus) {\r\n        if (this._editingController.isEditing()) {\r\n            return $focus.find(EDITORS_INPUT_SELECTOR).first()\r\n        }\r\n        return $focus\r\n    }\r\n    focus($element, isHideBorder) {\r\n        if (!arguments.length) {\r\n            return super.focus()\r\n        }\r\n        this._hideValidationMessage();\r\n        if (null !== $element && void 0 !== $element && $element.hasClass(\"dx-row\") || null !== $element && void 0 !== $element && $element.hasClass(\"dx-master-detail-cell\")) {\r\n            return super.focus($element, isHideBorder)\r\n        }\r\n        const $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\r\n        const validator = $focus && ($focus.data(\"dxValidator\") || $element.find(`.${this.addWidgetPrefix(\"validator\")}`).eq(0).data(\"dxValidator\"));\r\n        const rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\r\n        const change = rowOptions ? this._editingController.getChangeByKey(rowOptions.key) : null;\r\n        let validationResult;\r\n        if (validator) {\r\n            this._validatingController.setValidator(validator);\r\n            const value = validator.option(\"adapter\").getValue();\r\n            if (cellValueShouldBeValidated(value, rowOptions) || this._validatingController._rowIsValidated(change)) {\r\n                this._editingController.waitForDeferredOperations().done((() => {\r\n                    const isDetached = !this._rowsView.isElementInside($element);\r\n                    if (isDetached) {\r\n                        return\r\n                    }\r\n                    when(this._validatingController.validateCell(validator)).done((result => {\r\n                        validationResult = result;\r\n                        const {\r\n                            column: column\r\n                        } = validationResult.validator.option(\"dataGetter\")();\r\n                        if (change && column && !this._validatingController.isCurrentValidatorProcessing({\r\n                                rowKey: change.key,\r\n                                columnIndex: column.index\r\n                            })) {\r\n                            return\r\n                        }\r\n                        if (!isFluent(current()) && validationResult.status === VALIDATION_STATUS.invalid) {\r\n                            isHideBorder = true\r\n                        }\r\n                        this.updateCellState($element, validationResult, isHideBorder);\r\n                        super.focus.call(this, $element, isHideBorder)\r\n                    }))\r\n                }));\r\n                return super.focus($element, isHideBorder)\r\n            }\r\n        }\r\n        this.updateCellState($element, validationResult, isHideBorder);\r\n        return super.focus($element, isHideBorder)\r\n    }\r\n    getEditorInstance($container) {\r\n        const $editor = $container.find(\".dx-texteditor\").eq(0);\r\n        return gridCoreUtils.getWidgetInstance($editor)\r\n    }\r\n    getValidationMessageContainer($cell) {\r\n        return $cell.closest(`.${this.addWidgetPrefix(\"content\")}`)\r\n    }\r\n    getRevertButtonContainer($cell) {\r\n        return $cell.closest(`.${this.addWidgetPrefix(\"content\")}`).parent()\r\n    }\r\n    hasOverlayElements() {\r\n        const $validationMessageElements = this.getValidationMessages();\r\n        const $revertButtonElement = this.getRevertButton();\r\n        return super.hasOverlayElements() || !!(null !== $validationMessageElements && void 0 !== $validationMessageElements && $validationMessageElements.length) || !!(null !== $revertButtonElement && void 0 !== $revertButtonElement && $revertButtonElement.length)\r\n    }\r\n};\r\nexport const validatingDataControllerExtender = Base => class extends Base {\r\n    _getValidationStatus(validationResult) {\r\n        const validationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\r\n        return validationStatus || VALIDATION_STATUS.valid\r\n    }\r\n    _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n        var _oldRow$cells, _cell$column$validati;\r\n        const cell = null === (_oldRow$cells = oldRow.cells) || void 0 === _oldRow$cells ? void 0 : _oldRow$cells[columnIndex];\r\n        const oldValidationStatus = this._getValidationStatus({\r\n            status: null === cell || void 0 === cell ? void 0 : cell.validationStatus\r\n        });\r\n        const validationResult = this._validatingController.getCellValidationResult({\r\n            rowKey: oldRow.key,\r\n            columnIndex: columnIndex\r\n        });\r\n        const validationData = this._validatingController._getValidationData(oldRow.key);\r\n        const newValidationStatus = this._getValidationStatus(validationResult);\r\n        const rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\r\n        const validationStatusChanged = oldValidationStatus !== newValidationStatus && rowIsModified;\r\n        const cellIsMarkedAsInvalid = $(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(\"invalid\"));\r\n        const hasValidationRules = null === cell || void 0 === cell || null === (_cell$column$validati = cell.column.validationRules) || void 0 === _cell$column$validati ? void 0 : _cell$column$validati.length;\r\n        const rowEditStateChanged = oldRow.isEditing !== newRow.isEditing && hasValidationRules;\r\n        const cellValidationStateChanged = validationStatusChanged || validationData.isValid && cellIsMarkedAsInvalid;\r\n        if (rowEditStateChanged || cellValidationStateChanged) {\r\n            return true\r\n        }\r\n        return super._isCellChanged.apply(this, arguments)\r\n    }\r\n};\r\nexport const validatingRowsViewExtender = Base => class extends Base {\r\n    updateFreeSpaceRowHeight($table) {\r\n        const that = this;\r\n        let $rowElements;\r\n        let $freeSpaceRowElement;\r\n        let $freeSpaceRowElements;\r\n        const $element = that.element();\r\n        const $tooltipContent = $element && $element.find(`.${that.addWidgetPrefix(\"invalid-message\")} .dx-overlay-content`);\r\n        super.updateFreeSpaceRowHeight($table);\r\n        if ($tooltipContent && $tooltipContent.length) {\r\n            $rowElements = that._getRowElements();\r\n            $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\r\n            $freeSpaceRowElement = $freeSpaceRowElements.first();\r\n            if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || getOuterHeight($tooltipContent) > getOuterHeight($freeSpaceRowElement))) {\r\n                $freeSpaceRowElements.show();\r\n                setHeight($freeSpaceRowElements, getOuterHeight($tooltipContent));\r\n                return true\r\n            }\r\n        }\r\n        return\r\n    }\r\n    _formItemPrepared(cellOptions, $container) {\r\n        super._formItemPrepared.apply(this, arguments);\r\n        deferUpdate((() => {\r\n            const $editor = $container.find(\".dx-widget\").first();\r\n            const isEditorDisposed = $editor.length && !$editor.children().length;\r\n            if (!isEditorDisposed) {\r\n                this._validatingController.createValidator(cellOptions, $editor)\r\n            }\r\n        }))\r\n    }\r\n    _cellPrepared($cell, parameters) {\r\n        if (!this._editingController.isFormOrPopupEditMode()) {\r\n            this._validatingController.createValidator(parameters, $cell)\r\n        }\r\n        super._cellPrepared.apply(this, arguments)\r\n    }\r\n    _restoreErrorRow(contentTable) {\r\n        this._editingController && this._editingController.hasChanges() && this._getRowElements(contentTable).each(((_, item) => {\r\n            const rowOptions = $(item).data(\"options\");\r\n            if (rowOptions) {\r\n                const change = this._editingController.getChangeByKey(rowOptions.key);\r\n                change && this._editingController._showErrorRow(change)\r\n            }\r\n        }))\r\n    }\r\n};\r\nexport const validatingModule = {\r\n    defaultOptions: () => ({\r\n        editing: {\r\n            texts: {\r\n                validationCancelChanges: messageLocalization.format(\"dxDataGrid-validationCancelChanges\")\r\n            }\r\n        }\r\n    }),\r\n    controllers: {\r\n        validating: ValidatingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: validatingEditingExtender,\r\n            editorFactory: validatingEditorFactoryExtender,\r\n            data: validatingDataControllerExtender\r\n        },\r\n        views: {\r\n            rowsView: validatingRowsViewExtender\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}