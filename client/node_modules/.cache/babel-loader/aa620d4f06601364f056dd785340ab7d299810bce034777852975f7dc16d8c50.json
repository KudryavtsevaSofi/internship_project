{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/data_grid/summary/m_summary.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport dataQuery from \"../../../../common/data/query\";\nimport storeHelper from \"../../../../common/data/store_helper\";\nimport { normalizeSortingInfo } from \"../../../../common/data/utils\";\nimport $ from \"../../../../core/renderer\";\nimport { noop } from \"../../../../core/utils/common\";\nimport { compileGetter } from \"../../../../core/utils/data\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each, map } from \"../../../../core/utils/iterator\";\nimport { isDefined, isEmptyObject, isFunction, isPlainObject, isString } from \"../../../../core/utils/type\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport { ColumnsView } from \"../../../grids/grid_core/views/m_columns_view\";\nimport AggregateCalculator from \"../m_aggregate_calculator\";\nimport gridCore from \"../m_core\";\nimport dataSourceAdapterProvider from \"../m_data_source_adapter\";\nconst DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\nconst DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\nconst DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\nconst DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\nconst DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\nconst DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\nconst DATAGRID_FOOTER_ROW_CLASS = \"dx-footer-row\";\nconst DATAGRID_CELL_DISABLED = \"dx-cell-focus-disabled\";\nconst DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\nconst DATAGRID_TOTAL_FOOTER_ROW_TYPE = \"totalFooter\";\nexport const renderSummaryCell = function (cell, options) {\n  const $cell = $(cell);\n  const {\n    column: column\n  } = options;\n  const {\n    summaryItems: summaryItems\n  } = options;\n  const $summaryItems = [];\n  if (!column.command && summaryItems) {\n    for (let i = 0; i < summaryItems.length; i++) {\n      const summaryItem = summaryItems[i];\n      const text = gridCore.getSummaryText(summaryItem, options.summaryTexts);\n      $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(\"dx-datagrid-summary-item\").addClass(\"dx-datagrid-text-content\").addClass(summaryItem.cssClass).toggleClass(\"dx-datagrid-group-text-content\", \"group\" === options.rowType).text(text).attr(\"aria-label\", `${column.caption} ${text}`));\n    }\n    $cell.append($summaryItems);\n  }\n};\nconst getSummaryCellOptions = function (that, options) {\n  const summaryTexts = that.option(\"summary.texts\") || {};\n  return {\n    totalItem: options.row,\n    summaryItems: options.row.summaryCells[options.columnIndex],\n    summaryTexts: summaryTexts\n  };\n};\nconst getGroupAggregates = function (data) {\n  return data.summary || data.aggregates || [];\n};\nconst recalculateWhileEditing = function (that) {\n  return that.option(\"summary.recalculateWhileEditing\");\n};\nconst forEachGroup = function (groups, groupCount, callback, path) {\n  path = path || [];\n  for (let i = 0; i < groups.length; i++) {\n    path.push(groups[i].key);\n    if (1 === groupCount) {\n      callback(path, groups[i].items);\n    } else {\n      forEachGroup(groups[i].items, groupCount - 1, callback, path);\n    }\n    path.pop();\n  }\n};\nconst applyAddedData = function (data, insertedData, groupLevel) {\n  if (groupLevel) {\n    return applyAddedData(data, insertedData.map(item => ({\n      items: [item]\n    }), groupLevel - 1));\n  }\n  return data.concat(insertedData);\n};\nconst applyRemovedData = function (data, removedData, groupLevel) {\n  if (groupLevel) {\n    return data.map(data => {\n      const updatedData = {};\n      const updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\n      Object.defineProperty(updatedData, \"aggregates\", {\n        get: () => data.aggregates,\n        set: value => {\n          data.aggregates = value;\n        }\n      });\n      return extend(updatedData, data, {\n        items: updatedItems\n      });\n    });\n  }\n  return data.filter(data => removedData.indexOf(data) < 0);\n};\nconst sortGroupsBySummaryCore = function (items, groups, sortByGroups) {\n  if (!items || !groups.length) {\n    return items;\n  }\n  const group = groups[0];\n  const sorts = sortByGroups[0];\n  let query;\n  if (group && sorts && sorts.length) {\n    query = dataQuery(items);\n    each(sorts, function (index) {\n      if (0 === index) {\n        query = query.sortBy(this.selector, this.desc);\n      } else {\n        query = query.thenBy(this.selector, this.desc);\n      }\n    });\n    query.enumerate().done(sortedItems => {\n      items = sortedItems;\n    });\n  }\n  groups = groups.slice(1);\n  sortByGroups = sortByGroups.slice(1);\n  if (groups.length && sortByGroups.length) {\n    each(items, function () {\n      this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups);\n    });\n  }\n  return items;\n};\nconst sortGroupsBySummary = function (data, group, summary) {\n  const sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\n  if (sortByGroups && sortByGroups.length) {\n    return sortGroupsBySummaryCore(data, group, sortByGroups);\n  }\n  return data;\n};\nconst calculateAggregates = function (that, summary, data, groupLevel) {\n  let calculator;\n  if (recalculateWhileEditing(that)) {\n    const editingController = that._editingController;\n    if (editingController) {\n      const insertedData = editingController.getInsertedData();\n      if (insertedData.length) {\n        data = applyAddedData(data, insertedData, groupLevel);\n      }\n      const removedData = editingController.getRemovedData();\n      if (removedData.length) {\n        data = applyRemovedData(data, removedData, groupLevel);\n      }\n    }\n  }\n  if (summary) {\n    calculator = new AggregateCalculator({\n      totalAggregates: summary.totalAggregates,\n      groupAggregates: summary.groupAggregates,\n      data: data,\n      groupLevel: groupLevel\n    });\n    calculator.calculate();\n  }\n  return calculator ? calculator.totalAggregates() : [];\n};\nexport class FooterView extends ColumnsView {\n  _getRows() {\n    return this._dataController.footerItems();\n  }\n  _getCellOptions(options) {\n    return extend(super._getCellOptions(options), getSummaryCellOptions(this, options));\n  }\n  _renderCellContent($cell, options) {\n    renderSummaryCell($cell, options);\n    super._renderCellContent.apply(this, arguments);\n  }\n  _renderCore(change) {\n    let needUpdateScrollLeft = false;\n    const totalItem = this._dataController.footerItems()[0];\n    if (!change || !change.columnIndices) {\n      this.element().empty().addClass(\"dx-datagrid-total-footer\").toggleClass(\"dx-datagrid-nowrap\", !this.option(\"wordWrapEnabled\"));\n      needUpdateScrollLeft = true;\n    }\n    if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\n      this._updateContent(this._renderTable({\n        change: change\n      }), change);\n      needUpdateScrollLeft && this._updateScrollLeftPosition();\n    }\n    return super._renderCore(change);\n  }\n  _updateContent($newTable, change) {\n    if (change && \"update\" === change.changeType && change.columnIndices) {\n      return this.waitAsyncTemplates().done(() => {\n        const $row = this.getTableElement().find(\".dx-row\");\n        const $newRow = $newTable.find(\".dx-row\");\n        this._updateCells($row, $newRow, change.columnIndices[0]);\n      });\n    }\n    return super._updateContent.apply(this, arguments);\n  }\n  _rowClick(e) {\n    const item = this._dataController.footerItems()[e.rowIndex] || {};\n    this.executeAction(\"onRowClick\", extend({}, e, item));\n  }\n  _columnOptionChanged(e) {\n    const {\n      optionNames: optionNames\n    } = e;\n    if (e.changeTypes.grouping) {\n      return;\n    }\n    if (optionNames.width || optionNames.visibleWidth) {\n      super._columnOptionChanged(e);\n    }\n  }\n  _handleDataChanged(e) {\n    const {\n      changeType: changeType\n    } = e;\n    if (\"update\" === e.changeType && e.repaintChangesOnly) {\n      if (!e.totalColumnIndices) {\n        this.render();\n      } else if (e.totalColumnIndices.length) {\n        this.render(null, {\n          changeType: \"update\",\n          columnIndices: [e.totalColumnIndices]\n        });\n      }\n    } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\n      this.render();\n    }\n  }\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    if (\"totalFooter\" === row.rowType) {\n      $row.addClass(\"dx-footer-row\");\n      $row.addClass(DATAGRID_CELL_DISABLED);\n      $row.attr(\"tabindex\", 0);\n    }\n    return $row;\n  }\n  getHeight() {\n    return this.getElementHeight();\n  }\n  isVisible() {\n    return !!this._dataController.footerItems().length;\n  }\n}\nconst dataSourceAdapterExtender = Base => class extends Base {\n  init() {\n    super.init.apply(this, arguments);\n    this._editingController = this.getController(\"editing\");\n    this._totalAggregates = [];\n    this._summaryGetter = noop;\n  }\n  summaryGetter(summaryGetter) {\n    if (!arguments.length) {\n      return this._summaryGetter;\n    }\n    if (isFunction(summaryGetter)) {\n      this._summaryGetter = summaryGetter;\n    }\n  }\n  summary(summary) {\n    if (!arguments.length) {\n      return this._summaryGetter();\n    }\n    this._summaryGetter = function () {\n      return summary;\n    };\n  }\n  totalAggregates() {\n    return this._totalAggregates;\n  }\n  isLastLevelGroupItemsPagingLocal() {\n    const summary = this.summary();\n    const sortByGroupsInfo = null === summary || void 0 === summary ? void 0 : summary.sortByGroups();\n    return null === sortByGroupsInfo || void 0 === sortByGroupsInfo ? void 0 : sortByGroupsInfo.length;\n  }\n  sortLastLevelGroupItems(items, groups, paths) {\n    const groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\n    let result = [];\n    paths.forEach(path => {\n      forEachGroup(groupedItems, groups.length, (itemsPath, items) => {\n        if (path.toString() === itemsPath.toString()) {\n          result = result.concat(items);\n        }\n      });\n    });\n    return result;\n  }\n  _customizeRemoteOperations(options) {\n    const summary = this.summary();\n    if (summary) {\n      if (options.remoteOperations.summary) {\n        if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n          if (options.storeLoadOptions.group) {\n            if (options.remoteOperations.grouping) {\n              options.storeLoadOptions.groupSummary = summary.groupAggregates;\n            } else if (summary.groupAggregates.length) {\n              options.remoteOperations.paging = false;\n            }\n          }\n          options.storeLoadOptions.totalSummary = summary.totalAggregates;\n        }\n      } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\n        options.remoteOperations.paging = false;\n      }\n    }\n    super._customizeRemoteOperations.apply(this, arguments);\n    const cachedExtra = options.cachedData.extra;\n    if (null !== cachedExtra && void 0 !== cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\n      options.storeLoadOptions.totalSummary = void 0;\n    }\n  }\n  _handleDataLoadedCore(options) {\n    const groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\n    const remoteOperations = options.remoteOperations || {};\n    const summary = this.summaryGetter()(remoteOperations);\n    if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n      if (remoteOperations.summary) {\n        if (!remoteOperations.paging && groups.length && summary) {\n          if (!remoteOperations.grouping) {\n            calculateAggregates(this, {\n              groupAggregates: summary.groupAggregates\n            }, options.data, groups.length);\n          }\n          options.data = sortGroupsBySummary(options.data, groups, summary);\n        }\n      } else if (!remoteOperations.paging && summary) {\n        var _options$cachedData;\n        const operationTypes = options.operationTypes || {};\n        const hasOperations = Object.keys(operationTypes).some(type => operationTypes[type]);\n        if (!hasOperations || !(null !== (_options$cachedData = options.cachedData) && void 0 !== _options$cachedData && null !== (_options$cachedData = _options$cachedData.extra) && void 0 !== _options$cachedData && _options$cachedData.summary) || groups.length && summary.groupAggregates.length) {\n          const totalAggregates = calculateAggregates(this, summary, options.data, groups.length);\n          options.extra = isPlainObject(options.extra) ? options.extra : {};\n          options.extra.summary = totalAggregates;\n          if (options.cachedData) {\n            options.cachedData.extra = options.extra;\n          }\n        }\n        options.data = sortGroupsBySummary(options.data, groups, summary);\n      }\n    }\n    if (!options.isCustomLoading) {\n      this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates;\n    }\n    super._handleDataLoadedCore(options);\n  }\n};\ndataSourceAdapterProvider.extend(dataSourceAdapterExtender);\nconst data = Base => class extends Base {\n  _isDataColumn(column) {\n    return column && (!isDefined(column.groupIndex) || column.showWhenGrouped);\n  }\n  _isGroupFooterVisible() {\n    const groupItems = this.option(\"summary.groupItems\") || [];\n    for (let i = 0; i < groupItems.length; i++) {\n      const groupItem = groupItems[i];\n      const column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\n      if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _processGroupItems(items, groupCount, options) {\n    const data = options && options.data;\n    const result = super._processGroupItems.apply(this, arguments);\n    if (options) {\n      if (void 0 === options.isGroupFooterVisible) {\n        options.isGroupFooterVisible = this._isGroupFooterVisible();\n      }\n      if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\n        result.push({\n          rowType: \"groupFooter\",\n          key: options.path.slice(),\n          data: data,\n          groupIndex: options.path.length - 1,\n          values: []\n        });\n      }\n    }\n    return result;\n  }\n  _processGroupItem(groupItem, options) {\n    const that = this;\n    if (!options.summaryGroupItems) {\n      options.summaryGroupItems = that.option(\"summary.groupItems\") || [];\n    }\n    if (\"group\" === groupItem.rowType) {\n      let groupColumnIndex = -1;\n      let afterGroupColumnIndex = -1;\n      each(options.visibleColumns, function (visibleIndex) {\n        const prevColumn = options.visibleColumns[visibleIndex - 1];\n        if (groupItem.groupIndex === this.groupIndex) {\n          groupColumnIndex = this.index;\n        }\n        if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\n          afterGroupColumnIndex = this.index;\n        }\n      });\n      groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (summaryItem, column) => {\n        if (summaryItem.showInGroupFooter) {\n          return -1;\n        }\n        if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\n          return column.index;\n        }\n        return groupColumnIndex;\n      }, true);\n    }\n    if (\"groupFooter\" === groupItem.rowType) {\n      groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (summaryItem, column) => summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1);\n    }\n    return groupItem;\n  }\n  _calculateSummaryCells(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\n    const that = this;\n    const summaryCells = [];\n    const summaryCellsByColumns = {};\n    each(summaryItems, (summaryIndex, summaryItem) => {\n      const column = that._columnsController.columnOption(summaryItem.column);\n      const showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\n      const columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\n      if (columnIndex >= 0) {\n        if (!summaryCellsByColumns[columnIndex]) {\n          summaryCellsByColumns[columnIndex] = [];\n        }\n        const aggregate = aggregates[summaryIndex];\n        if (aggregate === aggregate) {\n          let valueFormat;\n          if (isDefined(summaryItem.valueFormat)) {\n            valueFormat = summaryItem.valueFormat;\n          } else if (\"count\" !== summaryItem.summaryType) {\n            valueFormat = gridCore.getFormatByDataType(column && column.dataType);\n          }\n          summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\n            value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\n            valueFormat: valueFormat,\n            columnCaption: column && column.index !== columnIndex ? column.caption : void 0\n          }));\n        }\n      }\n    });\n    if (!isEmptyObject(summaryCellsByColumns)) {\n      visibleColumns.forEach((column, visibleIndex) => {\n        const prevColumn = visibleColumns[visibleIndex - 1];\n        const columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\n        summaryCells.push(summaryCellsByColumns[columnIndex] || []);\n      });\n    }\n    return summaryCells;\n  }\n  _getSummaryCells(summaryTotalItems, totalAggregates) {\n    const that = this;\n    const columnsController = that._columnsController;\n    return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), (summaryItem, column) => that._isDataColumn(column) ? column.index : -1);\n  }\n  _updateItemsCore(change) {\n    const that = this;\n    let summaryCells;\n    const dataSource = that._dataSource;\n    const footerItems = that._footerItems;\n    const oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\n    const summaryTotalItems = that.option(\"summary.totalItems\");\n    that._footerItems = [];\n    if (dataSource && summaryTotalItems && summaryTotalItems.length) {\n      const totalAggregates = dataSource.totalAggregates();\n      summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n      if (change && change.repaintChangesOnly && oldSummaryCells) {\n        change.totalColumnIndices = summaryCells.map((summaryCell, index) => {\n          if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\n            return index;\n          }\n          return -1;\n        }).filter(index => index >= 0);\n      }\n      if (summaryCells.length) {\n        that._footerItems.push({\n          rowType: \"totalFooter\",\n          summaryCells: summaryCells\n        });\n      }\n    }\n    super._updateItemsCore(change);\n  }\n  _prepareUnsavedDataSelector(selector) {\n    if (recalculateWhileEditing(this)) {\n      const editingController = this._editingController;\n      if (editingController) {\n        return function (data) {\n          data = editingController.getUpdatedData(data);\n          return selector(data);\n        };\n      }\n    }\n    return selector;\n  }\n  _prepareAggregateSelector(selector, aggregator) {\n    selector = this._prepareUnsavedDataSelector(selector);\n    if (\"avg\" === aggregator || \"sum\" === aggregator) {\n      return function (data) {\n        const value = selector(data);\n        return isDefined(value) ? Number(value) : value;\n      };\n    }\n    return selector;\n  }\n  _getAggregates(summaryItems, remoteOperations) {\n    const that = this;\n    let calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\n    const commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\n    return map(summaryItems || [], summaryItem => {\n      const column = this._columnsController.columnOption(summaryItem.column);\n      const calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\n      let aggregator = summaryItem.summaryType || \"count\";\n      const skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\n      if (remoteOperations) {\n        return {\n          selector: summaryItem.column,\n          summaryType: aggregator\n        };\n      }\n      const selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\n      if (\"custom\" === aggregator) {\n        if (!calculateCustomSummary) {\n          errors.log(\"E1026\");\n          calculateCustomSummary = function () {};\n        }\n        const options = {\n          component: that.component,\n          name: summaryItem.name\n        };\n        calculateCustomSummary(options);\n        options.summaryProcess = \"calculate\";\n        aggregator = {\n          seed(groupIndex) {\n            options.summaryProcess = \"start\";\n            options.totalValue = void 0;\n            options.groupIndex = groupIndex;\n            delete options.value;\n            calculateCustomSummary(options);\n            return options.totalValue;\n          },\n          step(totalValue, value) {\n            options.summaryProcess = \"calculate\";\n            options.totalValue = totalValue;\n            options.value = value;\n            calculateCustomSummary(options);\n            return options.totalValue;\n          },\n          finalize(totalValue) {\n            options.summaryProcess = \"finalize\";\n            options.totalValue = totalValue;\n            delete options.value;\n            calculateCustomSummary(options);\n            return options.totalValue;\n          }\n        };\n      }\n      return {\n        selector: selector,\n        aggregator: aggregator,\n        skipEmptyValues: skipEmptyValues\n      };\n    });\n  }\n  _addSortInfo(sortByGroups, groupColumn, selector, sortOrder) {\n    if (groupColumn) {\n      const {\n        groupIndex: groupIndex\n      } = groupColumn;\n      sortOrder = sortOrder || groupColumn.sortOrder;\n      if (isDefined(groupIndex)) {\n        sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\n        sortByGroups[groupIndex].push({\n          selector: selector,\n          desc: \"desc\" === sortOrder\n        });\n      }\n    }\n  }\n  _findSummaryItem(summaryItems, name) {\n    let summaryItemIndex = -1;\n    if (isDefined(name)) {\n      each(summaryItems || [], function (index) {\n        if (this.name === name || index === name || this.summaryType === name || this.column === name || function (summaryItem) {\n          const {\n            summaryType: summaryType\n          } = summaryItem;\n          const {\n            column: column\n          } = summaryItem;\n          return summaryType && column && `${summaryType}_${column}`;\n        }(this) === name) {\n          summaryItemIndex = index;\n          return false;\n        }\n      });\n    }\n    return summaryItemIndex;\n  }\n  _getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems) {\n    const that = this;\n    const columnsController = that._columnsController;\n    const groupColumns = columnsController.getGroupColumns();\n    const sortByGroups = [];\n    if (!groupSummaryItems || !groupSummaryItems.length) {\n      return;\n    }\n    each(sortByGroupSummaryInfo || [], function () {\n      const {\n        sortOrder: sortOrder\n      } = this;\n      let {\n        groupColumn: groupColumn\n      } = this;\n      const summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\n      if (summaryItemIndex < 0) {\n        return;\n      }\n      const selector = function (data) {\n        return getGroupAggregates(data)[summaryItemIndex];\n      };\n      if (isDefined(groupColumn)) {\n        groupColumn = columnsController.columnOption(groupColumn);\n        that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n      } else {\n        each(groupColumns, (groupIndex, groupColumn) => {\n          that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n        });\n      }\n    });\n    return sortByGroups;\n  }\n  _createDataSourceAdapterCore(dataSource, remoteOperations) {\n    const that = this;\n    const dataSourceAdapter = super._createDataSourceAdapterCore(dataSource, remoteOperations);\n    dataSourceAdapter.summaryGetter(currentRemoteOperations => that._getSummaryOptions(currentRemoteOperations || remoteOperations));\n    return dataSourceAdapter;\n  }\n  _getSummaryOptions(remoteOperations) {\n    const that = this;\n    const groupSummaryItems = that.option(\"summary.groupItems\");\n    const totalSummaryItems = that.option(\"summary.totalItems\");\n    const sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\n    const groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\n    const totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\n    const sortByGroups = function () {\n      return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);\n    };\n    if (groupAggregates.length || totalAggregates.length) {\n      return {\n        groupAggregates: groupAggregates,\n        totalAggregates: totalAggregates,\n        sortByGroups: sortByGroups\n      };\n    }\n    return;\n  }\n  publicMethods() {\n    const methods = super.publicMethods();\n    methods.push(\"getTotalSummaryValue\");\n    return methods;\n  }\n  getTotalSummaryValue(summaryItemName) {\n    const summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\n    const aggregates = this._dataSource.totalAggregates();\n    if (aggregates.length && summaryItemIndex > -1) {\n      return aggregates[summaryItemIndex];\n    }\n  }\n  optionChanged(args) {\n    if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\n      args.name = \"dataSource\";\n    }\n    super.optionChanged(args);\n  }\n  init() {\n    this._footerItems = [];\n    super.init();\n  }\n  footerItems() {\n    return this._footerItems;\n  }\n};\nconst editing = Base => class extends Base {\n  _refreshSummary() {\n    if (recalculateWhileEditing(this) && !this.isSaving()) {\n      this._dataController.refresh({\n        load: true,\n        changesOnly: true\n      });\n    }\n  }\n  _addChange(params) {\n    const result = super._addChange.apply(this, arguments);\n    if (params.type) {\n      this._refreshSummary();\n    }\n    return result;\n  }\n  _removeChange() {\n    const result = super._removeChange.apply(this, arguments);\n    this._refreshSummary();\n    return result;\n  }\n  cancelEditData() {\n    const result = super.cancelEditData.apply(this, arguments);\n    this._refreshSummary();\n    return result;\n  }\n};\nconst rowsView = Base => class extends Base {\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    row && $row.addClass(\"groupFooter\" === row.rowType ? \"dx-datagrid-group-footer\" : \"\");\n    return $row;\n  }\n  _renderCells($row, options) {\n    super._renderCells.apply(this, arguments);\n    if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\n      this._renderGroupSummaryCells($row, options);\n    }\n  }\n  _hasAlignByColumnSummaryItems(columnIndex, options) {\n    return !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length;\n  }\n  _getAlignByColumnCellCount(groupCellColSpan, options) {\n    let alignByColumnCellCount = 0;\n    for (let i = 1; i < groupCellColSpan; i++) {\n      const columnIndex = options.row.summaryCells.length - i;\n      alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;\n    }\n    return alignByColumnCellCount;\n  }\n  _renderGroupSummaryCells($row, options) {\n    const $groupCell = $row.children().last();\n    const groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\n    const alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n    this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n  }\n  _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n    if (alignByColumnCellCount > 0) {\n      $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\n      for (let i = 0; i < alignByColumnCellCount; i++) {\n        const columnIndex = options.columns.length - alignByColumnCellCount + i;\n        this._renderCell($groupCell.parent(), extend({\n          column: options.columns[columnIndex],\n          columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\n        }, options));\n      }\n    }\n  }\n  _getSummaryCellIndex(columnIndex, columns) {\n    return columnIndex;\n  }\n  _getCellTemplate(options) {\n    if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\n      return renderSummaryCell;\n    }\n    return super._getCellTemplate(options);\n  }\n  _getCellOptions(options) {\n    const that = this;\n    const parameters = super._getCellOptions(options);\n    if (options.row.summaryCells) {\n      return extend(parameters, getSummaryCellOptions(that, options));\n    }\n    return parameters;\n  }\n};\ngridCore.registerModule(\"summary\", {\n  defaultOptions: () => ({\n    summary: {\n      groupItems: void 0,\n      totalItems: void 0,\n      calculateCustomSummary: void 0,\n      skipEmptyValues: true,\n      recalculateWhileEditing: false,\n      texts: {\n        sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\n        sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\n        min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\n        minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\n        max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\n        maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\n        avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\n        avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\n        count: messageLocalization.format(\"dxDataGrid-summaryCount\")\n      }\n    },\n    sortByGroupSummaryInfo: void 0\n  }),\n  views: {\n    footerView: FooterView\n  },\n  extenders: {\n    controllers: {\n      data: data,\n      editing: editing\n    },\n    views: {\n      rowsView: rowsView\n    }\n  }\n});","map":{"version":3,"names":["messageLocalization","dataQuery","storeHelper","normalizeSortingInfo","$","noop","compileGetter","extend","each","map","isDefined","isEmptyObject","isFunction","isPlainObject","isString","errors","ColumnsView","AggregateCalculator","gridCore","dataSourceAdapterProvider","DATAGRID_TOTAL_FOOTER_CLASS","DATAGRID_SUMMARY_ITEM_CLASS","DATAGRID_TEXT_CONTENT_CLASS","DATAGRID_GROUP_FOOTER_CLASS","DATAGRID_GROUP_TEXT_CONTENT_CLASS","DATAGRID_NOWRAP_CLASS","DATAGRID_FOOTER_ROW_CLASS","DATAGRID_CELL_DISABLED","DATAGRID_GROUP_FOOTER_ROW_TYPE","DATAGRID_TOTAL_FOOTER_ROW_TYPE","renderSummaryCell","cell","options","$cell","column","summaryItems","$summaryItems","command","i","length","summaryItem","text","getSummaryText","summaryTexts","push","css","alignment","addClass","cssClass","toggleClass","rowType","attr","caption","append","getSummaryCellOptions","that","option","totalItem","row","summaryCells","columnIndex","getGroupAggregates","data","summary","aggregates","recalculateWhileEditing","forEachGroup","groups","groupCount","callback","path","key","items","pop","applyAddedData","insertedData","groupLevel","item","concat","applyRemovedData","removedData","updatedData","updatedItems","Object","defineProperty","get","set","value","filter","indexOf","sortGroupsBySummaryCore","sortByGroups","group","sorts","query","index","sortBy","selector","desc","thenBy","enumerate","done","sortedItems","slice","sortGroupsBySummary","calculateAggregates","calculator","editingController","_editingController","getInsertedData","getRemovedData","totalAggregates","groupAggregates","calculate","FooterView","_getRows","_dataController","footerItems","_getCellOptions","_renderCellContent","apply","arguments","_renderCore","change","needUpdateScrollLeft","columnIndices","element","empty","_updateContent","_renderTable","_updateScrollLeftPosition","$newTable","changeType","waitAsyncTemplates","$row","getTableElement","find","$newRow","_updateCells","_rowClick","e","rowIndex","executeAction","_columnOptionChanged","optionNames","changeTypes","grouping","width","visibleWidth","_handleDataChanged","repaintChangesOnly","totalColumnIndices","render","_createRow","getHeight","getElementHeight","isVisible","dataSourceAdapterExtender","Base","init","getController","_totalAggregates","_summaryGetter","summaryGetter","isLastLevelGroupItemsPagingLocal","sortByGroupsInfo","sortLastLevelGroupItems","paths","groupedItems","multiLevelGroup","toArray","result","forEach","itemsPath","toString","_customizeRemoteOperations","remoteOperations","isCustomLoading","storeLoadOptions","isLoadingAll","groupSummary","paging","totalSummary","cachedExtra","cachedData","extra","_handleDataLoadedCore","loadOptions","_options$cachedData","operationTypes","hasOperations","keys","some","type","_isDataColumn","groupIndex","showWhenGrouped","_isGroupFooterVisible","groupItems","groupItem","_columnsController","columnOption","showInColumn","showInGroupFooter","_processGroupItems","isGroupFooterVisible","collectContinuationItems","isContinuationOnNextPage","values","_processGroupItem","summaryGroupItems","groupColumnIndex","afterGroupColumnIndex","visibleColumns","visibleIndex","prevColumn","_calculateSummaryCells","alignByColumn","calculateTargetColumnIndex","isGroupRow","summaryCellsByColumns","summaryIndex","aggregate","valueFormat","summaryType","getFormatByDataType","dataType","deserializeValue","columnCaption","_getSummaryCells","summaryTotalItems","columnsController","getVisibleColumns","_updateItemsCore","dataSource","_dataSource","_footerItems","oldSummaryCells","summaryCell","JSON","stringify","_prepareUnsavedDataSelector","getUpdatedData","_prepareAggregateSelector","aggregator","Number","_getAggregates","calculateCustomSummary","commonSkipEmptyValues","calculateCellValue","bind","dataField","skipEmptyValues","log","component","name","summaryProcess","seed","totalValue","step","finalize","_addSortInfo","groupColumn","sortOrder","_findSummaryItem","summaryItemIndex","_getSummarySortByGroups","sortByGroupSummaryInfo","groupSummaryItems","groupColumns","getGroupColumns","_createDataSourceAdapterCore","dataSourceAdapter","currentRemoteOperations","_getSummaryOptions","totalSummaryItems","publicMethods","methods","getTotalSummaryValue","summaryItemName","optionChanged","args","editing","_refreshSummary","isSaving","refresh","load","changesOnly","_addChange","params","_removeChange","cancelEditData","rowsView","_renderCells","_renderGroupSummaryCells","_hasAlignByColumnSummaryItems","columns","_getAlignByColumnCellCount","groupCellColSpan","alignByColumnCellCount","$groupCell","children","last","_renderGroupSummaryCellsCore","_renderCell","parent","_getSummaryCellIndex","_getCellTemplate","parameters","registerModule","defaultOptions","totalItems","texts","sum","format","sumOtherColumn","min","minOtherColumn","max","maxOtherColumn","avg","avgOtherColumn","count","views","footerView","extenders","controllers"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/data_grid/summary/m_summary.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/data_grid/summary/m_summary.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport dataQuery from \"../../../../common/data/query\";\r\nimport storeHelper from \"../../../../common/data/store_helper\";\r\nimport {\r\n    normalizeSortingInfo\r\n} from \"../../../../common/data/utils\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../../core/utils/common\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../../core/utils/data\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isFunction,\r\n    isPlainObject,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport {\r\n    ColumnsView\r\n} from \"../../../grids/grid_core/views/m_columns_view\";\r\nimport AggregateCalculator from \"../m_aggregate_calculator\";\r\nimport gridCore from \"../m_core\";\r\nimport dataSourceAdapterProvider from \"../m_data_source_adapter\";\r\nconst DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\r\nconst DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\r\nconst DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\r\nconst DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\r\nconst DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\r\nconst DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\r\nconst DATAGRID_FOOTER_ROW_CLASS = \"dx-footer-row\";\r\nconst DATAGRID_CELL_DISABLED = \"dx-cell-focus-disabled\";\r\nconst DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\r\nconst DATAGRID_TOTAL_FOOTER_ROW_TYPE = \"totalFooter\";\r\nexport const renderSummaryCell = function(cell, options) {\r\n    const $cell = $(cell);\r\n    const {\r\n        column: column\r\n    } = options;\r\n    const {\r\n        summaryItems: summaryItems\r\n    } = options;\r\n    const $summaryItems = [];\r\n    if (!column.command && summaryItems) {\r\n        for (let i = 0; i < summaryItems.length; i++) {\r\n            const summaryItem = summaryItems[i];\r\n            const text = gridCore.getSummaryText(summaryItem, options.summaryTexts);\r\n            $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(\"dx-datagrid-summary-item\").addClass(\"dx-datagrid-text-content\").addClass(summaryItem.cssClass).toggleClass(\"dx-datagrid-group-text-content\", \"group\" === options.rowType).text(text).attr(\"aria-label\", `${column.caption} ${text}`))\r\n        }\r\n        $cell.append($summaryItems)\r\n    }\r\n};\r\nconst getSummaryCellOptions = function(that, options) {\r\n    const summaryTexts = that.option(\"summary.texts\") || {};\r\n    return {\r\n        totalItem: options.row,\r\n        summaryItems: options.row.summaryCells[options.columnIndex],\r\n        summaryTexts: summaryTexts\r\n    }\r\n};\r\nconst getGroupAggregates = function(data) {\r\n    return data.summary || data.aggregates || []\r\n};\r\nconst recalculateWhileEditing = function(that) {\r\n    return that.option(\"summary.recalculateWhileEditing\")\r\n};\r\nconst forEachGroup = function(groups, groupCount, callback, path) {\r\n    path = path || [];\r\n    for (let i = 0; i < groups.length; i++) {\r\n        path.push(groups[i].key);\r\n        if (1 === groupCount) {\r\n            callback(path, groups[i].items)\r\n        } else {\r\n            forEachGroup(groups[i].items, groupCount - 1, callback, path)\r\n        }\r\n        path.pop()\r\n    }\r\n};\r\nconst applyAddedData = function(data, insertedData, groupLevel) {\r\n    if (groupLevel) {\r\n        return applyAddedData(data, insertedData.map((item => ({\r\n            items: [item]\r\n        })), groupLevel - 1))\r\n    }\r\n    return data.concat(insertedData)\r\n};\r\nconst applyRemovedData = function(data, removedData, groupLevel) {\r\n    if (groupLevel) {\r\n        return data.map((data => {\r\n            const updatedData = {};\r\n            const updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\r\n            Object.defineProperty(updatedData, \"aggregates\", {\r\n                get: () => data.aggregates,\r\n                set: value => {\r\n                    data.aggregates = value\r\n                }\r\n            });\r\n            return extend(updatedData, data, {\r\n                items: updatedItems\r\n            })\r\n        }))\r\n    }\r\n    return data.filter((data => removedData.indexOf(data) < 0))\r\n};\r\nconst sortGroupsBySummaryCore = function(items, groups, sortByGroups) {\r\n    if (!items || !groups.length) {\r\n        return items\r\n    }\r\n    const group = groups[0];\r\n    const sorts = sortByGroups[0];\r\n    let query;\r\n    if (group && sorts && sorts.length) {\r\n        query = dataQuery(items);\r\n        each(sorts, (function(index) {\r\n            if (0 === index) {\r\n                query = query.sortBy(this.selector, this.desc)\r\n            } else {\r\n                query = query.thenBy(this.selector, this.desc)\r\n            }\r\n        }));\r\n        query.enumerate().done((sortedItems => {\r\n            items = sortedItems\r\n        }))\r\n    }\r\n    groups = groups.slice(1);\r\n    sortByGroups = sortByGroups.slice(1);\r\n    if (groups.length && sortByGroups.length) {\r\n        each(items, (function() {\r\n            this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups)\r\n        }))\r\n    }\r\n    return items\r\n};\r\nconst sortGroupsBySummary = function(data, group, summary) {\r\n    const sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\r\n    if (sortByGroups && sortByGroups.length) {\r\n        return sortGroupsBySummaryCore(data, group, sortByGroups)\r\n    }\r\n    return data\r\n};\r\nconst calculateAggregates = function(that, summary, data, groupLevel) {\r\n    let calculator;\r\n    if (recalculateWhileEditing(that)) {\r\n        const editingController = that._editingController;\r\n        if (editingController) {\r\n            const insertedData = editingController.getInsertedData();\r\n            if (insertedData.length) {\r\n                data = applyAddedData(data, insertedData, groupLevel)\r\n            }\r\n            const removedData = editingController.getRemovedData();\r\n            if (removedData.length) {\r\n                data = applyRemovedData(data, removedData, groupLevel)\r\n            }\r\n        }\r\n    }\r\n    if (summary) {\r\n        calculator = new AggregateCalculator({\r\n            totalAggregates: summary.totalAggregates,\r\n            groupAggregates: summary.groupAggregates,\r\n            data: data,\r\n            groupLevel: groupLevel\r\n        });\r\n        calculator.calculate()\r\n    }\r\n    return calculator ? calculator.totalAggregates() : []\r\n};\r\nexport class FooterView extends ColumnsView {\r\n    _getRows() {\r\n        return this._dataController.footerItems()\r\n    }\r\n    _getCellOptions(options) {\r\n        return extend(super._getCellOptions(options), getSummaryCellOptions(this, options))\r\n    }\r\n    _renderCellContent($cell, options) {\r\n        renderSummaryCell($cell, options);\r\n        super._renderCellContent.apply(this, arguments)\r\n    }\r\n    _renderCore(change) {\r\n        let needUpdateScrollLeft = false;\r\n        const totalItem = this._dataController.footerItems()[0];\r\n        if (!change || !change.columnIndices) {\r\n            this.element().empty().addClass(\"dx-datagrid-total-footer\").toggleClass(\"dx-datagrid-nowrap\", !this.option(\"wordWrapEnabled\"));\r\n            needUpdateScrollLeft = true\r\n        }\r\n        if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\r\n            this._updateContent(this._renderTable({\r\n                change: change\r\n            }), change);\r\n            needUpdateScrollLeft && this._updateScrollLeftPosition()\r\n        }\r\n        return super._renderCore(change)\r\n    }\r\n    _updateContent($newTable, change) {\r\n        if (change && \"update\" === change.changeType && change.columnIndices) {\r\n            return this.waitAsyncTemplates().done((() => {\r\n                const $row = this.getTableElement().find(\".dx-row\");\r\n                const $newRow = $newTable.find(\".dx-row\");\r\n                this._updateCells($row, $newRow, change.columnIndices[0])\r\n            }))\r\n        }\r\n        return super._updateContent.apply(this, arguments)\r\n    }\r\n    _rowClick(e) {\r\n        const item = this._dataController.footerItems()[e.rowIndex] || {};\r\n        this.executeAction(\"onRowClick\", extend({}, e, item))\r\n    }\r\n    _columnOptionChanged(e) {\r\n        const {\r\n            optionNames: optionNames\r\n        } = e;\r\n        if (e.changeTypes.grouping) {\r\n            return\r\n        }\r\n        if (optionNames.width || optionNames.visibleWidth) {\r\n            super._columnOptionChanged(e)\r\n        }\r\n    }\r\n    _handleDataChanged(e) {\r\n        const {\r\n            changeType: changeType\r\n        } = e;\r\n        if (\"update\" === e.changeType && e.repaintChangesOnly) {\r\n            if (!e.totalColumnIndices) {\r\n                this.render()\r\n            } else if (e.totalColumnIndices.length) {\r\n                this.render(null, {\r\n                    changeType: \"update\",\r\n                    columnIndices: [e.totalColumnIndices]\r\n                })\r\n            }\r\n        } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\r\n            this.render()\r\n        }\r\n    }\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        if (\"totalFooter\" === row.rowType) {\r\n            $row.addClass(\"dx-footer-row\");\r\n            $row.addClass(DATAGRID_CELL_DISABLED);\r\n            $row.attr(\"tabindex\", 0)\r\n        }\r\n        return $row\r\n    }\r\n    getHeight() {\r\n        return this.getElementHeight()\r\n    }\r\n    isVisible() {\r\n        return !!this._dataController.footerItems().length\r\n    }\r\n}\r\nconst dataSourceAdapterExtender = Base => class extends Base {\r\n    init() {\r\n        super.init.apply(this, arguments);\r\n        this._editingController = this.getController(\"editing\");\r\n        this._totalAggregates = [];\r\n        this._summaryGetter = noop\r\n    }\r\n    summaryGetter(summaryGetter) {\r\n        if (!arguments.length) {\r\n            return this._summaryGetter\r\n        }\r\n        if (isFunction(summaryGetter)) {\r\n            this._summaryGetter = summaryGetter\r\n        }\r\n    }\r\n    summary(summary) {\r\n        if (!arguments.length) {\r\n            return this._summaryGetter()\r\n        }\r\n        this._summaryGetter = function() {\r\n            return summary\r\n        }\r\n    }\r\n    totalAggregates() {\r\n        return this._totalAggregates\r\n    }\r\n    isLastLevelGroupItemsPagingLocal() {\r\n        const summary = this.summary();\r\n        const sortByGroupsInfo = null === summary || void 0 === summary ? void 0 : summary.sortByGroups();\r\n        return null === sortByGroupsInfo || void 0 === sortByGroupsInfo ? void 0 : sortByGroupsInfo.length\r\n    }\r\n    sortLastLevelGroupItems(items, groups, paths) {\r\n        const groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\r\n        let result = [];\r\n        paths.forEach((path => {\r\n            forEachGroup(groupedItems, groups.length, ((itemsPath, items) => {\r\n                if (path.toString() === itemsPath.toString()) {\r\n                    result = result.concat(items)\r\n                }\r\n            }))\r\n        }));\r\n        return result\r\n    }\r\n    _customizeRemoteOperations(options) {\r\n        const summary = this.summary();\r\n        if (summary) {\r\n            if (options.remoteOperations.summary) {\r\n                if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                    if (options.storeLoadOptions.group) {\r\n                        if (options.remoteOperations.grouping) {\r\n                            options.storeLoadOptions.groupSummary = summary.groupAggregates\r\n                        } else if (summary.groupAggregates.length) {\r\n                            options.remoteOperations.paging = false\r\n                        }\r\n                    }\r\n                    options.storeLoadOptions.totalSummary = summary.totalAggregates\r\n                }\r\n            } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\r\n                options.remoteOperations.paging = false\r\n            }\r\n        }\r\n        super._customizeRemoteOperations.apply(this, arguments);\r\n        const cachedExtra = options.cachedData.extra;\r\n        if (null !== cachedExtra && void 0 !== cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\r\n            options.storeLoadOptions.totalSummary = void 0\r\n        }\r\n    }\r\n    _handleDataLoadedCore(options) {\r\n        const groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\r\n        const remoteOperations = options.remoteOperations || {};\r\n        const summary = this.summaryGetter()(remoteOperations);\r\n        if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n            if (remoteOperations.summary) {\r\n                if (!remoteOperations.paging && groups.length && summary) {\r\n                    if (!remoteOperations.grouping) {\r\n                        calculateAggregates(this, {\r\n                            groupAggregates: summary.groupAggregates\r\n                        }, options.data, groups.length)\r\n                    }\r\n                    options.data = sortGroupsBySummary(options.data, groups, summary)\r\n                }\r\n            } else if (!remoteOperations.paging && summary) {\r\n                var _options$cachedData;\r\n                const operationTypes = options.operationTypes || {};\r\n                const hasOperations = Object.keys(operationTypes).some((type => operationTypes[type]));\r\n                if (!hasOperations || !(null !== (_options$cachedData = options.cachedData) && void 0 !== _options$cachedData && null !== (_options$cachedData = _options$cachedData.extra) && void 0 !== _options$cachedData && _options$cachedData.summary) || groups.length && summary.groupAggregates.length) {\r\n                    const totalAggregates = calculateAggregates(this, summary, options.data, groups.length);\r\n                    options.extra = isPlainObject(options.extra) ? options.extra : {};\r\n                    options.extra.summary = totalAggregates;\r\n                    if (options.cachedData) {\r\n                        options.cachedData.extra = options.extra\r\n                    }\r\n                }\r\n                options.data = sortGroupsBySummary(options.data, groups, summary)\r\n            }\r\n        }\r\n        if (!options.isCustomLoading) {\r\n            this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates\r\n        }\r\n        super._handleDataLoadedCore(options)\r\n    }\r\n};\r\ndataSourceAdapterProvider.extend(dataSourceAdapterExtender);\r\nconst data = Base => class extends Base {\r\n    _isDataColumn(column) {\r\n        return column && (!isDefined(column.groupIndex) || column.showWhenGrouped)\r\n    }\r\n    _isGroupFooterVisible() {\r\n        const groupItems = this.option(\"summary.groupItems\") || [];\r\n        for (let i = 0; i < groupItems.length; i++) {\r\n            const groupItem = groupItems[i];\r\n            const column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\r\n            if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _processGroupItems(items, groupCount, options) {\r\n        const data = options && options.data;\r\n        const result = super._processGroupItems.apply(this, arguments);\r\n        if (options) {\r\n            if (void 0 === options.isGroupFooterVisible) {\r\n                options.isGroupFooterVisible = this._isGroupFooterVisible()\r\n            }\r\n            if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\r\n                result.push({\r\n                    rowType: \"groupFooter\",\r\n                    key: options.path.slice(),\r\n                    data: data,\r\n                    groupIndex: options.path.length - 1,\r\n                    values: []\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _processGroupItem(groupItem, options) {\r\n        const that = this;\r\n        if (!options.summaryGroupItems) {\r\n            options.summaryGroupItems = that.option(\"summary.groupItems\") || []\r\n        }\r\n        if (\"group\" === groupItem.rowType) {\r\n            let groupColumnIndex = -1;\r\n            let afterGroupColumnIndex = -1;\r\n            each(options.visibleColumns, (function(visibleIndex) {\r\n                const prevColumn = options.visibleColumns[visibleIndex - 1];\r\n                if (groupItem.groupIndex === this.groupIndex) {\r\n                    groupColumnIndex = this.index\r\n                }\r\n                if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\r\n                    afterGroupColumnIndex = this.index\r\n                }\r\n            }));\r\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, ((summaryItem, column) => {\r\n                if (summaryItem.showInGroupFooter) {\r\n                    return -1\r\n                }\r\n                if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\r\n                    return column.index\r\n                }\r\n                return groupColumnIndex\r\n            }), true)\r\n        }\r\n        if (\"groupFooter\" === groupItem.rowType) {\r\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, ((summaryItem, column) => summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1))\r\n        }\r\n        return groupItem\r\n    }\r\n    _calculateSummaryCells(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\r\n        const that = this;\r\n        const summaryCells = [];\r\n        const summaryCellsByColumns = {};\r\n        each(summaryItems, ((summaryIndex, summaryItem) => {\r\n            const column = that._columnsController.columnOption(summaryItem.column);\r\n            const showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\r\n            const columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\r\n            if (columnIndex >= 0) {\r\n                if (!summaryCellsByColumns[columnIndex]) {\r\n                    summaryCellsByColumns[columnIndex] = []\r\n                }\r\n                const aggregate = aggregates[summaryIndex];\r\n                if (aggregate === aggregate) {\r\n                    let valueFormat;\r\n                    if (isDefined(summaryItem.valueFormat)) {\r\n                        valueFormat = summaryItem.valueFormat\r\n                    } else if (\"count\" !== summaryItem.summaryType) {\r\n                        valueFormat = gridCore.getFormatByDataType(column && column.dataType)\r\n                    }\r\n                    summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\r\n                        value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\r\n                        valueFormat: valueFormat,\r\n                        columnCaption: column && column.index !== columnIndex ? column.caption : void 0\r\n                    }))\r\n                }\r\n            }\r\n        }));\r\n        if (!isEmptyObject(summaryCellsByColumns)) {\r\n            visibleColumns.forEach(((column, visibleIndex) => {\r\n                const prevColumn = visibleColumns[visibleIndex - 1];\r\n                const columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\r\n                summaryCells.push(summaryCellsByColumns[columnIndex] || [])\r\n            }))\r\n        }\r\n        return summaryCells\r\n    }\r\n    _getSummaryCells(summaryTotalItems, totalAggregates) {\r\n        const that = this;\r\n        const columnsController = that._columnsController;\r\n        return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), ((summaryItem, column) => that._isDataColumn(column) ? column.index : -1))\r\n    }\r\n    _updateItemsCore(change) {\r\n        const that = this;\r\n        let summaryCells;\r\n        const dataSource = that._dataSource;\r\n        const footerItems = that._footerItems;\r\n        const oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\r\n        const summaryTotalItems = that.option(\"summary.totalItems\");\r\n        that._footerItems = [];\r\n        if (dataSource && summaryTotalItems && summaryTotalItems.length) {\r\n            const totalAggregates = dataSource.totalAggregates();\r\n            summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\r\n            if (change && change.repaintChangesOnly && oldSummaryCells) {\r\n                change.totalColumnIndices = summaryCells.map(((summaryCell, index) => {\r\n                    if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\r\n                        return index\r\n                    }\r\n                    return -1\r\n                })).filter((index => index >= 0))\r\n            }\r\n            if (summaryCells.length) {\r\n                that._footerItems.push({\r\n                    rowType: \"totalFooter\",\r\n                    summaryCells: summaryCells\r\n                })\r\n            }\r\n        }\r\n        super._updateItemsCore(change)\r\n    }\r\n    _prepareUnsavedDataSelector(selector) {\r\n        if (recalculateWhileEditing(this)) {\r\n            const editingController = this._editingController;\r\n            if (editingController) {\r\n                return function(data) {\r\n                    data = editingController.getUpdatedData(data);\r\n                    return selector(data)\r\n                }\r\n            }\r\n        }\r\n        return selector\r\n    }\r\n    _prepareAggregateSelector(selector, aggregator) {\r\n        selector = this._prepareUnsavedDataSelector(selector);\r\n        if (\"avg\" === aggregator || \"sum\" === aggregator) {\r\n            return function(data) {\r\n                const value = selector(data);\r\n                return isDefined(value) ? Number(value) : value\r\n            }\r\n        }\r\n        return selector\r\n    }\r\n    _getAggregates(summaryItems, remoteOperations) {\r\n        const that = this;\r\n        let calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\r\n        const commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\r\n        return map(summaryItems || [], (summaryItem => {\r\n            const column = this._columnsController.columnOption(summaryItem.column);\r\n            const calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\r\n            let aggregator = summaryItem.summaryType || \"count\";\r\n            const skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\r\n            if (remoteOperations) {\r\n                return {\r\n                    selector: summaryItem.column,\r\n                    summaryType: aggregator\r\n                }\r\n            }\r\n            const selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\r\n            if (\"custom\" === aggregator) {\r\n                if (!calculateCustomSummary) {\r\n                    errors.log(\"E1026\");\r\n                    calculateCustomSummary = function() {}\r\n                }\r\n                const options = {\r\n                    component: that.component,\r\n                    name: summaryItem.name\r\n                };\r\n                calculateCustomSummary(options);\r\n                options.summaryProcess = \"calculate\";\r\n                aggregator = {\r\n                    seed(groupIndex) {\r\n                        options.summaryProcess = \"start\";\r\n                        options.totalValue = void 0;\r\n                        options.groupIndex = groupIndex;\r\n                        delete options.value;\r\n                        calculateCustomSummary(options);\r\n                        return options.totalValue\r\n                    },\r\n                    step(totalValue, value) {\r\n                        options.summaryProcess = \"calculate\";\r\n                        options.totalValue = totalValue;\r\n                        options.value = value;\r\n                        calculateCustomSummary(options);\r\n                        return options.totalValue\r\n                    },\r\n                    finalize(totalValue) {\r\n                        options.summaryProcess = \"finalize\";\r\n                        options.totalValue = totalValue;\r\n                        delete options.value;\r\n                        calculateCustomSummary(options);\r\n                        return options.totalValue\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                selector: selector,\r\n                aggregator: aggregator,\r\n                skipEmptyValues: skipEmptyValues\r\n            }\r\n        }))\r\n    }\r\n    _addSortInfo(sortByGroups, groupColumn, selector, sortOrder) {\r\n        if (groupColumn) {\r\n            const {\r\n                groupIndex: groupIndex\r\n            } = groupColumn;\r\n            sortOrder = sortOrder || groupColumn.sortOrder;\r\n            if (isDefined(groupIndex)) {\r\n                sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\r\n                sortByGroups[groupIndex].push({\r\n                    selector: selector,\r\n                    desc: \"desc\" === sortOrder\r\n                })\r\n            }\r\n        }\r\n    }\r\n    _findSummaryItem(summaryItems, name) {\r\n        let summaryItemIndex = -1;\r\n        if (isDefined(name)) {\r\n            each(summaryItems || [], (function(index) {\r\n                if (this.name === name || index === name || this.summaryType === name || this.column === name || function(summaryItem) {\r\n                        const {\r\n                            summaryType: summaryType\r\n                        } = summaryItem;\r\n                        const {\r\n                            column: column\r\n                        } = summaryItem;\r\n                        return summaryType && column && `${summaryType}_${column}`\r\n                    }(this) === name) {\r\n                    summaryItemIndex = index;\r\n                    return false\r\n                }\r\n            }))\r\n        }\r\n        return summaryItemIndex\r\n    }\r\n    _getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems) {\r\n        const that = this;\r\n        const columnsController = that._columnsController;\r\n        const groupColumns = columnsController.getGroupColumns();\r\n        const sortByGroups = [];\r\n        if (!groupSummaryItems || !groupSummaryItems.length) {\r\n            return\r\n        }\r\n        each(sortByGroupSummaryInfo || [], (function() {\r\n            const {\r\n                sortOrder: sortOrder\r\n            } = this;\r\n            let {\r\n                groupColumn: groupColumn\r\n            } = this;\r\n            const summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\r\n            if (summaryItemIndex < 0) {\r\n                return\r\n            }\r\n            const selector = function(data) {\r\n                return getGroupAggregates(data)[summaryItemIndex]\r\n            };\r\n            if (isDefined(groupColumn)) {\r\n                groupColumn = columnsController.columnOption(groupColumn);\r\n                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n            } else {\r\n                each(groupColumns, ((groupIndex, groupColumn) => {\r\n                    that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                }))\r\n            }\r\n        }));\r\n        return sortByGroups\r\n    }\r\n    _createDataSourceAdapterCore(dataSource, remoteOperations) {\r\n        const that = this;\r\n        const dataSourceAdapter = super._createDataSourceAdapterCore(dataSource, remoteOperations);\r\n        dataSourceAdapter.summaryGetter((currentRemoteOperations => that._getSummaryOptions(currentRemoteOperations || remoteOperations)));\r\n        return dataSourceAdapter\r\n    }\r\n    _getSummaryOptions(remoteOperations) {\r\n        const that = this;\r\n        const groupSummaryItems = that.option(\"summary.groupItems\");\r\n        const totalSummaryItems = that.option(\"summary.totalItems\");\r\n        const sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\r\n        const groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\r\n        const totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\r\n        const sortByGroups = function() {\r\n            return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems)\r\n        };\r\n        if (groupAggregates.length || totalAggregates.length) {\r\n            return {\r\n                groupAggregates: groupAggregates,\r\n                totalAggregates: totalAggregates,\r\n                sortByGroups: sortByGroups\r\n            }\r\n        }\r\n        return\r\n    }\r\n    publicMethods() {\r\n        const methods = super.publicMethods();\r\n        methods.push(\"getTotalSummaryValue\");\r\n        return methods\r\n    }\r\n    getTotalSummaryValue(summaryItemName) {\r\n        const summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\r\n        const aggregates = this._dataSource.totalAggregates();\r\n        if (aggregates.length && summaryItemIndex > -1) {\r\n            return aggregates[summaryItemIndex]\r\n        }\r\n    }\r\n    optionChanged(args) {\r\n        if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\r\n            args.name = \"dataSource\"\r\n        }\r\n        super.optionChanged(args)\r\n    }\r\n    init() {\r\n        this._footerItems = [];\r\n        super.init()\r\n    }\r\n    footerItems() {\r\n        return this._footerItems\r\n    }\r\n};\r\nconst editing = Base => class extends Base {\r\n    _refreshSummary() {\r\n        if (recalculateWhileEditing(this) && !this.isSaving()) {\r\n            this._dataController.refresh({\r\n                load: true,\r\n                changesOnly: true\r\n            })\r\n        }\r\n    }\r\n    _addChange(params) {\r\n        const result = super._addChange.apply(this, arguments);\r\n        if (params.type) {\r\n            this._refreshSummary()\r\n        }\r\n        return result\r\n    }\r\n    _removeChange() {\r\n        const result = super._removeChange.apply(this, arguments);\r\n        this._refreshSummary();\r\n        return result\r\n    }\r\n    cancelEditData() {\r\n        const result = super.cancelEditData.apply(this, arguments);\r\n        this._refreshSummary();\r\n        return result\r\n    }\r\n};\r\nconst rowsView = Base => class extends Base {\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        row && $row.addClass(\"groupFooter\" === row.rowType ? \"dx-datagrid-group-footer\" : \"\");\r\n        return $row\r\n    }\r\n    _renderCells($row, options) {\r\n        super._renderCells.apply(this, arguments);\r\n        if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\r\n            this._renderGroupSummaryCells($row, options)\r\n        }\r\n    }\r\n    _hasAlignByColumnSummaryItems(columnIndex, options) {\r\n        return !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length\r\n    }\r\n    _getAlignByColumnCellCount(groupCellColSpan, options) {\r\n        let alignByColumnCellCount = 0;\r\n        for (let i = 1; i < groupCellColSpan; i++) {\r\n            const columnIndex = options.row.summaryCells.length - i;\r\n            alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount\r\n        }\r\n        return alignByColumnCellCount\r\n    }\r\n    _renderGroupSummaryCells($row, options) {\r\n        const $groupCell = $row.children().last();\r\n        const groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\r\n        const alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\r\n        this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount)\r\n    }\r\n    _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\r\n        if (alignByColumnCellCount > 0) {\r\n            $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\r\n            for (let i = 0; i < alignByColumnCellCount; i++) {\r\n                const columnIndex = options.columns.length - alignByColumnCellCount + i;\r\n                this._renderCell($groupCell.parent(), extend({\r\n                    column: options.columns[columnIndex],\r\n                    columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\r\n                }, options))\r\n            }\r\n        }\r\n    }\r\n    _getSummaryCellIndex(columnIndex, columns) {\r\n        return columnIndex\r\n    }\r\n    _getCellTemplate(options) {\r\n        if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\r\n            return renderSummaryCell\r\n        }\r\n        return super._getCellTemplate(options)\r\n    }\r\n    _getCellOptions(options) {\r\n        const that = this;\r\n        const parameters = super._getCellOptions(options);\r\n        if (options.row.summaryCells) {\r\n            return extend(parameters, getSummaryCellOptions(that, options))\r\n        }\r\n        return parameters\r\n    }\r\n};\r\ngridCore.registerModule(\"summary\", {\r\n    defaultOptions: () => ({\r\n        summary: {\r\n            groupItems: void 0,\r\n            totalItems: void 0,\r\n            calculateCustomSummary: void 0,\r\n            skipEmptyValues: true,\r\n            recalculateWhileEditing: false,\r\n            texts: {\r\n                sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\r\n                sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\r\n                min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\r\n                minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\r\n                max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\r\n                maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\r\n                avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\r\n                avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\r\n                count: messageLocalization.format(\"dxDataGrid-summaryCount\")\r\n            }\r\n        },\r\n        sortByGroupSummaryInfo: void 0\r\n    }),\r\n    views: {\r\n        footerView: FooterView\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: data,\r\n            editing: editing\r\n        },\r\n        views: {\r\n            rowsView: rowsView\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}