{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/data_grid/grouping/m_grouping_collapsed.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { errors as dataErrors } from \"../../../../common/data/errors\";\nimport { Deferred, when } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport errors from \"../../../../ui/widget/ui.errors\";\nimport dataGridCore from \"../m_core\";\nimport { createGroupFilter } from \"../m_utils\";\nimport { createOffsetFilter, GroupingHelper as GroupingHelperCore } from \"./m_grouping_core\";\nfunction getContinuationGroupCount(groupOffset, pageSize, groupSize, groupIndex) {\n  groupIndex = groupIndex || 0;\n  if (pageSize > 1 && groupSize > 0) {\n    let pageOffset = groupOffset - Math.floor(groupOffset / pageSize) * pageSize || pageSize;\n    pageOffset += groupSize - groupIndex - 2;\n    if (pageOffset < 0) {\n      pageOffset += pageSize;\n    }\n    return Math.floor(pageOffset / (pageSize - groupIndex - 1));\n  }\n  return 0;\n}\nconst foreachExpandedGroups = function (that, callback, updateGroups) {\n  return that.foreachGroups((groupInfo, parents) => {\n    if (groupInfo.isExpanded) {\n      return callback(groupInfo, parents);\n    }\n  }, true, false, updateGroups, updateGroups);\n};\nconst processGroupItems = function (that, items, groupsCount, expandedInfo, path, isCustomLoading, isLastGroupExpanded) {\n  let isExpanded;\n  expandedInfo.items = expandedInfo.items || [];\n  expandedInfo.paths = expandedInfo.paths || [];\n  expandedInfo.count = expandedInfo.count || 0;\n  expandedInfo.lastCount = expandedInfo.lastCount || 0;\n  if (!groupsCount) {\n    return;\n  }\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    if (void 0 !== item.items) {\n      path.push(item.key);\n      if (isCustomLoading) {\n        isExpanded = true;\n      } else {\n        const groupInfo = that.findGroupInfo(path);\n        isExpanded = groupInfo && groupInfo.isExpanded;\n      }\n      if (!isExpanded) {\n        item.collapsedItems = item.items;\n        item.items = null;\n      } else if (item.items) {\n        processGroupItems(that, item.items, groupsCount - 1, expandedInfo, path, isCustomLoading, isLastGroupExpanded);\n      } else if (1 === groupsCount && item.count && (!isCustomLoading || isLastGroupExpanded)) {\n        expandedInfo.items.push(item);\n        expandedInfo.paths.push(path.slice(0));\n        expandedInfo.count += expandedInfo.lastCount;\n        expandedInfo.lastCount = item.count;\n      }\n      path.pop();\n    }\n  }\n};\nconst updateGroupInfoItem = function (that, item, isLastGroupLevel, path, offset) {\n  const groupInfo = that.findGroupInfo(path);\n  let count;\n  if (!groupInfo) {\n    if (isLastGroupLevel) {\n      count = item.count > 0 ? item.count : item.items.length;\n    }\n    that.addGroupInfo({\n      isExpanded: that._isGroupExpanded(path.length - 1),\n      path: path.slice(0),\n      offset: offset,\n      count: count || 0\n    });\n  } else {\n    if (isLastGroupLevel) {\n      groupInfo.count = item.count > 0 ? item.count : item.items && item.items.length || 0;\n    } else {\n      item.count = groupInfo.count || item.count;\n    }\n    groupInfo.offset = offset;\n  }\n};\nconst updateGroupInfos = function (that, options, items, loadedGroupCount, groupIndex, path, parentIndex) {\n  const groupCount = options.group ? options.group.length : 0;\n  const isLastGroupLevel = groupCount === loadedGroupCount;\n  const remotePaging = options.remoteOperations.paging;\n  let offset = 0;\n  let totalCount = 0;\n  let count;\n  groupIndex = groupIndex || 0;\n  path = path || [];\n  if (remotePaging && !parentIndex) {\n    offset = 0 === groupIndex ? options.skip || 0 : options.skips[groupIndex - 1] || 0;\n  }\n  if (groupIndex >= loadedGroupCount) {\n    return items.length;\n  }\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    if (item) {\n      path.push(item.key);\n      if (!item.count && !item.items || void 0 === item.items) {\n        return -1;\n      }\n      updateGroupInfoItem(that, item, isLastGroupLevel, path, offset + i);\n      count = item.items ? updateGroupInfos(that, options, item.items, loadedGroupCount, groupIndex + 1, path, i) : item.count || -1;\n      if (count < 0) {\n        return -1;\n      }\n      totalCount += count;\n      path.pop();\n    }\n  }\n  return totalCount;\n};\nconst isGroupExpanded = function (groups, groupIndex) {\n  return groups && groups.length && groups[groupIndex] && !!groups[groupIndex].isExpanded;\n};\nconst getTotalOffset = function (groupInfos, pageSize, offset) {\n  let groupSize;\n  let totalOffset = offset;\n  for (let groupIndex = 0; groupIndex < groupInfos.length; groupIndex++) {\n    groupSize = groupInfos[groupIndex].offset + 1;\n    if (groupIndex > 0) {\n      groupSize += groupInfos[groupIndex - 1].childrenTotalCount;\n      if (pageSize) {\n        groupSize += getContinuationGroupCount(totalOffset, pageSize, groupSize, groupIndex - 1) * groupIndex;\n      }\n    }\n    totalOffset += groupSize;\n  }\n  return totalOffset;\n};\nfunction applyContinuationToGroupItem(options, expandedInfo, groupLevel, expandedItemIndex) {\n  const item = expandedInfo.items[expandedItemIndex];\n  const skip = options.skips && options.skips[groupLevel];\n  const take = options.takes && options.takes[groupLevel];\n  const isLastExpandedItem = expandedItemIndex === expandedInfo.items.length - 1;\n  const isFirstExpandedItem = 0 === expandedItemIndex;\n  const lastExpandedItemSkip = isFirstExpandedItem && skip || 0;\n  const isItemsTruncatedByTake = item.count > take + lastExpandedItemSkip;\n  if (isFirstExpandedItem && void 0 !== skip) {\n    item.isContinuation = true;\n  }\n  if (isLastExpandedItem && void 0 !== take && isItemsTruncatedByTake) {\n    item.isContinuationOnNextPage = true;\n  }\n}\nfunction fillSkipTakeInExpandedInfo(options, expandedInfo, currentGroupCount) {\n  const currentGroupIndex = currentGroupCount - 1;\n  const groupCount = options.group ? options.group.length : 0;\n  expandedInfo.skip = options.skips && options.skips[currentGroupIndex];\n  if (options.takes && void 0 !== options.takes[currentGroupIndex]) {\n    if (groupCount === currentGroupCount) {\n      expandedInfo.take = expandedInfo.count ? expandedInfo.count - (expandedInfo.skip || 0) : 0;\n    } else {\n      expandedInfo.take = 0;\n    }\n    expandedInfo.take += options.takes[currentGroupIndex];\n  }\n}\nfunction isDataDeferred(data) {\n  return !Array.isArray(data);\n}\nfunction makeDataDeferred(options) {\n  if (!isDataDeferred(options.data)) {\n    options.data = new Deferred();\n  }\n}\nfunction loadGroupItems(that, options, loadedGroupCount, expandedInfo, groupLevel, data) {\n  if (!options.isCustomLoading) {\n    expandedInfo = {};\n    processGroupItems(that, data, loadedGroupCount, expandedInfo, []);\n    fillSkipTakeInExpandedInfo(options, expandedInfo, loadedGroupCount);\n  }\n  const groupCount = options.group ? options.group.length : 0;\n  if (expandedInfo.paths.length && groupCount - loadedGroupCount > 0) {\n    makeDataDeferred(options);\n    loadExpandedGroups(that, options, expandedInfo, loadedGroupCount, groupLevel, data);\n  } else if (expandedInfo.paths.length && options.storeLoadOptions.group) {\n    makeDataDeferred(options);\n    loadLastLevelGroupItems(that, options, expandedInfo, data);\n  } else if (isDataDeferred(options.data)) {\n    options.data.resolve(data);\n  }\n}\nfunction loadExpandedGroups(that, options, expandedInfo, loadedGroupCount, groupLevel, data) {\n  const groups = options.group || [];\n  const currentGroup = groups[groupLevel + 1];\n  const deferreds = [];\n  each(expandedInfo.paths, expandedItemIndex => {\n    var _options$storeLoadOpt;\n    const loadOptions = {\n      requireTotalCount: false,\n      requireGroupCount: true,\n      group: [currentGroup],\n      groupSummary: options.storeLoadOptions.groupSummary,\n      filter: createGroupFilter(expandedInfo.paths[expandedItemIndex], {\n        filter: options.storeLoadOptions.filter,\n        group: groups\n      }),\n      select: options.storeLoadOptions.select,\n      langParams: null === (_options$storeLoadOpt = options.storeLoadOptions) || void 0 === _options$storeLoadOpt ? void 0 : _options$storeLoadOpt.langParams\n    };\n    if (0 === expandedItemIndex) {\n      loadOptions.skip = expandedInfo.skip || 0;\n    }\n    if (expandedItemIndex === expandedInfo.paths.length - 1) {\n      loadOptions.take = expandedInfo.take;\n    }\n    const loadResult = 0 === loadOptions.take ? [] : that._dataSource.loadFromStore(loadOptions);\n    when(loadResult).done(data => {\n      const item = expandedInfo.items[expandedItemIndex];\n      applyContinuationToGroupItem(options, expandedInfo, groupLevel, expandedItemIndex);\n      item.items = data;\n    });\n    deferreds.push(loadResult);\n  });\n  when.apply(null, deferreds).done(() => {\n    updateGroupInfos(that, options, data, loadedGroupCount + 1);\n    loadGroupItems(that, options, loadedGroupCount + 1, expandedInfo, groupLevel + 1, data);\n  });\n}\nfunction loadLastLevelGroupItems(that, options, expandedInfo, data) {\n  const expandedFilters = [];\n  const groups = options.group || [];\n  each(expandedInfo.paths, (_, expandedPath) => {\n    expandedFilters.push(createGroupFilter(expandedPath, {\n      group: options.isCustomLoading ? options.storeLoadOptions.group : groups\n    }));\n  });\n  let {\n    filter: filter\n  } = options.storeLoadOptions;\n  if (!options.storeLoadOptions.isLoadingAll) {\n    filter = dataGridCore.combineFilters([filter, dataGridCore.combineFilters(expandedFilters, \"or\")]);\n  }\n  const loadOptions = extend({}, options.storeLoadOptions, {\n    requireTotalCount: false,\n    requireGroupCount: false,\n    group: null,\n    sort: groups.concat(dataGridCore.normalizeSortingInfo(options.storeLoadOptions.sort || [])),\n    filter: filter\n  });\n  const isPagingLocal = that._dataSource.isLastLevelGroupItemsPagingLocal();\n  if (!isPagingLocal) {\n    loadOptions.skip = expandedInfo.skip;\n    loadOptions.take = expandedInfo.take;\n  }\n  when(0 === expandedInfo.take ? [] : that._dataSource.loadFromStore(loadOptions)).done(items => {\n    if (isPagingLocal) {\n      items = that._dataSource.sortLastLevelGroupItems(items, groups, expandedInfo.paths);\n      items = expandedInfo.skip ? items.slice(expandedInfo.skip) : items;\n      items = expandedInfo.take ? items.slice(0, expandedInfo.take) : items;\n    }\n    each(expandedInfo.items, (index, item) => {\n      const itemCount = item.count - (0 === index && expandedInfo.skip || 0);\n      const expandedItems = items.splice(0, itemCount);\n      applyContinuationToGroupItem(options, expandedInfo, groups.length - 1, index);\n      item.items = expandedItems;\n    });\n    options.data.resolve(data);\n  }).fail(options.data.reject);\n}\nconst loadGroupTotalCount = function (dataSource, options) {\n  const d = new Deferred();\n  const isGrouping = !!(options.group && options.group.length);\n  const loadOptions = extend({\n    skip: 0,\n    take: 1,\n    requireGroupCount: isGrouping,\n    requireTotalCount: !isGrouping\n  }, options, {\n    group: isGrouping ? options.group : null\n  });\n  dataSource.load(loadOptions).done((data, extra) => {\n    const count = extra && (isGrouping ? extra.groupCount : extra.totalCount);\n    if (!isFinite(count)) {\n      d.reject(dataErrors.Error(isGrouping ? \"E4022\" : \"E4021\"));\n      return;\n    }\n    d.resolve(count);\n  }).fail(d.reject.bind(d));\n  return d;\n};\nexport class GroupingHelper extends GroupingHelperCore {\n  updateTotalItemsCount(options) {\n    let totalItemsCount = 0;\n    const totalCount = options.extra && options.extra.totalCount || 0;\n    const groupCount = options.extra && options.extra.groupCount || 0;\n    const pageSize = this._dataSource.pageSize();\n    const isVirtualPaging = this._isVirtualPaging();\n    foreachExpandedGroups(this, groupInfo => {\n      groupInfo.childrenTotalCount = 0;\n    });\n    foreachExpandedGroups(this, (groupInfo, parents) => {\n      const totalOffset = getTotalOffset(parents, isVirtualPaging ? 0 : pageSize, totalItemsCount);\n      let count = groupInfo.count + groupInfo.childrenTotalCount;\n      if (!isVirtualPaging) {\n        count += getContinuationGroupCount(totalOffset, pageSize, count, parents.length - 1);\n      }\n      if (parents[parents.length - 2]) {\n        parents[parents.length - 2].childrenTotalCount += count;\n      } else {\n        totalItemsCount += count;\n      }\n    });\n    super.updateTotalItemsCount(totalItemsCount - totalCount + groupCount);\n  }\n  _isGroupExpanded(groupIndex) {\n    const groups = this._dataSource.group();\n    return isGroupExpanded(groups, groupIndex);\n  }\n  _updatePagingOptions(options, callback) {\n    const that = this;\n    const isVirtualPaging = that._isVirtualPaging();\n    const pageSize = that._dataSource.pageSize();\n    const skips = [];\n    const takes = [];\n    let skipChildrenTotalCount = 0;\n    let childrenTotalCount = 0;\n    if (options.take) {\n      foreachExpandedGroups(this, groupInfo => {\n        groupInfo.childrenTotalCount = 0;\n        groupInfo.skipChildrenTotalCount = 0;\n      });\n      foreachExpandedGroups(that, (groupInfo, parents) => {\n        let take;\n        let takeCorrection = 0;\n        let parentTakeCorrection = 0;\n        const totalOffset = getTotalOffset(parents, isVirtualPaging ? 0 : pageSize, childrenTotalCount);\n        let continuationGroupCount = 0;\n        let skipContinuationGroupCount = 0;\n        let groupInfoCount = groupInfo.count + groupInfo.childrenTotalCount;\n        let childrenGroupInfoCount = groupInfoCount;\n        callback && callback(groupInfo, totalOffset);\n        const skip = options.skip - totalOffset;\n        if (totalOffset <= options.skip + options.take && groupInfoCount) {\n          take = options.take;\n          if (!isVirtualPaging) {\n            continuationGroupCount = getContinuationGroupCount(totalOffset, pageSize, groupInfoCount, parents.length - 1);\n            groupInfoCount += continuationGroupCount * parents.length;\n            childrenGroupInfoCount += continuationGroupCount;\n            if (pageSize && skip >= 0) {\n              takeCorrection = parents.length;\n              parentTakeCorrection = parents.length - 1;\n              skipContinuationGroupCount = Math.floor(skip / pageSize);\n            }\n          }\n          if (skip >= 0) {\n            if (totalOffset + groupInfoCount > options.skip) {\n              skips.unshift(skip - skipContinuationGroupCount * takeCorrection - groupInfo.skipChildrenTotalCount);\n            }\n            if (totalOffset + groupInfoCount >= options.skip + take) {\n              takes.unshift(take - takeCorrection - groupInfo.childrenTotalCount + groupInfo.skipChildrenTotalCount);\n            }\n          } else if (totalOffset + groupInfoCount >= options.skip + take) {\n            takes.unshift(take + skip - groupInfo.childrenTotalCount);\n          }\n        }\n        if (totalOffset <= options.skip) {\n          if (parents[parents.length - 2]) {\n            parents[parents.length - 2].skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1 - skipContinuationGroupCount * parentTakeCorrection);\n          } else {\n            skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1);\n          }\n        }\n        if (totalOffset <= options.skip + take) {\n          groupInfoCount = Math.min(childrenGroupInfoCount, skip + take - (skipContinuationGroupCount + 1) * parentTakeCorrection);\n          if (parents[parents.length - 2]) {\n            parents[parents.length - 2].childrenTotalCount += groupInfoCount;\n          } else {\n            childrenTotalCount += groupInfoCount;\n          }\n        }\n      });\n      options.skip -= skipChildrenTotalCount;\n      options.take -= childrenTotalCount - skipChildrenTotalCount;\n    }\n    options.skips = skips;\n    options.takes = takes;\n  }\n  changeRowExpand(path) {\n    const groupInfo = this.findGroupInfo(path);\n    const dataSource = this._dataSource;\n    const remoteGroupPaging = dataSource.remoteOperations().groupPaging;\n    const groups = dataGridCore.normalizeSortingInfo(dataSource.group());\n    if (groupInfo) {\n      groupInfo.isExpanded = !groupInfo.isExpanded;\n      if (remoteGroupPaging && groupInfo.isExpanded && path.length < groups.length) {\n        return loadGroupTotalCount(dataSource, {\n          filter: createGroupFilter(path, {\n            filter: dataSource.lastLoadOptions().filter,\n            group: dataSource.group()\n          }),\n          group: [groups[path.length]],\n          select: dataSource.select()\n        }).done(groupCount => {\n          groupInfo.count = groupCount;\n        });\n      }\n      return new Deferred().resolve();\n    }\n    return new Deferred().reject();\n  }\n  handleDataLoading(options) {\n    const that = this;\n    const {\n      storeLoadOptions: storeLoadOptions\n    } = options;\n    const groups = dataGridCore.normalizeSortingInfo(storeLoadOptions.group || options.loadOptions.group);\n    if (options.isCustomLoading || !groups.length) {\n      return;\n    }\n    if (options.remoteOperations.grouping) {\n      const remotePaging = that._dataSource.remoteOperations().paging;\n      storeLoadOptions.group = dataGridCore.normalizeSortingInfo(storeLoadOptions.group);\n      storeLoadOptions.group.forEach((group, index) => {\n        const isLastGroup = index === storeLoadOptions.group.length - 1;\n        group.isExpanded = !remotePaging || !isLastGroup;\n      });\n    }\n    options.group = options.group || groups;\n    if (options.remoteOperations.paging) {\n      options.skip = storeLoadOptions.skip;\n      options.take = storeLoadOptions.take;\n      storeLoadOptions.requireGroupCount = true;\n      storeLoadOptions.group = groups.slice(0, 1);\n      that._updatePagingOptions(options);\n      storeLoadOptions.skip = options.skip;\n      storeLoadOptions.take = options.take;\n    } else {\n      options.skip = options.loadOptions.skip;\n      options.take = options.loadOptions.take;\n      that._updatePagingOptions(options);\n    }\n  }\n  handleDataLoadedCore(options, callBase) {\n    const that = this;\n    const loadedGroupCount = dataGridCore.normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group).length;\n    const groupCount = options.group ? options.group.length : 0;\n    let totalCount;\n    const expandedInfo = {};\n    if (options.isCustomLoading) {\n      callBase(options);\n      processGroupItems(that, options.data, loadedGroupCount, expandedInfo, [], options.isCustomLoading, options.storeLoadOptions.isLoadingAll);\n    } else {\n      if (!options.remoteOperations.paging) {\n        that.foreachGroups(groupInfo => {\n          groupInfo.count = 0;\n        });\n      }\n      totalCount = updateGroupInfos(that, options, options.data, loadedGroupCount);\n      if (totalCount < 0) {\n        options.data = new Deferred().reject(errors.Error(\"E1037\"));\n        return;\n      }\n      if (!options.remoteOperations.paging) {\n        if (loadedGroupCount && options.extra && options.loadOptions.requireTotalCount) {\n          options.extra.totalCount = totalCount;\n          options.extra.groupCount = options.data.length;\n        }\n      }\n      if (groupCount && options.storeLoadOptions.requireGroupCount && !isFinite(options.extra.groupCount)) {\n        options.data = new Deferred().reject(dataErrors.Error(\"E4022\"));\n        return;\n      }\n      that.updateTotalItemsCount(options);\n      if (!options.remoteOperations.paging) {\n        that._updatePagingOptions(options);\n        options.lastLoadOptions.skips = options.skips;\n        options.lastLoadOptions.takes = options.takes;\n      }\n      callBase(options);\n      if (!options.remoteOperations.paging) {\n        that._processPaging(options, loadedGroupCount);\n      }\n    }\n    loadGroupItems(that, options, loadedGroupCount, expandedInfo, 0, options.data);\n  }\n  _processSkips(items, skips, groupCount) {\n    if (!groupCount) {\n      return;\n    }\n    const firstItem = items[0];\n    const skip = skips[0];\n    const children = firstItem && firstItem.items;\n    if (void 0 !== skip) {\n      firstItem.isContinuation = true;\n      if (children) {\n        firstItem.items = children.slice(skip);\n        this._processSkips(firstItem.items, skips.slice(1), groupCount - 1);\n      }\n    }\n  }\n  _processTakes(items, skips, takes, groupCount, parents) {\n    if (!groupCount || !items) {\n      return;\n    }\n    parents = parents || [];\n    const lastItem = items[items.length - 1];\n    let children = lastItem && lastItem.items;\n    const take = takes[0];\n    const skip = skips[0];\n    if (lastItem) {\n      const maxTakeCount = lastItem.count - (lastItem.isContinuation && skip || 0) || children.length;\n      if (void 0 !== take && maxTakeCount > take) {\n        lastItem.isContinuationOnNextPage = true;\n        parents.forEach(parent => {\n          parent.isContinuationOnNextPage = true;\n        });\n        if (children) {\n          children = children.slice(0, take);\n          lastItem.items = children;\n        }\n      }\n      parents.push(lastItem);\n      this._processTakes(children, skips.slice(1), takes.slice(1), groupCount - 1, parents);\n    }\n  }\n  _processPaging(options, groupCount) {\n    this._processSkips(options.data, options.skips, groupCount);\n    this._processTakes(options.data, options.skips, options.takes, groupCount);\n  }\n  isLastLevelGroupItemsPagingLocal() {\n    return false;\n  }\n  sortLastLevelGroupItems(items) {\n    return items;\n  }\n  refresh(options, operationTypes) {\n    const that = this;\n    const dataSource = that._dataSource;\n    const {\n      storeLoadOptions: storeLoadOptions\n    } = options;\n    const group = options.group || options.storeLoadOptions.group;\n    const oldGroups = dataGridCore.normalizeSortingInfo(that._group);\n    let isExpanded;\n    let groupIndex;\n    function handleGroup(groupInfo, parents) {\n      if (parents.length === groupIndex + 1) {\n        groupInfo.isExpanded = isExpanded;\n      }\n    }\n    for (groupIndex = 0; groupIndex < oldGroups.length; groupIndex++) {\n      isExpanded = isGroupExpanded(group, groupIndex);\n      if (isGroupExpanded(that._group, groupIndex) !== isExpanded) {\n        that.foreachGroups(handleGroup);\n      }\n    }\n    super.refresh.apply(this, arguments);\n    if (group && options.remoteOperations.paging && operationTypes.reload) {\n      return foreachExpandedGroups(that, groupInfo => {\n        const groupCountQuery = loadGroupTotalCount(dataSource, {\n          filter: createGroupFilter(groupInfo.path, {\n            filter: storeLoadOptions.filter,\n            group: group\n          }),\n          group: group.slice(groupInfo.path.length),\n          select: storeLoadOptions.select\n        });\n        const groupOffsetQuery = loadGroupTotalCount(dataSource, {\n          filter: createOffsetFilter(groupInfo.path, {\n            filter: storeLoadOptions.filter,\n            group: group\n          }, true),\n          group: group.slice(groupInfo.path.length - 1, groupInfo.path.length),\n          select: storeLoadOptions.select\n        });\n        return when(groupOffsetQuery, groupCountQuery).done((offset, count) => {\n          offset = parseInt(offset.length ? offset[0] : offset);\n          count = parseInt(count.length ? count[0] : count);\n          groupInfo.offset = offset;\n          if (groupInfo.count !== count) {\n            groupInfo.count = count;\n            that.updateTotalItemsCount(options);\n          }\n        });\n      }, true);\n    }\n  }\n}","map":{"version":3,"names":["errors","dataErrors","Deferred","when","extend","each","dataGridCore","createGroupFilter","createOffsetFilter","GroupingHelper","GroupingHelperCore","getContinuationGroupCount","groupOffset","pageSize","groupSize","groupIndex","pageOffset","Math","floor","foreachExpandedGroups","that","callback","updateGroups","foreachGroups","groupInfo","parents","isExpanded","processGroupItems","items","groupsCount","expandedInfo","path","isCustomLoading","isLastGroupExpanded","paths","count","lastCount","i","length","item","push","key","findGroupInfo","collapsedItems","slice","pop","updateGroupInfoItem","isLastGroupLevel","offset","addGroupInfo","_isGroupExpanded","updateGroupInfos","options","loadedGroupCount","parentIndex","groupCount","group","remotePaging","remoteOperations","paging","totalCount","skip","skips","isGroupExpanded","groups","getTotalOffset","groupInfos","totalOffset","childrenTotalCount","applyContinuationToGroupItem","groupLevel","expandedItemIndex","take","takes","isLastExpandedItem","isFirstExpandedItem","lastExpandedItemSkip","isItemsTruncatedByTake","isContinuation","isContinuationOnNextPage","fillSkipTakeInExpandedInfo","currentGroupCount","currentGroupIndex","isDataDeferred","data","Array","isArray","makeDataDeferred","loadGroupItems","loadExpandedGroups","storeLoadOptions","loadLastLevelGroupItems","resolve","currentGroup","deferreds","_options$storeLoadOpt","loadOptions","requireTotalCount","requireGroupCount","groupSummary","filter","select","langParams","loadResult","_dataSource","loadFromStore","done","apply","expandedFilters","_","expandedPath","isLoadingAll","combineFilters","sort","concat","normalizeSortingInfo","isPagingLocal","isLastLevelGroupItemsPagingLocal","sortLastLevelGroupItems","index","itemCount","expandedItems","splice","fail","reject","loadGroupTotalCount","dataSource","d","isGrouping","load","extra","isFinite","Error","bind","updateTotalItemsCount","totalItemsCount","isVirtualPaging","_isVirtualPaging","_updatePagingOptions","skipChildrenTotalCount","takeCorrection","parentTakeCorrection","continuationGroupCount","skipContinuationGroupCount","groupInfoCount","childrenGroupInfoCount","unshift","min","changeRowExpand","remoteGroupPaging","groupPaging","lastLoadOptions","handleDataLoading","grouping","forEach","isLastGroup","handleDataLoadedCore","callBase","_processPaging","_processSkips","firstItem","children","_processTakes","lastItem","maxTakeCount","parent","refresh","operationTypes","oldGroups","_group","handleGroup","arguments","reload","groupCountQuery","groupOffsetQuery","parseInt"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/data_grid/grouping/m_grouping_collapsed.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/data_grid/grouping/m_grouping_collapsed.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    errors as dataErrors\r\n} from \"../../../../common/data/errors\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport errors from \"../../../../ui/widget/ui.errors\";\r\nimport dataGridCore from \"../m_core\";\r\nimport {\r\n    createGroupFilter\r\n} from \"../m_utils\";\r\nimport {\r\n    createOffsetFilter,\r\n    GroupingHelper as GroupingHelperCore\r\n} from \"./m_grouping_core\";\r\n\r\nfunction getContinuationGroupCount(groupOffset, pageSize, groupSize, groupIndex) {\r\n    groupIndex = groupIndex || 0;\r\n    if (pageSize > 1 && groupSize > 0) {\r\n        let pageOffset = groupOffset - Math.floor(groupOffset / pageSize) * pageSize || pageSize;\r\n        pageOffset += groupSize - groupIndex - 2;\r\n        if (pageOffset < 0) {\r\n            pageOffset += pageSize\r\n        }\r\n        return Math.floor(pageOffset / (pageSize - groupIndex - 1))\r\n    }\r\n    return 0\r\n}\r\nconst foreachExpandedGroups = function(that, callback, updateGroups) {\r\n    return that.foreachGroups(((groupInfo, parents) => {\r\n        if (groupInfo.isExpanded) {\r\n            return callback(groupInfo, parents)\r\n        }\r\n    }), true, false, updateGroups, updateGroups)\r\n};\r\nconst processGroupItems = function(that, items, groupsCount, expandedInfo, path, isCustomLoading, isLastGroupExpanded) {\r\n    let isExpanded;\r\n    expandedInfo.items = expandedInfo.items || [];\r\n    expandedInfo.paths = expandedInfo.paths || [];\r\n    expandedInfo.count = expandedInfo.count || 0;\r\n    expandedInfo.lastCount = expandedInfo.lastCount || 0;\r\n    if (!groupsCount) {\r\n        return\r\n    }\r\n    for (let i = 0; i < items.length; i++) {\r\n        const item = items[i];\r\n        if (void 0 !== item.items) {\r\n            path.push(item.key);\r\n            if (isCustomLoading) {\r\n                isExpanded = true\r\n            } else {\r\n                const groupInfo = that.findGroupInfo(path);\r\n                isExpanded = groupInfo && groupInfo.isExpanded\r\n            }\r\n            if (!isExpanded) {\r\n                item.collapsedItems = item.items;\r\n                item.items = null\r\n            } else if (item.items) {\r\n                processGroupItems(that, item.items, groupsCount - 1, expandedInfo, path, isCustomLoading, isLastGroupExpanded)\r\n            } else if (1 === groupsCount && item.count && (!isCustomLoading || isLastGroupExpanded)) {\r\n                expandedInfo.items.push(item);\r\n                expandedInfo.paths.push(path.slice(0));\r\n                expandedInfo.count += expandedInfo.lastCount;\r\n                expandedInfo.lastCount = item.count\r\n            }\r\n            path.pop()\r\n        }\r\n    }\r\n};\r\nconst updateGroupInfoItem = function(that, item, isLastGroupLevel, path, offset) {\r\n    const groupInfo = that.findGroupInfo(path);\r\n    let count;\r\n    if (!groupInfo) {\r\n        if (isLastGroupLevel) {\r\n            count = item.count > 0 ? item.count : item.items.length\r\n        }\r\n        that.addGroupInfo({\r\n            isExpanded: that._isGroupExpanded(path.length - 1),\r\n            path: path.slice(0),\r\n            offset: offset,\r\n            count: count || 0\r\n        })\r\n    } else {\r\n        if (isLastGroupLevel) {\r\n            groupInfo.count = item.count > 0 ? item.count : item.items && item.items.length || 0\r\n        } else {\r\n            item.count = groupInfo.count || item.count\r\n        }\r\n        groupInfo.offset = offset\r\n    }\r\n};\r\nconst updateGroupInfos = function(that, options, items, loadedGroupCount, groupIndex, path, parentIndex) {\r\n    const groupCount = options.group ? options.group.length : 0;\r\n    const isLastGroupLevel = groupCount === loadedGroupCount;\r\n    const remotePaging = options.remoteOperations.paging;\r\n    let offset = 0;\r\n    let totalCount = 0;\r\n    let count;\r\n    groupIndex = groupIndex || 0;\r\n    path = path || [];\r\n    if (remotePaging && !parentIndex) {\r\n        offset = 0 === groupIndex ? options.skip || 0 : options.skips[groupIndex - 1] || 0\r\n    }\r\n    if (groupIndex >= loadedGroupCount) {\r\n        return items.length\r\n    }\r\n    for (let i = 0; i < items.length; i++) {\r\n        const item = items[i];\r\n        if (item) {\r\n            path.push(item.key);\r\n            if (!item.count && !item.items || void 0 === item.items) {\r\n                return -1\r\n            }\r\n            updateGroupInfoItem(that, item, isLastGroupLevel, path, offset + i);\r\n            count = item.items ? updateGroupInfos(that, options, item.items, loadedGroupCount, groupIndex + 1, path, i) : item.count || -1;\r\n            if (count < 0) {\r\n                return -1\r\n            }\r\n            totalCount += count;\r\n            path.pop()\r\n        }\r\n    }\r\n    return totalCount\r\n};\r\nconst isGroupExpanded = function(groups, groupIndex) {\r\n    return groups && groups.length && groups[groupIndex] && !!groups[groupIndex].isExpanded\r\n};\r\nconst getTotalOffset = function(groupInfos, pageSize, offset) {\r\n    let groupSize;\r\n    let totalOffset = offset;\r\n    for (let groupIndex = 0; groupIndex < groupInfos.length; groupIndex++) {\r\n        groupSize = groupInfos[groupIndex].offset + 1;\r\n        if (groupIndex > 0) {\r\n            groupSize += groupInfos[groupIndex - 1].childrenTotalCount;\r\n            if (pageSize) {\r\n                groupSize += getContinuationGroupCount(totalOffset, pageSize, groupSize, groupIndex - 1) * groupIndex\r\n            }\r\n        }\r\n        totalOffset += groupSize\r\n    }\r\n    return totalOffset\r\n};\r\n\r\nfunction applyContinuationToGroupItem(options, expandedInfo, groupLevel, expandedItemIndex) {\r\n    const item = expandedInfo.items[expandedItemIndex];\r\n    const skip = options.skips && options.skips[groupLevel];\r\n    const take = options.takes && options.takes[groupLevel];\r\n    const isLastExpandedItem = expandedItemIndex === expandedInfo.items.length - 1;\r\n    const isFirstExpandedItem = 0 === expandedItemIndex;\r\n    const lastExpandedItemSkip = isFirstExpandedItem && skip || 0;\r\n    const isItemsTruncatedByTake = item.count > take + lastExpandedItemSkip;\r\n    if (isFirstExpandedItem && void 0 !== skip) {\r\n        item.isContinuation = true\r\n    }\r\n    if (isLastExpandedItem && void 0 !== take && isItemsTruncatedByTake) {\r\n        item.isContinuationOnNextPage = true\r\n    }\r\n}\r\n\r\nfunction fillSkipTakeInExpandedInfo(options, expandedInfo, currentGroupCount) {\r\n    const currentGroupIndex = currentGroupCount - 1;\r\n    const groupCount = options.group ? options.group.length : 0;\r\n    expandedInfo.skip = options.skips && options.skips[currentGroupIndex];\r\n    if (options.takes && void 0 !== options.takes[currentGroupIndex]) {\r\n        if (groupCount === currentGroupCount) {\r\n            expandedInfo.take = expandedInfo.count ? expandedInfo.count - (expandedInfo.skip || 0) : 0\r\n        } else {\r\n            expandedInfo.take = 0\r\n        }\r\n        expandedInfo.take += options.takes[currentGroupIndex]\r\n    }\r\n}\r\n\r\nfunction isDataDeferred(data) {\r\n    return !Array.isArray(data)\r\n}\r\n\r\nfunction makeDataDeferred(options) {\r\n    if (!isDataDeferred(options.data)) {\r\n        options.data = new Deferred\r\n    }\r\n}\r\n\r\nfunction loadGroupItems(that, options, loadedGroupCount, expandedInfo, groupLevel, data) {\r\n    if (!options.isCustomLoading) {\r\n        expandedInfo = {};\r\n        processGroupItems(that, data, loadedGroupCount, expandedInfo, []);\r\n        fillSkipTakeInExpandedInfo(options, expandedInfo, loadedGroupCount)\r\n    }\r\n    const groupCount = options.group ? options.group.length : 0;\r\n    if (expandedInfo.paths.length && groupCount - loadedGroupCount > 0) {\r\n        makeDataDeferred(options);\r\n        loadExpandedGroups(that, options, expandedInfo, loadedGroupCount, groupLevel, data)\r\n    } else if (expandedInfo.paths.length && options.storeLoadOptions.group) {\r\n        makeDataDeferred(options);\r\n        loadLastLevelGroupItems(that, options, expandedInfo, data)\r\n    } else if (isDataDeferred(options.data)) {\r\n        options.data.resolve(data)\r\n    }\r\n}\r\n\r\nfunction loadExpandedGroups(that, options, expandedInfo, loadedGroupCount, groupLevel, data) {\r\n    const groups = options.group || [];\r\n    const currentGroup = groups[groupLevel + 1];\r\n    const deferreds = [];\r\n    each(expandedInfo.paths, (expandedItemIndex => {\r\n        var _options$storeLoadOpt;\r\n        const loadOptions = {\r\n            requireTotalCount: false,\r\n            requireGroupCount: true,\r\n            group: [currentGroup],\r\n            groupSummary: options.storeLoadOptions.groupSummary,\r\n            filter: createGroupFilter(expandedInfo.paths[expandedItemIndex], {\r\n                filter: options.storeLoadOptions.filter,\r\n                group: groups\r\n            }),\r\n            select: options.storeLoadOptions.select,\r\n            langParams: null === (_options$storeLoadOpt = options.storeLoadOptions) || void 0 === _options$storeLoadOpt ? void 0 : _options$storeLoadOpt.langParams\r\n        };\r\n        if (0 === expandedItemIndex) {\r\n            loadOptions.skip = expandedInfo.skip || 0\r\n        }\r\n        if (expandedItemIndex === expandedInfo.paths.length - 1) {\r\n            loadOptions.take = expandedInfo.take\r\n        }\r\n        const loadResult = 0 === loadOptions.take ? [] : that._dataSource.loadFromStore(loadOptions);\r\n        when(loadResult).done((data => {\r\n            const item = expandedInfo.items[expandedItemIndex];\r\n            applyContinuationToGroupItem(options, expandedInfo, groupLevel, expandedItemIndex);\r\n            item.items = data\r\n        }));\r\n        deferreds.push(loadResult)\r\n    }));\r\n    when.apply(null, deferreds).done((() => {\r\n        updateGroupInfos(that, options, data, loadedGroupCount + 1);\r\n        loadGroupItems(that, options, loadedGroupCount + 1, expandedInfo, groupLevel + 1, data)\r\n    }))\r\n}\r\n\r\nfunction loadLastLevelGroupItems(that, options, expandedInfo, data) {\r\n    const expandedFilters = [];\r\n    const groups = options.group || [];\r\n    each(expandedInfo.paths, ((_, expandedPath) => {\r\n        expandedFilters.push(createGroupFilter(expandedPath, {\r\n            group: options.isCustomLoading ? options.storeLoadOptions.group : groups\r\n        }))\r\n    }));\r\n    let {\r\n        filter: filter\r\n    } = options.storeLoadOptions;\r\n    if (!options.storeLoadOptions.isLoadingAll) {\r\n        filter = dataGridCore.combineFilters([filter, dataGridCore.combineFilters(expandedFilters, \"or\")])\r\n    }\r\n    const loadOptions = extend({}, options.storeLoadOptions, {\r\n        requireTotalCount: false,\r\n        requireGroupCount: false,\r\n        group: null,\r\n        sort: groups.concat(dataGridCore.normalizeSortingInfo(options.storeLoadOptions.sort || [])),\r\n        filter: filter\r\n    });\r\n    const isPagingLocal = that._dataSource.isLastLevelGroupItemsPagingLocal();\r\n    if (!isPagingLocal) {\r\n        loadOptions.skip = expandedInfo.skip;\r\n        loadOptions.take = expandedInfo.take\r\n    }\r\n    when(0 === expandedInfo.take ? [] : that._dataSource.loadFromStore(loadOptions)).done((items => {\r\n        if (isPagingLocal) {\r\n            items = that._dataSource.sortLastLevelGroupItems(items, groups, expandedInfo.paths);\r\n            items = expandedInfo.skip ? items.slice(expandedInfo.skip) : items;\r\n            items = expandedInfo.take ? items.slice(0, expandedInfo.take) : items\r\n        }\r\n        each(expandedInfo.items, ((index, item) => {\r\n            const itemCount = item.count - (0 === index && expandedInfo.skip || 0);\r\n            const expandedItems = items.splice(0, itemCount);\r\n            applyContinuationToGroupItem(options, expandedInfo, groups.length - 1, index);\r\n            item.items = expandedItems\r\n        }));\r\n        options.data.resolve(data)\r\n    })).fail(options.data.reject)\r\n}\r\nconst loadGroupTotalCount = function(dataSource, options) {\r\n    const d = new Deferred;\r\n    const isGrouping = !!(options.group && options.group.length);\r\n    const loadOptions = extend({\r\n        skip: 0,\r\n        take: 1,\r\n        requireGroupCount: isGrouping,\r\n        requireTotalCount: !isGrouping\r\n    }, options, {\r\n        group: isGrouping ? options.group : null\r\n    });\r\n    dataSource.load(loadOptions).done(((data, extra) => {\r\n        const count = extra && (isGrouping ? extra.groupCount : extra.totalCount);\r\n        if (!isFinite(count)) {\r\n            d.reject(dataErrors.Error(isGrouping ? \"E4022\" : \"E4021\"));\r\n            return\r\n        }\r\n        d.resolve(count)\r\n    })).fail(d.reject.bind(d));\r\n    return d\r\n};\r\nexport class GroupingHelper extends GroupingHelperCore {\r\n    updateTotalItemsCount(options) {\r\n        let totalItemsCount = 0;\r\n        const totalCount = options.extra && options.extra.totalCount || 0;\r\n        const groupCount = options.extra && options.extra.groupCount || 0;\r\n        const pageSize = this._dataSource.pageSize();\r\n        const isVirtualPaging = this._isVirtualPaging();\r\n        foreachExpandedGroups(this, (groupInfo => {\r\n            groupInfo.childrenTotalCount = 0\r\n        }));\r\n        foreachExpandedGroups(this, ((groupInfo, parents) => {\r\n            const totalOffset = getTotalOffset(parents, isVirtualPaging ? 0 : pageSize, totalItemsCount);\r\n            let count = groupInfo.count + groupInfo.childrenTotalCount;\r\n            if (!isVirtualPaging) {\r\n                count += getContinuationGroupCount(totalOffset, pageSize, count, parents.length - 1)\r\n            }\r\n            if (parents[parents.length - 2]) {\r\n                parents[parents.length - 2].childrenTotalCount += count\r\n            } else {\r\n                totalItemsCount += count\r\n            }\r\n        }));\r\n        super.updateTotalItemsCount(totalItemsCount - totalCount + groupCount)\r\n    }\r\n    _isGroupExpanded(groupIndex) {\r\n        const groups = this._dataSource.group();\r\n        return isGroupExpanded(groups, groupIndex)\r\n    }\r\n    _updatePagingOptions(options, callback) {\r\n        const that = this;\r\n        const isVirtualPaging = that._isVirtualPaging();\r\n        const pageSize = that._dataSource.pageSize();\r\n        const skips = [];\r\n        const takes = [];\r\n        let skipChildrenTotalCount = 0;\r\n        let childrenTotalCount = 0;\r\n        if (options.take) {\r\n            foreachExpandedGroups(this, (groupInfo => {\r\n                groupInfo.childrenTotalCount = 0;\r\n                groupInfo.skipChildrenTotalCount = 0\r\n            }));\r\n            foreachExpandedGroups(that, ((groupInfo, parents) => {\r\n                let take;\r\n                let takeCorrection = 0;\r\n                let parentTakeCorrection = 0;\r\n                const totalOffset = getTotalOffset(parents, isVirtualPaging ? 0 : pageSize, childrenTotalCount);\r\n                let continuationGroupCount = 0;\r\n                let skipContinuationGroupCount = 0;\r\n                let groupInfoCount = groupInfo.count + groupInfo.childrenTotalCount;\r\n                let childrenGroupInfoCount = groupInfoCount;\r\n                callback && callback(groupInfo, totalOffset);\r\n                const skip = options.skip - totalOffset;\r\n                if (totalOffset <= options.skip + options.take && groupInfoCount) {\r\n                    take = options.take;\r\n                    if (!isVirtualPaging) {\r\n                        continuationGroupCount = getContinuationGroupCount(totalOffset, pageSize, groupInfoCount, parents.length - 1);\r\n                        groupInfoCount += continuationGroupCount * parents.length;\r\n                        childrenGroupInfoCount += continuationGroupCount;\r\n                        if (pageSize && skip >= 0) {\r\n                            takeCorrection = parents.length;\r\n                            parentTakeCorrection = parents.length - 1;\r\n                            skipContinuationGroupCount = Math.floor(skip / pageSize)\r\n                        }\r\n                    }\r\n                    if (skip >= 0) {\r\n                        if (totalOffset + groupInfoCount > options.skip) {\r\n                            skips.unshift(skip - skipContinuationGroupCount * takeCorrection - groupInfo.skipChildrenTotalCount)\r\n                        }\r\n                        if (totalOffset + groupInfoCount >= options.skip + take) {\r\n                            takes.unshift(take - takeCorrection - groupInfo.childrenTotalCount + groupInfo.skipChildrenTotalCount)\r\n                        }\r\n                    } else if (totalOffset + groupInfoCount >= options.skip + take) {\r\n                        takes.unshift(take + skip - groupInfo.childrenTotalCount)\r\n                    }\r\n                }\r\n                if (totalOffset <= options.skip) {\r\n                    if (parents[parents.length - 2]) {\r\n                        parents[parents.length - 2].skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1 - skipContinuationGroupCount * parentTakeCorrection)\r\n                    } else {\r\n                        skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1)\r\n                    }\r\n                }\r\n                if (totalOffset <= options.skip + take) {\r\n                    groupInfoCount = Math.min(childrenGroupInfoCount, skip + take - (skipContinuationGroupCount + 1) * parentTakeCorrection);\r\n                    if (parents[parents.length - 2]) {\r\n                        parents[parents.length - 2].childrenTotalCount += groupInfoCount\r\n                    } else {\r\n                        childrenTotalCount += groupInfoCount\r\n                    }\r\n                }\r\n            }));\r\n            options.skip -= skipChildrenTotalCount;\r\n            options.take -= childrenTotalCount - skipChildrenTotalCount\r\n        }\r\n        options.skips = skips;\r\n        options.takes = takes\r\n    }\r\n    changeRowExpand(path) {\r\n        const groupInfo = this.findGroupInfo(path);\r\n        const dataSource = this._dataSource;\r\n        const remoteGroupPaging = dataSource.remoteOperations().groupPaging;\r\n        const groups = dataGridCore.normalizeSortingInfo(dataSource.group());\r\n        if (groupInfo) {\r\n            groupInfo.isExpanded = !groupInfo.isExpanded;\r\n            if (remoteGroupPaging && groupInfo.isExpanded && path.length < groups.length) {\r\n                return loadGroupTotalCount(dataSource, {\r\n                    filter: createGroupFilter(path, {\r\n                        filter: dataSource.lastLoadOptions().filter,\r\n                        group: dataSource.group()\r\n                    }),\r\n                    group: [groups[path.length]],\r\n                    select: dataSource.select()\r\n                }).done((groupCount => {\r\n                    groupInfo.count = groupCount\r\n                }))\r\n            }\r\n            return (new Deferred).resolve()\r\n        }\r\n        return (new Deferred).reject()\r\n    }\r\n    handleDataLoading(options) {\r\n        const that = this;\r\n        const {\r\n            storeLoadOptions: storeLoadOptions\r\n        } = options;\r\n        const groups = dataGridCore.normalizeSortingInfo(storeLoadOptions.group || options.loadOptions.group);\r\n        if (options.isCustomLoading || !groups.length) {\r\n            return\r\n        }\r\n        if (options.remoteOperations.grouping) {\r\n            const remotePaging = that._dataSource.remoteOperations().paging;\r\n            storeLoadOptions.group = dataGridCore.normalizeSortingInfo(storeLoadOptions.group);\r\n            storeLoadOptions.group.forEach(((group, index) => {\r\n                const isLastGroup = index === storeLoadOptions.group.length - 1;\r\n                group.isExpanded = !remotePaging || !isLastGroup\r\n            }))\r\n        }\r\n        options.group = options.group || groups;\r\n        if (options.remoteOperations.paging) {\r\n            options.skip = storeLoadOptions.skip;\r\n            options.take = storeLoadOptions.take;\r\n            storeLoadOptions.requireGroupCount = true;\r\n            storeLoadOptions.group = groups.slice(0, 1);\r\n            that._updatePagingOptions(options);\r\n            storeLoadOptions.skip = options.skip;\r\n            storeLoadOptions.take = options.take\r\n        } else {\r\n            options.skip = options.loadOptions.skip;\r\n            options.take = options.loadOptions.take;\r\n            that._updatePagingOptions(options)\r\n        }\r\n    }\r\n    handleDataLoadedCore(options, callBase) {\r\n        const that = this;\r\n        const loadedGroupCount = dataGridCore.normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group).length;\r\n        const groupCount = options.group ? options.group.length : 0;\r\n        let totalCount;\r\n        const expandedInfo = {};\r\n        if (options.isCustomLoading) {\r\n            callBase(options);\r\n            processGroupItems(that, options.data, loadedGroupCount, expandedInfo, [], options.isCustomLoading, options.storeLoadOptions.isLoadingAll)\r\n        } else {\r\n            if (!options.remoteOperations.paging) {\r\n                that.foreachGroups((groupInfo => {\r\n                    groupInfo.count = 0\r\n                }))\r\n            }\r\n            totalCount = updateGroupInfos(that, options, options.data, loadedGroupCount);\r\n            if (totalCount < 0) {\r\n                options.data = (new Deferred).reject(errors.Error(\"E1037\"));\r\n                return\r\n            }\r\n            if (!options.remoteOperations.paging) {\r\n                if (loadedGroupCount && options.extra && options.loadOptions.requireTotalCount) {\r\n                    options.extra.totalCount = totalCount;\r\n                    options.extra.groupCount = options.data.length\r\n                }\r\n            }\r\n            if (groupCount && options.storeLoadOptions.requireGroupCount && !isFinite(options.extra.groupCount)) {\r\n                options.data = (new Deferred).reject(dataErrors.Error(\"E4022\"));\r\n                return\r\n            }\r\n            that.updateTotalItemsCount(options);\r\n            if (!options.remoteOperations.paging) {\r\n                that._updatePagingOptions(options);\r\n                options.lastLoadOptions.skips = options.skips;\r\n                options.lastLoadOptions.takes = options.takes\r\n            }\r\n            callBase(options);\r\n            if (!options.remoteOperations.paging) {\r\n                that._processPaging(options, loadedGroupCount)\r\n            }\r\n        }\r\n        loadGroupItems(that, options, loadedGroupCount, expandedInfo, 0, options.data)\r\n    }\r\n    _processSkips(items, skips, groupCount) {\r\n        if (!groupCount) {\r\n            return\r\n        }\r\n        const firstItem = items[0];\r\n        const skip = skips[0];\r\n        const children = firstItem && firstItem.items;\r\n        if (void 0 !== skip) {\r\n            firstItem.isContinuation = true;\r\n            if (children) {\r\n                firstItem.items = children.slice(skip);\r\n                this._processSkips(firstItem.items, skips.slice(1), groupCount - 1)\r\n            }\r\n        }\r\n    }\r\n    _processTakes(items, skips, takes, groupCount, parents) {\r\n        if (!groupCount || !items) {\r\n            return\r\n        }\r\n        parents = parents || [];\r\n        const lastItem = items[items.length - 1];\r\n        let children = lastItem && lastItem.items;\r\n        const take = takes[0];\r\n        const skip = skips[0];\r\n        if (lastItem) {\r\n            const maxTakeCount = lastItem.count - (lastItem.isContinuation && skip || 0) || children.length;\r\n            if (void 0 !== take && maxTakeCount > take) {\r\n                lastItem.isContinuationOnNextPage = true;\r\n                parents.forEach((parent => {\r\n                    parent.isContinuationOnNextPage = true\r\n                }));\r\n                if (children) {\r\n                    children = children.slice(0, take);\r\n                    lastItem.items = children\r\n                }\r\n            }\r\n            parents.push(lastItem);\r\n            this._processTakes(children, skips.slice(1), takes.slice(1), groupCount - 1, parents)\r\n        }\r\n    }\r\n    _processPaging(options, groupCount) {\r\n        this._processSkips(options.data, options.skips, groupCount);\r\n        this._processTakes(options.data, options.skips, options.takes, groupCount)\r\n    }\r\n    isLastLevelGroupItemsPagingLocal() {\r\n        return false\r\n    }\r\n    sortLastLevelGroupItems(items) {\r\n        return items\r\n    }\r\n    refresh(options, operationTypes) {\r\n        const that = this;\r\n        const dataSource = that._dataSource;\r\n        const {\r\n            storeLoadOptions: storeLoadOptions\r\n        } = options;\r\n        const group = options.group || options.storeLoadOptions.group;\r\n        const oldGroups = dataGridCore.normalizeSortingInfo(that._group);\r\n        let isExpanded;\r\n        let groupIndex;\r\n\r\n        function handleGroup(groupInfo, parents) {\r\n            if (parents.length === groupIndex + 1) {\r\n                groupInfo.isExpanded = isExpanded\r\n            }\r\n        }\r\n        for (groupIndex = 0; groupIndex < oldGroups.length; groupIndex++) {\r\n            isExpanded = isGroupExpanded(group, groupIndex);\r\n            if (isGroupExpanded(that._group, groupIndex) !== isExpanded) {\r\n                that.foreachGroups(handleGroup)\r\n            }\r\n        }\r\n        super.refresh.apply(this, arguments);\r\n        if (group && options.remoteOperations.paging && operationTypes.reload) {\r\n            return foreachExpandedGroups(that, (groupInfo => {\r\n                const groupCountQuery = loadGroupTotalCount(dataSource, {\r\n                    filter: createGroupFilter(groupInfo.path, {\r\n                        filter: storeLoadOptions.filter,\r\n                        group: group\r\n                    }),\r\n                    group: group.slice(groupInfo.path.length),\r\n                    select: storeLoadOptions.select\r\n                });\r\n                const groupOffsetQuery = loadGroupTotalCount(dataSource, {\r\n                    filter: createOffsetFilter(groupInfo.path, {\r\n                        filter: storeLoadOptions.filter,\r\n                        group: group\r\n                    }, true),\r\n                    group: group.slice(groupInfo.path.length - 1, groupInfo.path.length),\r\n                    select: storeLoadOptions.select\r\n                });\r\n                return when(groupOffsetQuery, groupCountQuery).done(((offset, count) => {\r\n                    offset = parseInt(offset.length ? offset[0] : offset);\r\n                    count = parseInt(count.length ? count[0] : count);\r\n                    groupInfo.offset = offset;\r\n                    if (groupInfo.count !== count) {\r\n                        groupInfo.count = count;\r\n                        that.updateTotalItemsCount(options)\r\n                    }\r\n                }))\r\n            }), true)\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}