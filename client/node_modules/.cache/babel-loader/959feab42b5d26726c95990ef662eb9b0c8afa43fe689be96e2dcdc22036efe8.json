{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/column_headers/m_column_headers.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport domAdapter from \"../../../../core/dom_adapter\";\nimport $ from \"../../../../core/renderer\";\nimport { Deferred } from \"../../../../core/utils/deferred\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getHeight } from \"../../../../core/utils/size\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport { CLASSES as REORDERING_CLASSES } from \"../columns_resizing_reordering/const\";\nimport { registerKeyboardAction } from \"../m_accessibility\";\nimport { ColumnsView } from \"../views/m_columns_view\";\nconst CELL_CONTENT_CLASS = \"text-content\";\nconst HEADERS_CLASS = \"headers\";\nconst NOWRAP_CLASS = \"nowrap\";\nconst ROW_CLASS_SELECTOR = \".dx-row\";\nconst HEADER_ROW_CLASS = \"dx-header-row\";\nconst COLUMN_LINES_CLASS = \"dx-column-lines\";\nconst CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\nconst CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\nconst CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nconst VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\nconst TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\nconst SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\nconst SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\nconst HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nconst HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\nconst MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\nconst LINK = \"dx-link\";\nconst createCellContent = function (that, $cell, options) {\n  const $cellContent = $(\"<div>\").addClass(that.addWidgetPrefix(\"text-content\"));\n  that.setAria(\"role\", \"presentation\", $cellContent);\n  addCssClassesToCellContent(that, $cell, options.column, $cellContent);\n  const showColumnLines = that.option(\"showColumnLines\");\n  const contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\n  return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell);\n};\nfunction addCssClassesToCellContent(that, $cell, column, $cellContent) {\n  const $indicatorElements = that._getIndicatorElements($cell, true);\n  const $visibleIndicatorElements = that._getIndicatorElements($cell);\n  const indicatorCount = $indicatorElements && $indicatorElements.length;\n  const columnAlignment = that._getColumnAlignment(column.alignment);\n  const sortIndicatorClassName = `.${that._getIndicatorClassName(\"sort\")}`;\n  const sortIndexIndicatorClassName = `.${that._getIndicatorClassName(\"sortIndex\")}`;\n  const $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\n  const $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\n  $cellContent = $cellContent || $cell.children(`.${that.addWidgetPrefix(\"text-content\")}`);\n  $cellContent.toggleClass(\"dx-text-content-alignment-\" + columnAlignment, indicatorCount > 0).toggleClass(\"dx-text-content-alignment-\" + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(\"dx-sort-indicator\", !!$sortIndicator.length).toggleClass(\"dx-sort-index-indicator\", !!$sortIndexIndicator.length).toggleClass(\"dx-header-filter-indicator\", !!$visibleIndicatorElements.filter(`.${that._getIndicatorClassName(\"headerFilter\")}`).length);\n}\nexport class ColumnHeadersView extends ColumnsView {\n  init() {\n    super.init();\n    this._headerPanelView = this.getView(\"headerPanel\");\n    this._headerFilterController = this.getController(\"headerFilter\");\n    this._dataController = this.getController(\"data\");\n  }\n  _createTable() {\n    const $table = super._createTable.apply(this, arguments);\n    eventsEngine.on($table, \"mousedown selectstart\", this.createAction(e => {\n      const {\n        event: event\n      } = e;\n      if (event.shiftKey) {\n        event.preventDefault();\n      }\n    }));\n    return $table;\n  }\n  _isLegacyKeyboardNavigation() {\n    return this.option(\"useLegacyKeyboardNavigation\");\n  }\n  _getDefaultTemplate(column) {\n    const that = this;\n    return function ($container, options) {\n      const {\n        caption: caption\n      } = column;\n      const needCellContent = !column.command || caption && \"expand\" !== column.command;\n      if (\"empty\" === column.command) {\n        that._renderEmptyMessage($container, options);\n      } else if (needCellContent) {\n        const $content = createCellContent(that, $container, options);\n        $content.text(caption);\n      } else if (column.command) {\n        $container.html(\"&nbsp;\");\n      }\n    };\n  }\n  _renderEmptyMessage($container, options) {\n    const textEmpty = this._getEmptyHeaderText();\n    if (!textEmpty) {\n      $container.html(\"&nbsp;\");\n      return;\n    }\n    const $cellContent = createCellContent(this, $container, options);\n    const needSplit = textEmpty.includes(\"{0}\");\n    if (needSplit) {\n      const [leftPart, rightPart] = textEmpty.split(\"{0}\");\n      const columnChooserTitle = messageLocalization.format(\"dxDataGrid-emptyHeaderColumnChooserText\");\n      const columnChooserView = this._columnChooserView;\n      const $link = $(\"<a>\").text(columnChooserTitle).addClass(LINK);\n      eventsEngine.on($link, \"click\", this.createAction(() => columnChooserView.showColumnChooser()));\n      $cellContent.append(domAdapter.createTextNode(leftPart)).append($link).append(domAdapter.createTextNode(rightPart));\n    } else {\n      $cellContent.text(textEmpty);\n    }\n  }\n  _getEmptyHeaderText() {\n    const hasHiddenColumns = !!this._columnChooserView.hasHiddenColumns();\n    const hasGroupedColumns = !!this._headerPanelView.hasGroupedColumns();\n    switch (true) {\n      case hasHiddenColumns && hasGroupedColumns:\n        return messageLocalization.format(\"dxDataGrid-emptyHeaderWithColumnChooserAndGroupPanelText\");\n      case hasGroupedColumns:\n        return messageLocalization.format(\"dxDataGrid-emptyHeaderWithGroupPanelText\");\n      case hasHiddenColumns:\n        return messageLocalization.format(\"dxDataGrid-emptyHeaderWithColumnChooserText\");\n      default:\n        return \"\";\n    }\n  }\n  _getHeaderTemplate(column) {\n    return column.headerCellTemplate || {\n      allowRenderToDetachedContainer: true,\n      render: this._getDefaultTemplate(column)\n    };\n  }\n  _processTemplate(template, options) {\n    const that = this;\n    let resultTemplate;\n    const {\n      column: column\n    } = options;\n    const renderingTemplate = super._processTemplate(template);\n    if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\n      resultTemplate = {\n        render(options) {\n          const $content = createCellContent(that, options.container, options.model);\n          renderingTemplate.render(extend({}, options, {\n            container: $content\n          }));\n        }\n      };\n    } else {\n      resultTemplate = renderingTemplate;\n    }\n    return resultTemplate;\n  }\n  _handleDataChanged(e) {\n    if (\"refresh\" !== e.changeType) {\n      return;\n    }\n    if (this._isGroupingChanged || this._requireReady) {\n      this._isGroupingChanged = false;\n      this.render();\n    }\n  }\n  _renderCell($row, options) {\n    const $cell = super._renderCell($row, options);\n    if (\"header\" === options.row.rowType) {\n      $cell.addClass(\"dx-cell-focus-disabled\");\n      if (!this._isLegacyKeyboardNavigation()) {\n        if (options.column && !options.column.type) {\n          $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n        }\n      }\n    }\n    return $cell;\n  }\n  _setCellAriaAttributes($cell, cellOptions, options) {\n    super._setCellAriaAttributes($cell, cellOptions, options);\n    if (\"header\" === cellOptions.rowType) {\n      if (!cellOptions.column.type) {\n        this.setAria(\"role\", \"columnheader\", $cell);\n      }\n      if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\n        $cell.attr(\"id\", cellOptions.column.headerId);\n        this.setAria(\"label\", `${messageLocalization.format(\"dxDataGrid-ariaColumn\")} ${cellOptions.column.caption}`, $cell);\n      }\n    }\n  }\n  _createRow(row) {\n    const $row = super._createRow.apply(this, arguments);\n    $row.toggleClass(\"dx-column-lines\", this.option(\"showColumnLines\"));\n    if (\"header\" === row.rowType) {\n      $row.addClass(\"dx-header-row\");\n      if (!this._isLegacyKeyboardNavigation()) {\n        registerKeyboardAction(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this));\n      }\n    }\n    return $row;\n  }\n  _processHeaderAction(event, $row) {}\n  _handleActionKeyDown(args) {\n    const {\n      event: event\n    } = args;\n    const $target = $(event.target);\n    this._lastActionElement = event.target;\n    if ($target.is(\".dx-header-filter\")) {\n      const headerFilterController = this._headerFilterController;\n      const $column = $target.closest(\"td\");\n      const columnIndex = this.getColumnIndexByElement($column);\n      if (columnIndex >= 0) {\n        headerFilterController.showHeaderFilterMenu(columnIndex, false);\n      }\n    } else {\n      const $row = $target.closest(\".dx-row\");\n      this._processHeaderAction(event, $row);\n    }\n    event.preventDefault();\n  }\n  _renderCore() {\n    const $container = this.element();\n    const change = {};\n    if (this._tableElement && !this._dataController.isLoaded() && !this._hasRowElements) {\n      return new Deferred().resolve();\n    }\n    $container.addClass(this.addWidgetPrefix(\"headers\")).toggleClass(this.addWidgetPrefix(\"nowrap\"), !this.option(\"wordWrapEnabled\"));\n    this.setAria(\"role\", \"presentation\", $container);\n    const deferred = this._updateContent(this._renderTable({\n      change: change\n    }), change);\n    $container.toggleClass(\"dx-header-multi-row\", this.getRowCount() > 1);\n    super._renderCore.apply(this, arguments);\n    return deferred;\n  }\n  _renderRows() {\n    const that = this;\n    if (that._dataController.isLoaded() || that._hasRowElements) {\n      super._renderRows.apply(that, arguments);\n      that._hasRowElements = true;\n    }\n  }\n  _renderRow($table, options) {\n    const rowIndex = 1 === this.getRowCount() ? null : options.row.rowIndex;\n    options.columns = this.getColumns(rowIndex);\n    super._renderRow($table, options);\n  }\n  _createCell(options) {\n    const {\n      column: column\n    } = options;\n    const $cellElement = super._createCell.apply(this, arguments);\n    column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\n    return $cellElement;\n  }\n  _getRows() {\n    const result = [];\n    const rowCount = this.getRowCount();\n    if (this.option(\"showColumnHeaders\")) {\n      for (let i = 0; i < rowCount; i++) {\n        result.push({\n          rowType: \"header\",\n          rowIndex: i\n        });\n      }\n    }\n    return result;\n  }\n  _getCellTemplate(options) {\n    if (\"header\" === options.rowType) {\n      return this._getHeaderTemplate(options.column);\n    }\n  }\n  _columnOptionChanged(e) {\n    const {\n      changeTypes: changeTypes\n    } = e;\n    const {\n      optionNames: optionNames\n    } = e;\n    if (changeTypes.grouping || changeTypes.groupExpanding) {\n      if (changeTypes.grouping) {\n        this._isGroupingChanged = true;\n      }\n      return;\n    }\n    super._columnOptionChanged(e);\n    if (optionNames.width || optionNames.visible) {\n      this.resizeCompleted.fire();\n    }\n  }\n  _isElementVisible(elementOptions) {\n    return elementOptions && elementOptions.visible;\n  }\n  _alignCaptionByCenter($cell) {\n    let $indicatorsContainer = this._getIndicatorContainer($cell, true);\n    if ($indicatorsContainer && $indicatorsContainer.length) {\n      $indicatorsContainer.filter(\".dx-visibility-hidden\").remove();\n      $indicatorsContainer = this._getIndicatorContainer($cell);\n      $indicatorsContainer.clone().addClass(\"dx-visibility-hidden\").css(\"float\", \"\").insertBefore($cell.children(`.${this.addWidgetPrefix(\"text-content\")}`));\n    }\n  }\n  _updateCell($cell, options) {\n    if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\n      this._alignCaptionByCenter($cell);\n    }\n    super._updateCell.apply(this, arguments);\n  }\n  _updateIndicator($cell, column, indicatorName) {\n    const $indicatorElement = super._updateIndicator.apply(this, arguments);\n    if (\"center\" === column.alignment) {\n      this._alignCaptionByCenter($cell);\n    }\n    addCssClassesToCellContent(this, $cell, column);\n    return $indicatorElement;\n  }\n  _getIndicatorContainer($cell, returnAll) {\n    const $indicatorsContainer = super._getIndicatorContainer($cell);\n    return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.dx-visibility-hidden)\");\n  }\n  _isSortableElement($target) {\n    return true;\n  }\n  getHeadersRowHeight() {\n    const $tableElement = this.getTableElement();\n    const $headerRows = $tableElement && $tableElement.find(\".dx-header-row\");\n    return $headerRows && $headerRows.toArray().reduce((sum, headerRow) => sum + getHeight(headerRow), 0) || 0;\n  }\n  getHeaderElement(index) {\n    const $columnElements = this.getColumnElements();\n    return (null === $columnElements || void 0 === $columnElements ? void 0 : $columnElements.eq(index)) ?? $(\"\");\n  }\n  getColumnElements(index, bandColumnIndex) {\n    const that = this;\n    let $cellElement;\n    const columnsController = that._columnsController;\n    const rowCount = that.getRowCount();\n    if (that.option(\"showColumnHeaders\")) {\n      if (rowCount > 1 && (!isDefined(index) || isDefined(bandColumnIndex))) {\n        const result = [];\n        const visibleColumns = isDefined(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\n        each(visibleColumns, (_, column) => {\n          const rowIndex = isDefined(index) ? index : columnsController.getRowIndex(column.index);\n          $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\n          $cellElement && result.push($cellElement.get(0));\n        });\n        return $(result);\n      }\n      if (!index || index < rowCount) {\n        return that.getCellElements(index || 0);\n      }\n    }\n    return;\n  }\n  getColumnIndexByElement($cell) {\n    const cellIndex = this.getCellIndex($cell);\n    const $row = $cell.closest(\".dx-row\");\n    const {\n      rowIndex: rowIndex\n    } = $row[0];\n    const column = this.getColumns(rowIndex)[cellIndex];\n    return column ? column.index : -1;\n  }\n  getVisibleColumnIndex(columnIndex, rowIndex) {\n    const column = this.getColumns()[columnIndex];\n    return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1;\n  }\n  getColumnWidths($tableElement, rowIndex) {\n    const $columnElements = this.getColumnElements(rowIndex);\n    if ($columnElements && $columnElements.length) {\n      return this._getWidths($columnElements);\n    }\n    return super.getColumnWidths.apply(this, arguments);\n  }\n  allowDragging(column) {\n    const rowIndex = column && this._columnsController.getRowIndex(column.index);\n    const columns = this.getColumns(rowIndex);\n    const isReorderingEnabled = this.option(\"allowColumnReordering\") ?? this._columnsController.isColumnOptionUsed(\"allowReordering\");\n    return isReorderingEnabled && column.allowReordering && columns.length > 1;\n  }\n  getBoundingRect() {\n    const that = this;\n    const $columnElements = that.getColumnElements();\n    if ($columnElements && $columnElements.length) {\n      const offset = that.getTableElement().offset();\n      return {\n        top: offset.top\n      };\n    }\n    return null;\n  }\n  getName() {\n    return \"headers\";\n  }\n  getColumnCount() {\n    const $columnElements = this.getColumnElements();\n    return $columnElements ? $columnElements.length : 0;\n  }\n  isVisible() {\n    return this.option(\"showColumnHeaders\");\n  }\n  optionChanged(args) {\n    const that = this;\n    switch (args.name) {\n      case \"showColumnHeaders\":\n      case \"wordWrapEnabled\":\n      case \"showColumnLines\":\n        that._invalidate(true, true);\n        args.handled = true;\n        break;\n      default:\n        super.optionChanged(args);\n    }\n  }\n  getHeight() {\n    return this.getElementHeight();\n  }\n  getContextMenuItems(options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n      const sortingOptions = that.option(\"sorting\");\n      if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\n        const onItemClick = function (params) {\n          setTimeout(() => {\n            that._columnsController.changeSortOrder(column.index, params.itemData.value);\n          });\n        };\n        return [{\n          text: sortingOptions.ascendingText,\n          value: \"asc\",\n          disabled: \"asc\" === column.sortOrder,\n          icon: \"context-menu-sort-asc\",\n          onItemClick: onItemClick\n        }, {\n          text: sortingOptions.descendingText,\n          value: \"desc\",\n          disabled: \"desc\" === column.sortOrder,\n          icon: \"context-menu-sort-desc\",\n          onItemClick: onItemClick\n        }, {\n          text: sortingOptions.clearText,\n          value: \"none\",\n          disabled: !column.sortOrder,\n          icon: \"context-menu-sort-none\",\n          onItemClick: onItemClick\n        }];\n      }\n    }\n    return;\n  }\n  getRowCount() {\n    return this._columnsController && this._columnsController.getRowCount();\n  }\n  toggleDraggableColumnClass(columnIndex, value, rowIndex) {\n    let i;\n    let columnElements;\n    const rowCount = this.getRowCount();\n    const columns = this._columnsController.getColumns();\n    const column = columns && columns[columnIndex];\n    const columnID = column && column.isBand && column.index;\n    const setColumnClass = (column, index) => {\n      if (column.ownerBand === columnID) {\n        columnElements.eq(index).toggleClass(this.addWidgetPrefix(REORDERING_CLASSES.draggableColumn), value);\n        if (column.isBand) {\n          this.toggleDraggableColumnClass(column.index, value, i + 1);\n        }\n      }\n    };\n    if (isDefined(columnID)) {\n      rowIndex = rowIndex || 0;\n      for (i = rowIndex; i < rowCount; i++) {\n        columnElements = this.getCellElements(i);\n        if (columnElements) {\n          const rowColumns = this.getColumns(i);\n          rowColumns.forEach(setColumnClass);\n        }\n      }\n    }\n  }\n}\nexport const columnHeadersModule = {\n  defaultOptions: () => ({\n    showColumnHeaders: true,\n    cellHintEnabled: true\n  }),\n  views: {\n    columnHeadersView: ColumnHeadersView\n  }\n};","map":{"version":3,"names":["eventsEngine","messageLocalization","domAdapter","$","Deferred","extend","each","getHeight","isDefined","CLASSES","REORDERING_CLASSES","registerKeyboardAction","ColumnsView","CELL_CONTENT_CLASS","HEADERS_CLASS","NOWRAP_CLASS","ROW_CLASS_SELECTOR","HEADER_ROW_CLASS","COLUMN_LINES_CLASS","CONTEXT_MENU_SORT_ASC_ICON","CONTEXT_MENU_SORT_DESC_ICON","CONTEXT_MENU_SORT_NONE_ICON","CELL_FOCUS_DISABLED_CLASS","VISIBILITY_HIDDEN_CLASS","TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX","SORT_INDICATOR_CLASS","SORT_INDEX_INDICATOR_CLASS","HEADER_FILTER_CLASS_SELECTOR","HEADER_FILTER_INDICATOR_CLASS","MULTI_ROW_HEADER_CLASS","LINK","createCellContent","that","$cell","options","$cellContent","addClass","addWidgetPrefix","setAria","addCssClassesToCellContent","column","showColumnLines","option","contentAlignment","getController","getHeaderContentAlignment","alignment","$indicatorElements","_getIndicatorElements","$visibleIndicatorElements","indicatorCount","length","columnAlignment","_getColumnAlignment","sortIndicatorClassName","_getIndicatorClassName","sortIndexIndicatorClassName","$sortIndicator","filter","$sortIndexIndicator","children","toggleClass","ColumnHeadersView","init","_headerPanelView","getView","_headerFilterController","_dataController","_createTable","$table","apply","arguments","on","createAction","e","event","shiftKey","preventDefault","_isLegacyKeyboardNavigation","_getDefaultTemplate","$container","caption","needCellContent","command","_renderEmptyMessage","$content","text","html","textEmpty","_getEmptyHeaderText","needSplit","includes","leftPart","rightPart","split","columnChooserTitle","format","columnChooserView","_columnChooserView","$link","showColumnChooser","append","createTextNode","hasHiddenColumns","hasGroupedColumns","_getHeaderTemplate","headerCellTemplate","allowRenderToDetachedContainer","render","_processTemplate","template","resultTemplate","renderingTemplate","rowType","container","model","_handleDataChanged","changeType","_isGroupingChanged","_requireReady","_renderCell","$row","row","type","attr","_setCellAriaAttributes","cellOptions","isBand","headerId","_createRow","_handleActionKeyDown","bind","_processHeaderAction","args","$target","target","_lastActionElement","is","headerFilterController","$column","closest","columnIndex","getColumnIndexByElement","showHeaderFilterMenu","_renderCore","element","change","_tableElement","isLoaded","_hasRowElements","resolve","deferred","_updateContent","_renderTable","getRowCount","_renderRows","_renderRow","rowIndex","columns","getColumns","_createCell","$cellElement","rowspan","_getRows","result","rowCount","i","push","_getCellTemplate","_columnOptionChanged","changeTypes","optionNames","grouping","groupExpanding","width","visible","resizeCompleted","fire","_isElementVisible","elementOptions","_alignCaptionByCenter","$indicatorsContainer","_getIndicatorContainer","remove","clone","css","insertBefore","_updateCell","_updateIndicator","indicatorName","$indicatorElement","returnAll","_isSortableElement","getHeadersRowHeight","$tableElement","getTableElement","$headerRows","find","toArray","reduce","sum","headerRow","getHeaderElement","index","$columnElements","getColumnElements","eq","bandColumnIndex","columnsController","_columnsController","visibleColumns","getChildrenByBandColumn","getVisibleColumns","_","getRowIndex","_getCellElement","getVisibleIndex","get","getCellElements","cellIndex","getCellIndex","getVisibleColumnIndex","getColumnWidths","_getWidths","allowDragging","isReorderingEnabled","isColumnOptionUsed","allowReordering","getBoundingRect","offset","top","getName","getColumnCount","isVisible","optionChanged","name","_invalidate","handled","getElementHeight","getContextMenuItems","sortingOptions","mode","allowSorting","onItemClick","params","setTimeout","changeSortOrder","itemData","value","ascendingText","disabled","sortOrder","icon","descendingText","clearText","toggleDraggableColumnClass","columnElements","columnID","setColumnClass","ownerBand","draggableColumn","rowColumns","forEach","columnHeadersModule","defaultOptions","showColumnHeaders","cellHintEnabled","views","columnHeadersView"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/column_headers/m_column_headers.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/column_headers/m_column_headers.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport domAdapter from \"../../../../core/dom_adapter\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    Deferred\r\n} from \"../../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getHeight\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    CLASSES as REORDERING_CLASSES\r\n} from \"../columns_resizing_reordering/const\";\r\nimport {\r\n    registerKeyboardAction\r\n} from \"../m_accessibility\";\r\nimport {\r\n    ColumnsView\r\n} from \"../views/m_columns_view\";\r\nconst CELL_CONTENT_CLASS = \"text-content\";\r\nconst HEADERS_CLASS = \"headers\";\r\nconst NOWRAP_CLASS = \"nowrap\";\r\nconst ROW_CLASS_SELECTOR = \".dx-row\";\r\nconst HEADER_ROW_CLASS = \"dx-header-row\";\r\nconst COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nconst CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\r\nconst CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\r\nconst CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\r\nconst CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nconst VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\r\nconst TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\r\nconst SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\r\nconst SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\r\nconst HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\r\nconst HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\r\nconst MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\r\nconst LINK = \"dx-link\";\r\nconst createCellContent = function(that, $cell, options) {\r\n    const $cellContent = $(\"<div>\").addClass(that.addWidgetPrefix(\"text-content\"));\r\n    that.setAria(\"role\", \"presentation\", $cellContent);\r\n    addCssClassesToCellContent(that, $cell, options.column, $cellContent);\r\n    const showColumnLines = that.option(\"showColumnLines\");\r\n    const contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\r\n    return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell)\r\n};\r\n\r\nfunction addCssClassesToCellContent(that, $cell, column, $cellContent) {\r\n    const $indicatorElements = that._getIndicatorElements($cell, true);\r\n    const $visibleIndicatorElements = that._getIndicatorElements($cell);\r\n    const indicatorCount = $indicatorElements && $indicatorElements.length;\r\n    const columnAlignment = that._getColumnAlignment(column.alignment);\r\n    const sortIndicatorClassName = `.${that._getIndicatorClassName(\"sort\")}`;\r\n    const sortIndexIndicatorClassName = `.${that._getIndicatorClassName(\"sortIndex\")}`;\r\n    const $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\r\n    const $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\r\n    $cellContent = $cellContent || $cell.children(`.${that.addWidgetPrefix(\"text-content\")}`);\r\n    $cellContent.toggleClass(\"dx-text-content-alignment-\" + columnAlignment, indicatorCount > 0).toggleClass(\"dx-text-content-alignment-\" + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(\"dx-sort-indicator\", !!$sortIndicator.length).toggleClass(\"dx-sort-index-indicator\", !!$sortIndexIndicator.length).toggleClass(\"dx-header-filter-indicator\", !!$visibleIndicatorElements.filter(`.${that._getIndicatorClassName(\"headerFilter\")}`).length)\r\n}\r\nexport class ColumnHeadersView extends ColumnsView {\r\n    init() {\r\n        super.init();\r\n        this._headerPanelView = this.getView(\"headerPanel\");\r\n        this._headerFilterController = this.getController(\"headerFilter\");\r\n        this._dataController = this.getController(\"data\")\r\n    }\r\n    _createTable() {\r\n        const $table = super._createTable.apply(this, arguments);\r\n        eventsEngine.on($table, \"mousedown selectstart\", this.createAction((e => {\r\n            const {\r\n                event: event\r\n            } = e;\r\n            if (event.shiftKey) {\r\n                event.preventDefault()\r\n            }\r\n        })));\r\n        return $table\r\n    }\r\n    _isLegacyKeyboardNavigation() {\r\n        return this.option(\"useLegacyKeyboardNavigation\")\r\n    }\r\n    _getDefaultTemplate(column) {\r\n        const that = this;\r\n        return function($container, options) {\r\n            const {\r\n                caption: caption\r\n            } = column;\r\n            const needCellContent = !column.command || caption && \"expand\" !== column.command;\r\n            if (\"empty\" === column.command) {\r\n                that._renderEmptyMessage($container, options)\r\n            } else if (needCellContent) {\r\n                const $content = createCellContent(that, $container, options);\r\n                $content.text(caption)\r\n            } else if (column.command) {\r\n                $container.html(\"&nbsp;\")\r\n            }\r\n        }\r\n    }\r\n    _renderEmptyMessage($container, options) {\r\n        const textEmpty = this._getEmptyHeaderText();\r\n        if (!textEmpty) {\r\n            $container.html(\"&nbsp;\");\r\n            return\r\n        }\r\n        const $cellContent = createCellContent(this, $container, options);\r\n        const needSplit = textEmpty.includes(\"{0}\");\r\n        if (needSplit) {\r\n            const [leftPart, rightPart] = textEmpty.split(\"{0}\");\r\n            const columnChooserTitle = messageLocalization.format(\"dxDataGrid-emptyHeaderColumnChooserText\");\r\n            const columnChooserView = this._columnChooserView;\r\n            const $link = $(\"<a>\").text(columnChooserTitle).addClass(LINK);\r\n            eventsEngine.on($link, \"click\", this.createAction((() => columnChooserView.showColumnChooser())));\r\n            $cellContent.append(domAdapter.createTextNode(leftPart)).append($link).append(domAdapter.createTextNode(rightPart))\r\n        } else {\r\n            $cellContent.text(textEmpty)\r\n        }\r\n    }\r\n    _getEmptyHeaderText() {\r\n        const hasHiddenColumns = !!this._columnChooserView.hasHiddenColumns();\r\n        const hasGroupedColumns = !!this._headerPanelView.hasGroupedColumns();\r\n        switch (true) {\r\n            case hasHiddenColumns && hasGroupedColumns:\r\n                return messageLocalization.format(\"dxDataGrid-emptyHeaderWithColumnChooserAndGroupPanelText\");\r\n            case hasGroupedColumns:\r\n                return messageLocalization.format(\"dxDataGrid-emptyHeaderWithGroupPanelText\");\r\n            case hasHiddenColumns:\r\n                return messageLocalization.format(\"dxDataGrid-emptyHeaderWithColumnChooserText\");\r\n            default:\r\n                return \"\"\r\n        }\r\n    }\r\n    _getHeaderTemplate(column) {\r\n        return column.headerCellTemplate || {\r\n            allowRenderToDetachedContainer: true,\r\n            render: this._getDefaultTemplate(column)\r\n        }\r\n    }\r\n    _processTemplate(template, options) {\r\n        const that = this;\r\n        let resultTemplate;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const renderingTemplate = super._processTemplate(template);\r\n        if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\r\n            resultTemplate = {\r\n                render(options) {\r\n                    const $content = createCellContent(that, options.container, options.model);\r\n                    renderingTemplate.render(extend({}, options, {\r\n                        container: $content\r\n                    }))\r\n                }\r\n            }\r\n        } else {\r\n            resultTemplate = renderingTemplate\r\n        }\r\n        return resultTemplate\r\n    }\r\n    _handleDataChanged(e) {\r\n        if (\"refresh\" !== e.changeType) {\r\n            return\r\n        }\r\n        if (this._isGroupingChanged || this._requireReady) {\r\n            this._isGroupingChanged = false;\r\n            this.render()\r\n        }\r\n    }\r\n    _renderCell($row, options) {\r\n        const $cell = super._renderCell($row, options);\r\n        if (\"header\" === options.row.rowType) {\r\n            $cell.addClass(\"dx-cell-focus-disabled\");\r\n            if (!this._isLegacyKeyboardNavigation()) {\r\n                if (options.column && !options.column.type) {\r\n                    $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0)\r\n                }\r\n            }\r\n        }\r\n        return $cell\r\n    }\r\n    _setCellAriaAttributes($cell, cellOptions, options) {\r\n        super._setCellAriaAttributes($cell, cellOptions, options);\r\n        if (\"header\" === cellOptions.rowType) {\r\n            if (!cellOptions.column.type) {\r\n                this.setAria(\"role\", \"columnheader\", $cell)\r\n            }\r\n            if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\r\n                $cell.attr(\"id\", cellOptions.column.headerId);\r\n                this.setAria(\"label\", `${messageLocalization.format(\"dxDataGrid-ariaColumn\")} ${cellOptions.column.caption}`, $cell)\r\n            }\r\n        }\r\n    }\r\n    _createRow(row) {\r\n        const $row = super._createRow.apply(this, arguments);\r\n        $row.toggleClass(\"dx-column-lines\", this.option(\"showColumnLines\"));\r\n        if (\"header\" === row.rowType) {\r\n            $row.addClass(\"dx-header-row\");\r\n            if (!this._isLegacyKeyboardNavigation()) {\r\n                registerKeyboardAction(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this))\r\n            }\r\n        }\r\n        return $row\r\n    }\r\n    _processHeaderAction(event, $row) {}\r\n    _handleActionKeyDown(args) {\r\n        const {\r\n            event: event\r\n        } = args;\r\n        const $target = $(event.target);\r\n        this._lastActionElement = event.target;\r\n        if ($target.is(\".dx-header-filter\")) {\r\n            const headerFilterController = this._headerFilterController;\r\n            const $column = $target.closest(\"td\");\r\n            const columnIndex = this.getColumnIndexByElement($column);\r\n            if (columnIndex >= 0) {\r\n                headerFilterController.showHeaderFilterMenu(columnIndex, false)\r\n            }\r\n        } else {\r\n            const $row = $target.closest(\".dx-row\");\r\n            this._processHeaderAction(event, $row)\r\n        }\r\n        event.preventDefault()\r\n    }\r\n    _renderCore() {\r\n        const $container = this.element();\r\n        const change = {};\r\n        if (this._tableElement && !this._dataController.isLoaded() && !this._hasRowElements) {\r\n            return (new Deferred).resolve()\r\n        }\r\n        $container.addClass(this.addWidgetPrefix(\"headers\")).toggleClass(this.addWidgetPrefix(\"nowrap\"), !this.option(\"wordWrapEnabled\"));\r\n        this.setAria(\"role\", \"presentation\", $container);\r\n        const deferred = this._updateContent(this._renderTable({\r\n            change: change\r\n        }), change);\r\n        $container.toggleClass(\"dx-header-multi-row\", this.getRowCount() > 1);\r\n        super._renderCore.apply(this, arguments);\r\n        return deferred\r\n    }\r\n    _renderRows() {\r\n        const that = this;\r\n        if (that._dataController.isLoaded() || that._hasRowElements) {\r\n            super._renderRows.apply(that, arguments);\r\n            that._hasRowElements = true\r\n        }\r\n    }\r\n    _renderRow($table, options) {\r\n        const rowIndex = 1 === this.getRowCount() ? null : options.row.rowIndex;\r\n        options.columns = this.getColumns(rowIndex);\r\n        super._renderRow($table, options)\r\n    }\r\n    _createCell(options) {\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const $cellElement = super._createCell.apply(this, arguments);\r\n        column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\r\n        return $cellElement\r\n    }\r\n    _getRows() {\r\n        const result = [];\r\n        const rowCount = this.getRowCount();\r\n        if (this.option(\"showColumnHeaders\")) {\r\n            for (let i = 0; i < rowCount; i++) {\r\n                result.push({\r\n                    rowType: \"header\",\r\n                    rowIndex: i\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getCellTemplate(options) {\r\n        if (\"header\" === options.rowType) {\r\n            return this._getHeaderTemplate(options.column)\r\n        }\r\n    }\r\n    _columnOptionChanged(e) {\r\n        const {\r\n            changeTypes: changeTypes\r\n        } = e;\r\n        const {\r\n            optionNames: optionNames\r\n        } = e;\r\n        if (changeTypes.grouping || changeTypes.groupExpanding) {\r\n            if (changeTypes.grouping) {\r\n                this._isGroupingChanged = true\r\n            }\r\n            return\r\n        }\r\n        super._columnOptionChanged(e);\r\n        if (optionNames.width || optionNames.visible) {\r\n            this.resizeCompleted.fire()\r\n        }\r\n    }\r\n    _isElementVisible(elementOptions) {\r\n        return elementOptions && elementOptions.visible\r\n    }\r\n    _alignCaptionByCenter($cell) {\r\n        let $indicatorsContainer = this._getIndicatorContainer($cell, true);\r\n        if ($indicatorsContainer && $indicatorsContainer.length) {\r\n            $indicatorsContainer.filter(\".dx-visibility-hidden\").remove();\r\n            $indicatorsContainer = this._getIndicatorContainer($cell);\r\n            $indicatorsContainer.clone().addClass(\"dx-visibility-hidden\").css(\"float\", \"\").insertBefore($cell.children(`.${this.addWidgetPrefix(\"text-content\")}`))\r\n        }\r\n    }\r\n    _updateCell($cell, options) {\r\n        if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\r\n            this._alignCaptionByCenter($cell)\r\n        }\r\n        super._updateCell.apply(this, arguments)\r\n    }\r\n    _updateIndicator($cell, column, indicatorName) {\r\n        const $indicatorElement = super._updateIndicator.apply(this, arguments);\r\n        if (\"center\" === column.alignment) {\r\n            this._alignCaptionByCenter($cell)\r\n        }\r\n        addCssClassesToCellContent(this, $cell, column);\r\n        return $indicatorElement\r\n    }\r\n    _getIndicatorContainer($cell, returnAll) {\r\n        const $indicatorsContainer = super._getIndicatorContainer($cell);\r\n        return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.dx-visibility-hidden)\")\r\n    }\r\n    _isSortableElement($target) {\r\n        return true\r\n    }\r\n    getHeadersRowHeight() {\r\n        const $tableElement = this.getTableElement();\r\n        const $headerRows = $tableElement && $tableElement.find(\".dx-header-row\");\r\n        return $headerRows && $headerRows.toArray().reduce(((sum, headerRow) => sum + getHeight(headerRow)), 0) || 0\r\n    }\r\n    getHeaderElement(index) {\r\n        const $columnElements = this.getColumnElements();\r\n        return (null === $columnElements || void 0 === $columnElements ? void 0 : $columnElements.eq(index)) ?? $(\"\")\r\n    }\r\n    getColumnElements(index, bandColumnIndex) {\r\n        const that = this;\r\n        let $cellElement;\r\n        const columnsController = that._columnsController;\r\n        const rowCount = that.getRowCount();\r\n        if (that.option(\"showColumnHeaders\")) {\r\n            if (rowCount > 1 && (!isDefined(index) || isDefined(bandColumnIndex))) {\r\n                const result = [];\r\n                const visibleColumns = isDefined(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\r\n                each(visibleColumns, ((_, column) => {\r\n                    const rowIndex = isDefined(index) ? index : columnsController.getRowIndex(column.index);\r\n                    $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\r\n                    $cellElement && result.push($cellElement.get(0))\r\n                }));\r\n                return $(result)\r\n            }\r\n            if (!index || index < rowCount) {\r\n                return that.getCellElements(index || 0)\r\n            }\r\n        }\r\n        return\r\n    }\r\n    getColumnIndexByElement($cell) {\r\n        const cellIndex = this.getCellIndex($cell);\r\n        const $row = $cell.closest(\".dx-row\");\r\n        const {\r\n            rowIndex: rowIndex\r\n        } = $row[0];\r\n        const column = this.getColumns(rowIndex)[cellIndex];\r\n        return column ? column.index : -1\r\n    }\r\n    getVisibleColumnIndex(columnIndex, rowIndex) {\r\n        const column = this.getColumns()[columnIndex];\r\n        return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1\r\n    }\r\n    getColumnWidths($tableElement, rowIndex) {\r\n        const $columnElements = this.getColumnElements(rowIndex);\r\n        if ($columnElements && $columnElements.length) {\r\n            return this._getWidths($columnElements)\r\n        }\r\n        return super.getColumnWidths.apply(this, arguments)\r\n    }\r\n    allowDragging(column) {\r\n        const rowIndex = column && this._columnsController.getRowIndex(column.index);\r\n        const columns = this.getColumns(rowIndex);\r\n        const isReorderingEnabled = this.option(\"allowColumnReordering\") ?? this._columnsController.isColumnOptionUsed(\"allowReordering\");\r\n        return isReorderingEnabled && column.allowReordering && columns.length > 1\r\n    }\r\n    getBoundingRect() {\r\n        const that = this;\r\n        const $columnElements = that.getColumnElements();\r\n        if ($columnElements && $columnElements.length) {\r\n            const offset = that.getTableElement().offset();\r\n            return {\r\n                top: offset.top\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    getName() {\r\n        return \"headers\"\r\n    }\r\n    getColumnCount() {\r\n        const $columnElements = this.getColumnElements();\r\n        return $columnElements ? $columnElements.length : 0\r\n    }\r\n    isVisible() {\r\n        return this.option(\"showColumnHeaders\")\r\n    }\r\n    optionChanged(args) {\r\n        const that = this;\r\n        switch (args.name) {\r\n            case \"showColumnHeaders\":\r\n            case \"wordWrapEnabled\":\r\n            case \"showColumnLines\":\r\n                that._invalidate(true, true);\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                super.optionChanged(args)\r\n        }\r\n    }\r\n    getHeight() {\r\n        return this.getElementHeight()\r\n    }\r\n    getContextMenuItems(options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\r\n            const sortingOptions = that.option(\"sorting\");\r\n            if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\r\n                const onItemClick = function(params) {\r\n                    setTimeout((() => {\r\n                        that._columnsController.changeSortOrder(column.index, params.itemData.value)\r\n                    }))\r\n                };\r\n                return [{\r\n                    text: sortingOptions.ascendingText,\r\n                    value: \"asc\",\r\n                    disabled: \"asc\" === column.sortOrder,\r\n                    icon: \"context-menu-sort-asc\",\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: sortingOptions.descendingText,\r\n                    value: \"desc\",\r\n                    disabled: \"desc\" === column.sortOrder,\r\n                    icon: \"context-menu-sort-desc\",\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: sortingOptions.clearText,\r\n                    value: \"none\",\r\n                    disabled: !column.sortOrder,\r\n                    icon: \"context-menu-sort-none\",\r\n                    onItemClick: onItemClick\r\n                }]\r\n            }\r\n        }\r\n        return\r\n    }\r\n    getRowCount() {\r\n        return this._columnsController && this._columnsController.getRowCount()\r\n    }\r\n    toggleDraggableColumnClass(columnIndex, value, rowIndex) {\r\n        let i;\r\n        let columnElements;\r\n        const rowCount = this.getRowCount();\r\n        const columns = this._columnsController.getColumns();\r\n        const column = columns && columns[columnIndex];\r\n        const columnID = column && column.isBand && column.index;\r\n        const setColumnClass = (column, index) => {\r\n            if (column.ownerBand === columnID) {\r\n                columnElements.eq(index).toggleClass(this.addWidgetPrefix(REORDERING_CLASSES.draggableColumn), value);\r\n                if (column.isBand) {\r\n                    this.toggleDraggableColumnClass(column.index, value, i + 1)\r\n                }\r\n            }\r\n        };\r\n        if (isDefined(columnID)) {\r\n            rowIndex = rowIndex || 0;\r\n            for (i = rowIndex; i < rowCount; i++) {\r\n                columnElements = this.getCellElements(i);\r\n                if (columnElements) {\r\n                    const rowColumns = this.getColumns(i);\r\n                    rowColumns.forEach(setColumnClass)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexport const columnHeadersModule = {\r\n    defaultOptions: () => ({\r\n        showColumnHeaders: true,\r\n        cellHintEnabled: true\r\n    }),\r\n    views: {\r\n        columnHeadersView: ColumnHeadersView\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}