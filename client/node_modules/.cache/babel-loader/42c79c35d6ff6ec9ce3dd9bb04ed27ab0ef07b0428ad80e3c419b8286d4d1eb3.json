{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/tree_view/m_tree_view.search.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../../core/component_registrator\";\nimport $ from \"../../../core/renderer\";\nimport { extend } from \"../../../core/utils/extend\";\nimport TextBox from \"../../../ui/text_box\";\nimport searchBoxMixin from \"../../../ui/widget/ui.search_box_mixin\";\nimport TreeViewBase from \"./m_tree_view.base\";\nsearchBoxMixin.setEditorClass(TextBox);\nconst WIDGET_CLASS = \"dx-treeview\";\nconst NODE_CONTAINER_CLASS = `${WIDGET_CLASS}-node-container`;\nconst TreeViewSearch = TreeViewBase.inherit(searchBoxMixin).inherit({\n  _addWidgetPrefix: className => `${WIDGET_CLASS}-${className}`,\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"searchValue\":\n        if (this._showCheckboxes() && this._isRecursiveSelection()) {\n          this._removeSelection();\n        }\n        this._initDataAdapter();\n        this._updateSearch();\n        this._repaintContainer();\n        this.option(\"focusedElement\", null);\n        break;\n      case \"searchExpr\":\n        this._initDataAdapter();\n        this.repaint();\n        break;\n      case \"searchMode\":\n        this.option(\"expandNodesRecursive\") ? this._updateDataAdapter() : this._initDataAdapter();\n        this.repaint();\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _updateDataAdapter() {\n    this._setOptionWithoutOptionChange(\"expandNodesRecursive\", false);\n    this._initDataAdapter();\n    this._setOptionWithoutOptionChange(\"expandNodesRecursive\", true);\n  },\n  _getDataAdapterOptions() {\n    return extend(this.callBase(), {\n      searchValue: this.option(\"searchValue\"),\n      searchMode: this.option(\"searchMode\") || \"contains\",\n      searchExpr: this.option(\"searchExpr\")\n    });\n  },\n  _getNodeContainer() {\n    return this.$element().find(`.${NODE_CONTAINER_CLASS}`).first();\n  },\n  _updateSearch() {\n    if (this._searchEditor) {\n      const editorOptions = this._getSearchEditorOptions();\n      this._searchEditor.option(editorOptions);\n    }\n  },\n  _repaintContainer() {\n    const $container = this._getNodeContainer();\n    let rootNodes;\n    if ($container.length) {\n      $container.empty();\n      rootNodes = this._dataAdapter.getRootNodes();\n      this._renderEmptyMessage(rootNodes);\n      this._renderItems($container, rootNodes);\n      this._fireContentReadyAction();\n    }\n  },\n  _focusTarget() {\n    return this._itemContainer(this.option(\"searchEnabled\"));\n  },\n  _cleanItemContainer() {\n    this.$element().empty();\n  },\n  _itemContainer(isSearchMode, selectAllEnabled) {\n    selectAllEnabled ?? (selectAllEnabled = this._selectAllEnabled());\n    if (selectAllEnabled) {\n      return this._getNodeContainer();\n    }\n    if (this._scrollable && isSearchMode) {\n      return $(this._scrollable.content());\n    }\n    return this.callBase();\n  },\n  _addWidgetClass() {\n    this.$element().addClass(this._widgetClass());\n  },\n  _clean() {\n    this.callBase();\n    this._removeSearchBox();\n  }\n});\nregisterComponent(\"dxTreeView\", TreeViewSearch);\nexport default TreeViewSearch;","map":{"version":3,"names":["registerComponent","$","extend","TextBox","searchBoxMixin","TreeViewBase","setEditorClass","WIDGET_CLASS","NODE_CONTAINER_CLASS","TreeViewSearch","inherit","_addWidgetPrefix","className","_optionChanged","args","name","_showCheckboxes","_isRecursiveSelection","_removeSelection","_initDataAdapter","_updateSearch","_repaintContainer","option","repaint","_updateDataAdapter","callBase","_setOptionWithoutOptionChange","_getDataAdapterOptions","searchValue","searchMode","searchExpr","_getNodeContainer","$element","find","first","_searchEditor","editorOptions","_getSearchEditorOptions","$container","rootNodes","length","empty","_dataAdapter","getRootNodes","_renderEmptyMessage","_renderItems","_fireContentReadyAction","_focusTarget","_itemContainer","_cleanItemContainer","isSearchMode","selectAllEnabled","_selectAllEnabled","_scrollable","content","_addWidgetClass","addClass","_widgetClass","_clean","_removeSearchBox"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/tree_view/m_tree_view.search.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/tree_view/m_tree_view.search.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport TextBox from \"../../../ui/text_box\";\r\nimport searchBoxMixin from \"../../../ui/widget/ui.search_box_mixin\";\r\nimport TreeViewBase from \"./m_tree_view.base\";\r\nsearchBoxMixin.setEditorClass(TextBox);\r\nconst WIDGET_CLASS = \"dx-treeview\";\r\nconst NODE_CONTAINER_CLASS = `${WIDGET_CLASS}-node-container`;\r\nconst TreeViewSearch = TreeViewBase.inherit(searchBoxMixin).inherit({\r\n    _addWidgetPrefix: className => `${WIDGET_CLASS}-${className}`,\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"searchValue\":\r\n                if (this._showCheckboxes() && this._isRecursiveSelection()) {\r\n                    this._removeSelection()\r\n                }\r\n                this._initDataAdapter();\r\n                this._updateSearch();\r\n                this._repaintContainer();\r\n                this.option(\"focusedElement\", null);\r\n                break;\r\n            case \"searchExpr\":\r\n                this._initDataAdapter();\r\n                this.repaint();\r\n                break;\r\n            case \"searchMode\":\r\n                this.option(\"expandNodesRecursive\") ? this._updateDataAdapter() : this._initDataAdapter();\r\n                this.repaint();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _updateDataAdapter() {\r\n        this._setOptionWithoutOptionChange(\"expandNodesRecursive\", false);\r\n        this._initDataAdapter();\r\n        this._setOptionWithoutOptionChange(\"expandNodesRecursive\", true)\r\n    },\r\n    _getDataAdapterOptions() {\r\n        return extend(this.callBase(), {\r\n            searchValue: this.option(\"searchValue\"),\r\n            searchMode: this.option(\"searchMode\") || \"contains\",\r\n            searchExpr: this.option(\"searchExpr\")\r\n        })\r\n    },\r\n    _getNodeContainer() {\r\n        return this.$element().find(`.${NODE_CONTAINER_CLASS}`).first()\r\n    },\r\n    _updateSearch() {\r\n        if (this._searchEditor) {\r\n            const editorOptions = this._getSearchEditorOptions();\r\n            this._searchEditor.option(editorOptions)\r\n        }\r\n    },\r\n    _repaintContainer() {\r\n        const $container = this._getNodeContainer();\r\n        let rootNodes;\r\n        if ($container.length) {\r\n            $container.empty();\r\n            rootNodes = this._dataAdapter.getRootNodes();\r\n            this._renderEmptyMessage(rootNodes);\r\n            this._renderItems($container, rootNodes);\r\n            this._fireContentReadyAction()\r\n        }\r\n    },\r\n    _focusTarget() {\r\n        return this._itemContainer(this.option(\"searchEnabled\"))\r\n    },\r\n    _cleanItemContainer() {\r\n        this.$element().empty()\r\n    },\r\n    _itemContainer(isSearchMode, selectAllEnabled) {\r\n        selectAllEnabled ?? (selectAllEnabled = this._selectAllEnabled());\r\n        if (selectAllEnabled) {\r\n            return this._getNodeContainer()\r\n        }\r\n        if (this._scrollable && isSearchMode) {\r\n            return $(this._scrollable.content())\r\n        }\r\n        return this.callBase()\r\n    },\r\n    _addWidgetClass() {\r\n        this.$element().addClass(this._widgetClass())\r\n    },\r\n    _clean() {\r\n        this.callBase();\r\n        this._removeSearchBox()\r\n    }\r\n});\r\nregisterComponent(\"dxTreeView\", TreeViewSearch);\r\nexport default TreeViewSearch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}