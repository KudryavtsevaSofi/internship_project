{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/overlay/m_utils.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { getInnerHeight, getOuterHeight } from \"../../../core/utils/size\";\nimport { isNumeric } from \"../../../core/utils/type\";\nimport windowUtils from \"../../core/utils/m_window\";\nconst WINDOW_HEIGHT_PERCENT = .9;\nexport const getElementMaxHeightByWindow = ($element, startLocation) => {\n  const $window = $(windowUtils.getWindow());\n  const {\n    top: elementOffset\n  } = $element.offset();\n  let actualOffset;\n  if (isNumeric(startLocation)) {\n    if (startLocation < elementOffset) {\n      return elementOffset - startLocation;\n    }\n    actualOffset = getInnerHeight($window) - startLocation + $window.scrollTop();\n  } else {\n    const offsetTop = elementOffset - $window.scrollTop();\n    const offsetBottom = getInnerHeight($window) - offsetTop - getOuterHeight($element);\n    actualOffset = Math.max(offsetTop, offsetBottom);\n  }\n  return .9 * actualOffset;\n};","map":{"version":3,"names":["$","getInnerHeight","getOuterHeight","isNumeric","windowUtils","WINDOW_HEIGHT_PERCENT","getElementMaxHeightByWindow","$element","startLocation","$window","getWindow","top","elementOffset","offset","actualOffset","scrollTop","offsetTop","offsetBottom","Math","max"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/overlay/m_utils.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/overlay/m_utils.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    getInnerHeight,\r\n    getOuterHeight\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    isNumeric\r\n} from \"../../../core/utils/type\";\r\nimport windowUtils from \"../../core/utils/m_window\";\r\nconst WINDOW_HEIGHT_PERCENT = .9;\r\nexport const getElementMaxHeightByWindow = ($element, startLocation) => {\r\n    const $window = $(windowUtils.getWindow());\r\n    const {\r\n        top: elementOffset\r\n    } = $element.offset();\r\n    let actualOffset;\r\n    if (isNumeric(startLocation)) {\r\n        if (startLocation < elementOffset) {\r\n            return elementOffset - startLocation\r\n        }\r\n        actualOffset = getInnerHeight($window) - startLocation + $window.scrollTop()\r\n    } else {\r\n        const offsetTop = elementOffset - $window.scrollTop();\r\n        const offsetBottom = getInnerHeight($window) - offsetTop - getOuterHeight($element);\r\n        actualOffset = Math.max(offsetTop, offsetBottom)\r\n    }\r\n    return .9 * actualOffset\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAC,MAAM,wBAAwB;AACtC,SACIC,cAAc,EACdC,cAAc,QACX,0BAA0B;AACjC,SACIC,SAAS,QACN,0BAA0B;AACjC,OAAOC,WAAW,MAAM,2BAA2B;AACnD,MAAMC,qBAAqB,GAAG,EAAE;AAChC,OAAO,MAAMC,2BAA2B,GAAGA,CAACC,QAAQ,EAAEC,aAAa,KAAK;EACpE,MAAMC,OAAO,GAAGT,CAAC,CAACI,WAAW,CAACM,SAAS,CAAC,CAAC,CAAC;EAC1C,MAAM;IACFC,GAAG,EAAEC;EACT,CAAC,GAAGL,QAAQ,CAACM,MAAM,CAAC,CAAC;EACrB,IAAIC,YAAY;EAChB,IAAIX,SAAS,CAACK,aAAa,CAAC,EAAE;IAC1B,IAAIA,aAAa,GAAGI,aAAa,EAAE;MAC/B,OAAOA,aAAa,GAAGJ,aAAa;IACxC;IACAM,YAAY,GAAGb,cAAc,CAACQ,OAAO,CAAC,GAAGD,aAAa,GAAGC,OAAO,CAACM,SAAS,CAAC,CAAC;EAChF,CAAC,MAAM;IACH,MAAMC,SAAS,GAAGJ,aAAa,GAAGH,OAAO,CAACM,SAAS,CAAC,CAAC;IACrD,MAAME,YAAY,GAAGhB,cAAc,CAACQ,OAAO,CAAC,GAAGO,SAAS,GAAGd,cAAc,CAACK,QAAQ,CAAC;IACnFO,YAAY,GAAGI,IAAI,CAACC,GAAG,CAACH,SAAS,EAAEC,YAAY,CAAC;EACpD;EACA,OAAO,EAAE,GAAGH,YAAY;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}