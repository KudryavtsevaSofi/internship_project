{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/columns_resizing_reordering/m_columns_resizing_reordering.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { fx } from \"../../../../common/core/animation\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport { end as dragEventEnd, move as dragEventMove, start as dragEventStart } from \"../../../../common/core/events/drag\";\nimport pointerEvents from \"../../../../common/core/events/pointer\";\nimport { addNamespace, eventData as getEventData, isTouchEvent } from \"../../../../common/core/events/utils/index\";\nimport domAdapter from \"../../../../core/dom_adapter\";\nimport $ from \"../../../../core/renderer\";\nimport Callbacks from \"../../../../core/utils/callbacks\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getBoundingRect } from \"../../../../core/utils/position\";\nimport { getHeight, getWidth, setHeight, setWidth } from \"../../../../core/utils/size\";\nimport { isDefined, isObject, isString } from \"../../../../core/utils/type\";\nimport swatchContainer from \"../../../../ui/widget/swatch_container\";\nimport modules from \"../m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nimport { CLASSES } from \"./const\";\nconst COLUMNS_SEPARATOR_CLASS = \"columns-separator\";\nconst COLUMNS_SEPARATOR_TRANSPARENT = \"columns-separator-transparent\";\nconst DRAGGING_HEADER_CLASS = \"drag-header\";\nconst CELL_CONTENT_CLASS = \"text-content\";\nconst HEADERS_DRAG_ACTION_CLASS = \"drag-action\";\nconst TRACKER_CLASS = \"tracker\";\nconst HEADERS_DROP_HIGHLIGHT_CLASS = \"drop-highlight\";\nconst BLOCK_SEPARATOR_CLASS = \"dx-block-separator\";\nconst HEADER_ROW_CLASS = \"dx-header-row\";\nconst WIDGET_CLASS = \"dx-widget\";\nconst DRAGGING_COMMAND_CELL_CLASS = \"dx-drag-command-cell\";\nconst MODULE_NAMESPACE = \"dxDataGridResizingReordering\";\nconst COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH = 10;\nconst DRAGGING_DELTA = 5;\nconst allowResizing = function (that) {\n  return that.option(\"allowColumnResizing\") || that.getController(\"columns\").isColumnOptionUsed(\"allowResizing\");\n};\nconst allowReordering = function (that) {\n  return that.option(\"allowColumnReordering\") || that.getController(\"columns\").isColumnOptionUsed(\"allowReordering\");\n};\nexport class TrackerView extends modules.View {\n  init() {\n    super.init();\n    this._tablePositionController = this.getController(\"tablePosition\");\n    this._subscribeToCallback();\n  }\n  dispose() {\n    this._unsubscribeFromCallback();\n    super.dispose();\n  }\n  optionChanged(args) {\n    if (\"allowColumnResizing\" === args.name) {\n      this._unsubscribeFromCallback();\n      if (args.value) {\n        this._subscribeToCallback();\n        this._invalidate();\n      }\n    }\n    super.optionChanged(args);\n  }\n  _renderCore() {\n    const deferred = super._renderCore();\n    this.element().addClass(this.addWidgetPrefix(\"tracker\"));\n    this.hide();\n    return deferred;\n  }\n  _unsubscribeFromCallback() {\n    if (this._positionChanged) {\n      this._tablePositionController.positionChanged.remove(this._positionChanged);\n    }\n  }\n  _subscribeToCallback() {\n    const that = this;\n    that._positionChanged = function (position) {\n      const $element = that.element();\n      if ($element && $element.hasClass(that.addWidgetPrefix(\"tracker\"))) {\n        $element.css({\n          top: position.top\n        });\n        setHeight($element, position.height);\n      }\n    };\n    this._tablePositionController.positionChanged.add(that._positionChanged);\n  }\n  isVisible() {\n    return allowResizing(this);\n  }\n  show() {\n    this.element().show();\n  }\n  hide() {\n    this.element() && this.element().hide();\n  }\n  setHeight(value) {\n    setHeight(this.element(), value);\n  }\n}\nexport class SeparatorView extends modules.View {\n  _renderSeparator() {}\n  _renderCore(options) {\n    const deferred = super._renderCore(options);\n    this._isShown = true;\n    this._renderSeparator();\n    this.hide();\n    return deferred;\n  }\n  show() {\n    this._isShown = true;\n  }\n  hide() {\n    this._isShown = false;\n  }\n  height(value) {\n    const $element = this.element();\n    if ($element) {\n      if (isDefined(value)) {\n        setHeight($element, value);\n      } else {\n        return getHeight($element);\n      }\n    }\n  }\n  width(value) {\n    const $element = this.element();\n    if ($element) {\n      if (isDefined(value)) {\n        setWidth($element, value);\n      } else {\n        return getWidth($element);\n      }\n    }\n  }\n}\nexport class ColumnsSeparatorView extends SeparatorView {\n  init() {\n    super.init();\n    this._tablePositionController = this.getController(\"tablePosition\");\n    this._init();\n  }\n  dispose() {\n    this._unsubscribeFromCallback();\n    super.dispose();\n  }\n  optionChanged(args) {\n    if (\"allowColumnResizing\" === args.name) {\n      if (args.value) {\n        this._init();\n        this._invalidate();\n        this.hide(true);\n      } else {\n        this._unsubscribeFromCallback();\n        this._isTransparent = allowResizing(this);\n        this.hide(true);\n      }\n    }\n    super.optionChanged(args);\n  }\n  _renderSeparator() {\n    super._renderSeparator();\n    const $element = this.element();\n    $element.addClass(this.addWidgetPrefix(\"columns-separator\"));\n  }\n  _subscribeToCallback() {\n    const that = this;\n    let $element;\n    that._positionChanged = function (position) {\n      $element = that.element();\n      if ($element) {\n        $element.css({\n          top: position.top\n        });\n        setHeight($element, position.height);\n      }\n    };\n    that._tablePositionController.positionChanged.add(that._positionChanged);\n  }\n  _unsubscribeFromCallback() {\n    this._positionChanged && this._tablePositionController.positionChanged.remove(this._positionChanged);\n  }\n  _init() {\n    this._isTransparent = allowResizing(this);\n    if (this.isVisible()) {\n      this._subscribeToCallback();\n    }\n  }\n  isVisible() {\n    return this.option(\"showColumnHeaders\") && (allowReordering(this) || allowResizing(this));\n  }\n  show() {\n    const that = this;\n    const $element = this.element();\n    if ($element && !that._isShown) {\n      if (that._isTransparent) {\n        $element.removeClass(that.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT));\n      } else {\n        $element.show();\n      }\n    }\n    super.show();\n  }\n  hide(force) {\n    const $element = this.element();\n    const columnsSeparatorTransparent = this.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT);\n    if ($element && (this._isShown || force)) {\n      if (this._isTransparent) {\n        $element.addClass(columnsSeparatorTransparent);\n        $element.css(\"left\", \"\");\n        $element.show();\n      } else {\n        if ($element.hasClass(columnsSeparatorTransparent)) {\n          $element.removeClass(columnsSeparatorTransparent);\n        }\n        $element.hide();\n      }\n    }\n    super.hide();\n  }\n  moveByX(outerX) {\n    const $element = this.element();\n    if ($element) {\n      $element.css(\"left\", null === outerX ? 0 : outerX - this._parentElement().offset().left);\n    }\n  }\n  changeCursor(cursorName) {\n    cursorName = isDefined(cursorName) ? cursorName : \"\";\n    const $element = this.element();\n    if ($element) {\n      $element.css(\"cursor\", cursorName);\n    }\n  }\n}\nexport class BlockSeparatorView extends SeparatorView {\n  init() {\n    super.init();\n    const dataController = this.getController(\"data\");\n    dataController.loadingChanged.add(isLoading => {\n      if (!isLoading) {\n        this.hide();\n      }\n    });\n  }\n  _renderSeparator() {\n    super._renderSeparator();\n    this.element().addClass(\"dx-block-separator\").html(\"&nbsp;\");\n  }\n  hide() {\n    const that = this;\n    const $parent = this._parentElement();\n    const $element = this.element();\n    if ($element && this._isShown) {\n      $element.css(\"display\", \"none\");\n    }\n    if ($parent && !$parent.children(\".dx-block-separator\").length) {\n      $parent.prepend(that.element());\n    }\n    super.hide();\n  }\n  isVisible() {\n    const groupPanelOptions = this.option(\"groupPanel\");\n    const columnChooserOptions = this.option(\"columnChooser\");\n    return groupPanelOptions && groupPanelOptions.visible || columnChooserOptions && columnChooserOptions.enabled;\n  }\n  show(targetLocation) {\n    const $element = this.element();\n    if ($element && !this._isShown) {\n      switch (targetLocation) {\n        case \"group\":\n          this.element().css(\"display\", \"block\");\n          break;\n        case \"columnChooser\":\n          !function (toOptions) {\n            fx.stop($element, true);\n            fx.animate($element, {\n              type: \"slide\",\n              from: {\n                width: 0,\n                display: toOptions.display\n              },\n              to: toOptions,\n              duration: 300,\n              easing: \"swing\"\n            });\n          }({\n            width: \"100%\",\n            display: \"block\"\n          });\n          break;\n        default:\n          $element.css(\"display\", \"\");\n      }\n    }\n    super.show();\n  }\n}\nexport class DraggingHeaderView extends modules.View {\n  init() {\n    super.init();\n    const dataController = this.getController(\"data\");\n    this._controller = this.getController(\"draggingHeader\");\n    this._columnsResizerViewController = this.getController(\"columnsResizer\");\n    this._columnsController = this.getController(\"columns\");\n    this._isDragging = false;\n    dataController.loadingChanged.add(isLoading => {\n      const element = this.element();\n      if (!isLoading && element) {\n        element.hide();\n      }\n    });\n  }\n  isDragging() {\n    return this._isDragging;\n  }\n  _getDraggingPanelByPos(pos) {\n    let result;\n    each(this._dragOptions.draggingPanels, (index, draggingPanel) => {\n      if (draggingPanel) {\n        const boundingRect = draggingPanel.getBoundingRect();\n        if (boundingRect && (void 0 === boundingRect.bottom || pos.y < boundingRect.bottom) && (void 0 === boundingRect.top || pos.y > boundingRect.top) && (void 0 === boundingRect.left || pos.x > boundingRect.left) && (void 0 === boundingRect.right || pos.x < boundingRect.right)) {\n          result = draggingPanel;\n          return false;\n        }\n      }\n      return;\n    });\n    return result;\n  }\n  _renderCore() {\n    this.element().addClass(`${this.addWidgetPrefix(\"drag-header\")} ${this.addWidgetPrefix(\"text-content\")} dx-widget`).hide();\n  }\n  _resetTargetColumnOptions() {\n    const params = this._dropOptions;\n    params.targetColumnIndex = -1;\n    delete params.targetColumnElement;\n    delete params.isLast;\n    delete params.posX;\n    delete params.posY;\n  }\n  _getVisibleIndexObject(rowIndex, visibleIndex) {\n    if (isDefined(rowIndex)) {\n      return {\n        columnIndex: visibleIndex,\n        rowIndex: rowIndex\n      };\n    }\n    return visibleIndex;\n  }\n  dispose() {\n    const element = this.element();\n    this._dragOptions = null;\n    element && element.parent().find(`.${this.addWidgetPrefix(\"drag-header\")}`).remove();\n  }\n  isVisible() {\n    const commonColumnSettings = this._columnsController.getCommonSettings();\n    return this.option(\"showColumnHeaders\") && (allowReordering(this) || commonColumnSettings.allowGrouping || commonColumnSettings.allowHiding);\n  }\n  dragHeader(options) {\n    const {\n      columnElement: columnElement\n    } = options;\n    const isCommandColumn = !!options.sourceColumn.type;\n    this._isDragging = true;\n    this._dragOptions = options;\n    this._dropOptions = {\n      sourceIndex: options.index,\n      sourceColumnIndex: this._getVisibleIndexObject(options.rowIndex, options.columnIndex),\n      sourceColumnElement: options.columnElement,\n      sourceLocation: options.sourceLocation\n    };\n    const document = domAdapter.getDocument();\n    this._onSelectStart = document.onselectstart;\n    document.onselectstart = function () {\n      return false;\n    };\n    this._controller.drag(this._dropOptions);\n    this.element().css({\n      textAlign: columnElement && columnElement.css(\"textAlign\"),\n      height: columnElement && (isCommandColumn && columnElement.get(0).clientHeight || getHeight(columnElement)),\n      width: columnElement && (isCommandColumn && columnElement.get(0).clientWidth || getWidth(columnElement)),\n      whiteSpace: columnElement && columnElement.css(\"whiteSpace\")\n    }).addClass(this.addWidgetPrefix(\"drag-action\")).toggleClass(\"dx-drag-command-cell\", isCommandColumn).text(isCommandColumn ? \"\" : options.sourceColumn.caption);\n    this.element().appendTo(swatchContainer.getSwatchContainer(columnElement));\n  }\n  moveHeader(args) {\n    const e = args.event;\n    const {\n      that: that\n    } = e.data;\n    const eventData = getEventData(e);\n    const isResizing = that._columnsResizerViewController ? that._columnsResizerViewController.isResizing() : false;\n    const dragOptions = that._dragOptions;\n    if (that._isDragging && !isResizing) {\n      const $element = that.element();\n      const moveDeltaX = Math.abs(eventData.x - dragOptions.columnElement.offset().left - dragOptions.deltaX);\n      const moveDeltaY = Math.abs(eventData.y - dragOptions.columnElement.offset().top - dragOptions.deltaY);\n      if ($element.is(\":visible\") || moveDeltaX > 5 || moveDeltaY > 5) {\n        $element.show();\n        const newLeft = eventData.x - dragOptions.deltaX;\n        const newTop = eventData.y - dragOptions.deltaY;\n        $element.css({\n          left: newLeft,\n          top: newTop\n        });\n        that.dockHeader(eventData);\n      }\n      e.preventDefault();\n    }\n  }\n  dockHeader(eventData) {\n    const that = this;\n    const targetDraggingPanel = that._getDraggingPanelByPos(eventData);\n    const controller = that._controller;\n    const params = that._dropOptions;\n    const dragOptions = that._dragOptions;\n    if (targetDraggingPanel) {\n      const rtlEnabled = that.option(\"rtlEnabled\");\n      const isVerticalOrientation = \"columnChooser\" === targetDraggingPanel.getName();\n      const axisName = isVerticalOrientation ? \"y\" : \"x\";\n      const targetLocation = targetDraggingPanel.getName();\n      const rowIndex = \"headers\" === targetLocation ? dragOptions.rowIndex : void 0;\n      const {\n        sourceColumn: sourceColumn\n      } = dragOptions;\n      const columnElements = targetDraggingPanel.getColumnElements(rowIndex, null === sourceColumn || void 0 === sourceColumn ? void 0 : sourceColumn.ownerBand) || [];\n      const pointsByTarget = dragOptions.pointsByTarget = dragOptions.pointsByTarget || {};\n      const pointsByColumns = \"columnChooser\" === targetLocation ? [] : pointsByTarget[targetLocation] || controller._generatePointsByColumns(extend({}, dragOptions, {\n        targetDraggingPanel: targetDraggingPanel,\n        columns: targetDraggingPanel.getColumns(rowIndex),\n        columnElements: columnElements,\n        isVerticalOrientation: isVerticalOrientation,\n        startColumnIndex: \"headers\" === targetLocation ? $(columnElements[0]).index() : 0\n      }));\n      pointsByTarget[targetLocation] = pointsByColumns;\n      params.targetLocation = targetLocation;\n      if (pointsByColumns.length > 0) {\n        for (let i = 0; i < pointsByColumns.length; i++) {\n          const centerPosition = pointsByColumns[i + 1] && (pointsByColumns[i][axisName] + pointsByColumns[i + 1][axisName]) / 2;\n          if (void 0 === centerPosition || (rtlEnabled && \"x\" === axisName ? eventData[axisName] > centerPosition : eventData[axisName] < centerPosition)) {\n            params.targetColumnIndex = that._getVisibleIndexObject(rowIndex, pointsByColumns[i].columnIndex);\n            if (columnElements[i]) {\n              params.targetColumnElement = columnElements.eq(i);\n              params.isLast = false;\n            } else {\n              params.targetColumnElement = columnElements.last();\n              params.isLast = true;\n            }\n            params.posX = pointsByColumns[i].x;\n            params.posY = pointsByColumns[i].y;\n            controller.dock(params);\n            break;\n          }\n        }\n      } else {\n        that._resetTargetColumnOptions();\n        controller.dock(params);\n      }\n    }\n  }\n  dropHeader(args) {\n    const e = args.event;\n    const {\n      that: that\n    } = e.data;\n    const controller = that._controller;\n    that.element().hide();\n    if (controller && that._isDragging) {\n      controller.drop(that._dropOptions);\n    }\n    that.element().appendTo(that._parentElement());\n    that._dragOptions = null;\n    that._dropOptions = null;\n    that._isDragging = false;\n    domAdapter.getDocument().onselectstart = that._onSelectStart || null;\n  }\n}\nconst isNextColumnResizingMode = function (that) {\n  return \"widget\" !== that.option(\"columnResizingMode\");\n};\nexport class ColumnsResizerViewController extends modules.ViewController {\n  init() {\n    this._subscribesToCallbacks = [];\n    if (allowResizing(this)) {\n      this._init();\n    }\n  }\n  dispose() {\n    this._unsubscribes();\n    super.dispose();\n  }\n  optionChanged(args) {\n    super.optionChanged(args);\n    if (\"allowColumnResizing\" === args.name) {\n      if (args.value) {\n        this._init();\n        this._subscribeToEvents();\n      } else {\n        this._unsubscribes();\n      }\n    }\n  }\n  _isHeadersRowArea(posY) {\n    if (this._columnHeadersView) {\n      const element = this._columnHeadersView.element();\n      if (element) {\n        const offsetTop = element.offset().top;\n        const headersRowHeight = this._columnHeadersView.getHeadersRowHeight();\n        return posY >= offsetTop && posY <= offsetTop + headersRowHeight;\n      }\n    }\n    return false;\n  }\n  _isRtlParentStyle() {\n    var _this$_$parentContain;\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    return rtlEnabled && \"rtl\" === (null === (_this$_$parentContain = this._$parentContainer) || void 0 === _this$_$parentContain ? void 0 : _this$_$parentContain.parent().css(\"direction\"));\n  }\n  _correctColumnIndexForPoint(point, correctionValue, columns) {\n    point.columnIndex -= correctionValue;\n  }\n  _pointCreated(point, cellsLength, columns) {\n    const isNextColumnMode = isNextColumnResizingMode(this);\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    const isRtlParentStyle = this._isRtlParentStyle();\n    const firstPointColumnIndex = !isNextColumnMode && rtlEnabled && !isRtlParentStyle ? 0 : 1;\n    if (point.index >= firstPointColumnIndex && point.index < cellsLength + (!isNextColumnMode && (!rtlEnabled || isRtlParentStyle) ? 1 : 0)) {\n      this._correctColumnIndexForPoint(point, firstPointColumnIndex, columns);\n      const currentColumn = columns[point.columnIndex] || {};\n      const nextColumn = columns[point.columnIndex + 1] || {};\n      return !(isNextColumnMode ? currentColumn.allowResizing && nextColumn.allowResizing : currentColumn.allowResizing);\n    }\n    return true;\n  }\n  _getTargetPoint(pointsByColumns, currentX, deltaX) {\n    if (pointsByColumns) {\n      for (let i = 0; i < pointsByColumns.length; i++) {\n        if (pointsByColumns[i].x === pointsByColumns[0].x && pointsByColumns[i + 1] && pointsByColumns[i].x === pointsByColumns[i + 1].x) {\n          continue;\n        }\n        if (pointsByColumns[i].x - deltaX <= currentX && currentX <= pointsByColumns[i].x + deltaX) {\n          return pointsByColumns[i];\n        }\n      }\n    }\n    return null;\n  }\n  getSeparatorOffsetX($cell) {\n    var _$cell$offset;\n    const isNextColumnMode = isNextColumnResizingMode(this);\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    const isRtlParentStyle = this._isRtlParentStyle();\n    const outerWidth = $cell[0].getBoundingClientRect().width;\n    const cellOffset = (null === (_$cell$offset = $cell.offset()) || void 0 === _$cell$offset ? void 0 : _$cell$offset.left) ?? 0;\n    return cellOffset + ((isNextColumnMode || isRtlParentStyle) && rtlEnabled ? 0 : outerWidth);\n  }\n  _moveSeparator(args) {\n    var _that$_draggingHeader;\n    const e = args.event;\n    const that = e.data;\n    const columnsSeparatorWidth = that._columnsSeparatorView.width();\n    const isNextColumnMode = isNextColumnResizingMode(that);\n    const deltaX = columnsSeparatorWidth / 2;\n    const parentOffset = that._$parentContainer.offset();\n    const parentOffsetLeft = parentOffset.left;\n    const eventData = getEventData(e);\n    const isRtlParentStyle = this._isRtlParentStyle();\n    const isDragging = null === (_that$_draggingHeader = that._draggingHeaderView) || void 0 === _that$_draggingHeader ? void 0 : _that$_draggingHeader.isDragging();\n    if (that._isResizing && that._resizingInfo) {\n      if ((parentOffsetLeft <= eventData.x || !isNextColumnMode && isRtlParentStyle) && (!isNextColumnMode || eventData.x <= parentOffsetLeft + getWidth(that._$parentContainer))) {\n        if (that._updateColumnsWidthIfNeeded(eventData.x)) {\n          const $cell = that._columnHeadersView.getColumnElements().eq(that._resizingInfo.currentColumnIndex);\n          if ($cell.length) {\n            const offsetX = this.getSeparatorOffsetX($cell);\n            that._columnsSeparatorView.moveByX(offsetX);\n            that._tablePositionController.update(that._targetPoint.y);\n            e.preventDefault();\n          }\n        }\n      }\n    } else if (!isDragging) {\n      if (that._isHeadersRowArea(eventData.y)) {\n        if (that._previousParentOffset) {\n          if (that._previousParentOffset.left !== parentOffset.left || that._previousParentOffset.top !== parentOffset.top) {\n            that.pointsByColumns(null);\n          }\n        }\n        that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData.x, columnsSeparatorWidth);\n        that._previousParentOffset = parentOffset;\n        that._isReadyResizing = false;\n        if (that._targetPoint) {\n          that._columnsSeparatorView.changeCursor(\"col-resize\");\n          that._columnsSeparatorView.moveByX(that._targetPoint.x - deltaX);\n          that._tablePositionController.update(that._targetPoint.y);\n          that._isReadyResizing = true;\n          e.preventDefault();\n        } else {\n          that._columnsSeparatorView.changeCursor();\n          that._columnsSeparatorView.moveByX(null);\n        }\n      } else {\n        that.pointsByColumns(null);\n        that._isReadyResizing = false;\n        that._columnsSeparatorView.changeCursor();\n        that._columnsSeparatorView.moveByX(null);\n      }\n    }\n  }\n  _endResizing(args) {\n    const e = args.event;\n    const that = e.data;\n    if (that._isResizing) {\n      that.pointsByColumns(null);\n      that._resizingInfo = null;\n      that._columnsSeparatorView.hide();\n      that._columnsSeparatorView.changeCursor();\n      that._trackerView.hide();\n      that._isReadyResizing = false;\n      that._isResizing = false;\n    }\n  }\n  _getNextColumnIndex(currentColumnIndex) {\n    return currentColumnIndex + 1;\n  }\n  _setupResizingInfo(posX) {\n    const currentColumnIndex = this._targetPoint.columnIndex;\n    const nextColumnIndex = this._getNextColumnIndex(currentColumnIndex);\n    const $currentHeader = this._columnHeadersView.getHeaderElement(currentColumnIndex);\n    const $nextHeader = this._columnHeadersView.getHeaderElement(nextColumnIndex);\n    this._resizingInfo = {\n      startPosX: posX,\n      currentColumnIndex: currentColumnIndex,\n      currentColumnWidth: null !== $currentHeader && void 0 !== $currentHeader && $currentHeader.length ? getBoundingRect($currentHeader[0]).width : 0,\n      nextColumnIndex: nextColumnIndex,\n      nextColumnWidth: null !== $nextHeader && void 0 !== $nextHeader && $nextHeader.length ? getBoundingRect($nextHeader[0]).width : 0,\n      needToInvertResizing: this._needToInvertResizing($currentHeader)\n    };\n  }\n  _startResizing(args) {\n    const e = args.event;\n    const that = e.data;\n    const eventData = getEventData(e);\n    if (isTouchEvent(e)) {\n      if (that._isHeadersRowArea(eventData.y)) {\n        that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData.x, 10);\n        if (that._targetPoint) {\n          that._columnsSeparatorView.moveByX(that._targetPoint.x - that._columnsSeparatorView.width() / 2);\n          that._isReadyResizing = true;\n        }\n      } else {\n        that._isReadyResizing = false;\n      }\n    }\n    if (that._isReadyResizing) {\n      that._setupResizingInfo(eventData.x);\n      that._isResizing = true;\n      that._tablePositionController.update(that._targetPoint.y);\n      that._columnsSeparatorView.show();\n      that._trackerView.show();\n      const scrollable = that.component.getScrollable();\n      if (scrollable && that._isRtlParentStyle()) {\n        that._scrollRight = getWidth(scrollable.$content()) - getWidth(scrollable.container()) - scrollable.scrollLeft();\n      }\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (this.isResizing()) {\n      this._editorFactoryController.loseFocus();\n    }\n  }\n  _generateColumnsTopYIndex() {\n    let needToCheckPrevPoint = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;\n    const that = this;\n    const rowCount = that._columnsController.getRowCount();\n    const topYMap = {};\n    const pointCreated = point => {\n      const x = Math.ceil(point.x);\n      if (!topYMap[x]) {\n        topYMap[x] = point.y;\n      }\n      return true;\n    };\n    for (let rowIndex = 0; rowIndex < rowCount - 1; rowIndex++) {\n      const cells = that._columnHeadersView.getColumnElements(rowIndex);\n      if (cells && cells.length > 0) {\n        gridCoreUtils.getPointsByColumns(cells, pointCreated, false, 0, needToCheckPrevPoint);\n      }\n    }\n    return topYMap;\n  }\n  _generatePointsByColumns() {\n    let needToCheckPrevPoint = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;\n    const that = this;\n    const topYMap = that._generateColumnsTopYIndex(needToCheckPrevPoint);\n    const columns = that._columnsController ? that._columnsController.getVisibleColumns() : [];\n    const cells = that._columnHeadersView.getColumnElements();\n    that._pointsByColumns = [];\n    if (cells && cells.length > 0) {\n      that._pointsByColumns = gridCoreUtils.getPointsByColumns(cells, point => that._pointCreated((point => {\n        const x = Math.ceil(point.x);\n        if (topYMap[x]) {\n          point.y = topYMap[x];\n        }\n        return point;\n      })(point), cells.length, columns), false, 0, needToCheckPrevPoint);\n    }\n  }\n  _needToInvertResizing($cell) {\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    const isRtlParentStyle = this._isRtlParentStyle();\n    const isNextColumnMode = isNextColumnResizingMode(this);\n    return (isNextColumnMode || isRtlParentStyle) && rtlEnabled;\n  }\n  _unsubscribeFromEvents() {\n    this._moveSeparatorHandler && eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.move, MODULE_NAMESPACE), this._moveSeparatorHandler);\n    this._startResizingHandler && eventsEngine.off(this._$parentContainer, addNamespace(pointerEvents.down, MODULE_NAMESPACE), this._startResizingHandler);\n    if (this._endResizingHandler) {\n      eventsEngine.off(this._columnsSeparatorView.element(), addNamespace(pointerEvents.up, MODULE_NAMESPACE), this._endResizingHandler);\n      eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.up, MODULE_NAMESPACE), this._endResizingHandler);\n    }\n  }\n  _subscribeToEvents() {\n    this._moveSeparatorHandler = this.createAction(this._moveSeparator);\n    this._startResizingHandler = this.createAction(this._startResizing);\n    this._endResizingHandler = this.createAction(this._endResizing);\n    eventsEngine.on(domAdapter.getDocument(), addNamespace(pointerEvents.move, MODULE_NAMESPACE), this, this._moveSeparatorHandler);\n    eventsEngine.on(this._$parentContainer, addNamespace(pointerEvents.down, MODULE_NAMESPACE), this, this._startResizingHandler);\n    eventsEngine.on(this._columnsSeparatorView.element(), addNamespace(pointerEvents.up, MODULE_NAMESPACE), this, this._endResizingHandler);\n    eventsEngine.on(domAdapter.getDocument(), addNamespace(pointerEvents.up, MODULE_NAMESPACE), this, this._endResizingHandler);\n  }\n  _updateColumnsWidthIfNeeded(posX) {\n    let deltaX;\n    let needUpdate = false;\n    let contentWidth = this._rowsView.contentWidth();\n    const resizingInfo = this._resizingInfo;\n    const columnsController = this._columnsController;\n    const visibleColumns = columnsController.getVisibleColumns();\n    const columnsSeparatorWidth = this._columnsSeparatorView.width();\n    const isNextColumnMode = isNextColumnResizingMode(this);\n    const adaptColumnWidthByRatio = isNextColumnMode && this.option(\"adaptColumnWidthByRatio\") && !this.option(\"columnAutoWidth\");\n    const isRtlParentStyle = this._isRtlParentStyle();\n    const column = visibleColumns[resizingInfo.currentColumnIndex];\n    const nextColumn = visibleColumns[resizingInfo.nextColumnIndex];\n    const {\n      needToInvertResizing: needToInvertResizing\n    } = resizingInfo;\n    function isPercentWidth(width) {\n      return isString(width) && width.endsWith(\"%\");\n    }\n    function setColumnWidth(column, columnWidth, contentWidth, adaptColumnWidthByRatio) {\n      if (column) {\n        const oldColumnWidth = column.width;\n        if (oldColumnWidth) {\n          adaptColumnWidthByRatio = isPercentWidth(oldColumnWidth);\n        }\n        if (adaptColumnWidthByRatio) {\n          columnsController.columnOption(column.index, \"visibleWidth\", columnWidth);\n          columnsController.columnOption(column.index, \"width\", `${(columnWidth / contentWidth * 100).toFixed(3)}%`);\n        } else {\n          columnsController.columnOption(column.index, \"visibleWidth\", null);\n          columnsController.columnOption(column.index, \"width\", columnWidth);\n        }\n      }\n    }\n    deltaX = posX - resizingInfo.startPosX;\n    if (needToInvertResizing) {\n      deltaX = -deltaX;\n    }\n    let {\n      cellWidth: cellWidth,\n      nextCellWidth: nextCellWidth\n    } = function (delta) {\n      let nextMinWidth;\n      let nextCellWidth;\n      let needCorrectionNextCellWidth;\n      const cellWidth = resizingInfo.currentColumnWidth + delta;\n      const minWidth = column && column.minWidth || columnsSeparatorWidth;\n      const result = {};\n      if (cellWidth >= minWidth) {\n        result.cellWidth = cellWidth;\n      } else {\n        result.cellWidth = minWidth;\n        needCorrectionNextCellWidth = true;\n      }\n      if (isNextColumnMode) {\n        nextCellWidth = resizingInfo.nextColumnWidth - delta;\n        nextMinWidth = nextColumn && nextColumn.minWidth || columnsSeparatorWidth;\n        if (nextCellWidth >= nextMinWidth) {\n          if (needCorrectionNextCellWidth) {\n            result.nextCellWidth = resizingInfo.nextColumnWidth - (delta + minWidth - cellWidth);\n          } else {\n            result.nextCellWidth = nextCellWidth;\n          }\n        } else {\n          result.nextCellWidth = nextMinWidth;\n          result.cellWidth = resizingInfo.currentColumnWidth + (delta - nextMinWidth + nextCellWidth);\n        }\n      }\n      return result;\n    }(deltaX);\n    needUpdate = column.width !== cellWidth;\n    if (needUpdate) {\n      columnsController.beginUpdate();\n      cellWidth = Math.floor(cellWidth);\n      contentWidth = function (contentWidth, visibleColumns) {\n        const allColumnsHaveWidth = visibleColumns.every(column => column.width);\n        if (allColumnsHaveWidth) {\n          const totalPercent = visibleColumns.reduce((sum, column) => {\n            if (isPercentWidth(column.width)) {\n              sum += parseFloat(column.width);\n            }\n            return sum;\n          }, 0);\n          if (totalPercent > 100) {\n            contentWidth = contentWidth / totalPercent * 100;\n          }\n        }\n        return contentWidth;\n      }(contentWidth, visibleColumns);\n      setColumnWidth(column, cellWidth, contentWidth, adaptColumnWidthByRatio);\n      if (isNextColumnMode) {\n        nextCellWidth = Math.floor(nextCellWidth);\n        setColumnWidth(nextColumn, nextCellWidth, contentWidth, adaptColumnWidthByRatio);\n      } else {\n        const columnWidths = this._columnHeadersView.getColumnWidths();\n        columnWidths[resizingInfo.currentColumnIndex] = cellWidth;\n        const hasScroll = columnWidths.reduce((totalWidth, width) => totalWidth + width, 0) > this._rowsView.contentWidth();\n        if (!hasScroll) {\n          const lastColumnIndex = gridCoreUtils.getLastResizableColumnIndex(visibleColumns);\n          if (lastColumnIndex >= 0) {\n            columnsController.columnOption(visibleColumns[lastColumnIndex].index, \"visibleWidth\", \"auto\");\n          }\n        }\n        for (let i = 0; i < columnWidths.length; i++) {\n          if (visibleColumns[i] && visibleColumns[i] !== column && void 0 === visibleColumns[i].width) {\n            columnsController.columnOption(visibleColumns[i].index, \"width\", columnWidths[i]);\n          }\n        }\n      }\n      columnsController.endUpdate();\n      if (!isNextColumnMode) {\n        this.component.updateDimensions();\n        const scrollable = this.component.getScrollable();\n        if (scrollable && isRtlParentStyle) {\n          const left = getWidth(scrollable.$content()) - getWidth(scrollable.container()) - this._scrollRight;\n          scrollable.scrollTo({\n            left: left\n          });\n        }\n      }\n    }\n    return needUpdate;\n  }\n  _subscribeToCallback(callback, handler) {\n    callback.add(handler);\n    this._subscribesToCallbacks.push({\n      callback: callback,\n      handler: handler\n    });\n  }\n  _unsubscribeFromCallbacks() {\n    for (let i = 0; i < this._subscribesToCallbacks.length; i++) {\n      const subscribe = this._subscribesToCallbacks[i];\n      subscribe.callback.remove(subscribe.handler);\n    }\n    this._subscribesToCallbacks = [];\n  }\n  _unsubscribes() {\n    this._unsubscribeFromEvents();\n    this._unsubscribeFromCallbacks();\n  }\n  _init() {\n    const generatePointsByColumnsHandler = () => {\n      if (!this._isResizing) {\n        this.pointsByColumns(null);\n      }\n    };\n    const generatePointsByColumnsScrollHandler = offset => {\n      if (this._scrollLeft !== offset.left) {\n        this._scrollLeft = offset.left;\n        this.pointsByColumns(null);\n      }\n    };\n    this._columnsSeparatorView = this.getView(\"columnsSeparatorView\");\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._trackerView = this.getView(\"trackerView\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._columnsController = this.getController(\"columns\");\n    this._tablePositionController = this.getController(\"tablePosition\");\n    this._editorFactoryController = this.getController(\"editorFactory\");\n    this._draggingHeaderView = this.component.getView(\"draggingHeaderView\");\n    this._$parentContainer = this.component.$element();\n    this._subscribeToCallback(this._columnHeadersView.renderCompleted, generatePointsByColumnsHandler);\n    this._subscribeToCallback(this._columnHeadersView.resizeCompleted, generatePointsByColumnsHandler);\n    this._subscribeToCallback(this._columnsSeparatorView.renderCompleted, () => {\n      this._unsubscribeFromEvents();\n      this._subscribeToEvents();\n    });\n    this._subscribeToCallback(this._rowsView.renderCompleted, () => {\n      this._rowsView.scrollChanged.remove(generatePointsByColumnsScrollHandler);\n      this._rowsView.scrollChanged.add(generatePointsByColumnsScrollHandler);\n    });\n    let previousScrollbarVisibility = 0 !== this._rowsView.getScrollbarWidth();\n    let previousTableHeight = 0;\n    this._subscribeToCallback(this._tablePositionController.positionChanged, e => {\n      if (this._isResizing && !this._rowsView.isResizing) {\n        const scrollbarVisibility = 0 !== this._rowsView.getScrollbarWidth();\n        if (previousScrollbarVisibility !== scrollbarVisibility || previousTableHeight && previousTableHeight !== e.height) {\n          previousScrollbarVisibility = scrollbarVisibility;\n          previousTableHeight = e.height;\n          this.component.updateDimensions();\n        } else {\n          this._rowsView.updateFreeSpaceRowHeight();\n        }\n      }\n      previousTableHeight = e.height;\n    });\n  }\n  isResizing() {\n    return this._isResizing;\n  }\n  pointsByColumns(value) {\n    if (void 0 !== value) {\n      this._pointsByColumns = value;\n    } else {\n      if (!this._pointsByColumns) {\n        this._generatePointsByColumns();\n      }\n      return this._pointsByColumns;\n    }\n  }\n}\nexport class TablePositionViewController extends modules.ViewController {\n  constructor(component) {\n    super(component);\n    this.positionChanged = Callbacks();\n  }\n  init() {\n    super.init();\n    this._columnsResizerController = this.getController(\"columnsResizer\");\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._pagerView = this.getView(\"pagerView\");\n    this._rowsView.resizeCompleted.add(() => {\n      if (this.option(\"allowColumnResizing\")) {\n        const targetPoint = this._columnsResizerController._targetPoint;\n        this.update(targetPoint ? targetPoint.y : null);\n      }\n    });\n  }\n  update(top) {\n    const params = {};\n    const $element = this._columnHeadersView.element();\n    const offset = $element && $element.offset();\n    const offsetTop = offset && offset.top || 0;\n    const diffOffsetTop = isDefined(top) ? Math.abs(top - offsetTop) : 0;\n    const columnsHeadersHeight = this._columnHeadersView ? this._columnHeadersView.getHeight() : 0;\n    const scrollBarWidth = this._rowsView.getScrollbarWidth(true);\n    const rowsHeight = this._rowsView ? this._rowsView.height() - scrollBarWidth : 0;\n    const draggingHeaderView = this.component.getView(\"draggingHeaderView\");\n    params.height = columnsHeadersHeight;\n    const isDraggingOrResizing = this._columnsResizerController.isResizing() || draggingHeaderView.isDragging();\n    if (isDraggingOrResizing) {\n      params.height += rowsHeight - diffOffsetTop;\n    }\n    if (null !== top && $element && $element.length) {\n      params.top = $element[0].offsetTop + diffOffsetTop;\n    }\n    this.positionChanged.fire(params);\n  }\n}\nexport class DraggingHeaderViewController extends modules.ViewController {\n  init() {\n    super.init();\n    this._columnsController = this.getController(\"columns\");\n    this._tablePositionController = this.getController(\"tablePosition\");\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._columnsSeparatorView = this.getView(\"columnsSeparatorView\");\n    this._draggingHeaderView = this.getView(\"draggingHeaderView\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._blockSeparatorView = this.getView(\"blockSeparatorView\");\n    this._headerPanelView = this.getView(\"headerPanel\");\n    this._columnChooserView = this.getView(\"columnChooserView\");\n    const subscribeToEvents = () => {\n      if (this._draggingHeaderView) {\n        const draggingPanels = [this._columnChooserView, this._columnHeadersView, this._headerPanelView];\n        this._unsubscribeFromEvents(this._draggingHeaderView, draggingPanels);\n        this._subscribeToEvents(this._draggingHeaderView, draggingPanels);\n      }\n    };\n    this._columnHeadersView.renderCompleted.add(subscribeToEvents);\n    this._headerPanelView && this._headerPanelView.renderCompleted.add(subscribeToEvents);\n    this._columnChooserView && this._columnChooserView.renderCompleted.add(subscribeToEvents);\n  }\n  dispose() {\n    if (this._draggingHeaderView) {\n      this._unsubscribeFromEvents(this._draggingHeaderView, [this._columnChooserView, this._columnHeadersView, this._headerPanelView]);\n    }\n  }\n  _generatePointsByColumns(options) {\n    let needToCheckPrevPoint = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    this.isCustomGroupColumnPosition = this.checkIsCustomGroupColumnPosition(options);\n    const points = gridCoreUtils.getPointsByColumns(options.columnElements, point => this._pointCreated(point, options.columns, options.targetDraggingPanel.getName(), options.sourceColumn), options.isVerticalOrientation, options.startColumnIndex, needToCheckPrevPoint);\n    return points;\n  }\n  checkIsCustomGroupColumnPosition(options) {\n    let wasOnlyCommandColumns = true;\n    for (let i = 0; i < options.columns.length; i += 1) {\n      const col = options.columns[i];\n      if (\"expand\" === col.command && !wasOnlyCommandColumns) {\n        return true;\n      }\n      if (!col.command) {\n        wasOnlyCommandColumns = false;\n      }\n    }\n    return false;\n  }\n  _pointCreated(point, columns, location, sourceColumn) {\n    const targetColumn = columns[point.columnIndex];\n    const prevColumn = columns[point.columnIndex - 1];\n    const isColumnAfterExpandColumn = \"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command);\n    const isFirstExpandColumn = \"expand\" === (null === targetColumn || void 0 === targetColumn ? void 0 : targetColumn.command) && \"expand\" !== (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command);\n    const sourceColumnReorderingDisabled = sourceColumn && !sourceColumn.allowReordering;\n    const otherColumnsReorderingDisabled = !(null !== targetColumn && void 0 !== targetColumn && targetColumn.allowReordering) && !(null !== prevColumn && void 0 !== prevColumn && prevColumn.allowReordering);\n    switch (location) {\n      case \"columnChooser\":\n        return true;\n      case \"headers\":\n        if (sourceColumnReorderingDisabled) {\n          return true;\n        }\n        if (!isFirstExpandColumn) {\n          return isColumnAfterExpandColumn || otherColumnsReorderingDisabled;\n        }\n        if (this.isCustomGroupColumnPosition) {\n          return false;\n        }\n        while (\"expand\" === (null === (_columns$point$column = columns[point.columnIndex]) || void 0 === _columns$point$column ? void 0 : _columns$point$column.command)) {\n          var _columns$point$column;\n          point.columnIndex += 1;\n        }\n        return false;\n      default:\n        return 0 === columns.length;\n    }\n  }\n  _subscribeToEvents(draggingHeader, draggingPanels) {\n    const that = this;\n    each(draggingPanels, (_, draggingPanel) => {\n      if (draggingPanel) {\n        let columns;\n        const rowCount = draggingPanel.getRowCount ? draggingPanel.getRowCount() : 1;\n        const nameDraggingPanel = draggingPanel.getName();\n        const subscribeToEvents = function (index, columnElement) {\n          if (!columnElement) {\n            return;\n          }\n          const $columnElement = $(columnElement);\n          const column = columns[index];\n          if (column && draggingPanel.allowDragging(column)) {\n            $columnElement.addClass(that.addWidgetPrefix(\"drag-action\"));\n            eventsEngine.on($columnElement, addNamespace(dragEventStart, MODULE_NAMESPACE), that.createAction(args => {\n              const e = args.event;\n              const eventData = getEventData(e);\n              draggingHeader.dragHeader({\n                deltaX: eventData.x - $(e.currentTarget).offset().left,\n                deltaY: eventData.y - $(e.currentTarget).offset().top,\n                sourceColumn: column,\n                index: column.index,\n                columnIndex: index,\n                columnElement: $columnElement,\n                sourceLocation: nameDraggingPanel,\n                draggingPanels: draggingPanels,\n                rowIndex: that._columnsController.getRowIndex(column.index, true)\n              });\n            }));\n            eventsEngine.on($columnElement, addNamespace(dragEventMove, MODULE_NAMESPACE), {\n              that: draggingHeader\n            }, that.createAction(draggingHeader.moveHeader));\n            eventsEngine.on($columnElement, addNamespace(dragEventEnd, MODULE_NAMESPACE), {\n              that: draggingHeader\n            }, that.createAction(draggingHeader.dropHeader));\n          }\n        };\n        for (let i = 0; i < rowCount; i++) {\n          const columnElements = draggingPanel.getColumnElements(i) || [];\n          if (columnElements.length) {\n            columns = draggingPanel.getColumns(i) || [];\n            each(columnElements, subscribeToEvents);\n          }\n        }\n      }\n    });\n  }\n  _unsubscribeFromEvents(draggingHeader, draggingPanels) {\n    const that = this;\n    each(draggingPanels, (_, draggingPanel) => {\n      if (draggingPanel) {\n        const columnElements = draggingPanel.getColumnElements() || [];\n        each(columnElements, (index, columnElement) => {\n          const $columnElement = $(columnElement);\n          eventsEngine.off($columnElement, addNamespace(dragEventStart, MODULE_NAMESPACE));\n          eventsEngine.off($columnElement, addNamespace(dragEventMove, MODULE_NAMESPACE));\n          eventsEngine.off($columnElement, addNamespace(dragEventEnd, MODULE_NAMESPACE));\n          $columnElement.removeClass(that.addWidgetPrefix(\"drag-action\"));\n        });\n      }\n    });\n  }\n  _getSeparator(targetLocation) {\n    return \"headers\" === targetLocation ? this._columnsSeparatorView : this._blockSeparatorView;\n  }\n  hideSeparators(type) {\n    const blockSeparator = this._blockSeparatorView;\n    const columnsSeparator = this._columnsSeparatorView;\n    this._animationColumnIndex = void 0;\n    blockSeparator && blockSeparator.hide();\n    \"block\" !== type && columnsSeparator && columnsSeparator.hide();\n  }\n  allowDrop(parameters) {\n    return this._columnsController.allowMoveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation);\n  }\n  drag(parameters) {\n    const {\n      sourceIndex: sourceIndex\n    } = parameters;\n    const {\n      sourceLocation: sourceLocation\n    } = parameters;\n    const {\n      sourceColumnElement: sourceColumnElement\n    } = parameters;\n    const headersView = this._columnHeadersView;\n    const rowsView = this._rowsView;\n    if (sourceColumnElement) {\n      sourceColumnElement.addClass(this.addWidgetPrefix(CLASSES.draggableColumn));\n      if (\"headers\" === sourceLocation) {\n        headersView && headersView.toggleDraggableColumnClass(sourceIndex, true);\n        rowsView && rowsView.toggleDraggableColumnClass(sourceIndex, true);\n      }\n    }\n  }\n  dock(parameters) {\n    const that = this;\n    const targetColumnIndex = isObject(parameters.targetColumnIndex) ? parameters.targetColumnIndex.columnIndex : parameters.targetColumnIndex;\n    const {\n      sourceLocation: sourceLocation\n    } = parameters;\n    const {\n      targetLocation: targetLocation\n    } = parameters;\n    const separator = that._getSeparator(targetLocation);\n    const hasTargetVisibleIndex = targetColumnIndex >= 0;\n    that._columnHeadersView.element().find(\".dx-header-row\").toggleClass(that.addWidgetPrefix(\"drop-highlight\"), \"headers\" !== sourceLocation && \"headers\" === targetLocation && !hasTargetVisibleIndex);\n    if (separator) {\n      if (that.allowDrop(parameters) && hasTargetVisibleIndex) {\n        if (\"group\" === targetLocation || \"columnChooser\" === targetLocation) {\n          !function () {\n            if (that._animationColumnIndex !== targetColumnIndex) {\n              that.hideSeparators();\n              separator.element()[parameters.isLast ? \"insertAfter\" : \"insertBefore\"](parameters.targetColumnElement);\n              that._animationColumnIndex = targetColumnIndex;\n              separator.show(targetLocation);\n            }\n          }();\n        } else {\n          that.hideSeparators(\"block\");\n          that._tablePositionController.update(parameters.posY);\n          separator.moveByX(parameters.posX - separator.width());\n          separator.show();\n        }\n      } else {\n        that.hideSeparators();\n      }\n    }\n  }\n  drop(parameters) {\n    const {\n      sourceColumnElement: sourceColumnElement\n    } = parameters;\n    if (sourceColumnElement) {\n      sourceColumnElement.removeClass(this.addWidgetPrefix(CLASSES.draggableColumn));\n      this._columnHeadersView.toggleDraggableColumnClass(parameters.sourceIndex, false);\n      this._rowsView.toggleDraggableColumnClass(parameters.sourceIndex, false);\n      this._columnHeadersView.element().find(\".dx-header-row\").removeClass(this.addWidgetPrefix(\"drop-highlight\"));\n    }\n    if (this.allowDrop(parameters)) {\n      const separator = this._getSeparator(parameters.targetLocation);\n      if (separator) {\n        separator.hide();\n      }\n      this._columnsController.moveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation);\n    }\n  }\n}\nconst rowsView = Base => class extends Base {\n  _needUpdateRowHeight(itemCount) {\n    const wordWrapEnabled = this.option(\"wordWrapEnabled\");\n    const isResizing = this._columnsResizerController.isResizing();\n    return super._needUpdateRowHeight.apply(this, arguments) || itemCount > 0 && !!wordWrapEnabled && !!isResizing;\n  }\n};\nconst editorFactory = Base => class extends Base {\n  renderFocusOverlay() {\n    if (this._columnsResizerController.isResizing()) {\n      return;\n    }\n    return super.renderFocusOverlay.apply(this, arguments);\n  }\n};\nexport const columnsResizingReorderingModule = {\n  views: {\n    columnsSeparatorView: ColumnsSeparatorView,\n    blockSeparatorView: BlockSeparatorView,\n    draggingHeaderView: DraggingHeaderView,\n    trackerView: TrackerView\n  },\n  controllers: {\n    draggingHeader: DraggingHeaderViewController,\n    tablePosition: TablePositionViewController,\n    columnsResizer: ColumnsResizerViewController\n  },\n  extenders: {\n    views: {\n      rowsView: rowsView\n    },\n    controllers: {\n      editorFactory: editorFactory\n    }\n  }\n};","map":{"version":3,"names":["fx","eventsEngine","end","dragEventEnd","move","dragEventMove","start","dragEventStart","pointerEvents","addNamespace","eventData","getEventData","isTouchEvent","domAdapter","$","Callbacks","extend","each","getBoundingRect","getHeight","getWidth","setHeight","setWidth","isDefined","isObject","isString","swatchContainer","modules","gridCoreUtils","CLASSES","COLUMNS_SEPARATOR_CLASS","COLUMNS_SEPARATOR_TRANSPARENT","DRAGGING_HEADER_CLASS","CELL_CONTENT_CLASS","HEADERS_DRAG_ACTION_CLASS","TRACKER_CLASS","HEADERS_DROP_HIGHLIGHT_CLASS","BLOCK_SEPARATOR_CLASS","HEADER_ROW_CLASS","WIDGET_CLASS","DRAGGING_COMMAND_CELL_CLASS","MODULE_NAMESPACE","COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH","DRAGGING_DELTA","allowResizing","that","option","getController","isColumnOptionUsed","allowReordering","TrackerView","View","init","_tablePositionController","_subscribeToCallback","dispose","_unsubscribeFromCallback","optionChanged","args","name","value","_invalidate","_renderCore","deferred","element","addClass","addWidgetPrefix","hide","_positionChanged","positionChanged","remove","position","$element","hasClass","css","top","height","add","isVisible","show","SeparatorView","_renderSeparator","options","_isShown","width","ColumnsSeparatorView","_init","_isTransparent","removeClass","force","columnsSeparatorTransparent","moveByX","outerX","_parentElement","offset","left","changeCursor","cursorName","BlockSeparatorView","dataController","loadingChanged","isLoading","html","$parent","children","length","prepend","groupPanelOptions","columnChooserOptions","visible","enabled","targetLocation","toOptions","stop","animate","type","from","display","to","duration","easing","DraggingHeaderView","_controller","_columnsResizerViewController","_columnsController","_isDragging","isDragging","_getDraggingPanelByPos","pos","result","_dragOptions","draggingPanels","index","draggingPanel","boundingRect","bottom","y","x","right","_resetTargetColumnOptions","params","_dropOptions","targetColumnIndex","targetColumnElement","isLast","posX","posY","_getVisibleIndexObject","rowIndex","visibleIndex","columnIndex","parent","find","commonColumnSettings","getCommonSettings","allowGrouping","allowHiding","dragHeader","columnElement","isCommandColumn","sourceColumn","sourceIndex","sourceColumnIndex","sourceColumnElement","sourceLocation","document","getDocument","_onSelectStart","onselectstart","drag","textAlign","get","clientHeight","clientWidth","whiteSpace","toggleClass","text","caption","appendTo","getSwatchContainer","moveHeader","e","event","data","isResizing","dragOptions","moveDeltaX","Math","abs","deltaX","moveDeltaY","deltaY","is","newLeft","newTop","dockHeader","preventDefault","targetDraggingPanel","controller","rtlEnabled","isVerticalOrientation","getName","axisName","columnElements","getColumnElements","ownerBand","pointsByTarget","pointsByColumns","_generatePointsByColumns","columns","getColumns","startColumnIndex","i","centerPosition","eq","last","dock","dropHeader","drop","isNextColumnResizingMode","ColumnsResizerViewController","ViewController","_subscribesToCallbacks","_unsubscribes","_subscribeToEvents","_isHeadersRowArea","_columnHeadersView","offsetTop","headersRowHeight","getHeadersRowHeight","_isRtlParentStyle","_this$_$parentContain","_$parentContainer","_correctColumnIndexForPoint","point","correctionValue","_pointCreated","cellsLength","isNextColumnMode","isRtlParentStyle","firstPointColumnIndex","currentColumn","nextColumn","_getTargetPoint","currentX","getSeparatorOffsetX","$cell","_$cell$offset","outerWidth","getBoundingClientRect","cellOffset","_moveSeparator","_that$_draggingHeader","columnsSeparatorWidth","_columnsSeparatorView","parentOffset","parentOffsetLeft","_draggingHeaderView","_isResizing","_resizingInfo","_updateColumnsWidthIfNeeded","currentColumnIndex","offsetX","update","_targetPoint","_previousParentOffset","_isReadyResizing","_endResizing","_trackerView","_getNextColumnIndex","_setupResizingInfo","nextColumnIndex","$currentHeader","getHeaderElement","$nextHeader","startPosX","currentColumnWidth","nextColumnWidth","needToInvertResizing","_needToInvertResizing","_startResizing","scrollable","component","getScrollable","_scrollRight","$content","container","scrollLeft","stopPropagation","_editorFactoryController","loseFocus","_generateColumnsTopYIndex","needToCheckPrevPoint","arguments","rowCount","getRowCount","topYMap","pointCreated","ceil","cells","getPointsByColumns","getVisibleColumns","_pointsByColumns","_unsubscribeFromEvents","_moveSeparatorHandler","off","_startResizingHandler","down","_endResizingHandler","up","createAction","on","needUpdate","contentWidth","_rowsView","resizingInfo","columnsController","visibleColumns","adaptColumnWidthByRatio","column","isPercentWidth","endsWith","setColumnWidth","columnWidth","oldColumnWidth","columnOption","toFixed","cellWidth","nextCellWidth","delta","nextMinWidth","needCorrectionNextCellWidth","minWidth","beginUpdate","floor","allColumnsHaveWidth","every","totalPercent","reduce","sum","parseFloat","columnWidths","getColumnWidths","hasScroll","totalWidth","lastColumnIndex","getLastResizableColumnIndex","endUpdate","updateDimensions","scrollTo","callback","handler","push","_unsubscribeFromCallbacks","subscribe","generatePointsByColumnsHandler","generatePointsByColumnsScrollHandler","_scrollLeft","getView","renderCompleted","resizeCompleted","scrollChanged","previousScrollbarVisibility","getScrollbarWidth","previousTableHeight","scrollbarVisibility","updateFreeSpaceRowHeight","TablePositionViewController","constructor","_columnsResizerController","_pagerView","targetPoint","diffOffsetTop","columnsHeadersHeight","scrollBarWidth","rowsHeight","draggingHeaderView","isDraggingOrResizing","fire","DraggingHeaderViewController","_blockSeparatorView","_headerPanelView","_columnChooserView","subscribeToEvents","isCustomGroupColumnPosition","checkIsCustomGroupColumnPosition","points","wasOnlyCommandColumns","col","command","location","targetColumn","prevColumn","isColumnAfterExpandColumn","isFirstExpandColumn","sourceColumnReorderingDisabled","otherColumnsReorderingDisabled","_columns$point$column","draggingHeader","_","nameDraggingPanel","$columnElement","allowDragging","currentTarget","getRowIndex","_getSeparator","hideSeparators","blockSeparator","columnsSeparator","_animationColumnIndex","allowDrop","parameters","allowMoveColumn","headersView","rowsView","draggableColumn","toggleDraggableColumnClass","separator","hasTargetVisibleIndex","moveColumn","Base","_needUpdateRowHeight","itemCount","wordWrapEnabled","apply","editorFactory","renderFocusOverlay","columnsResizingReorderingModule","views","columnsSeparatorView","blockSeparatorView","trackerView","controllers","tablePosition","columnsResizer","extenders"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/columns_resizing_reordering/m_columns_resizing_reordering.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/columns_resizing_reordering/m_columns_resizing_reordering.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    fx\r\n} from \"../../../../common/core/animation\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport {\r\n    end as dragEventEnd,\r\n    move as dragEventMove,\r\n    start as dragEventStart\r\n} from \"../../../../common/core/events/drag\";\r\nimport pointerEvents from \"../../../../common/core/events/pointer\";\r\nimport {\r\n    addNamespace,\r\n    eventData as getEventData,\r\n    isTouchEvent\r\n} from \"../../../../common/core/events/utils/index\";\r\nimport domAdapter from \"../../../../core/dom_adapter\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport Callbacks from \"../../../../core/utils/callbacks\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    getHeight,\r\n    getWidth,\r\n    setHeight,\r\n    setWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport swatchContainer from \"../../../../ui/widget/swatch_container\";\r\nimport modules from \"../m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    CLASSES\r\n} from \"./const\";\r\nconst COLUMNS_SEPARATOR_CLASS = \"columns-separator\";\r\nconst COLUMNS_SEPARATOR_TRANSPARENT = \"columns-separator-transparent\";\r\nconst DRAGGING_HEADER_CLASS = \"drag-header\";\r\nconst CELL_CONTENT_CLASS = \"text-content\";\r\nconst HEADERS_DRAG_ACTION_CLASS = \"drag-action\";\r\nconst TRACKER_CLASS = \"tracker\";\r\nconst HEADERS_DROP_HIGHLIGHT_CLASS = \"drop-highlight\";\r\nconst BLOCK_SEPARATOR_CLASS = \"dx-block-separator\";\r\nconst HEADER_ROW_CLASS = \"dx-header-row\";\r\nconst WIDGET_CLASS = \"dx-widget\";\r\nconst DRAGGING_COMMAND_CELL_CLASS = \"dx-drag-command-cell\";\r\nconst MODULE_NAMESPACE = \"dxDataGridResizingReordering\";\r\nconst COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH = 10;\r\nconst DRAGGING_DELTA = 5;\r\nconst allowResizing = function(that) {\r\n    return that.option(\"allowColumnResizing\") || that.getController(\"columns\").isColumnOptionUsed(\"allowResizing\")\r\n};\r\nconst allowReordering = function(that) {\r\n    return that.option(\"allowColumnReordering\") || that.getController(\"columns\").isColumnOptionUsed(\"allowReordering\")\r\n};\r\nexport class TrackerView extends modules.View {\r\n    init() {\r\n        super.init();\r\n        this._tablePositionController = this.getController(\"tablePosition\");\r\n        this._subscribeToCallback()\r\n    }\r\n    dispose() {\r\n        this._unsubscribeFromCallback();\r\n        super.dispose()\r\n    }\r\n    optionChanged(args) {\r\n        if (\"allowColumnResizing\" === args.name) {\r\n            this._unsubscribeFromCallback();\r\n            if (args.value) {\r\n                this._subscribeToCallback();\r\n                this._invalidate()\r\n            }\r\n        }\r\n        super.optionChanged(args)\r\n    }\r\n    _renderCore() {\r\n        const deferred = super._renderCore();\r\n        this.element().addClass(this.addWidgetPrefix(\"tracker\"));\r\n        this.hide();\r\n        return deferred\r\n    }\r\n    _unsubscribeFromCallback() {\r\n        if (this._positionChanged) {\r\n            this._tablePositionController.positionChanged.remove(this._positionChanged)\r\n        }\r\n    }\r\n    _subscribeToCallback() {\r\n        const that = this;\r\n        that._positionChanged = function(position) {\r\n            const $element = that.element();\r\n            if ($element && $element.hasClass(that.addWidgetPrefix(\"tracker\"))) {\r\n                $element.css({\r\n                    top: position.top\r\n                });\r\n                setHeight($element, position.height)\r\n            }\r\n        };\r\n        this._tablePositionController.positionChanged.add(that._positionChanged)\r\n    }\r\n    isVisible() {\r\n        return allowResizing(this)\r\n    }\r\n    show() {\r\n        this.element().show()\r\n    }\r\n    hide() {\r\n        this.element() && this.element().hide()\r\n    }\r\n    setHeight(value) {\r\n        setHeight(this.element(), value)\r\n    }\r\n}\r\nexport class SeparatorView extends modules.View {\r\n    _renderSeparator() {}\r\n    _renderCore(options) {\r\n        const deferred = super._renderCore(options);\r\n        this._isShown = true;\r\n        this._renderSeparator();\r\n        this.hide();\r\n        return deferred\r\n    }\r\n    show() {\r\n        this._isShown = true\r\n    }\r\n    hide() {\r\n        this._isShown = false\r\n    }\r\n    height(value) {\r\n        const $element = this.element();\r\n        if ($element) {\r\n            if (isDefined(value)) {\r\n                setHeight($element, value)\r\n            } else {\r\n                return getHeight($element)\r\n            }\r\n        }\r\n    }\r\n    width(value) {\r\n        const $element = this.element();\r\n        if ($element) {\r\n            if (isDefined(value)) {\r\n                setWidth($element, value)\r\n            } else {\r\n                return getWidth($element)\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class ColumnsSeparatorView extends SeparatorView {\r\n    init() {\r\n        super.init();\r\n        this._tablePositionController = this.getController(\"tablePosition\");\r\n        this._init()\r\n    }\r\n    dispose() {\r\n        this._unsubscribeFromCallback();\r\n        super.dispose()\r\n    }\r\n    optionChanged(args) {\r\n        if (\"allowColumnResizing\" === args.name) {\r\n            if (args.value) {\r\n                this._init();\r\n                this._invalidate();\r\n                this.hide(true)\r\n            } else {\r\n                this._unsubscribeFromCallback();\r\n                this._isTransparent = allowResizing(this);\r\n                this.hide(true)\r\n            }\r\n        }\r\n        super.optionChanged(args)\r\n    }\r\n    _renderSeparator() {\r\n        super._renderSeparator();\r\n        const $element = this.element();\r\n        $element.addClass(this.addWidgetPrefix(\"columns-separator\"))\r\n    }\r\n    _subscribeToCallback() {\r\n        const that = this;\r\n        let $element;\r\n        that._positionChanged = function(position) {\r\n            $element = that.element();\r\n            if ($element) {\r\n                $element.css({\r\n                    top: position.top\r\n                });\r\n                setHeight($element, position.height)\r\n            }\r\n        };\r\n        that._tablePositionController.positionChanged.add(that._positionChanged)\r\n    }\r\n    _unsubscribeFromCallback() {\r\n        this._positionChanged && this._tablePositionController.positionChanged.remove(this._positionChanged)\r\n    }\r\n    _init() {\r\n        this._isTransparent = allowResizing(this);\r\n        if (this.isVisible()) {\r\n            this._subscribeToCallback()\r\n        }\r\n    }\r\n    isVisible() {\r\n        return this.option(\"showColumnHeaders\") && (allowReordering(this) || allowResizing(this))\r\n    }\r\n    show() {\r\n        const that = this;\r\n        const $element = this.element();\r\n        if ($element && !that._isShown) {\r\n            if (that._isTransparent) {\r\n                $element.removeClass(that.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT))\r\n            } else {\r\n                $element.show()\r\n            }\r\n        }\r\n        super.show()\r\n    }\r\n    hide(force) {\r\n        const $element = this.element();\r\n        const columnsSeparatorTransparent = this.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT);\r\n        if ($element && (this._isShown || force)) {\r\n            if (this._isTransparent) {\r\n                $element.addClass(columnsSeparatorTransparent);\r\n                $element.css(\"left\", \"\");\r\n                $element.show()\r\n            } else {\r\n                if ($element.hasClass(columnsSeparatorTransparent)) {\r\n                    $element.removeClass(columnsSeparatorTransparent)\r\n                }\r\n                $element.hide()\r\n            }\r\n        }\r\n        super.hide()\r\n    }\r\n    moveByX(outerX) {\r\n        const $element = this.element();\r\n        if ($element) {\r\n            $element.css(\"left\", null === outerX ? 0 : outerX - this._parentElement().offset().left)\r\n        }\r\n    }\r\n    changeCursor(cursorName) {\r\n        cursorName = isDefined(cursorName) ? cursorName : \"\";\r\n        const $element = this.element();\r\n        if ($element) {\r\n            $element.css(\"cursor\", cursorName)\r\n        }\r\n    }\r\n}\r\nexport class BlockSeparatorView extends SeparatorView {\r\n    init() {\r\n        super.init();\r\n        const dataController = this.getController(\"data\");\r\n        dataController.loadingChanged.add((isLoading => {\r\n            if (!isLoading) {\r\n                this.hide()\r\n            }\r\n        }))\r\n    }\r\n    _renderSeparator() {\r\n        super._renderSeparator();\r\n        this.element().addClass(\"dx-block-separator\").html(\"&nbsp;\")\r\n    }\r\n    hide() {\r\n        const that = this;\r\n        const $parent = this._parentElement();\r\n        const $element = this.element();\r\n        if ($element && this._isShown) {\r\n            $element.css(\"display\", \"none\")\r\n        }\r\n        if ($parent && !$parent.children(\".dx-block-separator\").length) {\r\n            $parent.prepend(that.element())\r\n        }\r\n        super.hide()\r\n    }\r\n    isVisible() {\r\n        const groupPanelOptions = this.option(\"groupPanel\");\r\n        const columnChooserOptions = this.option(\"columnChooser\");\r\n        return groupPanelOptions && groupPanelOptions.visible || columnChooserOptions && columnChooserOptions.enabled\r\n    }\r\n    show(targetLocation) {\r\n        const $element = this.element();\r\n        if ($element && !this._isShown) {\r\n            switch (targetLocation) {\r\n                case \"group\":\r\n                    this.element().css(\"display\", \"block\");\r\n                    break;\r\n                case \"columnChooser\":\r\n                    ! function(toOptions) {\r\n                        fx.stop($element, true);\r\n                        fx.animate($element, {\r\n                            type: \"slide\",\r\n                            from: {\r\n                                width: 0,\r\n                                display: toOptions.display\r\n                            },\r\n                            to: toOptions,\r\n                            duration: 300,\r\n                            easing: \"swing\"\r\n                        })\r\n                    }({\r\n                        width: \"100%\",\r\n                        display: \"block\"\r\n                    });\r\n                    break;\r\n                default:\r\n                    $element.css(\"display\", \"\")\r\n            }\r\n        }\r\n        super.show()\r\n    }\r\n}\r\nexport class DraggingHeaderView extends modules.View {\r\n    init() {\r\n        super.init();\r\n        const dataController = this.getController(\"data\");\r\n        this._controller = this.getController(\"draggingHeader\");\r\n        this._columnsResizerViewController = this.getController(\"columnsResizer\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._isDragging = false;\r\n        dataController.loadingChanged.add((isLoading => {\r\n            const element = this.element();\r\n            if (!isLoading && element) {\r\n                element.hide()\r\n            }\r\n        }))\r\n    }\r\n    isDragging() {\r\n        return this._isDragging\r\n    }\r\n    _getDraggingPanelByPos(pos) {\r\n        let result;\r\n        each(this._dragOptions.draggingPanels, ((index, draggingPanel) => {\r\n            if (draggingPanel) {\r\n                const boundingRect = draggingPanel.getBoundingRect();\r\n                if (boundingRect && (void 0 === boundingRect.bottom || pos.y < boundingRect.bottom) && (void 0 === boundingRect.top || pos.y > boundingRect.top) && (void 0 === boundingRect.left || pos.x > boundingRect.left) && (void 0 === boundingRect.right || pos.x < boundingRect.right)) {\r\n                    result = draggingPanel;\r\n                    return false\r\n                }\r\n            }\r\n            return\r\n        }));\r\n        return result\r\n    }\r\n    _renderCore() {\r\n        this.element().addClass(`${this.addWidgetPrefix(\"drag-header\")} ${this.addWidgetPrefix(\"text-content\")} dx-widget`).hide()\r\n    }\r\n    _resetTargetColumnOptions() {\r\n        const params = this._dropOptions;\r\n        params.targetColumnIndex = -1;\r\n        delete params.targetColumnElement;\r\n        delete params.isLast;\r\n        delete params.posX;\r\n        delete params.posY\r\n    }\r\n    _getVisibleIndexObject(rowIndex, visibleIndex) {\r\n        if (isDefined(rowIndex)) {\r\n            return {\r\n                columnIndex: visibleIndex,\r\n                rowIndex: rowIndex\r\n            }\r\n        }\r\n        return visibleIndex\r\n    }\r\n    dispose() {\r\n        const element = this.element();\r\n        this._dragOptions = null;\r\n        element && element.parent().find(`.${this.addWidgetPrefix(\"drag-header\")}`).remove()\r\n    }\r\n    isVisible() {\r\n        const commonColumnSettings = this._columnsController.getCommonSettings();\r\n        return this.option(\"showColumnHeaders\") && (allowReordering(this) || commonColumnSettings.allowGrouping || commonColumnSettings.allowHiding)\r\n    }\r\n    dragHeader(options) {\r\n        const {\r\n            columnElement: columnElement\r\n        } = options;\r\n        const isCommandColumn = !!options.sourceColumn.type;\r\n        this._isDragging = true;\r\n        this._dragOptions = options;\r\n        this._dropOptions = {\r\n            sourceIndex: options.index,\r\n            sourceColumnIndex: this._getVisibleIndexObject(options.rowIndex, options.columnIndex),\r\n            sourceColumnElement: options.columnElement,\r\n            sourceLocation: options.sourceLocation\r\n        };\r\n        const document = domAdapter.getDocument();\r\n        this._onSelectStart = document.onselectstart;\r\n        document.onselectstart = function() {\r\n            return false\r\n        };\r\n        this._controller.drag(this._dropOptions);\r\n        this.element().css({\r\n            textAlign: columnElement && columnElement.css(\"textAlign\"),\r\n            height: columnElement && (isCommandColumn && columnElement.get(0).clientHeight || getHeight(columnElement)),\r\n            width: columnElement && (isCommandColumn && columnElement.get(0).clientWidth || getWidth(columnElement)),\r\n            whiteSpace: columnElement && columnElement.css(\"whiteSpace\")\r\n        }).addClass(this.addWidgetPrefix(\"drag-action\")).toggleClass(\"dx-drag-command-cell\", isCommandColumn).text(isCommandColumn ? \"\" : options.sourceColumn.caption);\r\n        this.element().appendTo(swatchContainer.getSwatchContainer(columnElement))\r\n    }\r\n    moveHeader(args) {\r\n        const e = args.event;\r\n        const {\r\n            that: that\r\n        } = e.data;\r\n        const eventData = getEventData(e);\r\n        const isResizing = that._columnsResizerViewController ? that._columnsResizerViewController.isResizing() : false;\r\n        const dragOptions = that._dragOptions;\r\n        if (that._isDragging && !isResizing) {\r\n            const $element = that.element();\r\n            const moveDeltaX = Math.abs(eventData.x - dragOptions.columnElement.offset().left - dragOptions.deltaX);\r\n            const moveDeltaY = Math.abs(eventData.y - dragOptions.columnElement.offset().top - dragOptions.deltaY);\r\n            if ($element.is(\":visible\") || moveDeltaX > 5 || moveDeltaY > 5) {\r\n                $element.show();\r\n                const newLeft = eventData.x - dragOptions.deltaX;\r\n                const newTop = eventData.y - dragOptions.deltaY;\r\n                $element.css({\r\n                    left: newLeft,\r\n                    top: newTop\r\n                });\r\n                that.dockHeader(eventData)\r\n            }\r\n            e.preventDefault()\r\n        }\r\n    }\r\n    dockHeader(eventData) {\r\n        const that = this;\r\n        const targetDraggingPanel = that._getDraggingPanelByPos(eventData);\r\n        const controller = that._controller;\r\n        const params = that._dropOptions;\r\n        const dragOptions = that._dragOptions;\r\n        if (targetDraggingPanel) {\r\n            const rtlEnabled = that.option(\"rtlEnabled\");\r\n            const isVerticalOrientation = \"columnChooser\" === targetDraggingPanel.getName();\r\n            const axisName = isVerticalOrientation ? \"y\" : \"x\";\r\n            const targetLocation = targetDraggingPanel.getName();\r\n            const rowIndex = \"headers\" === targetLocation ? dragOptions.rowIndex : void 0;\r\n            const {\r\n                sourceColumn: sourceColumn\r\n            } = dragOptions;\r\n            const columnElements = targetDraggingPanel.getColumnElements(rowIndex, null === sourceColumn || void 0 === sourceColumn ? void 0 : sourceColumn.ownerBand) || [];\r\n            const pointsByTarget = dragOptions.pointsByTarget = dragOptions.pointsByTarget || {};\r\n            const pointsByColumns = \"columnChooser\" === targetLocation ? [] : pointsByTarget[targetLocation] || controller._generatePointsByColumns(extend({}, dragOptions, {\r\n                targetDraggingPanel: targetDraggingPanel,\r\n                columns: targetDraggingPanel.getColumns(rowIndex),\r\n                columnElements: columnElements,\r\n                isVerticalOrientation: isVerticalOrientation,\r\n                startColumnIndex: \"headers\" === targetLocation ? $(columnElements[0]).index() : 0\r\n            }));\r\n            pointsByTarget[targetLocation] = pointsByColumns;\r\n            params.targetLocation = targetLocation;\r\n            if (pointsByColumns.length > 0) {\r\n                for (let i = 0; i < pointsByColumns.length; i++) {\r\n                    const centerPosition = pointsByColumns[i + 1] && (pointsByColumns[i][axisName] + pointsByColumns[i + 1][axisName]) / 2;\r\n                    if (void 0 === centerPosition || (rtlEnabled && \"x\" === axisName ? eventData[axisName] > centerPosition : eventData[axisName] < centerPosition)) {\r\n                        params.targetColumnIndex = that._getVisibleIndexObject(rowIndex, pointsByColumns[i].columnIndex);\r\n                        if (columnElements[i]) {\r\n                            params.targetColumnElement = columnElements.eq(i);\r\n                            params.isLast = false\r\n                        } else {\r\n                            params.targetColumnElement = columnElements.last();\r\n                            params.isLast = true\r\n                        }\r\n                        params.posX = pointsByColumns[i].x;\r\n                        params.posY = pointsByColumns[i].y;\r\n                        controller.dock(params);\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                that._resetTargetColumnOptions();\r\n                controller.dock(params)\r\n            }\r\n        }\r\n    }\r\n    dropHeader(args) {\r\n        const e = args.event;\r\n        const {\r\n            that: that\r\n        } = e.data;\r\n        const controller = that._controller;\r\n        that.element().hide();\r\n        if (controller && that._isDragging) {\r\n            controller.drop(that._dropOptions)\r\n        }\r\n        that.element().appendTo(that._parentElement());\r\n        that._dragOptions = null;\r\n        that._dropOptions = null;\r\n        that._isDragging = false;\r\n        domAdapter.getDocument().onselectstart = that._onSelectStart || null\r\n    }\r\n}\r\nconst isNextColumnResizingMode = function(that) {\r\n    return \"widget\" !== that.option(\"columnResizingMode\")\r\n};\r\nexport class ColumnsResizerViewController extends modules.ViewController {\r\n    init() {\r\n        this._subscribesToCallbacks = [];\r\n        if (allowResizing(this)) {\r\n            this._init()\r\n        }\r\n    }\r\n    dispose() {\r\n        this._unsubscribes();\r\n        super.dispose()\r\n    }\r\n    optionChanged(args) {\r\n        super.optionChanged(args);\r\n        if (\"allowColumnResizing\" === args.name) {\r\n            if (args.value) {\r\n                this._init();\r\n                this._subscribeToEvents()\r\n            } else {\r\n                this._unsubscribes()\r\n            }\r\n        }\r\n    }\r\n    _isHeadersRowArea(posY) {\r\n        if (this._columnHeadersView) {\r\n            const element = this._columnHeadersView.element();\r\n            if (element) {\r\n                const offsetTop = element.offset().top;\r\n                const headersRowHeight = this._columnHeadersView.getHeadersRowHeight();\r\n                return posY >= offsetTop && posY <= offsetTop + headersRowHeight\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _isRtlParentStyle() {\r\n        var _this$_$parentContain;\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        return rtlEnabled && \"rtl\" === (null === (_this$_$parentContain = this._$parentContainer) || void 0 === _this$_$parentContain ? void 0 : _this$_$parentContain.parent().css(\"direction\"))\r\n    }\r\n    _correctColumnIndexForPoint(point, correctionValue, columns) {\r\n        point.columnIndex -= correctionValue\r\n    }\r\n    _pointCreated(point, cellsLength, columns) {\r\n        const isNextColumnMode = isNextColumnResizingMode(this);\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        const isRtlParentStyle = this._isRtlParentStyle();\r\n        const firstPointColumnIndex = !isNextColumnMode && rtlEnabled && !isRtlParentStyle ? 0 : 1;\r\n        if (point.index >= firstPointColumnIndex && point.index < cellsLength + (!isNextColumnMode && (!rtlEnabled || isRtlParentStyle) ? 1 : 0)) {\r\n            this._correctColumnIndexForPoint(point, firstPointColumnIndex, columns);\r\n            const currentColumn = columns[point.columnIndex] || {};\r\n            const nextColumn = columns[point.columnIndex + 1] || {};\r\n            return !(isNextColumnMode ? currentColumn.allowResizing && nextColumn.allowResizing : currentColumn.allowResizing)\r\n        }\r\n        return true\r\n    }\r\n    _getTargetPoint(pointsByColumns, currentX, deltaX) {\r\n        if (pointsByColumns) {\r\n            for (let i = 0; i < pointsByColumns.length; i++) {\r\n                if (pointsByColumns[i].x === pointsByColumns[0].x && pointsByColumns[i + 1] && pointsByColumns[i].x === pointsByColumns[i + 1].x) {\r\n                    continue\r\n                }\r\n                if (pointsByColumns[i].x - deltaX <= currentX && currentX <= pointsByColumns[i].x + deltaX) {\r\n                    return pointsByColumns[i]\r\n                }\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    getSeparatorOffsetX($cell) {\r\n        var _$cell$offset;\r\n        const isNextColumnMode = isNextColumnResizingMode(this);\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        const isRtlParentStyle = this._isRtlParentStyle();\r\n        const outerWidth = $cell[0].getBoundingClientRect().width;\r\n        const cellOffset = (null === (_$cell$offset = $cell.offset()) || void 0 === _$cell$offset ? void 0 : _$cell$offset.left) ?? 0;\r\n        return cellOffset + ((isNextColumnMode || isRtlParentStyle) && rtlEnabled ? 0 : outerWidth)\r\n    }\r\n    _moveSeparator(args) {\r\n        var _that$_draggingHeader;\r\n        const e = args.event;\r\n        const that = e.data;\r\n        const columnsSeparatorWidth = that._columnsSeparatorView.width();\r\n        const isNextColumnMode = isNextColumnResizingMode(that);\r\n        const deltaX = columnsSeparatorWidth / 2;\r\n        const parentOffset = that._$parentContainer.offset();\r\n        const parentOffsetLeft = parentOffset.left;\r\n        const eventData = getEventData(e);\r\n        const isRtlParentStyle = this._isRtlParentStyle();\r\n        const isDragging = null === (_that$_draggingHeader = that._draggingHeaderView) || void 0 === _that$_draggingHeader ? void 0 : _that$_draggingHeader.isDragging();\r\n        if (that._isResizing && that._resizingInfo) {\r\n            if ((parentOffsetLeft <= eventData.x || !isNextColumnMode && isRtlParentStyle) && (!isNextColumnMode || eventData.x <= parentOffsetLeft + getWidth(that._$parentContainer))) {\r\n                if (that._updateColumnsWidthIfNeeded(eventData.x)) {\r\n                    const $cell = that._columnHeadersView.getColumnElements().eq(that._resizingInfo.currentColumnIndex);\r\n                    if ($cell.length) {\r\n                        const offsetX = this.getSeparatorOffsetX($cell);\r\n                        that._columnsSeparatorView.moveByX(offsetX);\r\n                        that._tablePositionController.update(that._targetPoint.y);\r\n                        e.preventDefault()\r\n                    }\r\n                }\r\n            }\r\n        } else if (!isDragging) {\r\n            if (that._isHeadersRowArea(eventData.y)) {\r\n                if (that._previousParentOffset) {\r\n                    if (that._previousParentOffset.left !== parentOffset.left || that._previousParentOffset.top !== parentOffset.top) {\r\n                        that.pointsByColumns(null)\r\n                    }\r\n                }\r\n                that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData.x, columnsSeparatorWidth);\r\n                that._previousParentOffset = parentOffset;\r\n                that._isReadyResizing = false;\r\n                if (that._targetPoint) {\r\n                    that._columnsSeparatorView.changeCursor(\"col-resize\");\r\n                    that._columnsSeparatorView.moveByX(that._targetPoint.x - deltaX);\r\n                    that._tablePositionController.update(that._targetPoint.y);\r\n                    that._isReadyResizing = true;\r\n                    e.preventDefault()\r\n                } else {\r\n                    that._columnsSeparatorView.changeCursor();\r\n                    that._columnsSeparatorView.moveByX(null)\r\n                }\r\n            } else {\r\n                that.pointsByColumns(null);\r\n                that._isReadyResizing = false;\r\n                that._columnsSeparatorView.changeCursor();\r\n                that._columnsSeparatorView.moveByX(null)\r\n            }\r\n        }\r\n    }\r\n    _endResizing(args) {\r\n        const e = args.event;\r\n        const that = e.data;\r\n        if (that._isResizing) {\r\n            that.pointsByColumns(null);\r\n            that._resizingInfo = null;\r\n            that._columnsSeparatorView.hide();\r\n            that._columnsSeparatorView.changeCursor();\r\n            that._trackerView.hide();\r\n            that._isReadyResizing = false;\r\n            that._isResizing = false\r\n        }\r\n    }\r\n    _getNextColumnIndex(currentColumnIndex) {\r\n        return currentColumnIndex + 1\r\n    }\r\n    _setupResizingInfo(posX) {\r\n        const currentColumnIndex = this._targetPoint.columnIndex;\r\n        const nextColumnIndex = this._getNextColumnIndex(currentColumnIndex);\r\n        const $currentHeader = this._columnHeadersView.getHeaderElement(currentColumnIndex);\r\n        const $nextHeader = this._columnHeadersView.getHeaderElement(nextColumnIndex);\r\n        this._resizingInfo = {\r\n            startPosX: posX,\r\n            currentColumnIndex: currentColumnIndex,\r\n            currentColumnWidth: null !== $currentHeader && void 0 !== $currentHeader && $currentHeader.length ? getBoundingRect($currentHeader[0]).width : 0,\r\n            nextColumnIndex: nextColumnIndex,\r\n            nextColumnWidth: null !== $nextHeader && void 0 !== $nextHeader && $nextHeader.length ? getBoundingRect($nextHeader[0]).width : 0,\r\n            needToInvertResizing: this._needToInvertResizing($currentHeader)\r\n        }\r\n    }\r\n    _startResizing(args) {\r\n        const e = args.event;\r\n        const that = e.data;\r\n        const eventData = getEventData(e);\r\n        if (isTouchEvent(e)) {\r\n            if (that._isHeadersRowArea(eventData.y)) {\r\n                that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData.x, 10);\r\n                if (that._targetPoint) {\r\n                    that._columnsSeparatorView.moveByX(that._targetPoint.x - that._columnsSeparatorView.width() / 2);\r\n                    that._isReadyResizing = true\r\n                }\r\n            } else {\r\n                that._isReadyResizing = false\r\n            }\r\n        }\r\n        if (that._isReadyResizing) {\r\n            that._setupResizingInfo(eventData.x);\r\n            that._isResizing = true;\r\n            that._tablePositionController.update(that._targetPoint.y);\r\n            that._columnsSeparatorView.show();\r\n            that._trackerView.show();\r\n            const scrollable = that.component.getScrollable();\r\n            if (scrollable && that._isRtlParentStyle()) {\r\n                that._scrollRight = getWidth(scrollable.$content()) - getWidth(scrollable.container()) - scrollable.scrollLeft()\r\n            }\r\n            e.preventDefault();\r\n            e.stopPropagation()\r\n        }\r\n        if (this.isResizing()) {\r\n            this._editorFactoryController.loseFocus()\r\n        }\r\n    }\r\n    _generateColumnsTopYIndex() {\r\n        let needToCheckPrevPoint = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;\r\n        const that = this;\r\n        const rowCount = that._columnsController.getRowCount();\r\n        const topYMap = {};\r\n        const pointCreated = point => {\r\n            const x = Math.ceil(point.x);\r\n            if (!topYMap[x]) {\r\n                topYMap[x] = point.y\r\n            }\r\n            return true\r\n        };\r\n        for (let rowIndex = 0; rowIndex < rowCount - 1; rowIndex++) {\r\n            const cells = that._columnHeadersView.getColumnElements(rowIndex);\r\n            if (cells && cells.length > 0) {\r\n                gridCoreUtils.getPointsByColumns(cells, pointCreated, false, 0, needToCheckPrevPoint)\r\n            }\r\n        }\r\n        return topYMap\r\n    }\r\n    _generatePointsByColumns() {\r\n        let needToCheckPrevPoint = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;\r\n        const that = this;\r\n        const topYMap = that._generateColumnsTopYIndex(needToCheckPrevPoint);\r\n        const columns = that._columnsController ? that._columnsController.getVisibleColumns() : [];\r\n        const cells = that._columnHeadersView.getColumnElements();\r\n        that._pointsByColumns = [];\r\n        if (cells && cells.length > 0) {\r\n            that._pointsByColumns = gridCoreUtils.getPointsByColumns(cells, (point => that._pointCreated((point => {\r\n                const x = Math.ceil(point.x);\r\n                if (topYMap[x]) {\r\n                    point.y = topYMap[x]\r\n                }\r\n                return point\r\n            })(point), cells.length, columns)), false, 0, needToCheckPrevPoint)\r\n        }\r\n    }\r\n    _needToInvertResizing($cell) {\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        const isRtlParentStyle = this._isRtlParentStyle();\r\n        const isNextColumnMode = isNextColumnResizingMode(this);\r\n        return (isNextColumnMode || isRtlParentStyle) && rtlEnabled\r\n    }\r\n    _unsubscribeFromEvents() {\r\n        this._moveSeparatorHandler && eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.move, MODULE_NAMESPACE), this._moveSeparatorHandler);\r\n        this._startResizingHandler && eventsEngine.off(this._$parentContainer, addNamespace(pointerEvents.down, MODULE_NAMESPACE), this._startResizingHandler);\r\n        if (this._endResizingHandler) {\r\n            eventsEngine.off(this._columnsSeparatorView.element(), addNamespace(pointerEvents.up, MODULE_NAMESPACE), this._endResizingHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.up, MODULE_NAMESPACE), this._endResizingHandler)\r\n        }\r\n    }\r\n    _subscribeToEvents() {\r\n        this._moveSeparatorHandler = this.createAction(this._moveSeparator);\r\n        this._startResizingHandler = this.createAction(this._startResizing);\r\n        this._endResizingHandler = this.createAction(this._endResizing);\r\n        eventsEngine.on(domAdapter.getDocument(), addNamespace(pointerEvents.move, MODULE_NAMESPACE), this, this._moveSeparatorHandler);\r\n        eventsEngine.on(this._$parentContainer, addNamespace(pointerEvents.down, MODULE_NAMESPACE), this, this._startResizingHandler);\r\n        eventsEngine.on(this._columnsSeparatorView.element(), addNamespace(pointerEvents.up, MODULE_NAMESPACE), this, this._endResizingHandler);\r\n        eventsEngine.on(domAdapter.getDocument(), addNamespace(pointerEvents.up, MODULE_NAMESPACE), this, this._endResizingHandler)\r\n    }\r\n    _updateColumnsWidthIfNeeded(posX) {\r\n        let deltaX;\r\n        let needUpdate = false;\r\n        let contentWidth = this._rowsView.contentWidth();\r\n        const resizingInfo = this._resizingInfo;\r\n        const columnsController = this._columnsController;\r\n        const visibleColumns = columnsController.getVisibleColumns();\r\n        const columnsSeparatorWidth = this._columnsSeparatorView.width();\r\n        const isNextColumnMode = isNextColumnResizingMode(this);\r\n        const adaptColumnWidthByRatio = isNextColumnMode && this.option(\"adaptColumnWidthByRatio\") && !this.option(\"columnAutoWidth\");\r\n        const isRtlParentStyle = this._isRtlParentStyle();\r\n        const column = visibleColumns[resizingInfo.currentColumnIndex];\r\n        const nextColumn = visibleColumns[resizingInfo.nextColumnIndex];\r\n        const {\r\n            needToInvertResizing: needToInvertResizing\r\n        } = resizingInfo;\r\n\r\n        function isPercentWidth(width) {\r\n            return isString(width) && width.endsWith(\"%\")\r\n        }\r\n\r\n        function setColumnWidth(column, columnWidth, contentWidth, adaptColumnWidthByRatio) {\r\n            if (column) {\r\n                const oldColumnWidth = column.width;\r\n                if (oldColumnWidth) {\r\n                    adaptColumnWidthByRatio = isPercentWidth(oldColumnWidth)\r\n                }\r\n                if (adaptColumnWidthByRatio) {\r\n                    columnsController.columnOption(column.index, \"visibleWidth\", columnWidth);\r\n                    columnsController.columnOption(column.index, \"width\", `${(columnWidth/contentWidth*100).toFixed(3)}%`)\r\n                } else {\r\n                    columnsController.columnOption(column.index, \"visibleWidth\", null);\r\n                    columnsController.columnOption(column.index, \"width\", columnWidth)\r\n                }\r\n            }\r\n        }\r\n        deltaX = posX - resizingInfo.startPosX;\r\n        if (needToInvertResizing) {\r\n            deltaX = -deltaX\r\n        }\r\n        let {\r\n            cellWidth: cellWidth,\r\n            nextCellWidth: nextCellWidth\r\n        } = function(delta) {\r\n            let nextMinWidth;\r\n            let nextCellWidth;\r\n            let needCorrectionNextCellWidth;\r\n            const cellWidth = resizingInfo.currentColumnWidth + delta;\r\n            const minWidth = column && column.minWidth || columnsSeparatorWidth;\r\n            const result = {};\r\n            if (cellWidth >= minWidth) {\r\n                result.cellWidth = cellWidth\r\n            } else {\r\n                result.cellWidth = minWidth;\r\n                needCorrectionNextCellWidth = true\r\n            }\r\n            if (isNextColumnMode) {\r\n                nextCellWidth = resizingInfo.nextColumnWidth - delta;\r\n                nextMinWidth = nextColumn && nextColumn.minWidth || columnsSeparatorWidth;\r\n                if (nextCellWidth >= nextMinWidth) {\r\n                    if (needCorrectionNextCellWidth) {\r\n                        result.nextCellWidth = resizingInfo.nextColumnWidth - (delta + minWidth - cellWidth)\r\n                    } else {\r\n                        result.nextCellWidth = nextCellWidth\r\n                    }\r\n                } else {\r\n                    result.nextCellWidth = nextMinWidth;\r\n                    result.cellWidth = resizingInfo.currentColumnWidth + (delta - nextMinWidth + nextCellWidth)\r\n                }\r\n            }\r\n            return result\r\n        }(deltaX);\r\n        needUpdate = column.width !== cellWidth;\r\n        if (needUpdate) {\r\n            columnsController.beginUpdate();\r\n            cellWidth = Math.floor(cellWidth);\r\n            contentWidth = function(contentWidth, visibleColumns) {\r\n                const allColumnsHaveWidth = visibleColumns.every((column => column.width));\r\n                if (allColumnsHaveWidth) {\r\n                    const totalPercent = visibleColumns.reduce(((sum, column) => {\r\n                        if (isPercentWidth(column.width)) {\r\n                            sum += parseFloat(column.width)\r\n                        }\r\n                        return sum\r\n                    }), 0);\r\n                    if (totalPercent > 100) {\r\n                        contentWidth = contentWidth / totalPercent * 100\r\n                    }\r\n                }\r\n                return contentWidth\r\n            }(contentWidth, visibleColumns);\r\n            setColumnWidth(column, cellWidth, contentWidth, adaptColumnWidthByRatio);\r\n            if (isNextColumnMode) {\r\n                nextCellWidth = Math.floor(nextCellWidth);\r\n                setColumnWidth(nextColumn, nextCellWidth, contentWidth, adaptColumnWidthByRatio)\r\n            } else {\r\n                const columnWidths = this._columnHeadersView.getColumnWidths();\r\n                columnWidths[resizingInfo.currentColumnIndex] = cellWidth;\r\n                const hasScroll = columnWidths.reduce(((totalWidth, width) => totalWidth + width), 0) > this._rowsView.contentWidth();\r\n                if (!hasScroll) {\r\n                    const lastColumnIndex = gridCoreUtils.getLastResizableColumnIndex(visibleColumns);\r\n                    if (lastColumnIndex >= 0) {\r\n                        columnsController.columnOption(visibleColumns[lastColumnIndex].index, \"visibleWidth\", \"auto\")\r\n                    }\r\n                }\r\n                for (let i = 0; i < columnWidths.length; i++) {\r\n                    if (visibleColumns[i] && visibleColumns[i] !== column && void 0 === visibleColumns[i].width) {\r\n                        columnsController.columnOption(visibleColumns[i].index, \"width\", columnWidths[i])\r\n                    }\r\n                }\r\n            }\r\n            columnsController.endUpdate();\r\n            if (!isNextColumnMode) {\r\n                this.component.updateDimensions();\r\n                const scrollable = this.component.getScrollable();\r\n                if (scrollable && isRtlParentStyle) {\r\n                    const left = getWidth(scrollable.$content()) - getWidth(scrollable.container()) - this._scrollRight;\r\n                    scrollable.scrollTo({\r\n                        left: left\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        return needUpdate\r\n    }\r\n    _subscribeToCallback(callback, handler) {\r\n        callback.add(handler);\r\n        this._subscribesToCallbacks.push({\r\n            callback: callback,\r\n            handler: handler\r\n        })\r\n    }\r\n    _unsubscribeFromCallbacks() {\r\n        for (let i = 0; i < this._subscribesToCallbacks.length; i++) {\r\n            const subscribe = this._subscribesToCallbacks[i];\r\n            subscribe.callback.remove(subscribe.handler)\r\n        }\r\n        this._subscribesToCallbacks = []\r\n    }\r\n    _unsubscribes() {\r\n        this._unsubscribeFromEvents();\r\n        this._unsubscribeFromCallbacks()\r\n    }\r\n    _init() {\r\n        const generatePointsByColumnsHandler = () => {\r\n            if (!this._isResizing) {\r\n                this.pointsByColumns(null)\r\n            }\r\n        };\r\n        const generatePointsByColumnsScrollHandler = offset => {\r\n            if (this._scrollLeft !== offset.left) {\r\n                this._scrollLeft = offset.left;\r\n                this.pointsByColumns(null)\r\n            }\r\n        };\r\n        this._columnsSeparatorView = this.getView(\"columnsSeparatorView\");\r\n        this._columnHeadersView = this.getView(\"columnHeadersView\");\r\n        this._trackerView = this.getView(\"trackerView\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._tablePositionController = this.getController(\"tablePosition\");\r\n        this._editorFactoryController = this.getController(\"editorFactory\");\r\n        this._draggingHeaderView = this.component.getView(\"draggingHeaderView\");\r\n        this._$parentContainer = this.component.$element();\r\n        this._subscribeToCallback(this._columnHeadersView.renderCompleted, generatePointsByColumnsHandler);\r\n        this._subscribeToCallback(this._columnHeadersView.resizeCompleted, generatePointsByColumnsHandler);\r\n        this._subscribeToCallback(this._columnsSeparatorView.renderCompleted, (() => {\r\n            this._unsubscribeFromEvents();\r\n            this._subscribeToEvents()\r\n        }));\r\n        this._subscribeToCallback(this._rowsView.renderCompleted, (() => {\r\n            this._rowsView.scrollChanged.remove(generatePointsByColumnsScrollHandler);\r\n            this._rowsView.scrollChanged.add(generatePointsByColumnsScrollHandler)\r\n        }));\r\n        let previousScrollbarVisibility = 0 !== this._rowsView.getScrollbarWidth();\r\n        let previousTableHeight = 0;\r\n        this._subscribeToCallback(this._tablePositionController.positionChanged, (e => {\r\n            if (this._isResizing && !this._rowsView.isResizing) {\r\n                const scrollbarVisibility = 0 !== this._rowsView.getScrollbarWidth();\r\n                if (previousScrollbarVisibility !== scrollbarVisibility || previousTableHeight && previousTableHeight !== e.height) {\r\n                    previousScrollbarVisibility = scrollbarVisibility;\r\n                    previousTableHeight = e.height;\r\n                    this.component.updateDimensions()\r\n                } else {\r\n                    this._rowsView.updateFreeSpaceRowHeight()\r\n                }\r\n            }\r\n            previousTableHeight = e.height\r\n        }))\r\n    }\r\n    isResizing() {\r\n        return this._isResizing\r\n    }\r\n    pointsByColumns(value) {\r\n        if (void 0 !== value) {\r\n            this._pointsByColumns = value\r\n        } else {\r\n            if (!this._pointsByColumns) {\r\n                this._generatePointsByColumns()\r\n            }\r\n            return this._pointsByColumns\r\n        }\r\n    }\r\n}\r\nexport class TablePositionViewController extends modules.ViewController {\r\n    constructor(component) {\r\n        super(component);\r\n        this.positionChanged = Callbacks()\r\n    }\r\n    init() {\r\n        super.init();\r\n        this._columnsResizerController = this.getController(\"columnsResizer\");\r\n        this._columnHeadersView = this.getView(\"columnHeadersView\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._pagerView = this.getView(\"pagerView\");\r\n        this._rowsView.resizeCompleted.add((() => {\r\n            if (this.option(\"allowColumnResizing\")) {\r\n                const targetPoint = this._columnsResizerController._targetPoint;\r\n                this.update(targetPoint ? targetPoint.y : null)\r\n            }\r\n        }))\r\n    }\r\n    update(top) {\r\n        const params = {};\r\n        const $element = this._columnHeadersView.element();\r\n        const offset = $element && $element.offset();\r\n        const offsetTop = offset && offset.top || 0;\r\n        const diffOffsetTop = isDefined(top) ? Math.abs(top - offsetTop) : 0;\r\n        const columnsHeadersHeight = this._columnHeadersView ? this._columnHeadersView.getHeight() : 0;\r\n        const scrollBarWidth = this._rowsView.getScrollbarWidth(true);\r\n        const rowsHeight = this._rowsView ? this._rowsView.height() - scrollBarWidth : 0;\r\n        const draggingHeaderView = this.component.getView(\"draggingHeaderView\");\r\n        params.height = columnsHeadersHeight;\r\n        const isDraggingOrResizing = this._columnsResizerController.isResizing() || draggingHeaderView.isDragging();\r\n        if (isDraggingOrResizing) {\r\n            params.height += rowsHeight - diffOffsetTop\r\n        }\r\n        if (null !== top && $element && $element.length) {\r\n            params.top = $element[0].offsetTop + diffOffsetTop\r\n        }\r\n        this.positionChanged.fire(params)\r\n    }\r\n}\r\nexport class DraggingHeaderViewController extends modules.ViewController {\r\n    init() {\r\n        super.init();\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._tablePositionController = this.getController(\"tablePosition\");\r\n        this._columnHeadersView = this.getView(\"columnHeadersView\");\r\n        this._columnsSeparatorView = this.getView(\"columnsSeparatorView\");\r\n        this._draggingHeaderView = this.getView(\"draggingHeaderView\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._blockSeparatorView = this.getView(\"blockSeparatorView\");\r\n        this._headerPanelView = this.getView(\"headerPanel\");\r\n        this._columnChooserView = this.getView(\"columnChooserView\");\r\n        const subscribeToEvents = () => {\r\n            if (this._draggingHeaderView) {\r\n                const draggingPanels = [this._columnChooserView, this._columnHeadersView, this._headerPanelView];\r\n                this._unsubscribeFromEvents(this._draggingHeaderView, draggingPanels);\r\n                this._subscribeToEvents(this._draggingHeaderView, draggingPanels)\r\n            }\r\n        };\r\n        this._columnHeadersView.renderCompleted.add(subscribeToEvents);\r\n        this._headerPanelView && this._headerPanelView.renderCompleted.add(subscribeToEvents);\r\n        this._columnChooserView && this._columnChooserView.renderCompleted.add(subscribeToEvents)\r\n    }\r\n    dispose() {\r\n        if (this._draggingHeaderView) {\r\n            this._unsubscribeFromEvents(this._draggingHeaderView, [this._columnChooserView, this._columnHeadersView, this._headerPanelView])\r\n        }\r\n    }\r\n    _generatePointsByColumns(options) {\r\n        let needToCheckPrevPoint = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        this.isCustomGroupColumnPosition = this.checkIsCustomGroupColumnPosition(options);\r\n        const points = gridCoreUtils.getPointsByColumns(options.columnElements, (point => this._pointCreated(point, options.columns, options.targetDraggingPanel.getName(), options.sourceColumn)), options.isVerticalOrientation, options.startColumnIndex, needToCheckPrevPoint);\r\n        return points\r\n    }\r\n    checkIsCustomGroupColumnPosition(options) {\r\n        let wasOnlyCommandColumns = true;\r\n        for (let i = 0; i < options.columns.length; i += 1) {\r\n            const col = options.columns[i];\r\n            if (\"expand\" === col.command && !wasOnlyCommandColumns) {\r\n                return true\r\n            }\r\n            if (!col.command) {\r\n                wasOnlyCommandColumns = false\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _pointCreated(point, columns, location, sourceColumn) {\r\n        const targetColumn = columns[point.columnIndex];\r\n        const prevColumn = columns[point.columnIndex - 1];\r\n        const isColumnAfterExpandColumn = \"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command);\r\n        const isFirstExpandColumn = \"expand\" === (null === targetColumn || void 0 === targetColumn ? void 0 : targetColumn.command) && \"expand\" !== (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command);\r\n        const sourceColumnReorderingDisabled = sourceColumn && !sourceColumn.allowReordering;\r\n        const otherColumnsReorderingDisabled = !(null !== targetColumn && void 0 !== targetColumn && targetColumn.allowReordering) && !(null !== prevColumn && void 0 !== prevColumn && prevColumn.allowReordering);\r\n        switch (location) {\r\n            case \"columnChooser\":\r\n                return true;\r\n            case \"headers\":\r\n                if (sourceColumnReorderingDisabled) {\r\n                    return true\r\n                }\r\n                if (!isFirstExpandColumn) {\r\n                    return isColumnAfterExpandColumn || otherColumnsReorderingDisabled\r\n                }\r\n                if (this.isCustomGroupColumnPosition) {\r\n                    return false\r\n                }\r\n                while (\"expand\" === (null === (_columns$point$column = columns[point.columnIndex]) || void 0 === _columns$point$column ? void 0 : _columns$point$column.command)) {\r\n                    var _columns$point$column;\r\n                    point.columnIndex += 1\r\n                }\r\n                return false;\r\n            default:\r\n                return 0 === columns.length\r\n        }\r\n    }\r\n    _subscribeToEvents(draggingHeader, draggingPanels) {\r\n        const that = this;\r\n        each(draggingPanels, ((_, draggingPanel) => {\r\n            if (draggingPanel) {\r\n                let columns;\r\n                const rowCount = draggingPanel.getRowCount ? draggingPanel.getRowCount() : 1;\r\n                const nameDraggingPanel = draggingPanel.getName();\r\n                const subscribeToEvents = function(index, columnElement) {\r\n                    if (!columnElement) {\r\n                        return\r\n                    }\r\n                    const $columnElement = $(columnElement);\r\n                    const column = columns[index];\r\n                    if (column && draggingPanel.allowDragging(column)) {\r\n                        $columnElement.addClass(that.addWidgetPrefix(\"drag-action\"));\r\n                        eventsEngine.on($columnElement, addNamespace(dragEventStart, MODULE_NAMESPACE), that.createAction((args => {\r\n                            const e = args.event;\r\n                            const eventData = getEventData(e);\r\n                            draggingHeader.dragHeader({\r\n                                deltaX: eventData.x - $(e.currentTarget).offset().left,\r\n                                deltaY: eventData.y - $(e.currentTarget).offset().top,\r\n                                sourceColumn: column,\r\n                                index: column.index,\r\n                                columnIndex: index,\r\n                                columnElement: $columnElement,\r\n                                sourceLocation: nameDraggingPanel,\r\n                                draggingPanels: draggingPanels,\r\n                                rowIndex: that._columnsController.getRowIndex(column.index, true)\r\n                            })\r\n                        })));\r\n                        eventsEngine.on($columnElement, addNamespace(dragEventMove, MODULE_NAMESPACE), {\r\n                            that: draggingHeader\r\n                        }, that.createAction(draggingHeader.moveHeader));\r\n                        eventsEngine.on($columnElement, addNamespace(dragEventEnd, MODULE_NAMESPACE), {\r\n                            that: draggingHeader\r\n                        }, that.createAction(draggingHeader.dropHeader))\r\n                    }\r\n                };\r\n                for (let i = 0; i < rowCount; i++) {\r\n                    const columnElements = draggingPanel.getColumnElements(i) || [];\r\n                    if (columnElements.length) {\r\n                        columns = draggingPanel.getColumns(i) || [];\r\n                        each(columnElements, subscribeToEvents)\r\n                    }\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    _unsubscribeFromEvents(draggingHeader, draggingPanels) {\r\n        const that = this;\r\n        each(draggingPanels, ((_, draggingPanel) => {\r\n            if (draggingPanel) {\r\n                const columnElements = draggingPanel.getColumnElements() || [];\r\n                each(columnElements, ((index, columnElement) => {\r\n                    const $columnElement = $(columnElement);\r\n                    eventsEngine.off($columnElement, addNamespace(dragEventStart, MODULE_NAMESPACE));\r\n                    eventsEngine.off($columnElement, addNamespace(dragEventMove, MODULE_NAMESPACE));\r\n                    eventsEngine.off($columnElement, addNamespace(dragEventEnd, MODULE_NAMESPACE));\r\n                    $columnElement.removeClass(that.addWidgetPrefix(\"drag-action\"))\r\n                }))\r\n            }\r\n        }))\r\n    }\r\n    _getSeparator(targetLocation) {\r\n        return \"headers\" === targetLocation ? this._columnsSeparatorView : this._blockSeparatorView\r\n    }\r\n    hideSeparators(type) {\r\n        const blockSeparator = this._blockSeparatorView;\r\n        const columnsSeparator = this._columnsSeparatorView;\r\n        this._animationColumnIndex = void 0;\r\n        blockSeparator && blockSeparator.hide();\r\n        \"block\" !== type && columnsSeparator && columnsSeparator.hide()\r\n    }\r\n    allowDrop(parameters) {\r\n        return this._columnsController.allowMoveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation)\r\n    }\r\n    drag(parameters) {\r\n        const {\r\n            sourceIndex: sourceIndex\r\n        } = parameters;\r\n        const {\r\n            sourceLocation: sourceLocation\r\n        } = parameters;\r\n        const {\r\n            sourceColumnElement: sourceColumnElement\r\n        } = parameters;\r\n        const headersView = this._columnHeadersView;\r\n        const rowsView = this._rowsView;\r\n        if (sourceColumnElement) {\r\n            sourceColumnElement.addClass(this.addWidgetPrefix(CLASSES.draggableColumn));\r\n            if (\"headers\" === sourceLocation) {\r\n                headersView && headersView.toggleDraggableColumnClass(sourceIndex, true);\r\n                rowsView && rowsView.toggleDraggableColumnClass(sourceIndex, true)\r\n            }\r\n        }\r\n    }\r\n    dock(parameters) {\r\n        const that = this;\r\n        const targetColumnIndex = isObject(parameters.targetColumnIndex) ? parameters.targetColumnIndex.columnIndex : parameters.targetColumnIndex;\r\n        const {\r\n            sourceLocation: sourceLocation\r\n        } = parameters;\r\n        const {\r\n            targetLocation: targetLocation\r\n        } = parameters;\r\n        const separator = that._getSeparator(targetLocation);\r\n        const hasTargetVisibleIndex = targetColumnIndex >= 0;\r\n        that._columnHeadersView.element().find(\".dx-header-row\").toggleClass(that.addWidgetPrefix(\"drop-highlight\"), \"headers\" !== sourceLocation && \"headers\" === targetLocation && !hasTargetVisibleIndex);\r\n        if (separator) {\r\n            if (that.allowDrop(parameters) && hasTargetVisibleIndex) {\r\n                if (\"group\" === targetLocation || \"columnChooser\" === targetLocation) {\r\n                    ! function() {\r\n                        if (that._animationColumnIndex !== targetColumnIndex) {\r\n                            that.hideSeparators();\r\n                            separator.element()[parameters.isLast ? \"insertAfter\" : \"insertBefore\"](parameters.targetColumnElement);\r\n                            that._animationColumnIndex = targetColumnIndex;\r\n                            separator.show(targetLocation)\r\n                        }\r\n                    }()\r\n                } else {\r\n                    that.hideSeparators(\"block\");\r\n                    that._tablePositionController.update(parameters.posY);\r\n                    separator.moveByX(parameters.posX - separator.width());\r\n                    separator.show()\r\n                }\r\n            } else {\r\n                that.hideSeparators()\r\n            }\r\n        }\r\n    }\r\n    drop(parameters) {\r\n        const {\r\n            sourceColumnElement: sourceColumnElement\r\n        } = parameters;\r\n        if (sourceColumnElement) {\r\n            sourceColumnElement.removeClass(this.addWidgetPrefix(CLASSES.draggableColumn));\r\n            this._columnHeadersView.toggleDraggableColumnClass(parameters.sourceIndex, false);\r\n            this._rowsView.toggleDraggableColumnClass(parameters.sourceIndex, false);\r\n            this._columnHeadersView.element().find(\".dx-header-row\").removeClass(this.addWidgetPrefix(\"drop-highlight\"))\r\n        }\r\n        if (this.allowDrop(parameters)) {\r\n            const separator = this._getSeparator(parameters.targetLocation);\r\n            if (separator) {\r\n                separator.hide()\r\n            }\r\n            this._columnsController.moveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation)\r\n        }\r\n    }\r\n}\r\nconst rowsView = Base => class extends Base {\r\n    _needUpdateRowHeight(itemCount) {\r\n        const wordWrapEnabled = this.option(\"wordWrapEnabled\");\r\n        const isResizing = this._columnsResizerController.isResizing();\r\n        return super._needUpdateRowHeight.apply(this, arguments) || itemCount > 0 && !!wordWrapEnabled && !!isResizing\r\n    }\r\n};\r\nconst editorFactory = Base => class extends Base {\r\n    renderFocusOverlay() {\r\n        if (this._columnsResizerController.isResizing()) {\r\n            return\r\n        }\r\n        return super.renderFocusOverlay.apply(this, arguments)\r\n    }\r\n};\r\nexport const columnsResizingReorderingModule = {\r\n    views: {\r\n        columnsSeparatorView: ColumnsSeparatorView,\r\n        blockSeparatorView: BlockSeparatorView,\r\n        draggingHeaderView: DraggingHeaderView,\r\n        trackerView: TrackerView\r\n    },\r\n    controllers: {\r\n        draggingHeader: DraggingHeaderViewController,\r\n        tablePosition: TablePositionViewController,\r\n        columnsResizer: ColumnsResizerViewController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: rowsView\r\n        },\r\n        controllers: {\r\n            editorFactory: editorFactory\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}