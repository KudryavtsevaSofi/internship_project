{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/tree_view/m_tree_view.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { fx } from \"../../../common/core/animation\";\nimport { name as clickEventName } from \"../../../common/core/events/click\";\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\nimport { name as dblclickEvent } from \"../../../common/core/events/double_click\";\nimport pointerEvents from \"../../../common/core/events/pointer\";\nimport { addNamespace } from \"../../../common/core/events/utils/index\";\nimport messageLocalization from \"../../../common/core/localization/message\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport { getPublicElement } from \"../../../core/element\";\nimport $ from \"../../../core/renderer\";\nimport { Deferred, fromPromise, when } from \"../../../core/utils/deferred\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getImageContainer } from \"../../../core/utils/icon\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getHeight } from \"../../../core/utils/size\";\nimport { isDefined, isFunction, isPrimitive, isString } from \"../../../core/utils/type\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport CheckBox from \"../../../ui/check_box\";\nimport LoadIndicator from \"../../../ui/load_indicator\";\nimport supportUtils from \"../../core/utils/m_support\";\nimport HierarchicalCollectionWidget from \"../../ui/hierarchical_collection/m_hierarchical_collection_widget\";\nimport { DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, SCROLLABLE_CONTENT_CLASS } from \"../../ui/scroll_view/consts\";\nimport Scrollable from \"../../ui/scroll_view/m_scrollable\";\nimport { getRelativeOffset } from \"../../ui/scroll_view/utils/get_relative_offset\";\nconst WIDGET_CLASS = \"dx-treeview\";\nconst NODE_CLASS = `${WIDGET_CLASS}-node`;\nconst NODE_CONTAINER_CLASS = `${NODE_CLASS}-container`;\nconst NODE_LOAD_INDICATOR_CLASS = `${NODE_CLASS}-loadindicator`;\nconst OPENED_NODE_CONTAINER_CLASS = `${NODE_CLASS}-container-opened`;\nconst IS_LEAF = `${NODE_CLASS}-is-leaf`;\nconst ITEM_CLASS = `${WIDGET_CLASS}-item`;\nconst ITEM_WITH_CHECKBOX_CLASS = `${ITEM_CLASS}-with-checkbox`;\nconst ITEM_WITH_CUSTOM_EXPANDER_ICON_CLASS = `${ITEM_CLASS}-with-custom-expander-icon`;\nconst CUSTOM_EXPANDER_ICON_ITEM_CONTAINER_CLASS = `${WIDGET_CLASS}-custom-expander-icon-item-container`;\nconst ITEM_WITHOUT_CHECKBOX_CLASS = `${ITEM_CLASS}-without-checkbox`;\nconst ITEM_DATA_KEY = `${ITEM_CLASS}-data`;\nconst TOGGLE_ITEM_VISIBILITY_CLASS = `${WIDGET_CLASS}-toggle-item-visibility`;\nconst CUSTOM_COLLAPSE_ICON_CLASS = `${WIDGET_CLASS}-custom-collapse-icon`;\nconst CUSTOM_EXPAND_ICON_CLASS = `${WIDGET_CLASS}-custom-expand-icon`;\nconst LOAD_INDICATOR_CLASS = `${WIDGET_CLASS}-loadindicator`;\nconst LOAD_INDICATOR_WRAPPER_CLASS = `${WIDGET_CLASS}-loadindicator-wrapper`;\nconst TOGGLE_ITEM_VISIBILITY_OPENED_CLASS = `${WIDGET_CLASS}-toggle-item-visibility-opened`;\nconst SELECT_ALL_ITEM_CLASS = `${WIDGET_CLASS}-select-all-item`;\nconst INVISIBLE_STATE_CLASS = \"dx-state-invisible\";\nconst DISABLED_STATE_CLASS = \"dx-state-disabled\";\nconst SELECTED_ITEM_CLASS = \"dx-state-selected\";\nconst EXPAND_EVENT_NAMESPACE = \"dxTreeView_expand\";\nconst DATA_ITEM_ID = \"data-item-id\";\nconst ITEM_URL_CLASS = \"dx-item-url\";\nconst CHECK_BOX_CLASS = \"dx-checkbox\";\nconst CHECK_BOX_ICON_CLASS = \"dx-checkbox-icon\";\nconst ROOT_NODE_CLASS = `${WIDGET_CLASS}-root-node`;\nconst EXPANDER_ICON_STUB_CLASS = `${WIDGET_CLASS}-expander-icon-stub`;\nclass TreeViewBase extends HierarchicalCollectionWidget {\n  _supportedKeys() {\n    const click = e => {\n      const {\n        focusedElement: focusedElement\n      } = this.option();\n      const $itemElement = $(focusedElement);\n      if (!$itemElement.length) {\n        return;\n      }\n      e.target = $itemElement;\n      e.currentTarget = $itemElement;\n      this._itemClickHandler(e, $itemElement.children(`.${ITEM_CLASS}`));\n      const expandEventName = this._getEventNameByOption(this.option(\"expandEvent\"));\n      const expandByClick = expandEventName === addNamespace(clickEventName, \"dxTreeView_expand\");\n      if (expandByClick) {\n        this._expandEventHandler(e);\n      }\n    };\n    const select = e => {\n      e.preventDefault();\n      const {\n        focusedElement: focusedElement\n      } = this.option();\n      const $focusedElement = $(focusedElement);\n      const checkboxInstance = this._getCheckBoxInstance($focusedElement);\n      if (!checkboxInstance.option(\"disabled\")) {\n        const currentState = checkboxInstance.option(\"value\");\n        this._updateItemSelection(!currentState, $focusedElement.find(`.${ITEM_CLASS}`).get(0), true);\n      }\n    };\n    const toggleExpandedNestedItems = function (state, e) {\n      if (!this.option(\"expandAllEnabled\")) {\n        return;\n      }\n      e.preventDefault();\n      const $rootElement = $(this.option(\"focusedElement\"));\n      if (!$rootElement.length) {\n        return;\n      }\n      const rootItem = this._getItemData($rootElement.find(`.${ITEM_CLASS}`));\n      this._toggleExpandedNestedItems([rootItem], state);\n    };\n    return _extends({}, super._supportedKeys(), {\n      enter: this._showCheckboxes() ? select : click,\n      space: this._showCheckboxes() ? select : click,\n      asterisk: toggleExpandedNestedItems.bind(this, true),\n      minus: toggleExpandedNestedItems.bind(this, false)\n    });\n  }\n  _toggleExpandedNestedItems(items, state) {\n    if (!items) {\n      return;\n    }\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const node = this._dataAdapter.getNodeByItem(item);\n      this._toggleExpandedState(node, state);\n      this._toggleExpandedNestedItems(item.items, state);\n    }\n  }\n  _getNodeElement(node, cache) {\n    const key = this._encodeString(node.internalFields.key);\n    if (cache) {\n      if (!cache.$nodeByKey) {\n        cache.$nodeByKey = {};\n        this.$element().find(`.${NODE_CLASS}`).each(function () {\n          const $node = $(this);\n          const key = $node.attr(DATA_ITEM_ID);\n          cache.$nodeByKey[key] = $node;\n        });\n      }\n      return cache.$nodeByKey[key] || $();\n    }\n    const element = this.$element().get(0).querySelector(`[${DATA_ITEM_ID}=\"${key}\"]`);\n    return $(element);\n  }\n  _widgetClass() {\n    return WIDGET_CLASS;\n  }\n  _getDefaultOptions() {\n    const defaultOptions = extend(super._getDefaultOptions(), {\n      animationEnabled: true,\n      dataStructure: \"tree\",\n      deferRendering: true,\n      expandAllEnabled: false,\n      hasItemsExpr: \"hasItems\",\n      selectNodesRecursive: true,\n      expandNodesRecursive: true,\n      showCheckBoxesMode: \"none\",\n      expandIcon: null,\n      collapseIcon: null,\n      selectAllText: messageLocalization.format(\"dxList-selectAll\"),\n      onItemSelectionChanged: null,\n      onItemExpanded: null,\n      onItemCollapsed: null,\n      scrollDirection: \"vertical\",\n      useNativeScrolling: true,\n      virtualModeEnabled: false,\n      rootValue: 0,\n      focusStateEnabled: false,\n      selectionMode: \"multiple\",\n      expandEvent: \"dblclick\",\n      selectByClick: false,\n      createChildren: null,\n      onSelectAllValueChanged: null,\n      _supportItemUrl: false\n    });\n    return extend(true, defaultOptions, {\n      integrationOptions: {\n        useDeferUpdateForTemplates: false\n      }\n    });\n  }\n  _defaultOptionsRules() {\n    return super._defaultOptionsRules().concat([{\n      device: () => !supportUtils.nativeScrolling,\n      options: {\n        useNativeScrolling: false\n      }\n    }]);\n  }\n  _initSelectedItems() {}\n  _syncSelectionOptions() {\n    return Deferred().resolve().promise();\n  }\n  _fireSelectionChanged() {\n    this._createActionByOption(\"onSelectionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    })();\n  }\n  _createSelectAllValueChangedAction() {\n    this._selectAllValueChangedAction = this._createActionByOption(\"onSelectAllValueChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  }\n  _fireSelectAllValueChanged(value) {\n    var _this$_selectAllValue;\n    null === (_this$_selectAllValue = this._selectAllValueChangedAction) || void 0 === _this$_selectAllValue || _this$_selectAllValue.call(this, {\n      value: value\n    });\n  }\n  _checkBoxModeChange(value, previousValue) {\n    const searchEnabled = this.option(\"searchEnabled\");\n    const previousSelectAllEnabled = this._selectAllEnabled(previousValue);\n    const previousItemsContainer = this._itemContainer(searchEnabled, previousSelectAllEnabled);\n    this._detachClickEvent(previousItemsContainer);\n    this._detachExpandEvent(previousItemsContainer);\n    if (\"none\" === previousValue || \"none\" === value) {\n      return;\n    }\n    const selectAllExists = this._$selectAllItem && this._$selectAllItem.length;\n    switch (value) {\n      case \"selectAll\":\n        if (!selectAllExists) {\n          this._createSelectAllValueChangedAction();\n          this._renderSelectAllItem();\n        }\n        break;\n      case \"normal\":\n        if (selectAllExists) {\n          var _this$_$selectAllItem;\n          null === (_this$_$selectAllItem = this._$selectAllItem) || void 0 === _this$_$selectAllItem || _this$_$selectAllItem.remove();\n          delete this._$selectAllItem;\n        }\n    }\n  }\n  _removeSelection() {\n    const that = this;\n    each(this._dataAdapter.getFullData(), (_, node) => {\n      if (!that._hasChildren(node)) {\n        return;\n      }\n      that._dataAdapter.toggleSelection(node.internalFields.key, false, true);\n    });\n  }\n  _optionChanged(args) {\n    const {\n      name: name,\n      value: value,\n      previousValue: previousValue\n    } = args;\n    switch (name) {\n      case \"selectAllText\":\n        if (this._$selectAllItem) {\n          this._$selectAllItem.dxCheckBox(\"instance\").option(\"text\", value);\n        }\n        break;\n      case \"showCheckBoxesMode\":\n        this._checkBoxModeChange(value, previousValue);\n        this._invalidate();\n        break;\n      case \"scrollDirection\":\n        this.getScrollable().option(\"direction\", value);\n        break;\n      case \"useNativeScrolling\":\n        this.getScrollable().option(\"useNative\", value);\n        break;\n      case \"items\":\n        delete this._$selectAllItem;\n        super._optionChanged(args);\n        break;\n      case \"dataSource\":\n        super._optionChanged(args);\n        this._initDataAdapter();\n        this._filter = {};\n        break;\n      case \"hasItemsExpr\":\n        this._initAccessors();\n        this.repaint();\n        break;\n      case \"expandEvent\":\n        this._attachExpandEvent();\n        break;\n      case \"deferRendering\":\n      case \"dataStructure\":\n      case \"rootValue\":\n      case \"createChildren\":\n      case \"expandNodesRecursive\":\n      case \"onItemSelectionChanged\":\n      case \"onItemExpanded\":\n      case \"onItemCollapsed\":\n      case \"expandAllEnabled\":\n      case \"animationEnabled\":\n      case \"virtualModeEnabled\":\n      case \"selectByClick\":\n      case \"_supportItemUrl\":\n        break;\n      case \"selectionMode\":\n        this._initDataAdapter();\n        super._optionChanged(args);\n        break;\n      case \"onSelectAllValueChanged\":\n        this._createSelectAllValueChangedAction();\n        break;\n      case \"selectNodesRecursive\":\n        this._dataAdapter.setOption(\"recursiveSelection\", args.value);\n        this.repaint();\n        break;\n      case \"expandIcon\":\n      case \"collapseIcon\":\n        this.repaint();\n        break;\n      default:\n        super._optionChanged(args);\n    }\n  }\n  _initDataSource() {\n    if (this._useCustomChildrenLoader()) {\n      this._loadChildrenByCustomLoader(null).done(newItems => {\n        if (newItems && newItems.length) {\n          this.option(\"items\", newItems);\n        }\n      });\n    } else {\n      super._initDataSource();\n      this._isVirtualMode() && this._initVirtualMode();\n    }\n  }\n  _initVirtualMode() {\n    const filter = this._filter;\n    if (!filter.custom) {\n      filter.custom = this._dataSource.filter();\n    }\n    if (!filter.internal) {\n      filter.internal = [this.option(\"parentIdExpr\"), this.option(\"rootValue\")];\n    }\n  }\n  _useCustomChildrenLoader() {\n    return isFunction(this.option(\"createChildren\")) && this._isDataStructurePlain();\n  }\n  _loadChildrenByCustomLoader(parentNode) {\n    const invocationResult = this.option(\"createChildren\").call(this, parentNode);\n    if (Array.isArray(invocationResult)) {\n      return Deferred().resolve(invocationResult).promise();\n    }\n    if (invocationResult && isFunction(invocationResult.then)) {\n      return fromPromise(invocationResult);\n    }\n    return Deferred().resolve([]).promise();\n  }\n  _combineFilter() {\n    if (!this._filter.custom || !this._filter.custom.length) {\n      return this._filter.internal;\n    }\n    return [this._filter.custom, this._filter.internal];\n  }\n  _dataSourceLoadErrorHandler() {\n    this._renderEmptyMessage();\n  }\n  _init() {\n    this._filter = {};\n    super._init();\n    this._activeStateUnit = `.${ITEM_CLASS}`;\n    this._initStoreChangeHandlers();\n  }\n  _dataSourceChangedHandler(newItems) {\n    const items = this.option(\"items\");\n    if (this._initialized && this._isVirtualMode() && items.length) {\n      return;\n    }\n    this.option(\"items\", newItems);\n  }\n  _removeTreeViewLoadIndicator() {\n    if (!this._treeViewLoadIndicator) {\n      return;\n    }\n    this._treeViewLoadIndicator.remove();\n    this._treeViewLoadIndicator = null;\n  }\n  _createTreeViewLoadIndicator() {\n    this._treeViewLoadIndicator = $(\"<div>\").addClass(LOAD_INDICATOR_CLASS);\n    this._createComponent(this._treeViewLoadIndicator, LoadIndicator, {});\n    return this._treeViewLoadIndicator;\n  }\n  _dataSourceLoadingChangedHandler(isLoading) {\n    let resultFilter;\n    if (this._isVirtualMode()) {\n      resultFilter = this._combineFilter();\n      this._dataSource.filter(resultFilter);\n    }\n    if (isLoading && !this._dataSource.isLoaded()) {\n      this.option(\"items\", []);\n      const $wrapper = $(\"<div>\").addClass(LOAD_INDICATOR_WRAPPER_CLASS);\n      this._createTreeViewLoadIndicator().appendTo($wrapper);\n      this.itemsContainer().append($wrapper);\n      if (this._isVirtualMode() && this._dataSource.filter() !== resultFilter) {\n        this._dataSource.filter([]);\n      }\n    } else {\n      this._removeTreeViewLoadIndicator();\n    }\n  }\n  _initStoreChangeHandlers() {\n    const {\n      dataStructure: dataStructure\n    } = this.option();\n    if (\"plain\" !== dataStructure) {\n      return;\n    }\n    this._dataSource && this._dataSource.store().on(\"inserted\", newItem => {\n      this.option().items = this.option(\"items\").concat(newItem);\n      this._dataAdapter.addItem(newItem);\n      if (!this._dataAdapter.isFiltered(newItem)) {\n        return;\n      }\n      this._updateLevel(this._parentIdGetter(newItem));\n    }).on(\"removed\", removedKey => {\n      const node = this._dataAdapter.getNodeByKey(removedKey);\n      if (isDefined(node)) {\n        this.option(\"items\")[this._dataAdapter.getIndexByKey(node.internalFields.key)] = 0;\n        this._markChildrenItemsToRemove(node);\n        this._removeItems();\n        this._dataAdapter.removeItem(removedKey);\n        this._updateLevel(this._parentIdGetter(node));\n      }\n    });\n  }\n  _markChildrenItemsToRemove(node) {\n    const keys = node.internalFields.childrenKeys;\n    each(keys, (_, key) => {\n      this.option(\"items\")[this._dataAdapter.getIndexByKey(key)] = 0;\n      this._markChildrenItemsToRemove(this._dataAdapter.getNodeByKey(key));\n    });\n  }\n  _removeItems() {\n    const items = extend(true, [], this.option(\"items\"));\n    let counter = 0;\n    each(items, (index, item) => {\n      if (!item) {\n        this.option(\"items\").splice(index - counter, 1);\n        counter++;\n      }\n    });\n  }\n  _updateLevel(parentId) {\n    const $container = this._getContainerByParentKey(parentId);\n    this._renderItems($container, this._dataAdapter.getChildrenNodes(parentId));\n  }\n  _getOldContainer($itemElement) {\n    if ($itemElement.length) {\n      return $itemElement.children(`.${NODE_CONTAINER_CLASS}`);\n    }\n    const scrollable = this.getScrollable();\n    if (scrollable) {\n      return $(scrollable.content()).children();\n    }\n    return $();\n  }\n  _getContainerByParentKey(parentId) {\n    const node = this._dataAdapter.getNodeByKey(parentId);\n    const $itemElement = node ? this._getNodeElement(node) : [];\n    this._getOldContainer($itemElement).remove();\n    const $container = this._renderNodeContainer($itemElement);\n    if (this._isRootLevel(parentId)) {\n      const scrollable = this.getScrollable();\n      if (!scrollable) {\n        this._renderScrollableContainer();\n      }\n      $(scrollable.content()).append($container);\n    }\n    return $container;\n  }\n  _isRootLevel(parentId) {\n    return parentId === this.option(\"rootValue\");\n  }\n  _getAccessors() {\n    const accessors = super._getAccessors();\n    accessors.push(\"hasItems\");\n    return accessors;\n  }\n  _getDataAdapterOptions() {\n    var _this$_dataSource, _this$_dataSource2, _this$_dataSource2$lo;\n    return {\n      rootValue: this.option(\"rootValue\"),\n      multipleSelection: !this._isSingleSelection(),\n      recursiveSelection: this._isRecursiveSelection(),\n      recursiveExpansion: this.option(\"expandNodesRecursive\"),\n      selectionRequired: this.option(\"selectionRequired\"),\n      dataType: this.option(\"dataStructure\"),\n      sort: null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.sort(),\n      langParams: null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 || null === (_this$_dataSource2$lo = _this$_dataSource2.loadOptions) || void 0 === _this$_dataSource2$lo || null === (_this$_dataSource2$lo = _this$_dataSource2$lo.call(_this$_dataSource2)) || void 0 === _this$_dataSource2$lo ? void 0 : _this$_dataSource2$lo.langParams\n    };\n  }\n  _initMarkup() {\n    this._renderScrollableContainer();\n    this._renderEmptyMessage(this._dataAdapter.getRootNodes());\n    super._initMarkup();\n    this._setAriaRole();\n  }\n  _setAriaRole() {\n    const {\n      items: items\n    } = this.option();\n    if (items && items.length) {\n      this.setAria({\n        role: \"tree\"\n      });\n    }\n  }\n  _renderContentImpl() {\n    const $nodeContainer = this._renderNodeContainer();\n    $(this.getScrollable().content()).append($nodeContainer);\n    if (!this.option(\"items\") || !this.option(\"items\").length) {\n      return;\n    }\n    this._renderItems($nodeContainer, this._dataAdapter.getRootNodes());\n    this._attachExpandEvent();\n    if (this._selectAllEnabled()) {\n      this._createSelectAllValueChangedAction();\n      this._renderSelectAllItem($nodeContainer);\n    }\n  }\n  _isVirtualMode() {\n    return this.option(\"virtualModeEnabled\") && this._isDataStructurePlain() && !!this.option(\"dataSource\");\n  }\n  _isDataStructurePlain() {\n    const {\n      dataStructure: dataStructure\n    } = this.option();\n    return \"plain\" === dataStructure;\n  }\n  _fireContentReadyAction() {\n    const dataSource = this.getDataSource();\n    const skipContentReadyAction = dataSource && !dataSource.isLoaded() || this._skipContentReadyAndItemExpanded;\n    const scrollable = this.getScrollable();\n    if (scrollable && hasWindow()) {\n      scrollable.update();\n    }\n    if (!skipContentReadyAction) {\n      super._fireContentReadyAction();\n    }\n    if (scrollable && hasWindow()) {\n      scrollable.update();\n    }\n  }\n  _renderScrollableContainer() {\n    this._scrollable = this._createComponent($(\"<div>\").appendTo(this.$element()), Scrollable, {\n      useNative: this.option(\"useNativeScrolling\"),\n      direction: this.option(\"scrollDirection\"),\n      useKeyboard: false\n    });\n  }\n  _renderNodeContainer($parent) {\n    const $container = $(\"<ul>\").addClass(NODE_CONTAINER_CLASS);\n    this.setAria(\"role\", \"group\", $container);\n    if (null !== $parent && void 0 !== $parent && $parent.length) {\n      const itemData = this._getItemData($parent.children(`.${ITEM_CLASS}`));\n      if (this._expandedGetter(itemData)) {\n        $container.addClass(OPENED_NODE_CONTAINER_CLASS);\n      }\n      $container.appendTo($parent);\n    }\n    return $container;\n  }\n  _createDOMElement($nodeContainer, node) {\n    var _node$internalFields;\n    const $node = $(\"<li>\").addClass(NODE_CLASS).attr(DATA_ITEM_ID, this._encodeString(node.internalFields.key)).prependTo($nodeContainer);\n    const attrs = {\n      role: \"treeitem\",\n      label: this._displayGetter(node.internalFields.item) || \"\",\n      level: this._getLevel($nodeContainer)\n    };\n    const hasChildNodes = !!(null !== node && void 0 !== node && null !== (_node$internalFields = node.internalFields) && void 0 !== _node$internalFields && null !== (_node$internalFields = _node$internalFields.childrenKeys) && void 0 !== _node$internalFields && _node$internalFields.length);\n    if (hasChildNodes) {\n      attrs.expanded = node.internalFields.expanded || false;\n    }\n    this.setAria(attrs, $node);\n    return $node;\n  }\n  _getLevel($nodeContainer) {\n    const parent = $nodeContainer.parent();\n    return parent.hasClass(\"dx-scrollable-content\") ? 1 : parseInt(parent.attr(\"aria-level\")) + 1;\n  }\n  _showCheckboxes() {\n    const {\n      showCheckBoxesMode: showCheckBoxesMode\n    } = this.option();\n    return \"none\" !== showCheckBoxesMode;\n  }\n  _hasCustomExpanderIcons() {\n    return this.option(\"expandIcon\") || this.option(\"collapseIcon\");\n  }\n  _selectAllEnabled(showCheckBoxesMode) {\n    const mode = showCheckBoxesMode ?? this.option(\"showCheckBoxesMode\");\n    return \"selectAll\" === mode && !this._isSingleSelection();\n  }\n  _renderItems($nodeContainer, nodes) {\n    const length = nodes.length - 1;\n    for (let i = length; i >= 0; i--) {\n      this._renderItem(i, nodes[i], $nodeContainer);\n    }\n    this._renderedItemsCount += nodes.length;\n  }\n  _renderItem(nodeIndex, node, $nodeContainer) {\n    const $node = this._createDOMElement($nodeContainer, node);\n    const nodeData = node.internalFields;\n    const showCheckBox = this._showCheckboxes();\n    $node.addClass(showCheckBox ? ITEM_WITH_CHECKBOX_CLASS : ITEM_WITHOUT_CHECKBOX_CLASS);\n    $node.toggleClass(\"dx-state-invisible\", false === nodeData.item.visible);\n    if (this._hasCustomExpanderIcons()) {\n      $node.addClass(ITEM_WITH_CUSTOM_EXPANDER_ICON_CLASS);\n      $nodeContainer.addClass(CUSTOM_EXPANDER_ICON_ITEM_CONTAINER_CLASS);\n    }\n    this.setAria(\"selected\", nodeData.selected, $node);\n    this._toggleSelectedClass($node, nodeData.selected);\n    if (nodeData.disabled) {\n      this.setAria(\"disabled\", nodeData.disabled, $node);\n    }\n    super._renderItem(this._renderedItemsCount + nodeIndex, nodeData.item, $node);\n    const parent = this._getNode(node.internalFields.parentKey);\n    if (!parent) {\n      $node.addClass(ROOT_NODE_CLASS);\n    }\n    if (false !== nodeData.item.visible) {\n      this._renderChildren($node, node);\n    }\n  }\n  _setAriaSelectionAttribute() {}\n  _renderChildren($node, node) {\n    if (!this._hasChildren(node)) {\n      this._addLeafClass($node);\n      $(\"<div>\").addClass(EXPANDER_ICON_STUB_CLASS).appendTo(this._getItem($node));\n      return;\n    }\n    if (this._hasCustomExpanderIcons()) {\n      this._renderCustomExpanderIcons($node, node);\n    } else {\n      this._renderDefaultExpanderIcons($node, node);\n    }\n    if (this._shouldRenderSublevel(node.internalFields.expanded)) {\n      this._loadSublevel(node).done(childNodes => {\n        this._renderSublevel($node, this._getActualNode(node), childNodes);\n      });\n    }\n  }\n  _shouldRenderSublevel(expanded) {\n    return expanded || !this.option(\"deferRendering\");\n  }\n  _getActualNode(cachedNode) {\n    return this._dataAdapter.getNodeByKey(cachedNode.internalFields.key);\n  }\n  _hasChildren(node) {\n    if (this._isVirtualMode() || this._useCustomChildrenLoader()) {\n      return false !== this._hasItemsGetter(node.internalFields.item);\n    }\n    return super._hasChildren(node);\n  }\n  _loadSublevel(node) {\n    const deferred = Deferred();\n    const childrenNodes = this._getChildNodes(node);\n    if (childrenNodes.length) {\n      deferred.resolve(childrenNodes);\n    } else {\n      this._loadNestedItems(node).done(items => {\n        deferred.resolve(this._dataAdapter.getNodesByItems(items));\n      });\n    }\n    return deferred.promise();\n  }\n  _getItemExtraPropNames() {\n    return [\"url\", \"linkAttr\"];\n  }\n  _addContent($container, itemData) {\n    const {\n      html: html,\n      url: url\n    } = itemData;\n    if (this.option(\"_supportItemUrl\") && url) {\n      $container.html(html);\n      const link = this._getLinkContainer(this._getIconContainer(itemData), this._getTextContainer(itemData), itemData);\n      $container.append(link);\n    } else {\n      super._addContent($container, itemData);\n    }\n  }\n  _postprocessRenderItem(args) {\n    const {\n      itemData: itemData,\n      itemElement: itemElement\n    } = args;\n    if (this._showCheckboxes()) {\n      this._renderCheckBox(itemElement, this._getNode(itemData));\n    }\n    super._postprocessRenderItem(args);\n  }\n  _renderSublevel($node, node, childNodes) {\n    const $nestedNodeContainer = this._renderNodeContainer($node);\n    const childNodesByChildrenKeys = childNodes.filter(childNode => -1 !== node.internalFields.childrenKeys.indexOf(childNode.internalFields.key));\n    this._renderItems($nestedNodeContainer, childNodesByChildrenKeys);\n    if (childNodesByChildrenKeys.length && !node.internalFields.selected) {\n      const firstChild = childNodesByChildrenKeys[0];\n      this._updateParentsState(firstChild, this._getNodeElement(firstChild));\n    }\n    this._normalizeIconState($node, childNodesByChildrenKeys.length);\n    if (node.internalFields.expanded) {\n      $nestedNodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS);\n    }\n  }\n  _executeItemRenderAction(itemIndex, itemData, itemElement) {\n    const node = this._getNode(itemElement);\n    this._getItemRenderAction()({\n      itemElement: itemElement,\n      itemIndex: itemIndex,\n      itemData: itemData,\n      node: this._dataAdapter.getPublicNode(node)\n    });\n  }\n  _addLeafClass($node) {\n    $node.addClass(IS_LEAF);\n  }\n  _expandEventHandler(e) {\n    const $nodeElement = $(e.currentTarget.parentNode);\n    if (!$nodeElement.hasClass(IS_LEAF)) {\n      this._toggleExpandedState(e.currentTarget, void 0, e);\n    }\n  }\n  _attachExpandEvent() {\n    const expandedEventName = this._getEventNameByOption(this.option(\"expandEvent\"));\n    const $itemsContainer = this._itemContainer();\n    this._detachExpandEvent($itemsContainer);\n    eventsEngine.on($itemsContainer, expandedEventName, this._itemSelector(), this._expandEventHandler.bind(this));\n  }\n  _detachExpandEvent(itemsContainer) {\n    eventsEngine.off(itemsContainer, \".dxTreeView_expand\", this._itemSelector());\n  }\n  _getEventNameByOption(name) {\n    const event = \"click\" === name ? clickEventName : dblclickEvent;\n    return addNamespace(event, \"dxTreeView_expand\");\n  }\n  _getNode(identifier) {\n    if (!isDefined(identifier)) {\n      return null;\n    }\n    if (identifier.internalFields) {\n      return identifier;\n    }\n    if (isPrimitive(identifier)) {\n      return this._dataAdapter.getNodeByKey(identifier);\n    }\n    const itemElement = $(identifier).get(0);\n    if (!itemElement) {\n      return null;\n    }\n    if (domAdapter.isElementNode(itemElement)) {\n      return this._getNodeByElement(itemElement);\n    }\n    return this._dataAdapter.getNodeByItem(itemElement);\n  }\n  _getNodeByElement(itemElement) {\n    const $node = $(itemElement).closest(`.${NODE_CLASS}`);\n    const key = this._decodeString($node.attr(DATA_ITEM_ID));\n    return this._dataAdapter.getNodeByKey(key);\n  }\n  _toggleExpandedState(itemElement, state, e) {\n    const node = this._getNode(itemElement);\n    if (!node) {\n      return Deferred().reject().promise();\n    }\n    if (node.internalFields.disabled) {\n      return Deferred().reject().promise();\n    }\n    const currentState = node.internalFields.expanded;\n    if (currentState === state) {\n      return Deferred().resolve().promise();\n    }\n    if (this._hasChildren(node)) {\n      const $node = this._getNodeElement(node);\n      if ($node.find(`.${NODE_LOAD_INDICATOR_CLASS}:not(.dx-state-invisible)`).length) {\n        return Deferred().reject().promise();\n      }\n      if (!currentState && !this._nodeHasRenderedChildren($node)) {\n        this._createLoadIndicator($node);\n      }\n    }\n    if (!isDefined(state)) {\n      state = !currentState;\n    }\n    this._dataAdapter.toggleExpansion(node.internalFields.key, state);\n    return this._updateExpandedItemsUI(node, state, e);\n  }\n  _nodeHasRenderedChildren($node) {\n    const $nodeContainer = $node.children(`.${NODE_CONTAINER_CLASS}`);\n    return $nodeContainer.not(\":empty\").length;\n  }\n  _getItem($node) {\n    return $node.children(`.${ITEM_CLASS}`).eq(0);\n  }\n  _createLoadIndicator($node) {\n    const $treeviewItem = this._getItem($node);\n    this._createComponent($(\"<div>\").addClass(NODE_LOAD_INDICATOR_CLASS), LoadIndicator, {}).$element().appendTo($treeviewItem);\n    const $icon = $treeviewItem.children(`.${TOGGLE_ITEM_VISIBILITY_CLASS},.${CUSTOM_EXPAND_ICON_CLASS}`);\n    $icon.hide();\n  }\n  _renderExpanderIcon($node, node, $icon, iconClass) {\n    $icon.appendTo(this._getItem($node));\n    $icon.addClass(iconClass);\n    if (node.internalFields.disabled) {\n      $icon.addClass(\"dx-state-disabled\");\n    }\n    this._renderToggleItemVisibilityIconClick($icon, node);\n  }\n  _renderDefaultExpanderIcons($node, node) {\n    const $treeViewItem = this._getItem($node);\n    const $icon = $(\"<div>\").addClass(TOGGLE_ITEM_VISIBILITY_CLASS).appendTo($treeViewItem);\n    if (node.internalFields.expanded) {\n      $icon.addClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS);\n      $node.parent().addClass(OPENED_NODE_CONTAINER_CLASS);\n    }\n    if (node.internalFields.disabled) {\n      $icon.addClass(\"dx-state-disabled\");\n    }\n    this._renderToggleItemVisibilityIconClick($icon, node);\n  }\n  _renderCustomExpanderIcons($node, node) {\n    const {\n      expandIcon: expandIcon,\n      collapseIcon: collapseIcon\n    } = this.option();\n    const $expandIcon = getImageContainer(expandIcon ?? collapseIcon);\n    const $collapseIcon = getImageContainer(collapseIcon ?? expandIcon);\n    this._renderExpanderIcon($node, node, $expandIcon, CUSTOM_EXPAND_ICON_CLASS);\n    this._renderExpanderIcon($node, node, $collapseIcon, CUSTOM_COLLAPSE_ICON_CLASS);\n    const isNodeExpanded = node.internalFields.expanded;\n    if (isNodeExpanded) {\n      $node.parent().addClass(OPENED_NODE_CONTAINER_CLASS);\n    }\n    this._toggleCustomExpanderIcons($expandIcon, $collapseIcon, isNodeExpanded);\n  }\n  _renderToggleItemVisibilityIconClick($icon, node) {\n    const eventName = addNamespace(clickEventName, this.NAME);\n    eventsEngine.off($icon, eventName);\n    eventsEngine.on($icon, eventName, e => {\n      this._toggleExpandedState(node.internalFields.key, void 0, e);\n      return false;\n    });\n  }\n  _toggleCustomExpanderIcons($expandIcon, $collapseIcon, isNodeExpanded) {\n    $collapseIcon.toggle(isNodeExpanded);\n    $expandIcon.toggle(!isNodeExpanded);\n  }\n  _updateExpandedItemsUI(node, state, e) {\n    const $node = this._getNodeElement(node);\n    const isHiddenNode = !$node.length || state && $node.is(\":hidden\");\n    if (this.option(\"expandNodesRecursive\") && isHiddenNode) {\n      const parentNode = this._getNode(node.internalFields.parentKey);\n      if (parentNode) {\n        this._updateExpandedItemsUI(parentNode, state, e);\n      }\n    }\n    if (!this._hasCustomExpanderIcons()) {\n      const $icon = this._getItem($node).children(`.${TOGGLE_ITEM_VISIBILITY_CLASS}`);\n      $icon.toggleClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS, state);\n    } else if (this._nodeHasRenderedChildren($node)) {\n      const $item = this._getItem($node);\n      const $childExpandIcons = $item.children(`.${CUSTOM_EXPAND_ICON_CLASS}`);\n      const $childCollapseIcons = $item.children(`.${CUSTOM_COLLAPSE_ICON_CLASS}`);\n      this._toggleCustomExpanderIcons($childExpandIcons, $childCollapseIcons, state);\n    }\n    const $nodeContainer = $node.children(`.${NODE_CONTAINER_CLASS}`);\n    const nodeContainerExists = $nodeContainer.length > 0;\n    const completionCallback = Deferred();\n    if (!state || nodeContainerExists && !$nodeContainer.is(\":empty\")) {\n      this._animateNodeContainer(node, state, e, completionCallback);\n      return completionCallback.promise();\n    }\n    if (0 === node.internalFields.childrenKeys.length && (this._isVirtualMode() || this._useCustomChildrenLoader())) {\n      this._loadNestedItemsWithUpdate(node, state, e, completionCallback);\n      return completionCallback.promise();\n    }\n    this._renderSublevel($node, node, this._getChildNodes(node));\n    this._fireContentReadyAction();\n    this._animateNodeContainer(node, state, e, completionCallback);\n    return completionCallback.promise();\n  }\n  _loadNestedItemsWithUpdate(node, state, e, completionCallback) {\n    const $node = this._getNodeElement(node);\n    this._loadNestedItems(node).done(items => {\n      const actualNodeData = this._getActualNode(node);\n      this._renderSublevel($node, actualNodeData, this._dataAdapter.getNodesByItems(items));\n      if (!items || !items.length) {\n        completionCallback.resolve();\n        return;\n      }\n      this._fireContentReadyAction();\n      this._animateNodeContainer(actualNodeData, state, e, completionCallback);\n    });\n  }\n  _loadNestedItems(node) {\n    if (this._useCustomChildrenLoader()) {\n      const publicNode = this._dataAdapter.getPublicNode(node);\n      return this._loadChildrenByCustomLoader(publicNode).done(newItems => {\n        if (!this._areNodesExists(newItems)) {\n          this._appendItems(newItems);\n        }\n      });\n    }\n    if (!this._isVirtualMode()) {\n      return Deferred().resolve([]).promise();\n    }\n    this._filter.internal = [this.option(\"parentIdExpr\"), node.internalFields.key];\n    this._dataSource.filter(this._combineFilter());\n    return this._dataSource.load().done(newItems => {\n      if (!this._areNodesExists(newItems)) {\n        this._appendItems(newItems);\n      }\n    });\n  }\n  _areNodesExists(newItems) {\n    const keyOfRootItem = this.keyOf(newItems[0]);\n    const fullData = this._dataAdapter.getFullData();\n    return !!this._dataAdapter.getNodeByKey(keyOfRootItem, fullData);\n  }\n  _appendItems(newItems) {\n    const {\n      items = []\n    } = this.option();\n    this.option().items = items.concat(newItems);\n    this._initDataAdapter();\n  }\n  _animateNodeContainer(node, state, e, completionCallback) {\n    const $node = this._getNodeElement(node);\n    const $nodeContainer = $node.children(`.${NODE_CONTAINER_CLASS}`);\n    if (node && completionCallback && 0 === $nodeContainer.length) {\n      completionCallback.resolve();\n    }\n    $nodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS);\n    const nodeHeight = getHeight($nodeContainer);\n    fx.stop($nodeContainer, true);\n    fx.animate($nodeContainer, {\n      type: \"custom\",\n      duration: this.option(\"animationEnabled\") ? 400 : 0,\n      from: {\n        maxHeight: state ? 0 : nodeHeight\n      },\n      to: {\n        maxHeight: state ? nodeHeight : 0\n      },\n      complete: function () {\n        $nodeContainer.css(\"maxHeight\", \"none\");\n        $nodeContainer.toggleClass(OPENED_NODE_CONTAINER_CLASS, state);\n        this.setAria(\"expanded\", state, $node);\n        this.getScrollable().update();\n        this._fireExpandedStateUpdatedEvent(state, node, e);\n        if (completionCallback) {\n          completionCallback.resolve();\n        }\n      }.bind(this)\n    });\n  }\n  _fireExpandedStateUpdatedEvent(isExpanded, node, e) {\n    if (!this._hasChildren(node) || this._skipContentReadyAndItemExpanded) {\n      return;\n    }\n    const optionName = isExpanded ? \"onItemExpanded\" : \"onItemCollapsed\";\n    if (isDefined(e)) {\n      this._itemDXEventHandler(e, optionName, {\n        node: this._dataAdapter.getPublicNode(node)\n      });\n    } else {\n      const target = this._getNodeElement(node);\n      this._itemEventHandler(target, optionName, {\n        event: e,\n        node: this._dataAdapter.getPublicNode(node)\n      });\n    }\n  }\n  _normalizeIconState($node, hasNewItems) {\n    const $loadIndicator = $node.find(`.${NODE_LOAD_INDICATOR_CLASS}`);\n    if ($loadIndicator.length) {\n      var _LoadIndicator$getIns;\n      null === (_LoadIndicator$getIns = LoadIndicator.getInstance($loadIndicator)) || void 0 === _LoadIndicator$getIns || _LoadIndicator$getIns.option(\"visible\", false);\n    }\n    const $treeViewItem = this._getItem($node);\n    const $toggleItem = $treeViewItem.children(`.${CUSTOM_COLLAPSE_ICON_CLASS},.${TOGGLE_ITEM_VISIBILITY_CLASS}`);\n    if (hasNewItems) {\n      $toggleItem.show();\n      return;\n    }\n    $toggleItem.removeClass(TOGGLE_ITEM_VISIBILITY_CLASS);\n    $node.addClass(IS_LEAF);\n  }\n  _emptyMessageContainer() {\n    const scrollable = this.getScrollable();\n    return scrollable ? $(scrollable.content()) : super._emptyMessageContainer();\n  }\n  _renderContent() {\n    const {\n      items: items\n    } = this.option();\n    if (items && items.length) {\n      this._contentAlreadyRendered = true;\n    }\n    super._renderContent();\n  }\n  _renderSelectAllItem($container) {\n    const {\n      selectAllText: selectAllText,\n      focusStateEnabled: focusStateEnabled\n    } = this.option();\n    $container = $container || this.$element().find(`.${NODE_CONTAINER_CLASS}`).first();\n    this._$selectAllItem = $(\"<div>\").addClass(SELECT_ALL_ITEM_CLASS);\n    const value = this._dataAdapter.isAllSelected();\n    this._createComponent(this._$selectAllItem, CheckBox, {\n      value: value,\n      elementAttr: {\n        \"aria-label\": \"Select All\"\n      },\n      text: selectAllText,\n      focusStateEnabled: focusStateEnabled,\n      onValueChanged: this._onSelectAllCheckboxValueChanged.bind(this),\n      onInitialized: _ref => {\n        let {\n          component: component\n        } = _ref;\n        component.registerKeyHandler(\"enter\", () => {\n          component.option(\"value\", !component.option(\"value\"));\n        });\n      }\n    });\n    this._toggleSelectedClass(this._$selectAllItem, value);\n    $container.before(this._$selectAllItem);\n  }\n  _onSelectAllCheckboxValueChanged(args) {\n    this._toggleSelectAll(args);\n    this._fireSelectAllValueChanged(args.value);\n  }\n  _toggleSelectAll(args) {\n    this._dataAdapter.toggleSelectAll(args.value);\n    this._updateItemsUI();\n    this._fireSelectionChanged();\n  }\n  _renderCheckBox($node, node) {\n    const $checkbox = $(\"<div>\").appendTo($node);\n    this._createComponent($checkbox, CheckBox, {\n      value: node.internalFields.selected,\n      onValueChanged: this._changeCheckboxValue.bind(this),\n      focusStateEnabled: false,\n      elementAttr: {\n        \"aria-label\": messageLocalization.format(\"CheckState\")\n      },\n      disabled: this._disabledGetter(node)\n    });\n  }\n  _toggleSelectedClass($node, value) {\n    $node.toggleClass(\"dx-state-selected\", !!value);\n  }\n  _toggleNodeDisabledState(node, state) {\n    const $node = this._getNodeElement(node);\n    const $item = $node.find(`.${ITEM_CLASS}`).eq(0);\n    this._dataAdapter.toggleNodeDisabledState(node.internalFields.key, state);\n    $item.toggleClass(\"dx-state-disabled\", !!state);\n    if (this._showCheckboxes()) {\n      const checkbox = this._getCheckBoxInstance($node);\n      checkbox.option(\"disabled\", !!state);\n    }\n  }\n  _itemOptionChanged(item, property, value) {\n    const node = this._dataAdapter.getNodeByItem(item);\n    if (property === this.option(\"disabledExpr\")) {\n      this._toggleNodeDisabledState(node, value);\n    }\n  }\n  _changeCheckboxValue(e) {\n    const $node = $(e.element).closest(`.${NODE_CLASS}`);\n    const $item = this._getItem($node);\n    const item = this._getItemData($item);\n    const node = this._getNodeByElement($item);\n    const {\n      value: value\n    } = e;\n    if (node && node.internalFields.selected === value) {\n      return;\n    }\n    this._updateItemSelection(value, item, e.event);\n  }\n  _isSingleSelection() {\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    return \"single\" === selectionMode;\n  }\n  _isRecursiveSelection() {\n    const {\n      selectionMode: selectionMode\n    } = this.option();\n    return this.option(\"selectNodesRecursive\") && \"single\" !== selectionMode;\n  }\n  _isLastSelectedBranch(publicNode, selectedNodesKeys, deep) {\n    const keyIndex = selectedNodesKeys.indexOf(publicNode.key);\n    if (keyIndex >= 0) {\n      selectedNodesKeys.splice(keyIndex, 1);\n    }\n    if (deep) {\n      each(publicNode.children, (_, childNode) => {\n        this._isLastSelectedBranch(childNode, selectedNodesKeys, true);\n      });\n    }\n    if (publicNode.parent) {\n      this._isLastSelectedBranch(publicNode.parent, selectedNodesKeys);\n    }\n    return 0 === selectedNodesKeys.length;\n  }\n  _isLastRequired(node) {\n    const selectionRequired = this.option(\"selectionRequired\");\n    const isSingleMode = this._isSingleSelection();\n    const selectedNodesKeys = this.getSelectedNodeKeys();\n    if (!selectionRequired) {\n      return;\n    }\n    if (isSingleMode) {\n      return 1 === selectedNodesKeys.length;\n    }\n    return this._isLastSelectedBranch(node.internalFields.publicNode, selectedNodesKeys.slice(), true);\n  }\n  _updateItemSelection(value, itemElement, dxEvent) {\n    const node = this._getNode(itemElement);\n    if (!node || false === node.visible) {\n      return false;\n    }\n    if (node.internalFields.selected === value) {\n      return true;\n    }\n    if (!value && this._isLastRequired(node)) {\n      if (this._showCheckboxes()) {\n        const $node = this._getNodeElement(node);\n        this._getCheckBoxInstance($node).option(\"value\", true);\n      }\n      return false;\n    }\n    if (value && this._isSingleSelection()) {\n      const selectedKeys = this.getSelectedNodeKeys();\n      each(selectedKeys, (index, key) => {\n        this._dataAdapter.toggleSelection(key, false);\n        this._updateItemsUI();\n        this._fireItemSelectionChanged(this._getNode(key));\n      });\n    }\n    this._dataAdapter.toggleSelection(node.internalFields.key, value);\n    const isAllSelected = this._dataAdapter.isAllSelected();\n    const needFireSelectAllChanged = this._selectAllEnabled() && this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\") !== isAllSelected;\n    this._updateItemsUI();\n    this._fireItemSelectionChanged(node, dxEvent);\n    this._fireSelectionChanged();\n    if (needFireSelectAllChanged) {\n      this._fireSelectAllValueChanged(isAllSelected);\n    }\n    return true;\n  }\n  _fireItemSelectionChanged(node, dxEvent) {\n    const initiator = dxEvent || this._findItemElementByItem(node.internalFields.item);\n    const handler = dxEvent ? this._itemDXEventHandler : this._itemEventHandler;\n    handler.call(this, initiator, \"onItemSelectionChanged\", {\n      node: this._dataAdapter.getPublicNode(node),\n      itemData: node.internalFields.item\n    });\n  }\n  _getCheckBoxInstance($node) {\n    const $treeViewItem = this._getItem($node);\n    return $treeViewItem.children(\".dx-checkbox\").dxCheckBox(\"instance\");\n  }\n  _updateItemsUI() {\n    const cache = {};\n    each(this._dataAdapter.getData(), (_, node) => {\n      const $node = this._getNodeElement(node, cache);\n      const nodeSelection = node.internalFields.selected;\n      if (!$node.length) {\n        return;\n      }\n      this._toggleSelectedClass($node, nodeSelection);\n      this.setAria(\"selected\", nodeSelection, $node);\n      if (this._showCheckboxes()) {\n        this._getCheckBoxInstance($node).option(\"value\", nodeSelection);\n      }\n    });\n    if (this._selectAllEnabled()) {\n      const selectAllCheckbox = this._$selectAllItem.dxCheckBox(\"instance\");\n      selectAllCheckbox.option(\"onValueChanged\", void 0);\n      selectAllCheckbox.option(\"value\", this._dataAdapter.isAllSelected());\n      selectAllCheckbox.option(\"onValueChanged\", this._onSelectAllCheckboxValueChanged.bind(this));\n    }\n  }\n  _updateParentsState(node, $node) {\n    if (!$node) {\n      return;\n    }\n    const parentNode = this._dataAdapter.getNodeByKey(node.internalFields.parentKey);\n    const $parentNode = $($node.parents(`.${NODE_CLASS}`)[0]);\n    if (this._showCheckboxes()) {\n      var _this$_getCheckBoxIns;\n      const parentValue = parentNode.internalFields.selected;\n      null === (_this$_getCheckBoxIns = this._getCheckBoxInstance($parentNode)) || void 0 === _this$_getCheckBoxIns || _this$_getCheckBoxIns.option(\"value\", parentValue);\n      this._toggleSelectedClass($parentNode, parentValue);\n    }\n    if (parentNode.internalFields.parentKey !== this.option(\"rootValue\")) {\n      this._updateParentsState(parentNode, $parentNode);\n    }\n  }\n  _itemEventHandlerImpl(initiator, action, actionArgs) {\n    const $itemElement = $(initiator).closest(`.${NODE_CLASS}`).children(`.${ITEM_CLASS}`);\n    return action(extend(this._extendActionArgs($itemElement), actionArgs));\n  }\n  _itemContextMenuHandler(e) {\n    this._createEventHandler(\"onItemContextMenu\", e);\n  }\n  _itemHoldHandler(e) {\n    this._createEventHandler(\"onItemHold\", e);\n  }\n  _createEventHandler(eventName, e) {\n    const node = this._getNodeByElement(e.currentTarget);\n    this._itemDXEventHandler(e, eventName, {\n      node: this._dataAdapter.getPublicNode(node)\n    });\n  }\n  _itemClass() {\n    return ITEM_CLASS;\n  }\n  _itemDataKey() {\n    return ITEM_DATA_KEY;\n  }\n  _attachClickEvent() {\n    const $itemContainer = this._itemContainer();\n    this._detachClickEvent($itemContainer);\n    const {\n      clickEventNamespace: clickEventNamespace,\n      itemSelector: itemSelector,\n      pointerDownEventNamespace: pointerDownEventNamespace,\n      nodeSelector: nodeSelector\n    } = this._getItemClickEventData();\n    eventsEngine.on($itemContainer, clickEventNamespace, itemSelector, e => {\n      if ($(e.target).hasClass(\"dx-checkbox-icon\") || $(e.target).hasClass(\"dx-checkbox\")) {\n        return;\n      }\n      this._itemClickHandler(e, $(e.currentTarget));\n    });\n    eventsEngine.on($itemContainer, pointerDownEventNamespace, nodeSelector, e => {\n      this._itemPointerDownHandler(e);\n    });\n  }\n  _detachClickEvent(itemsContainer) {\n    const {\n      clickEventNamespace: clickEventNamespace,\n      itemSelector: itemSelector,\n      pointerDownEventNamespace: pointerDownEventNamespace,\n      nodeSelector: nodeSelector\n    } = this._getItemClickEventData();\n    eventsEngine.off(itemsContainer, clickEventNamespace, itemSelector);\n    eventsEngine.off(itemsContainer, pointerDownEventNamespace, nodeSelector);\n  }\n  _getItemClickEventData() {\n    const itemSelector = `.${this._itemClass()}`;\n    const nodeSelector = `.${NODE_CLASS}, .${SELECT_ALL_ITEM_CLASS}`;\n    const clickEventNamespace = addNamespace(clickEventName, this.NAME);\n    const pointerDownEventNamespace = addNamespace(pointerEvents.down, this.NAME);\n    return {\n      clickEventNamespace: clickEventNamespace,\n      itemSelector: itemSelector,\n      pointerDownEventNamespace: pointerDownEventNamespace,\n      nodeSelector: nodeSelector\n    };\n  }\n  _itemClick(actionArgs) {\n    const args = actionArgs.args[0];\n    const target = args.event.target[0] || args.event.target;\n    const link = target.getElementsByClassName(\"dx-item-url\")[0];\n    if (args.itemData.url && link) {\n      link.click();\n    }\n  }\n  _itemClickHandler(e, $item) {\n    const itemData = this._getItemData($item);\n    const node = this._getNodeByElement($item);\n    this._itemDXEventHandler(e, \"onItemClick\", {\n      node: this._dataAdapter.getPublicNode(node)\n    }, {\n      beforeExecute: this._itemClick\n    });\n    if (this.option(\"selectByClick\") && !e.isDefaultPrevented()) {\n      this._updateItemSelection(!node.internalFields.selected, itemData, e);\n    }\n  }\n  _updateSelectionToFirstItem($items, startIndex) {\n    let itemIndex = startIndex;\n    while (itemIndex >= 0) {\n      const $item = $($items[itemIndex]);\n      this._updateItemSelection(true, $item.find(`.${ITEM_CLASS}`).get(0));\n      itemIndex--;\n    }\n  }\n  _updateSelectionToLastItem($items, startIndex) {\n    const {\n      length: length\n    } = $items;\n    let itemIndex = startIndex;\n    while (itemIndex < length) {\n      const $item = $($items[itemIndex]);\n      this._updateItemSelection(true, $item.find(`.${ITEM_CLASS}`).get(0));\n      itemIndex++;\n    }\n  }\n  focus() {\n    if (this._selectAllEnabled()) {\n      eventsEngine.trigger(this._$selectAllItem, \"focus\");\n      return;\n    }\n    super.focus();\n  }\n  _focusInHandler(e) {\n    this._updateFocusState(e, true);\n    const isSelectAllItem = $(e.target).hasClass(SELECT_ALL_ITEM_CLASS);\n    if (isSelectAllItem || this.option(\"focusedElement\")) {\n      clearTimeout(this._setFocusedItemTimeout);\n      this._setFocusedItemTimeout = setTimeout(() => {\n        const {\n          focusedElement: focusedElement\n        } = this.option();\n        const element = isSelectAllItem ? getPublicElement(this._$selectAllItem) : $(focusedElement);\n        this._setFocusedItem(element);\n      });\n      return;\n    }\n    const $activeItem = this._getActiveItem();\n    this.option(\"focusedElement\", getPublicElement($activeItem.closest(`.${NODE_CLASS}`)));\n  }\n  _itemPointerDownHandler(e) {\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n    const $target = $(e.target).closest(`.${NODE_CLASS}, .${SELECT_ALL_ITEM_CLASS}`);\n    if (!$target.length) {\n      return;\n    }\n    const itemElement = $target.hasClass(\"dx-state-disabled\") ? null : $target;\n    this.option(\"focusedElement\", getPublicElement(itemElement));\n  }\n  _findNonDisabledNodes($nodes) {\n    return $nodes.not(function () {\n      return $(this).children(`.${ITEM_CLASS}`).hasClass(\"dx-state-disabled\");\n    });\n  }\n  _moveFocus(location, e) {\n    const FOCUS_LEFT = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\n    const FOCUS_RIGHT = this.option(\"rtlEnabled\") ? \"left\" : \"right\";\n    this.$element().find(`.${NODE_CONTAINER_CLASS}`).each(function () {\n      fx.stop(this, true);\n    });\n    const $items = this._nodeElements();\n    if (!$items || !$items.length) {\n      return;\n    }\n    switch (location) {\n      case \"up\":\n        {\n          const $prevItem = this._prevItem($items);\n          this.option(\"focusedElement\", getPublicElement($prevItem));\n          const prevItemElement = this._getNodeItemElement($prevItem);\n          this.getScrollable().scrollToElement(prevItemElement);\n          if (e.shiftKey && this._showCheckboxes()) {\n            this._updateItemSelection(true, prevItemElement);\n          }\n          break;\n        }\n      case \"down\":\n        {\n          const $nextItem = this._nextItem($items);\n          this.option(\"focusedElement\", getPublicElement($nextItem));\n          const nextItemElement = this._getNodeItemElement($nextItem);\n          this.getScrollable().scrollToElement(nextItemElement);\n          if (e.shiftKey && this._showCheckboxes()) {\n            this._updateItemSelection(true, nextItemElement);\n          }\n          break;\n        }\n      case \"first\":\n        {\n          const $firstItem = $items.first();\n          if (e.shiftKey && this._showCheckboxes()) {\n            this._updateSelectionToFirstItem($items, $items.index(this._prevItem($items)));\n          }\n          this.option(\"focusedElement\", getPublicElement($firstItem));\n          this.getScrollable().scrollToElement(this._getNodeItemElement($firstItem));\n          break;\n        }\n      case \"last\":\n        {\n          const $lastItem = $items.last();\n          if (e.shiftKey && this._showCheckboxes()) {\n            this._updateSelectionToLastItem($items, $items.index(this._nextItem($items)));\n          }\n          this.option(\"focusedElement\", getPublicElement($lastItem));\n          this.getScrollable().scrollToElement(this._getNodeItemElement($lastItem));\n          break;\n        }\n      case FOCUS_RIGHT:\n        this._expandFocusedContainer();\n        break;\n      case FOCUS_LEFT:\n        this._collapseFocusedContainer();\n        break;\n      default:\n        super._moveFocus.apply(this, arguments);\n    }\n  }\n  _getNodeItemElement($node) {\n    return $node.find(`.${ITEM_CLASS}`).get(0);\n  }\n  _nodeElements() {\n    return this.$element().find(`.${NODE_CLASS}`).not(\":hidden\");\n  }\n  _expandFocusedContainer() {\n    const {\n      focusedElement: focusedElement\n    } = this.option();\n    const $focusedNode = $(focusedElement);\n    if (!$focusedNode.length || $focusedNode.hasClass(IS_LEAF)) {\n      return;\n    }\n    const $node = $focusedNode.find(`.${NODE_CONTAINER_CLASS}`).eq(0);\n    if ($node.hasClass(OPENED_NODE_CONTAINER_CLASS)) {\n      const $nextItem = this._nextItem(this._findNonDisabledNodes(this._nodeElements()));\n      this.option(\"focusedElement\", getPublicElement($nextItem));\n      this.getScrollable().scrollToElement(this._getNodeItemElement($nextItem));\n      return;\n    }\n    const node = this._getNodeByElement(this._getItem($focusedNode));\n    this._toggleExpandedState(node, true);\n  }\n  _getClosestNonDisabledNode($node) {\n    do {\n      $node = $node.parent().closest(`.${NODE_CLASS}`);\n    } while ($node.children(\".dx-treeview-item.dx-state-disabled\").length);\n    return $node;\n  }\n  _collapseFocusedContainer() {\n    const {\n      focusedElement: focusedElement\n    } = this.option();\n    const $focusedNode = $(focusedElement);\n    if (!$focusedNode.length) {\n      return;\n    }\n    const nodeElement = $focusedNode.find(`.${NODE_CONTAINER_CLASS}`).eq(0);\n    if (!$focusedNode.hasClass(IS_LEAF) && nodeElement.hasClass(OPENED_NODE_CONTAINER_CLASS)) {\n      const node = this._getNodeByElement(this._getItem($focusedNode));\n      this._toggleExpandedState(node, false);\n    } else {\n      const collapsedNode = this._getClosestNonDisabledNode($focusedNode);\n      collapsedNode.length && this.option(\"focusedElement\", getPublicElement(collapsedNode));\n      this.getScrollable().scrollToElement(this._getNodeItemElement(collapsedNode));\n    }\n  }\n  _encodeString(value) {\n    return isString(value) ? encodeURI(value) : value;\n  }\n  _decodeString(value) {\n    return isString(value) ? decodeURI(value) : value;\n  }\n  getScrollable() {\n    return this._scrollable;\n  }\n  updateDimensions() {\n    const deferred = Deferred();\n    const scrollable = this.getScrollable();\n    if (scrollable) {\n      scrollable.update().done(() => {\n        deferred.resolveWith(this);\n      });\n    } else {\n      deferred.resolveWith(this);\n    }\n    return deferred.promise();\n  }\n  selectItem(itemElement) {\n    return this._updateItemSelection(true, itemElement);\n  }\n  unselectItem(itemElement) {\n    return this._updateItemSelection(false, itemElement);\n  }\n  expandItem(itemElement) {\n    return this._toggleExpandedState(itemElement, true);\n  }\n  collapseItem(itemElement) {\n    return this._toggleExpandedState(itemElement, false);\n  }\n  getNodes() {\n    return this._dataAdapter.getTreeNodes();\n  }\n  getSelectedNodes() {\n    return this.getSelectedNodeKeys().map(key => {\n      const node = this._dataAdapter.getNodeByKey(key);\n      return this._dataAdapter.getPublicNode(node);\n    });\n  }\n  getSelectedNodeKeys() {\n    return this._dataAdapter.getSelectedNodesKeys();\n  }\n  selectAll() {\n    if (this._selectAllEnabled()) {\n      this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\", true);\n    } else {\n      this._toggleSelectAll({\n        value: true\n      });\n    }\n  }\n  unselectAll() {\n    if (this._selectAllEnabled()) {\n      this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\", false);\n    } else {\n      this._toggleSelectAll({\n        value: false\n      });\n    }\n  }\n  _allItemsExpandedHandler() {\n    this._skipContentReadyAndItemExpanded = false;\n    this._fireContentReadyAction();\n  }\n  expandAll() {\n    const nodes = this._dataAdapter.getData();\n    const expandingPromises = [];\n    this._skipContentReadyAndItemExpanded = true;\n    nodes.forEach(node => expandingPromises.push(this._toggleExpandedState(node.internalFields.key, true)));\n    Promise.allSettled(expandingPromises).then(() => {\n      var _this$_allItemsExpand;\n      return null === (_this$_allItemsExpand = this._allItemsExpandedHandler) || void 0 === _this$_allItemsExpand ? void 0 : _this$_allItemsExpand.call(this);\n    });\n  }\n  collapseAll() {\n    each(this._dataAdapter.getExpandedNodesKeys(), (_, key) => {\n      this._toggleExpandedState(key, false);\n    });\n  }\n  scrollToItem(keyOrItemOrElement) {\n    const node = this._getNode(keyOrItemOrElement);\n    if (!node) {\n      return Deferred().reject().promise();\n    }\n    const nodeKeysToExpand = [];\n    let parentNode = node.internalFields.publicNode.parent;\n    while (null != parentNode) {\n      if (!parentNode.expanded) {\n        nodeKeysToExpand.push(parentNode.key);\n      }\n      parentNode = parentNode.parent;\n    }\n    const scrollCallback = Deferred();\n    this._expandNodes(nodeKeysToExpand.reverse()).always(() => {\n      const $element = this._getNodeElement(node);\n      if ($element && $element.length) {\n        this.scrollToElementTopLeft($element.get(0));\n        scrollCallback.resolve();\n      } else {\n        scrollCallback.reject();\n      }\n    });\n    return scrollCallback.promise();\n  }\n  scrollToElementTopLeft(targetElement) {\n    const scrollable = this.getScrollable();\n    const {\n      scrollDirection: scrollDirection,\n      rtlEnabled: rtlEnabled\n    } = this.option();\n    const targetLocation = {\n      top: 0,\n      left: 0\n    };\n    const relativeOffset = getRelativeOffset(SCROLLABLE_CONTENT_CLASS, targetElement);\n    if (scrollDirection !== DIRECTION_VERTICAL) {\n      const containerElement = $(scrollable.container()).get(0);\n      targetLocation.left = rtlEnabled ? relativeOffset.left + targetElement.offsetWidth - containerElement.clientWidth : relativeOffset.left;\n    }\n    if (scrollDirection !== DIRECTION_HORIZONTAL) {\n      targetLocation.top = relativeOffset.top;\n    }\n    scrollable.scrollTo(targetLocation);\n  }\n  _expandNodes(keysToExpand) {\n    if (!keysToExpand || 0 === keysToExpand.length) {\n      return Deferred().resolve().promise();\n    }\n    const resultCallback = Deferred();\n    const callbacksByNodes = keysToExpand.map(key => this.expandItem(key));\n    when.apply($, callbacksByNodes).done(() => resultCallback.resolve()).fail(() => resultCallback.reject());\n    return resultCallback.promise();\n  }\n  _dispose() {\n    super._dispose();\n    clearTimeout(this._setFocusedItemTimeout);\n    this._allItemsExpandedHandler = null;\n  }\n}\nexport default TreeViewBase;","map":{"version":3,"names":["_extends","fx","name","clickEventName","eventsEngine","dblclickEvent","pointerEvents","addNamespace","messageLocalization","domAdapter","getPublicElement","$","Deferred","fromPromise","when","extend","getImageContainer","each","getHeight","isDefined","isFunction","isPrimitive","isString","hasWindow","CheckBox","LoadIndicator","supportUtils","HierarchicalCollectionWidget","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","SCROLLABLE_CONTENT_CLASS","Scrollable","getRelativeOffset","WIDGET_CLASS","NODE_CLASS","NODE_CONTAINER_CLASS","NODE_LOAD_INDICATOR_CLASS","OPENED_NODE_CONTAINER_CLASS","IS_LEAF","ITEM_CLASS","ITEM_WITH_CHECKBOX_CLASS","ITEM_WITH_CUSTOM_EXPANDER_ICON_CLASS","CUSTOM_EXPANDER_ICON_ITEM_CONTAINER_CLASS","ITEM_WITHOUT_CHECKBOX_CLASS","ITEM_DATA_KEY","TOGGLE_ITEM_VISIBILITY_CLASS","CUSTOM_COLLAPSE_ICON_CLASS","CUSTOM_EXPAND_ICON_CLASS","LOAD_INDICATOR_CLASS","LOAD_INDICATOR_WRAPPER_CLASS","TOGGLE_ITEM_VISIBILITY_OPENED_CLASS","SELECT_ALL_ITEM_CLASS","INVISIBLE_STATE_CLASS","DISABLED_STATE_CLASS","SELECTED_ITEM_CLASS","EXPAND_EVENT_NAMESPACE","DATA_ITEM_ID","ITEM_URL_CLASS","CHECK_BOX_CLASS","CHECK_BOX_ICON_CLASS","ROOT_NODE_CLASS","EXPANDER_ICON_STUB_CLASS","TreeViewBase","_supportedKeys","click","e","focusedElement","option","$itemElement","length","target","currentTarget","_itemClickHandler","children","expandEventName","_getEventNameByOption","expandByClick","_expandEventHandler","select","preventDefault","$focusedElement","checkboxInstance","_getCheckBoxInstance","currentState","_updateItemSelection","find","get","toggleExpandedNestedItems","state","$rootElement","rootItem","_getItemData","_toggleExpandedNestedItems","enter","_showCheckboxes","space","asterisk","bind","minus","items","i","len","item","node","_dataAdapter","getNodeByItem","_toggleExpandedState","_getNodeElement","cache","key","_encodeString","internalFields","$nodeByKey","$element","$node","attr","element","querySelector","_widgetClass","_getDefaultOptions","defaultOptions","animationEnabled","dataStructure","deferRendering","expandAllEnabled","hasItemsExpr","selectNodesRecursive","expandNodesRecursive","showCheckBoxesMode","expandIcon","collapseIcon","selectAllText","format","onItemSelectionChanged","onItemExpanded","onItemCollapsed","scrollDirection","useNativeScrolling","virtualModeEnabled","rootValue","focusStateEnabled","selectionMode","expandEvent","selectByClick","createChildren","onSelectAllValueChanged","_supportItemUrl","integrationOptions","useDeferUpdateForTemplates","_defaultOptionsRules","concat","device","nativeScrolling","options","_initSelectedItems","_syncSelectionOptions","resolve","promise","_fireSelectionChanged","_createActionByOption","excludeValidators","_createSelectAllValueChangedAction","_selectAllValueChangedAction","_fireSelectAllValueChanged","value","_this$_selectAllValue","call","_checkBoxModeChange","previousValue","searchEnabled","previousSelectAllEnabled","_selectAllEnabled","previousItemsContainer","_itemContainer","_detachClickEvent","_detachExpandEvent","selectAllExists","_$selectAllItem","_renderSelectAllItem","_this$_$selectAllItem","remove","_removeSelection","that","getFullData","_","_hasChildren","toggleSelection","_optionChanged","args","dxCheckBox","_invalidate","getScrollable","_initDataAdapter","_filter","_initAccessors","repaint","_attachExpandEvent","setOption","_initDataSource","_useCustomChildrenLoader","_loadChildrenByCustomLoader","done","newItems","_isVirtualMode","_initVirtualMode","filter","custom","_dataSource","internal","_isDataStructurePlain","parentNode","invocationResult","Array","isArray","then","_combineFilter","_dataSourceLoadErrorHandler","_renderEmptyMessage","_init","_activeStateUnit","_initStoreChangeHandlers","_dataSourceChangedHandler","_initialized","_removeTreeViewLoadIndicator","_treeViewLoadIndicator","_createTreeViewLoadIndicator","addClass","_createComponent","_dataSourceLoadingChangedHandler","isLoading","resultFilter","isLoaded","$wrapper","appendTo","itemsContainer","append","store","on","newItem","addItem","isFiltered","_updateLevel","_parentIdGetter","removedKey","getNodeByKey","getIndexByKey","_markChildrenItemsToRemove","_removeItems","removeItem","keys","childrenKeys","counter","index","splice","parentId","$container","_getContainerByParentKey","_renderItems","getChildrenNodes","_getOldContainer","scrollable","content","_renderNodeContainer","_isRootLevel","_renderScrollableContainer","_getAccessors","accessors","push","_getDataAdapterOptions","_this$_dataSource","_this$_dataSource2","_this$_dataSource2$lo","multipleSelection","_isSingleSelection","recursiveSelection","_isRecursiveSelection","recursiveExpansion","selectionRequired","dataType","sort","langParams","loadOptions","_initMarkup","getRootNodes","_setAriaRole","setAria","role","_renderContentImpl","$nodeContainer","_fireContentReadyAction","dataSource","getDataSource","skipContentReadyAction","_skipContentReadyAndItemExpanded","update","_scrollable","useNative","direction","useKeyboard","$parent","itemData","_expandedGetter","_createDOMElement","_node$internalFields","prependTo","attrs","label","_displayGetter","level","_getLevel","hasChildNodes","expanded","parent","hasClass","parseInt","_hasCustomExpanderIcons","mode","nodes","_renderItem","_renderedItemsCount","nodeIndex","nodeData","showCheckBox","toggleClass","visible","selected","_toggleSelectedClass","disabled","_getNode","parentKey","_renderChildren","_setAriaSelectionAttribute","_addLeafClass","_getItem","_renderCustomExpanderIcons","_renderDefaultExpanderIcons","_shouldRenderSublevel","_loadSublevel","childNodes","_renderSublevel","_getActualNode","cachedNode","_hasItemsGetter","deferred","childrenNodes","_getChildNodes","_loadNestedItems","getNodesByItems","_getItemExtraPropNames","_addContent","html","url","link","_getLinkContainer","_getIconContainer","_getTextContainer","_postprocessRenderItem","itemElement","_renderCheckBox","$nestedNodeContainer","childNodesByChildrenKeys","childNode","indexOf","firstChild","_updateParentsState","_normalizeIconState","_executeItemRenderAction","itemIndex","_getItemRenderAction","getPublicNode","$nodeElement","expandedEventName","$itemsContainer","_itemSelector","off","event","identifier","isElementNode","_getNodeByElement","closest","_decodeString","reject","_nodeHasRenderedChildren","_createLoadIndicator","toggleExpansion","_updateExpandedItemsUI","not","eq","$treeviewItem","$icon","hide","_renderExpanderIcon","iconClass","_renderToggleItemVisibilityIconClick","$treeViewItem","$expandIcon","$collapseIcon","isNodeExpanded","_toggleCustomExpanderIcons","eventName","NAME","toggle","isHiddenNode","is","$item","$childExpandIcons","$childCollapseIcons","nodeContainerExists","completionCallback","_animateNodeContainer","_loadNestedItemsWithUpdate","actualNodeData","publicNode","_areNodesExists","_appendItems","load","keyOfRootItem","keyOf","fullData","nodeHeight","stop","animate","type","duration","from","maxHeight","to","complete","css","_fireExpandedStateUpdatedEvent","isExpanded","optionName","_itemDXEventHandler","_itemEventHandler","hasNewItems","$loadIndicator","_LoadIndicator$getIns","getInstance","$toggleItem","show","removeClass","_emptyMessageContainer","_renderContent","_contentAlreadyRendered","first","isAllSelected","elementAttr","text","onValueChanged","_onSelectAllCheckboxValueChanged","onInitialized","_ref","component","registerKeyHandler","before","_toggleSelectAll","toggleSelectAll","_updateItemsUI","$checkbox","_changeCheckboxValue","_disabledGetter","_toggleNodeDisabledState","toggleNodeDisabledState","checkbox","_itemOptionChanged","property","_isLastSelectedBranch","selectedNodesKeys","deep","keyIndex","_isLastRequired","isSingleMode","getSelectedNodeKeys","slice","dxEvent","selectedKeys","_fireItemSelectionChanged","needFireSelectAllChanged","initiator","_findItemElementByItem","handler","getData","nodeSelection","selectAllCheckbox","$parentNode","parents","_this$_getCheckBoxIns","parentValue","_itemEventHandlerImpl","action","actionArgs","_extendActionArgs","_itemContextMenuHandler","_createEventHandler","_itemHoldHandler","_itemClass","_itemDataKey","_attachClickEvent","$itemContainer","clickEventNamespace","itemSelector","pointerDownEventNamespace","nodeSelector","_getItemClickEventData","_itemPointerDownHandler","down","_itemClick","getElementsByClassName","beforeExecute","isDefaultPrevented","_updateSelectionToFirstItem","$items","startIndex","_updateSelectionToLastItem","focus","trigger","_focusInHandler","_updateFocusState","isSelectAllItem","clearTimeout","_setFocusedItemTimeout","setTimeout","_setFocusedItem","$activeItem","_getActiveItem","$target","_findNonDisabledNodes","$nodes","_moveFocus","location","FOCUS_LEFT","FOCUS_RIGHT","_nodeElements","$prevItem","_prevItem","prevItemElement","_getNodeItemElement","scrollToElement","shiftKey","$nextItem","_nextItem","nextItemElement","$firstItem","$lastItem","last","_expandFocusedContainer","_collapseFocusedContainer","apply","arguments","$focusedNode","_getClosestNonDisabledNode","nodeElement","collapsedNode","encodeURI","decodeURI","updateDimensions","resolveWith","selectItem","unselectItem","expandItem","collapseItem","getNodes","getTreeNodes","getSelectedNodes","map","getSelectedNodesKeys","selectAll","unselectAll","_allItemsExpandedHandler","expandAll","expandingPromises","forEach","Promise","allSettled","_this$_allItemsExpand","collapseAll","getExpandedNodesKeys","scrollToItem","keyOrItemOrElement","nodeKeysToExpand","scrollCallback","_expandNodes","reverse","always","scrollToElementTopLeft","targetElement","rtlEnabled","targetLocation","top","left","relativeOffset","containerElement","container","offsetWidth","clientWidth","scrollTo","keysToExpand","resultCallback","callbacksByNodes","fail","_dispose"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/tree_view/m_tree_view.base.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/tree_view/m_tree_view.base.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    fx\r\n} from \"../../../common/core/animation\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../common/core/events/click\";\r\nimport eventsEngine from \"../../../common/core/events/core/events_engine\";\r\nimport {\r\n    name as dblclickEvent\r\n} from \"../../../common/core/events/double_click\";\r\nimport pointerEvents from \"../../../common/core/events/pointer\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../common/core/events/utils/index\";\r\nimport messageLocalization from \"../../../common/core/localization/message\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    Deferred,\r\n    fromPromise,\r\n    when\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getImageContainer\r\n} from \"../../../core/utils/icon\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getHeight\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    isDefined,\r\n    isFunction,\r\n    isPrimitive,\r\n    isString\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport CheckBox from \"../../../ui/check_box\";\r\nimport LoadIndicator from \"../../../ui/load_indicator\";\r\nimport supportUtils from \"../../core/utils/m_support\";\r\nimport HierarchicalCollectionWidget from \"../../ui/hierarchical_collection/m_hierarchical_collection_widget\";\r\nimport {\r\n    DIRECTION_HORIZONTAL,\r\n    DIRECTION_VERTICAL,\r\n    SCROLLABLE_CONTENT_CLASS\r\n} from \"../../ui/scroll_view/consts\";\r\nimport Scrollable from \"../../ui/scroll_view/m_scrollable\";\r\nimport {\r\n    getRelativeOffset\r\n} from \"../../ui/scroll_view/utils/get_relative_offset\";\r\nconst WIDGET_CLASS = \"dx-treeview\";\r\nconst NODE_CLASS = `${WIDGET_CLASS}-node`;\r\nconst NODE_CONTAINER_CLASS = `${NODE_CLASS}-container`;\r\nconst NODE_LOAD_INDICATOR_CLASS = `${NODE_CLASS}-loadindicator`;\r\nconst OPENED_NODE_CONTAINER_CLASS = `${NODE_CLASS}-container-opened`;\r\nconst IS_LEAF = `${NODE_CLASS}-is-leaf`;\r\nconst ITEM_CLASS = `${WIDGET_CLASS}-item`;\r\nconst ITEM_WITH_CHECKBOX_CLASS = `${ITEM_CLASS}-with-checkbox`;\r\nconst ITEM_WITH_CUSTOM_EXPANDER_ICON_CLASS = `${ITEM_CLASS}-with-custom-expander-icon`;\r\nconst CUSTOM_EXPANDER_ICON_ITEM_CONTAINER_CLASS = `${WIDGET_CLASS}-custom-expander-icon-item-container`;\r\nconst ITEM_WITHOUT_CHECKBOX_CLASS = `${ITEM_CLASS}-without-checkbox`;\r\nconst ITEM_DATA_KEY = `${ITEM_CLASS}-data`;\r\nconst TOGGLE_ITEM_VISIBILITY_CLASS = `${WIDGET_CLASS}-toggle-item-visibility`;\r\nconst CUSTOM_COLLAPSE_ICON_CLASS = `${WIDGET_CLASS}-custom-collapse-icon`;\r\nconst CUSTOM_EXPAND_ICON_CLASS = `${WIDGET_CLASS}-custom-expand-icon`;\r\nconst LOAD_INDICATOR_CLASS = `${WIDGET_CLASS}-loadindicator`;\r\nconst LOAD_INDICATOR_WRAPPER_CLASS = `${WIDGET_CLASS}-loadindicator-wrapper`;\r\nconst TOGGLE_ITEM_VISIBILITY_OPENED_CLASS = `${WIDGET_CLASS}-toggle-item-visibility-opened`;\r\nconst SELECT_ALL_ITEM_CLASS = `${WIDGET_CLASS}-select-all-item`;\r\nconst INVISIBLE_STATE_CLASS = \"dx-state-invisible\";\r\nconst DISABLED_STATE_CLASS = \"dx-state-disabled\";\r\nconst SELECTED_ITEM_CLASS = \"dx-state-selected\";\r\nconst EXPAND_EVENT_NAMESPACE = \"dxTreeView_expand\";\r\nconst DATA_ITEM_ID = \"data-item-id\";\r\nconst ITEM_URL_CLASS = \"dx-item-url\";\r\nconst CHECK_BOX_CLASS = \"dx-checkbox\";\r\nconst CHECK_BOX_ICON_CLASS = \"dx-checkbox-icon\";\r\nconst ROOT_NODE_CLASS = `${WIDGET_CLASS}-root-node`;\r\nconst EXPANDER_ICON_STUB_CLASS = `${WIDGET_CLASS}-expander-icon-stub`;\r\nclass TreeViewBase extends HierarchicalCollectionWidget {\r\n    _supportedKeys() {\r\n        const click = e => {\r\n            const {\r\n                focusedElement: focusedElement\r\n            } = this.option();\r\n            const $itemElement = $(focusedElement);\r\n            if (!$itemElement.length) {\r\n                return\r\n            }\r\n            e.target = $itemElement;\r\n            e.currentTarget = $itemElement;\r\n            this._itemClickHandler(e, $itemElement.children(`.${ITEM_CLASS}`));\r\n            const expandEventName = this._getEventNameByOption(this.option(\"expandEvent\"));\r\n            const expandByClick = expandEventName === addNamespace(clickEventName, \"dxTreeView_expand\");\r\n            if (expandByClick) {\r\n                this._expandEventHandler(e)\r\n            }\r\n        };\r\n        const select = e => {\r\n            e.preventDefault();\r\n            const {\r\n                focusedElement: focusedElement\r\n            } = this.option();\r\n            const $focusedElement = $(focusedElement);\r\n            const checkboxInstance = this._getCheckBoxInstance($focusedElement);\r\n            if (!checkboxInstance.option(\"disabled\")) {\r\n                const currentState = checkboxInstance.option(\"value\");\r\n                this._updateItemSelection(!currentState, $focusedElement.find(`.${ITEM_CLASS}`).get(0), true)\r\n            }\r\n        };\r\n        const toggleExpandedNestedItems = function(state, e) {\r\n            if (!this.option(\"expandAllEnabled\")) {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            const $rootElement = $(this.option(\"focusedElement\"));\r\n            if (!$rootElement.length) {\r\n                return\r\n            }\r\n            const rootItem = this._getItemData($rootElement.find(`.${ITEM_CLASS}`));\r\n            this._toggleExpandedNestedItems([rootItem], state)\r\n        };\r\n        return _extends({}, super._supportedKeys(), {\r\n            enter: this._showCheckboxes() ? select : click,\r\n            space: this._showCheckboxes() ? select : click,\r\n            asterisk: toggleExpandedNestedItems.bind(this, true),\r\n            minus: toggleExpandedNestedItems.bind(this, false)\r\n        })\r\n    }\r\n    _toggleExpandedNestedItems(items, state) {\r\n        if (!items) {\r\n            return\r\n        }\r\n        for (let i = 0, len = items.length; i < len; i++) {\r\n            const item = items[i];\r\n            const node = this._dataAdapter.getNodeByItem(item);\r\n            this._toggleExpandedState(node, state);\r\n            this._toggleExpandedNestedItems(item.items, state)\r\n        }\r\n    }\r\n    _getNodeElement(node, cache) {\r\n        const key = this._encodeString(node.internalFields.key);\r\n        if (cache) {\r\n            if (!cache.$nodeByKey) {\r\n                cache.$nodeByKey = {};\r\n                this.$element().find(`.${NODE_CLASS}`).each((function() {\r\n                    const $node = $(this);\r\n                    const key = $node.attr(DATA_ITEM_ID);\r\n                    cache.$nodeByKey[key] = $node\r\n                }))\r\n            }\r\n            return cache.$nodeByKey[key] || $()\r\n        }\r\n        const element = this.$element().get(0).querySelector(`[${DATA_ITEM_ID}=\"${key}\"]`);\r\n        return $(element)\r\n    }\r\n    _widgetClass() {\r\n        return WIDGET_CLASS\r\n    }\r\n    _getDefaultOptions() {\r\n        const defaultOptions = extend(super._getDefaultOptions(), {\r\n            animationEnabled: true,\r\n            dataStructure: \"tree\",\r\n            deferRendering: true,\r\n            expandAllEnabled: false,\r\n            hasItemsExpr: \"hasItems\",\r\n            selectNodesRecursive: true,\r\n            expandNodesRecursive: true,\r\n            showCheckBoxesMode: \"none\",\r\n            expandIcon: null,\r\n            collapseIcon: null,\r\n            selectAllText: messageLocalization.format(\"dxList-selectAll\"),\r\n            onItemSelectionChanged: null,\r\n            onItemExpanded: null,\r\n            onItemCollapsed: null,\r\n            scrollDirection: \"vertical\",\r\n            useNativeScrolling: true,\r\n            virtualModeEnabled: false,\r\n            rootValue: 0,\r\n            focusStateEnabled: false,\r\n            selectionMode: \"multiple\",\r\n            expandEvent: \"dblclick\",\r\n            selectByClick: false,\r\n            createChildren: null,\r\n            onSelectAllValueChanged: null,\r\n            _supportItemUrl: false\r\n        });\r\n        return extend(true, defaultOptions, {\r\n            integrationOptions: {\r\n                useDeferUpdateForTemplates: false\r\n            }\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device: () => !supportUtils.nativeScrolling,\r\n            options: {\r\n                useNativeScrolling: false\r\n            }\r\n        }])\r\n    }\r\n    _initSelectedItems() {}\r\n    _syncSelectionOptions() {\r\n        return Deferred().resolve().promise()\r\n    }\r\n    _fireSelectionChanged() {\r\n        this._createActionByOption(\"onSelectionChanged\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        })()\r\n    }\r\n    _createSelectAllValueChangedAction() {\r\n        this._selectAllValueChangedAction = this._createActionByOption(\"onSelectAllValueChanged\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        })\r\n    }\r\n    _fireSelectAllValueChanged(value) {\r\n        var _this$_selectAllValue;\r\n        null === (_this$_selectAllValue = this._selectAllValueChangedAction) || void 0 === _this$_selectAllValue || _this$_selectAllValue.call(this, {\r\n            value: value\r\n        })\r\n    }\r\n    _checkBoxModeChange(value, previousValue) {\r\n        const searchEnabled = this.option(\"searchEnabled\");\r\n        const previousSelectAllEnabled = this._selectAllEnabled(previousValue);\r\n        const previousItemsContainer = this._itemContainer(searchEnabled, previousSelectAllEnabled);\r\n        this._detachClickEvent(previousItemsContainer);\r\n        this._detachExpandEvent(previousItemsContainer);\r\n        if (\"none\" === previousValue || \"none\" === value) {\r\n            return\r\n        }\r\n        const selectAllExists = this._$selectAllItem && this._$selectAllItem.length;\r\n        switch (value) {\r\n            case \"selectAll\":\r\n                if (!selectAllExists) {\r\n                    this._createSelectAllValueChangedAction();\r\n                    this._renderSelectAllItem()\r\n                }\r\n                break;\r\n            case \"normal\":\r\n                if (selectAllExists) {\r\n                    var _this$_$selectAllItem;\r\n                    null === (_this$_$selectAllItem = this._$selectAllItem) || void 0 === _this$_$selectAllItem || _this$_$selectAllItem.remove();\r\n                    delete this._$selectAllItem\r\n                }\r\n        }\r\n    }\r\n    _removeSelection() {\r\n        const that = this;\r\n        each(this._dataAdapter.getFullData(), ((_, node) => {\r\n            if (!that._hasChildren(node)) {\r\n                return\r\n            }\r\n            that._dataAdapter.toggleSelection(node.internalFields.key, false, true)\r\n        }))\r\n    }\r\n    _optionChanged(args) {\r\n        const {\r\n            name: name,\r\n            value: value,\r\n            previousValue: previousValue\r\n        } = args;\r\n        switch (name) {\r\n            case \"selectAllText\":\r\n                if (this._$selectAllItem) {\r\n                    this._$selectAllItem.dxCheckBox(\"instance\").option(\"text\", value)\r\n                }\r\n                break;\r\n            case \"showCheckBoxesMode\":\r\n                this._checkBoxModeChange(value, previousValue);\r\n                this._invalidate();\r\n                break;\r\n            case \"scrollDirection\":\r\n                this.getScrollable().option(\"direction\", value);\r\n                break;\r\n            case \"useNativeScrolling\":\r\n                this.getScrollable().option(\"useNative\", value);\r\n                break;\r\n            case \"items\":\r\n                delete this._$selectAllItem;\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"dataSource\":\r\n                super._optionChanged(args);\r\n                this._initDataAdapter();\r\n                this._filter = {};\r\n                break;\r\n            case \"hasItemsExpr\":\r\n                this._initAccessors();\r\n                this.repaint();\r\n                break;\r\n            case \"expandEvent\":\r\n                this._attachExpandEvent();\r\n                break;\r\n            case \"deferRendering\":\r\n            case \"dataStructure\":\r\n            case \"rootValue\":\r\n            case \"createChildren\":\r\n            case \"expandNodesRecursive\":\r\n            case \"onItemSelectionChanged\":\r\n            case \"onItemExpanded\":\r\n            case \"onItemCollapsed\":\r\n            case \"expandAllEnabled\":\r\n            case \"animationEnabled\":\r\n            case \"virtualModeEnabled\":\r\n            case \"selectByClick\":\r\n            case \"_supportItemUrl\":\r\n                break;\r\n            case \"selectionMode\":\r\n                this._initDataAdapter();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"onSelectAllValueChanged\":\r\n                this._createSelectAllValueChangedAction();\r\n                break;\r\n            case \"selectNodesRecursive\":\r\n                this._dataAdapter.setOption(\"recursiveSelection\", args.value);\r\n                this.repaint();\r\n                break;\r\n            case \"expandIcon\":\r\n            case \"collapseIcon\":\r\n                this.repaint();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _initDataSource() {\r\n        if (this._useCustomChildrenLoader()) {\r\n            this._loadChildrenByCustomLoader(null).done((newItems => {\r\n                if (newItems && newItems.length) {\r\n                    this.option(\"items\", newItems)\r\n                }\r\n            }))\r\n        } else {\r\n            super._initDataSource();\r\n            this._isVirtualMode() && this._initVirtualMode()\r\n        }\r\n    }\r\n    _initVirtualMode() {\r\n        const filter = this._filter;\r\n        if (!filter.custom) {\r\n            filter.custom = this._dataSource.filter()\r\n        }\r\n        if (!filter.internal) {\r\n            filter.internal = [this.option(\"parentIdExpr\"), this.option(\"rootValue\")]\r\n        }\r\n    }\r\n    _useCustomChildrenLoader() {\r\n        return isFunction(this.option(\"createChildren\")) && this._isDataStructurePlain()\r\n    }\r\n    _loadChildrenByCustomLoader(parentNode) {\r\n        const invocationResult = this.option(\"createChildren\").call(this, parentNode);\r\n        if (Array.isArray(invocationResult)) {\r\n            return Deferred().resolve(invocationResult).promise()\r\n        }\r\n        if (invocationResult && isFunction(invocationResult.then)) {\r\n            return fromPromise(invocationResult)\r\n        }\r\n        return Deferred().resolve([]).promise()\r\n    }\r\n    _combineFilter() {\r\n        if (!this._filter.custom || !this._filter.custom.length) {\r\n            return this._filter.internal\r\n        }\r\n        return [this._filter.custom, this._filter.internal]\r\n    }\r\n    _dataSourceLoadErrorHandler() {\r\n        this._renderEmptyMessage()\r\n    }\r\n    _init() {\r\n        this._filter = {};\r\n        super._init();\r\n        this._activeStateUnit = `.${ITEM_CLASS}`;\r\n        this._initStoreChangeHandlers()\r\n    }\r\n    _dataSourceChangedHandler(newItems) {\r\n        const items = this.option(\"items\");\r\n        if (this._initialized && this._isVirtualMode() && items.length) {\r\n            return\r\n        }\r\n        this.option(\"items\", newItems)\r\n    }\r\n    _removeTreeViewLoadIndicator() {\r\n        if (!this._treeViewLoadIndicator) {\r\n            return\r\n        }\r\n        this._treeViewLoadIndicator.remove();\r\n        this._treeViewLoadIndicator = null\r\n    }\r\n    _createTreeViewLoadIndicator() {\r\n        this._treeViewLoadIndicator = $(\"<div>\").addClass(LOAD_INDICATOR_CLASS);\r\n        this._createComponent(this._treeViewLoadIndicator, LoadIndicator, {});\r\n        return this._treeViewLoadIndicator\r\n    }\r\n    _dataSourceLoadingChangedHandler(isLoading) {\r\n        let resultFilter;\r\n        if (this._isVirtualMode()) {\r\n            resultFilter = this._combineFilter();\r\n            this._dataSource.filter(resultFilter)\r\n        }\r\n        if (isLoading && !this._dataSource.isLoaded()) {\r\n            this.option(\"items\", []);\r\n            const $wrapper = $(\"<div>\").addClass(LOAD_INDICATOR_WRAPPER_CLASS);\r\n            this._createTreeViewLoadIndicator().appendTo($wrapper);\r\n            this.itemsContainer().append($wrapper);\r\n            if (this._isVirtualMode() && this._dataSource.filter() !== resultFilter) {\r\n                this._dataSource.filter([])\r\n            }\r\n        } else {\r\n            this._removeTreeViewLoadIndicator()\r\n        }\r\n    }\r\n    _initStoreChangeHandlers() {\r\n        const {\r\n            dataStructure: dataStructure\r\n        } = this.option();\r\n        if (\"plain\" !== dataStructure) {\r\n            return\r\n        }\r\n        this._dataSource && this._dataSource.store().on(\"inserted\", (newItem => {\r\n            this.option().items = this.option(\"items\").concat(newItem);\r\n            this._dataAdapter.addItem(newItem);\r\n            if (!this._dataAdapter.isFiltered(newItem)) {\r\n                return\r\n            }\r\n            this._updateLevel(this._parentIdGetter(newItem))\r\n        })).on(\"removed\", (removedKey => {\r\n            const node = this._dataAdapter.getNodeByKey(removedKey);\r\n            if (isDefined(node)) {\r\n                this.option(\"items\")[this._dataAdapter.getIndexByKey(node.internalFields.key)] = 0;\r\n                this._markChildrenItemsToRemove(node);\r\n                this._removeItems();\r\n                this._dataAdapter.removeItem(removedKey);\r\n                this._updateLevel(this._parentIdGetter(node))\r\n            }\r\n        }))\r\n    }\r\n    _markChildrenItemsToRemove(node) {\r\n        const keys = node.internalFields.childrenKeys;\r\n        each(keys, ((_, key) => {\r\n            this.option(\"items\")[this._dataAdapter.getIndexByKey(key)] = 0;\r\n            this._markChildrenItemsToRemove(this._dataAdapter.getNodeByKey(key))\r\n        }))\r\n    }\r\n    _removeItems() {\r\n        const items = extend(true, [], this.option(\"items\"));\r\n        let counter = 0;\r\n        each(items, ((index, item) => {\r\n            if (!item) {\r\n                this.option(\"items\").splice(index - counter, 1);\r\n                counter++\r\n            }\r\n        }))\r\n    }\r\n    _updateLevel(parentId) {\r\n        const $container = this._getContainerByParentKey(parentId);\r\n        this._renderItems($container, this._dataAdapter.getChildrenNodes(parentId))\r\n    }\r\n    _getOldContainer($itemElement) {\r\n        if ($itemElement.length) {\r\n            return $itemElement.children(`.${NODE_CONTAINER_CLASS}`)\r\n        }\r\n        const scrollable = this.getScrollable();\r\n        if (scrollable) {\r\n            return $(scrollable.content()).children()\r\n        }\r\n        return $()\r\n    }\r\n    _getContainerByParentKey(parentId) {\r\n        const node = this._dataAdapter.getNodeByKey(parentId);\r\n        const $itemElement = node ? this._getNodeElement(node) : [];\r\n        this._getOldContainer($itemElement).remove();\r\n        const $container = this._renderNodeContainer($itemElement);\r\n        if (this._isRootLevel(parentId)) {\r\n            const scrollable = this.getScrollable();\r\n            if (!scrollable) {\r\n                this._renderScrollableContainer()\r\n            }\r\n            $(scrollable.content()).append($container)\r\n        }\r\n        return $container\r\n    }\r\n    _isRootLevel(parentId) {\r\n        return parentId === this.option(\"rootValue\")\r\n    }\r\n    _getAccessors() {\r\n        const accessors = super._getAccessors();\r\n        accessors.push(\"hasItems\");\r\n        return accessors\r\n    }\r\n    _getDataAdapterOptions() {\r\n        var _this$_dataSource, _this$_dataSource2, _this$_dataSource2$lo;\r\n        return {\r\n            rootValue: this.option(\"rootValue\"),\r\n            multipleSelection: !this._isSingleSelection(),\r\n            recursiveSelection: this._isRecursiveSelection(),\r\n            recursiveExpansion: this.option(\"expandNodesRecursive\"),\r\n            selectionRequired: this.option(\"selectionRequired\"),\r\n            dataType: this.option(\"dataStructure\"),\r\n            sort: null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.sort(),\r\n            langParams: null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 || null === (_this$_dataSource2$lo = _this$_dataSource2.loadOptions) || void 0 === _this$_dataSource2$lo || null === (_this$_dataSource2$lo = _this$_dataSource2$lo.call(_this$_dataSource2)) || void 0 === _this$_dataSource2$lo ? void 0 : _this$_dataSource2$lo.langParams\r\n        }\r\n    }\r\n    _initMarkup() {\r\n        this._renderScrollableContainer();\r\n        this._renderEmptyMessage(this._dataAdapter.getRootNodes());\r\n        super._initMarkup();\r\n        this._setAriaRole()\r\n    }\r\n    _setAriaRole() {\r\n        const {\r\n            items: items\r\n        } = this.option();\r\n        if (items && items.length) {\r\n            this.setAria({\r\n                role: \"tree\"\r\n            })\r\n        }\r\n    }\r\n    _renderContentImpl() {\r\n        const $nodeContainer = this._renderNodeContainer();\r\n        $(this.getScrollable().content()).append($nodeContainer);\r\n        if (!this.option(\"items\") || !this.option(\"items\").length) {\r\n            return\r\n        }\r\n        this._renderItems($nodeContainer, this._dataAdapter.getRootNodes());\r\n        this._attachExpandEvent();\r\n        if (this._selectAllEnabled()) {\r\n            this._createSelectAllValueChangedAction();\r\n            this._renderSelectAllItem($nodeContainer)\r\n        }\r\n    }\r\n    _isVirtualMode() {\r\n        return this.option(\"virtualModeEnabled\") && this._isDataStructurePlain() && !!this.option(\"dataSource\")\r\n    }\r\n    _isDataStructurePlain() {\r\n        const {\r\n            dataStructure: dataStructure\r\n        } = this.option();\r\n        return \"plain\" === dataStructure\r\n    }\r\n    _fireContentReadyAction() {\r\n        const dataSource = this.getDataSource();\r\n        const skipContentReadyAction = dataSource && !dataSource.isLoaded() || this._skipContentReadyAndItemExpanded;\r\n        const scrollable = this.getScrollable();\r\n        if (scrollable && hasWindow()) {\r\n            scrollable.update()\r\n        }\r\n        if (!skipContentReadyAction) {\r\n            super._fireContentReadyAction()\r\n        }\r\n        if (scrollable && hasWindow()) {\r\n            scrollable.update()\r\n        }\r\n    }\r\n    _renderScrollableContainer() {\r\n        this._scrollable = this._createComponent($(\"<div>\").appendTo(this.$element()), Scrollable, {\r\n            useNative: this.option(\"useNativeScrolling\"),\r\n            direction: this.option(\"scrollDirection\"),\r\n            useKeyboard: false\r\n        })\r\n    }\r\n    _renderNodeContainer($parent) {\r\n        const $container = $(\"<ul>\").addClass(NODE_CONTAINER_CLASS);\r\n        this.setAria(\"role\", \"group\", $container);\r\n        if (null !== $parent && void 0 !== $parent && $parent.length) {\r\n            const itemData = this._getItemData($parent.children(`.${ITEM_CLASS}`));\r\n            if (this._expandedGetter(itemData)) {\r\n                $container.addClass(OPENED_NODE_CONTAINER_CLASS)\r\n            }\r\n            $container.appendTo($parent)\r\n        }\r\n        return $container\r\n    }\r\n    _createDOMElement($nodeContainer, node) {\r\n        var _node$internalFields;\r\n        const $node = $(\"<li>\").addClass(NODE_CLASS).attr(DATA_ITEM_ID, this._encodeString(node.internalFields.key)).prependTo($nodeContainer);\r\n        const attrs = {\r\n            role: \"treeitem\",\r\n            label: this._displayGetter(node.internalFields.item) || \"\",\r\n            level: this._getLevel($nodeContainer)\r\n        };\r\n        const hasChildNodes = !!(null !== node && void 0 !== node && null !== (_node$internalFields = node.internalFields) && void 0 !== _node$internalFields && null !== (_node$internalFields = _node$internalFields.childrenKeys) && void 0 !== _node$internalFields && _node$internalFields.length);\r\n        if (hasChildNodes) {\r\n            attrs.expanded = node.internalFields.expanded || false\r\n        }\r\n        this.setAria(attrs, $node);\r\n        return $node\r\n    }\r\n    _getLevel($nodeContainer) {\r\n        const parent = $nodeContainer.parent();\r\n        return parent.hasClass(\"dx-scrollable-content\") ? 1 : parseInt(parent.attr(\"aria-level\")) + 1\r\n    }\r\n    _showCheckboxes() {\r\n        const {\r\n            showCheckBoxesMode: showCheckBoxesMode\r\n        } = this.option();\r\n        return \"none\" !== showCheckBoxesMode\r\n    }\r\n    _hasCustomExpanderIcons() {\r\n        return this.option(\"expandIcon\") || this.option(\"collapseIcon\")\r\n    }\r\n    _selectAllEnabled(showCheckBoxesMode) {\r\n        const mode = showCheckBoxesMode ?? this.option(\"showCheckBoxesMode\");\r\n        return \"selectAll\" === mode && !this._isSingleSelection()\r\n    }\r\n    _renderItems($nodeContainer, nodes) {\r\n        const length = nodes.length - 1;\r\n        for (let i = length; i >= 0; i--) {\r\n            this._renderItem(i, nodes[i], $nodeContainer)\r\n        }\r\n        this._renderedItemsCount += nodes.length\r\n    }\r\n    _renderItem(nodeIndex, node, $nodeContainer) {\r\n        const $node = this._createDOMElement($nodeContainer, node);\r\n        const nodeData = node.internalFields;\r\n        const showCheckBox = this._showCheckboxes();\r\n        $node.addClass(showCheckBox ? ITEM_WITH_CHECKBOX_CLASS : ITEM_WITHOUT_CHECKBOX_CLASS);\r\n        $node.toggleClass(\"dx-state-invisible\", false === nodeData.item.visible);\r\n        if (this._hasCustomExpanderIcons()) {\r\n            $node.addClass(ITEM_WITH_CUSTOM_EXPANDER_ICON_CLASS);\r\n            $nodeContainer.addClass(CUSTOM_EXPANDER_ICON_ITEM_CONTAINER_CLASS)\r\n        }\r\n        this.setAria(\"selected\", nodeData.selected, $node);\r\n        this._toggleSelectedClass($node, nodeData.selected);\r\n        if (nodeData.disabled) {\r\n            this.setAria(\"disabled\", nodeData.disabled, $node)\r\n        }\r\n        super._renderItem(this._renderedItemsCount + nodeIndex, nodeData.item, $node);\r\n        const parent = this._getNode(node.internalFields.parentKey);\r\n        if (!parent) {\r\n            $node.addClass(ROOT_NODE_CLASS)\r\n        }\r\n        if (false !== nodeData.item.visible) {\r\n            this._renderChildren($node, node)\r\n        }\r\n    }\r\n    _setAriaSelectionAttribute() {}\r\n    _renderChildren($node, node) {\r\n        if (!this._hasChildren(node)) {\r\n            this._addLeafClass($node);\r\n            $(\"<div>\").addClass(EXPANDER_ICON_STUB_CLASS).appendTo(this._getItem($node));\r\n            return\r\n        }\r\n        if (this._hasCustomExpanderIcons()) {\r\n            this._renderCustomExpanderIcons($node, node)\r\n        } else {\r\n            this._renderDefaultExpanderIcons($node, node)\r\n        }\r\n        if (this._shouldRenderSublevel(node.internalFields.expanded)) {\r\n            this._loadSublevel(node).done((childNodes => {\r\n                this._renderSublevel($node, this._getActualNode(node), childNodes)\r\n            }))\r\n        }\r\n    }\r\n    _shouldRenderSublevel(expanded) {\r\n        return expanded || !this.option(\"deferRendering\")\r\n    }\r\n    _getActualNode(cachedNode) {\r\n        return this._dataAdapter.getNodeByKey(cachedNode.internalFields.key)\r\n    }\r\n    _hasChildren(node) {\r\n        if (this._isVirtualMode() || this._useCustomChildrenLoader()) {\r\n            return false !== this._hasItemsGetter(node.internalFields.item)\r\n        }\r\n        return super._hasChildren(node)\r\n    }\r\n    _loadSublevel(node) {\r\n        const deferred = Deferred();\r\n        const childrenNodes = this._getChildNodes(node);\r\n        if (childrenNodes.length) {\r\n            deferred.resolve(childrenNodes)\r\n        } else {\r\n            this._loadNestedItems(node).done((items => {\r\n                deferred.resolve(this._dataAdapter.getNodesByItems(items))\r\n            }))\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    _getItemExtraPropNames() {\r\n        return [\"url\", \"linkAttr\"]\r\n    }\r\n    _addContent($container, itemData) {\r\n        const {\r\n            html: html,\r\n            url: url\r\n        } = itemData;\r\n        if (this.option(\"_supportItemUrl\") && url) {\r\n            $container.html(html);\r\n            const link = this._getLinkContainer(this._getIconContainer(itemData), this._getTextContainer(itemData), itemData);\r\n            $container.append(link)\r\n        } else {\r\n            super._addContent($container, itemData)\r\n        }\r\n    }\r\n    _postprocessRenderItem(args) {\r\n        const {\r\n            itemData: itemData,\r\n            itemElement: itemElement\r\n        } = args;\r\n        if (this._showCheckboxes()) {\r\n            this._renderCheckBox(itemElement, this._getNode(itemData))\r\n        }\r\n        super._postprocessRenderItem(args)\r\n    }\r\n    _renderSublevel($node, node, childNodes) {\r\n        const $nestedNodeContainer = this._renderNodeContainer($node);\r\n        const childNodesByChildrenKeys = childNodes.filter((childNode => -1 !== node.internalFields.childrenKeys.indexOf(childNode.internalFields.key)));\r\n        this._renderItems($nestedNodeContainer, childNodesByChildrenKeys);\r\n        if (childNodesByChildrenKeys.length && !node.internalFields.selected) {\r\n            const firstChild = childNodesByChildrenKeys[0];\r\n            this._updateParentsState(firstChild, this._getNodeElement(firstChild))\r\n        }\r\n        this._normalizeIconState($node, childNodesByChildrenKeys.length);\r\n        if (node.internalFields.expanded) {\r\n            $nestedNodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS)\r\n        }\r\n    }\r\n    _executeItemRenderAction(itemIndex, itemData, itemElement) {\r\n        const node = this._getNode(itemElement);\r\n        this._getItemRenderAction()({\r\n            itemElement: itemElement,\r\n            itemIndex: itemIndex,\r\n            itemData: itemData,\r\n            node: this._dataAdapter.getPublicNode(node)\r\n        })\r\n    }\r\n    _addLeafClass($node) {\r\n        $node.addClass(IS_LEAF)\r\n    }\r\n    _expandEventHandler(e) {\r\n        const $nodeElement = $(e.currentTarget.parentNode);\r\n        if (!$nodeElement.hasClass(IS_LEAF)) {\r\n            this._toggleExpandedState(e.currentTarget, void 0, e)\r\n        }\r\n    }\r\n    _attachExpandEvent() {\r\n        const expandedEventName = this._getEventNameByOption(this.option(\"expandEvent\"));\r\n        const $itemsContainer = this._itemContainer();\r\n        this._detachExpandEvent($itemsContainer);\r\n        eventsEngine.on($itemsContainer, expandedEventName, this._itemSelector(), this._expandEventHandler.bind(this))\r\n    }\r\n    _detachExpandEvent(itemsContainer) {\r\n        eventsEngine.off(itemsContainer, \".dxTreeView_expand\", this._itemSelector())\r\n    }\r\n    _getEventNameByOption(name) {\r\n        const event = \"click\" === name ? clickEventName : dblclickEvent;\r\n        return addNamespace(event, \"dxTreeView_expand\")\r\n    }\r\n    _getNode(identifier) {\r\n        if (!isDefined(identifier)) {\r\n            return null\r\n        }\r\n        if (identifier.internalFields) {\r\n            return identifier\r\n        }\r\n        if (isPrimitive(identifier)) {\r\n            return this._dataAdapter.getNodeByKey(identifier)\r\n        }\r\n        const itemElement = $(identifier).get(0);\r\n        if (!itemElement) {\r\n            return null\r\n        }\r\n        if (domAdapter.isElementNode(itemElement)) {\r\n            return this._getNodeByElement(itemElement)\r\n        }\r\n        return this._dataAdapter.getNodeByItem(itemElement)\r\n    }\r\n    _getNodeByElement(itemElement) {\r\n        const $node = $(itemElement).closest(`.${NODE_CLASS}`);\r\n        const key = this._decodeString($node.attr(DATA_ITEM_ID));\r\n        return this._dataAdapter.getNodeByKey(key)\r\n    }\r\n    _toggleExpandedState(itemElement, state, e) {\r\n        const node = this._getNode(itemElement);\r\n        if (!node) {\r\n            return Deferred().reject().promise()\r\n        }\r\n        if (node.internalFields.disabled) {\r\n            return Deferred().reject().promise()\r\n        }\r\n        const currentState = node.internalFields.expanded;\r\n        if (currentState === state) {\r\n            return Deferred().resolve().promise()\r\n        }\r\n        if (this._hasChildren(node)) {\r\n            const $node = this._getNodeElement(node);\r\n            if ($node.find(`.${NODE_LOAD_INDICATOR_CLASS}:not(.dx-state-invisible)`).length) {\r\n                return Deferred().reject().promise()\r\n            }\r\n            if (!currentState && !this._nodeHasRenderedChildren($node)) {\r\n                this._createLoadIndicator($node)\r\n            }\r\n        }\r\n        if (!isDefined(state)) {\r\n            state = !currentState\r\n        }\r\n        this._dataAdapter.toggleExpansion(node.internalFields.key, state);\r\n        return this._updateExpandedItemsUI(node, state, e)\r\n    }\r\n    _nodeHasRenderedChildren($node) {\r\n        const $nodeContainer = $node.children(`.${NODE_CONTAINER_CLASS}`);\r\n        return $nodeContainer.not(\":empty\").length\r\n    }\r\n    _getItem($node) {\r\n        return $node.children(`.${ITEM_CLASS}`).eq(0)\r\n    }\r\n    _createLoadIndicator($node) {\r\n        const $treeviewItem = this._getItem($node);\r\n        this._createComponent($(\"<div>\").addClass(NODE_LOAD_INDICATOR_CLASS), LoadIndicator, {}).$element().appendTo($treeviewItem);\r\n        const $icon = $treeviewItem.children(`.${TOGGLE_ITEM_VISIBILITY_CLASS},.${CUSTOM_EXPAND_ICON_CLASS}`);\r\n        $icon.hide()\r\n    }\r\n    _renderExpanderIcon($node, node, $icon, iconClass) {\r\n        $icon.appendTo(this._getItem($node));\r\n        $icon.addClass(iconClass);\r\n        if (node.internalFields.disabled) {\r\n            $icon.addClass(\"dx-state-disabled\")\r\n        }\r\n        this._renderToggleItemVisibilityIconClick($icon, node)\r\n    }\r\n    _renderDefaultExpanderIcons($node, node) {\r\n        const $treeViewItem = this._getItem($node);\r\n        const $icon = $(\"<div>\").addClass(TOGGLE_ITEM_VISIBILITY_CLASS).appendTo($treeViewItem);\r\n        if (node.internalFields.expanded) {\r\n            $icon.addClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS);\r\n            $node.parent().addClass(OPENED_NODE_CONTAINER_CLASS)\r\n        }\r\n        if (node.internalFields.disabled) {\r\n            $icon.addClass(\"dx-state-disabled\")\r\n        }\r\n        this._renderToggleItemVisibilityIconClick($icon, node)\r\n    }\r\n    _renderCustomExpanderIcons($node, node) {\r\n        const {\r\n            expandIcon: expandIcon,\r\n            collapseIcon: collapseIcon\r\n        } = this.option();\r\n        const $expandIcon = getImageContainer(expandIcon ?? collapseIcon);\r\n        const $collapseIcon = getImageContainer(collapseIcon ?? expandIcon);\r\n        this._renderExpanderIcon($node, node, $expandIcon, CUSTOM_EXPAND_ICON_CLASS);\r\n        this._renderExpanderIcon($node, node, $collapseIcon, CUSTOM_COLLAPSE_ICON_CLASS);\r\n        const isNodeExpanded = node.internalFields.expanded;\r\n        if (isNodeExpanded) {\r\n            $node.parent().addClass(OPENED_NODE_CONTAINER_CLASS)\r\n        }\r\n        this._toggleCustomExpanderIcons($expandIcon, $collapseIcon, isNodeExpanded)\r\n    }\r\n    _renderToggleItemVisibilityIconClick($icon, node) {\r\n        const eventName = addNamespace(clickEventName, this.NAME);\r\n        eventsEngine.off($icon, eventName);\r\n        eventsEngine.on($icon, eventName, (e => {\r\n            this._toggleExpandedState(node.internalFields.key, void 0, e);\r\n            return false\r\n        }))\r\n    }\r\n    _toggleCustomExpanderIcons($expandIcon, $collapseIcon, isNodeExpanded) {\r\n        $collapseIcon.toggle(isNodeExpanded);\r\n        $expandIcon.toggle(!isNodeExpanded)\r\n    }\r\n    _updateExpandedItemsUI(node, state, e) {\r\n        const $node = this._getNodeElement(node);\r\n        const isHiddenNode = !$node.length || state && $node.is(\":hidden\");\r\n        if (this.option(\"expandNodesRecursive\") && isHiddenNode) {\r\n            const parentNode = this._getNode(node.internalFields.parentKey);\r\n            if (parentNode) {\r\n                this._updateExpandedItemsUI(parentNode, state, e)\r\n            }\r\n        }\r\n        if (!this._hasCustomExpanderIcons()) {\r\n            const $icon = this._getItem($node).children(`.${TOGGLE_ITEM_VISIBILITY_CLASS}`);\r\n            $icon.toggleClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS, state)\r\n        } else if (this._nodeHasRenderedChildren($node)) {\r\n            const $item = this._getItem($node);\r\n            const $childExpandIcons = $item.children(`.${CUSTOM_EXPAND_ICON_CLASS}`);\r\n            const $childCollapseIcons = $item.children(`.${CUSTOM_COLLAPSE_ICON_CLASS}`);\r\n            this._toggleCustomExpanderIcons($childExpandIcons, $childCollapseIcons, state)\r\n        }\r\n        const $nodeContainer = $node.children(`.${NODE_CONTAINER_CLASS}`);\r\n        const nodeContainerExists = $nodeContainer.length > 0;\r\n        const completionCallback = Deferred();\r\n        if (!state || nodeContainerExists && !$nodeContainer.is(\":empty\")) {\r\n            this._animateNodeContainer(node, state, e, completionCallback);\r\n            return completionCallback.promise()\r\n        }\r\n        if (0 === node.internalFields.childrenKeys.length && (this._isVirtualMode() || this._useCustomChildrenLoader())) {\r\n            this._loadNestedItemsWithUpdate(node, state, e, completionCallback);\r\n            return completionCallback.promise()\r\n        }\r\n        this._renderSublevel($node, node, this._getChildNodes(node));\r\n        this._fireContentReadyAction();\r\n        this._animateNodeContainer(node, state, e, completionCallback);\r\n        return completionCallback.promise()\r\n    }\r\n    _loadNestedItemsWithUpdate(node, state, e, completionCallback) {\r\n        const $node = this._getNodeElement(node);\r\n        this._loadNestedItems(node).done((items => {\r\n            const actualNodeData = this._getActualNode(node);\r\n            this._renderSublevel($node, actualNodeData, this._dataAdapter.getNodesByItems(items));\r\n            if (!items || !items.length) {\r\n                completionCallback.resolve();\r\n                return\r\n            }\r\n            this._fireContentReadyAction();\r\n            this._animateNodeContainer(actualNodeData, state, e, completionCallback)\r\n        }))\r\n    }\r\n    _loadNestedItems(node) {\r\n        if (this._useCustomChildrenLoader()) {\r\n            const publicNode = this._dataAdapter.getPublicNode(node);\r\n            return this._loadChildrenByCustomLoader(publicNode).done((newItems => {\r\n                if (!this._areNodesExists(newItems)) {\r\n                    this._appendItems(newItems)\r\n                }\r\n            }))\r\n        }\r\n        if (!this._isVirtualMode()) {\r\n            return Deferred().resolve([]).promise()\r\n        }\r\n        this._filter.internal = [this.option(\"parentIdExpr\"), node.internalFields.key];\r\n        this._dataSource.filter(this._combineFilter());\r\n        return this._dataSource.load().done((newItems => {\r\n            if (!this._areNodesExists(newItems)) {\r\n                this._appendItems(newItems)\r\n            }\r\n        }))\r\n    }\r\n    _areNodesExists(newItems) {\r\n        const keyOfRootItem = this.keyOf(newItems[0]);\r\n        const fullData = this._dataAdapter.getFullData();\r\n        return !!this._dataAdapter.getNodeByKey(keyOfRootItem, fullData)\r\n    }\r\n    _appendItems(newItems) {\r\n        const {\r\n            items: items = []\r\n        } = this.option();\r\n        this.option().items = items.concat(newItems);\r\n        this._initDataAdapter()\r\n    }\r\n    _animateNodeContainer(node, state, e, completionCallback) {\r\n        const $node = this._getNodeElement(node);\r\n        const $nodeContainer = $node.children(`.${NODE_CONTAINER_CLASS}`);\r\n        if (node && completionCallback && 0 === $nodeContainer.length) {\r\n            completionCallback.resolve()\r\n        }\r\n        $nodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS);\r\n        const nodeHeight = getHeight($nodeContainer);\r\n        fx.stop($nodeContainer, true);\r\n        fx.animate($nodeContainer, {\r\n            type: \"custom\",\r\n            duration: this.option(\"animationEnabled\") ? 400 : 0,\r\n            from: {\r\n                maxHeight: state ? 0 : nodeHeight\r\n            },\r\n            to: {\r\n                maxHeight: state ? nodeHeight : 0\r\n            },\r\n            complete: function() {\r\n                $nodeContainer.css(\"maxHeight\", \"none\");\r\n                $nodeContainer.toggleClass(OPENED_NODE_CONTAINER_CLASS, state);\r\n                this.setAria(\"expanded\", state, $node);\r\n                this.getScrollable().update();\r\n                this._fireExpandedStateUpdatedEvent(state, node, e);\r\n                if (completionCallback) {\r\n                    completionCallback.resolve()\r\n                }\r\n            }.bind(this)\r\n        })\r\n    }\r\n    _fireExpandedStateUpdatedEvent(isExpanded, node, e) {\r\n        if (!this._hasChildren(node) || this._skipContentReadyAndItemExpanded) {\r\n            return\r\n        }\r\n        const optionName = isExpanded ? \"onItemExpanded\" : \"onItemCollapsed\";\r\n        if (isDefined(e)) {\r\n            this._itemDXEventHandler(e, optionName, {\r\n                node: this._dataAdapter.getPublicNode(node)\r\n            })\r\n        } else {\r\n            const target = this._getNodeElement(node);\r\n            this._itemEventHandler(target, optionName, {\r\n                event: e,\r\n                node: this._dataAdapter.getPublicNode(node)\r\n            })\r\n        }\r\n    }\r\n    _normalizeIconState($node, hasNewItems) {\r\n        const $loadIndicator = $node.find(`.${NODE_LOAD_INDICATOR_CLASS}`);\r\n        if ($loadIndicator.length) {\r\n            var _LoadIndicator$getIns;\r\n            null === (_LoadIndicator$getIns = LoadIndicator.getInstance($loadIndicator)) || void 0 === _LoadIndicator$getIns || _LoadIndicator$getIns.option(\"visible\", false)\r\n        }\r\n        const $treeViewItem = this._getItem($node);\r\n        const $toggleItem = $treeViewItem.children(`.${CUSTOM_COLLAPSE_ICON_CLASS},.${TOGGLE_ITEM_VISIBILITY_CLASS}`);\r\n        if (hasNewItems) {\r\n            $toggleItem.show();\r\n            return\r\n        }\r\n        $toggleItem.removeClass(TOGGLE_ITEM_VISIBILITY_CLASS);\r\n        $node.addClass(IS_LEAF)\r\n    }\r\n    _emptyMessageContainer() {\r\n        const scrollable = this.getScrollable();\r\n        return scrollable ? $(scrollable.content()) : super._emptyMessageContainer()\r\n    }\r\n    _renderContent() {\r\n        const {\r\n            items: items\r\n        } = this.option();\r\n        if (items && items.length) {\r\n            this._contentAlreadyRendered = true\r\n        }\r\n        super._renderContent()\r\n    }\r\n    _renderSelectAllItem($container) {\r\n        const {\r\n            selectAllText: selectAllText,\r\n            focusStateEnabled: focusStateEnabled\r\n        } = this.option();\r\n        $container = $container || this.$element().find(`.${NODE_CONTAINER_CLASS}`).first();\r\n        this._$selectAllItem = $(\"<div>\").addClass(SELECT_ALL_ITEM_CLASS);\r\n        const value = this._dataAdapter.isAllSelected();\r\n        this._createComponent(this._$selectAllItem, CheckBox, {\r\n            value: value,\r\n            elementAttr: {\r\n                \"aria-label\": \"Select All\"\r\n            },\r\n            text: selectAllText,\r\n            focusStateEnabled: focusStateEnabled,\r\n            onValueChanged: this._onSelectAllCheckboxValueChanged.bind(this),\r\n            onInitialized: _ref => {\r\n                let {\r\n                    component: component\r\n                } = _ref;\r\n                component.registerKeyHandler(\"enter\", (() => {\r\n                    component.option(\"value\", !component.option(\"value\"))\r\n                }))\r\n            }\r\n        });\r\n        this._toggleSelectedClass(this._$selectAllItem, value);\r\n        $container.before(this._$selectAllItem)\r\n    }\r\n    _onSelectAllCheckboxValueChanged(args) {\r\n        this._toggleSelectAll(args);\r\n        this._fireSelectAllValueChanged(args.value)\r\n    }\r\n    _toggleSelectAll(args) {\r\n        this._dataAdapter.toggleSelectAll(args.value);\r\n        this._updateItemsUI();\r\n        this._fireSelectionChanged()\r\n    }\r\n    _renderCheckBox($node, node) {\r\n        const $checkbox = $(\"<div>\").appendTo($node);\r\n        this._createComponent($checkbox, CheckBox, {\r\n            value: node.internalFields.selected,\r\n            onValueChanged: this._changeCheckboxValue.bind(this),\r\n            focusStateEnabled: false,\r\n            elementAttr: {\r\n                \"aria-label\": messageLocalization.format(\"CheckState\")\r\n            },\r\n            disabled: this._disabledGetter(node)\r\n        })\r\n    }\r\n    _toggleSelectedClass($node, value) {\r\n        $node.toggleClass(\"dx-state-selected\", !!value)\r\n    }\r\n    _toggleNodeDisabledState(node, state) {\r\n        const $node = this._getNodeElement(node);\r\n        const $item = $node.find(`.${ITEM_CLASS}`).eq(0);\r\n        this._dataAdapter.toggleNodeDisabledState(node.internalFields.key, state);\r\n        $item.toggleClass(\"dx-state-disabled\", !!state);\r\n        if (this._showCheckboxes()) {\r\n            const checkbox = this._getCheckBoxInstance($node);\r\n            checkbox.option(\"disabled\", !!state)\r\n        }\r\n    }\r\n    _itemOptionChanged(item, property, value) {\r\n        const node = this._dataAdapter.getNodeByItem(item);\r\n        if (property === this.option(\"disabledExpr\")) {\r\n            this._toggleNodeDisabledState(node, value)\r\n        }\r\n    }\r\n    _changeCheckboxValue(e) {\r\n        const $node = $(e.element).closest(`.${NODE_CLASS}`);\r\n        const $item = this._getItem($node);\r\n        const item = this._getItemData($item);\r\n        const node = this._getNodeByElement($item);\r\n        const {\r\n            value: value\r\n        } = e;\r\n        if (node && node.internalFields.selected === value) {\r\n            return\r\n        }\r\n        this._updateItemSelection(value, item, e.event)\r\n    }\r\n    _isSingleSelection() {\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        return \"single\" === selectionMode\r\n    }\r\n    _isRecursiveSelection() {\r\n        const {\r\n            selectionMode: selectionMode\r\n        } = this.option();\r\n        return this.option(\"selectNodesRecursive\") && \"single\" !== selectionMode\r\n    }\r\n    _isLastSelectedBranch(publicNode, selectedNodesKeys, deep) {\r\n        const keyIndex = selectedNodesKeys.indexOf(publicNode.key);\r\n        if (keyIndex >= 0) {\r\n            selectedNodesKeys.splice(keyIndex, 1)\r\n        }\r\n        if (deep) {\r\n            each(publicNode.children, ((_, childNode) => {\r\n                this._isLastSelectedBranch(childNode, selectedNodesKeys, true)\r\n            }))\r\n        }\r\n        if (publicNode.parent) {\r\n            this._isLastSelectedBranch(publicNode.parent, selectedNodesKeys)\r\n        }\r\n        return 0 === selectedNodesKeys.length\r\n    }\r\n    _isLastRequired(node) {\r\n        const selectionRequired = this.option(\"selectionRequired\");\r\n        const isSingleMode = this._isSingleSelection();\r\n        const selectedNodesKeys = this.getSelectedNodeKeys();\r\n        if (!selectionRequired) {\r\n            return\r\n        }\r\n        if (isSingleMode) {\r\n            return 1 === selectedNodesKeys.length\r\n        }\r\n        return this._isLastSelectedBranch(node.internalFields.publicNode, selectedNodesKeys.slice(), true)\r\n    }\r\n    _updateItemSelection(value, itemElement, dxEvent) {\r\n        const node = this._getNode(itemElement);\r\n        if (!node || false === node.visible) {\r\n            return false\r\n        }\r\n        if (node.internalFields.selected === value) {\r\n            return true\r\n        }\r\n        if (!value && this._isLastRequired(node)) {\r\n            if (this._showCheckboxes()) {\r\n                const $node = this._getNodeElement(node);\r\n                this._getCheckBoxInstance($node).option(\"value\", true)\r\n            }\r\n            return false\r\n        }\r\n        if (value && this._isSingleSelection()) {\r\n            const selectedKeys = this.getSelectedNodeKeys();\r\n            each(selectedKeys, ((index, key) => {\r\n                this._dataAdapter.toggleSelection(key, false);\r\n                this._updateItemsUI();\r\n                this._fireItemSelectionChanged(this._getNode(key))\r\n            }))\r\n        }\r\n        this._dataAdapter.toggleSelection(node.internalFields.key, value);\r\n        const isAllSelected = this._dataAdapter.isAllSelected();\r\n        const needFireSelectAllChanged = this._selectAllEnabled() && this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\") !== isAllSelected;\r\n        this._updateItemsUI();\r\n        this._fireItemSelectionChanged(node, dxEvent);\r\n        this._fireSelectionChanged();\r\n        if (needFireSelectAllChanged) {\r\n            this._fireSelectAllValueChanged(isAllSelected)\r\n        }\r\n        return true\r\n    }\r\n    _fireItemSelectionChanged(node, dxEvent) {\r\n        const initiator = dxEvent || this._findItemElementByItem(node.internalFields.item);\r\n        const handler = dxEvent ? this._itemDXEventHandler : this._itemEventHandler;\r\n        handler.call(this, initiator, \"onItemSelectionChanged\", {\r\n            node: this._dataAdapter.getPublicNode(node),\r\n            itemData: node.internalFields.item\r\n        })\r\n    }\r\n    _getCheckBoxInstance($node) {\r\n        const $treeViewItem = this._getItem($node);\r\n        return $treeViewItem.children(\".dx-checkbox\").dxCheckBox(\"instance\")\r\n    }\r\n    _updateItemsUI() {\r\n        const cache = {};\r\n        each(this._dataAdapter.getData(), ((_, node) => {\r\n            const $node = this._getNodeElement(node, cache);\r\n            const nodeSelection = node.internalFields.selected;\r\n            if (!$node.length) {\r\n                return\r\n            }\r\n            this._toggleSelectedClass($node, nodeSelection);\r\n            this.setAria(\"selected\", nodeSelection, $node);\r\n            if (this._showCheckboxes()) {\r\n                this._getCheckBoxInstance($node).option(\"value\", nodeSelection)\r\n            }\r\n        }));\r\n        if (this._selectAllEnabled()) {\r\n            const selectAllCheckbox = this._$selectAllItem.dxCheckBox(\"instance\");\r\n            selectAllCheckbox.option(\"onValueChanged\", void 0);\r\n            selectAllCheckbox.option(\"value\", this._dataAdapter.isAllSelected());\r\n            selectAllCheckbox.option(\"onValueChanged\", this._onSelectAllCheckboxValueChanged.bind(this))\r\n        }\r\n    }\r\n    _updateParentsState(node, $node) {\r\n        if (!$node) {\r\n            return\r\n        }\r\n        const parentNode = this._dataAdapter.getNodeByKey(node.internalFields.parentKey);\r\n        const $parentNode = $($node.parents(`.${NODE_CLASS}`)[0]);\r\n        if (this._showCheckboxes()) {\r\n            var _this$_getCheckBoxIns;\r\n            const parentValue = parentNode.internalFields.selected;\r\n            null === (_this$_getCheckBoxIns = this._getCheckBoxInstance($parentNode)) || void 0 === _this$_getCheckBoxIns || _this$_getCheckBoxIns.option(\"value\", parentValue);\r\n            this._toggleSelectedClass($parentNode, parentValue)\r\n        }\r\n        if (parentNode.internalFields.parentKey !== this.option(\"rootValue\")) {\r\n            this._updateParentsState(parentNode, $parentNode)\r\n        }\r\n    }\r\n    _itemEventHandlerImpl(initiator, action, actionArgs) {\r\n        const $itemElement = $(initiator).closest(`.${NODE_CLASS}`).children(`.${ITEM_CLASS}`);\r\n        return action(extend(this._extendActionArgs($itemElement), actionArgs))\r\n    }\r\n    _itemContextMenuHandler(e) {\r\n        this._createEventHandler(\"onItemContextMenu\", e)\r\n    }\r\n    _itemHoldHandler(e) {\r\n        this._createEventHandler(\"onItemHold\", e)\r\n    }\r\n    _createEventHandler(eventName, e) {\r\n        const node = this._getNodeByElement(e.currentTarget);\r\n        this._itemDXEventHandler(e, eventName, {\r\n            node: this._dataAdapter.getPublicNode(node)\r\n        })\r\n    }\r\n    _itemClass() {\r\n        return ITEM_CLASS\r\n    }\r\n    _itemDataKey() {\r\n        return ITEM_DATA_KEY\r\n    }\r\n    _attachClickEvent() {\r\n        const $itemContainer = this._itemContainer();\r\n        this._detachClickEvent($itemContainer);\r\n        const {\r\n            clickEventNamespace: clickEventNamespace,\r\n            itemSelector: itemSelector,\r\n            pointerDownEventNamespace: pointerDownEventNamespace,\r\n            nodeSelector: nodeSelector\r\n        } = this._getItemClickEventData();\r\n        eventsEngine.on($itemContainer, clickEventNamespace, itemSelector, (e => {\r\n            if ($(e.target).hasClass(\"dx-checkbox-icon\") || $(e.target).hasClass(\"dx-checkbox\")) {\r\n                return\r\n            }\r\n            this._itemClickHandler(e, $(e.currentTarget))\r\n        }));\r\n        eventsEngine.on($itemContainer, pointerDownEventNamespace, nodeSelector, (e => {\r\n            this._itemPointerDownHandler(e)\r\n        }))\r\n    }\r\n    _detachClickEvent(itemsContainer) {\r\n        const {\r\n            clickEventNamespace: clickEventNamespace,\r\n            itemSelector: itemSelector,\r\n            pointerDownEventNamespace: pointerDownEventNamespace,\r\n            nodeSelector: nodeSelector\r\n        } = this._getItemClickEventData();\r\n        eventsEngine.off(itemsContainer, clickEventNamespace, itemSelector);\r\n        eventsEngine.off(itemsContainer, pointerDownEventNamespace, nodeSelector)\r\n    }\r\n    _getItemClickEventData() {\r\n        const itemSelector = `.${this._itemClass()}`;\r\n        const nodeSelector = `.${NODE_CLASS}, .${SELECT_ALL_ITEM_CLASS}`;\r\n        const clickEventNamespace = addNamespace(clickEventName, this.NAME);\r\n        const pointerDownEventNamespace = addNamespace(pointerEvents.down, this.NAME);\r\n        return {\r\n            clickEventNamespace: clickEventNamespace,\r\n            itemSelector: itemSelector,\r\n            pointerDownEventNamespace: pointerDownEventNamespace,\r\n            nodeSelector: nodeSelector\r\n        }\r\n    }\r\n    _itemClick(actionArgs) {\r\n        const args = actionArgs.args[0];\r\n        const target = args.event.target[0] || args.event.target;\r\n        const link = target.getElementsByClassName(\"dx-item-url\")[0];\r\n        if (args.itemData.url && link) {\r\n            link.click()\r\n        }\r\n    }\r\n    _itemClickHandler(e, $item) {\r\n        const itemData = this._getItemData($item);\r\n        const node = this._getNodeByElement($item);\r\n        this._itemDXEventHandler(e, \"onItemClick\", {\r\n            node: this._dataAdapter.getPublicNode(node)\r\n        }, {\r\n            beforeExecute: this._itemClick\r\n        });\r\n        if (this.option(\"selectByClick\") && !e.isDefaultPrevented()) {\r\n            this._updateItemSelection(!node.internalFields.selected, itemData, e)\r\n        }\r\n    }\r\n    _updateSelectionToFirstItem($items, startIndex) {\r\n        let itemIndex = startIndex;\r\n        while (itemIndex >= 0) {\r\n            const $item = $($items[itemIndex]);\r\n            this._updateItemSelection(true, $item.find(`.${ITEM_CLASS}`).get(0));\r\n            itemIndex--\r\n        }\r\n    }\r\n    _updateSelectionToLastItem($items, startIndex) {\r\n        const {\r\n            length: length\r\n        } = $items;\r\n        let itemIndex = startIndex;\r\n        while (itemIndex < length) {\r\n            const $item = $($items[itemIndex]);\r\n            this._updateItemSelection(true, $item.find(`.${ITEM_CLASS}`).get(0));\r\n            itemIndex++\r\n        }\r\n    }\r\n    focus() {\r\n        if (this._selectAllEnabled()) {\r\n            eventsEngine.trigger(this._$selectAllItem, \"focus\");\r\n            return\r\n        }\r\n        super.focus()\r\n    }\r\n    _focusInHandler(e) {\r\n        this._updateFocusState(e, true);\r\n        const isSelectAllItem = $(e.target).hasClass(SELECT_ALL_ITEM_CLASS);\r\n        if (isSelectAllItem || this.option(\"focusedElement\")) {\r\n            clearTimeout(this._setFocusedItemTimeout);\r\n            this._setFocusedItemTimeout = setTimeout((() => {\r\n                const {\r\n                    focusedElement: focusedElement\r\n                } = this.option();\r\n                const element = isSelectAllItem ? getPublicElement(this._$selectAllItem) : $(focusedElement);\r\n                this._setFocusedItem(element)\r\n            }));\r\n            return\r\n        }\r\n        const $activeItem = this._getActiveItem();\r\n        this.option(\"focusedElement\", getPublicElement($activeItem.closest(`.${NODE_CLASS}`)))\r\n    }\r\n    _itemPointerDownHandler(e) {\r\n        if (!this.option(\"focusStateEnabled\")) {\r\n            return\r\n        }\r\n        const $target = $(e.target).closest(`.${NODE_CLASS}, .${SELECT_ALL_ITEM_CLASS}`);\r\n        if (!$target.length) {\r\n            return\r\n        }\r\n        const itemElement = $target.hasClass(\"dx-state-disabled\") ? null : $target;\r\n        this.option(\"focusedElement\", getPublicElement(itemElement))\r\n    }\r\n    _findNonDisabledNodes($nodes) {\r\n        return $nodes.not((function() {\r\n            return $(this).children(`.${ITEM_CLASS}`).hasClass(\"dx-state-disabled\")\r\n        }))\r\n    }\r\n    _moveFocus(location, e) {\r\n        const FOCUS_LEFT = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\r\n        const FOCUS_RIGHT = this.option(\"rtlEnabled\") ? \"left\" : \"right\";\r\n        this.$element().find(`.${NODE_CONTAINER_CLASS}`).each((function() {\r\n            fx.stop(this, true)\r\n        }));\r\n        const $items = this._nodeElements();\r\n        if (!$items || !$items.length) {\r\n            return\r\n        }\r\n        switch (location) {\r\n            case \"up\": {\r\n                const $prevItem = this._prevItem($items);\r\n                this.option(\"focusedElement\", getPublicElement($prevItem));\r\n                const prevItemElement = this._getNodeItemElement($prevItem);\r\n                this.getScrollable().scrollToElement(prevItemElement);\r\n                if (e.shiftKey && this._showCheckboxes()) {\r\n                    this._updateItemSelection(true, prevItemElement)\r\n                }\r\n                break\r\n            }\r\n            case \"down\": {\r\n                const $nextItem = this._nextItem($items);\r\n                this.option(\"focusedElement\", getPublicElement($nextItem));\r\n                const nextItemElement = this._getNodeItemElement($nextItem);\r\n                this.getScrollable().scrollToElement(nextItemElement);\r\n                if (e.shiftKey && this._showCheckboxes()) {\r\n                    this._updateItemSelection(true, nextItemElement)\r\n                }\r\n                break\r\n            }\r\n            case \"first\": {\r\n                const $firstItem = $items.first();\r\n                if (e.shiftKey && this._showCheckboxes()) {\r\n                    this._updateSelectionToFirstItem($items, $items.index(this._prevItem($items)))\r\n                }\r\n                this.option(\"focusedElement\", getPublicElement($firstItem));\r\n                this.getScrollable().scrollToElement(this._getNodeItemElement($firstItem));\r\n                break\r\n            }\r\n            case \"last\": {\r\n                const $lastItem = $items.last();\r\n                if (e.shiftKey && this._showCheckboxes()) {\r\n                    this._updateSelectionToLastItem($items, $items.index(this._nextItem($items)))\r\n                }\r\n                this.option(\"focusedElement\", getPublicElement($lastItem));\r\n                this.getScrollable().scrollToElement(this._getNodeItemElement($lastItem));\r\n                break\r\n            }\r\n            case FOCUS_RIGHT:\r\n                this._expandFocusedContainer();\r\n                break;\r\n            case FOCUS_LEFT:\r\n                this._collapseFocusedContainer();\r\n                break;\r\n            default:\r\n                super._moveFocus.apply(this, arguments)\r\n        }\r\n    }\r\n    _getNodeItemElement($node) {\r\n        return $node.find(`.${ITEM_CLASS}`).get(0)\r\n    }\r\n    _nodeElements() {\r\n        return this.$element().find(`.${NODE_CLASS}`).not(\":hidden\")\r\n    }\r\n    _expandFocusedContainer() {\r\n        const {\r\n            focusedElement: focusedElement\r\n        } = this.option();\r\n        const $focusedNode = $(focusedElement);\r\n        if (!$focusedNode.length || $focusedNode.hasClass(IS_LEAF)) {\r\n            return\r\n        }\r\n        const $node = $focusedNode.find(`.${NODE_CONTAINER_CLASS}`).eq(0);\r\n        if ($node.hasClass(OPENED_NODE_CONTAINER_CLASS)) {\r\n            const $nextItem = this._nextItem(this._findNonDisabledNodes(this._nodeElements()));\r\n            this.option(\"focusedElement\", getPublicElement($nextItem));\r\n            this.getScrollable().scrollToElement(this._getNodeItemElement($nextItem));\r\n            return\r\n        }\r\n        const node = this._getNodeByElement(this._getItem($focusedNode));\r\n        this._toggleExpandedState(node, true)\r\n    }\r\n    _getClosestNonDisabledNode($node) {\r\n        do {\r\n            $node = $node.parent().closest(`.${NODE_CLASS}`)\r\n        } while ($node.children(\".dx-treeview-item.dx-state-disabled\").length);\r\n        return $node\r\n    }\r\n    _collapseFocusedContainer() {\r\n        const {\r\n            focusedElement: focusedElement\r\n        } = this.option();\r\n        const $focusedNode = $(focusedElement);\r\n        if (!$focusedNode.length) {\r\n            return\r\n        }\r\n        const nodeElement = $focusedNode.find(`.${NODE_CONTAINER_CLASS}`).eq(0);\r\n        if (!$focusedNode.hasClass(IS_LEAF) && nodeElement.hasClass(OPENED_NODE_CONTAINER_CLASS)) {\r\n            const node = this._getNodeByElement(this._getItem($focusedNode));\r\n            this._toggleExpandedState(node, false)\r\n        } else {\r\n            const collapsedNode = this._getClosestNonDisabledNode($focusedNode);\r\n            collapsedNode.length && this.option(\"focusedElement\", getPublicElement(collapsedNode));\r\n            this.getScrollable().scrollToElement(this._getNodeItemElement(collapsedNode))\r\n        }\r\n    }\r\n    _encodeString(value) {\r\n        return isString(value) ? encodeURI(value) : value\r\n    }\r\n    _decodeString(value) {\r\n        return isString(value) ? decodeURI(value) : value\r\n    }\r\n    getScrollable() {\r\n        return this._scrollable\r\n    }\r\n    updateDimensions() {\r\n        const deferred = Deferred();\r\n        const scrollable = this.getScrollable();\r\n        if (scrollable) {\r\n            scrollable.update().done((() => {\r\n                deferred.resolveWith(this)\r\n            }))\r\n        } else {\r\n            deferred.resolveWith(this)\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    selectItem(itemElement) {\r\n        return this._updateItemSelection(true, itemElement)\r\n    }\r\n    unselectItem(itemElement) {\r\n        return this._updateItemSelection(false, itemElement)\r\n    }\r\n    expandItem(itemElement) {\r\n        return this._toggleExpandedState(itemElement, true)\r\n    }\r\n    collapseItem(itemElement) {\r\n        return this._toggleExpandedState(itemElement, false)\r\n    }\r\n    getNodes() {\r\n        return this._dataAdapter.getTreeNodes()\r\n    }\r\n    getSelectedNodes() {\r\n        return this.getSelectedNodeKeys().map((key => {\r\n            const node = this._dataAdapter.getNodeByKey(key);\r\n            return this._dataAdapter.getPublicNode(node)\r\n        }))\r\n    }\r\n    getSelectedNodeKeys() {\r\n        return this._dataAdapter.getSelectedNodesKeys()\r\n    }\r\n    selectAll() {\r\n        if (this._selectAllEnabled()) {\r\n            this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\", true)\r\n        } else {\r\n            this._toggleSelectAll({\r\n                value: true\r\n            })\r\n        }\r\n    }\r\n    unselectAll() {\r\n        if (this._selectAllEnabled()) {\r\n            this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\", false)\r\n        } else {\r\n            this._toggleSelectAll({\r\n                value: false\r\n            })\r\n        }\r\n    }\r\n    _allItemsExpandedHandler() {\r\n        this._skipContentReadyAndItemExpanded = false;\r\n        this._fireContentReadyAction()\r\n    }\r\n    expandAll() {\r\n        const nodes = this._dataAdapter.getData();\r\n        const expandingPromises = [];\r\n        this._skipContentReadyAndItemExpanded = true;\r\n        nodes.forEach((node => expandingPromises.push(this._toggleExpandedState(node.internalFields.key, true))));\r\n        Promise.allSettled(expandingPromises).then((() => {\r\n            var _this$_allItemsExpand;\r\n            return null === (_this$_allItemsExpand = this._allItemsExpandedHandler) || void 0 === _this$_allItemsExpand ? void 0 : _this$_allItemsExpand.call(this)\r\n        }))\r\n    }\r\n    collapseAll() {\r\n        each(this._dataAdapter.getExpandedNodesKeys(), ((_, key) => {\r\n            this._toggleExpandedState(key, false)\r\n        }))\r\n    }\r\n    scrollToItem(keyOrItemOrElement) {\r\n        const node = this._getNode(keyOrItemOrElement);\r\n        if (!node) {\r\n            return Deferred().reject().promise()\r\n        }\r\n        const nodeKeysToExpand = [];\r\n        let parentNode = node.internalFields.publicNode.parent;\r\n        while (null != parentNode) {\r\n            if (!parentNode.expanded) {\r\n                nodeKeysToExpand.push(parentNode.key)\r\n            }\r\n            parentNode = parentNode.parent\r\n        }\r\n        const scrollCallback = Deferred();\r\n        this._expandNodes(nodeKeysToExpand.reverse()).always((() => {\r\n            const $element = this._getNodeElement(node);\r\n            if ($element && $element.length) {\r\n                this.scrollToElementTopLeft($element.get(0));\r\n                scrollCallback.resolve()\r\n            } else {\r\n                scrollCallback.reject()\r\n            }\r\n        }));\r\n        return scrollCallback.promise()\r\n    }\r\n    scrollToElementTopLeft(targetElement) {\r\n        const scrollable = this.getScrollable();\r\n        const {\r\n            scrollDirection: scrollDirection,\r\n            rtlEnabled: rtlEnabled\r\n        } = this.option();\r\n        const targetLocation = {\r\n            top: 0,\r\n            left: 0\r\n        };\r\n        const relativeOffset = getRelativeOffset(SCROLLABLE_CONTENT_CLASS, targetElement);\r\n        if (scrollDirection !== DIRECTION_VERTICAL) {\r\n            const containerElement = $(scrollable.container()).get(0);\r\n            targetLocation.left = rtlEnabled ? relativeOffset.left + targetElement.offsetWidth - containerElement.clientWidth : relativeOffset.left\r\n        }\r\n        if (scrollDirection !== DIRECTION_HORIZONTAL) {\r\n            targetLocation.top = relativeOffset.top\r\n        }\r\n        scrollable.scrollTo(targetLocation)\r\n    }\r\n    _expandNodes(keysToExpand) {\r\n        if (!keysToExpand || 0 === keysToExpand.length) {\r\n            return Deferred().resolve().promise()\r\n        }\r\n        const resultCallback = Deferred();\r\n        const callbacksByNodes = keysToExpand.map((key => this.expandItem(key)));\r\n        when.apply($, callbacksByNodes).done((() => resultCallback.resolve())).fail((() => resultCallback.reject()));\r\n        return resultCallback.promise()\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        clearTimeout(this._setFocusedItemTimeout);\r\n        this._allItemsExpandedHandler = null\r\n    }\r\n}\r\nexport default TreeViewBase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}