{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/virtual_columns/m_virtual_columns.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport browser from \"../../../../core/utils/browser\";\nimport { getHeight, getOuterWidth, getWidth } from \"../../../../core/utils/size\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport { hasWindow } from \"../../../../core/utils/window\";\nimport gridCoreUtils from \"../m_utils\";\nimport { createColumnsInfo } from \"./m_virtual_columns_core\";\nconst DEFAULT_COLUMN_WIDTH = 50;\nconst baseView = Base => class extends Base {\n  _needToSetCellWidths() {\n    let result = super._needToSetCellWidths();\n    if (!result && this._columnsController.isVirtualMode()) {\n      const columns = this._columnsController.getColumns();\n      result = columns.some(column => \"auto\" === column.width);\n    }\n    return result;\n  }\n};\nconst rowsView = Base => class extends baseView(Base) {\n  _resizeCore() {\n    super._resizeCore.apply(this, arguments);\n    this._columnsController.resize();\n  }\n  _handleScroll(e) {\n    const scrollable = this.getScrollable();\n    let {\n      left: left\n    } = e.scrollOffset;\n    super._handleScroll.apply(this, arguments);\n    if (this.option(\"rtlEnabled\") && scrollable) {\n      left = getWidth(scrollable.$content()) - getWidth(scrollable.$element()) - left;\n    }\n    this._columnsController.setScrollPosition(left, e.event);\n  }\n  _renderCore(e) {\n    if (null !== e && void 0 !== e && e.virtualColumnsScrolling) {\n      var _this$_columnsControl, _this$_scrollable;\n      const $contentElement = this._findContentElement();\n      const fixedColumns = null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.getFixedColumns();\n      const useNativeScrolling = null === (_this$_scrollable = this._scrollable) || void 0 === _this$_scrollable ? void 0 : _this$_scrollable.option(\"useNative\");\n      const legacyMode = this.option(\"columnFixing.legacyMode\");\n      if (null !== fixedColumns && void 0 !== fixedColumns && fixedColumns.length) {\n        if (legacyMode && !useNativeScrolling) {\n          $contentElement.css({\n            minHeight: gridCoreUtils.getContentHeightLimit(browser)\n          });\n        } else {\n          $contentElement.css({\n            minHeight: getHeight($contentElement)\n          });\n        }\n        const resizeCompletedHandler = () => {\n          this.resizeCompleted.remove(resizeCompletedHandler);\n          $contentElement.css({\n            minHeight: \"\"\n          });\n        };\n        this.resizeCompleted.add(resizeCompletedHandler);\n      }\n    }\n    return super._renderCore.apply(this, arguments);\n  }\n};\nconst columnHeadersView = Base => class extends baseView(Base) {\n  _renderCore() {\n    const deferred = super._renderCore.apply(this, arguments);\n    if (this._columnsController.isVirtualMode()) {\n      this._updateScrollLeftPosition();\n    }\n    return deferred;\n  }\n};\nconst getWidths = function (columns) {\n  return columns.map(column => column.visibleWidth || parseFloat(column.width) || 50);\n};\nconst columns = Base => class extends Base {\n  init() {\n    super.init.apply(this, arguments);\n    this._resizingController = this.getController(\"resizing\");\n    this._beginPageIndex = null;\n    this._endPageIndex = null;\n    this._position ?? (this._position = 0);\n    this._virtualVisibleColumns = {};\n  }\n  dispose() {\n    clearTimeout(this._changedTimeout);\n    super.dispose.apply(this, arguments);\n  }\n  resetColumnsCache() {\n    super.resetColumnsCache();\n    this._virtualVisibleColumns = {};\n  }\n  getBeginPageIndex(position) {\n    const visibleColumns = this.getVisibleColumns(void 0, true);\n    const widths = getWidths(visibleColumns);\n    let currentPosition = 0;\n    for (let index = 0; index < widths.length; index++) {\n      if (currentPosition >= position) {\n        return Math.floor(index / this.getColumnPageSize());\n      }\n      currentPosition += widths[index];\n    }\n    return 0;\n  }\n  getTotalWidth() {\n    const width = this.option(\"width\");\n    if (\"number\" === typeof width) {\n      return width;\n    }\n    return this._resizingController._lastWidth || getOuterWidth(this.component.$element());\n  }\n  getEndPageIndex(position) {\n    const visibleColumns = this.getVisibleColumns(void 0, true);\n    const widths = getWidths(visibleColumns);\n    let currentPosition = 0;\n    position += this.getTotalWidth();\n    for (let index = 0; index < widths.length; index++) {\n      if (currentPosition >= position) {\n        return Math.ceil(index / this.getColumnPageSize());\n      }\n      currentPosition += widths[index];\n    }\n    return Math.ceil(widths.length / this.getColumnPageSize());\n  }\n  getColumnPageSize() {\n    return this.option(\"scrolling.columnPageSize\");\n  }\n  _fireColumnsChanged(event) {\n    const date = new Date();\n    this.columnsChanged.fire({\n      optionNames: {\n        all: true,\n        length: 1\n      },\n      changeTypes: {\n        columns: true,\n        virtualColumnsScrolling: true,\n        length: 2,\n        event: event\n      }\n    });\n    this._renderTime = new Date() - date;\n  }\n  getScrollingTimeout() {\n    const renderingThreshold = this.option(\"scrolling.columnRenderingThreshold\");\n    const renderAsync = this.option(\"scrolling.renderAsync\");\n    let scrollingTimeout = 0;\n    if (!isDefined(renderAsync) && this._renderTime > renderingThreshold || renderAsync) {\n      scrollingTimeout = this.option(\"scrolling.timeout\");\n    }\n    return scrollingTimeout;\n  }\n  setScrollPosition(position, event) {\n    const scrollingTimeout = this.getScrollingTimeout();\n    if (scrollingTimeout > 0) {\n      clearTimeout(this._changedTimeout);\n      this._changedTimeout = setTimeout(() => {\n        this._setScrollPositionCore(position, event);\n      }, scrollingTimeout);\n    } else {\n      this._setScrollPositionCore(position, event);\n    }\n  }\n  resize() {\n    this._setScrollPositionCore(this._position);\n  }\n  _setScrollPositionCore(position, event) {\n    const that = this;\n    if (that.isVirtualMode()) {\n      const beginPageIndex = that.getBeginPageIndex(position);\n      const endPageIndex = that.getEndPageIndex(position);\n      const needColumnsChanged = position < that._position ? that._beginPageIndex > beginPageIndex : that._endPageIndex < endPageIndex;\n      that._position = position;\n      if (needColumnsChanged) {\n        that._beginPageIndex = beginPageIndex;\n        that._endPageIndex = endPageIndex;\n        that._fireColumnsChanged(event);\n      }\n    }\n  }\n  getFixedColumns(rowIndex, isBase) {\n    const fixedColumns = super.getFixedColumns(rowIndex);\n    if (this.isVirtualMode() && !isBase && fixedColumns.length) {\n      const transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\n      fixedColumns[transparentColumnIndex].colspan = this.getVisibleColumns().length - super.getFixedColumns().length + 1;\n      return fixedColumns;\n    }\n    return fixedColumns;\n  }\n  _compileVisibleColumns(rowIndex, isBase) {\n    var _this$_columns;\n    if (isBase || !this.isVirtualMode() || !this._shouldReturnVisibleColumns()) {\n      return super._compileVisibleColumns(rowIndex);\n    }\n    if (null !== (_this$_columns = this._columns) && void 0 !== _this$_columns && _this$_columns.length && !isDefined(this._beginPageIndex) && !isDefined(this._endPageIndex)) {\n      this._beginPageIndex = this.getBeginPageIndex(this._position);\n      this._endPageIndex = this.getEndPageIndex(this._position);\n    }\n    const beginPageIndex = this._beginPageIndex;\n    const endPageIndex = this._endPageIndex;\n    const visibleColumnsHash = `${rowIndex}-${beginPageIndex}-${endPageIndex}`;\n    if (this._virtualVisibleColumns[visibleColumnsHash]) {\n      return this._virtualVisibleColumns[visibleColumnsHash];\n    }\n    let visibleColumns = super._compileVisibleColumns();\n    const rowCount = this.getRowCount();\n    const pageSize = this.getColumnPageSize();\n    let startIndex = beginPageIndex * pageSize;\n    let endIndex = endPageIndex * pageSize;\n    const fixedColumns = this.getFixedColumns(void 0, true);\n    const transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\n    const beginFixedColumnCount = fixedColumns.length ? transparentColumnIndex : 0;\n    let beginFixedColumns = visibleColumns.slice(0, beginFixedColumnCount);\n    const beginColumns = visibleColumns.slice(beginFixedColumnCount, startIndex);\n    const beginWidth = getWidths(beginColumns).reduce((a, b) => a + b, 0);\n    if (!beginWidth) {\n      startIndex = 0;\n    }\n    const endFixedColumnCount = fixedColumns.length ? fixedColumns.length - transparentColumnIndex - 1 : 0;\n    let endFixedColumns = visibleColumns.slice(visibleColumns.length - endFixedColumnCount);\n    const endColumns = visibleColumns.slice(endIndex, visibleColumns.length - endFixedColumnCount);\n    const endWidth = getWidths(endColumns).reduce((a, b) => a + b, 0);\n    if (!endWidth) {\n      endIndex = visibleColumns.length;\n    }\n    if (rowCount > 1 && \"number\" === typeof rowIndex) {\n      const columnsInfo = [];\n      for (let i = 0; i <= rowCount; i++) {\n        columnsInfo.push(super._compileVisibleColumns(i));\n      }\n      beginFixedColumns = createColumnsInfo(columnsInfo, 0, beginFixedColumns.length)[rowIndex] || [];\n      endFixedColumns = createColumnsInfo(columnsInfo, visibleColumns.length - endFixedColumns.length, visibleColumns.length)[rowIndex] || [];\n      visibleColumns = createColumnsInfo(columnsInfo, startIndex, endIndex)[rowIndex] || [];\n    } else {\n      visibleColumns = visibleColumns.slice(startIndex, endIndex);\n    }\n    if (beginWidth) {\n      visibleColumns.unshift({\n        command: \"virtual\",\n        type: \"virtual\",\n        width: beginWidth\n      });\n      visibleColumns = beginFixedColumns.concat(visibleColumns);\n    }\n    if (endWidth) {\n      visibleColumns.push({\n        command: \"virtual\",\n        type: \"virtual\",\n        width: endWidth\n      });\n      visibleColumns = visibleColumns.concat(endFixedColumns);\n    }\n    this._virtualVisibleColumns[visibleColumnsHash] = visibleColumns;\n    return visibleColumns;\n  }\n  getColumnIndexOffset() {\n    let offset = 0;\n    if (this._beginPageIndex > 0) {\n      const fixedColumns = this.getFixedColumns();\n      const transparentColumnIndex = fixedColumns.map(c => c.command).indexOf(\"transparent\");\n      const leftFixedColumnCount = transparentColumnIndex >= 0 ? transparentColumnIndex : 0;\n      offset = this._beginPageIndex * this.getColumnPageSize() - leftFixedColumnCount - 1;\n    }\n    return offset > 0 ? offset : 0;\n  }\n  isVirtualMode() {\n    return hasWindow() && \"virtual\" === this.option(\"scrolling.columnRenderingMode\");\n  }\n};\nexport const virtualColumnsModule = {\n  defaultOptions: () => ({\n    scrolling: {\n      columnRenderingMode: \"standard\",\n      columnPageSize: 5,\n      columnRenderingThreshold: 300\n    }\n  }),\n  extenders: {\n    controllers: {\n      columns: columns\n    },\n    views: {\n      columnHeadersView: columnHeadersView,\n      rowsView: rowsView\n    }\n  }\n};","map":{"version":3,"names":["browser","getHeight","getOuterWidth","getWidth","isDefined","hasWindow","gridCoreUtils","createColumnsInfo","DEFAULT_COLUMN_WIDTH","baseView","Base","_needToSetCellWidths","result","_columnsController","isVirtualMode","columns","getColumns","some","column","width","rowsView","_resizeCore","apply","arguments","resize","_handleScroll","e","scrollable","getScrollable","left","scrollOffset","option","$content","$element","setScrollPosition","event","_renderCore","virtualColumnsScrolling","_this$_columnsControl","_this$_scrollable","$contentElement","_findContentElement","fixedColumns","getFixedColumns","useNativeScrolling","_scrollable","legacyMode","length","css","minHeight","getContentHeightLimit","resizeCompletedHandler","resizeCompleted","remove","add","columnHeadersView","deferred","_updateScrollLeftPosition","getWidths","map","visibleWidth","parseFloat","init","_resizingController","getController","_beginPageIndex","_endPageIndex","_position","_virtualVisibleColumns","dispose","clearTimeout","_changedTimeout","resetColumnsCache","getBeginPageIndex","position","visibleColumns","getVisibleColumns","widths","currentPosition","index","Math","floor","getColumnPageSize","getTotalWidth","_lastWidth","component","getEndPageIndex","ceil","_fireColumnsChanged","date","Date","columnsChanged","fire","optionNames","all","changeTypes","_renderTime","getScrollingTimeout","renderingThreshold","renderAsync","scrollingTimeout","setTimeout","_setScrollPositionCore","that","beginPageIndex","endPageIndex","needColumnsChanged","rowIndex","isBase","transparentColumnIndex","c","command","indexOf","colspan","_compileVisibleColumns","_this$_columns","_shouldReturnVisibleColumns","_columns","visibleColumnsHash","rowCount","getRowCount","pageSize","startIndex","endIndex","beginFixedColumnCount","beginFixedColumns","slice","beginColumns","beginWidth","reduce","a","b","endFixedColumnCount","endFixedColumns","endColumns","endWidth","columnsInfo","i","push","unshift","type","concat","getColumnIndexOffset","offset","leftFixedColumnCount","virtualColumnsModule","defaultOptions","scrolling","columnRenderingMode","columnPageSize","columnRenderingThreshold","extenders","controllers","views"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/virtual_columns/m_virtual_columns.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/virtual_columns/m_virtual_columns.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    getHeight,\r\n    getOuterWidth,\r\n    getWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../../core/utils/window\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    createColumnsInfo\r\n} from \"./m_virtual_columns_core\";\r\nconst DEFAULT_COLUMN_WIDTH = 50;\r\nconst baseView = Base => class extends Base {\r\n    _needToSetCellWidths() {\r\n        let result = super._needToSetCellWidths();\r\n        if (!result && this._columnsController.isVirtualMode()) {\r\n            const columns = this._columnsController.getColumns();\r\n            result = columns.some((column => \"auto\" === column.width))\r\n        }\r\n        return result\r\n    }\r\n};\r\nconst rowsView = Base => class extends(baseView(Base)) {\r\n    _resizeCore() {\r\n        super._resizeCore.apply(this, arguments);\r\n        this._columnsController.resize()\r\n    }\r\n    _handleScroll(e) {\r\n        const scrollable = this.getScrollable();\r\n        let {\r\n            left: left\r\n        } = e.scrollOffset;\r\n        super._handleScroll.apply(this, arguments);\r\n        if (this.option(\"rtlEnabled\") && scrollable) {\r\n            left = getWidth(scrollable.$content()) - getWidth(scrollable.$element()) - left\r\n        }\r\n        this._columnsController.setScrollPosition(left, e.event)\r\n    }\r\n    _renderCore(e) {\r\n        if (null !== e && void 0 !== e && e.virtualColumnsScrolling) {\r\n            var _this$_columnsControl, _this$_scrollable;\r\n            const $contentElement = this._findContentElement();\r\n            const fixedColumns = null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.getFixedColumns();\r\n            const useNativeScrolling = null === (_this$_scrollable = this._scrollable) || void 0 === _this$_scrollable ? void 0 : _this$_scrollable.option(\"useNative\");\r\n            const legacyMode = this.option(\"columnFixing.legacyMode\");\r\n            if (null !== fixedColumns && void 0 !== fixedColumns && fixedColumns.length) {\r\n                if (legacyMode && !useNativeScrolling) {\r\n                    $contentElement.css({\r\n                        minHeight: gridCoreUtils.getContentHeightLimit(browser)\r\n                    })\r\n                } else {\r\n                    $contentElement.css({\r\n                        minHeight: getHeight($contentElement)\r\n                    })\r\n                }\r\n                const resizeCompletedHandler = () => {\r\n                    this.resizeCompleted.remove(resizeCompletedHandler);\r\n                    $contentElement.css({\r\n                        minHeight: \"\"\r\n                    })\r\n                };\r\n                this.resizeCompleted.add(resizeCompletedHandler)\r\n            }\r\n        }\r\n        return super._renderCore.apply(this, arguments)\r\n    }\r\n};\r\nconst columnHeadersView = Base => class extends(baseView(Base)) {\r\n    _renderCore() {\r\n        const deferred = super._renderCore.apply(this, arguments);\r\n        if (this._columnsController.isVirtualMode()) {\r\n            this._updateScrollLeftPosition()\r\n        }\r\n        return deferred\r\n    }\r\n};\r\nconst getWidths = function(columns) {\r\n    return columns.map((column => column.visibleWidth || parseFloat(column.width) || 50))\r\n};\r\nconst columns = Base => class extends Base {\r\n    init() {\r\n        super.init.apply(this, arguments);\r\n        this._resizingController = this.getController(\"resizing\");\r\n        this._beginPageIndex = null;\r\n        this._endPageIndex = null;\r\n        this._position ?? (this._position = 0);\r\n        this._virtualVisibleColumns = {}\r\n    }\r\n    dispose() {\r\n        clearTimeout(this._changedTimeout);\r\n        super.dispose.apply(this, arguments)\r\n    }\r\n    resetColumnsCache() {\r\n        super.resetColumnsCache();\r\n        this._virtualVisibleColumns = {}\r\n    }\r\n    getBeginPageIndex(position) {\r\n        const visibleColumns = this.getVisibleColumns(void 0, true);\r\n        const widths = getWidths(visibleColumns);\r\n        let currentPosition = 0;\r\n        for (let index = 0; index < widths.length; index++) {\r\n            if (currentPosition >= position) {\r\n                return Math.floor(index / this.getColumnPageSize())\r\n            }\r\n            currentPosition += widths[index]\r\n        }\r\n        return 0\r\n    }\r\n    getTotalWidth() {\r\n        const width = this.option(\"width\");\r\n        if (\"number\" === typeof width) {\r\n            return width\r\n        }\r\n        return this._resizingController._lastWidth || getOuterWidth(this.component.$element())\r\n    }\r\n    getEndPageIndex(position) {\r\n        const visibleColumns = this.getVisibleColumns(void 0, true);\r\n        const widths = getWidths(visibleColumns);\r\n        let currentPosition = 0;\r\n        position += this.getTotalWidth();\r\n        for (let index = 0; index < widths.length; index++) {\r\n            if (currentPosition >= position) {\r\n                return Math.ceil(index / this.getColumnPageSize())\r\n            }\r\n            currentPosition += widths[index]\r\n        }\r\n        return Math.ceil(widths.length / this.getColumnPageSize())\r\n    }\r\n    getColumnPageSize() {\r\n        return this.option(\"scrolling.columnPageSize\")\r\n    }\r\n    _fireColumnsChanged(event) {\r\n        const date = new Date;\r\n        this.columnsChanged.fire({\r\n            optionNames: {\r\n                all: true,\r\n                length: 1\r\n            },\r\n            changeTypes: {\r\n                columns: true,\r\n                virtualColumnsScrolling: true,\r\n                length: 2,\r\n                event: event\r\n            }\r\n        });\r\n        this._renderTime = new Date - date\r\n    }\r\n    getScrollingTimeout() {\r\n        const renderingThreshold = this.option(\"scrolling.columnRenderingThreshold\");\r\n        const renderAsync = this.option(\"scrolling.renderAsync\");\r\n        let scrollingTimeout = 0;\r\n        if (!isDefined(renderAsync) && this._renderTime > renderingThreshold || renderAsync) {\r\n            scrollingTimeout = this.option(\"scrolling.timeout\")\r\n        }\r\n        return scrollingTimeout\r\n    }\r\n    setScrollPosition(position, event) {\r\n        const scrollingTimeout = this.getScrollingTimeout();\r\n        if (scrollingTimeout > 0) {\r\n            clearTimeout(this._changedTimeout);\r\n            this._changedTimeout = setTimeout((() => {\r\n                this._setScrollPositionCore(position, event)\r\n            }), scrollingTimeout)\r\n        } else {\r\n            this._setScrollPositionCore(position, event)\r\n        }\r\n    }\r\n    resize() {\r\n        this._setScrollPositionCore(this._position)\r\n    }\r\n    _setScrollPositionCore(position, event) {\r\n        const that = this;\r\n        if (that.isVirtualMode()) {\r\n            const beginPageIndex = that.getBeginPageIndex(position);\r\n            const endPageIndex = that.getEndPageIndex(position);\r\n            const needColumnsChanged = position < that._position ? that._beginPageIndex > beginPageIndex : that._endPageIndex < endPageIndex;\r\n            that._position = position;\r\n            if (needColumnsChanged) {\r\n                that._beginPageIndex = beginPageIndex;\r\n                that._endPageIndex = endPageIndex;\r\n                that._fireColumnsChanged(event)\r\n            }\r\n        }\r\n    }\r\n    getFixedColumns(rowIndex, isBase) {\r\n        const fixedColumns = super.getFixedColumns(rowIndex);\r\n        if (this.isVirtualMode() && !isBase && fixedColumns.length) {\r\n            const transparentColumnIndex = fixedColumns.map((c => c.command)).indexOf(\"transparent\");\r\n            fixedColumns[transparentColumnIndex].colspan = this.getVisibleColumns().length - super.getFixedColumns().length + 1;\r\n            return fixedColumns\r\n        }\r\n        return fixedColumns\r\n    }\r\n    _compileVisibleColumns(rowIndex, isBase) {\r\n        var _this$_columns;\r\n        if (isBase || !this.isVirtualMode() || !this._shouldReturnVisibleColumns()) {\r\n            return super._compileVisibleColumns(rowIndex)\r\n        }\r\n        if (null !== (_this$_columns = this._columns) && void 0 !== _this$_columns && _this$_columns.length && !isDefined(this._beginPageIndex) && !isDefined(this._endPageIndex)) {\r\n            this._beginPageIndex = this.getBeginPageIndex(this._position);\r\n            this._endPageIndex = this.getEndPageIndex(this._position)\r\n        }\r\n        const beginPageIndex = this._beginPageIndex;\r\n        const endPageIndex = this._endPageIndex;\r\n        const visibleColumnsHash = `${rowIndex}-${beginPageIndex}-${endPageIndex}`;\r\n        if (this._virtualVisibleColumns[visibleColumnsHash]) {\r\n            return this._virtualVisibleColumns[visibleColumnsHash]\r\n        }\r\n        let visibleColumns = super._compileVisibleColumns();\r\n        const rowCount = this.getRowCount();\r\n        const pageSize = this.getColumnPageSize();\r\n        let startIndex = beginPageIndex * pageSize;\r\n        let endIndex = endPageIndex * pageSize;\r\n        const fixedColumns = this.getFixedColumns(void 0, true);\r\n        const transparentColumnIndex = fixedColumns.map((c => c.command)).indexOf(\"transparent\");\r\n        const beginFixedColumnCount = fixedColumns.length ? transparentColumnIndex : 0;\r\n        let beginFixedColumns = visibleColumns.slice(0, beginFixedColumnCount);\r\n        const beginColumns = visibleColumns.slice(beginFixedColumnCount, startIndex);\r\n        const beginWidth = getWidths(beginColumns).reduce(((a, b) => a + b), 0);\r\n        if (!beginWidth) {\r\n            startIndex = 0\r\n        }\r\n        const endFixedColumnCount = fixedColumns.length ? fixedColumns.length - transparentColumnIndex - 1 : 0;\r\n        let endFixedColumns = visibleColumns.slice(visibleColumns.length - endFixedColumnCount);\r\n        const endColumns = visibleColumns.slice(endIndex, visibleColumns.length - endFixedColumnCount);\r\n        const endWidth = getWidths(endColumns).reduce(((a, b) => a + b), 0);\r\n        if (!endWidth) {\r\n            endIndex = visibleColumns.length\r\n        }\r\n        if (rowCount > 1 && \"number\" === typeof rowIndex) {\r\n            const columnsInfo = [];\r\n            for (let i = 0; i <= rowCount; i++) {\r\n                columnsInfo.push(super._compileVisibleColumns(i))\r\n            }\r\n            beginFixedColumns = createColumnsInfo(columnsInfo, 0, beginFixedColumns.length)[rowIndex] || [];\r\n            endFixedColumns = createColumnsInfo(columnsInfo, visibleColumns.length - endFixedColumns.length, visibleColumns.length)[rowIndex] || [];\r\n            visibleColumns = createColumnsInfo(columnsInfo, startIndex, endIndex)[rowIndex] || []\r\n        } else {\r\n            visibleColumns = visibleColumns.slice(startIndex, endIndex)\r\n        }\r\n        if (beginWidth) {\r\n            visibleColumns.unshift({\r\n                command: \"virtual\",\r\n                type: \"virtual\",\r\n                width: beginWidth\r\n            });\r\n            visibleColumns = beginFixedColumns.concat(visibleColumns)\r\n        }\r\n        if (endWidth) {\r\n            visibleColumns.push({\r\n                command: \"virtual\",\r\n                type: \"virtual\",\r\n                width: endWidth\r\n            });\r\n            visibleColumns = visibleColumns.concat(endFixedColumns)\r\n        }\r\n        this._virtualVisibleColumns[visibleColumnsHash] = visibleColumns;\r\n        return visibleColumns\r\n    }\r\n    getColumnIndexOffset() {\r\n        let offset = 0;\r\n        if (this._beginPageIndex > 0) {\r\n            const fixedColumns = this.getFixedColumns();\r\n            const transparentColumnIndex = fixedColumns.map((c => c.command)).indexOf(\"transparent\");\r\n            const leftFixedColumnCount = transparentColumnIndex >= 0 ? transparentColumnIndex : 0;\r\n            offset = this._beginPageIndex * this.getColumnPageSize() - leftFixedColumnCount - 1\r\n        }\r\n        return offset > 0 ? offset : 0\r\n    }\r\n    isVirtualMode() {\r\n        return hasWindow() && \"virtual\" === this.option(\"scrolling.columnRenderingMode\")\r\n    }\r\n};\r\nexport const virtualColumnsModule = {\r\n    defaultOptions: () => ({\r\n        scrolling: {\r\n            columnRenderingMode: \"standard\",\r\n            columnPageSize: 5,\r\n            columnRenderingThreshold: 300\r\n        }\r\n    }),\r\n    extenders: {\r\n        controllers: {\r\n            columns: columns\r\n        },\r\n        views: {\r\n            columnHeadersView: columnHeadersView,\r\n            rowsView: rowsView\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}