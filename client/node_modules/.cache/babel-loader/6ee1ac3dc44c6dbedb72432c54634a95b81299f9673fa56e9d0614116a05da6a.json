{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/ui/form/m_form.utils.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../../core/utils/extend\";\nimport { isDefined } from \"../../../core/utils/type\";\nexport const createItemPathByIndex = (index, isTabs) => `${isTabs ? \"tabs\" : \"items\"}[${index}]`;\nexport const concatPaths = (path1, path2) => {\n  if (isDefined(path1) && isDefined(path2)) {\n    return `${path1}.${path2}`;\n  }\n  return path1 || path2;\n};\nexport const getTextWithoutSpaces = text => text ? text.replace(/\\s/g, \"\") : void 0;\nexport const isEqualToDataFieldOrNameOrTitleOrCaption = (item, fieldName) => {\n  if (item) {\n    return item.dataField === fieldName || item.name === fieldName || getTextWithoutSpaces(item.title) === fieldName || \"group\" === item.itemType && getTextWithoutSpaces(item.caption) === fieldName;\n  }\n  return false;\n};\nexport const getFullOptionName = (path, optionName) => `${path}.${optionName}`;\nexport const getOptionNameFromFullName = fullName => {\n  const parts = fullName.split(\".\");\n  return parts[parts.length - 1].replace(/\\[\\d+]/, \"\");\n};\nexport const tryGetTabPath = fullPath => {\n  const pathParts = fullPath.split(\".\");\n  const resultPathParts = [...pathParts];\n  for (let i = pathParts.length - 1; i >= 0; i--) {\n    if (isFullPathContainsTabs(pathParts[i])) {\n      return resultPathParts.join(\".\");\n    }\n    resultPathParts.splice(i, 1);\n  }\n  return \"\";\n};\nexport const isFullPathContainsTabs = fullPath => fullPath.indexOf(\"tabs\") > -1;\nexport const getItemPath = (items, item, isTabs) => {\n  const index = items.indexOf(item);\n  if (index > -1) {\n    return createItemPathByIndex(index, isTabs);\n  }\n  for (let i = 0; i < items.length; i++) {\n    const targetItem = items[i];\n    const tabOrGroupItems = targetItem.tabs || targetItem.items;\n    if (tabOrGroupItems) {\n      const itemPath = getItemPath(tabOrGroupItems, item, targetItem.tabs);\n      if (itemPath) {\n        return concatPaths(createItemPathByIndex(i, isTabs), itemPath);\n      }\n    }\n  }\n};\nexport function convertToLayoutManagerOptions(_ref) {\n  let {\n    form: form,\n    $formElement: $formElement,\n    formOptions: formOptions,\n    items: items,\n    validationGroup: validationGroup,\n    extendedLayoutManagerOptions: extendedLayoutManagerOptions,\n    onFieldDataChanged: onFieldDataChanged,\n    onContentReady: onContentReady,\n    onDisposing: onDisposing,\n    onFieldItemRendered: onFieldItemRendered\n  } = _ref;\n  const baseOptions = {\n    form: form,\n    items: items,\n    $formElement: $formElement,\n    validationGroup: validationGroup,\n    onFieldDataChanged: onFieldDataChanged,\n    onContentReady: onContentReady,\n    onDisposing: onDisposing,\n    onFieldItemRendered: onFieldItemRendered,\n    validationBoundary: formOptions.scrollingEnabled ? $formElement : void 0,\n    scrollingEnabled: formOptions.scrollingEnabled,\n    showRequiredMark: formOptions.showRequiredMark,\n    showOptionalMark: formOptions.showOptionalMark,\n    requiredMark: formOptions.requiredMark,\n    optionalMark: formOptions.optionalMark,\n    requiredMessage: formOptions.requiredMessage,\n    screenByWidth: formOptions.screenByWidth,\n    layoutData: formOptions.formData,\n    labelLocation: formOptions.labelLocation,\n    customizeItem: formOptions.customizeItem,\n    minColWidth: formOptions.minColWidth,\n    showColonAfterLabel: formOptions.showColonAfterLabel,\n    onEditorEnterKey: formOptions.onEditorEnterKey,\n    labelMode: formOptions.labelMode\n  };\n  const result = extend(baseOptions, {\n    isRoot: extendedLayoutManagerOptions.isRoot,\n    colCount: extendedLayoutManagerOptions.colCount,\n    alignItemLabels: extendedLayoutManagerOptions.alignItemLabels,\n    cssItemClass: extendedLayoutManagerOptions.cssItemClass,\n    colCountByScreen: extendedLayoutManagerOptions.colCountByScreen,\n    onLayoutChanged: extendedLayoutManagerOptions.onLayoutChanged,\n    width: extendedLayoutManagerOptions.width\n  });\n  return result;\n}","map":{"version":3,"names":["extend","isDefined","createItemPathByIndex","index","isTabs","concatPaths","path1","path2","getTextWithoutSpaces","text","replace","isEqualToDataFieldOrNameOrTitleOrCaption","item","fieldName","dataField","name","title","itemType","caption","getFullOptionName","path","optionName","getOptionNameFromFullName","fullName","parts","split","length","tryGetTabPath","fullPath","pathParts","resultPathParts","i","isFullPathContainsTabs","join","splice","indexOf","getItemPath","items","targetItem","tabOrGroupItems","tabs","itemPath","convertToLayoutManagerOptions","_ref","form","$formElement","formOptions","validationGroup","extendedLayoutManagerOptions","onFieldDataChanged","onContentReady","onDisposing","onFieldItemRendered","baseOptions","validationBoundary","scrollingEnabled","showRequiredMark","showOptionalMark","requiredMark","optionalMark","requiredMessage","screenByWidth","layoutData","formData","labelLocation","customizeItem","minColWidth","showColonAfterLabel","onEditorEnterKey","labelMode","result","isRoot","colCount","alignItemLabels","cssItemClass","colCountByScreen","onLayoutChanged","width"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/ui/form/m_form.utils.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/ui/form/m_form.utils.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nexport const createItemPathByIndex = (index, isTabs) => `${isTabs?\"tabs\":\"items\"}[${index}]`;\r\nexport const concatPaths = (path1, path2) => {\r\n    if (isDefined(path1) && isDefined(path2)) {\r\n        return `${path1}.${path2}`\r\n    }\r\n    return path1 || path2\r\n};\r\nexport const getTextWithoutSpaces = text => text ? text.replace(/\\s/g, \"\") : void 0;\r\nexport const isEqualToDataFieldOrNameOrTitleOrCaption = (item, fieldName) => {\r\n    if (item) {\r\n        return item.dataField === fieldName || item.name === fieldName || getTextWithoutSpaces(item.title) === fieldName || \"group\" === item.itemType && getTextWithoutSpaces(item.caption) === fieldName\r\n    }\r\n    return false\r\n};\r\nexport const getFullOptionName = (path, optionName) => `${path}.${optionName}`;\r\nexport const getOptionNameFromFullName = fullName => {\r\n    const parts = fullName.split(\".\");\r\n    return parts[parts.length - 1].replace(/\\[\\d+]/, \"\")\r\n};\r\nexport const tryGetTabPath = fullPath => {\r\n    const pathParts = fullPath.split(\".\");\r\n    const resultPathParts = [...pathParts];\r\n    for (let i = pathParts.length - 1; i >= 0; i--) {\r\n        if (isFullPathContainsTabs(pathParts[i])) {\r\n            return resultPathParts.join(\".\")\r\n        }\r\n        resultPathParts.splice(i, 1)\r\n    }\r\n    return \"\"\r\n};\r\nexport const isFullPathContainsTabs = fullPath => fullPath.indexOf(\"tabs\") > -1;\r\nexport const getItemPath = (items, item, isTabs) => {\r\n    const index = items.indexOf(item);\r\n    if (index > -1) {\r\n        return createItemPathByIndex(index, isTabs)\r\n    }\r\n    for (let i = 0; i < items.length; i++) {\r\n        const targetItem = items[i];\r\n        const tabOrGroupItems = targetItem.tabs || targetItem.items;\r\n        if (tabOrGroupItems) {\r\n            const itemPath = getItemPath(tabOrGroupItems, item, targetItem.tabs);\r\n            if (itemPath) {\r\n                return concatPaths(createItemPathByIndex(i, isTabs), itemPath)\r\n            }\r\n        }\r\n    }\r\n};\r\nexport function convertToLayoutManagerOptions(_ref) {\r\n    let {\r\n        form: form,\r\n        $formElement: $formElement,\r\n        formOptions: formOptions,\r\n        items: items,\r\n        validationGroup: validationGroup,\r\n        extendedLayoutManagerOptions: extendedLayoutManagerOptions,\r\n        onFieldDataChanged: onFieldDataChanged,\r\n        onContentReady: onContentReady,\r\n        onDisposing: onDisposing,\r\n        onFieldItemRendered: onFieldItemRendered\r\n    } = _ref;\r\n    const baseOptions = {\r\n        form: form,\r\n        items: items,\r\n        $formElement: $formElement,\r\n        validationGroup: validationGroup,\r\n        onFieldDataChanged: onFieldDataChanged,\r\n        onContentReady: onContentReady,\r\n        onDisposing: onDisposing,\r\n        onFieldItemRendered: onFieldItemRendered,\r\n        validationBoundary: formOptions.scrollingEnabled ? $formElement : void 0,\r\n        scrollingEnabled: formOptions.scrollingEnabled,\r\n        showRequiredMark: formOptions.showRequiredMark,\r\n        showOptionalMark: formOptions.showOptionalMark,\r\n        requiredMark: formOptions.requiredMark,\r\n        optionalMark: formOptions.optionalMark,\r\n        requiredMessage: formOptions.requiredMessage,\r\n        screenByWidth: formOptions.screenByWidth,\r\n        layoutData: formOptions.formData,\r\n        labelLocation: formOptions.labelLocation,\r\n        customizeItem: formOptions.customizeItem,\r\n        minColWidth: formOptions.minColWidth,\r\n        showColonAfterLabel: formOptions.showColonAfterLabel,\r\n        onEditorEnterKey: formOptions.onEditorEnterKey,\r\n        labelMode: formOptions.labelMode\r\n    };\r\n    const result = extend(baseOptions, {\r\n        isRoot: extendedLayoutManagerOptions.isRoot,\r\n        colCount: extendedLayoutManagerOptions.colCount,\r\n        alignItemLabels: extendedLayoutManagerOptions.alignItemLabels,\r\n        cssItemClass: extendedLayoutManagerOptions.cssItemClass,\r\n        colCountByScreen: extendedLayoutManagerOptions.colCountByScreen,\r\n        onLayoutChanged: extendedLayoutManagerOptions.onLayoutChanged,\r\n        width: extendedLayoutManagerOptions.width\r\n    });\r\n    return result\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}