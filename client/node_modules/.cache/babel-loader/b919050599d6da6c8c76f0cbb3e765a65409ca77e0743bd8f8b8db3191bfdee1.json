{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/column_fixing/m_column_fixing.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { move } from \"../../../../common/core/animation/translator\";\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\nimport { name as wheelEventName } from \"../../../../common/core/events/core/wheel\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport $ from \"../../../../core/renderer\";\nimport browser from \"../../../../core/utils/browser\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { getBoundingRect } from \"../../../../core/utils/position\";\nimport { getOuterWidth } from \"../../../../core/utils/size\";\nimport { setWidth } from \"../../../../core/utils/style\";\nimport { isDefined } from \"../../../../core/utils/type\";\nimport Scrollable from \"../../../../ui/scroll_view/ui.scrollable\";\nimport gridCoreUtils from \"../m_utils\";\nimport { normalizeWidth } from \"../views/m_columns_view\";\nconst CONTENT_CLASS = \"content\";\nconst CONTENT_FIXED_CLASS = \"content-fixed\";\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nconst FIRST_CELL_CLASS = \"dx-first-cell\";\nconst LAST_CELL_CLASS = \"dx-last-cell\";\nconst HOVER_STATE_CLASS = \"dx-state-hover\";\nconst FIXED_COL_CLASS = \"dx-col-fixed\";\nconst FIXED_COLUMNS_CLASS = \"dx-fixed-columns\";\nconst POINTER_EVENTS_NONE_CLASS = \"dx-pointer-events-none\";\nconst COMMAND_TRANSPARENT = \"transparent\";\nconst GROUP_ROW_CLASS = \"dx-group-row\";\nconst DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nconst FIXED_COLUMN_ICON_CLASS = \"fix-column\";\nconst FIXED_COLUMN_LEFT_ICON_CLASS = \"fix-column-left\";\nconst FIXED_COLUMN_RIGHT_ICON_CLASS = \"fix-column-right\";\nconst STICKY_COLUMN_ICON_CLASS = \"stick-column\";\nconst UNFIXED_COLUMN_ICON_CLASS = \"unfix-column\";\nconst getTransparentColumnIndex = function (fixedColumns) {\n  let transparentColumnIndex = -1;\n  each(fixedColumns, (index, column) => {\n    if (\"transparent\" === column.command) {\n      transparentColumnIndex = index;\n      return false;\n    }\n    return;\n  });\n  return transparentColumnIndex;\n};\nconst normalizeColumnWidths = function (fixedColumns, widths, fixedWidths) {\n  let fixedColumnIndex = 0;\n  if (fixedColumns && widths && fixedWidths) {\n    for (let i = 0; i < fixedColumns.length; i++) {\n      if (\"transparent\" === fixedColumns[i].command) {\n        fixedColumnIndex += fixedColumns[i].colspan;\n      } else {\n        if (widths[fixedColumnIndex] < fixedWidths[i]) {\n          widths[fixedColumnIndex] = fixedWidths[i];\n        }\n        fixedColumnIndex++;\n      }\n    }\n  }\n  return widths;\n};\nconst baseFixedColumns = Base => class extends Base {\n  init() {\n    super.init();\n    this._isFixedTableRendering = false;\n    this._isFixedColumns = false;\n  }\n  _createCol(column) {\n    return super._createCol(column).toggleClass(\"dx-col-fixed\", !!(this._isFixedTableRendering && (column.fixed || column.command && \"transparent\" !== column.command)));\n  }\n  isIndicesArray(arr) {\n    return Array.isArray(arr) && arr.length > 0;\n  }\n  _correctColumnIndicesForFixedColumns(fixedColumns, change) {\n    var _change$items;\n    const columnIndicesArray = null === change || void 0 === change ? void 0 : change.columnIndices;\n    if (!this.isIndicesArray(columnIndicesArray)) {\n      return;\n    }\n    const transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n    const transparentColspan = fixedColumns[transparentColumnIndex].colspan;\n    const transparentOffset = transparentColumnIndex + transparentColspan;\n    const rowTypes = null === change || void 0 === change || null === (_change$items = change.items) || void 0 === _change$items ? void 0 : _change$items.map(_ref => {\n      let {\n        rowType: rowType\n      } = _ref;\n      return rowType;\n    });\n    change.columnIndices = columnIndicesArray.map((columnIndices, idx) => {\n      if (!this.isIndicesArray(columnIndices)) {\n        return columnIndices;\n      }\n      const isGroupRow = rowTypes && \"group\" === rowTypes[idx];\n      if (isGroupRow) {\n        return [...columnIndices];\n      }\n      return columnIndices.reduce((result, colIdx) => {\n        switch (true) {\n          case colIdx < transparentColumnIndex:\n            result.push(colIdx);\n            break;\n          case colIdx >= transparentOffset:\n            result.push(colIdx - transparentColspan + 1);\n        }\n        return result;\n      }, []);\n    });\n  }\n  _partialUpdateFixedTable(fixedColumns, rows) {\n    const fixedTableElement = this._fixedTableElement;\n    const $rows = this._getRowElementsCore(fixedTableElement);\n    const $colgroup = fixedTableElement.children(\"colgroup\");\n    $colgroup.replaceWith(this._createColGroup(fixedColumns));\n    for (let i = 0; i < rows.length; i++) {\n      this._partialUpdateFixedRow($($rows[i]), fixedColumns, rows[i]);\n    }\n  }\n  _partialUpdateFixedRow($row, fixedColumns, row) {\n    const cellElements = $row.get(0).childNodes;\n    const transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n    const transparentColumn = fixedColumns[transparentColumnIndex];\n    const columnIndexOffset = this._columnsController.getColumnIndexOffset();\n    let groupCellOptions;\n    let colIndex = columnIndexOffset + 1;\n    let {\n      colspan: colspan\n    } = transparentColumn;\n    if ($row.hasClass(DETAIL_ROW_CLASS)) {\n      var _this$_columnsControl;\n      cellElements[0].setAttribute(\"colspan\", null === (_this$_columnsControl = this._columnsController.getVisibleColumns()) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.length);\n      return;\n    }\n    if ($row.hasClass(\"dx-group-row\")) {\n      groupCellOptions = this._getGroupCellOptions({\n        row: row,\n        columns: this._columnsController.getVisibleColumns()\n      });\n      const hasSummary = row.summaryCells.length > 0;\n      if (hasSummary) {\n        const alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellOptions.colspan, {\n          columns: this._columnsController.getVisibleColumns(),\n          row: row,\n          isFixed: true\n        });\n        colspan = groupCellOptions.colspan - alignByColumnCellCount;\n      } else {\n        colspan = groupCellOptions.colspan - Math.max(0, cellElements.length - (groupCellOptions.columnIndex + 2));\n      }\n    }\n    for (let j = 0; j < cellElements.length; j++) {\n      const needUpdateColspan = groupCellOptions ? j === groupCellOptions.columnIndex + 1 : j === transparentColumnIndex;\n      cellElements[j].setAttribute(\"aria-colindex\", colIndex);\n      if (needUpdateColspan) {\n        cellElements[j].setAttribute(\"colspan\", colspan);\n        colIndex += colspan;\n      } else {\n        colIndex++;\n      }\n    }\n  }\n  _renderTable(options) {\n    let $fixedTable;\n    const fixedColumns = this.getFixedColumns();\n    this._isFixedColumns = this.isFixedColumns();\n    const $table = super._renderTable(options);\n    if (this._isFixedColumns) {\n      var _change$items2;\n      const change = null === options || void 0 === options ? void 0 : options.change;\n      const $fixedDataRows = this._getRowElements(this._fixedTableElement);\n      const needPartialUpdate = (null === change || void 0 === change ? void 0 : change.virtualColumnsScrolling) && $fixedDataRows.length === (null === change || void 0 === change || null === (_change$items2 = change.items) || void 0 === _change$items2 ? void 0 : _change$items2.length);\n      this._isFixedTableRendering = true;\n      if (needPartialUpdate && true !== this.option(\"scrolling.legacyMode\")) {\n        var _options$change;\n        this._partialUpdateFixedTable(fixedColumns, null === options || void 0 === options || null === (_options$change = options.change) || void 0 === _options$change ? void 0 : _options$change.items);\n        this._isFixedTableRendering = false;\n      } else {\n        const columnIndices = null === change || void 0 === change ? void 0 : change.columnIndices;\n        this._correctColumnIndicesForFixedColumns(fixedColumns, change);\n        $fixedTable = this._createTable(fixedColumns);\n        this._renderRows($fixedTable, extend({}, options, {\n          columns: fixedColumns\n        }));\n        this._updateContent($fixedTable, change, true);\n        if (columnIndices) {\n          change.columnIndices = columnIndices;\n        }\n        this._isFixedTableRendering = false;\n      }\n    } else {\n      this._fixedTableElement && this._fixedTableElement.parent().remove();\n      this._fixedTableElement = null;\n    }\n    return $table;\n  }\n  _renderRow($table, options) {\n    let fixedCorrection;\n    let {\n      cells: cells\n    } = options.row;\n    super._renderRow.apply(this, arguments);\n    if (this._isFixedTableRendering && cells && cells.length) {\n      fixedCorrection = 0;\n      const fixedCells = options.row.cells || [];\n      cells = cells.slice();\n      options.row.cells = cells;\n      for (let i = 0; i < fixedCells.length; i++) {\n        if (fixedCells[i].column && \"transparent\" === fixedCells[i].column.command) {\n          fixedCorrection = (fixedCells[i].column.colspan || 1) - 1;\n          continue;\n        }\n        cells[i + fixedCorrection] = fixedCells[i];\n      }\n    }\n  }\n  _createCell(options) {\n    const that = this;\n    const {\n      column: column\n    } = options;\n    const columnCommand = column && column.command;\n    const {\n      rowType: rowType\n    } = options;\n    const $cell = super._createCell.apply(that, arguments);\n    let fixedColumns;\n    let prevFixedColumn;\n    let transparentColumnIndex;\n    if (that._isFixedTableRendering || \"filter\" === rowType) {\n      fixedColumns = that.getFixedColumns();\n      transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n      prevFixedColumn = fixedColumns[transparentColumnIndex - 1];\n    }\n    if (that._isFixedTableRendering) {\n      if (\"transparent\" === columnCommand) {\n        $cell.addClass(\"dx-pointer-events-none\").toggleClass(\"dx-first-cell\", 0 === transparentColumnIndex || prevFixedColumn && \"expand\" === prevFixedColumn.command).toggleClass(\"dx-last-cell\", fixedColumns.length && transparentColumnIndex === fixedColumns.length - 1);\n        if (\"freeSpace\" !== rowType) {\n          gridCoreUtils.setEmptyText($cell);\n        }\n      }\n    } else if (\"filter\" === rowType) {\n      $cell.toggleClass(\"dx-first-cell\", options.columnIndex === transparentColumnIndex);\n    }\n    const isRowAltStyle = that.option(\"rowAlternationEnabled\") && options.isAltRow;\n    const isSelectAllCell = \"multiple\" === that.option(\"selection.mode\") && 0 === options.columnIndex && \"header\" === options.rowType;\n    if (browser.mozilla && options.column.fixed && \"group\" !== options.rowType && !isRowAltStyle && !isSelectAllCell) {\n      $cell.addClass(\"dx-col-fixed\");\n    }\n    return $cell;\n  }\n  _wrapTableInScrollContainer($table, isFixedTableRendering) {\n    const $scrollContainer = super._wrapTableInScrollContainer.apply(this, arguments);\n    if (this._isFixedTableRendering || isFixedTableRendering) {\n      $scrollContainer.addClass(this.addWidgetPrefix(\"content-fixed\"));\n    }\n    return $scrollContainer;\n  }\n  _renderCellContent($cell, options) {\n    let isEmptyCell;\n    const {\n      column: column\n    } = options;\n    const isFixedTableRendering = this._isFixedTableRendering;\n    const isGroupCell = \"group\" === options.rowType && isDefined(column.groupIndex);\n    if (isFixedTableRendering && isGroupCell && !column.command && !column.groupCellTemplate) {\n      $cell.css(\"pointerEvents\", \"none\");\n    }\n    if (!isFixedTableRendering && this._isFixedColumns) {\n      isEmptyCell = column.fixed || column.command && false !== column.fixed;\n      if (isGroupCell) {\n        isEmptyCell = false;\n        if (options.row.summaryCells && options.row.summaryCells.length) {\n          var _this$_getAlignByColu;\n          const columns = this._columnsController.getVisibleColumns();\n          const alignByFixedColumnCellCount = (null === (_this$_getAlignByColu = this._getAlignByColumnCellCount) || void 0 === _this$_getAlignByColu ? void 0 : _this$_getAlignByColu.call(this, column.colspan, {\n            columns: columns,\n            row: options.row,\n            isFixed: true\n          })) ?? 0;\n          if (alignByFixedColumnCellCount > 0) {\n            const transparentColumnIndex = getTransparentColumnIndex(this._columnsController.getFixedColumns());\n            isEmptyCell = columns.length - alignByFixedColumnCellCount < transparentColumnIndex;\n          }\n        }\n      }\n      if (isEmptyCell) {\n        if (column.command && \"buttons\" !== column.type || \"group\" === options.rowType) {\n          $cell.html(\"&nbsp;\").addClass(column.cssClass);\n          return;\n        }\n        $cell.addClass(\"dx-hidden-cell\");\n      }\n    }\n    if (\"transparent\" !== column.command) {\n      super._renderCellContent.apply(this, arguments);\n    }\n  }\n  getContent(isFixedTableRendering) {\n    var _this$_fixedTableElem;\n    return isFixedTableRendering ? null === (_this$_fixedTableElem = this._fixedTableElement) || void 0 === _this$_fixedTableElem ? void 0 : _this$_fixedTableElem.parent() : super.getContent.apply(this, arguments);\n  }\n  _getCellElementsCore(rowIndex) {\n    const cellElements = super._getCellElementsCore.apply(this, arguments);\n    const isGroupRow = null === cellElements || void 0 === cellElements ? void 0 : cellElements.parent().hasClass(\"dx-group-row\");\n    const headerRowIndex = \"columnHeadersView\" === this.name ? rowIndex : void 0;\n    if (this._fixedTableElement && cellElements) {\n      const fixedColumns = this.getFixedColumns(headerRowIndex);\n      const fixedCellElements = this._getRowElements(this._fixedTableElement).eq(rowIndex).children(\"td\");\n      each(fixedCellElements, (columnIndex, cell) => {\n        if (isGroupRow) {\n          if (cellElements[columnIndex] && \"hidden\" !== cell.style.visibility) {\n            cellElements[columnIndex] = cell;\n          }\n        } else {\n          const fixedColumn = fixedColumns[columnIndex];\n          if (fixedColumn) {\n            if (\"transparent\" === fixedColumn.command) {\n              if (fixedCellElements.eq(columnIndex).hasClass(\"dx-master-detail-cell\")) {\n                cellElements[columnIndex] = cell || cellElements[columnIndex];\n              }\n            } else {\n              const fixedColumnIndex = this._columnsController.getVisibleIndexByColumn(fixedColumn, headerRowIndex);\n              cellElements[fixedColumnIndex] = cell || cellElements[fixedColumnIndex];\n            }\n          }\n        }\n      });\n    }\n    return cellElements;\n  }\n  getColumnWidths(fixedTableElement, rowIndex) {\n    const result = super.getColumnWidths(fixedTableElement, rowIndex);\n    const fixedColumns = this.getFixedColumns();\n    const fixedWidths = this._fixedTableElement && result.length ? super.getColumnWidths(this._fixedTableElement) : void 0;\n    return normalizeColumnWidths(fixedColumns, result, fixedWidths);\n  }\n  getTableElement(isFixedTableRendering) {\n    isFixedTableRendering = this._isFixedTableRendering || isFixedTableRendering;\n    const tableElement = isFixedTableRendering ? this._fixedTableElement : super.getTableElement();\n    return tableElement;\n  }\n  setTableElement(tableElement, isFixedTableRendering) {\n    if (this._isFixedTableRendering || isFixedTableRendering) {\n      this._fixedTableElement = tableElement.addClass(\"dx-pointer-events-none\");\n    } else {\n      super.setTableElement(tableElement);\n    }\n  }\n  getColumns(rowIndex) {\n    const $tableElement = this.getTableElement();\n    if (this._isFixedTableRendering) {\n      return this.getFixedColumns(rowIndex);\n    }\n    return super.getColumns(rowIndex, $tableElement);\n  }\n  getRowIndex($row) {\n    const $fixedTable = this._fixedTableElement;\n    if ($fixedTable && $fixedTable.find($row).length) {\n      return this._getRowElements($fixedTable).index($row);\n    }\n    return super.getRowIndex($row);\n  }\n  getTableElements() {\n    let result = super.getTableElements.apply(this, arguments);\n    if (this._fixedTableElement) {\n      result = $([result.get(0), this._fixedTableElement.get(0)]);\n    }\n    return result;\n  }\n  getFixedColumns(rowIndex) {\n    return this._columnsController.getFixedColumns(rowIndex);\n  }\n  getFixedColumnsOffset() {\n    let offset = {\n      left: 0,\n      right: 0\n    };\n    let $transparentColumn;\n    if (this._fixedTableElement) {\n      $transparentColumn = this.getTransparentColumnElement();\n      const positionTransparentColumn = $transparentColumn.position();\n      offset = {\n        left: positionTransparentColumn.left,\n        right: getOuterWidth(this.element(), true) - (getOuterWidth($transparentColumn, true) + positionTransparentColumn.left)\n      };\n    }\n    return offset;\n  }\n  getTransparentColumnElement() {\n    return this._fixedTableElement && this._fixedTableElement.find(\".dx-pointer-events-none\").first();\n  }\n  getFixedTableElement() {\n    return this._fixedTableElement;\n  }\n  _resizeCore() {\n    super._resizeCore();\n    this.synchronizeRows();\n  }\n  setColumnWidths(options) {\n    var _options$optionNames;\n    const {\n      widths: widths\n    } = options;\n    const visibleColumns = this._columnsController.getVisibleColumns();\n    const isColumnWidthsSynced = (null === widths || void 0 === widths ? void 0 : widths.length) && visibleColumns.some(column => isDefined(column.visibleWidth));\n    const isColumnWidthChanged = null === (_options$optionNames = options.optionNames) || void 0 === _options$optionNames ? void 0 : _options$optionNames.width;\n    super.setColumnWidths(options);\n    if (this._fixedTableElement) {\n      const hasAutoWidth = null === widths || void 0 === widths ? void 0 : widths.some(width => \"auto\" === width || !isDefined(width));\n      const needVisibleColumns = hasAutoWidth && (!isColumnWidthsSynced || !this.isScrollbarVisible(true));\n      const columns = needVisibleColumns ? visibleColumns : this.getFixedColumns();\n      this.setFixedTableColumnWidths(columns, widths);\n    }\n    const wordWrapEnabled = this.option(\"wordWrapEnabled\");\n    const needSynchronizeRows = isColumnWidthsSynced || isColumnWidthChanged && wordWrapEnabled;\n    if (needSynchronizeRows) {\n      this.synchronizeRows();\n    }\n  }\n  setFixedTableColumnWidths(columns, widths) {\n    if (!this._fixedTableElement || !widths) {\n      return;\n    }\n    const $cols = this._fixedTableElement.children(\"colgroup\").children(\"col\");\n    $cols.toArray().forEach(col => col.removeAttribute(\"style\"));\n    let columnIndex = 0;\n    columns.forEach(column => {\n      if (column.colspan) {\n        columnIndex += column.colspan;\n        return;\n      }\n      const colWidth = normalizeWidth(widths[columnIndex]);\n      if (isDefined(colWidth)) {\n        setWidth($cols.eq(columnIndex), colWidth);\n      }\n      columnIndex += 1;\n    });\n  }\n  _getClientHeight(element) {\n    const boundingClientRectElement = element.getBoundingClientRect && getBoundingRect(element);\n    return boundingClientRectElement && boundingClientRectElement.height ? boundingClientRectElement.height : element.clientHeight;\n  }\n  synchronizeRows() {\n    const rowHeights = [];\n    const fixedRowHeights = [];\n    let rowIndex;\n    let $rowElements;\n    let $fixedRowElements;\n    let $contentElement;\n    this.waitAsyncTemplates(true).done(() => {\n      if (this._isFixedColumns && this._tableElement && this._fixedTableElement) {\n        const heightTable = this._getClientHeight(this._tableElement.get(0));\n        const heightFixedTable = this._getClientHeight(this._fixedTableElement.get(0));\n        $rowElements = this._getRowElements(this._tableElement);\n        $fixedRowElements = this._getRowElements(this._fixedTableElement);\n        $contentElement = this._findContentElement();\n        if (heightTable !== heightFixedTable) {\n          $contentElement && $contentElement.css(\"height\", heightTable);\n          $rowElements.css(\"height\", \"\");\n          $fixedRowElements.css(\"height\", \"\");\n          for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {\n            rowHeights.push(this._getClientHeight($rowElements.get(rowIndex)));\n            fixedRowHeights.push(this._getClientHeight($fixedRowElements.get(rowIndex)));\n          }\n          for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {\n            const rowHeight = rowHeights[rowIndex];\n            const fixedRowHeight = fixedRowHeights[rowIndex];\n            if (rowHeight > fixedRowHeight) {\n              $fixedRowElements.eq(rowIndex).css(\"height\", rowHeight);\n            } else if (rowHeight < fixedRowHeight) {\n              $rowElements.eq(rowIndex).css(\"height\", fixedRowHeight);\n            }\n          }\n          $contentElement && $contentElement.css(\"height\", \"\");\n        }\n      }\n    });\n  }\n  setScrollerSpacing(width, hWidth) {\n    const rtlEnabled = this.option(\"rtlEnabled\");\n    super.setScrollerSpacing(width);\n    this.element().children(`.${this.addWidgetPrefix(\"content-fixed\")}`).css({\n      paddingLeft: rtlEnabled ? width : \"\",\n      paddingRight: !rtlEnabled ? width : \"\"\n    });\n  }\n  isFixedColumns() {\n    const fixedColumns = this.getFixedColumns();\n    const legacyMode = this.option(\"columnFixing.legacyMode\");\n    return true === legacyMode && !!fixedColumns.length;\n  }\n};\nconst columnHeadersView = Base => class extends baseFixedColumns(Base) {\n  _getRowVisibleColumns(rowIndex) {\n    if (this._isFixedTableRendering) {\n      return this.getFixedColumns(rowIndex);\n    }\n    return super._getRowVisibleColumns(rowIndex);\n  }\n  getFixedColumnElements(rowIndex) {\n    const that = this;\n    if (!this._isFixedColumns) {\n      return;\n    }\n    if (isDefined(rowIndex)) {\n      return this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).children();\n    }\n    const columnElements = that.getColumnElements();\n    const $transparentColumnElement = that.getTransparentColumnElement();\n    if (columnElements && $transparentColumnElement && $transparentColumnElement.length) {\n      var _$transparentColumnEl;\n      const transparentColumnIndex = getTransparentColumnIndex(that.getFixedColumns());\n      [].splice.apply(columnElements, [transparentColumnIndex, null === (_$transparentColumnEl = $transparentColumnElement.get(0)) || void 0 === _$transparentColumnEl ? void 0 : _$transparentColumnEl.colSpan, $transparentColumnElement.get(0)]);\n    }\n    return columnElements;\n  }\n  getColumnWidths(fixedTableElement, rowIndex) {\n    const that = this;\n    let fixedWidths;\n    const result = super.getColumnWidths(fixedTableElement, rowIndex);\n    const $fixedColumnElements = that.getFixedColumnElements();\n    const fixedColumns = that.getFixedColumns();\n    if (that._fixedTableElement) {\n      if ($fixedColumnElements && $fixedColumnElements.length) {\n        fixedWidths = that._getWidths($fixedColumnElements);\n      } else {\n        fixedWidths = super.getColumnWidths(that._fixedTableElement);\n      }\n    }\n    return normalizeColumnWidths(fixedColumns, result, fixedWidths);\n  }\n};\nconst rowsView = Base => class extends baseFixedColumns(Base) {\n  dispose() {\n    super.dispose.apply(this, arguments);\n    clearTimeout(this._fixedScrollTimeout);\n  }\n  optionChanged(args) {\n    super.optionChanged(args);\n    if (\"hoverStateEnabled\" === args.name && this._isFixedColumns) {\n      args.value ? this._attachHoverEvents() : this._detachHoverEvents();\n    }\n  }\n  _detachHoverEvents() {\n    const element = this.element();\n    if (this._fixedTableElement && this._tableElement) {\n      eventsEngine.off(element, \"mouseover mouseout\", \".dx-data-row\");\n    }\n  }\n  _attachHoverEvents() {\n    if (this._fixedTableElement && this._tableElement) {\n      eventsEngine.on(this.element(), \"mouseover mouseout\", \".dx-data-row\", this.createAction(args => {\n        const {\n          event: event\n        } = args;\n        const rowIndex = this.getRowIndex($(event.target).closest(\".dx-row\"));\n        const isHover = \"mouseover\" === event.type;\n        if (rowIndex >= 0) {\n          this._tableElement && this._getRowElements(this._tableElement).eq(rowIndex).toggleClass(\"dx-state-hover\", isHover);\n          this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).toggleClass(\"dx-state-hover\", isHover);\n        }\n      }));\n    }\n  }\n  _getScrollDelay() {\n    var _this$_resizingContro;\n    const hasResizeTimeout = null === (_this$_resizingContro = this._resizingController) || void 0 === _this$_resizingContro ? void 0 : _this$_resizingContro.hasResizeTimeout();\n    if (hasResizeTimeout) {\n      return this.option(\"scrolling.updateTimeout\");\n    }\n    return browser.mozilla ? 60 : 0;\n  }\n  _findContentElement(isFixedTableRendering) {\n    let $content;\n    let scrollTop;\n    const contentClass = this.addWidgetPrefix(\"content\");\n    const element = this.element();\n    isFixedTableRendering = this._isFixedTableRendering || isFixedTableRendering;\n    if (element && isFixedTableRendering) {\n      $content = element.children(`.${contentClass}`);\n      const scrollable = this.getScrollable();\n      if (!$content.length && scrollable) {\n        $content = $(\"<div>\").addClass(contentClass);\n        eventsEngine.on($content, \"scroll\", e => {\n          const {\n            target: target\n          } = e;\n          const scrollDelay = this._getScrollDelay();\n          clearTimeout(this._fixedScrollTimeout);\n          this._fixedScrollTimeout = setTimeout(() => {\n            scrollTop = $(target).scrollTop();\n            scrollable.scrollTo({\n              y: scrollTop\n            });\n          }, scrollDelay);\n        });\n        eventsEngine.on($content, wheelEventName, e => {\n          const $nearestScrollable = $(e.target).closest(\".dx-scrollable\");\n          let shouldScroll = false;\n          if (scrollable && scrollable.$element().is($nearestScrollable)) {\n            shouldScroll = true;\n          } else {\n            const nearestScrollableInstance = $nearestScrollable.length && Scrollable.getInstance($nearestScrollable.get(0));\n            const nearestScrollableHasVerticalScrollbar = nearestScrollableInstance && nearestScrollableInstance.scrollHeight() - nearestScrollableInstance.clientHeight() > 0;\n            shouldScroll = nearestScrollableInstance && !nearestScrollableHasVerticalScrollbar;\n          }\n          if (shouldScroll) {\n            scrollTop = scrollable.scrollTop();\n            scrollable.scrollTo({\n              y: scrollTop - e.delta\n            });\n            const scrollableTop = scrollable.scrollTop() + scrollable.clientHeight();\n            const scrollableHeight = scrollable.scrollHeight() + this.getScrollbarWidth();\n            const isPreventDefault = scrollable.scrollTop() > 0 && scrollableTop < scrollableHeight;\n            if (isPreventDefault) {\n              return false;\n            }\n          }\n          return;\n        });\n        $content.appendTo(element);\n      }\n      return $content;\n    }\n    return super._findContentElement();\n  }\n  _updateScrollable() {\n    super._updateScrollable();\n    const scrollable = this.getScrollable();\n    if (null !== scrollable && void 0 !== scrollable && scrollable._disposed) {\n      return;\n    }\n    const scrollTop = scrollable && scrollable.scrollOffset().top;\n    this._updateFixedTablePosition(scrollTop);\n  }\n  _renderContent(contentElement, tableElement, isFixedTableRendering) {\n    if (this._isFixedTableRendering || isFixedTableRendering) {\n      return contentElement.empty().addClass(`${this.addWidgetPrefix(\"content\")} ${this.addWidgetPrefix(\"content-fixed\")}`).append(tableElement);\n    }\n    return super._renderContent(contentElement, tableElement);\n  }\n  _getGroupCellOptions(options) {\n    if (this._isFixedTableRendering) {\n      return super._getGroupCellOptions(extend({}, options, {\n        columns: this._columnsController.getVisibleColumns()\n      }));\n    }\n    return super._getGroupCellOptions(options);\n  }\n  _renderGroupedCells($row, options) {\n    return super._renderGroupedCells($row, extend({}, options, {\n      columns: this._columnsController.getVisibleColumns()\n    }));\n  }\n  _renderGroupSummaryCells($row, options) {\n    if (this._isFixedTableRendering) {\n      super._renderGroupSummaryCells($row, extend({}, options, {\n        columns: this._columnsController.getVisibleColumns()\n      }));\n    } else {\n      super._renderGroupSummaryCells($row, options);\n    }\n  }\n  _hasAlignByColumnSummaryItems(columnIndex, options) {\n    const result = super._hasAlignByColumnSummaryItems.apply(this, arguments);\n    const column = options.columns[columnIndex];\n    if (options.isFixed) {\n      return column.fixed && (result || \"right\" === column.fixedPosition);\n    }\n    return result && (!this._isFixedColumns || !column.fixed);\n  }\n  _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n    let alignByFixedColumnCellCount;\n    if (this._isFixedTableRendering) {\n      options.isFixed = true;\n      alignByFixedColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n      options.isFixed = false;\n      const startColumnIndex = options.columns.length - alignByFixedColumnCellCount;\n      options = extend({}, options, {\n        columns: this.getFixedColumns()\n      });\n      const transparentColumnIndex = getTransparentColumnIndex(options.columns);\n      if (startColumnIndex < transparentColumnIndex) {\n        alignByFixedColumnCellCount -= options.columns[transparentColumnIndex].colspan - 1 || 0;\n        groupCellColSpan -= options.columns[transparentColumnIndex].colspan - 1 || 0;\n      } else if (alignByColumnCellCount > 0) {\n        $groupCell.css(\"visibility\", \"hidden\");\n      }\n      alignByColumnCellCount = alignByFixedColumnCellCount;\n    }\n    super._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n  }\n  _getSummaryCellIndex(columnIndex, columns) {\n    if (this._isFixedTableRendering) {\n      const transparentColumnIndex = getTransparentColumnIndex(columns);\n      if (columnIndex > transparentColumnIndex) {\n        columnIndex += columns[transparentColumnIndex].colspan - 1;\n      }\n      return columnIndex;\n    }\n    return super._getSummaryCellIndex.apply(this, arguments);\n  }\n  _renderCore(change) {\n    this._detachHoverEvents();\n    const deferred = super._renderCore(change);\n    const isFixedColumns = this._isFixedColumns;\n    this.element().toggleClass(\"dx-fixed-columns\", isFixedColumns);\n    if (this.option(\"hoverStateEnabled\") && isFixedColumns) {\n      this._attachHoverEvents();\n    }\n    return deferred;\n  }\n  setAriaOwns(headerTableId, footerTableId, isFixed) {\n    if (isFixed) {\n      var _this$element;\n      const contentFixedClass = this.addWidgetPrefix(\"content-fixed\");\n      const $contentFixedElement = null === (_this$element = this.element()) || void 0 === _this$element ? void 0 : _this$element.children(`.${contentFixedClass}`);\n      const $fixedTableElement = this.getFixedTableElement();\n      if ($contentFixedElement.length && null !== $fixedTableElement && void 0 !== $fixedTableElement && $fixedTableElement.length) {\n        this.setAria(\"owns\", `${headerTableId ?? \"\"} ${$fixedTableElement.attr(\"id\") ?? \"\"} ${footerTableId ?? \"\"}`.trim(), $contentFixedElement);\n      }\n    } else {\n      super.setAriaOwns.apply(this, arguments);\n    }\n  }\n  toggleDraggableColumnClass(columnIndex, value) {\n    super.toggleDraggableColumnClass(columnIndex, value);\n    if (this.isFixedColumns()) {\n      const $rows = this._getRowElements(this._fixedTableElement);\n      this._toggleDraggableSourceColumnClass($rows, this.getFixedColumns(), columnIndex, value);\n    }\n  }\n  getCellIndex($cell) {\n    const $fixedTable = this._fixedTableElement;\n    let cellIndex = 0;\n    if ($fixedTable && $cell.is(\"td\") && $cell.closest($fixedTable).length) {\n      const columns = this.getFixedColumns();\n      each(columns, (index, column) => {\n        if (index === $cell[0].cellIndex) {\n          return false;\n        }\n        if (column.colspan) {\n          cellIndex += column.colspan;\n          return;\n        }\n        cellIndex++;\n        return;\n      });\n      return cellIndex;\n    }\n    return super.getCellIndex.apply(this, arguments);\n  }\n  _updateFixedTablePosition(scrollTop, needFocus) {\n    if (this._fixedTableElement && this._tableElement) {\n      let $focusedElement;\n      this._fixedTableElement.parent().scrollTop(scrollTop);\n      if (needFocus && this._editorFactoryController) {\n        $focusedElement = this._editorFactoryController.focus();\n        $focusedElement && this._editorFactoryController.focus($focusedElement);\n      }\n    }\n  }\n  setScrollerSpacing(vWidth, hWidth) {\n    const that = this;\n    const styles = {\n      marginBottom: 0\n    };\n    const $fixedContent = that.element().children(`.${this.addWidgetPrefix(\"content-fixed\")}`);\n    if ($fixedContent.length && that._fixedTableElement) {\n      $fixedContent.css(styles);\n      that._fixedTableElement.css(styles);\n      styles[that.option(\"rtlEnabled\") ? \"marginLeft\" : \"marginRight\"] = vWidth;\n      styles.marginBottom = hWidth;\n      const useNativeScrolling = that._scrollable && that._scrollable.option(\"useNative\");\n      (useNativeScrolling ? $fixedContent : that._fixedTableElement).css(styles);\n    }\n  }\n  _getElasticScrollTop(e) {\n    let elasticScrollTop = 0;\n    if (e.scrollOffset.top < 0) {\n      elasticScrollTop = -e.scrollOffset.top;\n    } else if (e.reachedBottom) {\n      const $scrollableContent = $(e.component.content());\n      const $scrollableContainer = $(e.component.container());\n      const maxScrollTop = Math.max($scrollableContent.get(0).clientHeight - $scrollableContainer.get(0).clientHeight, 0);\n      elasticScrollTop = Math.min(maxScrollTop - e.scrollOffset.top, 0);\n    }\n    return Math.floor(elasticScrollTop);\n  }\n  _applyElasticScrolling(e) {\n    if (this._fixedTableElement) {\n      const elasticScrollTop = this._getElasticScrollTop(e);\n      if (0 !== Math.ceil(elasticScrollTop)) {\n        move(this._fixedTableElement, {\n          top: elasticScrollTop\n        });\n      } else {\n        this._fixedTableElement.css(\"transform\", \"\");\n      }\n    }\n  }\n  _handleScroll(e) {\n    this._updateFixedTablePosition(e.scrollOffset.top, true);\n    this._applyElasticScrolling(e);\n    super._handleScroll(e);\n  }\n  _updateContentPosition(isRender) {\n    super._updateContentPosition.apply(this, arguments);\n    if (!isRender) {\n      this._updateFixedTablePosition(this._scrollTop);\n    }\n  }\n  _afterRowPrepared(e) {\n    if (this._isFixedTableRendering) {\n      return;\n    }\n    super._afterRowPrepared(e);\n  }\n  _scrollToElement($element, offset) {\n    const scrollOffset = this.isFixedColumns() ? this.getFixedColumnsOffset() : offset;\n    super._scrollToElement($element, scrollOffset);\n  }\n};\nconst footerView = Base => class extends baseFixedColumns(Base) {};\nconst normalizeColumnIndicesByPoints = function (columns, fixedColumns, pointsByColumns) {\n  const transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n  const correctIndex = columns.length - fixedColumns.length;\n  each(pointsByColumns, (_, point) => {\n    if (point.index > transparentColumnIndex) {\n      point.columnIndex += correctIndex;\n      point.index += correctIndex;\n    }\n  });\n  return pointsByColumns;\n};\nconst draggingHeader = Base => class extends Base {\n  _generatePointsByColumns(options, needToCheckPrevPoint) {\n    const visibleColumns = options.columns;\n    const {\n      targetDraggingPanel: targetDraggingPanel\n    } = options;\n    if (targetDraggingPanel && \"headers\" === targetDraggingPanel.getName() && targetDraggingPanel.isFixedColumns()) {\n      if (options.sourceColumn.fixed) {\n        if (!options.rowIndex) {\n          options.columnElements = targetDraggingPanel.getFixedColumnElements(0);\n        }\n        options.columns = targetDraggingPanel.getFixedColumns(options.rowIndex);\n        const pointsByColumns = super._generatePointsByColumns(options, needToCheckPrevPoint);\n        normalizeColumnIndicesByPoints(visibleColumns, options.columns, pointsByColumns);\n        return pointsByColumns;\n      }\n    }\n    return super._generatePointsByColumns(options, needToCheckPrevPoint);\n  }\n  _pointCreated(point, columns, location, sourceColumn) {\n    const result = super._pointCreated.apply(this, arguments);\n    const targetColumn = columns[point.columnIndex];\n    const $transparentColumn = this._columnHeadersView.getTransparentColumnElement();\n    if (!result && \"headers\" === location && $transparentColumn && $transparentColumn.length) {\n      const boundingRect = getBoundingRect($transparentColumn.get(0));\n      if (sourceColumn && sourceColumn.fixed) {\n        return \"right\" === sourceColumn.fixedPosition ? point.x < boundingRect.right : point.x > boundingRect.left;\n      }\n      if (targetColumn && targetColumn.fixed && \"right\" !== targetColumn.fixedPosition) {\n        return true;\n      }\n      return point.x < boundingRect.left || point.x > boundingRect.right;\n    }\n    return result;\n  }\n};\nconst columnsResizer = Base => class extends Base {\n  _generatePointsByColumns(needToCheckPrevPoint) {\n    const that = this;\n    const columnsController = that._columnsController;\n    const columns = columnsController && that._columnsController.getVisibleColumns();\n    const fixedColumns = columnsController && that._columnsController.getFixedColumns();\n    const transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\n    const correctIndex = columns.length - fixedColumns.length;\n    const cells = that._columnHeadersView.getFixedColumnElements();\n    super._generatePointsByColumns(needToCheckPrevPoint);\n    if (cells && cells.length > 0) {\n      that._pointsByFixedColumns = gridCoreUtils.getPointsByColumns(cells, point => {\n        if (point.index > transparentColumnIndex) {\n          point.columnIndex += correctIndex;\n          point.index += correctIndex;\n        }\n        return that._pointCreated(point, columns.length, columns);\n      });\n    }\n  }\n  _getTargetPoint(pointsByColumns, currentX, deltaX) {\n    const $transparentColumn = this._columnHeadersView.getTransparentColumnElement();\n    if ($transparentColumn && $transparentColumn.length) {\n      const boundingRect = getBoundingRect($transparentColumn.get(0));\n      if (currentX <= boundingRect.left || currentX >= boundingRect.right) {\n        return super._getTargetPoint(this._pointsByFixedColumns, currentX, deltaX);\n      }\n    }\n    return super._getTargetPoint(pointsByColumns, currentX, deltaX);\n  }\n};\nconst resizing = Base => class extends Base {\n  _setAriaOwns() {\n    var _this$_columnHeadersV, _this$_footerView, _this$_rowsView;\n    super._setAriaOwns.apply(this, arguments);\n    const headerFixedTable = null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.getFixedTableElement();\n    const footerFixedTable = null === (_this$_footerView = this._footerView) || void 0 === _this$_footerView ? void 0 : _this$_footerView.getFixedTableElement();\n    null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView || _this$_rowsView.setAriaOwns(null === headerFixedTable || void 0 === headerFixedTable ? void 0 : headerFixedTable.attr(\"id\"), null === footerFixedTable || void 0 === footerFixedTable ? void 0 : footerFixedTable.attr(\"id\"), true);\n  }\n};\nconst keyboardNavigation = Base => class extends Base {\n  _toggleInertAttr(value) {\n    var _this$_rowsView2;\n    const $fixedContent = null === (_this$_rowsView2 = this._rowsView) || void 0 === _this$_rowsView2 ? void 0 : _this$_rowsView2.getFixedContentElement();\n    if (value) {\n      null === $fixedContent || void 0 === $fixedContent || $fixedContent.attr(\"inert\", true);\n    } else {\n      null === $fixedContent || void 0 === $fixedContent || $fixedContent.removeAttr(\"inert\");\n    }\n  }\n};\nconst editorFactory = Base => class extends Base {\n  getValidationMessageContainer($cell) {\n    const isFixedColumns = this._rowsView.isFixedColumns();\n    if (isFixedColumns) {\n      return this._rowsView.element();\n    }\n    return super.getValidationMessageContainer($cell);\n  }\n};\nexport const columnFixingModule = {\n  defaultOptions: () => ({\n    columnFixing: {\n      enabled: false,\n      legacyMode: false,\n      texts: {\n        fix: messageLocalization.format(\"dxDataGrid-columnFixingFix\"),\n        unfix: messageLocalization.format(\"dxDataGrid-columnFixingUnfix\"),\n        leftPosition: messageLocalization.format(\"dxDataGrid-columnFixingLeftPosition\"),\n        rightPosition: messageLocalization.format(\"dxDataGrid-columnFixingRightPosition\"),\n        stickyPosition: messageLocalization.format(\"dxDataGrid-columnFixingStickyPosition\")\n      },\n      icons: {\n        fix: \"fix-column\",\n        unfix: \"unfix-column\",\n        leftPosition: \"fix-column-left\",\n        rightPosition: \"fix-column-right\",\n        stickyPosition: \"stick-column\"\n      }\n    }\n  }),\n  extenders: {\n    views: {\n      columnHeadersView: columnHeadersView,\n      rowsView: rowsView,\n      footerView: footerView\n    },\n    controllers: {\n      draggingHeader: draggingHeader,\n      columnsResizer: columnsResizer,\n      resizing: resizing,\n      keyboardNavigation: keyboardNavigation,\n      editorFactory: editorFactory\n    }\n  }\n};","map":{"version":3,"names":["move","eventsEngine","name","wheelEventName","messageLocalization","$","browser","extend","each","getBoundingRect","getOuterWidth","setWidth","isDefined","Scrollable","gridCoreUtils","normalizeWidth","CONTENT_CLASS","CONTENT_FIXED_CLASS","MASTER_DETAIL_CELL_CLASS","FIRST_CELL_CLASS","LAST_CELL_CLASS","HOVER_STATE_CLASS","FIXED_COL_CLASS","FIXED_COLUMNS_CLASS","POINTER_EVENTS_NONE_CLASS","COMMAND_TRANSPARENT","GROUP_ROW_CLASS","DETAIL_ROW_CLASS","FIXED_COLUMN_ICON_CLASS","FIXED_COLUMN_LEFT_ICON_CLASS","FIXED_COLUMN_RIGHT_ICON_CLASS","STICKY_COLUMN_ICON_CLASS","UNFIXED_COLUMN_ICON_CLASS","getTransparentColumnIndex","fixedColumns","transparentColumnIndex","index","column","command","normalizeColumnWidths","widths","fixedWidths","fixedColumnIndex","i","length","colspan","baseFixedColumns","Base","init","_isFixedTableRendering","_isFixedColumns","_createCol","toggleClass","fixed","isIndicesArray","arr","Array","isArray","_correctColumnIndicesForFixedColumns","change","_change$items","columnIndicesArray","columnIndices","transparentColspan","transparentOffset","rowTypes","items","map","_ref","rowType","idx","isGroupRow","reduce","result","colIdx","push","_partialUpdateFixedTable","rows","fixedTableElement","_fixedTableElement","$rows","_getRowElementsCore","$colgroup","children","replaceWith","_createColGroup","_partialUpdateFixedRow","$row","row","cellElements","get","childNodes","transparentColumn","columnIndexOffset","_columnsController","getColumnIndexOffset","groupCellOptions","colIndex","hasClass","_this$_columnsControl","setAttribute","getVisibleColumns","_getGroupCellOptions","columns","hasSummary","summaryCells","alignByColumnCellCount","_getAlignByColumnCellCount","isFixed","Math","max","columnIndex","j","needUpdateColspan","_renderTable","options","$fixedTable","getFixedColumns","isFixedColumns","$table","_change$items2","$fixedDataRows","_getRowElements","needPartialUpdate","virtualColumnsScrolling","option","_options$change","_createTable","_renderRows","_updateContent","parent","remove","_renderRow","fixedCorrection","cells","apply","arguments","fixedCells","slice","_createCell","that","columnCommand","$cell","prevFixedColumn","addClass","setEmptyText","isRowAltStyle","isAltRow","isSelectAllCell","mozilla","_wrapTableInScrollContainer","isFixedTableRendering","$scrollContainer","addWidgetPrefix","_renderCellContent","isEmptyCell","isGroupCell","groupIndex","groupCellTemplate","css","_this$_getAlignByColu","alignByFixedColumnCellCount","call","type","html","cssClass","getContent","_this$_fixedTableElem","_getCellElementsCore","rowIndex","headerRowIndex","fixedCellElements","eq","cell","style","visibility","fixedColumn","getVisibleIndexByColumn","getColumnWidths","getTableElement","tableElement","setTableElement","getColumns","$tableElement","getRowIndex","find","getTableElements","getFixedColumnsOffset","offset","left","right","$transparentColumn","getTransparentColumnElement","positionTransparentColumn","position","element","first","getFixedTableElement","_resizeCore","synchronizeRows","setColumnWidths","_options$optionNames","visibleColumns","isColumnWidthsSynced","some","visibleWidth","isColumnWidthChanged","optionNames","width","hasAutoWidth","needVisibleColumns","isScrollbarVisible","setFixedTableColumnWidths","wordWrapEnabled","needSynchronizeRows","$cols","toArray","forEach","col","removeAttribute","colWidth","_getClientHeight","boundingClientRectElement","getBoundingClientRect","height","clientHeight","rowHeights","fixedRowHeights","$rowElements","$fixedRowElements","$contentElement","waitAsyncTemplates","done","_tableElement","heightTable","heightFixedTable","_findContentElement","rowHeight","fixedRowHeight","setScrollerSpacing","hWidth","rtlEnabled","paddingLeft","paddingRight","legacyMode","columnHeadersView","_getRowVisibleColumns","getFixedColumnElements","columnElements","getColumnElements","$transparentColumnElement","_$transparentColumnEl","splice","colSpan","$fixedColumnElements","_getWidths","rowsView","dispose","clearTimeout","_fixedScrollTimeout","optionChanged","args","value","_attachHoverEvents","_detachHoverEvents","off","on","createAction","event","target","closest","isHover","_getScrollDelay","_this$_resizingContro","hasResizeTimeout","_resizingController","$content","scrollTop","contentClass","scrollable","getScrollable","e","scrollDelay","setTimeout","scrollTo","y","$nearestScrollable","shouldScroll","$element","is","nearestScrollableInstance","getInstance","nearestScrollableHasVerticalScrollbar","scrollHeight","delta","scrollableTop","scrollableHeight","getScrollbarWidth","isPreventDefault","appendTo","_updateScrollable","_disposed","scrollOffset","top","_updateFixedTablePosition","_renderContent","contentElement","empty","append","_renderGroupedCells","_renderGroupSummaryCells","_hasAlignByColumnSummaryItems","fixedPosition","_renderGroupSummaryCellsCore","$groupCell","groupCellColSpan","startColumnIndex","_getSummaryCellIndex","_renderCore","deferred","setAriaOwns","headerTableId","footerTableId","_this$element","contentFixedClass","$contentFixedElement","$fixedTableElement","setAria","attr","trim","toggleDraggableColumnClass","_toggleDraggableSourceColumnClass","getCellIndex","cellIndex","needFocus","$focusedElement","_editorFactoryController","focus","vWidth","styles","marginBottom","$fixedContent","useNativeScrolling","_scrollable","_getElasticScrollTop","elasticScrollTop","reachedBottom","$scrollableContent","component","content","$scrollableContainer","container","maxScrollTop","min","floor","_applyElasticScrolling","ceil","_handleScroll","_updateContentPosition","isRender","_scrollTop","_afterRowPrepared","_scrollToElement","footerView","normalizeColumnIndicesByPoints","pointsByColumns","correctIndex","_","point","draggingHeader","_generatePointsByColumns","needToCheckPrevPoint","targetDraggingPanel","getName","sourceColumn","_pointCreated","location","targetColumn","_columnHeadersView","boundingRect","x","columnsResizer","columnsController","_pointsByFixedColumns","getPointsByColumns","_getTargetPoint","currentX","deltaX","resizing","_setAriaOwns","_this$_columnHeadersV","_this$_footerView","_this$_rowsView","headerFixedTable","footerFixedTable","_footerView","_rowsView","keyboardNavigation","_toggleInertAttr","_this$_rowsView2","getFixedContentElement","removeAttr","editorFactory","getValidationMessageContainer","columnFixingModule","defaultOptions","columnFixing","enabled","texts","fix","format","unfix","leftPosition","rightPosition","stickyPosition","icons","extenders","views","controllers"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/column_fixing/m_column_fixing.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/column_fixing/m_column_fixing.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    move\r\n} from \"../../../../common/core/animation/translator\";\r\nimport eventsEngine from \"../../../../common/core/events/core/events_engine\";\r\nimport {\r\n    name as wheelEventName\r\n} from \"../../../../common/core/events/core/wheel\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport browser from \"../../../../core/utils/browser\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../../core/utils/position\";\r\nimport {\r\n    getOuterWidth\r\n} from \"../../../../core/utils/size\";\r\nimport {\r\n    setWidth\r\n} from \"../../../../core/utils/style\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport Scrollable from \"../../../../ui/scroll_view/ui.scrollable\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nimport {\r\n    normalizeWidth\r\n} from \"../views/m_columns_view\";\r\nconst CONTENT_CLASS = \"content\";\r\nconst CONTENT_FIXED_CLASS = \"content-fixed\";\r\nconst MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nconst FIRST_CELL_CLASS = \"dx-first-cell\";\r\nconst LAST_CELL_CLASS = \"dx-last-cell\";\r\nconst HOVER_STATE_CLASS = \"dx-state-hover\";\r\nconst FIXED_COL_CLASS = \"dx-col-fixed\";\r\nconst FIXED_COLUMNS_CLASS = \"dx-fixed-columns\";\r\nconst POINTER_EVENTS_NONE_CLASS = \"dx-pointer-events-none\";\r\nconst COMMAND_TRANSPARENT = \"transparent\";\r\nconst GROUP_ROW_CLASS = \"dx-group-row\";\r\nconst DETAIL_ROW_CLASS = \"dx-master-detail-row\";\r\nconst FIXED_COLUMN_ICON_CLASS = \"fix-column\";\r\nconst FIXED_COLUMN_LEFT_ICON_CLASS = \"fix-column-left\";\r\nconst FIXED_COLUMN_RIGHT_ICON_CLASS = \"fix-column-right\";\r\nconst STICKY_COLUMN_ICON_CLASS = \"stick-column\";\r\nconst UNFIXED_COLUMN_ICON_CLASS = \"unfix-column\";\r\nconst getTransparentColumnIndex = function(fixedColumns) {\r\n    let transparentColumnIndex = -1;\r\n    each(fixedColumns, ((index, column) => {\r\n        if (\"transparent\" === column.command) {\r\n            transparentColumnIndex = index;\r\n            return false\r\n        }\r\n        return\r\n    }));\r\n    return transparentColumnIndex\r\n};\r\nconst normalizeColumnWidths = function(fixedColumns, widths, fixedWidths) {\r\n    let fixedColumnIndex = 0;\r\n    if (fixedColumns && widths && fixedWidths) {\r\n        for (let i = 0; i < fixedColumns.length; i++) {\r\n            if (\"transparent\" === fixedColumns[i].command) {\r\n                fixedColumnIndex += fixedColumns[i].colspan\r\n            } else {\r\n                if (widths[fixedColumnIndex] < fixedWidths[i]) {\r\n                    widths[fixedColumnIndex] = fixedWidths[i]\r\n                }\r\n                fixedColumnIndex++\r\n            }\r\n        }\r\n    }\r\n    return widths\r\n};\r\nconst baseFixedColumns = Base => class extends Base {\r\n    init() {\r\n        super.init();\r\n        this._isFixedTableRendering = false;\r\n        this._isFixedColumns = false\r\n    }\r\n    _createCol(column) {\r\n        return super._createCol(column).toggleClass(\"dx-col-fixed\", !!(this._isFixedTableRendering && (column.fixed || column.command && \"transparent\" !== column.command)))\r\n    }\r\n    isIndicesArray(arr) {\r\n        return Array.isArray(arr) && arr.length > 0\r\n    }\r\n    _correctColumnIndicesForFixedColumns(fixedColumns, change) {\r\n        var _change$items;\r\n        const columnIndicesArray = null === change || void 0 === change ? void 0 : change.columnIndices;\r\n        if (!this.isIndicesArray(columnIndicesArray)) {\r\n            return\r\n        }\r\n        const transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n        const transparentColspan = fixedColumns[transparentColumnIndex].colspan;\r\n        const transparentOffset = transparentColumnIndex + transparentColspan;\r\n        const rowTypes = null === change || void 0 === change || null === (_change$items = change.items) || void 0 === _change$items ? void 0 : _change$items.map((_ref => {\r\n            let {\r\n                rowType: rowType\r\n            } = _ref;\r\n            return rowType\r\n        }));\r\n        change.columnIndices = columnIndicesArray.map(((columnIndices, idx) => {\r\n            if (!this.isIndicesArray(columnIndices)) {\r\n                return columnIndices\r\n            }\r\n            const isGroupRow = rowTypes && \"group\" === rowTypes[idx];\r\n            if (isGroupRow) {\r\n                return [...columnIndices]\r\n            }\r\n            return columnIndices.reduce(((result, colIdx) => {\r\n                switch (true) {\r\n                    case colIdx < transparentColumnIndex:\r\n                        result.push(colIdx);\r\n                        break;\r\n                    case colIdx >= transparentOffset:\r\n                        result.push(colIdx - transparentColspan + 1)\r\n                }\r\n                return result\r\n            }), [])\r\n        }))\r\n    }\r\n    _partialUpdateFixedTable(fixedColumns, rows) {\r\n        const fixedTableElement = this._fixedTableElement;\r\n        const $rows = this._getRowElementsCore(fixedTableElement);\r\n        const $colgroup = fixedTableElement.children(\"colgroup\");\r\n        $colgroup.replaceWith(this._createColGroup(fixedColumns));\r\n        for (let i = 0; i < rows.length; i++) {\r\n            this._partialUpdateFixedRow($($rows[i]), fixedColumns, rows[i])\r\n        }\r\n    }\r\n    _partialUpdateFixedRow($row, fixedColumns, row) {\r\n        const cellElements = $row.get(0).childNodes;\r\n        const transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n        const transparentColumn = fixedColumns[transparentColumnIndex];\r\n        const columnIndexOffset = this._columnsController.getColumnIndexOffset();\r\n        let groupCellOptions;\r\n        let colIndex = columnIndexOffset + 1;\r\n        let {\r\n            colspan: colspan\r\n        } = transparentColumn;\r\n        if ($row.hasClass(DETAIL_ROW_CLASS)) {\r\n            var _this$_columnsControl;\r\n            cellElements[0].setAttribute(\"colspan\", null === (_this$_columnsControl = this._columnsController.getVisibleColumns()) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.length);\r\n            return\r\n        }\r\n        if ($row.hasClass(\"dx-group-row\")) {\r\n            groupCellOptions = this._getGroupCellOptions({\r\n                row: row,\r\n                columns: this._columnsController.getVisibleColumns()\r\n            });\r\n            const hasSummary = row.summaryCells.length > 0;\r\n            if (hasSummary) {\r\n                const alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellOptions.colspan, {\r\n                    columns: this._columnsController.getVisibleColumns(),\r\n                    row: row,\r\n                    isFixed: true\r\n                });\r\n                colspan = groupCellOptions.colspan - alignByColumnCellCount\r\n            } else {\r\n                colspan = groupCellOptions.colspan - Math.max(0, cellElements.length - (groupCellOptions.columnIndex + 2))\r\n            }\r\n        }\r\n        for (let j = 0; j < cellElements.length; j++) {\r\n            const needUpdateColspan = groupCellOptions ? j === groupCellOptions.columnIndex + 1 : j === transparentColumnIndex;\r\n            cellElements[j].setAttribute(\"aria-colindex\", colIndex);\r\n            if (needUpdateColspan) {\r\n                cellElements[j].setAttribute(\"colspan\", colspan);\r\n                colIndex += colspan\r\n            } else {\r\n                colIndex++\r\n            }\r\n        }\r\n    }\r\n    _renderTable(options) {\r\n        let $fixedTable;\r\n        const fixedColumns = this.getFixedColumns();\r\n        this._isFixedColumns = this.isFixedColumns();\r\n        const $table = super._renderTable(options);\r\n        if (this._isFixedColumns) {\r\n            var _change$items2;\r\n            const change = null === options || void 0 === options ? void 0 : options.change;\r\n            const $fixedDataRows = this._getRowElements(this._fixedTableElement);\r\n            const needPartialUpdate = (null === change || void 0 === change ? void 0 : change.virtualColumnsScrolling) && $fixedDataRows.length === (null === change || void 0 === change || null === (_change$items2 = change.items) || void 0 === _change$items2 ? void 0 : _change$items2.length);\r\n            this._isFixedTableRendering = true;\r\n            if (needPartialUpdate && true !== this.option(\"scrolling.legacyMode\")) {\r\n                var _options$change;\r\n                this._partialUpdateFixedTable(fixedColumns, null === options || void 0 === options || null === (_options$change = options.change) || void 0 === _options$change ? void 0 : _options$change.items);\r\n                this._isFixedTableRendering = false\r\n            } else {\r\n                const columnIndices = null === change || void 0 === change ? void 0 : change.columnIndices;\r\n                this._correctColumnIndicesForFixedColumns(fixedColumns, change);\r\n                $fixedTable = this._createTable(fixedColumns);\r\n                this._renderRows($fixedTable, extend({}, options, {\r\n                    columns: fixedColumns\r\n                }));\r\n                this._updateContent($fixedTable, change, true);\r\n                if (columnIndices) {\r\n                    change.columnIndices = columnIndices\r\n                }\r\n                this._isFixedTableRendering = false\r\n            }\r\n        } else {\r\n            this._fixedTableElement && this._fixedTableElement.parent().remove();\r\n            this._fixedTableElement = null\r\n        }\r\n        return $table\r\n    }\r\n    _renderRow($table, options) {\r\n        let fixedCorrection;\r\n        let {\r\n            cells: cells\r\n        } = options.row;\r\n        super._renderRow.apply(this, arguments);\r\n        if (this._isFixedTableRendering && cells && cells.length) {\r\n            fixedCorrection = 0;\r\n            const fixedCells = options.row.cells || [];\r\n            cells = cells.slice();\r\n            options.row.cells = cells;\r\n            for (let i = 0; i < fixedCells.length; i++) {\r\n                if (fixedCells[i].column && \"transparent\" === fixedCells[i].column.command) {\r\n                    fixedCorrection = (fixedCells[i].column.colspan || 1) - 1;\r\n                    continue\r\n                }\r\n                cells[i + fixedCorrection] = fixedCells[i]\r\n            }\r\n        }\r\n    }\r\n    _createCell(options) {\r\n        const that = this;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const columnCommand = column && column.command;\r\n        const {\r\n            rowType: rowType\r\n        } = options;\r\n        const $cell = super._createCell.apply(that, arguments);\r\n        let fixedColumns;\r\n        let prevFixedColumn;\r\n        let transparentColumnIndex;\r\n        if (that._isFixedTableRendering || \"filter\" === rowType) {\r\n            fixedColumns = that.getFixedColumns();\r\n            transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n            prevFixedColumn = fixedColumns[transparentColumnIndex - 1]\r\n        }\r\n        if (that._isFixedTableRendering) {\r\n            if (\"transparent\" === columnCommand) {\r\n                $cell.addClass(\"dx-pointer-events-none\").toggleClass(\"dx-first-cell\", 0 === transparentColumnIndex || prevFixedColumn && \"expand\" === prevFixedColumn.command).toggleClass(\"dx-last-cell\", fixedColumns.length && transparentColumnIndex === fixedColumns.length - 1);\r\n                if (\"freeSpace\" !== rowType) {\r\n                    gridCoreUtils.setEmptyText($cell)\r\n                }\r\n            }\r\n        } else if (\"filter\" === rowType) {\r\n            $cell.toggleClass(\"dx-first-cell\", options.columnIndex === transparentColumnIndex)\r\n        }\r\n        const isRowAltStyle = that.option(\"rowAlternationEnabled\") && options.isAltRow;\r\n        const isSelectAllCell = \"multiple\" === that.option(\"selection.mode\") && 0 === options.columnIndex && \"header\" === options.rowType;\r\n        if (browser.mozilla && options.column.fixed && \"group\" !== options.rowType && !isRowAltStyle && !isSelectAllCell) {\r\n            $cell.addClass(\"dx-col-fixed\")\r\n        }\r\n        return $cell\r\n    }\r\n    _wrapTableInScrollContainer($table, isFixedTableRendering) {\r\n        const $scrollContainer = super._wrapTableInScrollContainer.apply(this, arguments);\r\n        if (this._isFixedTableRendering || isFixedTableRendering) {\r\n            $scrollContainer.addClass(this.addWidgetPrefix(\"content-fixed\"))\r\n        }\r\n        return $scrollContainer\r\n    }\r\n    _renderCellContent($cell, options) {\r\n        let isEmptyCell;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        const isFixedTableRendering = this._isFixedTableRendering;\r\n        const isGroupCell = \"group\" === options.rowType && isDefined(column.groupIndex);\r\n        if (isFixedTableRendering && isGroupCell && !column.command && !column.groupCellTemplate) {\r\n            $cell.css(\"pointerEvents\", \"none\")\r\n        }\r\n        if (!isFixedTableRendering && this._isFixedColumns) {\r\n            isEmptyCell = column.fixed || column.command && false !== column.fixed;\r\n            if (isGroupCell) {\r\n                isEmptyCell = false;\r\n                if (options.row.summaryCells && options.row.summaryCells.length) {\r\n                    var _this$_getAlignByColu;\r\n                    const columns = this._columnsController.getVisibleColumns();\r\n                    const alignByFixedColumnCellCount = (null === (_this$_getAlignByColu = this._getAlignByColumnCellCount) || void 0 === _this$_getAlignByColu ? void 0 : _this$_getAlignByColu.call(this, column.colspan, {\r\n                        columns: columns,\r\n                        row: options.row,\r\n                        isFixed: true\r\n                    })) ?? 0;\r\n                    if (alignByFixedColumnCellCount > 0) {\r\n                        const transparentColumnIndex = getTransparentColumnIndex(this._columnsController.getFixedColumns());\r\n                        isEmptyCell = columns.length - alignByFixedColumnCellCount < transparentColumnIndex\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyCell) {\r\n                if (column.command && \"buttons\" !== column.type || \"group\" === options.rowType) {\r\n                    $cell.html(\"&nbsp;\").addClass(column.cssClass);\r\n                    return\r\n                }\r\n                $cell.addClass(\"dx-hidden-cell\")\r\n            }\r\n        }\r\n        if (\"transparent\" !== column.command) {\r\n            super._renderCellContent.apply(this, arguments)\r\n        }\r\n    }\r\n    getContent(isFixedTableRendering) {\r\n        var _this$_fixedTableElem;\r\n        return isFixedTableRendering ? null === (_this$_fixedTableElem = this._fixedTableElement) || void 0 === _this$_fixedTableElem ? void 0 : _this$_fixedTableElem.parent() : super.getContent.apply(this, arguments)\r\n    }\r\n    _getCellElementsCore(rowIndex) {\r\n        const cellElements = super._getCellElementsCore.apply(this, arguments);\r\n        const isGroupRow = null === cellElements || void 0 === cellElements ? void 0 : cellElements.parent().hasClass(\"dx-group-row\");\r\n        const headerRowIndex = \"columnHeadersView\" === this.name ? rowIndex : void 0;\r\n        if (this._fixedTableElement && cellElements) {\r\n            const fixedColumns = this.getFixedColumns(headerRowIndex);\r\n            const fixedCellElements = this._getRowElements(this._fixedTableElement).eq(rowIndex).children(\"td\");\r\n            each(fixedCellElements, ((columnIndex, cell) => {\r\n                if (isGroupRow) {\r\n                    if (cellElements[columnIndex] && \"hidden\" !== cell.style.visibility) {\r\n                        cellElements[columnIndex] = cell\r\n                    }\r\n                } else {\r\n                    const fixedColumn = fixedColumns[columnIndex];\r\n                    if (fixedColumn) {\r\n                        if (\"transparent\" === fixedColumn.command) {\r\n                            if (fixedCellElements.eq(columnIndex).hasClass(\"dx-master-detail-cell\")) {\r\n                                cellElements[columnIndex] = cell || cellElements[columnIndex]\r\n                            }\r\n                        } else {\r\n                            const fixedColumnIndex = this._columnsController.getVisibleIndexByColumn(fixedColumn, headerRowIndex);\r\n                            cellElements[fixedColumnIndex] = cell || cellElements[fixedColumnIndex]\r\n                        }\r\n                    }\r\n                }\r\n            }))\r\n        }\r\n        return cellElements\r\n    }\r\n    getColumnWidths(fixedTableElement, rowIndex) {\r\n        const result = super.getColumnWidths(fixedTableElement, rowIndex);\r\n        const fixedColumns = this.getFixedColumns();\r\n        const fixedWidths = this._fixedTableElement && result.length ? super.getColumnWidths(this._fixedTableElement) : void 0;\r\n        return normalizeColumnWidths(fixedColumns, result, fixedWidths)\r\n    }\r\n    getTableElement(isFixedTableRendering) {\r\n        isFixedTableRendering = this._isFixedTableRendering || isFixedTableRendering;\r\n        const tableElement = isFixedTableRendering ? this._fixedTableElement : super.getTableElement();\r\n        return tableElement\r\n    }\r\n    setTableElement(tableElement, isFixedTableRendering) {\r\n        if (this._isFixedTableRendering || isFixedTableRendering) {\r\n            this._fixedTableElement = tableElement.addClass(\"dx-pointer-events-none\")\r\n        } else {\r\n            super.setTableElement(tableElement)\r\n        }\r\n    }\r\n    getColumns(rowIndex) {\r\n        const $tableElement = this.getTableElement();\r\n        if (this._isFixedTableRendering) {\r\n            return this.getFixedColumns(rowIndex)\r\n        }\r\n        return super.getColumns(rowIndex, $tableElement)\r\n    }\r\n    getRowIndex($row) {\r\n        const $fixedTable = this._fixedTableElement;\r\n        if ($fixedTable && $fixedTable.find($row).length) {\r\n            return this._getRowElements($fixedTable).index($row)\r\n        }\r\n        return super.getRowIndex($row)\r\n    }\r\n    getTableElements() {\r\n        let result = super.getTableElements.apply(this, arguments);\r\n        if (this._fixedTableElement) {\r\n            result = $([result.get(0), this._fixedTableElement.get(0)])\r\n        }\r\n        return result\r\n    }\r\n    getFixedColumns(rowIndex) {\r\n        return this._columnsController.getFixedColumns(rowIndex)\r\n    }\r\n    getFixedColumnsOffset() {\r\n        let offset = {\r\n            left: 0,\r\n            right: 0\r\n        };\r\n        let $transparentColumn;\r\n        if (this._fixedTableElement) {\r\n            $transparentColumn = this.getTransparentColumnElement();\r\n            const positionTransparentColumn = $transparentColumn.position();\r\n            offset = {\r\n                left: positionTransparentColumn.left,\r\n                right: getOuterWidth(this.element(), true) - (getOuterWidth($transparentColumn, true) + positionTransparentColumn.left)\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n    getTransparentColumnElement() {\r\n        return this._fixedTableElement && this._fixedTableElement.find(\".dx-pointer-events-none\").first()\r\n    }\r\n    getFixedTableElement() {\r\n        return this._fixedTableElement\r\n    }\r\n    _resizeCore() {\r\n        super._resizeCore();\r\n        this.synchronizeRows()\r\n    }\r\n    setColumnWidths(options) {\r\n        var _options$optionNames;\r\n        const {\r\n            widths: widths\r\n        } = options;\r\n        const visibleColumns = this._columnsController.getVisibleColumns();\r\n        const isColumnWidthsSynced = (null === widths || void 0 === widths ? void 0 : widths.length) && visibleColumns.some((column => isDefined(column.visibleWidth)));\r\n        const isColumnWidthChanged = null === (_options$optionNames = options.optionNames) || void 0 === _options$optionNames ? void 0 : _options$optionNames.width;\r\n        super.setColumnWidths(options);\r\n        if (this._fixedTableElement) {\r\n            const hasAutoWidth = null === widths || void 0 === widths ? void 0 : widths.some((width => \"auto\" === width || !isDefined(width)));\r\n            const needVisibleColumns = hasAutoWidth && (!isColumnWidthsSynced || !this.isScrollbarVisible(true));\r\n            const columns = needVisibleColumns ? visibleColumns : this.getFixedColumns();\r\n            this.setFixedTableColumnWidths(columns, widths)\r\n        }\r\n        const wordWrapEnabled = this.option(\"wordWrapEnabled\");\r\n        const needSynchronizeRows = isColumnWidthsSynced || isColumnWidthChanged && wordWrapEnabled;\r\n        if (needSynchronizeRows) {\r\n            this.synchronizeRows()\r\n        }\r\n    }\r\n    setFixedTableColumnWidths(columns, widths) {\r\n        if (!this._fixedTableElement || !widths) {\r\n            return\r\n        }\r\n        const $cols = this._fixedTableElement.children(\"colgroup\").children(\"col\");\r\n        $cols.toArray().forEach((col => col.removeAttribute(\"style\")));\r\n        let columnIndex = 0;\r\n        columns.forEach((column => {\r\n            if (column.colspan) {\r\n                columnIndex += column.colspan;\r\n                return\r\n            }\r\n            const colWidth = normalizeWidth(widths[columnIndex]);\r\n            if (isDefined(colWidth)) {\r\n                setWidth($cols.eq(columnIndex), colWidth)\r\n            }\r\n            columnIndex += 1\r\n        }))\r\n    }\r\n    _getClientHeight(element) {\r\n        const boundingClientRectElement = element.getBoundingClientRect && getBoundingRect(element);\r\n        return boundingClientRectElement && boundingClientRectElement.height ? boundingClientRectElement.height : element.clientHeight\r\n    }\r\n    synchronizeRows() {\r\n        const rowHeights = [];\r\n        const fixedRowHeights = [];\r\n        let rowIndex;\r\n        let $rowElements;\r\n        let $fixedRowElements;\r\n        let $contentElement;\r\n        this.waitAsyncTemplates(true).done((() => {\r\n            if (this._isFixedColumns && this._tableElement && this._fixedTableElement) {\r\n                const heightTable = this._getClientHeight(this._tableElement.get(0));\r\n                const heightFixedTable = this._getClientHeight(this._fixedTableElement.get(0));\r\n                $rowElements = this._getRowElements(this._tableElement);\r\n                $fixedRowElements = this._getRowElements(this._fixedTableElement);\r\n                $contentElement = this._findContentElement();\r\n                if (heightTable !== heightFixedTable) {\r\n                    $contentElement && $contentElement.css(\"height\", heightTable);\r\n                    $rowElements.css(\"height\", \"\");\r\n                    $fixedRowElements.css(\"height\", \"\");\r\n                    for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {\r\n                        rowHeights.push(this._getClientHeight($rowElements.get(rowIndex)));\r\n                        fixedRowHeights.push(this._getClientHeight($fixedRowElements.get(rowIndex)))\r\n                    }\r\n                    for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {\r\n                        const rowHeight = rowHeights[rowIndex];\r\n                        const fixedRowHeight = fixedRowHeights[rowIndex];\r\n                        if (rowHeight > fixedRowHeight) {\r\n                            $fixedRowElements.eq(rowIndex).css(\"height\", rowHeight)\r\n                        } else if (rowHeight < fixedRowHeight) {\r\n                            $rowElements.eq(rowIndex).css(\"height\", fixedRowHeight)\r\n                        }\r\n                    }\r\n                    $contentElement && $contentElement.css(\"height\", \"\")\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    setScrollerSpacing(width, hWidth) {\r\n        const rtlEnabled = this.option(\"rtlEnabled\");\r\n        super.setScrollerSpacing(width);\r\n        this.element().children(`.${this.addWidgetPrefix(\"content-fixed\")}`).css({\r\n            paddingLeft: rtlEnabled ? width : \"\",\r\n            paddingRight: !rtlEnabled ? width : \"\"\r\n        })\r\n    }\r\n    isFixedColumns() {\r\n        const fixedColumns = this.getFixedColumns();\r\n        const legacyMode = this.option(\"columnFixing.legacyMode\");\r\n        return true === legacyMode && !!fixedColumns.length\r\n    }\r\n};\r\nconst columnHeadersView = Base => class extends(baseFixedColumns(Base)) {\r\n    _getRowVisibleColumns(rowIndex) {\r\n        if (this._isFixedTableRendering) {\r\n            return this.getFixedColumns(rowIndex)\r\n        }\r\n        return super._getRowVisibleColumns(rowIndex)\r\n    }\r\n    getFixedColumnElements(rowIndex) {\r\n        const that = this;\r\n        if (!this._isFixedColumns) {\r\n            return\r\n        }\r\n        if (isDefined(rowIndex)) {\r\n            return this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).children()\r\n        }\r\n        const columnElements = that.getColumnElements();\r\n        const $transparentColumnElement = that.getTransparentColumnElement();\r\n        if (columnElements && $transparentColumnElement && $transparentColumnElement.length) {\r\n            var _$transparentColumnEl;\r\n            const transparentColumnIndex = getTransparentColumnIndex(that.getFixedColumns());\r\n            [].splice.apply(columnElements, [transparentColumnIndex, null === (_$transparentColumnEl = $transparentColumnElement.get(0)) || void 0 === _$transparentColumnEl ? void 0 : _$transparentColumnEl.colSpan, $transparentColumnElement.get(0)])\r\n        }\r\n        return columnElements\r\n    }\r\n    getColumnWidths(fixedTableElement, rowIndex) {\r\n        const that = this;\r\n        let fixedWidths;\r\n        const result = super.getColumnWidths(fixedTableElement, rowIndex);\r\n        const $fixedColumnElements = that.getFixedColumnElements();\r\n        const fixedColumns = that.getFixedColumns();\r\n        if (that._fixedTableElement) {\r\n            if ($fixedColumnElements && $fixedColumnElements.length) {\r\n                fixedWidths = that._getWidths($fixedColumnElements)\r\n            } else {\r\n                fixedWidths = super.getColumnWidths(that._fixedTableElement)\r\n            }\r\n        }\r\n        return normalizeColumnWidths(fixedColumns, result, fixedWidths)\r\n    }\r\n};\r\nconst rowsView = Base => class extends(baseFixedColumns(Base)) {\r\n    dispose() {\r\n        super.dispose.apply(this, arguments);\r\n        clearTimeout(this._fixedScrollTimeout)\r\n    }\r\n    optionChanged(args) {\r\n        super.optionChanged(args);\r\n        if (\"hoverStateEnabled\" === args.name && this._isFixedColumns) {\r\n            args.value ? this._attachHoverEvents() : this._detachHoverEvents()\r\n        }\r\n    }\r\n    _detachHoverEvents() {\r\n        const element = this.element();\r\n        if (this._fixedTableElement && this._tableElement) {\r\n            eventsEngine.off(element, \"mouseover mouseout\", \".dx-data-row\")\r\n        }\r\n    }\r\n    _attachHoverEvents() {\r\n        if (this._fixedTableElement && this._tableElement) {\r\n            eventsEngine.on(this.element(), \"mouseover mouseout\", \".dx-data-row\", this.createAction((args => {\r\n                const {\r\n                    event: event\r\n                } = args;\r\n                const rowIndex = this.getRowIndex($(event.target).closest(\".dx-row\"));\r\n                const isHover = \"mouseover\" === event.type;\r\n                if (rowIndex >= 0) {\r\n                    this._tableElement && this._getRowElements(this._tableElement).eq(rowIndex).toggleClass(\"dx-state-hover\", isHover);\r\n                    this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).toggleClass(\"dx-state-hover\", isHover)\r\n                }\r\n            })))\r\n        }\r\n    }\r\n    _getScrollDelay() {\r\n        var _this$_resizingContro;\r\n        const hasResizeTimeout = null === (_this$_resizingContro = this._resizingController) || void 0 === _this$_resizingContro ? void 0 : _this$_resizingContro.hasResizeTimeout();\r\n        if (hasResizeTimeout) {\r\n            return this.option(\"scrolling.updateTimeout\")\r\n        }\r\n        return browser.mozilla ? 60 : 0\r\n    }\r\n    _findContentElement(isFixedTableRendering) {\r\n        let $content;\r\n        let scrollTop;\r\n        const contentClass = this.addWidgetPrefix(\"content\");\r\n        const element = this.element();\r\n        isFixedTableRendering = this._isFixedTableRendering || isFixedTableRendering;\r\n        if (element && isFixedTableRendering) {\r\n            $content = element.children(`.${contentClass}`);\r\n            const scrollable = this.getScrollable();\r\n            if (!$content.length && scrollable) {\r\n                $content = $(\"<div>\").addClass(contentClass);\r\n                eventsEngine.on($content, \"scroll\", (e => {\r\n                    const {\r\n                        target: target\r\n                    } = e;\r\n                    const scrollDelay = this._getScrollDelay();\r\n                    clearTimeout(this._fixedScrollTimeout);\r\n                    this._fixedScrollTimeout = setTimeout((() => {\r\n                        scrollTop = $(target).scrollTop();\r\n                        scrollable.scrollTo({\r\n                            y: scrollTop\r\n                        })\r\n                    }), scrollDelay)\r\n                }));\r\n                eventsEngine.on($content, wheelEventName, (e => {\r\n                    const $nearestScrollable = $(e.target).closest(\".dx-scrollable\");\r\n                    let shouldScroll = false;\r\n                    if (scrollable && scrollable.$element().is($nearestScrollable)) {\r\n                        shouldScroll = true\r\n                    } else {\r\n                        const nearestScrollableInstance = $nearestScrollable.length && Scrollable.getInstance($nearestScrollable.get(0));\r\n                        const nearestScrollableHasVerticalScrollbar = nearestScrollableInstance && nearestScrollableInstance.scrollHeight() - nearestScrollableInstance.clientHeight() > 0;\r\n                        shouldScroll = nearestScrollableInstance && !nearestScrollableHasVerticalScrollbar\r\n                    }\r\n                    if (shouldScroll) {\r\n                        scrollTop = scrollable.scrollTop();\r\n                        scrollable.scrollTo({\r\n                            y: scrollTop - e.delta\r\n                        });\r\n                        const scrollableTop = scrollable.scrollTop() + scrollable.clientHeight();\r\n                        const scrollableHeight = scrollable.scrollHeight() + this.getScrollbarWidth();\r\n                        const isPreventDefault = scrollable.scrollTop() > 0 && scrollableTop < scrollableHeight;\r\n                        if (isPreventDefault) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return\r\n                }));\r\n                $content.appendTo(element)\r\n            }\r\n            return $content\r\n        }\r\n        return super._findContentElement()\r\n    }\r\n    _updateScrollable() {\r\n        super._updateScrollable();\r\n        const scrollable = this.getScrollable();\r\n        if (null !== scrollable && void 0 !== scrollable && scrollable._disposed) {\r\n            return\r\n        }\r\n        const scrollTop = scrollable && scrollable.scrollOffset().top;\r\n        this._updateFixedTablePosition(scrollTop)\r\n    }\r\n    _renderContent(contentElement, tableElement, isFixedTableRendering) {\r\n        if (this._isFixedTableRendering || isFixedTableRendering) {\r\n            return contentElement.empty().addClass(`${this.addWidgetPrefix(\"content\")} ${this.addWidgetPrefix(\"content-fixed\")}`).append(tableElement)\r\n        }\r\n        return super._renderContent(contentElement, tableElement)\r\n    }\r\n    _getGroupCellOptions(options) {\r\n        if (this._isFixedTableRendering) {\r\n            return super._getGroupCellOptions(extend({}, options, {\r\n                columns: this._columnsController.getVisibleColumns()\r\n            }))\r\n        }\r\n        return super._getGroupCellOptions(options)\r\n    }\r\n    _renderGroupedCells($row, options) {\r\n        return super._renderGroupedCells($row, extend({}, options, {\r\n            columns: this._columnsController.getVisibleColumns()\r\n        }))\r\n    }\r\n    _renderGroupSummaryCells($row, options) {\r\n        if (this._isFixedTableRendering) {\r\n            super._renderGroupSummaryCells($row, extend({}, options, {\r\n                columns: this._columnsController.getVisibleColumns()\r\n            }))\r\n        } else {\r\n            super._renderGroupSummaryCells($row, options)\r\n        }\r\n    }\r\n    _hasAlignByColumnSummaryItems(columnIndex, options) {\r\n        const result = super._hasAlignByColumnSummaryItems.apply(this, arguments);\r\n        const column = options.columns[columnIndex];\r\n        if (options.isFixed) {\r\n            return column.fixed && (result || \"right\" === column.fixedPosition)\r\n        }\r\n        return result && (!this._isFixedColumns || !column.fixed)\r\n    }\r\n    _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\r\n        let alignByFixedColumnCellCount;\r\n        if (this._isFixedTableRendering) {\r\n            options.isFixed = true;\r\n            alignByFixedColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\r\n            options.isFixed = false;\r\n            const startColumnIndex = options.columns.length - alignByFixedColumnCellCount;\r\n            options = extend({}, options, {\r\n                columns: this.getFixedColumns()\r\n            });\r\n            const transparentColumnIndex = getTransparentColumnIndex(options.columns);\r\n            if (startColumnIndex < transparentColumnIndex) {\r\n                alignByFixedColumnCellCount -= options.columns[transparentColumnIndex].colspan - 1 || 0;\r\n                groupCellColSpan -= options.columns[transparentColumnIndex].colspan - 1 || 0\r\n            } else if (alignByColumnCellCount > 0) {\r\n                $groupCell.css(\"visibility\", \"hidden\")\r\n            }\r\n            alignByColumnCellCount = alignByFixedColumnCellCount\r\n        }\r\n        super._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount)\r\n    }\r\n    _getSummaryCellIndex(columnIndex, columns) {\r\n        if (this._isFixedTableRendering) {\r\n            const transparentColumnIndex = getTransparentColumnIndex(columns);\r\n            if (columnIndex > transparentColumnIndex) {\r\n                columnIndex += columns[transparentColumnIndex].colspan - 1\r\n            }\r\n            return columnIndex\r\n        }\r\n        return super._getSummaryCellIndex.apply(this, arguments)\r\n    }\r\n    _renderCore(change) {\r\n        this._detachHoverEvents();\r\n        const deferred = super._renderCore(change);\r\n        const isFixedColumns = this._isFixedColumns;\r\n        this.element().toggleClass(\"dx-fixed-columns\", isFixedColumns);\r\n        if (this.option(\"hoverStateEnabled\") && isFixedColumns) {\r\n            this._attachHoverEvents()\r\n        }\r\n        return deferred\r\n    }\r\n    setAriaOwns(headerTableId, footerTableId, isFixed) {\r\n        if (isFixed) {\r\n            var _this$element;\r\n            const contentFixedClass = this.addWidgetPrefix(\"content-fixed\");\r\n            const $contentFixedElement = null === (_this$element = this.element()) || void 0 === _this$element ? void 0 : _this$element.children(`.${contentFixedClass}`);\r\n            const $fixedTableElement = this.getFixedTableElement();\r\n            if ($contentFixedElement.length && null !== $fixedTableElement && void 0 !== $fixedTableElement && $fixedTableElement.length) {\r\n                this.setAria(\"owns\", `${headerTableId??\"\"} ${$fixedTableElement.attr(\"id\")??\"\"} ${footerTableId??\"\"}`.trim(), $contentFixedElement)\r\n            }\r\n        } else {\r\n            super.setAriaOwns.apply(this, arguments)\r\n        }\r\n    }\r\n    toggleDraggableColumnClass(columnIndex, value) {\r\n        super.toggleDraggableColumnClass(columnIndex, value);\r\n        if (this.isFixedColumns()) {\r\n            const $rows = this._getRowElements(this._fixedTableElement);\r\n            this._toggleDraggableSourceColumnClass($rows, this.getFixedColumns(), columnIndex, value)\r\n        }\r\n    }\r\n    getCellIndex($cell) {\r\n        const $fixedTable = this._fixedTableElement;\r\n        let cellIndex = 0;\r\n        if ($fixedTable && $cell.is(\"td\") && $cell.closest($fixedTable).length) {\r\n            const columns = this.getFixedColumns();\r\n            each(columns, ((index, column) => {\r\n                if (index === $cell[0].cellIndex) {\r\n                    return false\r\n                }\r\n                if (column.colspan) {\r\n                    cellIndex += column.colspan;\r\n                    return\r\n                }\r\n                cellIndex++;\r\n                return\r\n            }));\r\n            return cellIndex\r\n        }\r\n        return super.getCellIndex.apply(this, arguments)\r\n    }\r\n    _updateFixedTablePosition(scrollTop, needFocus) {\r\n        if (this._fixedTableElement && this._tableElement) {\r\n            let $focusedElement;\r\n            this._fixedTableElement.parent().scrollTop(scrollTop);\r\n            if (needFocus && this._editorFactoryController) {\r\n                $focusedElement = this._editorFactoryController.focus();\r\n                $focusedElement && this._editorFactoryController.focus($focusedElement)\r\n            }\r\n        }\r\n    }\r\n    setScrollerSpacing(vWidth, hWidth) {\r\n        const that = this;\r\n        const styles = {\r\n            marginBottom: 0\r\n        };\r\n        const $fixedContent = that.element().children(`.${this.addWidgetPrefix(\"content-fixed\")}`);\r\n        if ($fixedContent.length && that._fixedTableElement) {\r\n            $fixedContent.css(styles);\r\n            that._fixedTableElement.css(styles);\r\n            styles[that.option(\"rtlEnabled\") ? \"marginLeft\" : \"marginRight\"] = vWidth;\r\n            styles.marginBottom = hWidth;\r\n            const useNativeScrolling = that._scrollable && that._scrollable.option(\"useNative\");\r\n            (useNativeScrolling ? $fixedContent : that._fixedTableElement).css(styles)\r\n        }\r\n    }\r\n    _getElasticScrollTop(e) {\r\n        let elasticScrollTop = 0;\r\n        if (e.scrollOffset.top < 0) {\r\n            elasticScrollTop = -e.scrollOffset.top\r\n        } else if (e.reachedBottom) {\r\n            const $scrollableContent = $(e.component.content());\r\n            const $scrollableContainer = $(e.component.container());\r\n            const maxScrollTop = Math.max($scrollableContent.get(0).clientHeight - $scrollableContainer.get(0).clientHeight, 0);\r\n            elasticScrollTop = Math.min(maxScrollTop - e.scrollOffset.top, 0)\r\n        }\r\n        return Math.floor(elasticScrollTop)\r\n    }\r\n    _applyElasticScrolling(e) {\r\n        if (this._fixedTableElement) {\r\n            const elasticScrollTop = this._getElasticScrollTop(e);\r\n            if (0 !== Math.ceil(elasticScrollTop)) {\r\n                move(this._fixedTableElement, {\r\n                    top: elasticScrollTop\r\n                })\r\n            } else {\r\n                this._fixedTableElement.css(\"transform\", \"\")\r\n            }\r\n        }\r\n    }\r\n    _handleScroll(e) {\r\n        this._updateFixedTablePosition(e.scrollOffset.top, true);\r\n        this._applyElasticScrolling(e);\r\n        super._handleScroll(e)\r\n    }\r\n    _updateContentPosition(isRender) {\r\n        super._updateContentPosition.apply(this, arguments);\r\n        if (!isRender) {\r\n            this._updateFixedTablePosition(this._scrollTop)\r\n        }\r\n    }\r\n    _afterRowPrepared(e) {\r\n        if (this._isFixedTableRendering) {\r\n            return\r\n        }\r\n        super._afterRowPrepared(e)\r\n    }\r\n    _scrollToElement($element, offset) {\r\n        const scrollOffset = this.isFixedColumns() ? this.getFixedColumnsOffset() : offset;\r\n        super._scrollToElement($element, scrollOffset)\r\n    }\r\n};\r\nconst footerView = Base => class extends(baseFixedColumns(Base)) {};\r\nconst normalizeColumnIndicesByPoints = function(columns, fixedColumns, pointsByColumns) {\r\n    const transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n    const correctIndex = columns.length - fixedColumns.length;\r\n    each(pointsByColumns, ((_, point) => {\r\n        if (point.index > transparentColumnIndex) {\r\n            point.columnIndex += correctIndex;\r\n            point.index += correctIndex\r\n        }\r\n    }));\r\n    return pointsByColumns\r\n};\r\nconst draggingHeader = Base => class extends Base {\r\n    _generatePointsByColumns(options, needToCheckPrevPoint) {\r\n        const visibleColumns = options.columns;\r\n        const {\r\n            targetDraggingPanel: targetDraggingPanel\r\n        } = options;\r\n        if (targetDraggingPanel && \"headers\" === targetDraggingPanel.getName() && targetDraggingPanel.isFixedColumns()) {\r\n            if (options.sourceColumn.fixed) {\r\n                if (!options.rowIndex) {\r\n                    options.columnElements = targetDraggingPanel.getFixedColumnElements(0)\r\n                }\r\n                options.columns = targetDraggingPanel.getFixedColumns(options.rowIndex);\r\n                const pointsByColumns = super._generatePointsByColumns(options, needToCheckPrevPoint);\r\n                normalizeColumnIndicesByPoints(visibleColumns, options.columns, pointsByColumns);\r\n                return pointsByColumns\r\n            }\r\n        }\r\n        return super._generatePointsByColumns(options, needToCheckPrevPoint)\r\n    }\r\n    _pointCreated(point, columns, location, sourceColumn) {\r\n        const result = super._pointCreated.apply(this, arguments);\r\n        const targetColumn = columns[point.columnIndex];\r\n        const $transparentColumn = this._columnHeadersView.getTransparentColumnElement();\r\n        if (!result && \"headers\" === location && $transparentColumn && $transparentColumn.length) {\r\n            const boundingRect = getBoundingRect($transparentColumn.get(0));\r\n            if (sourceColumn && sourceColumn.fixed) {\r\n                return \"right\" === sourceColumn.fixedPosition ? point.x < boundingRect.right : point.x > boundingRect.left\r\n            }\r\n            if (targetColumn && targetColumn.fixed && \"right\" !== targetColumn.fixedPosition) {\r\n                return true\r\n            }\r\n            return point.x < boundingRect.left || point.x > boundingRect.right\r\n        }\r\n        return result\r\n    }\r\n};\r\nconst columnsResizer = Base => class extends Base {\r\n    _generatePointsByColumns(needToCheckPrevPoint) {\r\n        const that = this;\r\n        const columnsController = that._columnsController;\r\n        const columns = columnsController && that._columnsController.getVisibleColumns();\r\n        const fixedColumns = columnsController && that._columnsController.getFixedColumns();\r\n        const transparentColumnIndex = getTransparentColumnIndex(fixedColumns);\r\n        const correctIndex = columns.length - fixedColumns.length;\r\n        const cells = that._columnHeadersView.getFixedColumnElements();\r\n        super._generatePointsByColumns(needToCheckPrevPoint);\r\n        if (cells && cells.length > 0) {\r\n            that._pointsByFixedColumns = gridCoreUtils.getPointsByColumns(cells, (point => {\r\n                if (point.index > transparentColumnIndex) {\r\n                    point.columnIndex += correctIndex;\r\n                    point.index += correctIndex\r\n                }\r\n                return that._pointCreated(point, columns.length, columns)\r\n            }))\r\n        }\r\n    }\r\n    _getTargetPoint(pointsByColumns, currentX, deltaX) {\r\n        const $transparentColumn = this._columnHeadersView.getTransparentColumnElement();\r\n        if ($transparentColumn && $transparentColumn.length) {\r\n            const boundingRect = getBoundingRect($transparentColumn.get(0));\r\n            if (currentX <= boundingRect.left || currentX >= boundingRect.right) {\r\n                return super._getTargetPoint(this._pointsByFixedColumns, currentX, deltaX)\r\n            }\r\n        }\r\n        return super._getTargetPoint(pointsByColumns, currentX, deltaX)\r\n    }\r\n};\r\nconst resizing = Base => class extends Base {\r\n    _setAriaOwns() {\r\n        var _this$_columnHeadersV, _this$_footerView, _this$_rowsView;\r\n        super._setAriaOwns.apply(this, arguments);\r\n        const headerFixedTable = null === (_this$_columnHeadersV = this._columnHeadersView) || void 0 === _this$_columnHeadersV ? void 0 : _this$_columnHeadersV.getFixedTableElement();\r\n        const footerFixedTable = null === (_this$_footerView = this._footerView) || void 0 === _this$_footerView ? void 0 : _this$_footerView.getFixedTableElement();\r\n        null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView || _this$_rowsView.setAriaOwns(null === headerFixedTable || void 0 === headerFixedTable ? void 0 : headerFixedTable.attr(\"id\"), null === footerFixedTable || void 0 === footerFixedTable ? void 0 : footerFixedTable.attr(\"id\"), true)\r\n    }\r\n};\r\nconst keyboardNavigation = Base => class extends Base {\r\n    _toggleInertAttr(value) {\r\n        var _this$_rowsView2;\r\n        const $fixedContent = null === (_this$_rowsView2 = this._rowsView) || void 0 === _this$_rowsView2 ? void 0 : _this$_rowsView2.getFixedContentElement();\r\n        if (value) {\r\n            null === $fixedContent || void 0 === $fixedContent || $fixedContent.attr(\"inert\", true)\r\n        } else {\r\n            null === $fixedContent || void 0 === $fixedContent || $fixedContent.removeAttr(\"inert\")\r\n        }\r\n    }\r\n};\r\nconst editorFactory = Base => class extends Base {\r\n    getValidationMessageContainer($cell) {\r\n        const isFixedColumns = this._rowsView.isFixedColumns();\r\n        if (isFixedColumns) {\r\n            return this._rowsView.element()\r\n        }\r\n        return super.getValidationMessageContainer($cell)\r\n    }\r\n};\r\nexport const columnFixingModule = {\r\n    defaultOptions: () => ({\r\n        columnFixing: {\r\n            enabled: false,\r\n            legacyMode: false,\r\n            texts: {\r\n                fix: messageLocalization.format(\"dxDataGrid-columnFixingFix\"),\r\n                unfix: messageLocalization.format(\"dxDataGrid-columnFixingUnfix\"),\r\n                leftPosition: messageLocalization.format(\"dxDataGrid-columnFixingLeftPosition\"),\r\n                rightPosition: messageLocalization.format(\"dxDataGrid-columnFixingRightPosition\"),\r\n                stickyPosition: messageLocalization.format(\"dxDataGrid-columnFixingStickyPosition\")\r\n            },\r\n            icons: {\r\n                fix: \"fix-column\",\r\n                unfix: \"unfix-column\",\r\n                leftPosition: \"fix-column-left\",\r\n                rightPosition: \"fix-column-right\",\r\n                stickyPosition: \"stick-column\"\r\n            }\r\n        }\r\n    }),\r\n    extenders: {\r\n        views: {\r\n            columnHeadersView: columnHeadersView,\r\n            rowsView: rowsView,\r\n            footerView: footerView\r\n        },\r\n        controllers: {\r\n            draggingHeader: draggingHeader,\r\n            columnsResizer: columnsResizer,\r\n            resizing: resizing,\r\n            keyboardNavigation: keyboardNavigation,\r\n            editorFactory: editorFactory\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}