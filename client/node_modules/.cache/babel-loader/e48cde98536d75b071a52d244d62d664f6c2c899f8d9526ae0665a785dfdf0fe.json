{"ast":null,"code":"/**\r\n * DevExtreme (esm/__internal/grids/grid_core/header_filter/m_header_filter_core.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport \"../../../ui/list/modules/m_search\";\nimport \"../../../ui/list/modules/m_selection\";\nimport messageLocalization from \"../../../../common/core/localization/message\";\nimport $ from \"../../../../core/renderer\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport { isDeferred, isDefined, isFunction } from \"../../../../core/utils/type\";\nimport List from \"../../../../ui/list_light\";\nimport Popup from \"../../../../ui/popup/ui.popup\";\nimport TreeView from \"../../../../ui/tree_view\";\nimport Modules from \"../../../grids/grid_core/m_modules\";\nimport gridCoreUtils from \"../m_utils\";\nconst HEADER_FILTER_CLASS = \"dx-header-filter\";\nconst HEADER_FILTER_MENU_CLASS = \"dx-header-filter-menu\";\nconst DEFAULT_SEARCH_EXPRESSION = \"text\";\nfunction resetChildrenItemSelection(items) {\n  items = items || [];\n  for (let i = 0; i < items.length; i++) {\n    items[i].selected = false;\n    resetChildrenItemSelection(items[i].items);\n  }\n}\nfunction getSelectAllCheckBox(listComponent) {\n  const selector = \"dxTreeView\" === listComponent.NAME ? \".dx-treeview-select-all-item\" : \".dx-list-select-all-checkbox\";\n  return listComponent.$element().find(selector).dxCheckBox(\"instance\");\n}\nfunction updateListSelectAllState(listComponent, filterValues) {\n  if (listComponent.option(\"searchValue\")) {\n    return;\n  }\n  const selectAllCheckBox = getSelectAllCheckBox(listComponent);\n  if (selectAllCheckBox && null !== filterValues && void 0 !== filterValues && filterValues.length) {\n    selectAllCheckBox.option(\"value\", void 0);\n    const originalValueChanged = selectAllCheckBox.option(\"onValueChanged\");\n    selectAllCheckBox.option(\"onValueChanged\", event => {\n      selectAllCheckBox.option(\"onValueChanged\", originalValueChanged);\n      const deferred = listComponent.unselectAll();\n      if (isDeferred(deferred)) {\n        deferred.always(() => {\n          null === originalValueChanged || void 0 === originalValueChanged || originalValueChanged(event);\n        });\n      } else {\n        null === originalValueChanged || void 0 === originalValueChanged || originalValueChanged(event);\n      }\n    });\n  }\n}\nexport function updateHeaderFilterItemSelectionState(item, filterValuesMatch, isExcludeFilter) {\n  if (filterValuesMatch ^ isExcludeFilter) {\n    item.selected = true;\n    if (isExcludeFilter && item.items) {\n      for (let j = 0; j < item.items.length; j++) {\n        if (!item.items[j].selected) {\n          item.selected = void 0;\n          break;\n        }\n      }\n    }\n  } else if (isExcludeFilter || item.selected) {\n    item.selected = false;\n    resetChildrenItemSelection(item.items);\n  }\n}\nexport class HeaderFilterView extends Modules.View {\n  getPopupContainer() {\n    return this._popupContainer;\n  }\n  getListComponent() {\n    return this._listComponent;\n  }\n  applyHeaderFilter(options) {\n    const list = this.getListComponent();\n    const searchValue = list.option(\"searchValue\");\n    const selectAllCheckBox = getSelectAllCheckBox(list);\n    const isAllSelected = !searchValue && !options.isFilterBuilder && (null === selectAllCheckBox || void 0 === selectAllCheckBox ? void 0 : selectAllCheckBox.option(\"value\"));\n    const filterValues = [];\n    const fillSelectedItemKeys = function (filterValues, items, isExclude) {\n      each(items, (_, item) => {\n        if (void 0 !== item.selected && !!item.selected ^ isExclude) {\n          const node = list._getNode(item);\n          const hasChildren = list._hasChildren(node);\n          const hasChildrenWithSelection = hasChildren && item.items && item.items.some(item => item.selected);\n          if (!searchValue || !hasChildrenWithSelection) {\n            filterValues.push(item.value);\n            return;\n          }\n        }\n        if (item.items && item.items.length) {\n          fillSelectedItemKeys(filterValues, item.items, isExclude);\n        }\n      });\n    };\n    if (!isAllSelected) {\n      if (\"tree\" === options.type) {\n        if (options.filterType) {\n          options.filterType = \"include\";\n        }\n        fillSelectedItemKeys(filterValues, list.option(\"items\"), false);\n        options.filterValues = filterValues;\n      }\n    } else {\n      if (\"tree\" === options.type) {\n        options.filterType = \"exclude\";\n      }\n      if (Array.isArray(options.filterValues)) {\n        options.filterValues = [];\n      }\n    }\n    if (options.filterValues && !options.filterValues.length) {\n      options.filterValues = null;\n    }\n    options.apply();\n    this.hideHeaderFilterMenu();\n  }\n  showHeaderFilterMenu($columnElement, options) {\n    const that = this;\n    if (options) {\n      that._initializePopupContainer(options);\n      const popupContainer = that.getPopupContainer();\n      that.hideHeaderFilterMenu();\n      that.updatePopup($columnElement, options);\n      popupContainer.show();\n    }\n  }\n  hideHeaderFilterMenu() {\n    const headerFilterMenu = this.getPopupContainer();\n    headerFilterMenu && headerFilterMenu.hide();\n  }\n  updatePopup($element, options) {\n    const that = this;\n    const showColumnLines = this.option(\"showColumnLines\");\n    const alignment = \"right\" === options.alignment ^ !showColumnLines ? \"left\" : \"right\";\n    that._popupContainer.setAria({\n      role: \"dialog\",\n      label: messageLocalization.format(\"dxDataGrid-headerFilterLabel\")\n    });\n    if (that._popupContainer) {\n      that._cleanPopupContent();\n      that._popupContainer.option(\"position\", {\n        my: `${alignment} top`,\n        at: `${alignment} bottom`,\n        of: $element,\n        collision: \"fit fit\"\n      });\n    }\n  }\n  _getSearchExpr(options, headerFilterOptions) {\n    const {\n      lookup: lookup\n    } = options;\n    const {\n      useDefaultSearchExpr: useDefaultSearchExpr\n    } = options;\n    const headerFilterDataSource = headerFilterOptions.dataSource;\n    const filterSearchExpr = headerFilterOptions.search.searchExpr;\n    if (filterSearchExpr) {\n      return filterSearchExpr;\n    }\n    if (useDefaultSearchExpr || isDefined(headerFilterDataSource) && !isFunction(headerFilterDataSource)) {\n      return \"text\";\n    }\n    if (lookup) {\n      return lookup.displayExpr || \"this\";\n    }\n    if (options.dataSource) {\n      const {\n        group: group\n      } = options.dataSource;\n      if (Array.isArray(group) && group.length > 0) {\n        return group[0].selector;\n      }\n      if (isFunction(group) && !options.remoteFiltering) {\n        return group;\n      }\n    }\n    return options.dataField || options.selector;\n  }\n  _cleanPopupContent() {\n    this._popupContainer && this._popupContainer.$content().empty();\n  }\n  _initializePopupContainer(options) {\n    const that = this;\n    const $element = that.element();\n    const headerFilterOptions = this._normalizeHeaderFilterOptions(options);\n    const {\n      height: height,\n      width: width\n    } = headerFilterOptions;\n    const dxPopupOptions = {\n      width: width,\n      height: height,\n      visible: false,\n      shading: false,\n      showTitle: false,\n      showCloseButton: false,\n      hideOnParentScroll: false,\n      dragEnabled: false,\n      hideOnOutsideClick: true,\n      wrapperAttr: {\n        class: \"dx-header-filter-menu\"\n      },\n      focusStateEnabled: false,\n      toolbarItems: [{\n        toolbar: \"bottom\",\n        location: \"after\",\n        widget: \"dxButton\",\n        options: {\n          text: headerFilterOptions.texts.ok,\n          onClick() {\n            that.applyHeaderFilter(options);\n          }\n        }\n      }, {\n        toolbar: \"bottom\",\n        location: \"after\",\n        widget: \"dxButton\",\n        options: {\n          text: headerFilterOptions.texts.cancel,\n          onClick() {\n            that.hideHeaderFilterMenu();\n          }\n        }\n      }],\n      resizeEnabled: true,\n      onShowing(e) {\n        e.component.$content().parent().addClass(\"dx-dropdowneditor-overlay\");\n        that._initializeListContainer(options, headerFilterOptions);\n        options.onShowing && options.onShowing(e);\n      },\n      onShown() {\n        that.getListComponent().focus();\n      },\n      onHidden: options.onHidden,\n      onInitialized(e) {\n        const {\n          component: component\n        } = e;\n        component.option(\"animation\", component._getDefaultOptions().animation);\n      },\n      _loopFocus: true\n    };\n    if (!isDefined(that._popupContainer)) {\n      that._popupContainer = that._createComponent($element, Popup, dxPopupOptions);\n    } else {\n      that._popupContainer.option(dxPopupOptions);\n    }\n  }\n  _initializeListContainer(options, headerFilterOptions) {\n    const that = this;\n    const $content = that._popupContainer.$content();\n    const needShowSelectAllCheckbox = !options.isFilterBuilder && headerFilterOptions.allowSelectAll;\n    const widgetOptions = {\n      searchEnabled: headerFilterOptions.search.enabled,\n      searchTimeout: headerFilterOptions.search.timeout,\n      searchEditorOptions: headerFilterOptions.search.editorOptions,\n      searchMode: headerFilterOptions.search.mode || \"\",\n      dataSource: options.dataSource,\n      onContentReady() {\n        that.renderCompleted.fire();\n      },\n      itemTemplate(data, _, element) {\n        const $element = $(element);\n        if (options.encodeHtml) {\n          return $element.text(data.text);\n        }\n        return $element.html(data.text);\n      }\n    };\n    function onOptionChanged(e) {\n      if (\"searchValue\" === e.fullName && needShowSelectAllCheckbox && false !== that.option(\"headerFilter.hideSelectAllOnSearch\")) {\n        if (\"tree\" === options.type) {\n          e.component.option(\"showCheckBoxesMode\", e.value ? \"normal\" : \"selectAll\");\n        } else {\n          e.component.option(\"selectionMode\", e.value ? \"multiple\" : \"all\");\n        }\n      }\n    }\n    if (\"tree\" === options.type) {\n      that._listComponent = that._createComponent($(\"<div>\").appendTo($content), TreeView, extend(widgetOptions, {\n        showCheckBoxesMode: needShowSelectAllCheckbox ? \"selectAll\" : \"normal\",\n        onOptionChanged: onOptionChanged,\n        keyExpr: \"id\"\n      }));\n    } else {\n      that._listComponent = that._createComponent($(\"<div>\").appendTo($content), List, extend(widgetOptions, {\n        searchExpr: that._getSearchExpr(options, headerFilterOptions),\n        pageLoadMode: \"scrollBottom\",\n        showSelectionControls: true,\n        selectionMode: needShowSelectAllCheckbox ? \"all\" : \"multiple\",\n        onOptionChanged: onOptionChanged,\n        onSelectionChanged(event) {\n          const {\n            component: listComponent\n          } = event;\n          const items = listComponent.option(\"items\");\n          const selectedItems = listComponent.option(\"selectedItems\");\n          if (!listComponent._selectedItemsUpdating && !listComponent.option(\"searchValue\") && !options.isFilterBuilder) {\n            const filterValues = options.filterValues || [];\n            const isExclude = \"exclude\" === options.filterType;\n            if (0 === selectedItems.length && items.length && (filterValues.length <= 1 || isExclude && filterValues.length === items.length - 1)) {\n              options.filterType = \"include\";\n              options.filterValues = [];\n            } else if (selectedItems.length === items.length) {\n              options.filterType = \"exclude\";\n              options.filterValues = [];\n            }\n          }\n          each(items, (index, item) => {\n            const selected = gridCoreUtils.getIndexByKey(item, selectedItems, null) >= 0;\n            const oldSelected = !!item.selected;\n            if (oldSelected !== selected) {\n              item.selected = selected;\n              options.filterValues = options.filterValues || [];\n              const filterValueIndex = gridCoreUtils.getIndexByKey(item.value, options.filterValues, null);\n              if (filterValueIndex >= 0) {\n                options.filterValues.splice(filterValueIndex, 1);\n              }\n              const isExcludeFilterType = \"exclude\" === options.filterType;\n              if (selected ^ isExcludeFilterType) {\n                options.filterValues.push(item.value);\n              }\n            }\n          });\n          updateListSelectAllState(listComponent, options.filterValues);\n        },\n        onContentReady(e) {\n          const {\n            component: listComponent\n          } = e;\n          const items = listComponent.option(\"items\");\n          const selectedItems = [];\n          each(items, function () {\n            if (this.selected) {\n              selectedItems.push(this);\n            }\n          });\n          listComponent._selectedItemsUpdating = true;\n          listComponent.option(\"selectedItems\", selectedItems);\n          listComponent._selectedItemsUpdating = false;\n          updateListSelectAllState(listComponent, options.filterValues);\n        }\n      }));\n    }\n  }\n  _normalizeHeaderFilterOptions(options) {\n    const generalHeaderFilter = this.option(\"headerFilter\") || {};\n    const specificHeaderFilter = options.headerFilter || {};\n    const generalDeprecated = {\n      search: {\n        enabled: generalHeaderFilter.allowSearch,\n        timeout: generalHeaderFilter.searchTimeout\n      }\n    };\n    const specificDeprecated = {\n      search: {\n        enabled: specificHeaderFilter.allowSearch,\n        mode: specificHeaderFilter.searchMode,\n        timeout: specificHeaderFilter.searchTimeout\n      }\n    };\n    return extend(true, {}, generalHeaderFilter, generalDeprecated, specificHeaderFilter, specificDeprecated);\n  }\n  _renderCore() {\n    this.element().addClass(\"dx-header-filter-menu\");\n  }\n}\nexport const allowHeaderFiltering = function (column) {\n  return isDefined(column.allowHeaderFiltering) ? column.allowHeaderFiltering : column.allowFiltering;\n};\nexport const headerFilterMixin = Base => class extends Base {\n  optionChanged(args) {\n    if (\"headerFilter\" === args.name) {\n      const requireReady = \"columnHeadersView\" === this.name;\n      this._invalidate(requireReady, requireReady);\n      args.handled = true;\n    } else {\n      super.optionChanged(args);\n    }\n  }\n  _applyColumnState(options) {\n    let $headerFilterIndicator;\n    const {\n      rootElement: rootElement\n    } = options;\n    const {\n      column: column\n    } = options;\n    if (\"headerFilter\" === options.name) {\n      rootElement.find(\".dx-header-filter\").remove();\n      if (allowHeaderFiltering(column)) {\n        $headerFilterIndicator = super._applyColumnState(options).toggleClass(\"dx-header-filter-empty\", this._isHeaderFilterEmpty(column));\n        if (!this.option(\"useLegacyKeyboardNavigation\")) {\n          $headerFilterIndicator.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n        }\n        const indicatorLabel = messageLocalization.format(\"dxDataGrid-headerFilterIndicatorLabel\", column.caption);\n        $headerFilterIndicator.attr(\"aria-label\", indicatorLabel);\n        $headerFilterIndicator.attr(\"aria-haspopup\", \"dialog\");\n        $headerFilterIndicator.attr(\"role\", \"button\");\n      }\n      return $headerFilterIndicator;\n    }\n    return super._applyColumnState(options);\n  }\n  _isHeaderFilterEmpty(column) {\n    return !column.filterValues || !column.filterValues.length;\n  }\n  _getIndicatorClassName(name) {\n    if (\"headerFilter\" === name) {\n      return \"dx-header-filter\";\n    }\n    return super._getIndicatorClassName(name);\n  }\n  _renderIndicator(options) {\n    const $container = options.container;\n    const $indicator = options.indicator;\n    if (\"headerFilter\" === options.name) {\n      const rtlEnabled = this.option(\"rtlEnabled\");\n      if ($container.children().length && (!rtlEnabled && \"right\" === options.columnAlignment || rtlEnabled && \"left\" === options.columnAlignment)) {\n        $container.prepend($indicator);\n        return;\n      }\n    }\n    super._renderIndicator(options);\n  }\n};","map":{"version":3,"names":["messageLocalization","$","extend","each","isDeferred","isDefined","isFunction","List","Popup","TreeView","Modules","gridCoreUtils","HEADER_FILTER_CLASS","HEADER_FILTER_MENU_CLASS","DEFAULT_SEARCH_EXPRESSION","resetChildrenItemSelection","items","i","length","selected","getSelectAllCheckBox","listComponent","selector","NAME","$element","find","dxCheckBox","updateListSelectAllState","filterValues","option","selectAllCheckBox","originalValueChanged","event","deferred","unselectAll","always","updateHeaderFilterItemSelectionState","item","filterValuesMatch","isExcludeFilter","j","HeaderFilterView","View","getPopupContainer","_popupContainer","getListComponent","_listComponent","applyHeaderFilter","options","list","searchValue","isAllSelected","isFilterBuilder","fillSelectedItemKeys","isExclude","_","node","_getNode","hasChildren","_hasChildren","hasChildrenWithSelection","some","push","value","type","filterType","Array","isArray","apply","hideHeaderFilterMenu","showHeaderFilterMenu","$columnElement","that","_initializePopupContainer","popupContainer","updatePopup","show","headerFilterMenu","hide","showColumnLines","alignment","setAria","role","label","format","_cleanPopupContent","my","at","of","collision","_getSearchExpr","headerFilterOptions","lookup","useDefaultSearchExpr","headerFilterDataSource","dataSource","filterSearchExpr","search","searchExpr","displayExpr","group","remoteFiltering","dataField","$content","empty","element","_normalizeHeaderFilterOptions","height","width","dxPopupOptions","visible","shading","showTitle","showCloseButton","hideOnParentScroll","dragEnabled","hideOnOutsideClick","wrapperAttr","class","focusStateEnabled","toolbarItems","toolbar","location","widget","text","texts","ok","onClick","cancel","resizeEnabled","onShowing","e","component","parent","addClass","_initializeListContainer","onShown","focus","onHidden","onInitialized","_getDefaultOptions","animation","_loopFocus","_createComponent","needShowSelectAllCheckbox","allowSelectAll","widgetOptions","searchEnabled","enabled","searchTimeout","timeout","searchEditorOptions","editorOptions","searchMode","mode","onContentReady","renderCompleted","fire","itemTemplate","data","encodeHtml","html","onOptionChanged","fullName","appendTo","showCheckBoxesMode","keyExpr","pageLoadMode","showSelectionControls","selectionMode","onSelectionChanged","selectedItems","_selectedItemsUpdating","index","getIndexByKey","oldSelected","filterValueIndex","splice","isExcludeFilterType","generalHeaderFilter","specificHeaderFilter","headerFilter","generalDeprecated","allowSearch","specificDeprecated","_renderCore","allowHeaderFiltering","column","allowFiltering","headerFilterMixin","Base","optionChanged","args","name","requireReady","_invalidate","handled","_applyColumnState","$headerFilterIndicator","rootElement","remove","toggleClass","_isHeaderFilterEmpty","attr","indicatorLabel","caption","_getIndicatorClassName","_renderIndicator","$container","container","$indicator","indicator","rtlEnabled","children","columnAlignment","prepend"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/client/node_modules/devextreme/esm/__internal/grids/grid_core/header_filter/m_header_filter_core.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/__internal/grids/grid_core/header_filter/m_header_filter_core.js)\r\n * Version: 24.2.7\r\n * Build date: Mon Apr 28 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport \"../../../ui/list/modules/m_search\";\r\nimport \"../../../ui/list/modules/m_selection\";\r\nimport messageLocalization from \"../../../../common/core/localization/message\";\r\nimport $ from \"../../../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isDeferred,\r\n    isDefined,\r\n    isFunction\r\n} from \"../../../../core/utils/type\";\r\nimport List from \"../../../../ui/list_light\";\r\nimport Popup from \"../../../../ui/popup/ui.popup\";\r\nimport TreeView from \"../../../../ui/tree_view\";\r\nimport Modules from \"../../../grids/grid_core/m_modules\";\r\nimport gridCoreUtils from \"../m_utils\";\r\nconst HEADER_FILTER_CLASS = \"dx-header-filter\";\r\nconst HEADER_FILTER_MENU_CLASS = \"dx-header-filter-menu\";\r\nconst DEFAULT_SEARCH_EXPRESSION = \"text\";\r\n\r\nfunction resetChildrenItemSelection(items) {\r\n    items = items || [];\r\n    for (let i = 0; i < items.length; i++) {\r\n        items[i].selected = false;\r\n        resetChildrenItemSelection(items[i].items)\r\n    }\r\n}\r\n\r\nfunction getSelectAllCheckBox(listComponent) {\r\n    const selector = \"dxTreeView\" === listComponent.NAME ? \".dx-treeview-select-all-item\" : \".dx-list-select-all-checkbox\";\r\n    return listComponent.$element().find(selector).dxCheckBox(\"instance\")\r\n}\r\n\r\nfunction updateListSelectAllState(listComponent, filterValues) {\r\n    if (listComponent.option(\"searchValue\")) {\r\n        return\r\n    }\r\n    const selectAllCheckBox = getSelectAllCheckBox(listComponent);\r\n    if (selectAllCheckBox && null !== filterValues && void 0 !== filterValues && filterValues.length) {\r\n        selectAllCheckBox.option(\"value\", void 0);\r\n        const originalValueChanged = selectAllCheckBox.option(\"onValueChanged\");\r\n        selectAllCheckBox.option(\"onValueChanged\", (event => {\r\n            selectAllCheckBox.option(\"onValueChanged\", originalValueChanged);\r\n            const deferred = listComponent.unselectAll();\r\n            if (isDeferred(deferred)) {\r\n                deferred.always((() => {\r\n                    null === originalValueChanged || void 0 === originalValueChanged || originalValueChanged(event)\r\n                }))\r\n            } else {\r\n                null === originalValueChanged || void 0 === originalValueChanged || originalValueChanged(event)\r\n            }\r\n        }))\r\n    }\r\n}\r\nexport function updateHeaderFilterItemSelectionState(item, filterValuesMatch, isExcludeFilter) {\r\n    if (filterValuesMatch ^ isExcludeFilter) {\r\n        item.selected = true;\r\n        if (isExcludeFilter && item.items) {\r\n            for (let j = 0; j < item.items.length; j++) {\r\n                if (!item.items[j].selected) {\r\n                    item.selected = void 0;\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    } else if (isExcludeFilter || item.selected) {\r\n        item.selected = false;\r\n        resetChildrenItemSelection(item.items)\r\n    }\r\n}\r\nexport class HeaderFilterView extends Modules.View {\r\n    getPopupContainer() {\r\n        return this._popupContainer\r\n    }\r\n    getListComponent() {\r\n        return this._listComponent\r\n    }\r\n    applyHeaderFilter(options) {\r\n        const list = this.getListComponent();\r\n        const searchValue = list.option(\"searchValue\");\r\n        const selectAllCheckBox = getSelectAllCheckBox(list);\r\n        const isAllSelected = !searchValue && !options.isFilterBuilder && (null === selectAllCheckBox || void 0 === selectAllCheckBox ? void 0 : selectAllCheckBox.option(\"value\"));\r\n        const filterValues = [];\r\n        const fillSelectedItemKeys = function(filterValues, items, isExclude) {\r\n            each(items, ((_, item) => {\r\n                if (void 0 !== item.selected && !!item.selected ^ isExclude) {\r\n                    const node = list._getNode(item);\r\n                    const hasChildren = list._hasChildren(node);\r\n                    const hasChildrenWithSelection = hasChildren && item.items && item.items.some((item => item.selected));\r\n                    if (!searchValue || !hasChildrenWithSelection) {\r\n                        filterValues.push(item.value);\r\n                        return\r\n                    }\r\n                }\r\n                if (item.items && item.items.length) {\r\n                    fillSelectedItemKeys(filterValues, item.items, isExclude)\r\n                }\r\n            }))\r\n        };\r\n        if (!isAllSelected) {\r\n            if (\"tree\" === options.type) {\r\n                if (options.filterType) {\r\n                    options.filterType = \"include\"\r\n                }\r\n                fillSelectedItemKeys(filterValues, list.option(\"items\"), false);\r\n                options.filterValues = filterValues\r\n            }\r\n        } else {\r\n            if (\"tree\" === options.type) {\r\n                options.filterType = \"exclude\"\r\n            }\r\n            if (Array.isArray(options.filterValues)) {\r\n                options.filterValues = []\r\n            }\r\n        }\r\n        if (options.filterValues && !options.filterValues.length) {\r\n            options.filterValues = null\r\n        }\r\n        options.apply();\r\n        this.hideHeaderFilterMenu()\r\n    }\r\n    showHeaderFilterMenu($columnElement, options) {\r\n        const that = this;\r\n        if (options) {\r\n            that._initializePopupContainer(options);\r\n            const popupContainer = that.getPopupContainer();\r\n            that.hideHeaderFilterMenu();\r\n            that.updatePopup($columnElement, options);\r\n            popupContainer.show()\r\n        }\r\n    }\r\n    hideHeaderFilterMenu() {\r\n        const headerFilterMenu = this.getPopupContainer();\r\n        headerFilterMenu && headerFilterMenu.hide()\r\n    }\r\n    updatePopup($element, options) {\r\n        const that = this;\r\n        const showColumnLines = this.option(\"showColumnLines\");\r\n        const alignment = \"right\" === options.alignment ^ !showColumnLines ? \"left\" : \"right\";\r\n        that._popupContainer.setAria({\r\n            role: \"dialog\",\r\n            label: messageLocalization.format(\"dxDataGrid-headerFilterLabel\")\r\n        });\r\n        if (that._popupContainer) {\r\n            that._cleanPopupContent();\r\n            that._popupContainer.option(\"position\", {\r\n                my: `${alignment} top`,\r\n                at: `${alignment} bottom`,\r\n                of: $element,\r\n                collision: \"fit fit\"\r\n            })\r\n        }\r\n    }\r\n    _getSearchExpr(options, headerFilterOptions) {\r\n        const {\r\n            lookup: lookup\r\n        } = options;\r\n        const {\r\n            useDefaultSearchExpr: useDefaultSearchExpr\r\n        } = options;\r\n        const headerFilterDataSource = headerFilterOptions.dataSource;\r\n        const filterSearchExpr = headerFilterOptions.search.searchExpr;\r\n        if (filterSearchExpr) {\r\n            return filterSearchExpr\r\n        }\r\n        if (useDefaultSearchExpr || isDefined(headerFilterDataSource) && !isFunction(headerFilterDataSource)) {\r\n            return \"text\"\r\n        }\r\n        if (lookup) {\r\n            return lookup.displayExpr || \"this\"\r\n        }\r\n        if (options.dataSource) {\r\n            const {\r\n                group: group\r\n            } = options.dataSource;\r\n            if (Array.isArray(group) && group.length > 0) {\r\n                return group[0].selector\r\n            }\r\n            if (isFunction(group) && !options.remoteFiltering) {\r\n                return group\r\n            }\r\n        }\r\n        return options.dataField || options.selector\r\n    }\r\n    _cleanPopupContent() {\r\n        this._popupContainer && this._popupContainer.$content().empty()\r\n    }\r\n    _initializePopupContainer(options) {\r\n        const that = this;\r\n        const $element = that.element();\r\n        const headerFilterOptions = this._normalizeHeaderFilterOptions(options);\r\n        const {\r\n            height: height,\r\n            width: width\r\n        } = headerFilterOptions;\r\n        const dxPopupOptions = {\r\n            width: width,\r\n            height: height,\r\n            visible: false,\r\n            shading: false,\r\n            showTitle: false,\r\n            showCloseButton: false,\r\n            hideOnParentScroll: false,\r\n            dragEnabled: false,\r\n            hideOnOutsideClick: true,\r\n            wrapperAttr: {\r\n                class: \"dx-header-filter-menu\"\r\n            },\r\n            focusStateEnabled: false,\r\n            toolbarItems: [{\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    text: headerFilterOptions.texts.ok,\r\n                    onClick() {\r\n                        that.applyHeaderFilter(options)\r\n                    }\r\n                }\r\n            }, {\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    text: headerFilterOptions.texts.cancel,\r\n                    onClick() {\r\n                        that.hideHeaderFilterMenu()\r\n                    }\r\n                }\r\n            }],\r\n            resizeEnabled: true,\r\n            onShowing(e) {\r\n                e.component.$content().parent().addClass(\"dx-dropdowneditor-overlay\");\r\n                that._initializeListContainer(options, headerFilterOptions);\r\n                options.onShowing && options.onShowing(e)\r\n            },\r\n            onShown() {\r\n                that.getListComponent().focus()\r\n            },\r\n            onHidden: options.onHidden,\r\n            onInitialized(e) {\r\n                const {\r\n                    component: component\r\n                } = e;\r\n                component.option(\"animation\", component._getDefaultOptions().animation)\r\n            },\r\n            _loopFocus: true\r\n        };\r\n        if (!isDefined(that._popupContainer)) {\r\n            that._popupContainer = that._createComponent($element, Popup, dxPopupOptions)\r\n        } else {\r\n            that._popupContainer.option(dxPopupOptions)\r\n        }\r\n    }\r\n    _initializeListContainer(options, headerFilterOptions) {\r\n        const that = this;\r\n        const $content = that._popupContainer.$content();\r\n        const needShowSelectAllCheckbox = !options.isFilterBuilder && headerFilterOptions.allowSelectAll;\r\n        const widgetOptions = {\r\n            searchEnabled: headerFilterOptions.search.enabled,\r\n            searchTimeout: headerFilterOptions.search.timeout,\r\n            searchEditorOptions: headerFilterOptions.search.editorOptions,\r\n            searchMode: headerFilterOptions.search.mode || \"\",\r\n            dataSource: options.dataSource,\r\n            onContentReady() {\r\n                that.renderCompleted.fire()\r\n            },\r\n            itemTemplate(data, _, element) {\r\n                const $element = $(element);\r\n                if (options.encodeHtml) {\r\n                    return $element.text(data.text)\r\n                }\r\n                return $element.html(data.text)\r\n            }\r\n        };\r\n\r\n        function onOptionChanged(e) {\r\n            if (\"searchValue\" === e.fullName && needShowSelectAllCheckbox && false !== that.option(\"headerFilter.hideSelectAllOnSearch\")) {\r\n                if (\"tree\" === options.type) {\r\n                    e.component.option(\"showCheckBoxesMode\", e.value ? \"normal\" : \"selectAll\")\r\n                } else {\r\n                    e.component.option(\"selectionMode\", e.value ? \"multiple\" : \"all\")\r\n                }\r\n            }\r\n        }\r\n        if (\"tree\" === options.type) {\r\n            that._listComponent = that._createComponent($(\"<div>\").appendTo($content), TreeView, extend(widgetOptions, {\r\n                showCheckBoxesMode: needShowSelectAllCheckbox ? \"selectAll\" : \"normal\",\r\n                onOptionChanged: onOptionChanged,\r\n                keyExpr: \"id\"\r\n            }))\r\n        } else {\r\n            that._listComponent = that._createComponent($(\"<div>\").appendTo($content), List, extend(widgetOptions, {\r\n                searchExpr: that._getSearchExpr(options, headerFilterOptions),\r\n                pageLoadMode: \"scrollBottom\",\r\n                showSelectionControls: true,\r\n                selectionMode: needShowSelectAllCheckbox ? \"all\" : \"multiple\",\r\n                onOptionChanged: onOptionChanged,\r\n                onSelectionChanged(event) {\r\n                    const {\r\n                        component: listComponent\r\n                    } = event;\r\n                    const items = listComponent.option(\"items\");\r\n                    const selectedItems = listComponent.option(\"selectedItems\");\r\n                    if (!listComponent._selectedItemsUpdating && !listComponent.option(\"searchValue\") && !options.isFilterBuilder) {\r\n                        const filterValues = options.filterValues || [];\r\n                        const isExclude = \"exclude\" === options.filterType;\r\n                        if (0 === selectedItems.length && items.length && (filterValues.length <= 1 || isExclude && filterValues.length === items.length - 1)) {\r\n                            options.filterType = \"include\";\r\n                            options.filterValues = []\r\n                        } else if (selectedItems.length === items.length) {\r\n                            options.filterType = \"exclude\";\r\n                            options.filterValues = []\r\n                        }\r\n                    }\r\n                    each(items, ((index, item) => {\r\n                        const selected = gridCoreUtils.getIndexByKey(item, selectedItems, null) >= 0;\r\n                        const oldSelected = !!item.selected;\r\n                        if (oldSelected !== selected) {\r\n                            item.selected = selected;\r\n                            options.filterValues = options.filterValues || [];\r\n                            const filterValueIndex = gridCoreUtils.getIndexByKey(item.value, options.filterValues, null);\r\n                            if (filterValueIndex >= 0) {\r\n                                options.filterValues.splice(filterValueIndex, 1)\r\n                            }\r\n                            const isExcludeFilterType = \"exclude\" === options.filterType;\r\n                            if (selected ^ isExcludeFilterType) {\r\n                                options.filterValues.push(item.value)\r\n                            }\r\n                        }\r\n                    }));\r\n                    updateListSelectAllState(listComponent, options.filterValues)\r\n                },\r\n                onContentReady(e) {\r\n                    const {\r\n                        component: listComponent\r\n                    } = e;\r\n                    const items = listComponent.option(\"items\");\r\n                    const selectedItems = [];\r\n                    each(items, (function() {\r\n                        if (this.selected) {\r\n                            selectedItems.push(this)\r\n                        }\r\n                    }));\r\n                    listComponent._selectedItemsUpdating = true;\r\n                    listComponent.option(\"selectedItems\", selectedItems);\r\n                    listComponent._selectedItemsUpdating = false;\r\n                    updateListSelectAllState(listComponent, options.filterValues)\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    _normalizeHeaderFilterOptions(options) {\r\n        const generalHeaderFilter = this.option(\"headerFilter\") || {};\r\n        const specificHeaderFilter = options.headerFilter || {};\r\n        const generalDeprecated = {\r\n            search: {\r\n                enabled: generalHeaderFilter.allowSearch,\r\n                timeout: generalHeaderFilter.searchTimeout\r\n            }\r\n        };\r\n        const specificDeprecated = {\r\n            search: {\r\n                enabled: specificHeaderFilter.allowSearch,\r\n                mode: specificHeaderFilter.searchMode,\r\n                timeout: specificHeaderFilter.searchTimeout\r\n            }\r\n        };\r\n        return extend(true, {}, generalHeaderFilter, generalDeprecated, specificHeaderFilter, specificDeprecated)\r\n    }\r\n    _renderCore() {\r\n        this.element().addClass(\"dx-header-filter-menu\")\r\n    }\r\n}\r\nexport const allowHeaderFiltering = function(column) {\r\n    return isDefined(column.allowHeaderFiltering) ? column.allowHeaderFiltering : column.allowFiltering\r\n};\r\nexport const headerFilterMixin = Base => class extends Base {\r\n    optionChanged(args) {\r\n        if (\"headerFilter\" === args.name) {\r\n            const requireReady = \"columnHeadersView\" === this.name;\r\n            this._invalidate(requireReady, requireReady);\r\n            args.handled = true\r\n        } else {\r\n            super.optionChanged(args)\r\n        }\r\n    }\r\n    _applyColumnState(options) {\r\n        let $headerFilterIndicator;\r\n        const {\r\n            rootElement: rootElement\r\n        } = options;\r\n        const {\r\n            column: column\r\n        } = options;\r\n        if (\"headerFilter\" === options.name) {\r\n            rootElement.find(\".dx-header-filter\").remove();\r\n            if (allowHeaderFiltering(column)) {\r\n                $headerFilterIndicator = super._applyColumnState(options).toggleClass(\"dx-header-filter-empty\", this._isHeaderFilterEmpty(column));\r\n                if (!this.option(\"useLegacyKeyboardNavigation\")) {\r\n                    $headerFilterIndicator.attr(\"tabindex\", this.option(\"tabindex\") || 0)\r\n                }\r\n                const indicatorLabel = messageLocalization.format(\"dxDataGrid-headerFilterIndicatorLabel\", column.caption);\r\n                $headerFilterIndicator.attr(\"aria-label\", indicatorLabel);\r\n                $headerFilterIndicator.attr(\"aria-haspopup\", \"dialog\");\r\n                $headerFilterIndicator.attr(\"role\", \"button\")\r\n            }\r\n            return $headerFilterIndicator\r\n        }\r\n        return super._applyColumnState(options)\r\n    }\r\n    _isHeaderFilterEmpty(column) {\r\n        return !column.filterValues || !column.filterValues.length\r\n    }\r\n    _getIndicatorClassName(name) {\r\n        if (\"headerFilter\" === name) {\r\n            return \"dx-header-filter\"\r\n        }\r\n        return super._getIndicatorClassName(name)\r\n    }\r\n    _renderIndicator(options) {\r\n        const $container = options.container;\r\n        const $indicator = options.indicator;\r\n        if (\"headerFilter\" === options.name) {\r\n            const rtlEnabled = this.option(\"rtlEnabled\");\r\n            if ($container.children().length && (!rtlEnabled && \"right\" === options.columnAlignment || rtlEnabled && \"left\" === options.columnAlignment)) {\r\n                $container.prepend($indicator);\r\n                return\r\n            }\r\n        }\r\n        super._renderIndicator(options)\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}