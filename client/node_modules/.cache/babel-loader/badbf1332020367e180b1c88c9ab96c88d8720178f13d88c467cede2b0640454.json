{"ast":null,"code":"const TableComponent = ({\n  planets,\n  suitabilities\n}) => {\n  const DataGrid = DevExpress.ui.dxDataGrid;\n  const CustomStore = DevExpress.data.CustomStore;\n\n  // Custom Store for CRUD operations\n  const createCustomStore = planetsData => {\n    let data = [...planetsData];\n    return new CustomStore({\n      key: 'id',\n      load: () => Promise.resolve(data),\n      insert: values => {\n        const newId = Math.max(...data.map(item => item.id), 0) + 1;\n        const newItem = {\n          id: newId,\n          ...values\n        };\n        data = [...data, newItem];\n        return Promise.resolve(newItem);\n      },\n      update: (key, values) => {\n        data = data.map(item => item.id === key ? {\n          ...item,\n          ...values\n        } : item);\n        return Promise.resolve();\n      },\n      remove: key => {\n        data = data.filter(item => item.id !== key);\n        return Promise.resolve();\n      }\n    });\n  };\n  const store = createCustomStore(planets);\n  return React.createElement('div', {\n    className: 'bg-white shadow-md rounded-lg p-4'\n  }, React.createElement(DataGrid, {\n    dataSource: store,\n    showBorders: true,\n    noDataText: 'Ничего не найдено',\n    wordWrapEnabled: true,\n    children: [React.createElement(DevExpress.ui.dxSearchPanel, {\n      visible: true,\n      width: 340,\n      placeholder: 'Введите данные для поиска...'\n    }), React.createElement(DevExpress.ui.dxHeaderFilter, {\n      visible: true\n    }), React.createElement(DevExpress.ui.dxEditing, {\n      mode: 'popup',\n      allowUpdating: true,\n      allowDeleting: true,\n      allowAdding: true,\n      useIcons: true,\n      texts: {\n        addRow: 'Добавить',\n        deleteRow: 'Удалить',\n        editRow: 'Изменить',\n        saveRowChanges: 'Сохранить',\n        cancelRowChanges: 'Отменить',\n        confirmDeleteMessage: 'Вы действительно хотите удалить?'\n      },\n      children: [React.createElement(DevExpress.ui.dxPopup, {\n        title: 'Информация о планете',\n        showTitle: true,\n        width: 700,\n        height: 450\n      }), React.createElement(DevExpress.ui.dxForm, {\n        children: [React.createElement(DevExpress.ui.dxItem, {\n          itemType: 'group',\n          colCount: 2,\n          colSpan: 2,\n          items: [{\n            dataField: 'name'\n          }, {\n            dataField: 'type'\n          }, {\n            dataField: 'distance'\n          }, {\n            dataField: 'suitabilityId'\n          }]\n        }), React.createElement(DevExpress.ui.dxItem, {\n          itemType: 'group',\n          colCount: 1,\n          colSpan: 2,\n          items: [{\n            dataField: 'note',\n            editorType: 'dxTextArea',\n            editorOptions: {\n              height: 100\n            }\n          }]\n        })]\n      })]\n    }), React.createElement(DevExpress.ui.dxColumn, {\n      dataField: 'id',\n      caption: 'Идентификатор',\n      width: 100,\n      dataType: 'number',\n      allowEditing: false\n    }), React.createElement(DevExpress.ui.dxColumn, {\n      dataField: 'name',\n      caption: 'Название',\n      dataType: 'string'\n    }), React.createElement(DevExpress.ui.dxColumn, {\n      dataField: 'type',\n      caption: 'Тип',\n      dataType: 'string'\n    }), React.createElement(DevExpress.ui.dxColumn, {\n      dataField: 'distance',\n      caption: 'Расстояние (св. годы)',\n      dataType: 'number'\n    }), React.createElement(DevExpress.ui.dxColumn, {\n      dataField: 'suitabilityId',\n      caption: 'Пригодность',\n      width: 150,\n      dataType: 'number',\n      children: [React.createElement(DevExpress.ui.dxLookup, {\n        dataSource: suitabilities,\n        valueExpr: 'id',\n        displayExpr: 'name'\n      })]\n    }), React.createElement(DevExpress.ui.dxColumn, {\n      dataField: 'note',\n      caption: 'Заметки',\n      dataType: 'string',\n      width: 300\n    })]\n  }));\n};\n_c = TableComponent;\nexport default TableComponent;\nvar _c;\n$RefreshReg$(_c, \"TableComponent\");","map":{"version":3,"names":["TableComponent","planets","suitabilities","DataGrid","DevExpress","ui","dxDataGrid","CustomStore","data","createCustomStore","planetsData","key","load","Promise","resolve","insert","values","newId","Math","max","map","item","id","newItem","update","remove","filter","store","React","createElement","className","dataSource","showBorders","noDataText","wordWrapEnabled","children","dxSearchPanel","visible","width","placeholder","dxHeaderFilter","dxEditing","mode","allowUpdating","allowDeleting","allowAdding","useIcons","texts","addRow","deleteRow","editRow","saveRowChanges","cancelRowChanges","confirmDeleteMessage","dxPopup","title","showTitle","height","dxForm","dxItem","itemType","colCount","colSpan","items","dataField","editorType","editorOptions","dxColumn","caption","dataType","allowEditing","dxLookup","valueExpr","displayExpr","_c","$RefreshReg$"],"sources":["C:/Users/Sofia/Desktop/Репозиторий ЦК/internship_project/src/components/table.js"],"sourcesContent":["const TableComponent = ({ planets, suitabilities }) => {\r\n  const DataGrid = DevExpress.ui.dxDataGrid;\r\n  const CustomStore = DevExpress.data.CustomStore;\r\n\r\n  // Custom Store for CRUD operations\r\n  const createCustomStore = (planetsData) => {\r\n    let data = [...planetsData];\r\n    return new CustomStore({\r\n      key: 'id',\r\n      load: () => Promise.resolve(data),\r\n      insert: (values) => {\r\n        const newId = Math.max(...data.map(item => item.id), 0) + 1;\r\n        const newItem = { id: newId, ...values };\r\n        data = [...data, newItem];\r\n        return Promise.resolve(newItem);\r\n      },\r\n      update: (key, values) => {\r\n        data = data.map(item =>\r\n          item.id === key ? { ...item, ...values } : item\r\n        );\r\n        return Promise.resolve();\r\n      },\r\n      remove: (key) => {\r\n        data = data.filter(item => item.id !== key);\r\n        return Promise.resolve();\r\n      }\r\n    });\r\n  };\r\n\r\n  const store = createCustomStore(planets);\r\n\r\n  return React.createElement(\r\n    'div',\r\n    { className: 'bg-white shadow-md rounded-lg p-4' },\r\n    React.createElement(DataGrid, {\r\n      dataSource: store,\r\n      showBorders: true,\r\n      noDataText: 'Ничего не найдено',\r\n      wordWrapEnabled: true,\r\n      children: [\r\n        React.createElement(DevExpress.ui.dxSearchPanel, {\r\n          visible: true,\r\n          width: 340,\r\n          placeholder: 'Введите данные для поиска...'\r\n        }),\r\n        React.createElement(DevExpress.ui.dxHeaderFilter, { visible: true }),\r\n        React.createElement(DevExpress.ui.dxEditing, {\r\n          mode: 'popup',\r\n          allowUpdating: true,\r\n          allowDeleting: true,\r\n          allowAdding: true,\r\n          useIcons: true,\r\n          texts: {\r\n            addRow: 'Добавить',\r\n            deleteRow: 'Удалить',\r\n            editRow: 'Изменить',\r\n            saveRowChanges: 'Сохранить',\r\n            cancelRowChanges: 'Отменить',\r\n            confirmDeleteMessage: 'Вы действительно хотите удалить?'\r\n          },\r\n          children: [\r\n            React.createElement(DevExpress.ui.dxPopup, {\r\n              title: 'Информация о планете',\r\n              showTitle: true,\r\n              width: 700,\r\n              height: 450\r\n            }),\r\n            React.createElement(DevExpress.ui.dxForm, {\r\n              children: [\r\n                React.createElement(DevExpress.ui.dxItem, {\r\n                  itemType: 'group',\r\n                  colCount: 2,\r\n                  colSpan: 2,\r\n                  items: [\r\n                    { dataField: 'name' },\r\n                    { dataField: 'type' },\r\n                    { dataField: 'distance' },\r\n                    { dataField: 'suitabilityId' }\r\n                  ]\r\n                }),\r\n                React.createElement(DevExpress.ui.dxItem, {\r\n                  itemType: 'group',\r\n                  colCount: 1,\r\n                  colSpan: 2,\r\n                  items: [\r\n                    {\r\n                      dataField: 'note',\r\n                      editorType: 'dxTextArea',\r\n                      editorOptions: { height: 100 }\r\n                    }\r\n                  ]\r\n                })\r\n              ]\r\n            })\r\n          ]\r\n        }),\r\n        React.createElement(DevExpress.ui.dxColumn, {\r\n          dataField: 'id',\r\n          caption: 'Идентификатор',\r\n          width: 100,\r\n          dataType: 'number',\r\n          allowEditing: false\r\n        }),\r\n        React.createElement(DevExpress.ui.dxColumn, {\r\n          dataField: 'name',\r\n          caption: 'Название',\r\n          dataType: 'string'\r\n        }),\r\n        React.createElement(DevExpress.ui.dxColumn, {\r\n          dataField: 'type',\r\n          caption: 'Тип',\r\n          dataType: 'string'\r\n        }),\r\n        React.createElement(DevExpress.ui.dxColumn, {\r\n          dataField: 'distance',\r\n          caption: 'Расстояние (св. годы)',\r\n          dataType: 'number'\r\n        }),\r\n        React.createElement(DevExpress.ui.dxColumn, {\r\n          dataField: 'suitabilityId',\r\n          caption: 'Пригодность',\r\n          width: 150,\r\n          dataType: 'number',\r\n          children: [\r\n            React.createElement(DevExpress.ui.dxLookup, {\r\n              dataSource: suitabilities,\r\n              valueExpr: 'id',\r\n              displayExpr: 'name'\r\n            })\r\n          ]\r\n        }),\r\n        React.createElement(DevExpress.ui.dxColumn, {\r\n          dataField: 'note',\r\n          caption: 'Заметки',\r\n          dataType: 'string',\r\n          width: 300\r\n        })\r\n      ]\r\n    })\r\n  );\r\n};\r\n\r\nexport default TableComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}